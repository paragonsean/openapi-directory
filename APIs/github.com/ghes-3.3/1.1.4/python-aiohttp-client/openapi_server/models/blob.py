# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Blob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, encoding: str=None, highlighted_content: str=None, node_id: str=None, sha: str=None, size: int=None, url: str=None):
        """Blob - a model defined in OpenAPI

        :param content: The content of this Blob.
        :param encoding: The encoding of this Blob.
        :param highlighted_content: The highlighted_content of this Blob.
        :param node_id: The node_id of this Blob.
        :param sha: The sha of this Blob.
        :param size: The size of this Blob.
        :param url: The url of this Blob.
        """
        self.openapi_types = {
            'content': str,
            'encoding': str,
            'highlighted_content': str,
            'node_id': str,
            'sha': str,
            'size': int,
            'url': str
        }

        self.attribute_map = {
            'content': 'content',
            'encoding': 'encoding',
            'highlighted_content': 'highlighted_content',
            'node_id': 'node_id',
            'sha': 'sha',
            'size': 'size',
            'url': 'url'
        }

        self._content = content
        self._encoding = encoding
        self._highlighted_content = highlighted_content
        self._node_id = node_id
        self._sha = sha
        self._size = size
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Blob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The blob of this Blob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Blob.


        :return: The content of this Blob.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Blob.


        :param content: The content of this Blob.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def encoding(self):
        """Gets the encoding of this Blob.


        :return: The encoding of this Blob.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Blob.


        :param encoding: The encoding of this Blob.
        :type encoding: str
        """
        if encoding is None:
            raise ValueError("Invalid value for `encoding`, must not be `None`")

        self._encoding = encoding

    @property
    def highlighted_content(self):
        """Gets the highlighted_content of this Blob.


        :return: The highlighted_content of this Blob.
        :rtype: str
        """
        return self._highlighted_content

    @highlighted_content.setter
    def highlighted_content(self, highlighted_content):
        """Sets the highlighted_content of this Blob.


        :param highlighted_content: The highlighted_content of this Blob.
        :type highlighted_content: str
        """

        self._highlighted_content = highlighted_content

    @property
    def node_id(self):
        """Gets the node_id of this Blob.


        :return: The node_id of this Blob.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Blob.


        :param node_id: The node_id of this Blob.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def sha(self):
        """Gets the sha of this Blob.


        :return: The sha of this Blob.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this Blob.


        :param sha: The sha of this Blob.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def size(self):
        """Gets the size of this Blob.


        :return: The size of this Blob.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Blob.


        :param size: The size of this Blob.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def url(self):
        """Gets the url of this Blob.


        :return: The url of this Blob.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Blob.


        :param url: The url of this Blob.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
