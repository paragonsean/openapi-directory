# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckRunOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations_count: int=None, annotations_url: str=None, summary: str=None, text: str=None, title: str=None):
        """CheckRunOutput - a model defined in OpenAPI

        :param annotations_count: The annotations_count of this CheckRunOutput.
        :param annotations_url: The annotations_url of this CheckRunOutput.
        :param summary: The summary of this CheckRunOutput.
        :param text: The text of this CheckRunOutput.
        :param title: The title of this CheckRunOutput.
        """
        self.openapi_types = {
            'annotations_count': int,
            'annotations_url': str,
            'summary': str,
            'text': str,
            'title': str
        }

        self.attribute_map = {
            'annotations_count': 'annotations_count',
            'annotations_url': 'annotations_url',
            'summary': 'summary',
            'text': 'text',
            'title': 'title'
        }

        self._annotations_count = annotations_count
        self._annotations_url = annotations_url
        self._summary = summary
        self._text = text
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckRunOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check_run_output of this CheckRunOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations_count(self):
        """Gets the annotations_count of this CheckRunOutput.


        :return: The annotations_count of this CheckRunOutput.
        :rtype: int
        """
        return self._annotations_count

    @annotations_count.setter
    def annotations_count(self, annotations_count):
        """Sets the annotations_count of this CheckRunOutput.


        :param annotations_count: The annotations_count of this CheckRunOutput.
        :type annotations_count: int
        """
        if annotations_count is None:
            raise ValueError("Invalid value for `annotations_count`, must not be `None`")

        self._annotations_count = annotations_count

    @property
    def annotations_url(self):
        """Gets the annotations_url of this CheckRunOutput.


        :return: The annotations_url of this CheckRunOutput.
        :rtype: str
        """
        return self._annotations_url

    @annotations_url.setter
    def annotations_url(self, annotations_url):
        """Sets the annotations_url of this CheckRunOutput.


        :param annotations_url: The annotations_url of this CheckRunOutput.
        :type annotations_url: str
        """
        if annotations_url is None:
            raise ValueError("Invalid value for `annotations_url`, must not be `None`")

        self._annotations_url = annotations_url

    @property
    def summary(self):
        """Gets the summary of this CheckRunOutput.


        :return: The summary of this CheckRunOutput.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CheckRunOutput.


        :param summary: The summary of this CheckRunOutput.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def text(self):
        """Gets the text of this CheckRunOutput.


        :return: The text of this CheckRunOutput.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CheckRunOutput.


        :param text: The text of this CheckRunOutput.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def title(self):
        """Gets the title of this CheckRunOutput.


        :return: The title of this CheckRunOutput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CheckRunOutput.


        :param title: The title of this CheckRunOutput.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
