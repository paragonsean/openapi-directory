# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_workflow_run import ArtifactWorkflowRun
from openapi_server import util


class Artifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_download_url: str=None, created_at: datetime=None, expired: bool=None, expires_at: datetime=None, id: int=None, name: str=None, node_id: str=None, size_in_bytes: int=None, updated_at: datetime=None, url: str=None, workflow_run: ArtifactWorkflowRun=None):
        """Artifact - a model defined in OpenAPI

        :param archive_download_url: The archive_download_url of this Artifact.
        :param created_at: The created_at of this Artifact.
        :param expired: The expired of this Artifact.
        :param expires_at: The expires_at of this Artifact.
        :param id: The id of this Artifact.
        :param name: The name of this Artifact.
        :param node_id: The node_id of this Artifact.
        :param size_in_bytes: The size_in_bytes of this Artifact.
        :param updated_at: The updated_at of this Artifact.
        :param url: The url of this Artifact.
        :param workflow_run: The workflow_run of this Artifact.
        """
        self.openapi_types = {
            'archive_download_url': str,
            'created_at': datetime,
            'expired': bool,
            'expires_at': datetime,
            'id': int,
            'name': str,
            'node_id': str,
            'size_in_bytes': int,
            'updated_at': datetime,
            'url': str,
            'workflow_run': ArtifactWorkflowRun
        }

        self.attribute_map = {
            'archive_download_url': 'archive_download_url',
            'created_at': 'created_at',
            'expired': 'expired',
            'expires_at': 'expires_at',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'size_in_bytes': 'size_in_bytes',
            'updated_at': 'updated_at',
            'url': 'url',
            'workflow_run': 'workflow_run'
        }

        self._archive_download_url = archive_download_url
        self._created_at = created_at
        self._expired = expired
        self._expires_at = expires_at
        self._id = id
        self._name = name
        self._node_id = node_id
        self._size_in_bytes = size_in_bytes
        self._updated_at = updated_at
        self._url = url
        self._workflow_run = workflow_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Artifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The artifact of this Artifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_download_url(self):
        """Gets the archive_download_url of this Artifact.


        :return: The archive_download_url of this Artifact.
        :rtype: str
        """
        return self._archive_download_url

    @archive_download_url.setter
    def archive_download_url(self, archive_download_url):
        """Sets the archive_download_url of this Artifact.


        :param archive_download_url: The archive_download_url of this Artifact.
        :type archive_download_url: str
        """
        if archive_download_url is None:
            raise ValueError("Invalid value for `archive_download_url`, must not be `None`")

        self._archive_download_url = archive_download_url

    @property
    def created_at(self):
        """Gets the created_at of this Artifact.


        :return: The created_at of this Artifact.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Artifact.


        :param created_at: The created_at of this Artifact.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def expired(self):
        """Gets the expired of this Artifact.

        Whether or not the artifact has expired.

        :return: The expired of this Artifact.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this Artifact.

        Whether or not the artifact has expired.

        :param expired: The expired of this Artifact.
        :type expired: bool
        """
        if expired is None:
            raise ValueError("Invalid value for `expired`, must not be `None`")

        self._expired = expired

    @property
    def expires_at(self):
        """Gets the expires_at of this Artifact.


        :return: The expires_at of this Artifact.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Artifact.


        :param expires_at: The expires_at of this Artifact.
        :type expires_at: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this Artifact.


        :return: The id of this Artifact.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Artifact.


        :param id: The id of this Artifact.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Artifact.

        The name of the artifact.

        :return: The name of this Artifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.

        The name of the artifact.

        :param name: The name of this Artifact.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this Artifact.


        :return: The node_id of this Artifact.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Artifact.


        :param node_id: The node_id of this Artifact.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this Artifact.

        The size in bytes of the artifact.

        :return: The size_in_bytes of this Artifact.
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this Artifact.

        The size in bytes of the artifact.

        :param size_in_bytes: The size_in_bytes of this Artifact.
        :type size_in_bytes: int
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes

    @property
    def updated_at(self):
        """Gets the updated_at of this Artifact.


        :return: The updated_at of this Artifact.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Artifact.


        :param updated_at: The updated_at of this Artifact.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Artifact.


        :return: The url of this Artifact.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Artifact.


        :param url: The url of this Artifact.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def workflow_run(self):
        """Gets the workflow_run of this Artifact.


        :return: The workflow_run of this Artifact.
        :rtype: ArtifactWorkflowRun
        """
        return self._workflow_run

    @workflow_run.setter
    def workflow_run(self, workflow_run):
        """Sets the workflow_run of this Artifact.


        :param workflow_run: The workflow_run of this Artifact.
        :type workflow_run: ArtifactWorkflowRun
        """

        self._workflow_run = workflow_run
