# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Autolink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, key_prefix: str=None, url_template: str=None):
        """Autolink - a model defined in OpenAPI

        :param id: The id of this Autolink.
        :param key_prefix: The key_prefix of this Autolink.
        :param url_template: The url_template of this Autolink.
        """
        self.openapi_types = {
            'id': int,
            'key_prefix': str,
            'url_template': str
        }

        self.attribute_map = {
            'id': 'id',
            'key_prefix': 'key_prefix',
            'url_template': 'url_template'
        }

        self._id = id
        self._key_prefix = key_prefix
        self._url_template = url_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Autolink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The autolink of this Autolink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Autolink.


        :return: The id of this Autolink.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Autolink.


        :param id: The id of this Autolink.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def key_prefix(self):
        """Gets the key_prefix of this Autolink.

        The prefix of a key that is linkified.

        :return: The key_prefix of this Autolink.
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this Autolink.

        The prefix of a key that is linkified.

        :param key_prefix: The key_prefix of this Autolink.
        :type key_prefix: str
        """
        if key_prefix is None:
            raise ValueError("Invalid value for `key_prefix`, must not be `None`")

        self._key_prefix = key_prefix

    @property
    def url_template(self):
        """Gets the url_template of this Autolink.

        A template for the target URL that is generated if a key was found.

        :return: The url_template of this Autolink.
        :rtype: str
        """
        return self._url_template

    @url_template.setter
    def url_template(self, url_template):
        """Sets the url_template of this Autolink.

        A template for the target URL that is generated if a key was found.

        :param url_template: The url_template of this Autolink.
        :type url_template: str
        """
        if url_template is None:
            raise ValueError("Invalid value for `url_template`, must not be `None`")

        self._url_template = url_template
