# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: str=None, administration: str=None, checks: str=None, content_references: str=None, contents: str=None, deployments: str=None, environments: str=None, issues: str=None, members: str=None, metadata: str=None, organization_administration: str=None, organization_hooks: str=None, organization_packages: str=None, organization_plan: str=None, organization_projects: str=None, organization_secrets: str=None, organization_self_hosted_runners: str=None, organization_user_blocking: str=None, packages: str=None, pages: str=None, pull_requests: str=None, repository_hooks: str=None, repository_projects: str=None, secret_scanning_alerts: str=None, secrets: str=None, security_events: str=None, single_file: str=None, statuses: str=None, team_discussions: str=None, vulnerability_alerts: str=None, workflows: str=None):
        """AppPermissions - a model defined in OpenAPI

        :param actions: The actions of this AppPermissions.
        :param administration: The administration of this AppPermissions.
        :param checks: The checks of this AppPermissions.
        :param content_references: The content_references of this AppPermissions.
        :param contents: The contents of this AppPermissions.
        :param deployments: The deployments of this AppPermissions.
        :param environments: The environments of this AppPermissions.
        :param issues: The issues of this AppPermissions.
        :param members: The members of this AppPermissions.
        :param metadata: The metadata of this AppPermissions.
        :param organization_administration: The organization_administration of this AppPermissions.
        :param organization_hooks: The organization_hooks of this AppPermissions.
        :param organization_packages: The organization_packages of this AppPermissions.
        :param organization_plan: The organization_plan of this AppPermissions.
        :param organization_projects: The organization_projects of this AppPermissions.
        :param organization_secrets: The organization_secrets of this AppPermissions.
        :param organization_self_hosted_runners: The organization_self_hosted_runners of this AppPermissions.
        :param organization_user_blocking: The organization_user_blocking of this AppPermissions.
        :param packages: The packages of this AppPermissions.
        :param pages: The pages of this AppPermissions.
        :param pull_requests: The pull_requests of this AppPermissions.
        :param repository_hooks: The repository_hooks of this AppPermissions.
        :param repository_projects: The repository_projects of this AppPermissions.
        :param secret_scanning_alerts: The secret_scanning_alerts of this AppPermissions.
        :param secrets: The secrets of this AppPermissions.
        :param security_events: The security_events of this AppPermissions.
        :param single_file: The single_file of this AppPermissions.
        :param statuses: The statuses of this AppPermissions.
        :param team_discussions: The team_discussions of this AppPermissions.
        :param vulnerability_alerts: The vulnerability_alerts of this AppPermissions.
        :param workflows: The workflows of this AppPermissions.
        """
        self.openapi_types = {
            'actions': str,
            'administration': str,
            'checks': str,
            'content_references': str,
            'contents': str,
            'deployments': str,
            'environments': str,
            'issues': str,
            'members': str,
            'metadata': str,
            'organization_administration': str,
            'organization_hooks': str,
            'organization_packages': str,
            'organization_plan': str,
            'organization_projects': str,
            'organization_secrets': str,
            'organization_self_hosted_runners': str,
            'organization_user_blocking': str,
            'packages': str,
            'pages': str,
            'pull_requests': str,
            'repository_hooks': str,
            'repository_projects': str,
            'secret_scanning_alerts': str,
            'secrets': str,
            'security_events': str,
            'single_file': str,
            'statuses': str,
            'team_discussions': str,
            'vulnerability_alerts': str,
            'workflows': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'administration': 'administration',
            'checks': 'checks',
            'content_references': 'content_references',
            'contents': 'contents',
            'deployments': 'deployments',
            'environments': 'environments',
            'issues': 'issues',
            'members': 'members',
            'metadata': 'metadata',
            'organization_administration': 'organization_administration',
            'organization_hooks': 'organization_hooks',
            'organization_packages': 'organization_packages',
            'organization_plan': 'organization_plan',
            'organization_projects': 'organization_projects',
            'organization_secrets': 'organization_secrets',
            'organization_self_hosted_runners': 'organization_self_hosted_runners',
            'organization_user_blocking': 'organization_user_blocking',
            'packages': 'packages',
            'pages': 'pages',
            'pull_requests': 'pull_requests',
            'repository_hooks': 'repository_hooks',
            'repository_projects': 'repository_projects',
            'secret_scanning_alerts': 'secret_scanning_alerts',
            'secrets': 'secrets',
            'security_events': 'security_events',
            'single_file': 'single_file',
            'statuses': 'statuses',
            'team_discussions': 'team_discussions',
            'vulnerability_alerts': 'vulnerability_alerts',
            'workflows': 'workflows'
        }

        self._actions = actions
        self._administration = administration
        self._checks = checks
        self._content_references = content_references
        self._contents = contents
        self._deployments = deployments
        self._environments = environments
        self._issues = issues
        self._members = members
        self._metadata = metadata
        self._organization_administration = organization_administration
        self._organization_hooks = organization_hooks
        self._organization_packages = organization_packages
        self._organization_plan = organization_plan
        self._organization_projects = organization_projects
        self._organization_secrets = organization_secrets
        self._organization_self_hosted_runners = organization_self_hosted_runners
        self._organization_user_blocking = organization_user_blocking
        self._packages = packages
        self._pages = pages
        self._pull_requests = pull_requests
        self._repository_hooks = repository_hooks
        self._repository_projects = repository_projects
        self._secret_scanning_alerts = secret_scanning_alerts
        self._secrets = secrets
        self._security_events = security_events
        self._single_file = single_file
        self._statuses = statuses
        self._team_discussions = team_discussions
        self._vulnerability_alerts = vulnerability_alerts
        self._workflows = workflows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The app-permissions of this AppPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this AppPermissions.

        The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.

        :return: The actions of this AppPermissions.
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AppPermissions.

        The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.

        :param actions: The actions of this AppPermissions.
        :type actions: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if actions not in allowed_values:
            raise ValueError(
                "Invalid value for `actions` ({0}), must be one of {1}"
                .format(actions, allowed_values)
            )

        self._actions = actions

    @property
    def administration(self):
        """Gets the administration of this AppPermissions.

        The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.

        :return: The administration of this AppPermissions.
        :rtype: str
        """
        return self._administration

    @administration.setter
    def administration(self, administration):
        """Sets the administration of this AppPermissions.

        The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.

        :param administration: The administration of this AppPermissions.
        :type administration: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if administration not in allowed_values:
            raise ValueError(
                "Invalid value for `administration` ({0}), must be one of {1}"
                .format(administration, allowed_values)
            )

        self._administration = administration

    @property
    def checks(self):
        """Gets the checks of this AppPermissions.

        The level of permission to grant the access token for checks on code.

        :return: The checks of this AppPermissions.
        :rtype: str
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this AppPermissions.

        The level of permission to grant the access token for checks on code.

        :param checks: The checks of this AppPermissions.
        :type checks: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if checks not in allowed_values:
            raise ValueError(
                "Invalid value for `checks` ({0}), must be one of {1}"
                .format(checks, allowed_values)
            )

        self._checks = checks

    @property
    def content_references(self):
        """Gets the content_references of this AppPermissions.

        The level of permission to grant the access token for notification of content references and creation content attachments.

        :return: The content_references of this AppPermissions.
        :rtype: str
        """
        return self._content_references

    @content_references.setter
    def content_references(self, content_references):
        """Sets the content_references of this AppPermissions.

        The level of permission to grant the access token for notification of content references and creation content attachments.

        :param content_references: The content_references of this AppPermissions.
        :type content_references: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if content_references not in allowed_values:
            raise ValueError(
                "Invalid value for `content_references` ({0}), must be one of {1}"
                .format(content_references, allowed_values)
            )

        self._content_references = content_references

    @property
    def contents(self):
        """Gets the contents of this AppPermissions.

        The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.

        :return: The contents of this AppPermissions.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this AppPermissions.

        The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.

        :param contents: The contents of this AppPermissions.
        :type contents: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if contents not in allowed_values:
            raise ValueError(
                "Invalid value for `contents` ({0}), must be one of {1}"
                .format(contents, allowed_values)
            )

        self._contents = contents

    @property
    def deployments(self):
        """Gets the deployments of this AppPermissions.

        The level of permission to grant the access token for deployments and deployment statuses.

        :return: The deployments of this AppPermissions.
        :rtype: str
        """
        return self._deployments

    @deployments.setter
    def deployments(self, deployments):
        """Sets the deployments of this AppPermissions.

        The level of permission to grant the access token for deployments and deployment statuses.

        :param deployments: The deployments of this AppPermissions.
        :type deployments: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if deployments not in allowed_values:
            raise ValueError(
                "Invalid value for `deployments` ({0}), must be one of {1}"
                .format(deployments, allowed_values)
            )

        self._deployments = deployments

    @property
    def environments(self):
        """Gets the environments of this AppPermissions.

        The level of permission to grant the access token for managing repository environments.

        :return: The environments of this AppPermissions.
        :rtype: str
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this AppPermissions.

        The level of permission to grant the access token for managing repository environments.

        :param environments: The environments of this AppPermissions.
        :type environments: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if environments not in allowed_values:
            raise ValueError(
                "Invalid value for `environments` ({0}), must be one of {1}"
                .format(environments, allowed_values)
            )

        self._environments = environments

    @property
    def issues(self):
        """Gets the issues of this AppPermissions.

        The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.

        :return: The issues of this AppPermissions.
        :rtype: str
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this AppPermissions.

        The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.

        :param issues: The issues of this AppPermissions.
        :type issues: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if issues not in allowed_values:
            raise ValueError(
                "Invalid value for `issues` ({0}), must be one of {1}"
                .format(issues, allowed_values)
            )

        self._issues = issues

    @property
    def members(self):
        """Gets the members of this AppPermissions.

        The level of permission to grant the access token for organization teams and members.

        :return: The members of this AppPermissions.
        :rtype: str
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this AppPermissions.

        The level of permission to grant the access token for organization teams and members.

        :param members: The members of this AppPermissions.
        :type members: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if members not in allowed_values:
            raise ValueError(
                "Invalid value for `members` ({0}), must be one of {1}"
                .format(members, allowed_values)
            )

        self._members = members

    @property
    def metadata(self):
        """Gets the metadata of this AppPermissions.

        The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.

        :return: The metadata of this AppPermissions.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AppPermissions.

        The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.

        :param metadata: The metadata of this AppPermissions.
        :type metadata: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if metadata not in allowed_values:
            raise ValueError(
                "Invalid value for `metadata` ({0}), must be one of {1}"
                .format(metadata, allowed_values)
            )

        self._metadata = metadata

    @property
    def organization_administration(self):
        """Gets the organization_administration of this AppPermissions.

        The level of permission to grant the access token to manage access to an organization.

        :return: The organization_administration of this AppPermissions.
        :rtype: str
        """
        return self._organization_administration

    @organization_administration.setter
    def organization_administration(self, organization_administration):
        """Sets the organization_administration of this AppPermissions.

        The level of permission to grant the access token to manage access to an organization.

        :param organization_administration: The organization_administration of this AppPermissions.
        :type organization_administration: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if organization_administration not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_administration` ({0}), must be one of {1}"
                .format(organization_administration, allowed_values)
            )

        self._organization_administration = organization_administration

    @property
    def organization_hooks(self):
        """Gets the organization_hooks of this AppPermissions.

        The level of permission to grant the access token to manage the post-receive hooks for an organization.

        :return: The organization_hooks of this AppPermissions.
        :rtype: str
        """
        return self._organization_hooks

    @organization_hooks.setter
    def organization_hooks(self, organization_hooks):
        """Sets the organization_hooks of this AppPermissions.

        The level of permission to grant the access token to manage the post-receive hooks for an organization.

        :param organization_hooks: The organization_hooks of this AppPermissions.
        :type organization_hooks: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if organization_hooks not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_hooks` ({0}), must be one of {1}"
                .format(organization_hooks, allowed_values)
            )

        self._organization_hooks = organization_hooks

    @property
    def organization_packages(self):
        """Gets the organization_packages of this AppPermissions.

        The level of permission to grant the access token for organization packages published to GitHub Packages.

        :return: The organization_packages of this AppPermissions.
        :rtype: str
        """
        return self._organization_packages

    @organization_packages.setter
    def organization_packages(self, organization_packages):
        """Sets the organization_packages of this AppPermissions.

        The level of permission to grant the access token for organization packages published to GitHub Packages.

        :param organization_packages: The organization_packages of this AppPermissions.
        :type organization_packages: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if organization_packages not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_packages` ({0}), must be one of {1}"
                .format(organization_packages, allowed_values)
            )

        self._organization_packages = organization_packages

    @property
    def organization_plan(self):
        """Gets the organization_plan of this AppPermissions.

        The level of permission to grant the access token for viewing an organization's plan.

        :return: The organization_plan of this AppPermissions.
        :rtype: str
        """
        return self._organization_plan

    @organization_plan.setter
    def organization_plan(self, organization_plan):
        """Sets the organization_plan of this AppPermissions.

        The level of permission to grant the access token for viewing an organization's plan.

        :param organization_plan: The organization_plan of this AppPermissions.
        :type organization_plan: str
        """
        allowed_values = ["read"]  # noqa: E501
        if organization_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_plan` ({0}), must be one of {1}"
                .format(organization_plan, allowed_values)
            )

        self._organization_plan = organization_plan

    @property
    def organization_projects(self):
        """Gets the organization_projects of this AppPermissions.

        The level of permission to grant the access token to manage organization projects and projects beta (where available).

        :return: The organization_projects of this AppPermissions.
        :rtype: str
        """
        return self._organization_projects

    @organization_projects.setter
    def organization_projects(self, organization_projects):
        """Sets the organization_projects of this AppPermissions.

        The level of permission to grant the access token to manage organization projects and projects beta (where available).

        :param organization_projects: The organization_projects of this AppPermissions.
        :type organization_projects: str
        """
        allowed_values = ["read", "write", "admin"]  # noqa: E501
        if organization_projects not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_projects` ({0}), must be one of {1}"
                .format(organization_projects, allowed_values)
            )

        self._organization_projects = organization_projects

    @property
    def organization_secrets(self):
        """Gets the organization_secrets of this AppPermissions.

        The level of permission to grant the access token to manage organization secrets.

        :return: The organization_secrets of this AppPermissions.
        :rtype: str
        """
        return self._organization_secrets

    @organization_secrets.setter
    def organization_secrets(self, organization_secrets):
        """Sets the organization_secrets of this AppPermissions.

        The level of permission to grant the access token to manage organization secrets.

        :param organization_secrets: The organization_secrets of this AppPermissions.
        :type organization_secrets: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if organization_secrets not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_secrets` ({0}), must be one of {1}"
                .format(organization_secrets, allowed_values)
            )

        self._organization_secrets = organization_secrets

    @property
    def organization_self_hosted_runners(self):
        """Gets the organization_self_hosted_runners of this AppPermissions.

        The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.

        :return: The organization_self_hosted_runners of this AppPermissions.
        :rtype: str
        """
        return self._organization_self_hosted_runners

    @organization_self_hosted_runners.setter
    def organization_self_hosted_runners(self, organization_self_hosted_runners):
        """Sets the organization_self_hosted_runners of this AppPermissions.

        The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.

        :param organization_self_hosted_runners: The organization_self_hosted_runners of this AppPermissions.
        :type organization_self_hosted_runners: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if organization_self_hosted_runners not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_self_hosted_runners` ({0}), must be one of {1}"
                .format(organization_self_hosted_runners, allowed_values)
            )

        self._organization_self_hosted_runners = organization_self_hosted_runners

    @property
    def organization_user_blocking(self):
        """Gets the organization_user_blocking of this AppPermissions.

        The level of permission to grant the access token to view and manage users blocked by the organization.

        :return: The organization_user_blocking of this AppPermissions.
        :rtype: str
        """
        return self._organization_user_blocking

    @organization_user_blocking.setter
    def organization_user_blocking(self, organization_user_blocking):
        """Sets the organization_user_blocking of this AppPermissions.

        The level of permission to grant the access token to view and manage users blocked by the organization.

        :param organization_user_blocking: The organization_user_blocking of this AppPermissions.
        :type organization_user_blocking: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if organization_user_blocking not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_user_blocking` ({0}), must be one of {1}"
                .format(organization_user_blocking, allowed_values)
            )

        self._organization_user_blocking = organization_user_blocking

    @property
    def packages(self):
        """Gets the packages of this AppPermissions.

        The level of permission to grant the access token for packages published to GitHub Packages.

        :return: The packages of this AppPermissions.
        :rtype: str
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this AppPermissions.

        The level of permission to grant the access token for packages published to GitHub Packages.

        :param packages: The packages of this AppPermissions.
        :type packages: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if packages not in allowed_values:
            raise ValueError(
                "Invalid value for `packages` ({0}), must be one of {1}"
                .format(packages, allowed_values)
            )

        self._packages = packages

    @property
    def pages(self):
        """Gets the pages of this AppPermissions.

        The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.

        :return: The pages of this AppPermissions.
        :rtype: str
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this AppPermissions.

        The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.

        :param pages: The pages of this AppPermissions.
        :type pages: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if pages not in allowed_values:
            raise ValueError(
                "Invalid value for `pages` ({0}), must be one of {1}"
                .format(pages, allowed_values)
            )

        self._pages = pages

    @property
    def pull_requests(self):
        """Gets the pull_requests of this AppPermissions.

        The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.

        :return: The pull_requests of this AppPermissions.
        :rtype: str
        """
        return self._pull_requests

    @pull_requests.setter
    def pull_requests(self, pull_requests):
        """Sets the pull_requests of this AppPermissions.

        The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.

        :param pull_requests: The pull_requests of this AppPermissions.
        :type pull_requests: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if pull_requests not in allowed_values:
            raise ValueError(
                "Invalid value for `pull_requests` ({0}), must be one of {1}"
                .format(pull_requests, allowed_values)
            )

        self._pull_requests = pull_requests

    @property
    def repository_hooks(self):
        """Gets the repository_hooks of this AppPermissions.

        The level of permission to grant the access token to manage the post-receive hooks for a repository.

        :return: The repository_hooks of this AppPermissions.
        :rtype: str
        """
        return self._repository_hooks

    @repository_hooks.setter
    def repository_hooks(self, repository_hooks):
        """Sets the repository_hooks of this AppPermissions.

        The level of permission to grant the access token to manage the post-receive hooks for a repository.

        :param repository_hooks: The repository_hooks of this AppPermissions.
        :type repository_hooks: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if repository_hooks not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_hooks` ({0}), must be one of {1}"
                .format(repository_hooks, allowed_values)
            )

        self._repository_hooks = repository_hooks

    @property
    def repository_projects(self):
        """Gets the repository_projects of this AppPermissions.

        The level of permission to grant the access token to manage repository projects, columns, and cards.

        :return: The repository_projects of this AppPermissions.
        :rtype: str
        """
        return self._repository_projects

    @repository_projects.setter
    def repository_projects(self, repository_projects):
        """Sets the repository_projects of this AppPermissions.

        The level of permission to grant the access token to manage repository projects, columns, and cards.

        :param repository_projects: The repository_projects of this AppPermissions.
        :type repository_projects: str
        """
        allowed_values = ["read", "write", "admin"]  # noqa: E501
        if repository_projects not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_projects` ({0}), must be one of {1}"
                .format(repository_projects, allowed_values)
            )

        self._repository_projects = repository_projects

    @property
    def secret_scanning_alerts(self):
        """Gets the secret_scanning_alerts of this AppPermissions.

        The level of permission to grant the access token to view and manage secret scanning alerts.

        :return: The secret_scanning_alerts of this AppPermissions.
        :rtype: str
        """
        return self._secret_scanning_alerts

    @secret_scanning_alerts.setter
    def secret_scanning_alerts(self, secret_scanning_alerts):
        """Sets the secret_scanning_alerts of this AppPermissions.

        The level of permission to grant the access token to view and manage secret scanning alerts.

        :param secret_scanning_alerts: The secret_scanning_alerts of this AppPermissions.
        :type secret_scanning_alerts: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if secret_scanning_alerts not in allowed_values:
            raise ValueError(
                "Invalid value for `secret_scanning_alerts` ({0}), must be one of {1}"
                .format(secret_scanning_alerts, allowed_values)
            )

        self._secret_scanning_alerts = secret_scanning_alerts

    @property
    def secrets(self):
        """Gets the secrets of this AppPermissions.

        The level of permission to grant the access token to manage repository secrets.

        :return: The secrets of this AppPermissions.
        :rtype: str
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this AppPermissions.

        The level of permission to grant the access token to manage repository secrets.

        :param secrets: The secrets of this AppPermissions.
        :type secrets: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if secrets not in allowed_values:
            raise ValueError(
                "Invalid value for `secrets` ({0}), must be one of {1}"
                .format(secrets, allowed_values)
            )

        self._secrets = secrets

    @property
    def security_events(self):
        """Gets the security_events of this AppPermissions.

        The level of permission to grant the access token to view and manage security events like code scanning alerts.

        :return: The security_events of this AppPermissions.
        :rtype: str
        """
        return self._security_events

    @security_events.setter
    def security_events(self, security_events):
        """Sets the security_events of this AppPermissions.

        The level of permission to grant the access token to view and manage security events like code scanning alerts.

        :param security_events: The security_events of this AppPermissions.
        :type security_events: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if security_events not in allowed_values:
            raise ValueError(
                "Invalid value for `security_events` ({0}), must be one of {1}"
                .format(security_events, allowed_values)
            )

        self._security_events = security_events

    @property
    def single_file(self):
        """Gets the single_file of this AppPermissions.

        The level of permission to grant the access token to manage just a single file.

        :return: The single_file of this AppPermissions.
        :rtype: str
        """
        return self._single_file

    @single_file.setter
    def single_file(self, single_file):
        """Sets the single_file of this AppPermissions.

        The level of permission to grant the access token to manage just a single file.

        :param single_file: The single_file of this AppPermissions.
        :type single_file: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if single_file not in allowed_values:
            raise ValueError(
                "Invalid value for `single_file` ({0}), must be one of {1}"
                .format(single_file, allowed_values)
            )

        self._single_file = single_file

    @property
    def statuses(self):
        """Gets the statuses of this AppPermissions.

        The level of permission to grant the access token for commit statuses.

        :return: The statuses of this AppPermissions.
        :rtype: str
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this AppPermissions.

        The level of permission to grant the access token for commit statuses.

        :param statuses: The statuses of this AppPermissions.
        :type statuses: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if statuses not in allowed_values:
            raise ValueError(
                "Invalid value for `statuses` ({0}), must be one of {1}"
                .format(statuses, allowed_values)
            )

        self._statuses = statuses

    @property
    def team_discussions(self):
        """Gets the team_discussions of this AppPermissions.

        The level of permission to grant the access token to manage team discussions and related comments.

        :return: The team_discussions of this AppPermissions.
        :rtype: str
        """
        return self._team_discussions

    @team_discussions.setter
    def team_discussions(self, team_discussions):
        """Sets the team_discussions of this AppPermissions.

        The level of permission to grant the access token to manage team discussions and related comments.

        :param team_discussions: The team_discussions of this AppPermissions.
        :type team_discussions: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if team_discussions not in allowed_values:
            raise ValueError(
                "Invalid value for `team_discussions` ({0}), must be one of {1}"
                .format(team_discussions, allowed_values)
            )

        self._team_discussions = team_discussions

    @property
    def vulnerability_alerts(self):
        """Gets the vulnerability_alerts of this AppPermissions.

        The level of permission to grant the access token to manage Dependabot alerts.

        :return: The vulnerability_alerts of this AppPermissions.
        :rtype: str
        """
        return self._vulnerability_alerts

    @vulnerability_alerts.setter
    def vulnerability_alerts(self, vulnerability_alerts):
        """Sets the vulnerability_alerts of this AppPermissions.

        The level of permission to grant the access token to manage Dependabot alerts.

        :param vulnerability_alerts: The vulnerability_alerts of this AppPermissions.
        :type vulnerability_alerts: str
        """
        allowed_values = ["read", "write"]  # noqa: E501
        if vulnerability_alerts not in allowed_values:
            raise ValueError(
                "Invalid value for `vulnerability_alerts` ({0}), must be one of {1}"
                .format(vulnerability_alerts, allowed_values)
            )

        self._vulnerability_alerts = vulnerability_alerts

    @property
    def workflows(self):
        """Gets the workflows of this AppPermissions.

        The level of permission to grant the access token to update GitHub Actions workflow files.

        :return: The workflows of this AppPermissions.
        :rtype: str
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this AppPermissions.

        The level of permission to grant the access token to update GitHub Actions workflow files.

        :param workflows: The workflows of this AppPermissions.
        :type workflows: str
        """
        allowed_values = ["write"]  # noqa: E501
        if workflows not in allowed_values:
            raise ValueError(
                "Invalid value for `workflows` ({0}), must be one of {1}"
                .format(workflows, allowed_values)
            )

        self._workflows = workflows
