# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class AutoMerge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_message: str=None, commit_title: str=None, enabled_by: SimpleUser=None, merge_method: str=None):
        """AutoMerge - a model defined in OpenAPI

        :param commit_message: The commit_message of this AutoMerge.
        :param commit_title: The commit_title of this AutoMerge.
        :param enabled_by: The enabled_by of this AutoMerge.
        :param merge_method: The merge_method of this AutoMerge.
        """
        self.openapi_types = {
            'commit_message': str,
            'commit_title': str,
            'enabled_by': SimpleUser,
            'merge_method': str
        }

        self.attribute_map = {
            'commit_message': 'commit_message',
            'commit_title': 'commit_title',
            'enabled_by': 'enabled_by',
            'merge_method': 'merge_method'
        }

        self._commit_message = commit_message
        self._commit_title = commit_title
        self._enabled_by = enabled_by
        self._merge_method = merge_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoMerge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The auto-merge of this AutoMerge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_message(self):
        """Gets the commit_message of this AutoMerge.

        Commit message for the merge commit.

        :return: The commit_message of this AutoMerge.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this AutoMerge.

        Commit message for the merge commit.

        :param commit_message: The commit_message of this AutoMerge.
        :type commit_message: str
        """
        if commit_message is None:
            raise ValueError("Invalid value for `commit_message`, must not be `None`")

        self._commit_message = commit_message

    @property
    def commit_title(self):
        """Gets the commit_title of this AutoMerge.

        Title for the merge commit message.

        :return: The commit_title of this AutoMerge.
        :rtype: str
        """
        return self._commit_title

    @commit_title.setter
    def commit_title(self, commit_title):
        """Sets the commit_title of this AutoMerge.

        Title for the merge commit message.

        :param commit_title: The commit_title of this AutoMerge.
        :type commit_title: str
        """
        if commit_title is None:
            raise ValueError("Invalid value for `commit_title`, must not be `None`")

        self._commit_title = commit_title

    @property
    def enabled_by(self):
        """Gets the enabled_by of this AutoMerge.


        :return: The enabled_by of this AutoMerge.
        :rtype: SimpleUser
        """
        return self._enabled_by

    @enabled_by.setter
    def enabled_by(self, enabled_by):
        """Sets the enabled_by of this AutoMerge.


        :param enabled_by: The enabled_by of this AutoMerge.
        :type enabled_by: SimpleUser
        """
        if enabled_by is None:
            raise ValueError("Invalid value for `enabled_by`, must not be `None`")

        self._enabled_by = enabled_by

    @property
    def merge_method(self):
        """Gets the merge_method of this AutoMerge.

        The merge method to use.

        :return: The merge_method of this AutoMerge.
        :rtype: str
        """
        return self._merge_method

    @merge_method.setter
    def merge_method(self, merge_method):
        """Sets the merge_method of this AutoMerge.

        The merge method to use.

        :param merge_method: The merge_method of this AutoMerge.
        :type merge_method: str
        """
        allowed_values = ["merge", "squash", "rebase"]  # noqa: E501
        if merge_method not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_method` ({0}), must be one of {1}"
                .format(merge_method, allowed_values)
            )

        self._merge_method = merge_method
