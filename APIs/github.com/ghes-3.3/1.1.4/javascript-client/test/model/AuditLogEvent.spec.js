/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.AuditLogEvent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuditLogEvent', function() {
    it('should create an instance of AuditLogEvent', function() {
      // uncomment below and update the code to test AuditLogEvent
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be.a(GitHubV3RestApi.AuditLogEvent);
    });

    it('should have the property timestamp (base name: "@timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property documentId (base name: "_document_id")', function() {
      // uncomment below and update the code to test the property documentId
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property action (base name: "action")', function() {
      // uncomment below and update the code to test the property action
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property activeWas (base name: "active_was")', function() {
      // uncomment below and update the code to test the property activeWas
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property actor (base name: "actor")', function() {
      // uncomment below and update the code to test the property actor
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property actorId (base name: "actor_id")', function() {
      // uncomment below and update the code to test the property actorId
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property actorLocation (base name: "actor_location")', function() {
      // uncomment below and update the code to test the property actorLocation
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property blockedUser (base name: "blocked_user")', function() {
      // uncomment below and update the code to test the property blockedUser
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property business (base name: "business")', function() {
      // uncomment below and update the code to test the property business
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property businessId (base name: "business_id")', function() {
      // uncomment below and update the code to test the property businessId
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property configWas (base name: "config_was")', function() {
      // uncomment below and update the code to test the property configWas
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property contentType (base name: "content_type")', function() {
      // uncomment below and update the code to test the property contentType
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property data (base name: "data")', function() {
      // uncomment below and update the code to test the property data
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property deployKeyFingerprint (base name: "deploy_key_fingerprint")', function() {
      // uncomment below and update the code to test the property deployKeyFingerprint
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property emoji (base name: "emoji")', function() {
      // uncomment below and update the code to test the property emoji
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventsWere (base name: "events_were")', function() {
      // uncomment below and update the code to test the property eventsWere
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property explanation (base name: "explanation")', function() {
      // uncomment below and update the code to test the property explanation
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property fingerprint (base name: "fingerprint")', function() {
      // uncomment below and update the code to test the property fingerprint
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property hookId (base name: "hook_id")', function() {
      // uncomment below and update the code to test the property hookId
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property limitedAvailability (base name: "limited_availability")', function() {
      // uncomment below and update the code to test the property limitedAvailability
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property oldUser (base name: "old_user")', function() {
      // uncomment below and update the code to test the property oldUser
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property opensshPublicKey (base name: "openssh_public_key")', function() {
      // uncomment below and update the code to test the property opensshPublicKey
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property operationType (base name: "operation_type")', function() {
      // uncomment below and update the code to test the property operationType
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property org (base name: "org")', function() {
      // uncomment below and update the code to test the property org
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property orgId (base name: "org_id")', function() {
      // uncomment below and update the code to test the property orgId
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property previousVisibility (base name: "previous_visibility")', function() {
      // uncomment below and update the code to test the property previousVisibility
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property readOnly (base name: "read_only")', function() {
      // uncomment below and update the code to test the property readOnly
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property repo (base name: "repo")', function() {
      // uncomment below and update the code to test the property repo
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property repository (base name: "repository")', function() {
      // uncomment below and update the code to test the property repository
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property repositoryPublic (base name: "repository_public")', function() {
      // uncomment below and update the code to test the property repositoryPublic
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property targetLogin (base name: "target_login")', function() {
      // uncomment below and update the code to test the property targetLogin
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property team (base name: "team")', function() {
      // uncomment below and update the code to test the property team
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property transportProtocol (base name: "transport_protocol")', function() {
      // uncomment below and update the code to test the property transportProtocol
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property transportProtocolName (base name: "transport_protocol_name")', function() {
      // uncomment below and update the code to test the property transportProtocolName
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new GitHubV3RestApi.AuditLogEvent();
      //expect(instance).to.be();
    });

  });

}));
