/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecretScanningLocationCommit model module.
 * @module model/SecretScanningLocationCommit
 * @version 1.1.4
 */
class SecretScanningLocationCommit {
    /**
     * Constructs a new <code>SecretScanningLocationCommit</code>.
     * Represents a &#39;commit&#39; secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
     * @alias module:model/SecretScanningLocationCommit
     * @param blobSha {String} SHA-1 hash ID of the associated blob
     * @param blobUrl {String} The API URL to get the associated blob resource
     * @param commitSha {String} SHA-1 hash ID of the associated commit
     * @param commitUrl {String} The API URL to get the associated commit resource
     * @param endColumn {Number} The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
     * @param endLine {Number} Line number at which the secret ends in the file
     * @param path {String} The file path in the repository
     * @param startColumn {Number} The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
     * @param startLine {Number} Line number at which the secret starts in the file
     */
    constructor(blobSha, blobUrl, commitSha, commitUrl, endColumn, endLine, path, startColumn, startLine) { 
        
        SecretScanningLocationCommit.initialize(this, blobSha, blobUrl, commitSha, commitUrl, endColumn, endLine, path, startColumn, startLine);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blobSha, blobUrl, commitSha, commitUrl, endColumn, endLine, path, startColumn, startLine) { 
        obj['blob_sha'] = blobSha;
        obj['blob_url'] = blobUrl;
        obj['commit_sha'] = commitSha;
        obj['commit_url'] = commitUrl;
        obj['end_column'] = endColumn;
        obj['end_line'] = endLine;
        obj['path'] = path;
        obj['start_column'] = startColumn;
        obj['start_line'] = startLine;
    }

    /**
     * Constructs a <code>SecretScanningLocationCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretScanningLocationCommit} obj Optional instance to populate.
     * @return {module:model/SecretScanningLocationCommit} The populated <code>SecretScanningLocationCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecretScanningLocationCommit();

            if (data.hasOwnProperty('blob_sha')) {
                obj['blob_sha'] = ApiClient.convertToType(data['blob_sha'], 'String');
            }
            if (data.hasOwnProperty('blob_url')) {
                obj['blob_url'] = ApiClient.convertToType(data['blob_url'], 'String');
            }
            if (data.hasOwnProperty('commit_sha')) {
                obj['commit_sha'] = ApiClient.convertToType(data['commit_sha'], 'String');
            }
            if (data.hasOwnProperty('commit_url')) {
                obj['commit_url'] = ApiClient.convertToType(data['commit_url'], 'String');
            }
            if (data.hasOwnProperty('end_column')) {
                obj['end_column'] = ApiClient.convertToType(data['end_column'], 'Number');
            }
            if (data.hasOwnProperty('end_line')) {
                obj['end_line'] = ApiClient.convertToType(data['end_line'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('start_column')) {
                obj['start_column'] = ApiClient.convertToType(data['start_column'], 'Number');
            }
            if (data.hasOwnProperty('start_line')) {
                obj['start_line'] = ApiClient.convertToType(data['start_line'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecretScanningLocationCommit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecretScanningLocationCommit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SecretScanningLocationCommit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blob_sha'] && !(typeof data['blob_sha'] === 'string' || data['blob_sha'] instanceof String)) {
            throw new Error("Expected the field `blob_sha` to be a primitive type in the JSON string but got " + data['blob_sha']);
        }
        // ensure the json data is a string
        if (data['blob_url'] && !(typeof data['blob_url'] === 'string' || data['blob_url'] instanceof String)) {
            throw new Error("Expected the field `blob_url` to be a primitive type in the JSON string but got " + data['blob_url']);
        }
        // ensure the json data is a string
        if (data['commit_sha'] && !(typeof data['commit_sha'] === 'string' || data['commit_sha'] instanceof String)) {
            throw new Error("Expected the field `commit_sha` to be a primitive type in the JSON string but got " + data['commit_sha']);
        }
        // ensure the json data is a string
        if (data['commit_url'] && !(typeof data['commit_url'] === 'string' || data['commit_url'] instanceof String)) {
            throw new Error("Expected the field `commit_url` to be a primitive type in the JSON string but got " + data['commit_url']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

SecretScanningLocationCommit.RequiredProperties = ["blob_sha", "blob_url", "commit_sha", "commit_url", "end_column", "end_line", "path", "start_column", "start_line"];

/**
 * SHA-1 hash ID of the associated blob
 * @member {String} blob_sha
 */
SecretScanningLocationCommit.prototype['blob_sha'] = undefined;

/**
 * The API URL to get the associated blob resource
 * @member {String} blob_url
 */
SecretScanningLocationCommit.prototype['blob_url'] = undefined;

/**
 * SHA-1 hash ID of the associated commit
 * @member {String} commit_sha
 */
SecretScanningLocationCommit.prototype['commit_sha'] = undefined;

/**
 * The API URL to get the associated commit resource
 * @member {String} commit_url
 */
SecretScanningLocationCommit.prototype['commit_url'] = undefined;

/**
 * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
 * @member {Number} end_column
 */
SecretScanningLocationCommit.prototype['end_column'] = undefined;

/**
 * Line number at which the secret ends in the file
 * @member {Number} end_line
 */
SecretScanningLocationCommit.prototype['end_line'] = undefined;

/**
 * The file path in the repository
 * @member {String} path
 */
SecretScanningLocationCommit.prototype['path'] = undefined;

/**
 * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
 * @member {Number} start_column
 */
SecretScanningLocationCommit.prototype['start_column'] = undefined;

/**
 * Line number at which the secret starts in the file
 * @member {Number} start_line
 */
SecretScanningLocationCommit.prototype['start_line'] = undefined;






export default SecretScanningLocationCommit;

