/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitCreateTreeRequestTreeInner from './GitCreateTreeRequestTreeInner';

/**
 * The GitCreateTreeRequest model module.
 * @module model/GitCreateTreeRequest
 * @version 1.1.4
 */
class GitCreateTreeRequest {
    /**
     * Constructs a new <code>GitCreateTreeRequest</code>.
     * @alias module:model/GitCreateTreeRequest
     * @param tree {Array.<module:model/GitCreateTreeRequestTreeInner>} Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
     */
    constructor(tree) { 
        
        GitCreateTreeRequest.initialize(this, tree);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tree) { 
        obj['tree'] = tree;
    }

    /**
     * Constructs a <code>GitCreateTreeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitCreateTreeRequest} obj Optional instance to populate.
     * @return {module:model/GitCreateTreeRequest} The populated <code>GitCreateTreeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitCreateTreeRequest();

            if (data.hasOwnProperty('base_tree')) {
                obj['base_tree'] = ApiClient.convertToType(data['base_tree'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = ApiClient.convertToType(data['tree'], [GitCreateTreeRequestTreeInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitCreateTreeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitCreateTreeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GitCreateTreeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['base_tree'] && !(typeof data['base_tree'] === 'string' || data['base_tree'] instanceof String)) {
            throw new Error("Expected the field `base_tree` to be a primitive type in the JSON string but got " + data['base_tree']);
        }
        if (data['tree']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tree'])) {
                throw new Error("Expected the field `tree` to be an array in the JSON data but got " + data['tree']);
            }
            // validate the optional field `tree` (array)
            for (const item of data['tree']) {
                GitCreateTreeRequestTreeInner.validateJSON(item);
            };
        }

        return true;
    }


}

GitCreateTreeRequest.RequiredProperties = ["tree"];

/**
 * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on. If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit. 
 * @member {String} base_tree
 */
GitCreateTreeRequest.prototype['base_tree'] = undefined;

/**
 * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
 * @member {Array.<module:model/GitCreateTreeRequestTreeInner>} tree
 */
GitCreateTreeRequest.prototype['tree'] = undefined;






export default GitCreateTreeRequest;

