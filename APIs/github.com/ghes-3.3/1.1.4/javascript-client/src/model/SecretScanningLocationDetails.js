/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SecretScanningLocationCommit from './SecretScanningLocationCommit';

/**
 * The SecretScanningLocationDetails model module.
 * @module model/SecretScanningLocationDetails
 * @version 1.1.4
 */
class SecretScanningLocationDetails {
    /**
     * Constructs a new <code>SecretScanningLocationDetails</code>.
     * @alias module:model/SecretScanningLocationDetails
     * @param {(module:model/SecretScanningLocationCommit)} instance The actual instance to initialize SecretScanningLocationDetails.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SecretScanningLocationCommit") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationCommit.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationCommit from JS object
                this.actualInstance = SecretScanningLocationCommit.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationCommit
            errorMessages.push("Failed to construct SecretScanningLocationCommit: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SecretScanningLocationDetails` with oneOf schemas SecretScanningLocationCommit. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SecretScanningLocationDetails` with oneOf schemas SecretScanningLocationCommit. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SecretScanningLocationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretScanningLocationDetails} obj Optional instance to populate.
     * @return {module:model/SecretScanningLocationDetails} The populated <code>SecretScanningLocationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SecretScanningLocationDetails(data);
    }

    /**
     * Gets the actual instance, which can be <code>SecretScanningLocationCommit</code>.
     * @return {(module:model/SecretScanningLocationCommit)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SecretScanningLocationCommit</code>.
     * @param {(module:model/SecretScanningLocationCommit)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SecretScanningLocationDetails.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SecretScanningLocationDetails from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SecretScanningLocationDetails} An instance of SecretScanningLocationDetails.
     */
    static fromJSON = function(json_string){
        return SecretScanningLocationDetails.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * SHA-1 hash ID of the associated blob
 * @member {String} blob_sha
 */
SecretScanningLocationDetails.prototype['blob_sha'] = undefined;

/**
 * The API URL to get the associated blob resource
 * @member {String} blob_url
 */
SecretScanningLocationDetails.prototype['blob_url'] = undefined;

/**
 * SHA-1 hash ID of the associated commit
 * @member {String} commit_sha
 */
SecretScanningLocationDetails.prototype['commit_sha'] = undefined;

/**
 * The API URL to get the associated commit resource
 * @member {String} commit_url
 */
SecretScanningLocationDetails.prototype['commit_url'] = undefined;

/**
 * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
 * @member {Number} end_column
 */
SecretScanningLocationDetails.prototype['end_column'] = undefined;

/**
 * Line number at which the secret ends in the file
 * @member {Number} end_line
 */
SecretScanningLocationDetails.prototype['end_line'] = undefined;

/**
 * The file path in the repository
 * @member {String} path
 */
SecretScanningLocationDetails.prototype['path'] = undefined;

/**
 * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
 * @member {Number} start_column
 */
SecretScanningLocationDetails.prototype['start_column'] = undefined;

/**
 * Line number at which the secret starts in the file
 * @member {Number} start_line
 */
SecretScanningLocationDetails.prototype['start_line'] = undefined;


SecretScanningLocationDetails.OneOf = ["SecretScanningLocationCommit"];

export default SecretScanningLocationDetails;

