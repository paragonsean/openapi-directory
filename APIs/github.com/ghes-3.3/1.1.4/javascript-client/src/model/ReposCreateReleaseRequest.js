/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposCreateReleaseRequest model module.
 * @module model/ReposCreateReleaseRequest
 * @version 1.1.4
 */
class ReposCreateReleaseRequest {
    /**
     * Constructs a new <code>ReposCreateReleaseRequest</code>.
     * @alias module:model/ReposCreateReleaseRequest
     * @param tagName {String} The name of the tag.
     */
    constructor(tagName) { 
        
        ReposCreateReleaseRequest.initialize(this, tagName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tagName) { 
        obj['draft'] = false;
        obj['generate_release_notes'] = false;
        obj['prerelease'] = false;
        obj['tag_name'] = tagName;
    }

    /**
     * Constructs a <code>ReposCreateReleaseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposCreateReleaseRequest} obj Optional instance to populate.
     * @return {module:model/ReposCreateReleaseRequest} The populated <code>ReposCreateReleaseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposCreateReleaseRequest();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('generate_release_notes')) {
                obj['generate_release_notes'] = ApiClient.convertToType(data['generate_release_notes'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prerelease')) {
                obj['prerelease'] = ApiClient.convertToType(data['prerelease'], 'Boolean');
            }
            if (data.hasOwnProperty('tag_name')) {
                obj['tag_name'] = ApiClient.convertToType(data['tag_name'], 'String');
            }
            if (data.hasOwnProperty('target_commitish')) {
                obj['target_commitish'] = ApiClient.convertToType(data['target_commitish'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposCreateReleaseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposCreateReleaseRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReposCreateReleaseRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tag_name'] && !(typeof data['tag_name'] === 'string' || data['tag_name'] instanceof String)) {
            throw new Error("Expected the field `tag_name` to be a primitive type in the JSON string but got " + data['tag_name']);
        }
        // ensure the json data is a string
        if (data['target_commitish'] && !(typeof data['target_commitish'] === 'string' || data['target_commitish'] instanceof String)) {
            throw new Error("Expected the field `target_commitish` to be a primitive type in the JSON string but got " + data['target_commitish']);
        }

        return true;
    }


}

ReposCreateReleaseRequest.RequiredProperties = ["tag_name"];

/**
 * Text describing the contents of the tag.
 * @member {String} body
 */
ReposCreateReleaseRequest.prototype['body'] = undefined;

/**
 * `true` to create a draft (unpublished) release, `false` to create a published one.
 * @member {Boolean} draft
 * @default false
 */
ReposCreateReleaseRequest.prototype['draft'] = false;

/**
 * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
 * @member {Boolean} generate_release_notes
 * @default false
 */
ReposCreateReleaseRequest.prototype['generate_release_notes'] = false;

/**
 * The name of the release.
 * @member {String} name
 */
ReposCreateReleaseRequest.prototype['name'] = undefined;

/**
 * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
 * @member {Boolean} prerelease
 * @default false
 */
ReposCreateReleaseRequest.prototype['prerelease'] = false;

/**
 * The name of the tag.
 * @member {String} tag_name
 */
ReposCreateReleaseRequest.prototype['tag_name'] = undefined;

/**
 * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
 * @member {String} target_commitish
 */
ReposCreateReleaseRequest.prototype['target_commitish'] = undefined;






export default ReposCreateReleaseRequest;

