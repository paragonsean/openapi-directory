/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposGenerateReleaseNotesRequest model module.
 * @module model/ReposGenerateReleaseNotesRequest
 * @version 1.1.4
 */
class ReposGenerateReleaseNotesRequest {
    /**
     * Constructs a new <code>ReposGenerateReleaseNotesRequest</code>.
     * @alias module:model/ReposGenerateReleaseNotesRequest
     * @param tagName {String} The tag name for the release. This can be an existing tag or a new one.
     */
    constructor(tagName) { 
        
        ReposGenerateReleaseNotesRequest.initialize(this, tagName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tagName) { 
        obj['tag_name'] = tagName;
    }

    /**
     * Constructs a <code>ReposGenerateReleaseNotesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposGenerateReleaseNotesRequest} obj Optional instance to populate.
     * @return {module:model/ReposGenerateReleaseNotesRequest} The populated <code>ReposGenerateReleaseNotesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposGenerateReleaseNotesRequest();

            if (data.hasOwnProperty('configuration_file_path')) {
                obj['configuration_file_path'] = ApiClient.convertToType(data['configuration_file_path'], 'String');
            }
            if (data.hasOwnProperty('previous_tag_name')) {
                obj['previous_tag_name'] = ApiClient.convertToType(data['previous_tag_name'], 'String');
            }
            if (data.hasOwnProperty('tag_name')) {
                obj['tag_name'] = ApiClient.convertToType(data['tag_name'], 'String');
            }
            if (data.hasOwnProperty('target_commitish')) {
                obj['target_commitish'] = ApiClient.convertToType(data['target_commitish'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposGenerateReleaseNotesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposGenerateReleaseNotesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReposGenerateReleaseNotesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['configuration_file_path'] && !(typeof data['configuration_file_path'] === 'string' || data['configuration_file_path'] instanceof String)) {
            throw new Error("Expected the field `configuration_file_path` to be a primitive type in the JSON string but got " + data['configuration_file_path']);
        }
        // ensure the json data is a string
        if (data['previous_tag_name'] && !(typeof data['previous_tag_name'] === 'string' || data['previous_tag_name'] instanceof String)) {
            throw new Error("Expected the field `previous_tag_name` to be a primitive type in the JSON string but got " + data['previous_tag_name']);
        }
        // ensure the json data is a string
        if (data['tag_name'] && !(typeof data['tag_name'] === 'string' || data['tag_name'] instanceof String)) {
            throw new Error("Expected the field `tag_name` to be a primitive type in the JSON string but got " + data['tag_name']);
        }
        // ensure the json data is a string
        if (data['target_commitish'] && !(typeof data['target_commitish'] === 'string' || data['target_commitish'] instanceof String)) {
            throw new Error("Expected the field `target_commitish` to be a primitive type in the JSON string but got " + data['target_commitish']);
        }

        return true;
    }


}

ReposGenerateReleaseNotesRequest.RequiredProperties = ["tag_name"];

/**
 * Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
 * @member {String} configuration_file_path
 */
ReposGenerateReleaseNotesRequest.prototype['configuration_file_path'] = undefined;

/**
 * The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
 * @member {String} previous_tag_name
 */
ReposGenerateReleaseNotesRequest.prototype['previous_tag_name'] = undefined;

/**
 * The tag name for the release. This can be an existing tag or a new one.
 * @member {String} tag_name
 */
ReposGenerateReleaseNotesRequest.prototype['tag_name'] = undefined;

/**
 * Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
 * @member {String} target_commitish
 */
ReposGenerateReleaseNotesRequest.prototype['target_commitish'] = undefined;






export default ReposGenerateReleaseNotesRequest;

