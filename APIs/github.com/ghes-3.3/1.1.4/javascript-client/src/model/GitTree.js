/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitTreeTreeInner from './GitTreeTreeInner';

/**
 * The GitTree model module.
 * @module model/GitTree
 * @version 1.1.4
 */
class GitTree {
    /**
     * Constructs a new <code>GitTree</code>.
     * The hierarchy between files in a Git repository.
     * @alias module:model/GitTree
     * @param sha {String} 
     * @param tree {Array.<module:model/GitTreeTreeInner>} Objects specifying a tree structure
     * @param truncated {Boolean} 
     * @param url {String} 
     */
    constructor(sha, tree, truncated, url) { 
        
        GitTree.initialize(this, sha, tree, truncated, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sha, tree, truncated, url) { 
        obj['sha'] = sha;
        obj['tree'] = tree;
        obj['truncated'] = truncated;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>GitTree</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitTree} obj Optional instance to populate.
     * @return {module:model/GitTree} The populated <code>GitTree</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitTree();

            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = ApiClient.convertToType(data['tree'], [GitTreeTreeInner]);
            }
            if (data.hasOwnProperty('truncated')) {
                obj['truncated'] = ApiClient.convertToType(data['truncated'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitTree</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitTree</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GitTree.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        if (data['tree']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tree'])) {
                throw new Error("Expected the field `tree` to be an array in the JSON data but got " + data['tree']);
            }
            // validate the optional field `tree` (array)
            for (const item of data['tree']) {
                GitTreeTreeInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

GitTree.RequiredProperties = ["sha", "tree", "truncated", "url"];

/**
 * @member {String} sha
 */
GitTree.prototype['sha'] = undefined;

/**
 * Objects specifying a tree structure
 * @member {Array.<module:model/GitTreeTreeInner>} tree
 */
GitTree.prototype['tree'] = undefined;

/**
 * @member {Boolean} truncated
 */
GitTree.prototype['truncated'] = undefined;

/**
 * @member {String} url
 */
GitTree.prototype['url'] = undefined;






export default GitTree;

