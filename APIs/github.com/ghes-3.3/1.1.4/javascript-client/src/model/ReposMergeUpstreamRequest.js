/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposMergeUpstreamRequest model module.
 * @module model/ReposMergeUpstreamRequest
 * @version 1.1.4
 */
class ReposMergeUpstreamRequest {
    /**
     * Constructs a new <code>ReposMergeUpstreamRequest</code>.
     * @alias module:model/ReposMergeUpstreamRequest
     * @param branch {String} The name of the branch which should be updated to match upstream.
     */
    constructor(branch) { 
        
        ReposMergeUpstreamRequest.initialize(this, branch);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, branch) { 
        obj['branch'] = branch;
    }

    /**
     * Constructs a <code>ReposMergeUpstreamRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposMergeUpstreamRequest} obj Optional instance to populate.
     * @return {module:model/ReposMergeUpstreamRequest} The populated <code>ReposMergeUpstreamRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposMergeUpstreamRequest();

            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposMergeUpstreamRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposMergeUpstreamRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReposMergeUpstreamRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }

        return true;
    }


}

ReposMergeUpstreamRequest.RequiredProperties = ["branch"];

/**
 * The name of the branch which should be updated to match upstream.
 * @member {String} branch
 */
ReposMergeUpstreamRequest.prototype['branch'] = undefined;






export default ReposMergeUpstreamRequest;

