/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityListPublicEvents503Response from '../model/ActivityListPublicEvents503Response';
import BasicError from '../model/BasicError';
import Commit from '../model/Commit';
import DiffEntry from '../model/DiffEntry';
import EnterpriseAdminUpdateOrgName202Response from '../model/EnterpriseAdminUpdateOrgName202Response';
import OrgsRemoveOutsideCollaborator422Response from '../model/OrgsRemoveOutsideCollaborator422Response';
import PullRequest from '../model/PullRequest';
import PullRequestMergeResult from '../model/PullRequestMergeResult';
import PullRequestReview from '../model/PullRequestReview';
import PullRequestReviewComment from '../model/PullRequestReviewComment';
import PullRequestReviewRequest from '../model/PullRequestReviewRequest';
import PullRequestSimple from '../model/PullRequestSimple';
import PullsCreateReplyForReviewCommentRequest from '../model/PullsCreateReplyForReviewCommentRequest';
import PullsCreateRequest from '../model/PullsCreateRequest';
import PullsCreateReviewCommentRequest from '../model/PullsCreateReviewCommentRequest';
import PullsCreateReviewRequest from '../model/PullsCreateReviewRequest';
import PullsDismissReviewRequest from '../model/PullsDismissReviewRequest';
import PullsMergeRequest from '../model/PullsMergeRequest';
import PullsRemoveRequestedReviewersRequest from '../model/PullsRemoveRequestedReviewersRequest';
import PullsRequestReviewersRequest from '../model/PullsRequestReviewersRequest';
import PullsSubmitReviewRequest from '../model/PullsSubmitReviewRequest';
import PullsUpdateBranchRequest from '../model/PullsUpdateBranchRequest';
import PullsUpdateRequest from '../model/PullsUpdateRequest';
import PullsUpdateReviewCommentRequest from '../model/PullsUpdateReviewCommentRequest';
import PullsUpdateReviewRequest from '../model/PullsUpdateReviewRequest';
import ReviewComment from '../model/ReviewComment';
import ValidationError from '../model/ValidationError';
import ValidationErrorSimple from '../model/ValidationErrorSimple';

/**
* Pulls service.
* @module api/PullsApi
* @version 1.1.4
*/
export default class PullsApi {

    /**
    * Constructs a new PullsApi. 
    * @alias module:api/PullsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pullsCheckIfMerged operation.
     * @callback module:api/PullsApi~pullsCheckIfMergedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a pull request has been merged
     * 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {module:api/PullsApi~pullsCheckIfMergedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pullsCheckIfMerged(owner, repo, pullNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsCheckIfMerged");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsCheckIfMerged");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsCheckIfMerged");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/merge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsCreate operation.
     * @callback module:api/PullsApi~pullsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.3/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.3/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:model/PullsCreateRequest} pullsCreateRequest 
     * @param {module:api/PullsApi~pullsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequest}
     */
    pullsCreate(owner, repo, pullsCreateRequest, callback) {
      let postBody = pullsCreateRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsCreate");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsCreate");
      }
      // verify the required parameter 'pullsCreateRequest' is set
      if (pullsCreateRequest === undefined || pullsCreateRequest === null) {
        throw new Error("Missing the required parameter 'pullsCreateRequest' when calling pullsCreate");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequest;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsCreateReplyForReviewComment operation.
     * @callback module:api/PullsApi~pullsCreateReplyForReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReviewComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a reply for a review comment
     * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.3/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {module:model/PullsCreateReplyForReviewCommentRequest} pullsCreateReplyForReviewCommentRequest 
     * @param {module:api/PullsApi~pullsCreateReplyForReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReviewComment}
     */
    pullsCreateReplyForReviewComment(owner, repo, pullNumber, commentId, pullsCreateReplyForReviewCommentRequest, callback) {
      let postBody = pullsCreateReplyForReviewCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsCreateReplyForReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsCreateReplyForReviewComment");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsCreateReplyForReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling pullsCreateReplyForReviewComment");
      }
      // verify the required parameter 'pullsCreateReplyForReviewCommentRequest' is set
      if (pullsCreateReplyForReviewCommentRequest === undefined || pullsCreateReplyForReviewCommentRequest === null) {
        throw new Error("Missing the required parameter 'pullsCreateReplyForReviewCommentRequest' when calling pullsCreateReplyForReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestReviewComment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsCreateReview operation.
     * @callback module:api/PullsApi~pullsCreateReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a review for a pull request
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.3/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see \"[Submit a review for a pull request](https://docs.github.com/enterprise-server@3.3/rest/pulls#submit-a-review-for-a-pull-request).\"  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.3/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.3/rest/reference/pulls#get-a-pull-request) endpoint.  The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {module:model/PullsCreateReviewRequest} [pullsCreateReviewRequest] 
     * @param {module:api/PullsApi~pullsCreateReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReview}
     */
    pullsCreateReview(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullsCreateReviewRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsCreateReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsCreateReview");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsCreateReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsCreateReviewComment operation.
     * @callback module:api/PullsApi~pullsCreateReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReviewComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a review comment for a pull request
     *  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/enterprise-server@3.3/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.  The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.  **Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.3/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {module:model/PullsCreateReviewCommentRequest} pullsCreateReviewCommentRequest 
     * @param {module:api/PullsApi~pullsCreateReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReviewComment}
     */
    pullsCreateReviewComment(owner, repo, pullNumber, pullsCreateReviewCommentRequest, callback) {
      let postBody = pullsCreateReviewCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsCreateReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsCreateReviewComment");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsCreateReviewComment");
      }
      // verify the required parameter 'pullsCreateReviewCommentRequest' is set
      if (pullsCreateReviewCommentRequest === undefined || pullsCreateReviewCommentRequest === null) {
        throw new Error("Missing the required parameter 'pullsCreateReviewCommentRequest' when calling pullsCreateReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestReviewComment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsDeletePendingReview operation.
     * @callback module:api/PullsApi~pullsDeletePendingReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pending review for a pull request
     * 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Number} reviewId The unique identifier of the review.
     * @param {module:api/PullsApi~pullsDeletePendingReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReview}
     */
    pullsDeletePendingReview(owner, repo, pullNumber, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsDeletePendingReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsDeletePendingReview");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsDeletePendingReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling pullsDeletePendingReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber,
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PullRequestReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsDeleteReviewComment operation.
     * @callback module:api/PullsApi~pullsDeleteReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a review comment for a pull request
     * Deletes a review comment.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {module:api/PullsApi~pullsDeleteReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pullsDeleteReviewComment(owner, repo, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsDeleteReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsDeleteReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling pullsDeleteReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsDismissReview operation.
     * @callback module:api/PullsApi~pullsDismissReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dismiss a review for a pull request
     * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.3/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Number} reviewId The unique identifier of the review.
     * @param {module:model/PullsDismissReviewRequest} pullsDismissReviewRequest 
     * @param {module:api/PullsApi~pullsDismissReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReview}
     */
    pullsDismissReview(owner, repo, pullNumber, reviewId, pullsDismissReviewRequest, callback) {
      let postBody = pullsDismissReviewRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsDismissReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsDismissReview");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsDismissReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling pullsDismissReview");
      }
      // verify the required parameter 'pullsDismissReviewRequest' is set
      if (pullsDismissReviewRequest === undefined || pullsDismissReviewRequest === null) {
        throw new Error("Missing the required parameter 'pullsDismissReviewRequest' when calling pullsDismissReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber,
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsGet operation.
     * @callback module:api/PullsApi~pullsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.3/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/enterprise-server@3.3/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.3/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.3/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".  The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.  The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://docs.github.com/enterprise-server@3.3/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit. *   If merged via a [squash](https://docs.github.com/enterprise-server@3.3/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch. *   If [rebased](https://docs.github.com/enterprise-server@3.3/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.3/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {module:api/PullsApi~pullsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequest}
     */
    pullsGet(owner, repo, pullNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsGet");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsGet");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PullRequest;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsGetReview operation.
     * @callback module:api/PullsApi~pullsGetReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a review for a pull request
     * 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Number} reviewId The unique identifier of the review.
     * @param {module:api/PullsApi~pullsGetReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReview}
     */
    pullsGetReview(owner, repo, pullNumber, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsGetReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsGetReview");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsGetReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling pullsGetReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber,
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PullRequestReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsGetReviewComment operation.
     * @callback module:api/PullsApi~pullsGetReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReviewComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a review comment for a pull request
     * Provides details for a review comment.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {module:api/PullsApi~pullsGetReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReviewComment}
     */
    pullsGetReviewComment(owner, repo, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsGetReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsGetReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling pullsGetReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PullRequestReviewComment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsList operation.
     * @callback module:api/PullsApi~pullsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullRequestSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pull requests
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.3/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'open')] Either `open`, `closed`, or `all` to filter by state.
     * @param {String} [head] Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
     * @param {String} [base] Filter pulls by base branch name. Example: `gh-pages`.
     * @param {module:model/String} [sort = 'created')] What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
     * @param {module:model/String} [direction] The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/PullsApi~pullsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullRequestSimple>}
     */
    pullsList(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsList");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsList");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'head': opts['head'],
        'base': opts['base'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PullRequestSimple];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsListCommentsForReview operation.
     * @callback module:api/PullsApi~pullsListCommentsForReviewCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReviewComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List comments for a pull request review
     * List comments for a specific pull request review.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Number} reviewId The unique identifier of the review.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/PullsApi~pullsListCommentsForReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReviewComment>}
     */
    pullsListCommentsForReview(owner, repo, pullNumber, reviewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsListCommentsForReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsListCommentsForReview");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsListCommentsForReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling pullsListCommentsForReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber,
        'review_id': reviewId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReviewComment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsListCommits operation.
     * @callback module:api/PullsApi~pullsListCommitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Commit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List commits on a pull request
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.3/rest/reference/repos#list-commits) endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/PullsApi~pullsListCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Commit>}
     */
    pullsListCommits(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsListCommits");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsListCommits");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsListCommits");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Commit];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsListFiles operation.
     * @callback module:api/PullsApi~pullsListFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DiffEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pull requests files
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/PullsApi~pullsListFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DiffEntry>}
     */
    pullsListFiles(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsListFiles");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsListFiles");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsListFiles");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DiffEntry];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsListRequestedReviewers operation.
     * @callback module:api/PullsApi~pullsListRequestedReviewersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReviewRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all requested reviewers for a pull request
     * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/enterprise-server@3.3/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {module:api/PullsApi~pullsListRequestedReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReviewRequest}
     */
    pullsListRequestedReviewers(owner, repo, pullNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsListRequestedReviewers");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsListRequestedReviewers");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsListRequestedReviewers");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PullRequestReviewRequest;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsListReviewComments operation.
     * @callback module:api/PullsApi~pullsListReviewCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullRequestReviewComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List review comments on a pull request
     * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'created')] The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
     * @param {module:model/String} [direction] The direction to sort results. Ignored without `sort` parameter.
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/PullsApi~pullsListReviewCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullRequestReviewComment>}
     */
    pullsListReviewComments(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsListReviewComments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsListReviewComments");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsListReviewComments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
        'sort': opts['sort'],
        'direction': opts['direction'],
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PullRequestReviewComment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsListReviewCommentsForRepo operation.
     * @callback module:api/PullsApi~pullsListReviewCommentsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullRequestReviewComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List review comments in a repository
     * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] 
     * @param {module:model/String} [direction] The direction to sort results. Ignored without `sort` parameter.
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/PullsApi~pullsListReviewCommentsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullRequestReviewComment>}
     */
    pullsListReviewCommentsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsListReviewCommentsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsListReviewCommentsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'sort': opts['sort'],
        'direction': opts['direction'],
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PullRequestReviewComment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsListReviews operation.
     * @callback module:api/PullsApi~pullsListReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PullRequestReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reviews for a pull request
     * The list of reviews returns in chronological order.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/PullsApi~pullsListReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PullRequestReview>}
     */
    pullsListReviews(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsListReviews");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsListReviews");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsListReviews");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PullRequestReview];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsMerge operation.
     * @callback module:api/PullsApi~pullsMergeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestMergeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge a pull request
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.3/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {module:model/PullsMergeRequest} [pullsMergeRequest] 
     * @param {module:api/PullsApi~pullsMergeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestMergeResult}
     */
    pullsMerge(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullsMergeRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsMerge");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsMerge");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsMerge");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestMergeResult;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/merge', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsRemoveRequestedReviewers operation.
     * @callback module:api/PullsApi~pullsRemoveRequestedReviewersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove requested reviewers from a pull request
     * 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {module:model/PullsRemoveRequestedReviewersRequest} pullsRemoveRequestedReviewersRequest 
     * @param {module:api/PullsApi~pullsRemoveRequestedReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestSimple}
     */
    pullsRemoveRequestedReviewers(owner, repo, pullNumber, pullsRemoveRequestedReviewersRequest, callback) {
      let postBody = pullsRemoveRequestedReviewersRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsRemoveRequestedReviewers");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsRemoveRequestedReviewers");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsRemoveRequestedReviewers");
      }
      // verify the required parameter 'pullsRemoveRequestedReviewersRequest' is set
      if (pullsRemoveRequestedReviewersRequest === undefined || pullsRemoveRequestedReviewersRequest === null) {
        throw new Error("Missing the required parameter 'pullsRemoveRequestedReviewersRequest' when calling pullsRemoveRequestedReviewers");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestSimple;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsRequestReviewers operation.
     * @callback module:api/PullsApi~pullsRequestReviewersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request reviewers for a pull request
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.3/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.3/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {module:model/PullsRequestReviewersRequest} [pullsRequestReviewersRequest] 
     * @param {module:api/PullsApi~pullsRequestReviewersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestSimple}
     */
    pullsRequestReviewers(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullsRequestReviewersRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsRequestReviewers");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsRequestReviewers");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsRequestReviewers");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestSimple;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsSubmitReview operation.
     * @callback module:api/PullsApi~pullsSubmitReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a review for a pull request
     * Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see \"[Create a review for a pull request](https://docs.github.com/enterprise-server@3.3/rest/pulls#create-a-review-for-a-pull-request).\"
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Number} reviewId The unique identifier of the review.
     * @param {module:model/PullsSubmitReviewRequest} pullsSubmitReviewRequest 
     * @param {module:api/PullsApi~pullsSubmitReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReview}
     */
    pullsSubmitReview(owner, repo, pullNumber, reviewId, pullsSubmitReviewRequest, callback) {
      let postBody = pullsSubmitReviewRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsSubmitReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsSubmitReview");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsSubmitReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling pullsSubmitReview");
      }
      // verify the required parameter 'pullsSubmitReviewRequest' is set
      if (pullsSubmitReviewRequest === undefined || pullsSubmitReviewRequest === null) {
        throw new Error("Missing the required parameter 'pullsSubmitReviewRequest' when calling pullsSubmitReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber,
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsUpdate operation.
     * @callback module:api/PullsApi~pullsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.3/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {module:model/PullsUpdateRequest} [pullsUpdateRequest] 
     * @param {module:api/PullsApi~pullsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequest}
     */
    pullsUpdate(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullsUpdateRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsUpdate");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsUpdate");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsUpdate");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequest;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsUpdateBranch operation.
     * @callback module:api/PullsApi~pullsUpdateBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseAdminUpdateOrgName202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pull request branch
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Object} opts Optional parameters
     * @param {module:model/PullsUpdateBranchRequest} [pullsUpdateBranchRequest] 
     * @param {module:api/PullsApi~pullsUpdateBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseAdminUpdateOrgName202Response}
     */
    pullsUpdateBranch(owner, repo, pullNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullsUpdateBranchRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsUpdateBranch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsUpdateBranch");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsUpdateBranch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnterpriseAdminUpdateOrgName202Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsUpdateReview operation.
     * @callback module:api/PullsApi~pullsUpdateReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a review for a pull request
     * Update the review summary comment with new text.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {Number} reviewId The unique identifier of the review.
     * @param {module:model/PullsUpdateReviewRequest} pullsUpdateReviewRequest 
     * @param {module:api/PullsApi~pullsUpdateReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReview}
     */
    pullsUpdateReview(owner, repo, pullNumber, reviewId, pullsUpdateReviewRequest, callback) {
      let postBody = pullsUpdateReviewRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsUpdateReview");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsUpdateReview");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling pullsUpdateReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling pullsUpdateReview");
      }
      // verify the required parameter 'pullsUpdateReviewRequest' is set
      if (pullsUpdateReviewRequest === undefined || pullsUpdateReviewRequest === null) {
        throw new Error("Missing the required parameter 'pullsUpdateReviewRequest' when calling pullsUpdateReview");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber,
        'review_id': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestReview;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullsUpdateReviewComment operation.
     * @callback module:api/PullsApi~pullsUpdateReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullRequestReviewComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a review comment for a pull request
     * Enables you to edit a review comment.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {module:model/PullsUpdateReviewCommentRequest} pullsUpdateReviewCommentRequest 
     * @param {module:api/PullsApi~pullsUpdateReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullRequestReviewComment}
     */
    pullsUpdateReviewComment(owner, repo, commentId, pullsUpdateReviewCommentRequest, callback) {
      let postBody = pullsUpdateReviewCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling pullsUpdateReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling pullsUpdateReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling pullsUpdateReviewComment");
      }
      // verify the required parameter 'pullsUpdateReviewCommentRequest' is set
      if (pullsUpdateReviewCommentRequest === undefined || pullsUpdateReviewCommentRequest === null) {
        throw new Error("Missing the required parameter 'pullsUpdateReviewCommentRequest' when calling pullsUpdateReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullRequestReviewComment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
