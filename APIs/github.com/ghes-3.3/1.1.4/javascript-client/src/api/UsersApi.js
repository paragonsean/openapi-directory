/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicError from '../model/BasicError';
import Email from '../model/Email';
import GpgKey from '../model/GpgKey';
import Hovercard from '../model/Hovercard';
import Key from '../model/Key';
import KeySimple from '../model/KeySimple';
import PrivateUser from '../model/PrivateUser';
import SimpleUser from '../model/SimpleUser';
import UsersAddEmailForAuthenticatedUserRequest from '../model/UsersAddEmailForAuthenticatedUserRequest';
import UsersCreateGpgKeyForAuthenticatedUserRequest from '../model/UsersCreateGpgKeyForAuthenticatedUserRequest';
import UsersCreatePublicSshKeyForAuthenticatedUserRequest from '../model/UsersCreatePublicSshKeyForAuthenticatedUserRequest';
import UsersDeleteEmailForAuthenticatedUserRequest from '../model/UsersDeleteEmailForAuthenticatedUserRequest';
import UsersGetAuthenticated200Response from '../model/UsersGetAuthenticated200Response';
import UsersUpdateAuthenticatedRequest from '../model/UsersUpdateAuthenticatedRequest';
import ValidationError from '../model/ValidationError';

/**
* Users service.
* @module api/UsersApi
* @version 1.1.4
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersAddEmailForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersAddEmailForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an email address for the authenticated user
     * This endpoint is accessible with the `user` scope.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersAddEmailForAuthenticatedUserRequest} [usersAddEmailForAuthenticatedUserRequest] 
     * @param {module:api/UsersApi~usersAddEmailForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    usersAddEmailForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['usersAddEmailForAuthenticatedUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/user/emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCheckFollowingForUser operation.
     * @callback module:api/UsersApi~usersCheckFollowingForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user follows another user
     * 
     * @param {String} username The handle for the GitHub user account.
     * @param {String} targetUser 
     * @param {module:api/UsersApi~usersCheckFollowingForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersCheckFollowingForUser(username, targetUser, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersCheckFollowingForUser");
      }
      // verify the required parameter 'targetUser' is set
      if (targetUser === undefined || targetUser === null) {
        throw new Error("Missing the required parameter 'targetUser' when calling usersCheckFollowingForUser");
      }

      let pathParams = {
        'username': username,
        'target_user': targetUser
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/following/{target_user}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCheckPersonIsFollowedByAuthenticated operation.
     * @callback module:api/UsersApi~usersCheckPersonIsFollowedByAuthenticatedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a person is followed by the authenticated user
     * 
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/UsersApi~usersCheckPersonIsFollowedByAuthenticatedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersCheckPersonIsFollowedByAuthenticated(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersCheckPersonIsFollowedByAuthenticated");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/following/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCreateGpgKeyForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersCreateGpgKeyForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GpgKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a GPG key for the authenticated user
     * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {module:model/UsersCreateGpgKeyForAuthenticatedUserRequest} usersCreateGpgKeyForAuthenticatedUserRequest 
     * @param {module:api/UsersApi~usersCreateGpgKeyForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GpgKey}
     */
    usersCreateGpgKeyForAuthenticatedUser(usersCreateGpgKeyForAuthenticatedUserRequest, callback) {
      let postBody = usersCreateGpgKeyForAuthenticatedUserRequest;
      // verify the required parameter 'usersCreateGpgKeyForAuthenticatedUserRequest' is set
      if (usersCreateGpgKeyForAuthenticatedUserRequest === undefined || usersCreateGpgKeyForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'usersCreateGpgKeyForAuthenticatedUserRequest' when calling usersCreateGpgKeyForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GpgKey;
      return this.apiClient.callApi(
        '/user/gpg_keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersCreatePublicSshKeyForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersCreatePublicSshKeyForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a public SSH key for the authenticated user
     * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {module:model/UsersCreatePublicSshKeyForAuthenticatedUserRequest} usersCreatePublicSshKeyForAuthenticatedUserRequest 
     * @param {module:api/UsersApi~usersCreatePublicSshKeyForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    usersCreatePublicSshKeyForAuthenticatedUser(usersCreatePublicSshKeyForAuthenticatedUserRequest, callback) {
      let postBody = usersCreatePublicSshKeyForAuthenticatedUserRequest;
      // verify the required parameter 'usersCreatePublicSshKeyForAuthenticatedUserRequest' is set
      if (usersCreatePublicSshKeyForAuthenticatedUserRequest === undefined || usersCreatePublicSshKeyForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'usersCreatePublicSshKeyForAuthenticatedUserRequest' when calling usersCreatePublicSshKeyForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Key;
      return this.apiClient.callApi(
        '/user/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteEmailForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersDeleteEmailForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an email address for the authenticated user
     * This endpoint is accessible with the `user` scope.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersDeleteEmailForAuthenticatedUserRequest} [usersDeleteEmailForAuthenticatedUserRequest] 
     * @param {module:api/UsersApi~usersDeleteEmailForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDeleteEmailForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['usersDeleteEmailForAuthenticatedUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/emails', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteGpgKeyForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersDeleteGpgKeyForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a GPG key for the authenticated user
     * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} gpgKeyId The unique identifier of the GPG key.
     * @param {module:api/UsersApi~usersDeleteGpgKeyForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDeleteGpgKeyForAuthenticatedUser(gpgKeyId, callback) {
      let postBody = null;
      // verify the required parameter 'gpgKeyId' is set
      if (gpgKeyId === undefined || gpgKeyId === null) {
        throw new Error("Missing the required parameter 'gpgKeyId' when calling usersDeleteGpgKeyForAuthenticatedUser");
      }

      let pathParams = {
        'gpg_key_id': gpgKeyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/gpg_keys/{gpg_key_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeletePublicSshKeyForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersDeletePublicSshKeyForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a public SSH key for the authenticated user
     * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} keyId The unique identifier of the key.
     * @param {module:api/UsersApi~usersDeletePublicSshKeyForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDeletePublicSshKeyForAuthenticatedUser(keyId, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling usersDeletePublicSshKeyForAuthenticatedUser");
      }

      let pathParams = {
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/keys/{key_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersFollow operation.
     * @callback module:api/UsersApi~usersFollowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a user
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#http-verbs).\"  Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/UsersApi~usersFollowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersFollow(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersFollow");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/following/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetAuthenticated operation.
     * @callback module:api/UsersApi~usersGetAuthenticatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersGetAuthenticated200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the authenticated user
     * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.  If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
     * @param {module:api/UsersApi~usersGetAuthenticatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersGetAuthenticated200Response}
     */
    usersGetAuthenticated(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersGetAuthenticated200Response;
      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetByUsername operation.
     * @callback module:api/UsersApi~usersGetByUsernameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersGetAuthenticated200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * Provides publicly available information about someone with a GitHub account.  GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.3/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below\"  The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#authentication).  The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://docs.github.com/enterprise-server@3.3/rest/reference/users#emails)\".
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/UsersApi~usersGetByUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersGetAuthenticated200Response}
     */
    usersGetByUsername(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersGetByUsername");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersGetAuthenticated200Response;
      return this.apiClient.callApi(
        '/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetContextForUser operation.
     * @callback module:api/UsersApi~usersGetContextForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hovercard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contextual information for a user
     * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.  The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:  ```shell  curl -u username:token   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192 ```
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [subjectType] Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
     * @param {String} [subjectId] Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
     * @param {module:api/UsersApi~usersGetContextForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hovercard}
     */
    usersGetContextForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersGetContextForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'subject_type': opts['subjectType'],
        'subject_id': opts['subjectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Hovercard;
      return this.apiClient.callApi(
        '/users/{username}/hovercard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetGpgKeyForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersGetGpgKeyForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GpgKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a GPG key for the authenticated user
     * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} gpgKeyId The unique identifier of the GPG key.
     * @param {module:api/UsersApi~usersGetGpgKeyForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GpgKey}
     */
    usersGetGpgKeyForAuthenticatedUser(gpgKeyId, callback) {
      let postBody = null;
      // verify the required parameter 'gpgKeyId' is set
      if (gpgKeyId === undefined || gpgKeyId === null) {
        throw new Error("Missing the required parameter 'gpgKeyId' when calling usersGetGpgKeyForAuthenticatedUser");
      }

      let pathParams = {
        'gpg_key_id': gpgKeyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GpgKey;
      return this.apiClient.callApi(
        '/user/gpg_keys/{gpg_key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetPublicSshKeyForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersGetPublicSshKeyForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a public SSH key for the authenticated user
     * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} keyId The unique identifier of the key.
     * @param {module:api/UsersApi~usersGetPublicSshKeyForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    usersGetPublicSshKeyForAuthenticatedUser(keyId, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling usersGetPublicSshKeyForAuthenticatedUser");
      }

      let pathParams = {
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Key;
      return this.apiClient.callApi(
        '/user/keys/{key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/UsersApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.  Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.3/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
     * @param {Object} opts Optional parameters
     * @param {Number} [since] A user ID. Only return users with an ID greater than this ID.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {module:api/UsersApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    usersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListEmailsForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersListEmailsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List email addresses for the authenticated user
     * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListEmailsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    usersListEmailsForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/user/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListFollowedByAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersListFollowedByAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the people the authenticated user follows
     * Lists the people who the authenticated user follows.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListFollowedByAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    usersListFollowedByAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/user/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListFollowersForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersListFollowersForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List followers of the authenticated user
     * Lists the people following the authenticated user.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListFollowersForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    usersListFollowersForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/user/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListFollowersForUser operation.
     * @callback module:api/UsersApi~usersListFollowersForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List followers of a user
     * Lists the people following the specified user.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListFollowersForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    usersListFollowersForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersListFollowersForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/users/{username}/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListFollowingForUser operation.
     * @callback module:api/UsersApi~usersListFollowingForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the people a user follows
     * Lists the people who the specified user follows.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListFollowingForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    usersListFollowingForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersListFollowingForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/users/{username}/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListGpgKeysForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersListGpgKeysForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GpgKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List GPG keys for the authenticated user
     * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListGpgKeysForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GpgKey>}
     */
    usersListGpgKeysForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GpgKey];
      return this.apiClient.callApi(
        '/user/gpg_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListGpgKeysForUser operation.
     * @callback module:api/UsersApi~usersListGpgKeysForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GpgKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List GPG keys for a user
     * Lists the GPG keys for a user. This information is accessible by anyone.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListGpgKeysForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GpgKey>}
     */
    usersListGpgKeysForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersListGpgKeysForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GpgKey];
      return this.apiClient.callApi(
        '/users/{username}/gpg_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListPublicEmailsForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersListPublicEmailsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public email addresses for the authenticated user
     * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.3/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListPublicEmailsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Email>}
     */
    usersListPublicEmailsForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Email];
      return this.apiClient.callApi(
        '/user/public_emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListPublicKeysForUser operation.
     * @callback module:api/UsersApi~usersListPublicKeysForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KeySimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public keys for a user
     * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListPublicKeysForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KeySimple>}
     */
    usersListPublicKeysForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersListPublicKeysForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeySimple];
      return this.apiClient.callApi(
        '/users/{username}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersListPublicSshKeysForAuthenticatedUser operation.
     * @callback module:api/UsersApi~usersListPublicSshKeysForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Key>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public SSH keys for the authenticated user
     * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.3/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/UsersApi~usersListPublicSshKeysForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Key>}
     */
    usersListPublicSshKeysForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Key];
      return this.apiClient.callApi(
        '/user/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUnfollow operation.
     * @callback module:api/UsersApi~usersUnfollowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a user
     * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/UsersApi~usersUnfollowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUnfollow(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling usersUnfollow");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/following/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdateAuthenticated operation.
     * @callback module:api/UsersApi~usersUpdateAuthenticatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the authenticated user
     * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersUpdateAuthenticatedRequest} [usersUpdateAuthenticatedRequest] 
     * @param {module:api/UsersApi~usersUpdateAuthenticatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateUser}
     */
    usersUpdateAuthenticated(opts, callback) {
      opts = opts || {};
      let postBody = opts['usersUpdateAuthenticatedRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateUser;
      return this.apiClient.callApi(
        '/user', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
