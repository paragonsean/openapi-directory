/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGit_ref.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGit_ref::OAIGit_ref(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGit_ref::OAIGit_ref() {
    this->initializeModel();
}

OAIGit_ref::~OAIGit_ref() {}

void OAIGit_ref::initializeModel() {

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGit_ref::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGit_ref::fromJsonObject(QJsonObject json) {

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGit_ref::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGit_ref::asJsonObject() const {
    QJsonObject obj;
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGit_ref::getNodeId() const {
    return m_node_id;
}
void OAIGit_ref::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIGit_ref::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIGit_ref::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAIGit_ref_object OAIGit_ref::getObject() const {
    return m_object;
}
void OAIGit_ref::setObject(const OAIGit_ref_object &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIGit_ref::is_object_Set() const{
    return m_object_isSet;
}

bool OAIGit_ref::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIGit_ref::getRef() const {
    return m_ref;
}
void OAIGit_ref::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIGit_ref::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIGit_ref::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAIGit_ref::getUrl() const {
    return m_url;
}
void OAIGit_ref::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGit_ref::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGit_ref::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGit_ref::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGit_ref::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_id_isValid && m_object_isValid && m_ref_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
