/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChecksApi_H
#define OAI_OAIChecksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAICheck_annotation.h"
#include "OAICheck_run.h"
#include "OAICheck_suite.h"
#include "OAICheck_suite_preference.h"
#include "OAIChecks_create_request.h"
#include "OAIChecks_create_suite_request.h"
#include "OAIChecks_list_for_suite_200_response.h"
#include "OAIChecks_list_suites_for_ref_200_response.h"
#include "OAIChecks_set_suites_preferences_request.h"
#include "OAIChecks_update_request.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChecksApi : public QObject {
    Q_OBJECT

public:
    OAIChecksApi(const int timeOut = 0);
    ~OAIChecksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_checks_create_request OAIChecks_create_request [required]
    */
    virtual void checks_create(const QString &owner, const QString &repo, const OAIChecks_create_request &oai_checks_create_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_checks_create_suite_request OAIChecks_create_suite_request [required]
    */
    virtual void checks_createSuite(const QString &owner, const QString &repo, const OAIChecks_create_suite_request &oai_checks_create_suite_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  check_run_id qint32 [required]
    */
    virtual void checks_get(const QString &owner, const QString &repo, const qint32 &check_run_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  check_suite_id qint32 [required]
    */
    virtual void checks_getSuite(const QString &owner, const QString &repo, const qint32 &check_suite_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  check_run_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void checks_listAnnotations(const QString &owner, const QString &repo, const qint32 &check_run_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  check_name QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  app_id qint32 [optional]
    */
    virtual void checks_listForRef(const QString &owner, const QString &repo, const QString &ref, const ::OpenAPI::OptionalParam<QString> &check_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &app_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  check_suite_id qint32 [required]
    * @param[in]  check_name QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void checks_listForSuite(const QString &owner, const QString &repo, const qint32 &check_suite_id, const ::OpenAPI::OptionalParam<QString> &check_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  app_id qint32 [optional]
    * @param[in]  check_name QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void checks_listSuitesForRef(const QString &owner, const QString &repo, const QString &ref, const ::OpenAPI::OptionalParam<qint32> &app_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &check_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  check_run_id qint32 [required]
    */
    virtual void checks_rerequestRun(const QString &owner, const QString &repo, const qint32 &check_run_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  check_suite_id qint32 [required]
    */
    virtual void checks_rerequestSuite(const QString &owner, const QString &repo, const qint32 &check_suite_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_checks_set_suites_preferences_request OAIChecks_set_suites_preferences_request [required]
    */
    virtual void checks_setSuitesPreferences(const QString &owner, const QString &repo, const OAIChecks_set_suites_preferences_request &oai_checks_set_suites_preferences_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  check_run_id qint32 [required]
    * @param[in]  oai_checks_update_request OAIChecks_update_request [required]
    */
    virtual void checks_update(const QString &owner, const QString &repo, const qint32 &check_run_id, const OAIChecks_update_request &oai_checks_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checks_createCallback(OAIHttpRequestWorker *worker);
    void checks_createSuiteCallback(OAIHttpRequestWorker *worker);
    void checks_getCallback(OAIHttpRequestWorker *worker);
    void checks_getSuiteCallback(OAIHttpRequestWorker *worker);
    void checks_listAnnotationsCallback(OAIHttpRequestWorker *worker);
    void checks_listForRefCallback(OAIHttpRequestWorker *worker);
    void checks_listForSuiteCallback(OAIHttpRequestWorker *worker);
    void checks_listSuitesForRefCallback(OAIHttpRequestWorker *worker);
    void checks_rerequestRunCallback(OAIHttpRequestWorker *worker);
    void checks_rerequestSuiteCallback(OAIHttpRequestWorker *worker);
    void checks_setSuitesPreferencesCallback(OAIHttpRequestWorker *worker);
    void checks_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checks_createSignal(OAICheck_run summary);
    void checks_createSuiteSignal(OAICheck_suite summary);
    void checks_getSignal(OAICheck_run summary);
    void checks_getSuiteSignal(OAICheck_suite summary);
    void checks_listAnnotationsSignal(QList<OAICheck_annotation> summary);
    void checks_listForRefSignal(OAIChecks_list_for_suite_200_response summary);
    void checks_listForSuiteSignal(OAIChecks_list_for_suite_200_response summary);
    void checks_listSuitesForRefSignal(OAIChecks_list_suites_for_ref_200_response summary);
    void checks_rerequestRunSignal(OAIObject summary);
    void checks_rerequestSuiteSignal(OAIObject summary);
    void checks_setSuitesPreferencesSignal(OAICheck_suite_preference summary);
    void checks_updateSignal(OAICheck_run summary);


    void checks_createSignalFull(OAIHttpRequestWorker *worker, OAICheck_run summary);
    void checks_createSuiteSignalFull(OAIHttpRequestWorker *worker, OAICheck_suite summary);
    void checks_getSignalFull(OAIHttpRequestWorker *worker, OAICheck_run summary);
    void checks_getSuiteSignalFull(OAIHttpRequestWorker *worker, OAICheck_suite summary);
    void checks_listAnnotationsSignalFull(OAIHttpRequestWorker *worker, QList<OAICheck_annotation> summary);
    void checks_listForRefSignalFull(OAIHttpRequestWorker *worker, OAIChecks_list_for_suite_200_response summary);
    void checks_listForSuiteSignalFull(OAIHttpRequestWorker *worker, OAIChecks_list_for_suite_200_response summary);
    void checks_listSuitesForRefSignalFull(OAIHttpRequestWorker *worker, OAIChecks_list_suites_for_ref_200_response summary);
    void checks_rerequestRunSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void checks_rerequestSuiteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void checks_setSuitesPreferencesSignalFull(OAIHttpRequestWorker *worker, OAICheck_suite_preference summary);
    void checks_updateSignalFull(OAIHttpRequestWorker *worker, OAICheck_run summary);

    Q_DECL_DEPRECATED_X("Use checks_createSignalError() instead")
    void checks_createSignalE(OAICheck_run summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_createSignalError(OAICheck_run summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_createSuiteSignalError() instead")
    void checks_createSuiteSignalE(OAICheck_suite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_createSuiteSignalError(OAICheck_suite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_getSignalError() instead")
    void checks_getSignalE(OAICheck_run summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_getSignalError(OAICheck_run summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_getSuiteSignalError() instead")
    void checks_getSuiteSignalE(OAICheck_suite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_getSuiteSignalError(OAICheck_suite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listAnnotationsSignalError() instead")
    void checks_listAnnotationsSignalE(QList<OAICheck_annotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listAnnotationsSignalError(QList<OAICheck_annotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listForRefSignalError() instead")
    void checks_listForRefSignalE(OAIChecks_list_for_suite_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listForRefSignalError(OAIChecks_list_for_suite_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listForSuiteSignalError() instead")
    void checks_listForSuiteSignalE(OAIChecks_list_for_suite_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listForSuiteSignalError(OAIChecks_list_for_suite_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listSuitesForRefSignalError() instead")
    void checks_listSuitesForRefSignalE(OAIChecks_list_suites_for_ref_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listSuitesForRefSignalError(OAIChecks_list_suites_for_ref_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_rerequestRunSignalError() instead")
    void checks_rerequestRunSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_rerequestRunSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_rerequestSuiteSignalError() instead")
    void checks_rerequestSuiteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_rerequestSuiteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_setSuitesPreferencesSignalError() instead")
    void checks_setSuitesPreferencesSignalE(OAICheck_suite_preference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_setSuitesPreferencesSignalError(OAICheck_suite_preference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_updateSignalError() instead")
    void checks_updateSignalE(OAICheck_run summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_updateSignalError(OAICheck_run summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checks_createSignalErrorFull() instead")
    void checks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_createSuiteSignalErrorFull() instead")
    void checks_createSuiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_createSuiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_getSignalErrorFull() instead")
    void checks_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_getSuiteSignalErrorFull() instead")
    void checks_getSuiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_getSuiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listAnnotationsSignalErrorFull() instead")
    void checks_listAnnotationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listAnnotationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listForRefSignalErrorFull() instead")
    void checks_listForRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listForRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listForSuiteSignalErrorFull() instead")
    void checks_listForSuiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listForSuiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_listSuitesForRefSignalErrorFull() instead")
    void checks_listSuitesForRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_listSuitesForRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_rerequestRunSignalErrorFull() instead")
    void checks_rerequestRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_rerequestRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_rerequestSuiteSignalErrorFull() instead")
    void checks_rerequestSuiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_rerequestSuiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_setSuitesPreferencesSignalErrorFull() instead")
    void checks_setSuitesPreferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_setSuitesPreferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checks_updateSignalErrorFull() instead")
    void checks_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checks_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
