/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGpg_key.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGpg_key::OAIGpg_key(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGpg_key::OAIGpg_key() {
    this->initializeModel();
}

OAIGpg_key::~OAIGpg_key() {}

void OAIGpg_key::initializeModel() {

    m_can_certify_isSet = false;
    m_can_certify_isValid = false;

    m_can_encrypt_comms_isSet = false;
    m_can_encrypt_comms_isValid = false;

    m_can_encrypt_storage_isSet = false;
    m_can_encrypt_storage_isValid = false;

    m_can_sign_isSet = false;
    m_can_sign_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_primary_key_id_isSet = false;
    m_primary_key_id_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_raw_key_isSet = false;
    m_raw_key_isValid = false;

    m_subkeys_isSet = false;
    m_subkeys_isValid = false;
}

void OAIGpg_key::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGpg_key::fromJsonObject(QJsonObject json) {

    m_can_certify_isValid = ::OpenAPI::fromJsonValue(m_can_certify, json[QString("can_certify")]);
    m_can_certify_isSet = !json[QString("can_certify")].isNull() && m_can_certify_isValid;

    m_can_encrypt_comms_isValid = ::OpenAPI::fromJsonValue(m_can_encrypt_comms, json[QString("can_encrypt_comms")]);
    m_can_encrypt_comms_isSet = !json[QString("can_encrypt_comms")].isNull() && m_can_encrypt_comms_isValid;

    m_can_encrypt_storage_isValid = ::OpenAPI::fromJsonValue(m_can_encrypt_storage, json[QString("can_encrypt_storage")]);
    m_can_encrypt_storage_isSet = !json[QString("can_encrypt_storage")].isNull() && m_can_encrypt_storage_isValid;

    m_can_sign_isValid = ::OpenAPI::fromJsonValue(m_can_sign, json[QString("can_sign")]);
    m_can_sign_isSet = !json[QString("can_sign")].isNull() && m_can_sign_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("key_id")]);
    m_key_id_isSet = !json[QString("key_id")].isNull() && m_key_id_isValid;

    m_primary_key_id_isValid = ::OpenAPI::fromJsonValue(m_primary_key_id, json[QString("primary_key_id")]);
    m_primary_key_id_isSet = !json[QString("primary_key_id")].isNull() && m_primary_key_id_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("public_key")]);
    m_public_key_isSet = !json[QString("public_key")].isNull() && m_public_key_isValid;

    m_raw_key_isValid = ::OpenAPI::fromJsonValue(m_raw_key, json[QString("raw_key")]);
    m_raw_key_isSet = !json[QString("raw_key")].isNull() && m_raw_key_isValid;

    m_subkeys_isValid = ::OpenAPI::fromJsonValue(m_subkeys, json[QString("subkeys")]);
    m_subkeys_isSet = !json[QString("subkeys")].isNull() && m_subkeys_isValid;
}

QString OAIGpg_key::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGpg_key::asJsonObject() const {
    QJsonObject obj;
    if (m_can_certify_isSet) {
        obj.insert(QString("can_certify"), ::OpenAPI::toJsonValue(m_can_certify));
    }
    if (m_can_encrypt_comms_isSet) {
        obj.insert(QString("can_encrypt_comms"), ::OpenAPI::toJsonValue(m_can_encrypt_comms));
    }
    if (m_can_encrypt_storage_isSet) {
        obj.insert(QString("can_encrypt_storage"), ::OpenAPI::toJsonValue(m_can_encrypt_storage));
    }
    if (m_can_sign_isSet) {
        obj.insert(QString("can_sign"), ::OpenAPI::toJsonValue(m_can_sign));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_id_isSet) {
        obj.insert(QString("key_id"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_primary_key_id_isSet) {
        obj.insert(QString("primary_key_id"), ::OpenAPI::toJsonValue(m_primary_key_id));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("public_key"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_raw_key_isSet) {
        obj.insert(QString("raw_key"), ::OpenAPI::toJsonValue(m_raw_key));
    }
    if (m_subkeys.size() > 0) {
        obj.insert(QString("subkeys"), ::OpenAPI::toJsonValue(m_subkeys));
    }
    return obj;
}

bool OAIGpg_key::isCanCertify() const {
    return m_can_certify;
}
void OAIGpg_key::setCanCertify(const bool &can_certify) {
    m_can_certify = can_certify;
    m_can_certify_isSet = true;
}

bool OAIGpg_key::is_can_certify_Set() const{
    return m_can_certify_isSet;
}

bool OAIGpg_key::is_can_certify_Valid() const{
    return m_can_certify_isValid;
}

bool OAIGpg_key::isCanEncryptComms() const {
    return m_can_encrypt_comms;
}
void OAIGpg_key::setCanEncryptComms(const bool &can_encrypt_comms) {
    m_can_encrypt_comms = can_encrypt_comms;
    m_can_encrypt_comms_isSet = true;
}

bool OAIGpg_key::is_can_encrypt_comms_Set() const{
    return m_can_encrypt_comms_isSet;
}

bool OAIGpg_key::is_can_encrypt_comms_Valid() const{
    return m_can_encrypt_comms_isValid;
}

bool OAIGpg_key::isCanEncryptStorage() const {
    return m_can_encrypt_storage;
}
void OAIGpg_key::setCanEncryptStorage(const bool &can_encrypt_storage) {
    m_can_encrypt_storage = can_encrypt_storage;
    m_can_encrypt_storage_isSet = true;
}

bool OAIGpg_key::is_can_encrypt_storage_Set() const{
    return m_can_encrypt_storage_isSet;
}

bool OAIGpg_key::is_can_encrypt_storage_Valid() const{
    return m_can_encrypt_storage_isValid;
}

bool OAIGpg_key::isCanSign() const {
    return m_can_sign;
}
void OAIGpg_key::setCanSign(const bool &can_sign) {
    m_can_sign = can_sign;
    m_can_sign_isSet = true;
}

bool OAIGpg_key::is_can_sign_Set() const{
    return m_can_sign_isSet;
}

bool OAIGpg_key::is_can_sign_Valid() const{
    return m_can_sign_isValid;
}

QDateTime OAIGpg_key::getCreatedAt() const {
    return m_created_at;
}
void OAIGpg_key::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGpg_key::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGpg_key::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIGpg_key_emails_inner> OAIGpg_key::getEmails() const {
    return m_emails;
}
void OAIGpg_key::setEmails(const QList<OAIGpg_key_emails_inner> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIGpg_key::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIGpg_key::is_emails_Valid() const{
    return m_emails_isValid;
}

QDateTime OAIGpg_key::getExpiresAt() const {
    return m_expires_at;
}
void OAIGpg_key::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIGpg_key::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIGpg_key::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

qint32 OAIGpg_key::getId() const {
    return m_id;
}
void OAIGpg_key::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGpg_key::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGpg_key::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGpg_key::getKeyId() const {
    return m_key_id;
}
void OAIGpg_key::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAIGpg_key::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAIGpg_key::is_key_id_Valid() const{
    return m_key_id_isValid;
}

qint32 OAIGpg_key::getPrimaryKeyId() const {
    return m_primary_key_id;
}
void OAIGpg_key::setPrimaryKeyId(const qint32 &primary_key_id) {
    m_primary_key_id = primary_key_id;
    m_primary_key_id_isSet = true;
}

bool OAIGpg_key::is_primary_key_id_Set() const{
    return m_primary_key_id_isSet;
}

bool OAIGpg_key::is_primary_key_id_Valid() const{
    return m_primary_key_id_isValid;
}

QString OAIGpg_key::getPublicKey() const {
    return m_public_key;
}
void OAIGpg_key::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIGpg_key::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIGpg_key::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIGpg_key::getRawKey() const {
    return m_raw_key;
}
void OAIGpg_key::setRawKey(const QString &raw_key) {
    m_raw_key = raw_key;
    m_raw_key_isSet = true;
}

bool OAIGpg_key::is_raw_key_Set() const{
    return m_raw_key_isSet;
}

bool OAIGpg_key::is_raw_key_Valid() const{
    return m_raw_key_isValid;
}

QList<OAIGpg_key_subkeys_inner> OAIGpg_key::getSubkeys() const {
    return m_subkeys;
}
void OAIGpg_key::setSubkeys(const QList<OAIGpg_key_subkeys_inner> &subkeys) {
    m_subkeys = subkeys;
    m_subkeys_isSet = true;
}

bool OAIGpg_key::is_subkeys_Set() const{
    return m_subkeys_isSet;
}

bool OAIGpg_key::is_subkeys_Valid() const{
    return m_subkeys_isValid;
}

bool OAIGpg_key::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_certify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_encrypt_comms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_encrypt_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subkeys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGpg_key::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_can_certify_isValid && m_can_encrypt_comms_isValid && m_can_encrypt_storage_isValid && m_can_sign_isValid && m_created_at_isValid && m_emails_isValid && m_expires_at_isValid && m_id_isValid && m_key_id_isValid && m_primary_key_id_isValid && m_public_key_isValid && m_raw_key_isValid && m_subkeys_isValid && true;
}

} // namespace OpenAPI
