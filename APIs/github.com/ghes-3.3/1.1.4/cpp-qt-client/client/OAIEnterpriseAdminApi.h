/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnterpriseAdminApi_H
#define OAI_OAIEnterpriseAdminApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActions_enterprise_permissions.h"
#include "OAIAnnouncement.h"
#include "OAIAudit_log_event.h"
#include "OAIAuthentication_token.h"
#include "OAIAuthorization.h"
#include "OAIConfiguration_status.h"
#include "OAIEnterprise_admin_create_global_webhook_request.h"
#include "OAIEnterprise_admin_create_impersonation_o_auth_token_request.h"
#include "OAIEnterprise_admin_create_org_request.h"
#include "OAIEnterprise_admin_create_pre_receive_environment_request.h"
#include "OAIEnterprise_admin_create_pre_receive_hook_request.h"
#include "OAIEnterprise_admin_create_self_hosted_runner_group_for_enterprise_request.h"
#include "OAIEnterprise_admin_create_user_request.h"
#include "OAIEnterprise_admin_delete_pre_receive_environment_422_response.h"
#include "OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response.h"
#include "OAIEnterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_response.h"
#include "OAIEnterprise_admin_list_self_hosted_runners_for_enterprise_200_response.h"
#include "OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response.h"
#include "OAIEnterprise_admin_set_github_actions_permissions_enterprise_request.h"
#include "OAIEnterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request.h"
#include "OAIEnterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request.h"
#include "OAIEnterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request.h"
#include "OAIEnterprise_admin_suspend_user_request.h"
#include "OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response.h"
#include "OAIEnterprise_admin_unsuspend_user_request.h"
#include "OAIEnterprise_admin_update_global_webhook_request.h"
#include "OAIEnterprise_admin_update_ldap_mapping_for_team_request.h"
#include "OAIEnterprise_admin_update_org_name_202_response.h"
#include "OAIEnterprise_admin_update_org_name_request.h"
#include "OAIEnterprise_admin_update_pre_receive_environment_request.h"
#include "OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_org_request.h"
#include "OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_repo_request.h"
#include "OAIEnterprise_admin_update_pre_receive_hook_request.h"
#include "OAIEnterprise_admin_update_self_hosted_runner_group_for_enterprise_request.h"
#include "OAIEnterprise_admin_update_username_for_user_request.h"
#include "OAIEnterprise_comment_overview.h"
#include "OAIEnterprise_gist_overview.h"
#include "OAIEnterprise_hook_overview.h"
#include "OAIEnterprise_issue_overview.h"
#include "OAIEnterprise_milestone_overview.h"
#include "OAIEnterprise_organization_overview.h"
#include "OAIEnterprise_overview.h"
#include "OAIEnterprise_page_overview.h"
#include "OAIEnterprise_pull_request_overview.h"
#include "OAIEnterprise_repository_overview.h"
#include "OAIEnterprise_settings.h"
#include "OAIEnterprise_user_overview.h"
#include "OAIGlobal_hook.h"
#include "OAIGlobal_hook_2.h"
#include "OAILdap_mapping_team.h"
#include "OAILdap_mapping_user.h"
#include "OAILicense_info.h"
#include "OAIMaintenance_status.h"
#include "OAIOrg_pre_receive_hook.h"
#include "OAIOrganization_simple.h"
#include "OAIPre_receive_environment.h"
#include "OAIPre_receive_environment_download_status.h"
#include "OAIPre_receive_hook.h"
#include "OAIPublic_key_full.h"
#include "OAIRepository_pre_receive_hook.h"
#include "OAIRunner.h"
#include "OAIRunner_application.h"
#include "OAIRunner_groups_enterprise.h"
#include "OAISelected_actions.h"
#include "OAISimple_user.h"
#include "OAISsh_key.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnterpriseAdminApi : public QObject {
    Q_OBJECT

public:
    OAIEnterpriseAdminApi(const int timeOut = 0);
    ~OAIEnterpriseAdminApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorized_key QString [required]
    */
    virtual void enterpriseAdmin_addAuthorizedSshKey(const QString &authorized_key);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  org_id qint32 [required]
    */
    virtual void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &org_id);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &runner_id);

    /**
    * @param[in]  license QString [required]
    * @param[in]  password QString [optional]
    * @param[in]  settings QString [optional]
    */
    virtual void enterpriseAdmin_createEnterpriseServerLicense(const QString &license, const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &settings = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_enterprise_admin_create_global_webhook_request OAIEnterprise_admin_create_global_webhook_request [required]
    */
    virtual void enterpriseAdmin_createGlobalWebhook(const OAIEnterprise_admin_create_global_webhook_request &oai_enterprise_admin_create_global_webhook_request);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_enterprise_admin_create_impersonation_o_auth_token_request OAIEnterprise_admin_create_impersonation_o_auth_token_request [required]
    */
    virtual void enterpriseAdmin_createImpersonationOAuthToken(const QString &username, const OAIEnterprise_admin_create_impersonation_o_auth_token_request &oai_enterprise_admin_create_impersonation_o_auth_token_request);

    /**
    * @param[in]  oai_enterprise_admin_create_org_request OAIEnterprise_admin_create_org_request [required]
    */
    virtual void enterpriseAdmin_createOrg(const OAIEnterprise_admin_create_org_request &oai_enterprise_admin_create_org_request);

    /**
    * @param[in]  oai_enterprise_admin_create_pre_receive_environment_request OAIEnterprise_admin_create_pre_receive_environment_request [required]
    */
    virtual void enterpriseAdmin_createPreReceiveEnvironment(const OAIEnterprise_admin_create_pre_receive_environment_request &oai_enterprise_admin_create_pre_receive_environment_request);

    /**
    * @param[in]  oai_enterprise_admin_create_pre_receive_hook_request OAIEnterprise_admin_create_pre_receive_hook_request [required]
    */
    virtual void enterpriseAdmin_createPreReceiveHook(const OAIEnterprise_admin_create_pre_receive_hook_request &oai_enterprise_admin_create_pre_receive_hook_request);

    /**
    * @param[in]  enterprise QString [required]
    */
    virtual void enterpriseAdmin_createRegistrationTokenForEnterprise(const QString &enterprise);

    /**
    * @param[in]  enterprise QString [required]
    */
    virtual void enterpriseAdmin_createRemoveTokenForEnterprise(const QString &enterprise);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  oai_enterprise_admin_create_self_hosted_runner_group_for_enterprise_request OAIEnterprise_admin_create_self_hosted_runner_group_for_enterprise_request [required]
    */
    virtual void enterpriseAdmin_createSelfHostedRunnerGroupForEnterprise(const QString &enterprise, const OAIEnterprise_admin_create_self_hosted_runner_group_for_enterprise_request &oai_enterprise_admin_create_self_hosted_runner_group_for_enterprise_request);

    /**
    * @param[in]  oai_enterprise_admin_create_user_request OAIEnterprise_admin_create_user_request [required]
    */
    virtual void enterpriseAdmin_createUser(const OAIEnterprise_admin_create_user_request &oai_enterprise_admin_create_user_request);

    /**
    * @param[in]  hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_deleteGlobalWebhook(const qint32 &hook_id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void enterpriseAdmin_deleteImpersonationOAuthToken(const QString &username);

    /**
    * @param[in]  token_id qint32 [required]
    */
    virtual void enterpriseAdmin_deletePersonalAccessToken(const qint32 &token_id);

    /**
    * @param[in]  pre_receive_environment_id qint32 [required]
    */
    virtual void enterpriseAdmin_deletePreReceiveEnvironment(const qint32 &pre_receive_environment_id);

    /**
    * @param[in]  pre_receive_hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_deletePreReceiveHook(const qint32 &pre_receive_hook_id);

    /**
    * @param[in]  key_ids QString [required]
    */
    virtual void enterpriseAdmin_deletePublicKey(const QString &key_ids);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void enterpriseAdmin_deleteSelfHostedRunnerFromEnterprise(const QString &enterprise, const qint32 &runner_id);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    */
    virtual void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterprise(const QString &enterprise, const qint32 &runner_group_id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void enterpriseAdmin_deleteUser(const QString &username);

    /**
    * @param[in]  username QString [required]
    */
    virtual void enterpriseAdmin_demoteSiteAdministrator(const QString &username);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  org_id qint32 [required]
    */
    virtual void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterprise(const QString &enterprise, const qint32 &org_id);

    /**
    * @param[in]  maintenance QString [required]
    */
    virtual void enterpriseAdmin_enableOrDisableMaintenanceMode(const QString &maintenance);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  org_id qint32 [required]
    */
    virtual void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterprise(const QString &enterprise, const qint32 &org_id);


    virtual void enterpriseAdmin_getAllAuthorizedSshKeys();


    virtual void enterpriseAdmin_getAllStats();

    /**
    * @param[in]  enterprise QString [required]
    */
    virtual void enterpriseAdmin_getAllowedActionsEnterprise(const QString &enterprise);


    virtual void enterpriseAdmin_getAnnouncement();

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  phrase QString [optional]
    * @param[in]  after QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void enterpriseAdmin_getAuditLog(const QString &enterprise, const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());


    virtual void enterpriseAdmin_getCommentStats();


    virtual void enterpriseAdmin_getConfigurationStatus();

    /**
    * @param[in]  pre_receive_environment_id qint32 [required]
    */
    virtual void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironment(const qint32 &pre_receive_environment_id);


    virtual void enterpriseAdmin_getGistStats();

    /**
    * @param[in]  enterprise QString [required]
    */
    virtual void enterpriseAdmin_getGithubActionsPermissionsEnterprise(const QString &enterprise);

    /**
    * @param[in]  hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_getGlobalWebhook(const qint32 &hook_id);


    virtual void enterpriseAdmin_getHooksStats();


    virtual void enterpriseAdmin_getIssueStats();


    virtual void enterpriseAdmin_getLicenseInformation();


    virtual void enterpriseAdmin_getMaintenanceStatus();


    virtual void enterpriseAdmin_getMilestoneStats();


    virtual void enterpriseAdmin_getOrgStats();


    virtual void enterpriseAdmin_getPagesStats();

    /**
    * @param[in]  pre_receive_environment_id qint32 [required]
    */
    virtual void enterpriseAdmin_getPreReceiveEnvironment(const qint32 &pre_receive_environment_id);

    /**
    * @param[in]  pre_receive_hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_getPreReceiveHook(const qint32 &pre_receive_hook_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  pre_receive_hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_getPreReceiveHookForOrg(const QString &org, const qint32 &pre_receive_hook_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pre_receive_hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_getPreReceiveHookForRepo(const QString &owner, const QString &repo, const qint32 &pre_receive_hook_id);


    virtual void enterpriseAdmin_getPullRequestStats();


    virtual void enterpriseAdmin_getRepoStats();

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void enterpriseAdmin_getSelfHostedRunnerForEnterprise(const QString &enterprise, const qint32 &runner_id);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    */
    virtual void enterpriseAdmin_getSelfHostedRunnerGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id);


    virtual void enterpriseAdmin_getSettings();


    virtual void enterpriseAdmin_getUserStats();

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void enterpriseAdmin_listGlobalWebhooks(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void enterpriseAdmin_listPersonalAccessTokens(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void enterpriseAdmin_listPreReceiveEnvironments(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void enterpriseAdmin_listPreReceiveHooks(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void enterpriseAdmin_listPreReceiveHooksForOrg(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void enterpriseAdmin_listPreReceiveHooksForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  since QString [optional]
    */
    virtual void enterpriseAdmin_listPublicKeys(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  enterprise QString [required]
    */
    virtual void enterpriseAdmin_listRunnerApplicationsForEnterprise(const QString &enterprise);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterprise(const QString &enterprise, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterprise(const QString &enterprise, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void enterpriseAdmin_listSelfHostedRunnersForEnterprise(const QString &enterprise, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_pingGlobalWebhook(const qint32 &hook_id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void enterpriseAdmin_promoteUserToBeSiteAdministrator(const QString &username);


    virtual void enterpriseAdmin_removeAnnouncement();

    /**
    * @param[in]  authorized_key QString [required]
    */
    virtual void enterpriseAdmin_removeAuthorizedSshKey(const QString &authorized_key);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  org_id qint32 [required]
    */
    virtual void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &org_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  pre_receive_hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_removePreReceiveHookEnforcementForOrg(const QString &org, const qint32 &pre_receive_hook_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pre_receive_hook_id qint32 [required]
    */
    virtual void enterpriseAdmin_removePreReceiveHookEnforcementForRepo(const QString &owner, const QString &repo, const qint32 &pre_receive_hook_id);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &runner_id);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  oai_selected_actions OAISelected_actions [required]
    */
    virtual void enterpriseAdmin_setAllowedActionsEnterprise(const QString &enterprise, const OAISelected_actions &oai_selected_actions);

    /**
    * @param[in]  oai_announcement OAIAnnouncement [required]
    */
    virtual void enterpriseAdmin_setAnnouncement(const OAIAnnouncement &oai_announcement);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  oai_enterprise_admin_set_github_actions_permissions_enterprise_request OAIEnterprise_admin_set_github_actions_permissions_enterprise_request [required]
    */
    virtual void enterpriseAdmin_setGithubActionsPermissionsEnterprise(const QString &enterprise, const OAIEnterprise_admin_set_github_actions_permissions_enterprise_request &oai_enterprise_admin_set_github_actions_permissions_enterprise_request);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  oai_enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request OAIEnterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request [required]
    */
    virtual void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const OAIEnterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request &oai_enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  oai_enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request OAIEnterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request [required]
    */
    virtual void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterprise(const QString &enterprise, const OAIEnterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request &oai_enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request);

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  oai_enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request OAIEnterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request [required]
    */
    virtual void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const OAIEnterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request &oai_enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request);

    /**
    * @param[in]  settings QString [required]
    */
    virtual void enterpriseAdmin_setSettings(const QString &settings);


    virtual void enterpriseAdmin_startConfigurationProcess();

    /**
    * @param[in]  pre_receive_environment_id qint32 [required]
    */
    virtual void enterpriseAdmin_startPreReceiveEnvironmentDownload(const qint32 &pre_receive_environment_id);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_enterprise_admin_suspend_user_request OAIEnterprise_admin_suspend_user_request [optional]
    */
    virtual void enterpriseAdmin_suspendUser(const QString &username, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_suspend_user_request> &oai_enterprise_admin_suspend_user_request = ::OpenAPI::OptionalParam<OAIEnterprise_admin_suspend_user_request>());

    /**
    * @param[in]  team_id qint32 [required]
    */
    virtual void enterpriseAdmin_syncLdapMappingForTeam(const qint32 &team_id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void enterpriseAdmin_syncLdapMappingForUser(const QString &username);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_enterprise_admin_unsuspend_user_request OAIEnterprise_admin_unsuspend_user_request [optional]
    */
    virtual void enterpriseAdmin_unsuspendUser(const QString &username, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_unsuspend_user_request> &oai_enterprise_admin_unsuspend_user_request = ::OpenAPI::OptionalParam<OAIEnterprise_admin_unsuspend_user_request>());

    /**
    * @param[in]  hook_id qint32 [required]
    * @param[in]  oai_enterprise_admin_update_global_webhook_request OAIEnterprise_admin_update_global_webhook_request [required]
    */
    virtual void enterpriseAdmin_updateGlobalWebhook(const qint32 &hook_id, const OAIEnterprise_admin_update_global_webhook_request &oai_enterprise_admin_update_global_webhook_request);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  oai_enterprise_admin_update_ldap_mapping_for_team_request OAIEnterprise_admin_update_ldap_mapping_for_team_request [required]
    */
    virtual void enterpriseAdmin_updateLdapMappingForTeam(const qint32 &team_id, const OAIEnterprise_admin_update_ldap_mapping_for_team_request &oai_enterprise_admin_update_ldap_mapping_for_team_request);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_enterprise_admin_update_ldap_mapping_for_team_request OAIEnterprise_admin_update_ldap_mapping_for_team_request [required]
    */
    virtual void enterpriseAdmin_updateLdapMappingForUser(const QString &username, const OAIEnterprise_admin_update_ldap_mapping_for_team_request &oai_enterprise_admin_update_ldap_mapping_for_team_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_enterprise_admin_update_org_name_request OAIEnterprise_admin_update_org_name_request [required]
    */
    virtual void enterpriseAdmin_updateOrgName(const QString &org, const OAIEnterprise_admin_update_org_name_request &oai_enterprise_admin_update_org_name_request);

    /**
    * @param[in]  pre_receive_environment_id qint32 [required]
    * @param[in]  oai_enterprise_admin_update_pre_receive_environment_request OAIEnterprise_admin_update_pre_receive_environment_request [optional]
    */
    virtual void enterpriseAdmin_updatePreReceiveEnvironment(const qint32 &pre_receive_environment_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_environment_request> &oai_enterprise_admin_update_pre_receive_environment_request = ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_environment_request>());

    /**
    * @param[in]  pre_receive_hook_id qint32 [required]
    * @param[in]  oai_enterprise_admin_update_pre_receive_hook_request OAIEnterprise_admin_update_pre_receive_hook_request [optional]
    */
    virtual void enterpriseAdmin_updatePreReceiveHook(const qint32 &pre_receive_hook_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_request> &oai_enterprise_admin_update_pre_receive_hook_request = ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  pre_receive_hook_id qint32 [required]
    * @param[in]  oai_enterprise_admin_update_pre_receive_hook_enforcement_for_org_request OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_org_request [optional]
    */
    virtual void enterpriseAdmin_updatePreReceiveHookEnforcementForOrg(const QString &org, const qint32 &pre_receive_hook_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_org_request> &oai_enterprise_admin_update_pre_receive_hook_enforcement_for_org_request = ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_org_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pre_receive_hook_id qint32 [required]
    * @param[in]  oai_enterprise_admin_update_pre_receive_hook_enforcement_for_repo_request OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_repo_request [optional]
    */
    virtual void enterpriseAdmin_updatePreReceiveHookEnforcementForRepo(const QString &owner, const QString &repo, const qint32 &pre_receive_hook_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_repo_request> &oai_enterprise_admin_update_pre_receive_hook_enforcement_for_repo_request = ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_repo_request>());

    /**
    * @param[in]  enterprise QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  oai_enterprise_admin_update_self_hosted_runner_group_for_enterprise_request OAIEnterprise_admin_update_self_hosted_runner_group_for_enterprise_request [optional]
    */
    virtual void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_self_hosted_runner_group_for_enterprise_request> &oai_enterprise_admin_update_self_hosted_runner_group_for_enterprise_request = ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_self_hosted_runner_group_for_enterprise_request>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_enterprise_admin_update_username_for_user_request OAIEnterprise_admin_update_username_for_user_request [required]
    */
    virtual void enterpriseAdmin_updateUsernameForUser(const QString &username, const OAIEnterprise_admin_update_username_for_user_request &oai_enterprise_admin_update_username_for_user_request);

    /**
    * @param[in]  license QString [optional]
    */
    virtual void enterpriseAdmin_upgradeLicense(const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void enterpriseAdmin_addAuthorizedSshKeyCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createEnterpriseServerLicenseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createGlobalWebhookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createImpersonationOAuthTokenCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createOrgCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createPreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createPreReceiveHookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createRegistrationTokenForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createRemoveTokenForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createUserCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteGlobalWebhookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteImpersonationOAuthTokenCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePersonalAccessTokenCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePreReceiveHookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePublicKeyCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteUserCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_demoteSiteAdministratorCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_enableOrDisableMaintenanceModeCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getAllAuthorizedSshKeysCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getAllStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getAllowedActionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getAnnouncementCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getAuditLogCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getCommentStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getConfigurationStatusCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getGistStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getGithubActionsPermissionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getGlobalWebhookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getHooksStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getIssueStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getLicenseInformationCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getMaintenanceStatusCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getMilestoneStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getOrgStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getPagesStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getPreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getPreReceiveHookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getPreReceiveHookForOrgCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getPreReceiveHookForRepoCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getPullRequestStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getRepoStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getSelfHostedRunnerForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getSettingsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getUserStatsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listGlobalWebhooksCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listPersonalAccessTokensCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listPreReceiveEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listPreReceiveHooksCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listPreReceiveHooksForOrgCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listPreReceiveHooksForRepoCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listPublicKeysCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listRunnerApplicationsForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listSelfHostedRunnersForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_pingGlobalWebhookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_promoteUserToBeSiteAdministratorCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removeAnnouncementCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removeAuthorizedSshKeyCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removePreReceiveHookEnforcementForOrgCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removePreReceiveHookEnforcementForRepoCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setAllowedActionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setAnnouncementCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setGithubActionsPermissionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setSettingsCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_startConfigurationProcessCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_startPreReceiveEnvironmentDownloadCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_suspendUserCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_syncLdapMappingForTeamCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_syncLdapMappingForUserCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_unsuspendUserCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updateGlobalWebhookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updateLdapMappingForTeamCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updateLdapMappingForUserCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updateOrgNameCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updatePreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updatePreReceiveHookCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForOrgCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForRepoCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updateUsernameForUserCallback(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_upgradeLicenseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void enterpriseAdmin_addAuthorizedSshKeySignal(QList<OAISsh_key> summary);
    void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal();
    void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignal();
    void enterpriseAdmin_createEnterpriseServerLicenseSignal();
    void enterpriseAdmin_createGlobalWebhookSignal(OAIGlobal_hook summary);
    void enterpriseAdmin_createImpersonationOAuthTokenSignal(OAIAuthorization summary);
    void enterpriseAdmin_createOrgSignal(OAIOrganization_simple summary);
    void enterpriseAdmin_createPreReceiveEnvironmentSignal(OAIPre_receive_environment summary);
    void enterpriseAdmin_createPreReceiveHookSignal(OAIPre_receive_hook summary);
    void enterpriseAdmin_createRegistrationTokenForEnterpriseSignal(OAIAuthentication_token summary);
    void enterpriseAdmin_createRemoveTokenForEnterpriseSignal(OAIAuthentication_token summary);
    void enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignal(OAIRunner_groups_enterprise summary);
    void enterpriseAdmin_createUserSignal(OAISimple_user summary);
    void enterpriseAdmin_deleteGlobalWebhookSignal();
    void enterpriseAdmin_deleteImpersonationOAuthTokenSignal();
    void enterpriseAdmin_deletePersonalAccessTokenSignal();
    void enterpriseAdmin_deletePreReceiveEnvironmentSignal();
    void enterpriseAdmin_deletePreReceiveHookSignal();
    void enterpriseAdmin_deletePublicKeySignal();
    void enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignal();
    void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignal();
    void enterpriseAdmin_deleteUserSignal();
    void enterpriseAdmin_demoteSiteAdministratorSignal();
    void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignal();
    void enterpriseAdmin_enableOrDisableMaintenanceModeSignal(OAIMaintenance_status summary);
    void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignal();
    void enterpriseAdmin_getAllAuthorizedSshKeysSignal(QList<OAISsh_key> summary);
    void enterpriseAdmin_getAllStatsSignal(OAIEnterprise_overview summary);
    void enterpriseAdmin_getAllowedActionsEnterpriseSignal(OAISelected_actions summary);
    void enterpriseAdmin_getAnnouncementSignal(OAIAnnouncement summary);
    void enterpriseAdmin_getAuditLogSignal(QList<OAIAudit_log_event> summary);
    void enterpriseAdmin_getCommentStatsSignal(OAIEnterprise_comment_overview summary);
    void enterpriseAdmin_getConfigurationStatusSignal(OAIConfiguration_status summary);
    void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignal(OAIPre_receive_environment_download_status summary);
    void enterpriseAdmin_getGistStatsSignal(OAIEnterprise_gist_overview summary);
    void enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignal(OAIActions_enterprise_permissions summary);
    void enterpriseAdmin_getGlobalWebhookSignal(OAIGlobal_hook summary);
    void enterpriseAdmin_getHooksStatsSignal(OAIEnterprise_hook_overview summary);
    void enterpriseAdmin_getIssueStatsSignal(OAIEnterprise_issue_overview summary);
    void enterpriseAdmin_getLicenseInformationSignal(OAILicense_info summary);
    void enterpriseAdmin_getMaintenanceStatusSignal(OAIMaintenance_status summary);
    void enterpriseAdmin_getMilestoneStatsSignal(OAIEnterprise_milestone_overview summary);
    void enterpriseAdmin_getOrgStatsSignal(OAIEnterprise_organization_overview summary);
    void enterpriseAdmin_getPagesStatsSignal(OAIEnterprise_page_overview summary);
    void enterpriseAdmin_getPreReceiveEnvironmentSignal(OAIPre_receive_environment summary);
    void enterpriseAdmin_getPreReceiveHookSignal(OAIPre_receive_hook summary);
    void enterpriseAdmin_getPreReceiveHookForOrgSignal(OAIOrg_pre_receive_hook summary);
    void enterpriseAdmin_getPreReceiveHookForRepoSignal(OAIRepository_pre_receive_hook summary);
    void enterpriseAdmin_getPullRequestStatsSignal(OAIEnterprise_pull_request_overview summary);
    void enterpriseAdmin_getRepoStatsSignal(OAIEnterprise_repository_overview summary);
    void enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignal(OAIRunner summary);
    void enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignal(OAIRunner_groups_enterprise summary);
    void enterpriseAdmin_getSettingsSignal(OAIEnterprise_settings summary);
    void enterpriseAdmin_getUserStatsSignal(OAIEnterprise_user_overview summary);
    void enterpriseAdmin_listGlobalWebhooksSignal(QList<OAIGlobal_hook> summary);
    void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal(OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary);
    void enterpriseAdmin_listPersonalAccessTokensSignal(QList<OAIAuthorization> summary);
    void enterpriseAdmin_listPreReceiveEnvironmentsSignal(QList<OAIPre_receive_environment> summary);
    void enterpriseAdmin_listPreReceiveHooksSignal(QList<OAIPre_receive_hook> summary);
    void enterpriseAdmin_listPreReceiveHooksForOrgSignal(QList<OAIOrg_pre_receive_hook> summary);
    void enterpriseAdmin_listPreReceiveHooksForRepoSignal(QList<OAIRepository_pre_receive_hook> summary);
    void enterpriseAdmin_listPublicKeysSignal(QList<OAIPublic_key_full> summary);
    void enterpriseAdmin_listRunnerApplicationsForEnterpriseSignal(QList<OAIRunner_application> summary);
    void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignal(OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary);
    void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignal(OAIEnterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_response summary);
    void enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignal(OAIEnterprise_admin_list_self_hosted_runners_for_enterprise_200_response summary);
    void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignal(OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary);
    void enterpriseAdmin_pingGlobalWebhookSignal();
    void enterpriseAdmin_promoteUserToBeSiteAdministratorSignal();
    void enterpriseAdmin_removeAnnouncementSignal();
    void enterpriseAdmin_removeAuthorizedSshKeySignal(QList<OAISsh_key> summary);
    void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal();
    void enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignal(OAIOrg_pre_receive_hook summary);
    void enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignal(OAIRepository_pre_receive_hook summary);
    void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignal();
    void enterpriseAdmin_setAllowedActionsEnterpriseSignal();
    void enterpriseAdmin_setAnnouncementSignal(OAIAnnouncement summary);
    void enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignal();
    void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal();
    void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignal();
    void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignal();
    void enterpriseAdmin_setSettingsSignal();
    void enterpriseAdmin_startConfigurationProcessSignal();
    void enterpriseAdmin_startPreReceiveEnvironmentDownloadSignal(OAIPre_receive_environment_download_status summary);
    void enterpriseAdmin_suspendUserSignal();
    void enterpriseAdmin_syncLdapMappingForTeamSignal(OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary);
    void enterpriseAdmin_syncLdapMappingForUserSignal(OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary);
    void enterpriseAdmin_unsuspendUserSignal();
    void enterpriseAdmin_updateGlobalWebhookSignal(OAIGlobal_hook_2 summary);
    void enterpriseAdmin_updateLdapMappingForTeamSignal(OAILdap_mapping_team summary);
    void enterpriseAdmin_updateLdapMappingForUserSignal(OAILdap_mapping_user summary);
    void enterpriseAdmin_updateOrgNameSignal(OAIEnterprise_admin_update_org_name_202_response summary);
    void enterpriseAdmin_updatePreReceiveEnvironmentSignal(OAIPre_receive_environment summary);
    void enterpriseAdmin_updatePreReceiveHookSignal(OAIPre_receive_hook summary);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignal(OAIOrg_pre_receive_hook summary);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignal(OAIRepository_pre_receive_hook summary);
    void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignal(OAIRunner_groups_enterprise summary);
    void enterpriseAdmin_updateUsernameForUserSignal(OAIEnterprise_admin_update_org_name_202_response summary);
    void enterpriseAdmin_upgradeLicenseSignal();


    void enterpriseAdmin_addAuthorizedSshKeySignalFull(OAIHttpRequestWorker *worker, QList<OAISsh_key> summary);
    void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createEnterpriseServerLicenseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_createGlobalWebhookSignalFull(OAIHttpRequestWorker *worker, OAIGlobal_hook summary);
    void enterpriseAdmin_createImpersonationOAuthTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void enterpriseAdmin_createOrgSignalFull(OAIHttpRequestWorker *worker, OAIOrganization_simple summary);
    void enterpriseAdmin_createPreReceiveEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_environment summary);
    void enterpriseAdmin_createPreReceiveHookSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_hook summary);
    void enterpriseAdmin_createRegistrationTokenForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIAuthentication_token summary);
    void enterpriseAdmin_createRemoveTokenForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIAuthentication_token summary);
    void enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIRunner_groups_enterprise summary);
    void enterpriseAdmin_createUserSignalFull(OAIHttpRequestWorker *worker, OAISimple_user summary);
    void enterpriseAdmin_deleteGlobalWebhookSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteImpersonationOAuthTokenSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePersonalAccessTokenSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePreReceiveEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePreReceiveHookSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deletePublicKeySignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_demoteSiteAdministratorSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_enableOrDisableMaintenanceModeSignalFull(OAIHttpRequestWorker *worker, OAIMaintenance_status summary);
    void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_getAllAuthorizedSshKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAISsh_key> summary);
    void enterpriseAdmin_getAllStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_overview summary);
    void enterpriseAdmin_getAllowedActionsEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAISelected_actions summary);
    void enterpriseAdmin_getAnnouncementSignalFull(OAIHttpRequestWorker *worker, OAIAnnouncement summary);
    void enterpriseAdmin_getAuditLogSignalFull(OAIHttpRequestWorker *worker, QList<OAIAudit_log_event> summary);
    void enterpriseAdmin_getCommentStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_comment_overview summary);
    void enterpriseAdmin_getConfigurationStatusSignalFull(OAIHttpRequestWorker *worker, OAIConfiguration_status summary);
    void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_environment_download_status summary);
    void enterpriseAdmin_getGistStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_gist_overview summary);
    void enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIActions_enterprise_permissions summary);
    void enterpriseAdmin_getGlobalWebhookSignalFull(OAIHttpRequestWorker *worker, OAIGlobal_hook summary);
    void enterpriseAdmin_getHooksStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_hook_overview summary);
    void enterpriseAdmin_getIssueStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_issue_overview summary);
    void enterpriseAdmin_getLicenseInformationSignalFull(OAIHttpRequestWorker *worker, OAILicense_info summary);
    void enterpriseAdmin_getMaintenanceStatusSignalFull(OAIHttpRequestWorker *worker, OAIMaintenance_status summary);
    void enterpriseAdmin_getMilestoneStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_milestone_overview summary);
    void enterpriseAdmin_getOrgStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_organization_overview summary);
    void enterpriseAdmin_getPagesStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_page_overview summary);
    void enterpriseAdmin_getPreReceiveEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_environment summary);
    void enterpriseAdmin_getPreReceiveHookSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_hook summary);
    void enterpriseAdmin_getPreReceiveHookForOrgSignalFull(OAIHttpRequestWorker *worker, OAIOrg_pre_receive_hook summary);
    void enterpriseAdmin_getPreReceiveHookForRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository_pre_receive_hook summary);
    void enterpriseAdmin_getPullRequestStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_pull_request_overview summary);
    void enterpriseAdmin_getRepoStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_repository_overview summary);
    void enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIRunner_groups_enterprise summary);
    void enterpriseAdmin_getSettingsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_settings summary);
    void enterpriseAdmin_getUserStatsSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_user_overview summary);
    void enterpriseAdmin_listGlobalWebhooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGlobal_hook> summary);
    void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary);
    void enterpriseAdmin_listPersonalAccessTokensSignalFull(OAIHttpRequestWorker *worker, QList<OAIAuthorization> summary);
    void enterpriseAdmin_listPreReceiveEnvironmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPre_receive_environment> summary);
    void enterpriseAdmin_listPreReceiveHooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIPre_receive_hook> summary);
    void enterpriseAdmin_listPreReceiveHooksForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrg_pre_receive_hook> summary);
    void enterpriseAdmin_listPreReceiveHooksForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository_pre_receive_hook> summary);
    void enterpriseAdmin_listPublicKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublic_key_full> summary);
    void enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalFull(OAIHttpRequestWorker *worker, QList<OAIRunner_application> summary);
    void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary);
    void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_response summary);
    void enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_list_self_hosted_runners_for_enterprise_200_response summary);
    void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary);
    void enterpriseAdmin_pingGlobalWebhookSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_promoteUserToBeSiteAdministratorSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removeAnnouncementSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removeAuthorizedSshKeySignalFull(OAIHttpRequestWorker *worker, QList<OAISsh_key> summary);
    void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalFull(OAIHttpRequestWorker *worker, OAIOrg_pre_receive_hook summary);
    void enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository_pre_receive_hook summary);
    void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setAllowedActionsEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setAnnouncementSignalFull(OAIHttpRequestWorker *worker, OAIAnnouncement summary);
    void enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_setSettingsSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_startConfigurationProcessSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_environment_download_status summary);
    void enterpriseAdmin_suspendUserSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_syncLdapMappingForTeamSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary);
    void enterpriseAdmin_syncLdapMappingForUserSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary);
    void enterpriseAdmin_unsuspendUserSignalFull(OAIHttpRequestWorker *worker);
    void enterpriseAdmin_updateGlobalWebhookSignalFull(OAIHttpRequestWorker *worker, OAIGlobal_hook_2 summary);
    void enterpriseAdmin_updateLdapMappingForTeamSignalFull(OAIHttpRequestWorker *worker, OAILdap_mapping_team summary);
    void enterpriseAdmin_updateLdapMappingForUserSignalFull(OAIHttpRequestWorker *worker, OAILdap_mapping_user summary);
    void enterpriseAdmin_updateOrgNameSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_update_org_name_202_response summary);
    void enterpriseAdmin_updatePreReceiveEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_environment summary);
    void enterpriseAdmin_updatePreReceiveHookSignalFull(OAIHttpRequestWorker *worker, OAIPre_receive_hook summary);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalFull(OAIHttpRequestWorker *worker, OAIOrg_pre_receive_hook summary);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalFull(OAIHttpRequestWorker *worker, OAIRepository_pre_receive_hook summary);
    void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalFull(OAIHttpRequestWorker *worker, OAIRunner_groups_enterprise summary);
    void enterpriseAdmin_updateUsernameForUserSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_update_org_name_202_response summary);
    void enterpriseAdmin_upgradeLicenseSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_addAuthorizedSshKeySignalError() instead")
    void enterpriseAdmin_addAuthorizedSshKeySignalE(QList<OAISsh_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_addAuthorizedSshKeySignalError(QList<OAISsh_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError() instead")
    void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalError() instead")
    void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createEnterpriseServerLicenseSignalError() instead")
    void enterpriseAdmin_createEnterpriseServerLicenseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createEnterpriseServerLicenseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createGlobalWebhookSignalError() instead")
    void enterpriseAdmin_createGlobalWebhookSignalE(OAIGlobal_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createGlobalWebhookSignalError(OAIGlobal_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createImpersonationOAuthTokenSignalError() instead")
    void enterpriseAdmin_createImpersonationOAuthTokenSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createImpersonationOAuthTokenSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createOrgSignalError() instead")
    void enterpriseAdmin_createOrgSignalE(OAIOrganization_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createOrgSignalError(OAIOrganization_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createPreReceiveEnvironmentSignalError() instead")
    void enterpriseAdmin_createPreReceiveEnvironmentSignalE(OAIPre_receive_environment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createPreReceiveEnvironmentSignalError(OAIPre_receive_environment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createPreReceiveHookSignalError() instead")
    void enterpriseAdmin_createPreReceiveHookSignalE(OAIPre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createPreReceiveHookSignalError(OAIPre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createRegistrationTokenForEnterpriseSignalError() instead")
    void enterpriseAdmin_createRegistrationTokenForEnterpriseSignalE(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createRegistrationTokenForEnterpriseSignalError(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createRemoveTokenForEnterpriseSignalError() instead")
    void enterpriseAdmin_createRemoveTokenForEnterpriseSignalE(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createRemoveTokenForEnterpriseSignalError(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalError() instead")
    void enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalE(OAIRunner_groups_enterprise summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalError(OAIRunner_groups_enterprise summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createUserSignalError() instead")
    void enterpriseAdmin_createUserSignalE(OAISimple_user summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createUserSignalError(OAISimple_user summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteGlobalWebhookSignalError() instead")
    void enterpriseAdmin_deleteGlobalWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteGlobalWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteImpersonationOAuthTokenSignalError() instead")
    void enterpriseAdmin_deleteImpersonationOAuthTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteImpersonationOAuthTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePersonalAccessTokenSignalError() instead")
    void enterpriseAdmin_deletePersonalAccessTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePersonalAccessTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePreReceiveEnvironmentSignalError() instead")
    void enterpriseAdmin_deletePreReceiveEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePreReceiveEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePreReceiveHookSignalError() instead")
    void enterpriseAdmin_deletePreReceiveHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePreReceiveHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePublicKeySignalError() instead")
    void enterpriseAdmin_deletePublicKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePublicKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalError() instead")
    void enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalError() instead")
    void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteUserSignalError() instead")
    void enterpriseAdmin_deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_demoteSiteAdministratorSignalError() instead")
    void enterpriseAdmin_demoteSiteAdministratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_demoteSiteAdministratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalError() instead")
    void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_enableOrDisableMaintenanceModeSignalError() instead")
    void enterpriseAdmin_enableOrDisableMaintenanceModeSignalE(OAIMaintenance_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_enableOrDisableMaintenanceModeSignalError(OAIMaintenance_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalError() instead")
    void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAllAuthorizedSshKeysSignalError() instead")
    void enterpriseAdmin_getAllAuthorizedSshKeysSignalE(QList<OAISsh_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAllAuthorizedSshKeysSignalError(QList<OAISsh_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAllStatsSignalError() instead")
    void enterpriseAdmin_getAllStatsSignalE(OAIEnterprise_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAllStatsSignalError(OAIEnterprise_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAllowedActionsEnterpriseSignalError() instead")
    void enterpriseAdmin_getAllowedActionsEnterpriseSignalE(OAISelected_actions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAllowedActionsEnterpriseSignalError(OAISelected_actions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAnnouncementSignalError() instead")
    void enterpriseAdmin_getAnnouncementSignalE(OAIAnnouncement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAnnouncementSignalError(OAIAnnouncement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAuditLogSignalError() instead")
    void enterpriseAdmin_getAuditLogSignalE(QList<OAIAudit_log_event> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAuditLogSignalError(QList<OAIAudit_log_event> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getCommentStatsSignalError() instead")
    void enterpriseAdmin_getCommentStatsSignalE(OAIEnterprise_comment_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getCommentStatsSignalError(OAIEnterprise_comment_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getConfigurationStatusSignalError() instead")
    void enterpriseAdmin_getConfigurationStatusSignalE(OAIConfiguration_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getConfigurationStatusSignalError(OAIConfiguration_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalError() instead")
    void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalE(OAIPre_receive_environment_download_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalError(OAIPre_receive_environment_download_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getGistStatsSignalError() instead")
    void enterpriseAdmin_getGistStatsSignalE(OAIEnterprise_gist_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getGistStatsSignalError(OAIEnterprise_gist_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalError() instead")
    void enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalE(OAIActions_enterprise_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalError(OAIActions_enterprise_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getGlobalWebhookSignalError() instead")
    void enterpriseAdmin_getGlobalWebhookSignalE(OAIGlobal_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getGlobalWebhookSignalError(OAIGlobal_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getHooksStatsSignalError() instead")
    void enterpriseAdmin_getHooksStatsSignalE(OAIEnterprise_hook_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getHooksStatsSignalError(OAIEnterprise_hook_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getIssueStatsSignalError() instead")
    void enterpriseAdmin_getIssueStatsSignalE(OAIEnterprise_issue_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getIssueStatsSignalError(OAIEnterprise_issue_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getLicenseInformationSignalError() instead")
    void enterpriseAdmin_getLicenseInformationSignalE(OAILicense_info summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getLicenseInformationSignalError(OAILicense_info summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getMaintenanceStatusSignalError() instead")
    void enterpriseAdmin_getMaintenanceStatusSignalE(OAIMaintenance_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getMaintenanceStatusSignalError(OAIMaintenance_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getMilestoneStatsSignalError() instead")
    void enterpriseAdmin_getMilestoneStatsSignalE(OAIEnterprise_milestone_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getMilestoneStatsSignalError(OAIEnterprise_milestone_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getOrgStatsSignalError() instead")
    void enterpriseAdmin_getOrgStatsSignalE(OAIEnterprise_organization_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getOrgStatsSignalError(OAIEnterprise_organization_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPagesStatsSignalError() instead")
    void enterpriseAdmin_getPagesStatsSignalE(OAIEnterprise_page_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPagesStatsSignalError(OAIEnterprise_page_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveEnvironmentSignalError() instead")
    void enterpriseAdmin_getPreReceiveEnvironmentSignalE(OAIPre_receive_environment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveEnvironmentSignalError(OAIPre_receive_environment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveHookSignalError() instead")
    void enterpriseAdmin_getPreReceiveHookSignalE(OAIPre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveHookSignalError(OAIPre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveHookForOrgSignalError() instead")
    void enterpriseAdmin_getPreReceiveHookForOrgSignalE(OAIOrg_pre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveHookForOrgSignalError(OAIOrg_pre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveHookForRepoSignalError() instead")
    void enterpriseAdmin_getPreReceiveHookForRepoSignalE(OAIRepository_pre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveHookForRepoSignalError(OAIRepository_pre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPullRequestStatsSignalError() instead")
    void enterpriseAdmin_getPullRequestStatsSignalE(OAIEnterprise_pull_request_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPullRequestStatsSignalError(OAIEnterprise_pull_request_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getRepoStatsSignalError() instead")
    void enterpriseAdmin_getRepoStatsSignalE(OAIEnterprise_repository_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getRepoStatsSignalError(OAIEnterprise_repository_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalError() instead")
    void enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalError() instead")
    void enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalE(OAIRunner_groups_enterprise summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalError(OAIRunner_groups_enterprise summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getSettingsSignalError() instead")
    void enterpriseAdmin_getSettingsSignalE(OAIEnterprise_settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getSettingsSignalError(OAIEnterprise_settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getUserStatsSignalError() instead")
    void enterpriseAdmin_getUserStatsSignalE(OAIEnterprise_user_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getUserStatsSignalError(OAIEnterprise_user_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listGlobalWebhooksSignalError() instead")
    void enterpriseAdmin_listGlobalWebhooksSignalE(QList<OAIGlobal_hook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listGlobalWebhooksSignalError(QList<OAIGlobal_hook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError() instead")
    void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPersonalAccessTokensSignalError() instead")
    void enterpriseAdmin_listPersonalAccessTokensSignalE(QList<OAIAuthorization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPersonalAccessTokensSignalError(QList<OAIAuthorization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveEnvironmentsSignalError() instead")
    void enterpriseAdmin_listPreReceiveEnvironmentsSignalE(QList<OAIPre_receive_environment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveEnvironmentsSignalError(QList<OAIPre_receive_environment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveHooksSignalError() instead")
    void enterpriseAdmin_listPreReceiveHooksSignalE(QList<OAIPre_receive_hook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveHooksSignalError(QList<OAIPre_receive_hook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveHooksForOrgSignalError() instead")
    void enterpriseAdmin_listPreReceiveHooksForOrgSignalE(QList<OAIOrg_pre_receive_hook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveHooksForOrgSignalError(QList<OAIOrg_pre_receive_hook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveHooksForRepoSignalError() instead")
    void enterpriseAdmin_listPreReceiveHooksForRepoSignalE(QList<OAIRepository_pre_receive_hook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveHooksForRepoSignalError(QList<OAIRepository_pre_receive_hook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPublicKeysSignalError() instead")
    void enterpriseAdmin_listPublicKeysSignalE(QList<OAIPublic_key_full> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPublicKeysSignalError(QList<OAIPublic_key_full> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalError() instead")
    void enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalE(QList<OAIRunner_application> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalError(QList<OAIRunner_application> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalError() instead")
    void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalE(OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalError(OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalError() instead")
    void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalE(OAIEnterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalError(OAIEnterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalError() instead")
    void enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalE(OAIEnterprise_admin_list_self_hosted_runners_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalError(OAIEnterprise_admin_list_self_hosted_runners_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalError() instead")
    void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalE(OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalError(OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_pingGlobalWebhookSignalError() instead")
    void enterpriseAdmin_pingGlobalWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_pingGlobalWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_promoteUserToBeSiteAdministratorSignalError() instead")
    void enterpriseAdmin_promoteUserToBeSiteAdministratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_promoteUserToBeSiteAdministratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeAnnouncementSignalError() instead")
    void enterpriseAdmin_removeAnnouncementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeAnnouncementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeAuthorizedSshKeySignalError() instead")
    void enterpriseAdmin_removeAuthorizedSshKeySignalE(QList<OAISsh_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeAuthorizedSshKeySignalError(QList<OAISsh_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError() instead")
    void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalError() instead")
    void enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalE(OAIOrg_pre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalError(OAIOrg_pre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalError() instead")
    void enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalE(OAIRepository_pre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalError(OAIRepository_pre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalError() instead")
    void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setAllowedActionsEnterpriseSignalError() instead")
    void enterpriseAdmin_setAllowedActionsEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setAllowedActionsEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setAnnouncementSignalError() instead")
    void enterpriseAdmin_setAnnouncementSignalE(OAIAnnouncement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setAnnouncementSignalError(OAIAnnouncement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalError() instead")
    void enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError() instead")
    void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalError() instead")
    void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalError() instead")
    void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setSettingsSignalError() instead")
    void enterpriseAdmin_setSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_startConfigurationProcessSignalError() instead")
    void enterpriseAdmin_startConfigurationProcessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_startConfigurationProcessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalError() instead")
    void enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalE(OAIPre_receive_environment_download_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalError(OAIPre_receive_environment_download_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_suspendUserSignalError() instead")
    void enterpriseAdmin_suspendUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_suspendUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_syncLdapMappingForTeamSignalError() instead")
    void enterpriseAdmin_syncLdapMappingForTeamSignalE(OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_syncLdapMappingForTeamSignalError(OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_syncLdapMappingForUserSignalError() instead")
    void enterpriseAdmin_syncLdapMappingForUserSignalE(OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_syncLdapMappingForUserSignalError(OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_unsuspendUserSignalError() instead")
    void enterpriseAdmin_unsuspendUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_unsuspendUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateGlobalWebhookSignalError() instead")
    void enterpriseAdmin_updateGlobalWebhookSignalE(OAIGlobal_hook_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateGlobalWebhookSignalError(OAIGlobal_hook_2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateLdapMappingForTeamSignalError() instead")
    void enterpriseAdmin_updateLdapMappingForTeamSignalE(OAILdap_mapping_team summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateLdapMappingForTeamSignalError(OAILdap_mapping_team summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateLdapMappingForUserSignalError() instead")
    void enterpriseAdmin_updateLdapMappingForUserSignalE(OAILdap_mapping_user summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateLdapMappingForUserSignalError(OAILdap_mapping_user summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateOrgNameSignalError() instead")
    void enterpriseAdmin_updateOrgNameSignalE(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateOrgNameSignalError(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveEnvironmentSignalError() instead")
    void enterpriseAdmin_updatePreReceiveEnvironmentSignalE(OAIPre_receive_environment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveEnvironmentSignalError(OAIPre_receive_environment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveHookSignalError() instead")
    void enterpriseAdmin_updatePreReceiveHookSignalE(OAIPre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveHookSignalError(OAIPre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalError() instead")
    void enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalE(OAIOrg_pre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalError(OAIOrg_pre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalError() instead")
    void enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalE(OAIRepository_pre_receive_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalError(OAIRepository_pre_receive_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalError() instead")
    void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalE(OAIRunner_groups_enterprise summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalError(OAIRunner_groups_enterprise summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateUsernameForUserSignalError() instead")
    void enterpriseAdmin_updateUsernameForUserSignalE(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateUsernameForUserSignalError(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_upgradeLicenseSignalError() instead")
    void enterpriseAdmin_upgradeLicenseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_upgradeLicenseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_addAuthorizedSshKeySignalErrorFull() instead")
    void enterpriseAdmin_addAuthorizedSshKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_addAuthorizedSshKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createEnterpriseServerLicenseSignalErrorFull() instead")
    void enterpriseAdmin_createEnterpriseServerLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createEnterpriseServerLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createGlobalWebhookSignalErrorFull() instead")
    void enterpriseAdmin_createGlobalWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createGlobalWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createImpersonationOAuthTokenSignalErrorFull() instead")
    void enterpriseAdmin_createImpersonationOAuthTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createImpersonationOAuthTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createOrgSignalErrorFull() instead")
    void enterpriseAdmin_createOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createPreReceiveEnvironmentSignalErrorFull() instead")
    void enterpriseAdmin_createPreReceiveEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createPreReceiveEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createPreReceiveHookSignalErrorFull() instead")
    void enterpriseAdmin_createPreReceiveHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createPreReceiveHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createRegistrationTokenForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_createRegistrationTokenForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createRegistrationTokenForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createRemoveTokenForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_createRemoveTokenForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createRemoveTokenForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_createUserSignalErrorFull() instead")
    void enterpriseAdmin_createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteGlobalWebhookSignalErrorFull() instead")
    void enterpriseAdmin_deleteGlobalWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteGlobalWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteImpersonationOAuthTokenSignalErrorFull() instead")
    void enterpriseAdmin_deleteImpersonationOAuthTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteImpersonationOAuthTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePersonalAccessTokenSignalErrorFull() instead")
    void enterpriseAdmin_deletePersonalAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePersonalAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePreReceiveEnvironmentSignalErrorFull() instead")
    void enterpriseAdmin_deletePreReceiveEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePreReceiveEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePreReceiveHookSignalErrorFull() instead")
    void enterpriseAdmin_deletePreReceiveHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePreReceiveHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deletePublicKeySignalErrorFull() instead")
    void enterpriseAdmin_deletePublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deletePublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_deleteUserSignalErrorFull() instead")
    void enterpriseAdmin_deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_demoteSiteAdministratorSignalErrorFull() instead")
    void enterpriseAdmin_demoteSiteAdministratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_demoteSiteAdministratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_enableOrDisableMaintenanceModeSignalErrorFull() instead")
    void enterpriseAdmin_enableOrDisableMaintenanceModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_enableOrDisableMaintenanceModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAllAuthorizedSshKeysSignalErrorFull() instead")
    void enterpriseAdmin_getAllAuthorizedSshKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAllAuthorizedSshKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAllStatsSignalErrorFull() instead")
    void enterpriseAdmin_getAllStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAllStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAllowedActionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_getAllowedActionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAllowedActionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAnnouncementSignalErrorFull() instead")
    void enterpriseAdmin_getAnnouncementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAnnouncementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getAuditLogSignalErrorFull() instead")
    void enterpriseAdmin_getAuditLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getAuditLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getCommentStatsSignalErrorFull() instead")
    void enterpriseAdmin_getCommentStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getCommentStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getConfigurationStatusSignalErrorFull() instead")
    void enterpriseAdmin_getConfigurationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getConfigurationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalErrorFull() instead")
    void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getGistStatsSignalErrorFull() instead")
    void enterpriseAdmin_getGistStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getGistStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getGlobalWebhookSignalErrorFull() instead")
    void enterpriseAdmin_getGlobalWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getGlobalWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getHooksStatsSignalErrorFull() instead")
    void enterpriseAdmin_getHooksStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getHooksStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getIssueStatsSignalErrorFull() instead")
    void enterpriseAdmin_getIssueStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getIssueStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getLicenseInformationSignalErrorFull() instead")
    void enterpriseAdmin_getLicenseInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getLicenseInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getMaintenanceStatusSignalErrorFull() instead")
    void enterpriseAdmin_getMaintenanceStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getMaintenanceStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getMilestoneStatsSignalErrorFull() instead")
    void enterpriseAdmin_getMilestoneStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getMilestoneStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getOrgStatsSignalErrorFull() instead")
    void enterpriseAdmin_getOrgStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getOrgStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPagesStatsSignalErrorFull() instead")
    void enterpriseAdmin_getPagesStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPagesStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveEnvironmentSignalErrorFull() instead")
    void enterpriseAdmin_getPreReceiveEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveHookSignalErrorFull() instead")
    void enterpriseAdmin_getPreReceiveHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveHookForOrgSignalErrorFull() instead")
    void enterpriseAdmin_getPreReceiveHookForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveHookForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPreReceiveHookForRepoSignalErrorFull() instead")
    void enterpriseAdmin_getPreReceiveHookForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPreReceiveHookForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getPullRequestStatsSignalErrorFull() instead")
    void enterpriseAdmin_getPullRequestStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getPullRequestStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getRepoStatsSignalErrorFull() instead")
    void enterpriseAdmin_getRepoStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getRepoStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getSettingsSignalErrorFull() instead")
    void enterpriseAdmin_getSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_getUserStatsSignalErrorFull() instead")
    void enterpriseAdmin_getUserStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_getUserStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listGlobalWebhooksSignalErrorFull() instead")
    void enterpriseAdmin_listGlobalWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listGlobalWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPersonalAccessTokensSignalErrorFull() instead")
    void enterpriseAdmin_listPersonalAccessTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPersonalAccessTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveEnvironmentsSignalErrorFull() instead")
    void enterpriseAdmin_listPreReceiveEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveHooksSignalErrorFull() instead")
    void enterpriseAdmin_listPreReceiveHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveHooksForOrgSignalErrorFull() instead")
    void enterpriseAdmin_listPreReceiveHooksForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveHooksForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPreReceiveHooksForRepoSignalErrorFull() instead")
    void enterpriseAdmin_listPreReceiveHooksForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPreReceiveHooksForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listPublicKeysSignalErrorFull() instead")
    void enterpriseAdmin_listPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_pingGlobalWebhookSignalErrorFull() instead")
    void enterpriseAdmin_pingGlobalWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_pingGlobalWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_promoteUserToBeSiteAdministratorSignalErrorFull() instead")
    void enterpriseAdmin_promoteUserToBeSiteAdministratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_promoteUserToBeSiteAdministratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeAnnouncementSignalErrorFull() instead")
    void enterpriseAdmin_removeAnnouncementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeAnnouncementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeAuthorizedSshKeySignalErrorFull() instead")
    void enterpriseAdmin_removeAuthorizedSshKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeAuthorizedSshKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalErrorFull() instead")
    void enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalErrorFull() instead")
    void enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setAllowedActionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_setAllowedActionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setAllowedActionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setAnnouncementSignalErrorFull() instead")
    void enterpriseAdmin_setAnnouncementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setAnnouncementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_setSettingsSignalErrorFull() instead")
    void enterpriseAdmin_setSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_setSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_startConfigurationProcessSignalErrorFull() instead")
    void enterpriseAdmin_startConfigurationProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_startConfigurationProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalErrorFull() instead")
    void enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_suspendUserSignalErrorFull() instead")
    void enterpriseAdmin_suspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_suspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_syncLdapMappingForTeamSignalErrorFull() instead")
    void enterpriseAdmin_syncLdapMappingForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_syncLdapMappingForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_syncLdapMappingForUserSignalErrorFull() instead")
    void enterpriseAdmin_syncLdapMappingForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_syncLdapMappingForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_unsuspendUserSignalErrorFull() instead")
    void enterpriseAdmin_unsuspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_unsuspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateGlobalWebhookSignalErrorFull() instead")
    void enterpriseAdmin_updateGlobalWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateGlobalWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateLdapMappingForTeamSignalErrorFull() instead")
    void enterpriseAdmin_updateLdapMappingForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateLdapMappingForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateLdapMappingForUserSignalErrorFull() instead")
    void enterpriseAdmin_updateLdapMappingForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateLdapMappingForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateOrgNameSignalErrorFull() instead")
    void enterpriseAdmin_updateOrgNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateOrgNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveEnvironmentSignalErrorFull() instead")
    void enterpriseAdmin_updatePreReceiveEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveHookSignalErrorFull() instead")
    void enterpriseAdmin_updatePreReceiveHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalErrorFull() instead")
    void enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalErrorFull() instead")
    void enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalErrorFull() instead")
    void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_updateUsernameForUserSignalErrorFull() instead")
    void enterpriseAdmin_updateUsernameForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_updateUsernameForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enterpriseAdmin_upgradeLicenseSignalErrorFull() instead")
    void enterpriseAdmin_upgradeLicenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enterpriseAdmin_upgradeLicenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
