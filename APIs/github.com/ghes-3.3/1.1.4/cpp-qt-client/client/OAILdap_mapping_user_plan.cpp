/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILdap_mapping_user_plan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILdap_mapping_user_plan::OAILdap_mapping_user_plan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILdap_mapping_user_plan::OAILdap_mapping_user_plan() {
    this->initializeModel();
}

OAILdap_mapping_user_plan::~OAILdap_mapping_user_plan() {}

void OAILdap_mapping_user_plan::initializeModel() {

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_private_repos_isSet = false;
    m_private_repos_isValid = false;

    m_space_isSet = false;
    m_space_isValid = false;
}

void OAILdap_mapping_user_plan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILdap_mapping_user_plan::fromJsonObject(QJsonObject json) {

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_private_repos_isValid = ::OpenAPI::fromJsonValue(m_private_repos, json[QString("private_repos")]);
    m_private_repos_isSet = !json[QString("private_repos")].isNull() && m_private_repos_isValid;

    m_space_isValid = ::OpenAPI::fromJsonValue(m_space, json[QString("space")]);
    m_space_isSet = !json[QString("space")].isNull() && m_space_isValid;
}

QString OAILdap_mapping_user_plan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILdap_mapping_user_plan::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborators_isSet) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_private_repos_isSet) {
        obj.insert(QString("private_repos"), ::OpenAPI::toJsonValue(m_private_repos));
    }
    if (m_space_isSet) {
        obj.insert(QString("space"), ::OpenAPI::toJsonValue(m_space));
    }
    return obj;
}

qint32 OAILdap_mapping_user_plan::getCollaborators() const {
    return m_collaborators;
}
void OAILdap_mapping_user_plan::setCollaborators(const qint32 &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAILdap_mapping_user_plan::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAILdap_mapping_user_plan::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QString OAILdap_mapping_user_plan::getName() const {
    return m_name;
}
void OAILdap_mapping_user_plan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILdap_mapping_user_plan::is_name_Set() const{
    return m_name_isSet;
}

bool OAILdap_mapping_user_plan::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAILdap_mapping_user_plan::getPrivateRepos() const {
    return m_private_repos;
}
void OAILdap_mapping_user_plan::setPrivateRepos(const qint32 &private_repos) {
    m_private_repos = private_repos;
    m_private_repos_isSet = true;
}

bool OAILdap_mapping_user_plan::is_private_repos_Set() const{
    return m_private_repos_isSet;
}

bool OAILdap_mapping_user_plan::is_private_repos_Valid() const{
    return m_private_repos_isValid;
}

qint32 OAILdap_mapping_user_plan::getSpace() const {
    return m_space;
}
void OAILdap_mapping_user_plan::setSpace(const qint32 &space) {
    m_space = space;
    m_space_isSet = true;
}

bool OAILdap_mapping_user_plan::is_space_Set() const{
    return m_space_isSet;
}

bool OAILdap_mapping_user_plan::is_space_Valid() const{
    return m_space_isValid;
}

bool OAILdap_mapping_user_plan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborators_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILdap_mapping_user_plan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaborators_isValid && m_name_isValid && m_private_repos_isValid && m_space_isValid && true;
}

} // namespace OpenAPI
