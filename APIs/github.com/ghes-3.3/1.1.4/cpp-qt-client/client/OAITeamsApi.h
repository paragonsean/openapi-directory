/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsApi_H
#define OAI_OAITeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAIMinimal_repository.h"
#include "OAIOrgs_remove_outside_collaborator_422_response.h"
#include "OAISimple_user.h"
#include "OAITeam.h"
#include "OAITeam_discussion.h"
#include "OAITeam_discussion_comment.h"
#include "OAITeam_full.h"
#include "OAITeam_membership.h"
#include "OAITeam_project.h"
#include "OAITeam_repository.h"
#include "OAITeams_add_or_update_membership_for_user_in_org_request.h"
#include "OAITeams_add_or_update_project_permissions_in_org_request.h"
#include "OAITeams_add_or_update_project_permissions_legacy_request.h"
#include "OAITeams_add_or_update_repo_permissions_in_org_request.h"
#include "OAITeams_add_or_update_repo_permissions_legacy_request.h"
#include "OAITeams_create_discussion_comment_in_org_request.h"
#include "OAITeams_create_discussion_in_org_request.h"
#include "OAITeams_create_request.h"
#include "OAITeams_update_discussion_in_org_request.h"
#include "OAITeams_update_in_org_request.h"
#include "OAITeams_update_legacy_request.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsApi(const int timeOut = 0);
    ~OAITeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_addMemberLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_teams_add_or_update_membership_for_user_in_org_request OAITeams_add_or_update_membership_for_user_in_org_request [optional]
    */
    virtual void teams_addOrUpdateMembershipForUserInOrg(const QString &org, const QString &team_slug, const QString &username, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_membership_for_user_in_org_request> &oai_teams_add_or_update_membership_for_user_in_org_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_membership_for_user_in_org_request>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_teams_add_or_update_membership_for_user_in_org_request OAITeams_add_or_update_membership_for_user_in_org_request [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_addOrUpdateMembershipForUserLegacy(const qint32 &team_id, const QString &username, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_membership_for_user_in_org_request> &oai_teams_add_or_update_membership_for_user_in_org_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_membership_for_user_in_org_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  project_id qint32 [required]
    * @param[in]  oai_teams_add_or_update_project_permissions_in_org_request OAITeams_add_or_update_project_permissions_in_org_request [optional]
    */
    virtual void teams_addOrUpdateProjectPermissionsInOrg(const QString &org, const QString &team_slug, const qint32 &project_id, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_project_permissions_in_org_request> &oai_teams_add_or_update_project_permissions_in_org_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_project_permissions_in_org_request>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  project_id qint32 [required]
    * @param[in]  oai_teams_add_or_update_project_permissions_legacy_request OAITeams_add_or_update_project_permissions_legacy_request [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_addOrUpdateProjectPermissionsLegacy(const qint32 &team_id, const qint32 &project_id, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_project_permissions_legacy_request> &oai_teams_add_or_update_project_permissions_legacy_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_project_permissions_legacy_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_teams_add_or_update_repo_permissions_in_org_request OAITeams_add_or_update_repo_permissions_in_org_request [optional]
    */
    virtual void teams_addOrUpdateRepoPermissionsInOrg(const QString &org, const QString &team_slug, const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_repo_permissions_in_org_request> &oai_teams_add_or_update_repo_permissions_in_org_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_repo_permissions_in_org_request>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_teams_add_or_update_repo_permissions_legacy_request OAITeams_add_or_update_repo_permissions_legacy_request [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_addOrUpdateRepoPermissionsLegacy(const qint32 &team_id, const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_repo_permissions_legacy_request> &oai_teams_add_or_update_repo_permissions_legacy_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_repo_permissions_legacy_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  project_id qint32 [required]
    */
    virtual void teams_checkPermissionsForProjectInOrg(const QString &org, const QString &team_slug, const qint32 &project_id);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  project_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_checkPermissionsForProjectLegacy(const qint32 &team_id, const qint32 &project_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void teams_checkPermissionsForRepoInOrg(const QString &org, const QString &team_slug, const QString &owner, const QString &repo);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_checkPermissionsForRepoLegacy(const qint32 &team_id, const QString &owner, const QString &repo);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_teams_create_request OAITeams_create_request [required]
    */
    virtual void teams_create(const QString &org, const OAITeams_create_request &oai_teams_create_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_teams_create_discussion_comment_in_org_request OAITeams_create_discussion_comment_in_org_request [required]
    */
    virtual void teams_createDiscussionCommentInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const OAITeams_create_discussion_comment_in_org_request &oai_teams_create_discussion_comment_in_org_request);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_teams_create_discussion_comment_in_org_request OAITeams_create_discussion_comment_in_org_request [required]
    */
    Q_DECL_DEPRECATED virtual void teams_createDiscussionCommentLegacy(const qint32 &team_id, const qint32 &discussion_number, const OAITeams_create_discussion_comment_in_org_request &oai_teams_create_discussion_comment_in_org_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  oai_teams_create_discussion_in_org_request OAITeams_create_discussion_in_org_request [required]
    */
    virtual void teams_createDiscussionInOrg(const QString &org, const QString &team_slug, const OAITeams_create_discussion_in_org_request &oai_teams_create_discussion_in_org_request);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  oai_teams_create_discussion_in_org_request OAITeams_create_discussion_in_org_request [required]
    */
    Q_DECL_DEPRECATED virtual void teams_createDiscussionLegacy(const qint32 &team_id, const OAITeams_create_discussion_in_org_request &oai_teams_create_discussion_in_org_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    */
    virtual void teams_deleteDiscussionCommentInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const qint32 &comment_number);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_deleteDiscussionCommentLegacy(const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    */
    virtual void teams_deleteDiscussionInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_deleteDiscussionLegacy(const qint32 &team_id, const qint32 &discussion_number);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    */
    virtual void teams_deleteInOrg(const QString &org, const QString &team_slug);

    /**
    * @param[in]  team_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_deleteLegacy(const qint32 &team_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    */
    virtual void teams_getByName(const QString &org, const QString &team_slug);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    */
    virtual void teams_getDiscussionCommentInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const qint32 &comment_number);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_getDiscussionCommentLegacy(const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    */
    virtual void teams_getDiscussionInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_getDiscussionLegacy(const qint32 &team_id, const qint32 &discussion_number);

    /**
    * @param[in]  team_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_getLegacy(const qint32 &team_id);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_getMemberLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  username QString [required]
    */
    virtual void teams_getMembershipForUserInOrg(const QString &org, const QString &team_slug, const QString &username);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_getMembershipForUserLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_list(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listChildInOrg(const QString &org, const QString &team_slug, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_listChildLegacy(const qint32 &team_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listDiscussionCommentsInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_listDiscussionCommentsLegacy(const qint32 &team_id, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pinned QString [optional]
    */
    virtual void teams_listDiscussionsInOrg(const QString &org, const QString &team_slug, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &pinned = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_listDiscussionsLegacy(const qint32 &team_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  role QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listMembersInOrg(const QString &org, const QString &team_slug, const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  role QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_listMembersLegacy(const qint32 &team_id, const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listProjectsInOrg(const QString &org, const QString &team_slug, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_listProjectsLegacy(const qint32 &team_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listReposInOrg(const QString &org, const QString &team_slug, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_listReposLegacy(const qint32 &team_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_removeMemberLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  username QString [required]
    */
    virtual void teams_removeMembershipForUserInOrg(const QString &org, const QString &team_slug, const QString &username);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_removeMembershipForUserLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  project_id qint32 [required]
    */
    virtual void teams_removeProjectInOrg(const QString &org, const QString &team_slug, const qint32 &project_id);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  project_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void teams_removeProjectLegacy(const qint32 &team_id, const qint32 &project_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void teams_removeRepoInOrg(const QString &org, const QString &team_slug, const QString &owner, const QString &repo);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_removeRepoLegacy(const qint32 &team_id, const QString &owner, const QString &repo);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  oai_teams_create_discussion_comment_in_org_request OAITeams_create_discussion_comment_in_org_request [required]
    */
    virtual void teams_updateDiscussionCommentInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const qint32 &comment_number, const OAITeams_create_discussion_comment_in_org_request &oai_teams_create_discussion_comment_in_org_request);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  oai_teams_create_discussion_comment_in_org_request OAITeams_create_discussion_comment_in_org_request [required]
    */
    Q_DECL_DEPRECATED virtual void teams_updateDiscussionCommentLegacy(const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number, const OAITeams_create_discussion_comment_in_org_request &oai_teams_create_discussion_comment_in_org_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_teams_update_discussion_in_org_request OAITeams_update_discussion_in_org_request [optional]
    */
    virtual void teams_updateDiscussionInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<OAITeams_update_discussion_in_org_request> &oai_teams_update_discussion_in_org_request = ::OpenAPI::OptionalParam<OAITeams_update_discussion_in_org_request>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_teams_update_discussion_in_org_request OAITeams_update_discussion_in_org_request [optional]
    */
    Q_DECL_DEPRECATED virtual void teams_updateDiscussionLegacy(const qint32 &team_id, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<OAITeams_update_discussion_in_org_request> &oai_teams_update_discussion_in_org_request = ::OpenAPI::OptionalParam<OAITeams_update_discussion_in_org_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  oai_teams_update_in_org_request OAITeams_update_in_org_request [optional]
    */
    virtual void teams_updateInOrg(const QString &org, const QString &team_slug, const ::OpenAPI::OptionalParam<OAITeams_update_in_org_request> &oai_teams_update_in_org_request = ::OpenAPI::OptionalParam<OAITeams_update_in_org_request>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  oai_teams_update_legacy_request OAITeams_update_legacy_request [required]
    */
    Q_DECL_DEPRECATED virtual void teams_updateLegacy(const qint32 &team_id, const OAITeams_update_legacy_request &oai_teams_update_legacy_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teams_addMemberLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateMembershipForUserInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateMembershipForUserLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateProjectPermissionsInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateProjectPermissionsLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateRepoPermissionsInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateRepoPermissionsLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForProjectInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForProjectLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForRepoInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForRepoLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_createCallback(OAIHttpRequestWorker *worker);
    void teams_createDiscussionCommentInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_createDiscussionCommentLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_createDiscussionInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_createDiscussionLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionCommentInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionCommentLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_deleteInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_deleteLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_getByNameCallback(OAIHttpRequestWorker *worker);
    void teams_getDiscussionCommentInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_getDiscussionCommentLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_getDiscussionInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_getDiscussionLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_getLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_getMemberLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_getMembershipForUserInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_getMembershipForUserLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_listCallback(OAIHttpRequestWorker *worker);
    void teams_listChildInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_listChildLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_listDiscussionCommentsInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_listDiscussionCommentsLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_listDiscussionsInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_listDiscussionsLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_listForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void teams_listMembersInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_listMembersLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_listProjectsInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_listProjectsLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_listReposInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_listReposLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_removeMemberLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_removeMembershipForUserInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_removeMembershipForUserLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_removeProjectInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_removeProjectLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_removeRepoInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_removeRepoLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_updateDiscussionCommentInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_updateDiscussionCommentLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_updateDiscussionInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_updateDiscussionLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_updateInOrgCallback(OAIHttpRequestWorker *worker);
    void teams_updateLegacyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void teams_addMemberLegacySignal();
    void teams_addOrUpdateMembershipForUserInOrgSignal(OAITeam_membership summary);
    void teams_addOrUpdateMembershipForUserLegacySignal(OAITeam_membership summary);
    void teams_addOrUpdateProjectPermissionsInOrgSignal();
    void teams_addOrUpdateProjectPermissionsLegacySignal();
    void teams_addOrUpdateRepoPermissionsInOrgSignal();
    void teams_addOrUpdateRepoPermissionsLegacySignal();
    void teams_checkPermissionsForProjectInOrgSignal(OAITeam_project summary);
    void teams_checkPermissionsForProjectLegacySignal(OAITeam_project summary);
    void teams_checkPermissionsForRepoInOrgSignal(OAITeam_repository summary);
    void teams_checkPermissionsForRepoLegacySignal(OAITeam_repository summary);
    void teams_createSignal(OAITeam_full summary);
    void teams_createDiscussionCommentInOrgSignal(OAITeam_discussion_comment summary);
    void teams_createDiscussionCommentLegacySignal(OAITeam_discussion_comment summary);
    void teams_createDiscussionInOrgSignal(OAITeam_discussion summary);
    void teams_createDiscussionLegacySignal(OAITeam_discussion summary);
    void teams_deleteDiscussionCommentInOrgSignal();
    void teams_deleteDiscussionCommentLegacySignal();
    void teams_deleteDiscussionInOrgSignal();
    void teams_deleteDiscussionLegacySignal();
    void teams_deleteInOrgSignal();
    void teams_deleteLegacySignal();
    void teams_getByNameSignal(OAITeam_full summary);
    void teams_getDiscussionCommentInOrgSignal(OAITeam_discussion_comment summary);
    void teams_getDiscussionCommentLegacySignal(OAITeam_discussion_comment summary);
    void teams_getDiscussionInOrgSignal(OAITeam_discussion summary);
    void teams_getDiscussionLegacySignal(OAITeam_discussion summary);
    void teams_getLegacySignal(OAITeam_full summary);
    void teams_getMemberLegacySignal();
    void teams_getMembershipForUserInOrgSignal(OAITeam_membership summary);
    void teams_getMembershipForUserLegacySignal(OAITeam_membership summary);
    void teams_listSignal(QList<OAITeam> summary);
    void teams_listChildInOrgSignal(QList<OAITeam> summary);
    void teams_listChildLegacySignal(QList<OAITeam> summary);
    void teams_listDiscussionCommentsInOrgSignal(QList<OAITeam_discussion_comment> summary);
    void teams_listDiscussionCommentsLegacySignal(QList<OAITeam_discussion_comment> summary);
    void teams_listDiscussionsInOrgSignal(QList<OAITeam_discussion> summary);
    void teams_listDiscussionsLegacySignal(QList<OAITeam_discussion> summary);
    void teams_listForAuthenticatedUserSignal(QList<OAITeam_full> summary);
    void teams_listMembersInOrgSignal(QList<OAISimple_user> summary);
    void teams_listMembersLegacySignal(QList<OAISimple_user> summary);
    void teams_listProjectsInOrgSignal(QList<OAITeam_project> summary);
    void teams_listProjectsLegacySignal(QList<OAITeam_project> summary);
    void teams_listReposInOrgSignal(QList<OAIMinimal_repository> summary);
    void teams_listReposLegacySignal(QList<OAIMinimal_repository> summary);
    void teams_removeMemberLegacySignal();
    void teams_removeMembershipForUserInOrgSignal();
    void teams_removeMembershipForUserLegacySignal();
    void teams_removeProjectInOrgSignal();
    void teams_removeProjectLegacySignal();
    void teams_removeRepoInOrgSignal();
    void teams_removeRepoLegacySignal();
    void teams_updateDiscussionCommentInOrgSignal(OAITeam_discussion_comment summary);
    void teams_updateDiscussionCommentLegacySignal(OAITeam_discussion_comment summary);
    void teams_updateDiscussionInOrgSignal(OAITeam_discussion summary);
    void teams_updateDiscussionLegacySignal(OAITeam_discussion summary);
    void teams_updateInOrgSignal(OAITeam_full summary);
    void teams_updateLegacySignal(OAITeam_full summary);


    void teams_addMemberLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateMembershipForUserInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_membership summary);
    void teams_addOrUpdateMembershipForUserLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_membership summary);
    void teams_addOrUpdateProjectPermissionsInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateProjectPermissionsLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateRepoPermissionsInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateRepoPermissionsLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForProjectInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_project summary);
    void teams_checkPermissionsForProjectLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_project summary);
    void teams_checkPermissionsForRepoInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_repository summary);
    void teams_checkPermissionsForRepoLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_repository summary);
    void teams_createSignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_createDiscussionCommentInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_createDiscussionCommentLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_createDiscussionInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_createDiscussionLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_deleteDiscussionCommentInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionCommentLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_deleteInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_deleteLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_getByNameSignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_getDiscussionCommentInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_getDiscussionCommentLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_getDiscussionInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_getDiscussionLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_getLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_getMemberLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_getMembershipForUserInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_membership summary);
    void teams_getMembershipForUserLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_membership summary);
    void teams_listSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teams_listChildInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teams_listChildLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teams_listDiscussionCommentsInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_discussion_comment> summary);
    void teams_listDiscussionCommentsLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_discussion_comment> summary);
    void teams_listDiscussionsInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_discussion> summary);
    void teams_listDiscussionsLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_discussion> summary);
    void teams_listForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_full> summary);
    void teams_listMembersInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void teams_listMembersLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void teams_listProjectsInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_project> summary);
    void teams_listProjectsLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_project> summary);
    void teams_listReposInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void teams_listReposLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void teams_removeMemberLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_removeMembershipForUserInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_removeMembershipForUserLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_removeProjectInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_removeProjectLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_removeRepoInOrgSignalFull(OAIHttpRequestWorker *worker);
    void teams_removeRepoLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_updateDiscussionCommentInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_updateDiscussionCommentLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_updateDiscussionInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_updateDiscussionLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_updateInOrgSignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_updateLegacySignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);

    Q_DECL_DEPRECATED_X("Use teams_addMemberLegacySignalError() instead")
    void teams_addMemberLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addMemberLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateMembershipForUserInOrgSignalError() instead")
    void teams_addOrUpdateMembershipForUserInOrgSignalE(OAITeam_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateMembershipForUserInOrgSignalError(OAITeam_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateMembershipForUserLegacySignalError() instead")
    void teams_addOrUpdateMembershipForUserLegacySignalE(OAITeam_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateMembershipForUserLegacySignalError(OAITeam_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateProjectPermissionsInOrgSignalError() instead")
    void teams_addOrUpdateProjectPermissionsInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateProjectPermissionsInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateProjectPermissionsLegacySignalError() instead")
    void teams_addOrUpdateProjectPermissionsLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateProjectPermissionsLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateRepoPermissionsInOrgSignalError() instead")
    void teams_addOrUpdateRepoPermissionsInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateRepoPermissionsInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateRepoPermissionsLegacySignalError() instead")
    void teams_addOrUpdateRepoPermissionsLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateRepoPermissionsLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForProjectInOrgSignalError() instead")
    void teams_checkPermissionsForProjectInOrgSignalE(OAITeam_project summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForProjectInOrgSignalError(OAITeam_project summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForProjectLegacySignalError() instead")
    void teams_checkPermissionsForProjectLegacySignalE(OAITeam_project summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForProjectLegacySignalError(OAITeam_project summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForRepoInOrgSignalError() instead")
    void teams_checkPermissionsForRepoInOrgSignalE(OAITeam_repository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForRepoInOrgSignalError(OAITeam_repository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForRepoLegacySignalError() instead")
    void teams_checkPermissionsForRepoLegacySignalE(OAITeam_repository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForRepoLegacySignalError(OAITeam_repository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createSignalError() instead")
    void teams_createSignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createSignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionCommentInOrgSignalError() instead")
    void teams_createDiscussionCommentInOrgSignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionCommentInOrgSignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionCommentLegacySignalError() instead")
    void teams_createDiscussionCommentLegacySignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionCommentLegacySignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionInOrgSignalError() instead")
    void teams_createDiscussionInOrgSignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionInOrgSignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionLegacySignalError() instead")
    void teams_createDiscussionLegacySignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionLegacySignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionCommentInOrgSignalError() instead")
    void teams_deleteDiscussionCommentInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionCommentInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionCommentLegacySignalError() instead")
    void teams_deleteDiscussionCommentLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionCommentLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionInOrgSignalError() instead")
    void teams_deleteDiscussionInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionLegacySignalError() instead")
    void teams_deleteDiscussionLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteInOrgSignalError() instead")
    void teams_deleteInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteLegacySignalError() instead")
    void teams_deleteLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getByNameSignalError() instead")
    void teams_getByNameSignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getByNameSignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionCommentInOrgSignalError() instead")
    void teams_getDiscussionCommentInOrgSignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionCommentInOrgSignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionCommentLegacySignalError() instead")
    void teams_getDiscussionCommentLegacySignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionCommentLegacySignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionInOrgSignalError() instead")
    void teams_getDiscussionInOrgSignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionInOrgSignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionLegacySignalError() instead")
    void teams_getDiscussionLegacySignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionLegacySignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getLegacySignalError() instead")
    void teams_getLegacySignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getLegacySignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMemberLegacySignalError() instead")
    void teams_getMemberLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMemberLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMembershipForUserInOrgSignalError() instead")
    void teams_getMembershipForUserInOrgSignalE(OAITeam_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMembershipForUserInOrgSignalError(OAITeam_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMembershipForUserLegacySignalError() instead")
    void teams_getMembershipForUserLegacySignalE(OAITeam_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMembershipForUserLegacySignalError(OAITeam_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listSignalError() instead")
    void teams_listSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listChildInOrgSignalError() instead")
    void teams_listChildInOrgSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listChildInOrgSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listChildLegacySignalError() instead")
    void teams_listChildLegacySignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listChildLegacySignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionCommentsInOrgSignalError() instead")
    void teams_listDiscussionCommentsInOrgSignalE(QList<OAITeam_discussion_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionCommentsInOrgSignalError(QList<OAITeam_discussion_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionCommentsLegacySignalError() instead")
    void teams_listDiscussionCommentsLegacySignalE(QList<OAITeam_discussion_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionCommentsLegacySignalError(QList<OAITeam_discussion_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionsInOrgSignalError() instead")
    void teams_listDiscussionsInOrgSignalE(QList<OAITeam_discussion> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionsInOrgSignalError(QList<OAITeam_discussion> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionsLegacySignalError() instead")
    void teams_listDiscussionsLegacySignalE(QList<OAITeam_discussion> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionsLegacySignalError(QList<OAITeam_discussion> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listForAuthenticatedUserSignalError() instead")
    void teams_listForAuthenticatedUserSignalE(QList<OAITeam_full> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listForAuthenticatedUserSignalError(QList<OAITeam_full> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listMembersInOrgSignalError() instead")
    void teams_listMembersInOrgSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listMembersInOrgSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listMembersLegacySignalError() instead")
    void teams_listMembersLegacySignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listMembersLegacySignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listProjectsInOrgSignalError() instead")
    void teams_listProjectsInOrgSignalE(QList<OAITeam_project> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listProjectsInOrgSignalError(QList<OAITeam_project> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listProjectsLegacySignalError() instead")
    void teams_listProjectsLegacySignalE(QList<OAITeam_project> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listProjectsLegacySignalError(QList<OAITeam_project> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listReposInOrgSignalError() instead")
    void teams_listReposInOrgSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listReposInOrgSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listReposLegacySignalError() instead")
    void teams_listReposLegacySignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listReposLegacySignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMemberLegacySignalError() instead")
    void teams_removeMemberLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMemberLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMembershipForUserInOrgSignalError() instead")
    void teams_removeMembershipForUserInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMembershipForUserInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMembershipForUserLegacySignalError() instead")
    void teams_removeMembershipForUserLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMembershipForUserLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeProjectInOrgSignalError() instead")
    void teams_removeProjectInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeProjectInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeProjectLegacySignalError() instead")
    void teams_removeProjectLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeProjectLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeRepoInOrgSignalError() instead")
    void teams_removeRepoInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeRepoInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeRepoLegacySignalError() instead")
    void teams_removeRepoLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeRepoLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionCommentInOrgSignalError() instead")
    void teams_updateDiscussionCommentInOrgSignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionCommentInOrgSignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionCommentLegacySignalError() instead")
    void teams_updateDiscussionCommentLegacySignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionCommentLegacySignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionInOrgSignalError() instead")
    void teams_updateDiscussionInOrgSignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionInOrgSignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionLegacySignalError() instead")
    void teams_updateDiscussionLegacySignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionLegacySignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateInOrgSignalError() instead")
    void teams_updateInOrgSignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateInOrgSignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateLegacySignalError() instead")
    void teams_updateLegacySignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateLegacySignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use teams_addMemberLegacySignalErrorFull() instead")
    void teams_addMemberLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addMemberLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateMembershipForUserInOrgSignalErrorFull() instead")
    void teams_addOrUpdateMembershipForUserInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateMembershipForUserInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateMembershipForUserLegacySignalErrorFull() instead")
    void teams_addOrUpdateMembershipForUserLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateMembershipForUserLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateProjectPermissionsInOrgSignalErrorFull() instead")
    void teams_addOrUpdateProjectPermissionsInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateProjectPermissionsInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateProjectPermissionsLegacySignalErrorFull() instead")
    void teams_addOrUpdateProjectPermissionsLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateProjectPermissionsLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateRepoPermissionsInOrgSignalErrorFull() instead")
    void teams_addOrUpdateRepoPermissionsInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateRepoPermissionsInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateRepoPermissionsLegacySignalErrorFull() instead")
    void teams_addOrUpdateRepoPermissionsLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateRepoPermissionsLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForProjectInOrgSignalErrorFull() instead")
    void teams_checkPermissionsForProjectInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForProjectInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForProjectLegacySignalErrorFull() instead")
    void teams_checkPermissionsForProjectLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForProjectLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForRepoInOrgSignalErrorFull() instead")
    void teams_checkPermissionsForRepoInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForRepoInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForRepoLegacySignalErrorFull() instead")
    void teams_checkPermissionsForRepoLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForRepoLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createSignalErrorFull() instead")
    void teams_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionCommentInOrgSignalErrorFull() instead")
    void teams_createDiscussionCommentInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionCommentInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionCommentLegacySignalErrorFull() instead")
    void teams_createDiscussionCommentLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionCommentLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionInOrgSignalErrorFull() instead")
    void teams_createDiscussionInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionLegacySignalErrorFull() instead")
    void teams_createDiscussionLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionCommentInOrgSignalErrorFull() instead")
    void teams_deleteDiscussionCommentInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionCommentInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionCommentLegacySignalErrorFull() instead")
    void teams_deleteDiscussionCommentLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionCommentLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionInOrgSignalErrorFull() instead")
    void teams_deleteDiscussionInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionLegacySignalErrorFull() instead")
    void teams_deleteDiscussionLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteInOrgSignalErrorFull() instead")
    void teams_deleteInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteLegacySignalErrorFull() instead")
    void teams_deleteLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getByNameSignalErrorFull() instead")
    void teams_getByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionCommentInOrgSignalErrorFull() instead")
    void teams_getDiscussionCommentInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionCommentInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionCommentLegacySignalErrorFull() instead")
    void teams_getDiscussionCommentLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionCommentLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionInOrgSignalErrorFull() instead")
    void teams_getDiscussionInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionLegacySignalErrorFull() instead")
    void teams_getDiscussionLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getLegacySignalErrorFull() instead")
    void teams_getLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMemberLegacySignalErrorFull() instead")
    void teams_getMemberLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMemberLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMembershipForUserInOrgSignalErrorFull() instead")
    void teams_getMembershipForUserInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMembershipForUserInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMembershipForUserLegacySignalErrorFull() instead")
    void teams_getMembershipForUserLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMembershipForUserLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listSignalErrorFull() instead")
    void teams_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listChildInOrgSignalErrorFull() instead")
    void teams_listChildInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listChildInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listChildLegacySignalErrorFull() instead")
    void teams_listChildLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listChildLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionCommentsInOrgSignalErrorFull() instead")
    void teams_listDiscussionCommentsInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionCommentsInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionCommentsLegacySignalErrorFull() instead")
    void teams_listDiscussionCommentsLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionCommentsLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionsInOrgSignalErrorFull() instead")
    void teams_listDiscussionsInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionsInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionsLegacySignalErrorFull() instead")
    void teams_listDiscussionsLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionsLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listForAuthenticatedUserSignalErrorFull() instead")
    void teams_listForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listMembersInOrgSignalErrorFull() instead")
    void teams_listMembersInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listMembersInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listMembersLegacySignalErrorFull() instead")
    void teams_listMembersLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listMembersLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listProjectsInOrgSignalErrorFull() instead")
    void teams_listProjectsInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listProjectsInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listProjectsLegacySignalErrorFull() instead")
    void teams_listProjectsLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listProjectsLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listReposInOrgSignalErrorFull() instead")
    void teams_listReposInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listReposInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listReposLegacySignalErrorFull() instead")
    void teams_listReposLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listReposLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMemberLegacySignalErrorFull() instead")
    void teams_removeMemberLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMemberLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMembershipForUserInOrgSignalErrorFull() instead")
    void teams_removeMembershipForUserInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMembershipForUserInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMembershipForUserLegacySignalErrorFull() instead")
    void teams_removeMembershipForUserLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMembershipForUserLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeProjectInOrgSignalErrorFull() instead")
    void teams_removeProjectInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeProjectInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeProjectLegacySignalErrorFull() instead")
    void teams_removeProjectLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeProjectLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeRepoInOrgSignalErrorFull() instead")
    void teams_removeRepoInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeRepoInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeRepoLegacySignalErrorFull() instead")
    void teams_removeRepoLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeRepoLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionCommentInOrgSignalErrorFull() instead")
    void teams_updateDiscussionCommentInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionCommentInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionCommentLegacySignalErrorFull() instead")
    void teams_updateDiscussionCommentLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionCommentLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionInOrgSignalErrorFull() instead")
    void teams_updateDiscussionInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionLegacySignalErrorFull() instead")
    void teams_updateDiscussionLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateInOrgSignalErrorFull() instead")
    void teams_updateInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateLegacySignalErrorFull() instead")
    void teams_updateLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
