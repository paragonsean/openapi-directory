/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_comment_overview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_comment_overview::OAIEnterprise_comment_overview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_comment_overview::OAIEnterprise_comment_overview() {
    this->initializeModel();
}

OAIEnterprise_comment_overview::~OAIEnterprise_comment_overview() {}

void OAIEnterprise_comment_overview::initializeModel() {

    m_total_commit_comments_isSet = false;
    m_total_commit_comments_isValid = false;

    m_total_gist_comments_isSet = false;
    m_total_gist_comments_isValid = false;

    m_total_issue_comments_isSet = false;
    m_total_issue_comments_isValid = false;

    m_total_pull_request_comments_isSet = false;
    m_total_pull_request_comments_isValid = false;
}

void OAIEnterprise_comment_overview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_comment_overview::fromJsonObject(QJsonObject json) {

    m_total_commit_comments_isValid = ::OpenAPI::fromJsonValue(m_total_commit_comments, json[QString("total_commit_comments")]);
    m_total_commit_comments_isSet = !json[QString("total_commit_comments")].isNull() && m_total_commit_comments_isValid;

    m_total_gist_comments_isValid = ::OpenAPI::fromJsonValue(m_total_gist_comments, json[QString("total_gist_comments")]);
    m_total_gist_comments_isSet = !json[QString("total_gist_comments")].isNull() && m_total_gist_comments_isValid;

    m_total_issue_comments_isValid = ::OpenAPI::fromJsonValue(m_total_issue_comments, json[QString("total_issue_comments")]);
    m_total_issue_comments_isSet = !json[QString("total_issue_comments")].isNull() && m_total_issue_comments_isValid;

    m_total_pull_request_comments_isValid = ::OpenAPI::fromJsonValue(m_total_pull_request_comments, json[QString("total_pull_request_comments")]);
    m_total_pull_request_comments_isSet = !json[QString("total_pull_request_comments")].isNull() && m_total_pull_request_comments_isValid;
}

QString OAIEnterprise_comment_overview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_comment_overview::asJsonObject() const {
    QJsonObject obj;
    if (m_total_commit_comments_isSet) {
        obj.insert(QString("total_commit_comments"), ::OpenAPI::toJsonValue(m_total_commit_comments));
    }
    if (m_total_gist_comments_isSet) {
        obj.insert(QString("total_gist_comments"), ::OpenAPI::toJsonValue(m_total_gist_comments));
    }
    if (m_total_issue_comments_isSet) {
        obj.insert(QString("total_issue_comments"), ::OpenAPI::toJsonValue(m_total_issue_comments));
    }
    if (m_total_pull_request_comments_isSet) {
        obj.insert(QString("total_pull_request_comments"), ::OpenAPI::toJsonValue(m_total_pull_request_comments));
    }
    return obj;
}

qint32 OAIEnterprise_comment_overview::getTotalCommitComments() const {
    return m_total_commit_comments;
}
void OAIEnterprise_comment_overview::setTotalCommitComments(const qint32 &total_commit_comments) {
    m_total_commit_comments = total_commit_comments;
    m_total_commit_comments_isSet = true;
}

bool OAIEnterprise_comment_overview::is_total_commit_comments_Set() const{
    return m_total_commit_comments_isSet;
}

bool OAIEnterprise_comment_overview::is_total_commit_comments_Valid() const{
    return m_total_commit_comments_isValid;
}

qint32 OAIEnterprise_comment_overview::getTotalGistComments() const {
    return m_total_gist_comments;
}
void OAIEnterprise_comment_overview::setTotalGistComments(const qint32 &total_gist_comments) {
    m_total_gist_comments = total_gist_comments;
    m_total_gist_comments_isSet = true;
}

bool OAIEnterprise_comment_overview::is_total_gist_comments_Set() const{
    return m_total_gist_comments_isSet;
}

bool OAIEnterprise_comment_overview::is_total_gist_comments_Valid() const{
    return m_total_gist_comments_isValid;
}

qint32 OAIEnterprise_comment_overview::getTotalIssueComments() const {
    return m_total_issue_comments;
}
void OAIEnterprise_comment_overview::setTotalIssueComments(const qint32 &total_issue_comments) {
    m_total_issue_comments = total_issue_comments;
    m_total_issue_comments_isSet = true;
}

bool OAIEnterprise_comment_overview::is_total_issue_comments_Set() const{
    return m_total_issue_comments_isSet;
}

bool OAIEnterprise_comment_overview::is_total_issue_comments_Valid() const{
    return m_total_issue_comments_isValid;
}

qint32 OAIEnterprise_comment_overview::getTotalPullRequestComments() const {
    return m_total_pull_request_comments;
}
void OAIEnterprise_comment_overview::setTotalPullRequestComments(const qint32 &total_pull_request_comments) {
    m_total_pull_request_comments = total_pull_request_comments;
    m_total_pull_request_comments_isSet = true;
}

bool OAIEnterprise_comment_overview::is_total_pull_request_comments_Set() const{
    return m_total_pull_request_comments_isSet;
}

bool OAIEnterprise_comment_overview::is_total_pull_request_comments_Valid() const{
    return m_total_pull_request_comments_isValid;
}

bool OAIEnterprise_comment_overview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_commit_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_gist_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_issue_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pull_request_comments_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_comment_overview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_commit_comments_isValid && m_total_gist_comments_isValid && m_total_issue_comments_isValid && m_total_pull_request_comments_isValid && true;
}

} // namespace OpenAPI
