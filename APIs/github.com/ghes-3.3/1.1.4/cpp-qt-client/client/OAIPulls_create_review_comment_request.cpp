/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPulls_create_review_comment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPulls_create_review_comment_request::OAIPulls_create_review_comment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPulls_create_review_comment_request::OAIPulls_create_review_comment_request() {
    this->initializeModel();
}

OAIPulls_create_review_comment_request::~OAIPulls_create_review_comment_request() {}

void OAIPulls_create_review_comment_request::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_in_reply_to_isSet = false;
    m_in_reply_to_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;

    m_start_side_isSet = false;
    m_start_side_isValid = false;
}

void OAIPulls_create_review_comment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPulls_create_review_comment_request::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_in_reply_to_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to, json[QString("in_reply_to")]);
    m_in_reply_to_isSet = !json[QString("in_reply_to")].isNull() && m_in_reply_to_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(m_side, json[QString("side")]);
    m_side_isSet = !json[QString("side")].isNull() && m_side_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("start_line")]);
    m_start_line_isSet = !json[QString("start_line")].isNull() && m_start_line_isValid;

    m_start_side_isValid = ::OpenAPI::fromJsonValue(m_start_side, json[QString("start_side")]);
    m_start_side_isSet = !json[QString("start_side")].isNull() && m_start_side_isValid;
}

QString OAIPulls_create_review_comment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPulls_create_review_comment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_in_reply_to_isSet) {
        obj.insert(QString("in_reply_to"), ::OpenAPI::toJsonValue(m_in_reply_to));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_side_isSet) {
        obj.insert(QString("side"), ::OpenAPI::toJsonValue(m_side));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("start_line"), ::OpenAPI::toJsonValue(m_start_line));
    }
    if (m_start_side_isSet) {
        obj.insert(QString("start_side"), ::OpenAPI::toJsonValue(m_start_side));
    }
    return obj;
}

QString OAIPulls_create_review_comment_request::getBody() const {
    return m_body;
}
void OAIPulls_create_review_comment_request::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPulls_create_review_comment_request::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIPulls_create_review_comment_request::getCommitId() const {
    return m_commit_id;
}
void OAIPulls_create_review_comment_request::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIPulls_create_review_comment_request::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

qint32 OAIPulls_create_review_comment_request::getInReplyTo() const {
    return m_in_reply_to;
}
void OAIPulls_create_review_comment_request::setInReplyTo(const qint32 &in_reply_to) {
    m_in_reply_to = in_reply_to;
    m_in_reply_to_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_in_reply_to_Set() const{
    return m_in_reply_to_isSet;
}

bool OAIPulls_create_review_comment_request::is_in_reply_to_Valid() const{
    return m_in_reply_to_isValid;
}

qint32 OAIPulls_create_review_comment_request::getLine() const {
    return m_line;
}
void OAIPulls_create_review_comment_request::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_line_Set() const{
    return m_line_isSet;
}

bool OAIPulls_create_review_comment_request::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIPulls_create_review_comment_request::getPath() const {
    return m_path;
}
void OAIPulls_create_review_comment_request::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPulls_create_review_comment_request::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIPulls_create_review_comment_request::getPosition() const {
    return m_position;
}
void OAIPulls_create_review_comment_request::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPulls_create_review_comment_request::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIPulls_create_review_comment_request::getSide() const {
    return m_side;
}
void OAIPulls_create_review_comment_request::setSide(const QString &side) {
    m_side = side;
    m_side_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_side_Set() const{
    return m_side_isSet;
}

bool OAIPulls_create_review_comment_request::is_side_Valid() const{
    return m_side_isValid;
}

qint32 OAIPulls_create_review_comment_request::getStartLine() const {
    return m_start_line;
}
void OAIPulls_create_review_comment_request::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAIPulls_create_review_comment_request::is_start_line_Valid() const{
    return m_start_line_isValid;
}

QString OAIPulls_create_review_comment_request::getStartSide() const {
    return m_start_side;
}
void OAIPulls_create_review_comment_request::setStartSide(const QString &start_side) {
    m_start_side = start_side;
    m_start_side_isSet = true;
}

bool OAIPulls_create_review_comment_request::is_start_side_Set() const{
    return m_start_side_isSet;
}

bool OAIPulls_create_review_comment_request::is_start_side_Valid() const{
    return m_start_side_isValid;
}

bool OAIPulls_create_review_comment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_side_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPulls_create_review_comment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_commit_id_isValid && m_line_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
