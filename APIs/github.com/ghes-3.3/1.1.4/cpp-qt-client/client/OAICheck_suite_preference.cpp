/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck_suite_preference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck_suite_preference::OAICheck_suite_preference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck_suite_preference::OAICheck_suite_preference() {
    this->initializeModel();
}

OAICheck_suite_preference::~OAICheck_suite_preference() {}

void OAICheck_suite_preference::initializeModel() {

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;
}

void OAICheck_suite_preference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck_suite_preference::fromJsonObject(QJsonObject json) {

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;
}

QString OAICheck_suite_preference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck_suite_preference::asJsonObject() const {
    QJsonObject obj;
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    return obj;
}

OAICheck_suite_preference_preferences OAICheck_suite_preference::getPreferences() const {
    return m_preferences;
}
void OAICheck_suite_preference::setPreferences(const OAICheck_suite_preference_preferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAICheck_suite_preference::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAICheck_suite_preference::is_preferences_Valid() const{
    return m_preferences_isValid;
}

OAIMinimal_repository OAICheck_suite_preference::getRepository() const {
    return m_repository;
}
void OAICheck_suite_preference::setRepository(const OAIMinimal_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICheck_suite_preference::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICheck_suite_preference::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAICheck_suite_preference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck_suite_preference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_preferences_isValid && m_repository_isValid && true;
}

} // namespace OpenAPI
