/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerged_upstream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerged_upstream::OAIMerged_upstream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerged_upstream::OAIMerged_upstream() {
    this->initializeModel();
}

OAIMerged_upstream::~OAIMerged_upstream() {}

void OAIMerged_upstream::initializeModel() {

    m_base_branch_isSet = false;
    m_base_branch_isValid = false;

    m_merge_type_isSet = false;
    m_merge_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIMerged_upstream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerged_upstream::fromJsonObject(QJsonObject json) {

    m_base_branch_isValid = ::OpenAPI::fromJsonValue(m_base_branch, json[QString("base_branch")]);
    m_base_branch_isSet = !json[QString("base_branch")].isNull() && m_base_branch_isValid;

    m_merge_type_isValid = ::OpenAPI::fromJsonValue(m_merge_type, json[QString("merge_type")]);
    m_merge_type_isSet = !json[QString("merge_type")].isNull() && m_merge_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIMerged_upstream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerged_upstream::asJsonObject() const {
    QJsonObject obj;
    if (m_base_branch_isSet) {
        obj.insert(QString("base_branch"), ::OpenAPI::toJsonValue(m_base_branch));
    }
    if (m_merge_type_isSet) {
        obj.insert(QString("merge_type"), ::OpenAPI::toJsonValue(m_merge_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIMerged_upstream::getBaseBranch() const {
    return m_base_branch;
}
void OAIMerged_upstream::setBaseBranch(const QString &base_branch) {
    m_base_branch = base_branch;
    m_base_branch_isSet = true;
}

bool OAIMerged_upstream::is_base_branch_Set() const{
    return m_base_branch_isSet;
}

bool OAIMerged_upstream::is_base_branch_Valid() const{
    return m_base_branch_isValid;
}

QString OAIMerged_upstream::getMergeType() const {
    return m_merge_type;
}
void OAIMerged_upstream::setMergeType(const QString &merge_type) {
    m_merge_type = merge_type;
    m_merge_type_isSet = true;
}

bool OAIMerged_upstream::is_merge_type_Set() const{
    return m_merge_type_isSet;
}

bool OAIMerged_upstream::is_merge_type_Valid() const{
    return m_merge_type_isValid;
}

QString OAIMerged_upstream::getMessage() const {
    return m_message;
}
void OAIMerged_upstream::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMerged_upstream::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMerged_upstream::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIMerged_upstream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerged_upstream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
