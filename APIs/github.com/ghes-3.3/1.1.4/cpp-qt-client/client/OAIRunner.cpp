/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunner::OAIRunner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunner::OAIRunner() {
    this->initializeModel();
}

OAIRunner::~OAIRunner() {}

void OAIRunner::initializeModel() {

    m_busy_isSet = false;
    m_busy_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRunner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunner::fromJsonObject(QJsonObject json) {

    m_busy_isValid = ::OpenAPI::fromJsonValue(m_busy, json[QString("busy")]);
    m_busy_isSet = !json[QString("busy")].isNull() && m_busy_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRunner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunner::asJsonObject() const {
    QJsonObject obj;
    if (m_busy_isSet) {
        obj.insert(QString("busy"), ::OpenAPI::toJsonValue(m_busy));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIRunner::isBusy() const {
    return m_busy;
}
void OAIRunner::setBusy(const bool &busy) {
    m_busy = busy;
    m_busy_isSet = true;
}

bool OAIRunner::is_busy_Set() const{
    return m_busy_isSet;
}

bool OAIRunner::is_busy_Valid() const{
    return m_busy_isValid;
}

qint32 OAIRunner::getId() const {
    return m_id;
}
void OAIRunner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRunner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunner::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIRunner_label> OAIRunner::getLabels() const {
    return m_labels;
}
void OAIRunner::setLabels(const QList<OAIRunner_label> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRunner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRunner::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIRunner::getName() const {
    return m_name;
}
void OAIRunner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRunner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRunner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRunner::getOs() const {
    return m_os;
}
void OAIRunner::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIRunner::is_os_Set() const{
    return m_os_isSet;
}

bool OAIRunner::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIRunner::getStatus() const {
    return m_status;
}
void OAIRunner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRunner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRunner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRunner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_busy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_busy_isValid && m_id_isValid && m_labels_isValid && m_name_isValid && m_os_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
