/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_analysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_analysis::OAICode_scanning_analysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_analysis::OAICode_scanning_analysis() {
    this->initializeModel();
}

OAICode_scanning_analysis::~OAICode_scanning_analysis() {}

void OAICode_scanning_analysis::initializeModel() {

    m_analysis_key_isSet = false;
    m_analysis_key_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_commit_sha_isSet = false;
    m_commit_sha_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deletable_isSet = false;
    m_deletable_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_results_count_isSet = false;
    m_results_count_isValid = false;

    m_rules_count_isSet = false;
    m_rules_count_isValid = false;

    m_sarif_id_isSet = false;
    m_sarif_id_isValid = false;

    m_tool_isSet = false;
    m_tool_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;
}

void OAICode_scanning_analysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_analysis::fromJsonObject(QJsonObject json) {

    m_analysis_key_isValid = ::OpenAPI::fromJsonValue(m_analysis_key, json[QString("analysis_key")]);
    m_analysis_key_isSet = !json[QString("analysis_key")].isNull() && m_analysis_key_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_commit_sha, json[QString("commit_sha")]);
    m_commit_sha_isSet = !json[QString("commit_sha")].isNull() && m_commit_sha_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deletable_isValid = ::OpenAPI::fromJsonValue(m_deletable, json[QString("deletable")]);
    m_deletable_isSet = !json[QString("deletable")].isNull() && m_deletable_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_results_count_isValid = ::OpenAPI::fromJsonValue(m_results_count, json[QString("results_count")]);
    m_results_count_isSet = !json[QString("results_count")].isNull() && m_results_count_isValid;

    m_rules_count_isValid = ::OpenAPI::fromJsonValue(m_rules_count, json[QString("rules_count")]);
    m_rules_count_isSet = !json[QString("rules_count")].isNull() && m_rules_count_isValid;

    m_sarif_id_isValid = ::OpenAPI::fromJsonValue(m_sarif_id, json[QString("sarif_id")]);
    m_sarif_id_isSet = !json[QString("sarif_id")].isNull() && m_sarif_id_isValid;

    m_tool_isValid = ::OpenAPI::fromJsonValue(m_tool, json[QString("tool")]);
    m_tool_isSet = !json[QString("tool")].isNull() && m_tool_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("warning")]);
    m_warning_isSet = !json[QString("warning")].isNull() && m_warning_isValid;
}

QString OAICode_scanning_analysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_analysis::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_key_isSet) {
        obj.insert(QString("analysis_key"), ::OpenAPI::toJsonValue(m_analysis_key));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_commit_sha_isSet) {
        obj.insert(QString("commit_sha"), ::OpenAPI::toJsonValue(m_commit_sha));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deletable_isSet) {
        obj.insert(QString("deletable"), ::OpenAPI::toJsonValue(m_deletable));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_results_count_isSet) {
        obj.insert(QString("results_count"), ::OpenAPI::toJsonValue(m_results_count));
    }
    if (m_rules_count_isSet) {
        obj.insert(QString("rules_count"), ::OpenAPI::toJsonValue(m_rules_count));
    }
    if (m_sarif_id_isSet) {
        obj.insert(QString("sarif_id"), ::OpenAPI::toJsonValue(m_sarif_id));
    }
    if (m_tool.isSet()) {
        obj.insert(QString("tool"), ::OpenAPI::toJsonValue(m_tool));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_warning_isSet) {
        obj.insert(QString("warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    return obj;
}

QString OAICode_scanning_analysis::getAnalysisKey() const {
    return m_analysis_key;
}
void OAICode_scanning_analysis::setAnalysisKey(const QString &analysis_key) {
    m_analysis_key = analysis_key;
    m_analysis_key_isSet = true;
}

bool OAICode_scanning_analysis::is_analysis_key_Set() const{
    return m_analysis_key_isSet;
}

bool OAICode_scanning_analysis::is_analysis_key_Valid() const{
    return m_analysis_key_isValid;
}

QString OAICode_scanning_analysis::getCategory() const {
    return m_category;
}
void OAICode_scanning_analysis::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICode_scanning_analysis::is_category_Set() const{
    return m_category_isSet;
}

bool OAICode_scanning_analysis::is_category_Valid() const{
    return m_category_isValid;
}

QString OAICode_scanning_analysis::getCommitSha() const {
    return m_commit_sha;
}
void OAICode_scanning_analysis::setCommitSha(const QString &commit_sha) {
    m_commit_sha = commit_sha;
    m_commit_sha_isSet = true;
}

bool OAICode_scanning_analysis::is_commit_sha_Set() const{
    return m_commit_sha_isSet;
}

bool OAICode_scanning_analysis::is_commit_sha_Valid() const{
    return m_commit_sha_isValid;
}

QDateTime OAICode_scanning_analysis::getCreatedAt() const {
    return m_created_at;
}
void OAICode_scanning_analysis::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICode_scanning_analysis::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICode_scanning_analysis::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAICode_scanning_analysis::isDeletable() const {
    return m_deletable;
}
void OAICode_scanning_analysis::setDeletable(const bool &deletable) {
    m_deletable = deletable;
    m_deletable_isSet = true;
}

bool OAICode_scanning_analysis::is_deletable_Set() const{
    return m_deletable_isSet;
}

bool OAICode_scanning_analysis::is_deletable_Valid() const{
    return m_deletable_isValid;
}

QString OAICode_scanning_analysis::getEnvironment() const {
    return m_environment;
}
void OAICode_scanning_analysis::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICode_scanning_analysis::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICode_scanning_analysis::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAICode_scanning_analysis::getError() const {
    return m_error;
}
void OAICode_scanning_analysis::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICode_scanning_analysis::is_error_Set() const{
    return m_error_isSet;
}

bool OAICode_scanning_analysis::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAICode_scanning_analysis::getId() const {
    return m_id;
}
void OAICode_scanning_analysis::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICode_scanning_analysis::is_id_Set() const{
    return m_id_isSet;
}

bool OAICode_scanning_analysis::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICode_scanning_analysis::getRef() const {
    return m_ref;
}
void OAICode_scanning_analysis::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAICode_scanning_analysis::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAICode_scanning_analysis::is_ref_Valid() const{
    return m_ref_isValid;
}

qint32 OAICode_scanning_analysis::getResultsCount() const {
    return m_results_count;
}
void OAICode_scanning_analysis::setResultsCount(const qint32 &results_count) {
    m_results_count = results_count;
    m_results_count_isSet = true;
}

bool OAICode_scanning_analysis::is_results_count_Set() const{
    return m_results_count_isSet;
}

bool OAICode_scanning_analysis::is_results_count_Valid() const{
    return m_results_count_isValid;
}

qint32 OAICode_scanning_analysis::getRulesCount() const {
    return m_rules_count;
}
void OAICode_scanning_analysis::setRulesCount(const qint32 &rules_count) {
    m_rules_count = rules_count;
    m_rules_count_isSet = true;
}

bool OAICode_scanning_analysis::is_rules_count_Set() const{
    return m_rules_count_isSet;
}

bool OAICode_scanning_analysis::is_rules_count_Valid() const{
    return m_rules_count_isValid;
}

QString OAICode_scanning_analysis::getSarifId() const {
    return m_sarif_id;
}
void OAICode_scanning_analysis::setSarifId(const QString &sarif_id) {
    m_sarif_id = sarif_id;
    m_sarif_id_isSet = true;
}

bool OAICode_scanning_analysis::is_sarif_id_Set() const{
    return m_sarif_id_isSet;
}

bool OAICode_scanning_analysis::is_sarif_id_Valid() const{
    return m_sarif_id_isValid;
}

OAICode_scanning_analysis_tool OAICode_scanning_analysis::getTool() const {
    return m_tool;
}
void OAICode_scanning_analysis::setTool(const OAICode_scanning_analysis_tool &tool) {
    m_tool = tool;
    m_tool_isSet = true;
}

bool OAICode_scanning_analysis::is_tool_Set() const{
    return m_tool_isSet;
}

bool OAICode_scanning_analysis::is_tool_Valid() const{
    return m_tool_isValid;
}

QString OAICode_scanning_analysis::getUrl() const {
    return m_url;
}
void OAICode_scanning_analysis::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICode_scanning_analysis::is_url_Set() const{
    return m_url_isSet;
}

bool OAICode_scanning_analysis::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICode_scanning_analysis::getWarning() const {
    return m_warning;
}
void OAICode_scanning_analysis::setWarning(const QString &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAICode_scanning_analysis::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAICode_scanning_analysis::is_warning_Valid() const{
    return m_warning_isValid;
}

bool OAICode_scanning_analysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sarif_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_analysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_key_isValid && m_commit_sha_isValid && m_created_at_isValid && m_deletable_isValid && m_environment_isValid && m_error_isValid && m_id_isValid && m_ref_isValid && m_results_count_isValid && m_rules_count_isValid && m_sarif_id_isValid && m_tool_isValid && m_url_isValid && m_warning_isValid && true;
}

} // namespace OpenAPI
