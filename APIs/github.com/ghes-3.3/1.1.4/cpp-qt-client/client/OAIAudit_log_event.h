/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudit_log_event.h
 *
 * 
 */

#ifndef OAIAudit_log_event_H
#define OAIAudit_log_event_H

#include <QJsonObject>

#include "OAIAudit_log_event_actor_location.h"
#include "OAIObject.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudit_log_event_actor_location;

class OAIAudit_log_event : public OAIObject {
public:
    OAIAudit_log_event();
    OAIAudit_log_event(QString json);
    ~OAIAudit_log_event() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getTimestamp() const;
    void setTimestamp(const qint32 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getDocumentId() const;
    void setDocumentId(const QString &_document_id);
    bool is__document_id_Set() const;
    bool is__document_id_Valid() const;

    QString getAction() const;
    void setAction(const QString &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    bool isActiveWas() const;
    void setActiveWas(const bool &active_was);
    bool is_active_was_Set() const;
    bool is_active_was_Valid() const;

    QString getActor() const;
    void setActor(const QString &actor);
    bool is_actor_Set() const;
    bool is_actor_Valid() const;

    qint32 getActorId() const;
    void setActorId(const qint32 &actor_id);
    bool is_actor_id_Set() const;
    bool is_actor_id_Valid() const;

    OAIAudit_log_event_actor_location getActorLocation() const;
    void setActorLocation(const OAIAudit_log_event_actor_location &actor_location);
    bool is_actor_location_Set() const;
    bool is_actor_location_Valid() const;

    QString getBlockedUser() const;
    void setBlockedUser(const QString &blocked_user);
    bool is_blocked_user_Set() const;
    bool is_blocked_user_Valid() const;

    QString getBusiness() const;
    void setBusiness(const QString &business);
    bool is_business_Set() const;
    bool is_business_Valid() const;

    qint32 getBusinessId() const;
    void setBusinessId(const qint32 &business_id);
    bool is_business_id_Set() const;
    bool is_business_id_Valid() const;

    QList<OAIObject> getConfig() const;
    void setConfig(const QList<OAIObject> &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QList<OAIObject> getConfigWas() const;
    void setConfigWas(const QList<OAIObject> &config_was);
    bool is_config_was_Set() const;
    bool is_config_was_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    qint32 getCreatedAt() const;
    void setCreatedAt(const qint32 &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QMap<QString, QJsonValue> getData() const;
    void setData(const QMap<QString, QJsonValue> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getDeployKeyFingerprint() const;
    void setDeployKeyFingerprint(const QString &deploy_key_fingerprint);
    bool is_deploy_key_fingerprint_Set() const;
    bool is_deploy_key_fingerprint_Valid() const;

    QString getEmoji() const;
    void setEmoji(const QString &emoji);
    bool is_emoji_Set() const;
    bool is_emoji_Valid() const;

    QList<OAIObject> getEvents() const;
    void setEvents(const QList<OAIObject> &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QList<OAIObject> getEventsWere() const;
    void setEventsWere(const QList<OAIObject> &events_were);
    bool is_events_were_Set() const;
    bool is_events_were_Valid() const;

    QString getExplanation() const;
    void setExplanation(const QString &explanation);
    bool is_explanation_Set() const;
    bool is_explanation_Valid() const;

    QString getFingerprint() const;
    void setFingerprint(const QString &fingerprint);
    bool is_fingerprint_Set() const;
    bool is_fingerprint_Valid() const;

    qint32 getHookId() const;
    void setHookId(const qint32 &hook_id);
    bool is_hook_id_Set() const;
    bool is_hook_id_Valid() const;

    bool isLimitedAvailability() const;
    void setLimitedAvailability(const bool &limited_availability);
    bool is_limited_availability_Set() const;
    bool is_limited_availability_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOldUser() const;
    void setOldUser(const QString &old_user);
    bool is_old_user_Set() const;
    bool is_old_user_Valid() const;

    QString getOpensshPublicKey() const;
    void setOpensshPublicKey(const QString &openssh_public_key);
    bool is_openssh_public_key_Set() const;
    bool is_openssh_public_key_Valid() const;

    QString getOperationType() const;
    void setOperationType(const QString &operation_type);
    bool is_operation_type_Set() const;
    bool is_operation_type_Valid() const;

    QString getOrg() const;
    void setOrg(const QString &org);
    bool is_org_Set() const;
    bool is_org_Valid() const;

    qint32 getOrgId() const;
    void setOrgId(const qint32 &org_id);
    bool is_org_id_Set() const;
    bool is_org_id_Valid() const;

    QString getPreviousVisibility() const;
    void setPreviousVisibility(const QString &previous_visibility);
    bool is_previous_visibility_Set() const;
    bool is_previous_visibility_Valid() const;

    bool isReadOnly() const;
    void setReadOnly(const bool &read_only);
    bool is_read_only_Set() const;
    bool is_read_only_Valid() const;

    QString getRepo() const;
    void setRepo(const QString &repo);
    bool is_repo_Set() const;
    bool is_repo_Valid() const;

    QString getRepository() const;
    void setRepository(const QString &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    bool isRepositoryPublic() const;
    void setRepositoryPublic(const bool &repository_public);
    bool is_repository_public_Set() const;
    bool is_repository_public_Valid() const;

    QString getTargetLogin() const;
    void setTargetLogin(const QString &target_login);
    bool is_target_login_Set() const;
    bool is_target_login_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTransportProtocol() const;
    void setTransportProtocol(const qint32 &transport_protocol);
    bool is_transport_protocol_Set() const;
    bool is_transport_protocol_Valid() const;

    QString getTransportProtocolName() const;
    void setTransportProtocolName(const QString &transport_protocol_name);
    bool is_transport_protocol_name_Set() const;
    bool is_transport_protocol_name_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m__document_id;
    bool m__document_id_isSet;
    bool m__document_id_isValid;

    QString m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    bool m_active_was;
    bool m_active_was_isSet;
    bool m_active_was_isValid;

    QString m_actor;
    bool m_actor_isSet;
    bool m_actor_isValid;

    qint32 m_actor_id;
    bool m_actor_id_isSet;
    bool m_actor_id_isValid;

    OAIAudit_log_event_actor_location m_actor_location;
    bool m_actor_location_isSet;
    bool m_actor_location_isValid;

    QString m_blocked_user;
    bool m_blocked_user_isSet;
    bool m_blocked_user_isValid;

    QString m_business;
    bool m_business_isSet;
    bool m_business_isValid;

    qint32 m_business_id;
    bool m_business_id_isSet;
    bool m_business_id_isValid;

    QList<OAIObject> m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QList<OAIObject> m_config_was;
    bool m_config_was_isSet;
    bool m_config_was_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    qint32 m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QMap<QString, QJsonValue> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_deploy_key_fingerprint;
    bool m_deploy_key_fingerprint_isSet;
    bool m_deploy_key_fingerprint_isValid;

    QString m_emoji;
    bool m_emoji_isSet;
    bool m_emoji_isValid;

    QList<OAIObject> m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QList<OAIObject> m_events_were;
    bool m_events_were_isSet;
    bool m_events_were_isValid;

    QString m_explanation;
    bool m_explanation_isSet;
    bool m_explanation_isValid;

    QString m_fingerprint;
    bool m_fingerprint_isSet;
    bool m_fingerprint_isValid;

    qint32 m_hook_id;
    bool m_hook_id_isSet;
    bool m_hook_id_isValid;

    bool m_limited_availability;
    bool m_limited_availability_isSet;
    bool m_limited_availability_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_old_user;
    bool m_old_user_isSet;
    bool m_old_user_isValid;

    QString m_openssh_public_key;
    bool m_openssh_public_key_isSet;
    bool m_openssh_public_key_isValid;

    QString m_operation_type;
    bool m_operation_type_isSet;
    bool m_operation_type_isValid;

    QString m_org;
    bool m_org_isSet;
    bool m_org_isValid;

    qint32 m_org_id;
    bool m_org_id_isSet;
    bool m_org_id_isValid;

    QString m_previous_visibility;
    bool m_previous_visibility_isSet;
    bool m_previous_visibility_isValid;

    bool m_read_only;
    bool m_read_only_isSet;
    bool m_read_only_isValid;

    QString m_repo;
    bool m_repo_isSet;
    bool m_repo_isValid;

    QString m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    bool m_repository_public;
    bool m_repository_public_isSet;
    bool m_repository_public_isValid;

    QString m_target_login;
    bool m_target_login_isSet;
    bool m_target_login_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_transport_protocol;
    bool m_transport_protocol_isSet;
    bool m_transport_protocol_isValid;

    QString m_transport_protocol_name;
    bool m_transport_protocol_name_isSet;
    bool m_transport_protocol_name_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudit_log_event)

#endif // OAIAudit_log_event_H
