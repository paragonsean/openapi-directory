/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaborator_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaborator_permissions::OAICollaborator_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaborator_permissions::OAICollaborator_permissions() {
    this->initializeModel();
}

OAICollaborator_permissions::~OAICollaborator_permissions() {}

void OAICollaborator_permissions::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_maintain_isSet = false;
    m_maintain_isValid = false;

    m_pull_isSet = false;
    m_pull_isValid = false;

    m_push_isSet = false;
    m_push_isValid = false;

    m_triage_isSet = false;
    m_triage_isValid = false;
}

void OAICollaborator_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaborator_permissions::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_maintain_isValid = ::OpenAPI::fromJsonValue(m_maintain, json[QString("maintain")]);
    m_maintain_isSet = !json[QString("maintain")].isNull() && m_maintain_isValid;

    m_pull_isValid = ::OpenAPI::fromJsonValue(m_pull, json[QString("pull")]);
    m_pull_isSet = !json[QString("pull")].isNull() && m_pull_isValid;

    m_push_isValid = ::OpenAPI::fromJsonValue(m_push, json[QString("push")]);
    m_push_isSet = !json[QString("push")].isNull() && m_push_isValid;

    m_triage_isValid = ::OpenAPI::fromJsonValue(m_triage, json[QString("triage")]);
    m_triage_isSet = !json[QString("triage")].isNull() && m_triage_isValid;
}

QString OAICollaborator_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaborator_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_maintain_isSet) {
        obj.insert(QString("maintain"), ::OpenAPI::toJsonValue(m_maintain));
    }
    if (m_pull_isSet) {
        obj.insert(QString("pull"), ::OpenAPI::toJsonValue(m_pull));
    }
    if (m_push_isSet) {
        obj.insert(QString("push"), ::OpenAPI::toJsonValue(m_push));
    }
    if (m_triage_isSet) {
        obj.insert(QString("triage"), ::OpenAPI::toJsonValue(m_triage));
    }
    return obj;
}

bool OAICollaborator_permissions::isAdmin() const {
    return m_admin;
}
void OAICollaborator_permissions::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAICollaborator_permissions::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAICollaborator_permissions::is_admin_Valid() const{
    return m_admin_isValid;
}

bool OAICollaborator_permissions::isMaintain() const {
    return m_maintain;
}
void OAICollaborator_permissions::setMaintain(const bool &maintain) {
    m_maintain = maintain;
    m_maintain_isSet = true;
}

bool OAICollaborator_permissions::is_maintain_Set() const{
    return m_maintain_isSet;
}

bool OAICollaborator_permissions::is_maintain_Valid() const{
    return m_maintain_isValid;
}

bool OAICollaborator_permissions::isPull() const {
    return m_pull;
}
void OAICollaborator_permissions::setPull(const bool &pull) {
    m_pull = pull;
    m_pull_isSet = true;
}

bool OAICollaborator_permissions::is_pull_Set() const{
    return m_pull_isSet;
}

bool OAICollaborator_permissions::is_pull_Valid() const{
    return m_pull_isValid;
}

bool OAICollaborator_permissions::isPush() const {
    return m_push;
}
void OAICollaborator_permissions::setPush(const bool &push) {
    m_push = push;
    m_push_isSet = true;
}

bool OAICollaborator_permissions::is_push_Set() const{
    return m_push_isSet;
}

bool OAICollaborator_permissions::is_push_Valid() const{
    return m_push_isValid;
}

bool OAICollaborator_permissions::isTriage() const {
    return m_triage;
}
void OAICollaborator_permissions::setTriage(const bool &triage) {
    m_triage = triage;
    m_triage_isSet = true;
}

bool OAICollaborator_permissions::is_triage_Set() const{
    return m_triage_isSet;
}

bool OAICollaborator_permissions::is_triage_Valid() const{
    return m_triage_isValid;
}

bool OAICollaborator_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaborator_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_isValid && m_pull_isValid && m_push_isValid && true;
}

} // namespace OpenAPI
