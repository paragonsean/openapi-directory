/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_payload_pages_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_payload_pages_inner::OAIEvent_payload_pages_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_payload_pages_inner::OAIEvent_payload_pages_inner() {
    this->initializeModel();
}

OAIEvent_payload_pages_inner::~OAIEvent_payload_pages_inner() {}

void OAIEvent_payload_pages_inner::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_page_name_isSet = false;
    m_page_name_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEvent_payload_pages_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_payload_pages_inner::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_page_name_isValid = ::OpenAPI::fromJsonValue(m_page_name, json[QString("page_name")]);
    m_page_name_isSet = !json[QString("page_name")].isNull() && m_page_name_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEvent_payload_pages_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_payload_pages_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_page_name_isSet) {
        obj.insert(QString("page_name"), ::OpenAPI::toJsonValue(m_page_name));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIEvent_payload_pages_inner::getAction() const {
    return m_action;
}
void OAIEvent_payload_pages_inner::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIEvent_payload_pages_inner::is_action_Set() const{
    return m_action_isSet;
}

bool OAIEvent_payload_pages_inner::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIEvent_payload_pages_inner::getHtmlUrl() const {
    return m_html_url;
}
void OAIEvent_payload_pages_inner::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIEvent_payload_pages_inner::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIEvent_payload_pages_inner::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIEvent_payload_pages_inner::getPageName() const {
    return m_page_name;
}
void OAIEvent_payload_pages_inner::setPageName(const QString &page_name) {
    m_page_name = page_name;
    m_page_name_isSet = true;
}

bool OAIEvent_payload_pages_inner::is_page_name_Set() const{
    return m_page_name_isSet;
}

bool OAIEvent_payload_pages_inner::is_page_name_Valid() const{
    return m_page_name_isValid;
}

QString OAIEvent_payload_pages_inner::getSha() const {
    return m_sha;
}
void OAIEvent_payload_pages_inner::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIEvent_payload_pages_inner::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIEvent_payload_pages_inner::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAIEvent_payload_pages_inner::getSummary() const {
    return m_summary;
}
void OAIEvent_payload_pages_inner::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIEvent_payload_pages_inner::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIEvent_payload_pages_inner::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIEvent_payload_pages_inner::getTitle() const {
    return m_title;
}
void OAIEvent_payload_pages_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEvent_payload_pages_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEvent_payload_pages_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEvent_payload_pages_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_payload_pages_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
