/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_pull_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_pull_request::OAIIssue_pull_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_pull_request::OAIIssue_pull_request() {
    this->initializeModel();
}

OAIIssue_pull_request::~OAIIssue_pull_request() {}

void OAIIssue_pull_request::initializeModel() {

    m_diff_url_isSet = false;
    m_diff_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_merged_at_isSet = false;
    m_merged_at_isValid = false;

    m_patch_url_isSet = false;
    m_patch_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIIssue_pull_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_pull_request::fromJsonObject(QJsonObject json) {

    m_diff_url_isValid = ::OpenAPI::fromJsonValue(m_diff_url, json[QString("diff_url")]);
    m_diff_url_isSet = !json[QString("diff_url")].isNull() && m_diff_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_merged_at_isValid = ::OpenAPI::fromJsonValue(m_merged_at, json[QString("merged_at")]);
    m_merged_at_isSet = !json[QString("merged_at")].isNull() && m_merged_at_isValid;

    m_patch_url_isValid = ::OpenAPI::fromJsonValue(m_patch_url, json[QString("patch_url")]);
    m_patch_url_isSet = !json[QString("patch_url")].isNull() && m_patch_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIIssue_pull_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_pull_request::asJsonObject() const {
    QJsonObject obj;
    if (m_diff_url_isSet) {
        obj.insert(QString("diff_url"), ::OpenAPI::toJsonValue(m_diff_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_merged_at_isSet) {
        obj.insert(QString("merged_at"), ::OpenAPI::toJsonValue(m_merged_at));
    }
    if (m_patch_url_isSet) {
        obj.insert(QString("patch_url"), ::OpenAPI::toJsonValue(m_patch_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIIssue_pull_request::getDiffUrl() const {
    return m_diff_url;
}
void OAIIssue_pull_request::setDiffUrl(const QString &diff_url) {
    m_diff_url = diff_url;
    m_diff_url_isSet = true;
}

bool OAIIssue_pull_request::is_diff_url_Set() const{
    return m_diff_url_isSet;
}

bool OAIIssue_pull_request::is_diff_url_Valid() const{
    return m_diff_url_isValid;
}

QString OAIIssue_pull_request::getHtmlUrl() const {
    return m_html_url;
}
void OAIIssue_pull_request::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIIssue_pull_request::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIIssue_pull_request::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QDateTime OAIIssue_pull_request::getMergedAt() const {
    return m_merged_at;
}
void OAIIssue_pull_request::setMergedAt(const QDateTime &merged_at) {
    m_merged_at = merged_at;
    m_merged_at_isSet = true;
}

bool OAIIssue_pull_request::is_merged_at_Set() const{
    return m_merged_at_isSet;
}

bool OAIIssue_pull_request::is_merged_at_Valid() const{
    return m_merged_at_isValid;
}

QString OAIIssue_pull_request::getPatchUrl() const {
    return m_patch_url;
}
void OAIIssue_pull_request::setPatchUrl(const QString &patch_url) {
    m_patch_url = patch_url;
    m_patch_url_isSet = true;
}

bool OAIIssue_pull_request::is_patch_url_Set() const{
    return m_patch_url_isSet;
}

bool OAIIssue_pull_request::is_patch_url_Valid() const{
    return m_patch_url_isValid;
}

QString OAIIssue_pull_request::getUrl() const {
    return m_url;
}
void OAIIssue_pull_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIssue_pull_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIssue_pull_request::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIIssue_pull_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_diff_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_pull_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_diff_url_isValid && m_html_url_isValid && m_patch_url_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
