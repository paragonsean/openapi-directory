/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeed::OAIFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeed::OAIFeed() {
    this->initializeModel();
}

OAIFeed::~OAIFeed() {}

void OAIFeed::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_current_user_actor_url_isSet = false;
    m_current_user_actor_url_isValid = false;

    m_current_user_organization_url_isSet = false;
    m_current_user_organization_url_isValid = false;

    m_current_user_organization_urls_isSet = false;
    m_current_user_organization_urls_isValid = false;

    m_current_user_public_url_isSet = false;
    m_current_user_public_url_isValid = false;

    m_current_user_url_isSet = false;
    m_current_user_url_isValid = false;

    m_repository_discussions_isSet = false;
    m_repository_discussions_isValid = false;

    m_repository_discussions_category_isSet = false;
    m_repository_discussions_category_isValid = false;

    m_repository_discussions_category_url_isSet = false;
    m_repository_discussions_category_url_isValid = false;

    m_repository_discussions_url_isSet = false;
    m_repository_discussions_url_isValid = false;

    m_security_advisories_url_isSet = false;
    m_security_advisories_url_isValid = false;

    m_timeline_url_isSet = false;
    m_timeline_url_isValid = false;

    m_user_url_isSet = false;
    m_user_url_isValid = false;
}

void OAIFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeed::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_current_user_actor_url_isValid = ::OpenAPI::fromJsonValue(m_current_user_actor_url, json[QString("current_user_actor_url")]);
    m_current_user_actor_url_isSet = !json[QString("current_user_actor_url")].isNull() && m_current_user_actor_url_isValid;

    m_current_user_organization_url_isValid = ::OpenAPI::fromJsonValue(m_current_user_organization_url, json[QString("current_user_organization_url")]);
    m_current_user_organization_url_isSet = !json[QString("current_user_organization_url")].isNull() && m_current_user_organization_url_isValid;

    m_current_user_organization_urls_isValid = ::OpenAPI::fromJsonValue(m_current_user_organization_urls, json[QString("current_user_organization_urls")]);
    m_current_user_organization_urls_isSet = !json[QString("current_user_organization_urls")].isNull() && m_current_user_organization_urls_isValid;

    m_current_user_public_url_isValid = ::OpenAPI::fromJsonValue(m_current_user_public_url, json[QString("current_user_public_url")]);
    m_current_user_public_url_isSet = !json[QString("current_user_public_url")].isNull() && m_current_user_public_url_isValid;

    m_current_user_url_isValid = ::OpenAPI::fromJsonValue(m_current_user_url, json[QString("current_user_url")]);
    m_current_user_url_isSet = !json[QString("current_user_url")].isNull() && m_current_user_url_isValid;

    m_repository_discussions_isValid = ::OpenAPI::fromJsonValue(m_repository_discussions, json[QString("repository_discussions")]);
    m_repository_discussions_isSet = !json[QString("repository_discussions")].isNull() && m_repository_discussions_isValid;

    m_repository_discussions_category_isValid = ::OpenAPI::fromJsonValue(m_repository_discussions_category, json[QString("repository_discussions_category")]);
    m_repository_discussions_category_isSet = !json[QString("repository_discussions_category")].isNull() && m_repository_discussions_category_isValid;

    m_repository_discussions_category_url_isValid = ::OpenAPI::fromJsonValue(m_repository_discussions_category_url, json[QString("repository_discussions_category_url")]);
    m_repository_discussions_category_url_isSet = !json[QString("repository_discussions_category_url")].isNull() && m_repository_discussions_category_url_isValid;

    m_repository_discussions_url_isValid = ::OpenAPI::fromJsonValue(m_repository_discussions_url, json[QString("repository_discussions_url")]);
    m_repository_discussions_url_isSet = !json[QString("repository_discussions_url")].isNull() && m_repository_discussions_url_isValid;

    m_security_advisories_url_isValid = ::OpenAPI::fromJsonValue(m_security_advisories_url, json[QString("security_advisories_url")]);
    m_security_advisories_url_isSet = !json[QString("security_advisories_url")].isNull() && m_security_advisories_url_isValid;

    m_timeline_url_isValid = ::OpenAPI::fromJsonValue(m_timeline_url, json[QString("timeline_url")]);
    m_timeline_url_isSet = !json[QString("timeline_url")].isNull() && m_timeline_url_isValid;

    m_user_url_isValid = ::OpenAPI::fromJsonValue(m_user_url, json[QString("user_url")]);
    m_user_url_isSet = !json[QString("user_url")].isNull() && m_user_url_isValid;
}

QString OAIFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeed::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_current_user_actor_url_isSet) {
        obj.insert(QString("current_user_actor_url"), ::OpenAPI::toJsonValue(m_current_user_actor_url));
    }
    if (m_current_user_organization_url_isSet) {
        obj.insert(QString("current_user_organization_url"), ::OpenAPI::toJsonValue(m_current_user_organization_url));
    }
    if (m_current_user_organization_urls.size() > 0) {
        obj.insert(QString("current_user_organization_urls"), ::OpenAPI::toJsonValue(m_current_user_organization_urls));
    }
    if (m_current_user_public_url_isSet) {
        obj.insert(QString("current_user_public_url"), ::OpenAPI::toJsonValue(m_current_user_public_url));
    }
    if (m_current_user_url_isSet) {
        obj.insert(QString("current_user_url"), ::OpenAPI::toJsonValue(m_current_user_url));
    }
    if (m_repository_discussions.isSet()) {
        obj.insert(QString("repository_discussions"), ::OpenAPI::toJsonValue(m_repository_discussions));
    }
    if (m_repository_discussions_category.isSet()) {
        obj.insert(QString("repository_discussions_category"), ::OpenAPI::toJsonValue(m_repository_discussions_category));
    }
    if (m_repository_discussions_category_url_isSet) {
        obj.insert(QString("repository_discussions_category_url"), ::OpenAPI::toJsonValue(m_repository_discussions_category_url));
    }
    if (m_repository_discussions_url_isSet) {
        obj.insert(QString("repository_discussions_url"), ::OpenAPI::toJsonValue(m_repository_discussions_url));
    }
    if (m_security_advisories_url_isSet) {
        obj.insert(QString("security_advisories_url"), ::OpenAPI::toJsonValue(m_security_advisories_url));
    }
    if (m_timeline_url_isSet) {
        obj.insert(QString("timeline_url"), ::OpenAPI::toJsonValue(m_timeline_url));
    }
    if (m_user_url_isSet) {
        obj.insert(QString("user_url"), ::OpenAPI::toJsonValue(m_user_url));
    }
    return obj;
}

OAIFeed__links OAIFeed::getLinks() const {
    return m__links;
}
void OAIFeed::setLinks(const OAIFeed__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIFeed::is__links_Set() const{
    return m__links_isSet;
}

bool OAIFeed::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIFeed::getCurrentUserActorUrl() const {
    return m_current_user_actor_url;
}
void OAIFeed::setCurrentUserActorUrl(const QString &current_user_actor_url) {
    m_current_user_actor_url = current_user_actor_url;
    m_current_user_actor_url_isSet = true;
}

bool OAIFeed::is_current_user_actor_url_Set() const{
    return m_current_user_actor_url_isSet;
}

bool OAIFeed::is_current_user_actor_url_Valid() const{
    return m_current_user_actor_url_isValid;
}

QString OAIFeed::getCurrentUserOrganizationUrl() const {
    return m_current_user_organization_url;
}
void OAIFeed::setCurrentUserOrganizationUrl(const QString &current_user_organization_url) {
    m_current_user_organization_url = current_user_organization_url;
    m_current_user_organization_url_isSet = true;
}

bool OAIFeed::is_current_user_organization_url_Set() const{
    return m_current_user_organization_url_isSet;
}

bool OAIFeed::is_current_user_organization_url_Valid() const{
    return m_current_user_organization_url_isValid;
}

QList<QString> OAIFeed::getCurrentUserOrganizationUrls() const {
    return m_current_user_organization_urls;
}
void OAIFeed::setCurrentUserOrganizationUrls(const QList<QString> &current_user_organization_urls) {
    m_current_user_organization_urls = current_user_organization_urls;
    m_current_user_organization_urls_isSet = true;
}

bool OAIFeed::is_current_user_organization_urls_Set() const{
    return m_current_user_organization_urls_isSet;
}

bool OAIFeed::is_current_user_organization_urls_Valid() const{
    return m_current_user_organization_urls_isValid;
}

QString OAIFeed::getCurrentUserPublicUrl() const {
    return m_current_user_public_url;
}
void OAIFeed::setCurrentUserPublicUrl(const QString &current_user_public_url) {
    m_current_user_public_url = current_user_public_url;
    m_current_user_public_url_isSet = true;
}

bool OAIFeed::is_current_user_public_url_Set() const{
    return m_current_user_public_url_isSet;
}

bool OAIFeed::is_current_user_public_url_Valid() const{
    return m_current_user_public_url_isValid;
}

QString OAIFeed::getCurrentUserUrl() const {
    return m_current_user_url;
}
void OAIFeed::setCurrentUserUrl(const QString &current_user_url) {
    m_current_user_url = current_user_url;
    m_current_user_url_isSet = true;
}

bool OAIFeed::is_current_user_url_Set() const{
    return m_current_user_url_isSet;
}

bool OAIFeed::is_current_user_url_Valid() const{
    return m_current_user_url_isValid;
}

OAILink_with_type OAIFeed::getRepositoryDiscussions() const {
    return m_repository_discussions;
}
void OAIFeed::setRepositoryDiscussions(const OAILink_with_type &repository_discussions) {
    m_repository_discussions = repository_discussions;
    m_repository_discussions_isSet = true;
}

bool OAIFeed::is_repository_discussions_Set() const{
    return m_repository_discussions_isSet;
}

bool OAIFeed::is_repository_discussions_Valid() const{
    return m_repository_discussions_isValid;
}

OAILink_with_type OAIFeed::getRepositoryDiscussionsCategory() const {
    return m_repository_discussions_category;
}
void OAIFeed::setRepositoryDiscussionsCategory(const OAILink_with_type &repository_discussions_category) {
    m_repository_discussions_category = repository_discussions_category;
    m_repository_discussions_category_isSet = true;
}

bool OAIFeed::is_repository_discussions_category_Set() const{
    return m_repository_discussions_category_isSet;
}

bool OAIFeed::is_repository_discussions_category_Valid() const{
    return m_repository_discussions_category_isValid;
}

QString OAIFeed::getRepositoryDiscussionsCategoryUrl() const {
    return m_repository_discussions_category_url;
}
void OAIFeed::setRepositoryDiscussionsCategoryUrl(const QString &repository_discussions_category_url) {
    m_repository_discussions_category_url = repository_discussions_category_url;
    m_repository_discussions_category_url_isSet = true;
}

bool OAIFeed::is_repository_discussions_category_url_Set() const{
    return m_repository_discussions_category_url_isSet;
}

bool OAIFeed::is_repository_discussions_category_url_Valid() const{
    return m_repository_discussions_category_url_isValid;
}

QString OAIFeed::getRepositoryDiscussionsUrl() const {
    return m_repository_discussions_url;
}
void OAIFeed::setRepositoryDiscussionsUrl(const QString &repository_discussions_url) {
    m_repository_discussions_url = repository_discussions_url;
    m_repository_discussions_url_isSet = true;
}

bool OAIFeed::is_repository_discussions_url_Set() const{
    return m_repository_discussions_url_isSet;
}

bool OAIFeed::is_repository_discussions_url_Valid() const{
    return m_repository_discussions_url_isValid;
}

QString OAIFeed::getSecurityAdvisoriesUrl() const {
    return m_security_advisories_url;
}
void OAIFeed::setSecurityAdvisoriesUrl(const QString &security_advisories_url) {
    m_security_advisories_url = security_advisories_url;
    m_security_advisories_url_isSet = true;
}

bool OAIFeed::is_security_advisories_url_Set() const{
    return m_security_advisories_url_isSet;
}

bool OAIFeed::is_security_advisories_url_Valid() const{
    return m_security_advisories_url_isValid;
}

QString OAIFeed::getTimelineUrl() const {
    return m_timeline_url;
}
void OAIFeed::setTimelineUrl(const QString &timeline_url) {
    m_timeline_url = timeline_url;
    m_timeline_url_isSet = true;
}

bool OAIFeed::is_timeline_url_Set() const{
    return m_timeline_url_isSet;
}

bool OAIFeed::is_timeline_url_Valid() const{
    return m_timeline_url_isValid;
}

QString OAIFeed::getUserUrl() const {
    return m_user_url;
}
void OAIFeed::setUserUrl(const QString &user_url) {
    m_user_url = user_url;
    m_user_url_isSet = true;
}

bool OAIFeed::is_user_url_Set() const{
    return m_user_url_isSet;
}

bool OAIFeed::is_user_url_Valid() const{
    return m_user_url_isValid;
}

bool OAIFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_actor_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_organization_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_organization_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_public_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_discussions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_discussions_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_discussions_category_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_discussions_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_advisories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_timeline_url_isValid && m_user_url_isValid && true;
}

} // namespace OpenAPI
