/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepos_create_dispatch_event_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepos_create_dispatch_event_request::OAIRepos_create_dispatch_event_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepos_create_dispatch_event_request::OAIRepos_create_dispatch_event_request() {
    this->initializeModel();
}

OAIRepos_create_dispatch_event_request::~OAIRepos_create_dispatch_event_request() {}

void OAIRepos_create_dispatch_event_request::initializeModel() {

    m_client_payload_isSet = false;
    m_client_payload_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;
}

void OAIRepos_create_dispatch_event_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepos_create_dispatch_event_request::fromJsonObject(QJsonObject json) {

    m_client_payload_isValid = ::OpenAPI::fromJsonValue(m_client_payload, json[QString("client_payload")]);
    m_client_payload_isSet = !json[QString("client_payload")].isNull() && m_client_payload_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;
}

QString OAIRepos_create_dispatch_event_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepos_create_dispatch_event_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_payload.size() > 0) {
        obj.insert(QString("client_payload"), ::OpenAPI::toJsonValue(m_client_payload));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIRepos_create_dispatch_event_request::getClientPayload() const {
    return m_client_payload;
}
void OAIRepos_create_dispatch_event_request::setClientPayload(const QMap<QString, QJsonValue> &client_payload) {
    m_client_payload = client_payload;
    m_client_payload_isSet = true;
}

bool OAIRepos_create_dispatch_event_request::is_client_payload_Set() const{
    return m_client_payload_isSet;
}

bool OAIRepos_create_dispatch_event_request::is_client_payload_Valid() const{
    return m_client_payload_isValid;
}

QString OAIRepos_create_dispatch_event_request::getEventType() const {
    return m_event_type;
}
void OAIRepos_create_dispatch_event_request::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIRepos_create_dispatch_event_request::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIRepos_create_dispatch_event_request::is_event_type_Valid() const{
    return m_event_type_isValid;
}

bool OAIRepos_create_dispatch_event_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepos_create_dispatch_event_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && true;
}

} // namespace OpenAPI
