/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization_secret_scanning_alert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization_secret_scanning_alert::OAIOrganization_secret_scanning_alert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization_secret_scanning_alert::OAIOrganization_secret_scanning_alert() {
    this->initializeModel();
}

OAIOrganization_secret_scanning_alert::~OAIOrganization_secret_scanning_alert() {}

void OAIOrganization_secret_scanning_alert::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_locations_url_isSet = false;
    m_locations_url_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_resolved_at_isSet = false;
    m_resolved_at_isValid = false;

    m_resolved_by_isSet = false;
    m_resolved_by_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_secret_type_isSet = false;
    m_secret_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIOrganization_secret_scanning_alert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization_secret_scanning_alert::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_locations_url_isValid = ::OpenAPI::fromJsonValue(m_locations_url, json[QString("locations_url")]);
    m_locations_url_isSet = !json[QString("locations_url")].isNull() && m_locations_url_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_resolved_at_isValid = ::OpenAPI::fromJsonValue(m_resolved_at, json[QString("resolved_at")]);
    m_resolved_at_isSet = !json[QString("resolved_at")].isNull() && m_resolved_at_isValid;

    m_resolved_by_isValid = ::OpenAPI::fromJsonValue(m_resolved_by, json[QString("resolved_by")]);
    m_resolved_by_isSet = !json[QString("resolved_by")].isNull() && m_resolved_by_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_secret_type_isValid = ::OpenAPI::fromJsonValue(m_secret_type, json[QString("secret_type")]);
    m_secret_type_isSet = !json[QString("secret_type")].isNull() && m_secret_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIOrganization_secret_scanning_alert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization_secret_scanning_alert::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_locations_url_isSet) {
        obj.insert(QString("locations_url"), ::OpenAPI::toJsonValue(m_locations_url));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_resolved_at_isSet) {
        obj.insert(QString("resolved_at"), ::OpenAPI::toJsonValue(m_resolved_at));
    }
    if (m_resolved_by.isSet()) {
        obj.insert(QString("resolved_by"), ::OpenAPI::toJsonValue(m_resolved_by));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_secret_type_isSet) {
        obj.insert(QString("secret_type"), ::OpenAPI::toJsonValue(m_secret_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIOrganization_secret_scanning_alert::getCreatedAt() const {
    return m_created_at;
}
void OAIOrganization_secret_scanning_alert::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOrganization_secret_scanning_alert::getHtmlUrl() const {
    return m_html_url;
}
void OAIOrganization_secret_scanning_alert::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIOrganization_secret_scanning_alert::getLocationsUrl() const {
    return m_locations_url;
}
void OAIOrganization_secret_scanning_alert::setLocationsUrl(const QString &locations_url) {
    m_locations_url = locations_url;
    m_locations_url_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_locations_url_Set() const{
    return m_locations_url_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_locations_url_Valid() const{
    return m_locations_url_isValid;
}

qint32 OAIOrganization_secret_scanning_alert::getNumber() const {
    return m_number;
}
void OAIOrganization_secret_scanning_alert::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_number_Set() const{
    return m_number_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_number_Valid() const{
    return m_number_isValid;
}

OAISimple_repository OAIOrganization_secret_scanning_alert::getRepository() const {
    return m_repository;
}
void OAIOrganization_secret_scanning_alert::setRepository(const OAISimple_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_repository_Valid() const{
    return m_repository_isValid;
}

OAISecret_scanning_alert_resolution OAIOrganization_secret_scanning_alert::getResolution() const {
    return m_resolution;
}
void OAIOrganization_secret_scanning_alert::setResolution(const OAISecret_scanning_alert_resolution &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QDateTime OAIOrganization_secret_scanning_alert::getResolvedAt() const {
    return m_resolved_at;
}
void OAIOrganization_secret_scanning_alert::setResolvedAt(const QDateTime &resolved_at) {
    m_resolved_at = resolved_at;
    m_resolved_at_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_resolved_at_Set() const{
    return m_resolved_at_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_resolved_at_Valid() const{
    return m_resolved_at_isValid;
}

OAINullable_simple_user OAIOrganization_secret_scanning_alert::getResolvedBy() const {
    return m_resolved_by;
}
void OAIOrganization_secret_scanning_alert::setResolvedBy(const OAINullable_simple_user &resolved_by) {
    m_resolved_by = resolved_by;
    m_resolved_by_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_resolved_by_Set() const{
    return m_resolved_by_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_resolved_by_Valid() const{
    return m_resolved_by_isValid;
}

QString OAIOrganization_secret_scanning_alert::getSecret() const {
    return m_secret;
}
void OAIOrganization_secret_scanning_alert::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIOrganization_secret_scanning_alert::getSecretType() const {
    return m_secret_type;
}
void OAIOrganization_secret_scanning_alert::setSecretType(const QString &secret_type) {
    m_secret_type = secret_type;
    m_secret_type_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_secret_type_Set() const{
    return m_secret_type_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_secret_type_Valid() const{
    return m_secret_type_isValid;
}

OAISecret_scanning_alert_state OAIOrganization_secret_scanning_alert::getState() const {
    return m_state;
}
void OAIOrganization_secret_scanning_alert::setState(const OAISecret_scanning_alert_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIOrganization_secret_scanning_alert::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOrganization_secret_scanning_alert::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIOrganization_secret_scanning_alert::getUrl() const {
    return m_url;
}
void OAIOrganization_secret_scanning_alert::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIOrganization_secret_scanning_alert::is_url_Set() const{
    return m_url_isSet;
}

bool OAIOrganization_secret_scanning_alert::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIOrganization_secret_scanning_alert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization_secret_scanning_alert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
