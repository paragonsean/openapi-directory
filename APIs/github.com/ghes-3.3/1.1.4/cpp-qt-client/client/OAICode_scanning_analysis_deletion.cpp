/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_analysis_deletion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_analysis_deletion::OAICode_scanning_analysis_deletion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_analysis_deletion::OAICode_scanning_analysis_deletion() {
    this->initializeModel();
}

OAICode_scanning_analysis_deletion::~OAICode_scanning_analysis_deletion() {}

void OAICode_scanning_analysis_deletion::initializeModel() {

    m_confirm_delete_url_isSet = false;
    m_confirm_delete_url_isValid = false;

    m_next_analysis_url_isSet = false;
    m_next_analysis_url_isValid = false;
}

void OAICode_scanning_analysis_deletion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_analysis_deletion::fromJsonObject(QJsonObject json) {

    m_confirm_delete_url_isValid = ::OpenAPI::fromJsonValue(m_confirm_delete_url, json[QString("confirm_delete_url")]);
    m_confirm_delete_url_isSet = !json[QString("confirm_delete_url")].isNull() && m_confirm_delete_url_isValid;

    m_next_analysis_url_isValid = ::OpenAPI::fromJsonValue(m_next_analysis_url, json[QString("next_analysis_url")]);
    m_next_analysis_url_isSet = !json[QString("next_analysis_url")].isNull() && m_next_analysis_url_isValid;
}

QString OAICode_scanning_analysis_deletion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_analysis_deletion::asJsonObject() const {
    QJsonObject obj;
    if (m_confirm_delete_url_isSet) {
        obj.insert(QString("confirm_delete_url"), ::OpenAPI::toJsonValue(m_confirm_delete_url));
    }
    if (m_next_analysis_url_isSet) {
        obj.insert(QString("next_analysis_url"), ::OpenAPI::toJsonValue(m_next_analysis_url));
    }
    return obj;
}

QString OAICode_scanning_analysis_deletion::getConfirmDeleteUrl() const {
    return m_confirm_delete_url;
}
void OAICode_scanning_analysis_deletion::setConfirmDeleteUrl(const QString &confirm_delete_url) {
    m_confirm_delete_url = confirm_delete_url;
    m_confirm_delete_url_isSet = true;
}

bool OAICode_scanning_analysis_deletion::is_confirm_delete_url_Set() const{
    return m_confirm_delete_url_isSet;
}

bool OAICode_scanning_analysis_deletion::is_confirm_delete_url_Valid() const{
    return m_confirm_delete_url_isValid;
}

QString OAICode_scanning_analysis_deletion::getNextAnalysisUrl() const {
    return m_next_analysis_url;
}
void OAICode_scanning_analysis_deletion::setNextAnalysisUrl(const QString &next_analysis_url) {
    m_next_analysis_url = next_analysis_url;
    m_next_analysis_url_isSet = true;
}

bool OAICode_scanning_analysis_deletion::is_next_analysis_url_Set() const{
    return m_next_analysis_url_isSet;
}

bool OAICode_scanning_analysis_deletion::is_next_analysis_url_Valid() const{
    return m_next_analysis_url_isValid;
}

bool OAICode_scanning_analysis_deletion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirm_delete_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_analysis_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_analysis_deletion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confirm_delete_url_isValid && m_next_analysis_url_isValid && true;
}

} // namespace OpenAPI
