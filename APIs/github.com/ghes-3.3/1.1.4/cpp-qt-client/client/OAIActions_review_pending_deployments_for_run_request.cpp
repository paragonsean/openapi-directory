/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActions_review_pending_deployments_for_run_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActions_review_pending_deployments_for_run_request::OAIActions_review_pending_deployments_for_run_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActions_review_pending_deployments_for_run_request::OAIActions_review_pending_deployments_for_run_request() {
    this->initializeModel();
}

OAIActions_review_pending_deployments_for_run_request::~OAIActions_review_pending_deployments_for_run_request() {}

void OAIActions_review_pending_deployments_for_run_request::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_environment_ids_isSet = false;
    m_environment_ids_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIActions_review_pending_deployments_for_run_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActions_review_pending_deployments_for_run_request::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_environment_ids_isValid = ::OpenAPI::fromJsonValue(m_environment_ids, json[QString("environment_ids")]);
    m_environment_ids_isSet = !json[QString("environment_ids")].isNull() && m_environment_ids_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIActions_review_pending_deployments_for_run_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActions_review_pending_deployments_for_run_request::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_environment_ids.size() > 0) {
        obj.insert(QString("environment_ids"), ::OpenAPI::toJsonValue(m_environment_ids));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIActions_review_pending_deployments_for_run_request::getComment() const {
    return m_comment;
}
void OAIActions_review_pending_deployments_for_run_request::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIActions_review_pending_deployments_for_run_request::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIActions_review_pending_deployments_for_run_request::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<qint32> OAIActions_review_pending_deployments_for_run_request::getEnvironmentIds() const {
    return m_environment_ids;
}
void OAIActions_review_pending_deployments_for_run_request::setEnvironmentIds(const QList<qint32> &environment_ids) {
    m_environment_ids = environment_ids;
    m_environment_ids_isSet = true;
}

bool OAIActions_review_pending_deployments_for_run_request::is_environment_ids_Set() const{
    return m_environment_ids_isSet;
}

bool OAIActions_review_pending_deployments_for_run_request::is_environment_ids_Valid() const{
    return m_environment_ids_isValid;
}

QString OAIActions_review_pending_deployments_for_run_request::getState() const {
    return m_state;
}
void OAIActions_review_pending_deployments_for_run_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIActions_review_pending_deployments_for_run_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAIActions_review_pending_deployments_for_run_request::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIActions_review_pending_deployments_for_run_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActions_review_pending_deployments_for_run_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_isValid && m_environment_ids_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
