/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifact::OAIArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifact::OAIArtifact() {
    this->initializeModel();
}

OAIArtifact::~OAIArtifact() {}

void OAIArtifact::initializeModel() {

    m_archive_download_url_isSet = false;
    m_archive_download_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_workflow_run_isSet = false;
    m_workflow_run_isValid = false;
}

void OAIArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifact::fromJsonObject(QJsonObject json) {

    m_archive_download_url_isValid = ::OpenAPI::fromJsonValue(m_archive_download_url, json[QString("archive_download_url")]);
    m_archive_download_url_isSet = !json[QString("archive_download_url")].isNull() && m_archive_download_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("size_in_bytes")]);
    m_size_in_bytes_isSet = !json[QString("size_in_bytes")].isNull() && m_size_in_bytes_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_workflow_run_isValid = ::OpenAPI::fromJsonValue(m_workflow_run, json[QString("workflow_run")]);
    m_workflow_run_isSet = !json[QString("workflow_run")].isNull() && m_workflow_run_isValid;
}

QString OAIArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_download_url_isSet) {
        obj.insert(QString("archive_download_url"), ::OpenAPI::toJsonValue(m_archive_download_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_size_in_bytes_isSet) {
        obj.insert(QString("size_in_bytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_workflow_run.isSet()) {
        obj.insert(QString("workflow_run"), ::OpenAPI::toJsonValue(m_workflow_run));
    }
    return obj;
}

QString OAIArtifact::getArchiveDownloadUrl() const {
    return m_archive_download_url;
}
void OAIArtifact::setArchiveDownloadUrl(const QString &archive_download_url) {
    m_archive_download_url = archive_download_url;
    m_archive_download_url_isSet = true;
}

bool OAIArtifact::is_archive_download_url_Set() const{
    return m_archive_download_url_isSet;
}

bool OAIArtifact::is_archive_download_url_Valid() const{
    return m_archive_download_url_isValid;
}

QDateTime OAIArtifact::getCreatedAt() const {
    return m_created_at;
}
void OAIArtifact::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIArtifact::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIArtifact::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIArtifact::isExpired() const {
    return m_expired;
}
void OAIArtifact::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIArtifact::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIArtifact::is_expired_Valid() const{
    return m_expired_isValid;
}

QDateTime OAIArtifact::getExpiresAt() const {
    return m_expires_at;
}
void OAIArtifact::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIArtifact::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIArtifact::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

qint32 OAIArtifact::getId() const {
    return m_id;
}
void OAIArtifact::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArtifact::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArtifact::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIArtifact::getName() const {
    return m_name;
}
void OAIArtifact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArtifact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArtifact::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIArtifact::getNodeId() const {
    return m_node_id;
}
void OAIArtifact::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIArtifact::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIArtifact::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAIArtifact::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIArtifact::setSizeInBytes(const qint32 &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIArtifact::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIArtifact::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

QDateTime OAIArtifact::getUpdatedAt() const {
    return m_updated_at;
}
void OAIArtifact::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIArtifact::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIArtifact::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIArtifact::getUrl() const {
    return m_url;
}
void OAIArtifact::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArtifact::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArtifact::is_url_Valid() const{
    return m_url_isValid;
}

OAIArtifact_workflow_run OAIArtifact::getWorkflowRun() const {
    return m_workflow_run;
}
void OAIArtifact::setWorkflowRun(const OAIArtifact_workflow_run &workflow_run) {
    m_workflow_run = workflow_run;
    m_workflow_run_isSet = true;
}

bool OAIArtifact::is_workflow_run_Set() const{
    return m_workflow_run_isSet;
}

bool OAIArtifact::is_workflow_run_Valid() const{
    return m_workflow_run_isValid;
}

bool OAIArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_run.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_archive_download_url_isValid && m_created_at_isValid && m_expired_isValid && m_expires_at_isValid && m_id_isValid && m_name_isValid && m_node_id_isValid && m_size_in_bytes_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
