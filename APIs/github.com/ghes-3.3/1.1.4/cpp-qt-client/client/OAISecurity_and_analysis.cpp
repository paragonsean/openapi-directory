/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurity_and_analysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurity_and_analysis::OAISecurity_and_analysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurity_and_analysis::OAISecurity_and_analysis() {
    this->initializeModel();
}

OAISecurity_and_analysis::~OAISecurity_and_analysis() {}

void OAISecurity_and_analysis::initializeModel() {

    m_advanced_security_isSet = false;
    m_advanced_security_isValid = false;

    m_secret_scanning_isSet = false;
    m_secret_scanning_isValid = false;

    m_secret_scanning_push_protection_isSet = false;
    m_secret_scanning_push_protection_isValid = false;
}

void OAISecurity_and_analysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurity_and_analysis::fromJsonObject(QJsonObject json) {

    m_advanced_security_isValid = ::OpenAPI::fromJsonValue(m_advanced_security, json[QString("advanced_security")]);
    m_advanced_security_isSet = !json[QString("advanced_security")].isNull() && m_advanced_security_isValid;

    m_secret_scanning_isValid = ::OpenAPI::fromJsonValue(m_secret_scanning, json[QString("secret_scanning")]);
    m_secret_scanning_isSet = !json[QString("secret_scanning")].isNull() && m_secret_scanning_isValid;

    m_secret_scanning_push_protection_isValid = ::OpenAPI::fromJsonValue(m_secret_scanning_push_protection, json[QString("secret_scanning_push_protection")]);
    m_secret_scanning_push_protection_isSet = !json[QString("secret_scanning_push_protection")].isNull() && m_secret_scanning_push_protection_isValid;
}

QString OAISecurity_and_analysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurity_and_analysis::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_security.isSet()) {
        obj.insert(QString("advanced_security"), ::OpenAPI::toJsonValue(m_advanced_security));
    }
    if (m_secret_scanning.isSet()) {
        obj.insert(QString("secret_scanning"), ::OpenAPI::toJsonValue(m_secret_scanning));
    }
    if (m_secret_scanning_push_protection.isSet()) {
        obj.insert(QString("secret_scanning_push_protection"), ::OpenAPI::toJsonValue(m_secret_scanning_push_protection));
    }
    return obj;
}

OAISecurity_and_analysis_advanced_security OAISecurity_and_analysis::getAdvancedSecurity() const {
    return m_advanced_security;
}
void OAISecurity_and_analysis::setAdvancedSecurity(const OAISecurity_and_analysis_advanced_security &advanced_security) {
    m_advanced_security = advanced_security;
    m_advanced_security_isSet = true;
}

bool OAISecurity_and_analysis::is_advanced_security_Set() const{
    return m_advanced_security_isSet;
}

bool OAISecurity_and_analysis::is_advanced_security_Valid() const{
    return m_advanced_security_isValid;
}

OAISecurity_and_analysis_advanced_security OAISecurity_and_analysis::getSecretScanning() const {
    return m_secret_scanning;
}
void OAISecurity_and_analysis::setSecretScanning(const OAISecurity_and_analysis_advanced_security &secret_scanning) {
    m_secret_scanning = secret_scanning;
    m_secret_scanning_isSet = true;
}

bool OAISecurity_and_analysis::is_secret_scanning_Set() const{
    return m_secret_scanning_isSet;
}

bool OAISecurity_and_analysis::is_secret_scanning_Valid() const{
    return m_secret_scanning_isValid;
}

OAISecurity_and_analysis_advanced_security OAISecurity_and_analysis::getSecretScanningPushProtection() const {
    return m_secret_scanning_push_protection;
}
void OAISecurity_and_analysis::setSecretScanningPushProtection(const OAISecurity_and_analysis_advanced_security &secret_scanning_push_protection) {
    m_secret_scanning_push_protection = secret_scanning_push_protection;
    m_secret_scanning_push_protection_isSet = true;
}

bool OAISecurity_and_analysis::is_secret_scanning_push_protection_Set() const{
    return m_secret_scanning_push_protection_isSet;
}

bool OAISecurity_and_analysis::is_secret_scanning_push_protection_Valid() const{
    return m_secret_scanning_push_protection_isValid;
}

bool OAISecurity_and_analysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_security.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_scanning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_scanning_push_protection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurity_and_analysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
