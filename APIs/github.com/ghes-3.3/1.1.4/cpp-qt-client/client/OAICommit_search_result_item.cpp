/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommit_search_result_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommit_search_result_item::OAICommit_search_result_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommit_search_result_item::OAICommit_search_result_item() {
    this->initializeModel();
}

OAICommit_search_result_item::~OAICommit_search_result_item() {}

void OAICommit_search_result_item::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_comments_url_isSet = false;
    m_comments_url_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_committer_isSet = false;
    m_committer_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_text_matches_isSet = false;
    m_text_matches_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICommit_search_result_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommit_search_result_item::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_comments_url_isValid = ::OpenAPI::fromJsonValue(m_comments_url, json[QString("comments_url")]);
    m_comments_url_isSet = !json[QString("comments_url")].isNull() && m_comments_url_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_committer_isValid = ::OpenAPI::fromJsonValue(m_committer, json[QString("committer")]);
    m_committer_isSet = !json[QString("committer")].isNull() && m_committer_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_text_matches_isValid = ::OpenAPI::fromJsonValue(m_text_matches, json[QString("text_matches")]);
    m_text_matches_isSet = !json[QString("text_matches")].isNull() && m_text_matches_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICommit_search_result_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommit_search_result_item::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_comments_url_isSet) {
        obj.insert(QString("comments_url"), ::OpenAPI::toJsonValue(m_comments_url));
    }
    if (m_commit.isSet()) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_committer.isSet()) {
        obj.insert(QString("committer"), ::OpenAPI::toJsonValue(m_committer));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_text_matches.size() > 0) {
        obj.insert(QString("text_matches"), ::OpenAPI::toJsonValue(m_text_matches));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAINullable_simple_user OAICommit_search_result_item::getAuthor() const {
    return m_author;
}
void OAICommit_search_result_item::setAuthor(const OAINullable_simple_user &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICommit_search_result_item::is_author_Set() const{
    return m_author_isSet;
}

bool OAICommit_search_result_item::is_author_Valid() const{
    return m_author_isValid;
}

QString OAICommit_search_result_item::getCommentsUrl() const {
    return m_comments_url;
}
void OAICommit_search_result_item::setCommentsUrl(const QString &comments_url) {
    m_comments_url = comments_url;
    m_comments_url_isSet = true;
}

bool OAICommit_search_result_item::is_comments_url_Set() const{
    return m_comments_url_isSet;
}

bool OAICommit_search_result_item::is_comments_url_Valid() const{
    return m_comments_url_isValid;
}

OAICommit_search_result_item_commit OAICommit_search_result_item::getCommit() const {
    return m_commit;
}
void OAICommit_search_result_item::setCommit(const OAICommit_search_result_item_commit &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAICommit_search_result_item::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAICommit_search_result_item::is_commit_Valid() const{
    return m_commit_isValid;
}

OAINullable_git_user OAICommit_search_result_item::getCommitter() const {
    return m_committer;
}
void OAICommit_search_result_item::setCommitter(const OAINullable_git_user &committer) {
    m_committer = committer;
    m_committer_isSet = true;
}

bool OAICommit_search_result_item::is_committer_Set() const{
    return m_committer_isSet;
}

bool OAICommit_search_result_item::is_committer_Valid() const{
    return m_committer_isValid;
}

QString OAICommit_search_result_item::getHtmlUrl() const {
    return m_html_url;
}
void OAICommit_search_result_item::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICommit_search_result_item::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICommit_search_result_item::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAICommit_search_result_item::getNodeId() const {
    return m_node_id;
}
void OAICommit_search_result_item::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAICommit_search_result_item::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAICommit_search_result_item::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QList<OAICommit_search_result_item_parents_inner> OAICommit_search_result_item::getParents() const {
    return m_parents;
}
void OAICommit_search_result_item::setParents(const QList<OAICommit_search_result_item_parents_inner> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAICommit_search_result_item::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAICommit_search_result_item::is_parents_Valid() const{
    return m_parents_isValid;
}

OAIMinimal_repository OAICommit_search_result_item::getRepository() const {
    return m_repository;
}
void OAICommit_search_result_item::setRepository(const OAIMinimal_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICommit_search_result_item::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICommit_search_result_item::is_repository_Valid() const{
    return m_repository_isValid;
}

double OAICommit_search_result_item::getScore() const {
    return m_score;
}
void OAICommit_search_result_item::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAICommit_search_result_item::is_score_Set() const{
    return m_score_isSet;
}

bool OAICommit_search_result_item::is_score_Valid() const{
    return m_score_isValid;
}

QString OAICommit_search_result_item::getSha() const {
    return m_sha;
}
void OAICommit_search_result_item::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAICommit_search_result_item::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAICommit_search_result_item::is_sha_Valid() const{
    return m_sha_isValid;
}

QList<OAISearch_result_text_matches_inner> OAICommit_search_result_item::getTextMatches() const {
    return m_text_matches;
}
void OAICommit_search_result_item::setTextMatches(const QList<OAISearch_result_text_matches_inner> &text_matches) {
    m_text_matches = text_matches;
    m_text_matches_isSet = true;
}

bool OAICommit_search_result_item::is_text_matches_Set() const{
    return m_text_matches_isSet;
}

bool OAICommit_search_result_item::is_text_matches_Valid() const{
    return m_text_matches_isValid;
}

QString OAICommit_search_result_item::getUrl() const {
    return m_url;
}
void OAICommit_search_result_item::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICommit_search_result_item::is_url_Set() const{
    return m_url_isSet;
}

bool OAICommit_search_result_item::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICommit_search_result_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommit_search_result_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_author_isValid && m_comments_url_isValid && m_commit_isValid && m_committer_isValid && m_html_url_isValid && m_node_id_isValid && m_parents_isValid && m_repository_isValid && m_score_isValid && m_sha_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
