/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeed__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeed__links::OAIFeed__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeed__links::OAIFeed__links() {
    this->initializeModel();
}

OAIFeed__links::~OAIFeed__links() {}

void OAIFeed__links::initializeModel() {

    m_current_user_isSet = false;
    m_current_user_isValid = false;

    m_current_user_actor_isSet = false;
    m_current_user_actor_isValid = false;

    m_current_user_organization_isSet = false;
    m_current_user_organization_isValid = false;

    m_current_user_organizations_isSet = false;
    m_current_user_organizations_isValid = false;

    m_current_user_public_isSet = false;
    m_current_user_public_isValid = false;

    m_repository_discussions_isSet = false;
    m_repository_discussions_isValid = false;

    m_repository_discussions_category_isSet = false;
    m_repository_discussions_category_isValid = false;

    m_security_advisories_isSet = false;
    m_security_advisories_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIFeed__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeed__links::fromJsonObject(QJsonObject json) {

    m_current_user_isValid = ::OpenAPI::fromJsonValue(m_current_user, json[QString("current_user")]);
    m_current_user_isSet = !json[QString("current_user")].isNull() && m_current_user_isValid;

    m_current_user_actor_isValid = ::OpenAPI::fromJsonValue(m_current_user_actor, json[QString("current_user_actor")]);
    m_current_user_actor_isSet = !json[QString("current_user_actor")].isNull() && m_current_user_actor_isValid;

    m_current_user_organization_isValid = ::OpenAPI::fromJsonValue(m_current_user_organization, json[QString("current_user_organization")]);
    m_current_user_organization_isSet = !json[QString("current_user_organization")].isNull() && m_current_user_organization_isValid;

    m_current_user_organizations_isValid = ::OpenAPI::fromJsonValue(m_current_user_organizations, json[QString("current_user_organizations")]);
    m_current_user_organizations_isSet = !json[QString("current_user_organizations")].isNull() && m_current_user_organizations_isValid;

    m_current_user_public_isValid = ::OpenAPI::fromJsonValue(m_current_user_public, json[QString("current_user_public")]);
    m_current_user_public_isSet = !json[QString("current_user_public")].isNull() && m_current_user_public_isValid;

    m_repository_discussions_isValid = ::OpenAPI::fromJsonValue(m_repository_discussions, json[QString("repository_discussions")]);
    m_repository_discussions_isSet = !json[QString("repository_discussions")].isNull() && m_repository_discussions_isValid;

    m_repository_discussions_category_isValid = ::OpenAPI::fromJsonValue(m_repository_discussions_category, json[QString("repository_discussions_category")]);
    m_repository_discussions_category_isSet = !json[QString("repository_discussions_category")].isNull() && m_repository_discussions_category_isValid;

    m_security_advisories_isValid = ::OpenAPI::fromJsonValue(m_security_advisories, json[QString("security_advisories")]);
    m_security_advisories_isSet = !json[QString("security_advisories")].isNull() && m_security_advisories_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIFeed__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeed__links::asJsonObject() const {
    QJsonObject obj;
    if (m_current_user.isSet()) {
        obj.insert(QString("current_user"), ::OpenAPI::toJsonValue(m_current_user));
    }
    if (m_current_user_actor.isSet()) {
        obj.insert(QString("current_user_actor"), ::OpenAPI::toJsonValue(m_current_user_actor));
    }
    if (m_current_user_organization.isSet()) {
        obj.insert(QString("current_user_organization"), ::OpenAPI::toJsonValue(m_current_user_organization));
    }
    if (m_current_user_organizations.size() > 0) {
        obj.insert(QString("current_user_organizations"), ::OpenAPI::toJsonValue(m_current_user_organizations));
    }
    if (m_current_user_public.isSet()) {
        obj.insert(QString("current_user_public"), ::OpenAPI::toJsonValue(m_current_user_public));
    }
    if (m_repository_discussions.isSet()) {
        obj.insert(QString("repository_discussions"), ::OpenAPI::toJsonValue(m_repository_discussions));
    }
    if (m_repository_discussions_category.isSet()) {
        obj.insert(QString("repository_discussions_category"), ::OpenAPI::toJsonValue(m_repository_discussions_category));
    }
    if (m_security_advisories.isSet()) {
        obj.insert(QString("security_advisories"), ::OpenAPI::toJsonValue(m_security_advisories));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAILink_with_type OAIFeed__links::getCurrentUser() const {
    return m_current_user;
}
void OAIFeed__links::setCurrentUser(const OAILink_with_type &current_user) {
    m_current_user = current_user;
    m_current_user_isSet = true;
}

bool OAIFeed__links::is_current_user_Set() const{
    return m_current_user_isSet;
}

bool OAIFeed__links::is_current_user_Valid() const{
    return m_current_user_isValid;
}

OAILink_with_type OAIFeed__links::getCurrentUserActor() const {
    return m_current_user_actor;
}
void OAIFeed__links::setCurrentUserActor(const OAILink_with_type &current_user_actor) {
    m_current_user_actor = current_user_actor;
    m_current_user_actor_isSet = true;
}

bool OAIFeed__links::is_current_user_actor_Set() const{
    return m_current_user_actor_isSet;
}

bool OAIFeed__links::is_current_user_actor_Valid() const{
    return m_current_user_actor_isValid;
}

OAILink_with_type OAIFeed__links::getCurrentUserOrganization() const {
    return m_current_user_organization;
}
void OAIFeed__links::setCurrentUserOrganization(const OAILink_with_type &current_user_organization) {
    m_current_user_organization = current_user_organization;
    m_current_user_organization_isSet = true;
}

bool OAIFeed__links::is_current_user_organization_Set() const{
    return m_current_user_organization_isSet;
}

bool OAIFeed__links::is_current_user_organization_Valid() const{
    return m_current_user_organization_isValid;
}

QList<OAILink_with_type> OAIFeed__links::getCurrentUserOrganizations() const {
    return m_current_user_organizations;
}
void OAIFeed__links::setCurrentUserOrganizations(const QList<OAILink_with_type> &current_user_organizations) {
    m_current_user_organizations = current_user_organizations;
    m_current_user_organizations_isSet = true;
}

bool OAIFeed__links::is_current_user_organizations_Set() const{
    return m_current_user_organizations_isSet;
}

bool OAIFeed__links::is_current_user_organizations_Valid() const{
    return m_current_user_organizations_isValid;
}

OAILink_with_type OAIFeed__links::getCurrentUserPublic() const {
    return m_current_user_public;
}
void OAIFeed__links::setCurrentUserPublic(const OAILink_with_type &current_user_public) {
    m_current_user_public = current_user_public;
    m_current_user_public_isSet = true;
}

bool OAIFeed__links::is_current_user_public_Set() const{
    return m_current_user_public_isSet;
}

bool OAIFeed__links::is_current_user_public_Valid() const{
    return m_current_user_public_isValid;
}

OAILink_with_type OAIFeed__links::getRepositoryDiscussions() const {
    return m_repository_discussions;
}
void OAIFeed__links::setRepositoryDiscussions(const OAILink_with_type &repository_discussions) {
    m_repository_discussions = repository_discussions;
    m_repository_discussions_isSet = true;
}

bool OAIFeed__links::is_repository_discussions_Set() const{
    return m_repository_discussions_isSet;
}

bool OAIFeed__links::is_repository_discussions_Valid() const{
    return m_repository_discussions_isValid;
}

OAILink_with_type OAIFeed__links::getRepositoryDiscussionsCategory() const {
    return m_repository_discussions_category;
}
void OAIFeed__links::setRepositoryDiscussionsCategory(const OAILink_with_type &repository_discussions_category) {
    m_repository_discussions_category = repository_discussions_category;
    m_repository_discussions_category_isSet = true;
}

bool OAIFeed__links::is_repository_discussions_category_Set() const{
    return m_repository_discussions_category_isSet;
}

bool OAIFeed__links::is_repository_discussions_category_Valid() const{
    return m_repository_discussions_category_isValid;
}

OAILink_with_type OAIFeed__links::getSecurityAdvisories() const {
    return m_security_advisories;
}
void OAIFeed__links::setSecurityAdvisories(const OAILink_with_type &security_advisories) {
    m_security_advisories = security_advisories;
    m_security_advisories_isSet = true;
}

bool OAIFeed__links::is_security_advisories_Set() const{
    return m_security_advisories_isSet;
}

bool OAIFeed__links::is_security_advisories_Valid() const{
    return m_security_advisories_isValid;
}

OAILink_with_type OAIFeed__links::getTimeline() const {
    return m_timeline;
}
void OAIFeed__links::setTimeline(const OAILink_with_type &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAIFeed__links::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAIFeed__links::is_timeline_Valid() const{
    return m_timeline_isValid;
}

OAILink_with_type OAIFeed__links::getUser() const {
    return m_user;
}
void OAIFeed__links::setUser(const OAILink_with_type &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIFeed__links::is_user_Set() const{
    return m_user_isSet;
}

bool OAIFeed__links::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIFeed__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_public.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_discussions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_discussions_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_advisories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeed__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timeline_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
