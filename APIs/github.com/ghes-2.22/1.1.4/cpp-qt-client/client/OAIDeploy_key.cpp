/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploy_key.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploy_key::OAIDeploy_key(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploy_key::OAIDeploy_key() {
    this->initializeModel();
}

OAIDeploy_key::~OAIDeploy_key() {}

void OAIDeploy_key::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;
}

void OAIDeploy_key::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploy_key::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("read_only")]);
    m_read_only_isSet = !json[QString("read_only")].isNull() && m_read_only_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;
}

QString OAIDeploy_key::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploy_key::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("read_only"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    return obj;
}

QString OAIDeploy_key::getCreatedAt() const {
    return m_created_at;
}
void OAIDeploy_key::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeploy_key::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeploy_key::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIDeploy_key::getId() const {
    return m_id;
}
void OAIDeploy_key::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeploy_key::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeploy_key::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeploy_key::getKey() const {
    return m_key;
}
void OAIDeploy_key::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDeploy_key::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDeploy_key::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIDeploy_key::isReadOnly() const {
    return m_read_only;
}
void OAIDeploy_key::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIDeploy_key::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIDeploy_key::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIDeploy_key::getTitle() const {
    return m_title;
}
void OAIDeploy_key::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDeploy_key::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDeploy_key::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDeploy_key::getUrl() const {
    return m_url;
}
void OAIDeploy_key::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeploy_key::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeploy_key::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDeploy_key::isVerified() const {
    return m_verified;
}
void OAIDeploy_key::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIDeploy_key::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIDeploy_key::is_verified_Valid() const{
    return m_verified_isValid;
}

bool OAIDeploy_key::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploy_key::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_id_isValid && m_key_isValid && m_read_only_isValid && m_title_isValid && m_url_isValid && m_verified_isValid && true;
}

} // namespace OpenAPI
