/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHovercard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHovercard::OAIHovercard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHovercard::OAIHovercard() {
    this->initializeModel();
}

OAIHovercard::~OAIHovercard() {}

void OAIHovercard::initializeModel() {

    m_contexts_isSet = false;
    m_contexts_isValid = false;
}

void OAIHovercard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHovercard::fromJsonObject(QJsonObject json) {

    m_contexts_isValid = ::OpenAPI::fromJsonValue(m_contexts, json[QString("contexts")]);
    m_contexts_isSet = !json[QString("contexts")].isNull() && m_contexts_isValid;
}

QString OAIHovercard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHovercard::asJsonObject() const {
    QJsonObject obj;
    if (m_contexts.size() > 0) {
        obj.insert(QString("contexts"), ::OpenAPI::toJsonValue(m_contexts));
    }
    return obj;
}

QList<OAIHovercard_contexts_inner> OAIHovercard::getContexts() const {
    return m_contexts;
}
void OAIHovercard::setContexts(const QList<OAIHovercard_contexts_inner> &contexts) {
    m_contexts = contexts;
    m_contexts_isSet = true;
}

bool OAIHovercard::is_contexts_Set() const{
    return m_contexts_isSet;
}

bool OAIHovercard::is_contexts_Valid() const{
    return m_contexts_isValid;
}

bool OAIHovercard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHovercard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contexts_isValid && true;
}

} // namespace OpenAPI
