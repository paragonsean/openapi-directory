/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipation_stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipation_stats::OAIParticipation_stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipation_stats::OAIParticipation_stats() {
    this->initializeModel();
}

OAIParticipation_stats::~OAIParticipation_stats() {}

void OAIParticipation_stats::initializeModel() {

    m_all_isSet = false;
    m_all_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;
}

void OAIParticipation_stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipation_stats::fromJsonObject(QJsonObject json) {

    m_all_isValid = ::OpenAPI::fromJsonValue(m_all, json[QString("all")]);
    m_all_isSet = !json[QString("all")].isNull() && m_all_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;
}

QString OAIParticipation_stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipation_stats::asJsonObject() const {
    QJsonObject obj;
    if (m_all.size() > 0) {
        obj.insert(QString("all"), ::OpenAPI::toJsonValue(m_all));
    }
    if (m_owner.size() > 0) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    return obj;
}

QList<qint32> OAIParticipation_stats::getAll() const {
    return m_all;
}
void OAIParticipation_stats::setAll(const QList<qint32> &all) {
    m_all = all;
    m_all_isSet = true;
}

bool OAIParticipation_stats::is_all_Set() const{
    return m_all_isSet;
}

bool OAIParticipation_stats::is_all_Valid() const{
    return m_all_isValid;
}

QList<qint32> OAIParticipation_stats::getOwner() const {
    return m_owner;
}
void OAIParticipation_stats::setOwner(const QList<qint32> &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIParticipation_stats::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIParticipation_stats::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIParticipation_stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipation_stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_all_isValid && m_owner_isValid && true;
}

} // namespace OpenAPI
