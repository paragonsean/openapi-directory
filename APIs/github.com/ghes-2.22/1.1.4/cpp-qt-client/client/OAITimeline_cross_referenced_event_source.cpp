/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeline_cross_referenced_event_source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeline_cross_referenced_event_source::OAITimeline_cross_referenced_event_source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeline_cross_referenced_event_source::OAITimeline_cross_referenced_event_source() {
    this->initializeModel();
}

OAITimeline_cross_referenced_event_source::~OAITimeline_cross_referenced_event_source() {}

void OAITimeline_cross_referenced_event_source::initializeModel() {

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITimeline_cross_referenced_event_source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeline_cross_referenced_event_source::fromJsonObject(QJsonObject json) {

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITimeline_cross_referenced_event_source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeline_cross_referenced_event_source::asJsonObject() const {
    QJsonObject obj;
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIIssue OAITimeline_cross_referenced_event_source::getIssue() const {
    return m_issue;
}
void OAITimeline_cross_referenced_event_source::setIssue(const OAIIssue &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAITimeline_cross_referenced_event_source::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAITimeline_cross_referenced_event_source::is_issue_Valid() const{
    return m_issue_isValid;
}

QString OAITimeline_cross_referenced_event_source::getType() const {
    return m_type;
}
void OAITimeline_cross_referenced_event_source::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITimeline_cross_referenced_event_source::is_type_Set() const{
    return m_type_isSet;
}

bool OAITimeline_cross_referenced_event_source::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITimeline_cross_referenced_event_source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeline_cross_referenced_event_source::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
