/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck_run_output.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck_run_output::OAICheck_run_output(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck_run_output::OAICheck_run_output() {
    this->initializeModel();
}

OAICheck_run_output::~OAICheck_run_output() {}

void OAICheck_run_output::initializeModel() {

    m_annotations_count_isSet = false;
    m_annotations_count_isValid = false;

    m_annotations_url_isSet = false;
    m_annotations_url_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICheck_run_output::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck_run_output::fromJsonObject(QJsonObject json) {

    m_annotations_count_isValid = ::OpenAPI::fromJsonValue(m_annotations_count, json[QString("annotations_count")]);
    m_annotations_count_isSet = !json[QString("annotations_count")].isNull() && m_annotations_count_isValid;

    m_annotations_url_isValid = ::OpenAPI::fromJsonValue(m_annotations_url, json[QString("annotations_url")]);
    m_annotations_url_isSet = !json[QString("annotations_url")].isNull() && m_annotations_url_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICheck_run_output::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck_run_output::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations_count_isSet) {
        obj.insert(QString("annotations_count"), ::OpenAPI::toJsonValue(m_annotations_count));
    }
    if (m_annotations_url_isSet) {
        obj.insert(QString("annotations_url"), ::OpenAPI::toJsonValue(m_annotations_url));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAICheck_run_output::getAnnotationsCount() const {
    return m_annotations_count;
}
void OAICheck_run_output::setAnnotationsCount(const qint32 &annotations_count) {
    m_annotations_count = annotations_count;
    m_annotations_count_isSet = true;
}

bool OAICheck_run_output::is_annotations_count_Set() const{
    return m_annotations_count_isSet;
}

bool OAICheck_run_output::is_annotations_count_Valid() const{
    return m_annotations_count_isValid;
}

QString OAICheck_run_output::getAnnotationsUrl() const {
    return m_annotations_url;
}
void OAICheck_run_output::setAnnotationsUrl(const QString &annotations_url) {
    m_annotations_url = annotations_url;
    m_annotations_url_isSet = true;
}

bool OAICheck_run_output::is_annotations_url_Set() const{
    return m_annotations_url_isSet;
}

bool OAICheck_run_output::is_annotations_url_Valid() const{
    return m_annotations_url_isValid;
}

QString OAICheck_run_output::getSummary() const {
    return m_summary;
}
void OAICheck_run_output::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICheck_run_output::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICheck_run_output::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAICheck_run_output::getText() const {
    return m_text;
}
void OAICheck_run_output::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICheck_run_output::is_text_Set() const{
    return m_text_isSet;
}

bool OAICheck_run_output::is_text_Valid() const{
    return m_text_isValid;
}

QString OAICheck_run_output::getTitle() const {
    return m_title;
}
void OAICheck_run_output::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICheck_run_output::is_title_Set() const{
    return m_title_isSet;
}

bool OAICheck_run_output::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICheck_run_output::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck_run_output::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_annotations_count_isValid && m_annotations_url_isValid && m_summary_isValid && m_text_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
