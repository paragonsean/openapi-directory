/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunner_application.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunner_application::OAIRunner_application(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunner_application::OAIRunner_application() {
    this->initializeModel();
}

OAIRunner_application::~OAIRunner_application() {}

void OAIRunner_application::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_sha256_checksum_isSet = false;
    m_sha256_checksum_isValid = false;

    m_temp_download_token_isSet = false;
    m_temp_download_token_isValid = false;
}

void OAIRunner_application::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunner_application::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_sha256_checksum_isValid = ::OpenAPI::fromJsonValue(m_sha256_checksum, json[QString("sha256_checksum")]);
    m_sha256_checksum_isSet = !json[QString("sha256_checksum")].isNull() && m_sha256_checksum_isValid;

    m_temp_download_token_isValid = ::OpenAPI::fromJsonValue(m_temp_download_token, json[QString("temp_download_token")]);
    m_temp_download_token_isSet = !json[QString("temp_download_token")].isNull() && m_temp_download_token_isValid;
}

QString OAIRunner_application::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunner_application::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_sha256_checksum_isSet) {
        obj.insert(QString("sha256_checksum"), ::OpenAPI::toJsonValue(m_sha256_checksum));
    }
    if (m_temp_download_token_isSet) {
        obj.insert(QString("temp_download_token"), ::OpenAPI::toJsonValue(m_temp_download_token));
    }
    return obj;
}

QString OAIRunner_application::getArchitecture() const {
    return m_architecture;
}
void OAIRunner_application::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIRunner_application::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIRunner_application::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIRunner_application::getDownloadUrl() const {
    return m_download_url;
}
void OAIRunner_application::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIRunner_application::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIRunner_application::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIRunner_application::getFilename() const {
    return m_filename;
}
void OAIRunner_application::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIRunner_application::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIRunner_application::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIRunner_application::getOs() const {
    return m_os;
}
void OAIRunner_application::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIRunner_application::is_os_Set() const{
    return m_os_isSet;
}

bool OAIRunner_application::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIRunner_application::getSha256Checksum() const {
    return m_sha256_checksum;
}
void OAIRunner_application::setSha256Checksum(const QString &sha256_checksum) {
    m_sha256_checksum = sha256_checksum;
    m_sha256_checksum_isSet = true;
}

bool OAIRunner_application::is_sha256_checksum_Set() const{
    return m_sha256_checksum_isSet;
}

bool OAIRunner_application::is_sha256_checksum_Valid() const{
    return m_sha256_checksum_isValid;
}

QString OAIRunner_application::getTempDownloadToken() const {
    return m_temp_download_token;
}
void OAIRunner_application::setTempDownloadToken(const QString &temp_download_token) {
    m_temp_download_token = temp_download_token;
    m_temp_download_token_isSet = true;
}

bool OAIRunner_application::is_temp_download_token_Set() const{
    return m_temp_download_token_isSet;
}

bool OAIRunner_application::is_temp_download_token_Valid() const{
    return m_temp_download_token_isValid;
}

bool OAIRunner_application::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_download_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunner_application::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_architecture_isValid && m_download_url_isValid && m_filename_isValid && m_os_isValid && true;
}

} // namespace OpenAPI
