/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOauthAuthorizationsApi_H
#define OAI_OAIOauthAuthorizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication_grant.h"
#include "OAIAuthorization.h"
#include "OAIBasic_error.h"
#include "OAIOauth_authorizations_create_authorization_request.h"
#include "OAIOauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request.h"
#include "OAIOauth_authorizations_get_or_create_authorization_for_app_request.h"
#include "OAIOauth_authorizations_update_authorization_request.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOauthAuthorizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOauthAuthorizationsApi(const int timeOut = 0);
    ~OAIOauthAuthorizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_oauth_authorizations_create_authorization_request OAIOauth_authorizations_create_authorization_request [optional]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_createAuthorization(const ::OpenAPI::OptionalParam<OAIOauth_authorizations_create_authorization_request> &oai_oauth_authorizations_create_authorization_request = ::OpenAPI::OptionalParam<OAIOauth_authorizations_create_authorization_request>());

    /**
    * @param[in]  authorization_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_deleteAuthorization(const qint32 &authorization_id);

    /**
    * @param[in]  grant_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_deleteGrant(const qint32 &grant_id);

    /**
    * @param[in]  authorization_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_getAuthorization(const qint32 &authorization_id);

    /**
    * @param[in]  grant_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_getGrant(const qint32 &grant_id);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_oauth_authorizations_get_or_create_authorization_for_app_request OAIOauth_authorizations_get_or_create_authorization_for_app_request [required]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_getOrCreateAuthorizationForApp(const QString &client_id, const OAIOauth_authorizations_get_or_create_authorization_for_app_request &oai_oauth_authorizations_get_or_create_authorization_for_app_request);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  fingerprint QString [required]
    * @param[in]  oai_oauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request OAIOauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request [required]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprint(const QString &client_id, const QString &fingerprint, const OAIOauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request &oai_oauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request);

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  client_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_listAuthorizations(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  client_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_listGrants(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization_id qint32 [required]
    * @param[in]  oai_oauth_authorizations_update_authorization_request OAIOauth_authorizations_update_authorization_request [optional]
    */
    Q_DECL_DEPRECATED virtual void oauthAuthorizations_updateAuthorization(const qint32 &authorization_id, const ::OpenAPI::OptionalParam<OAIOauth_authorizations_update_authorization_request> &oai_oauth_authorizations_update_authorization_request = ::OpenAPI::OptionalParam<OAIOauth_authorizations_update_authorization_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void oauthAuthorizations_createAuthorizationCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_deleteAuthorizationCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_deleteGrantCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_getAuthorizationCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_getGrantCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_getOrCreateAuthorizationForAppCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_listAuthorizationsCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_listGrantsCallback(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_updateAuthorizationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void oauthAuthorizations_createAuthorizationSignal(OAIAuthorization summary);
    void oauthAuthorizations_deleteAuthorizationSignal();
    void oauthAuthorizations_deleteGrantSignal();
    void oauthAuthorizations_getAuthorizationSignal(OAIAuthorization summary);
    void oauthAuthorizations_getGrantSignal(OAIApplication_grant summary);
    void oauthAuthorizations_getOrCreateAuthorizationForAppSignal(OAIAuthorization summary);
    void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignal(OAIAuthorization summary);
    void oauthAuthorizations_listAuthorizationsSignal(QList<OAIAuthorization> summary);
    void oauthAuthorizations_listGrantsSignal(QList<OAIApplication_grant> summary);
    void oauthAuthorizations_updateAuthorizationSignal(OAIAuthorization summary);


    void oauthAuthorizations_createAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void oauthAuthorizations_deleteAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_deleteGrantSignalFull(OAIHttpRequestWorker *worker);
    void oauthAuthorizations_getAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void oauthAuthorizations_getGrantSignalFull(OAIHttpRequestWorker *worker, OAIApplication_grant summary);
    void oauthAuthorizations_getOrCreateAuthorizationForAppSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void oauthAuthorizations_listAuthorizationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAuthorization> summary);
    void oauthAuthorizations_listGrantsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication_grant> summary);
    void oauthAuthorizations_updateAuthorizationSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);

    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_createAuthorizationSignalError() instead")
    void oauthAuthorizations_createAuthorizationSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_createAuthorizationSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_deleteAuthorizationSignalError() instead")
    void oauthAuthorizations_deleteAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_deleteAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_deleteGrantSignalError() instead")
    void oauthAuthorizations_deleteGrantSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_deleteGrantSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getAuthorizationSignalError() instead")
    void oauthAuthorizations_getAuthorizationSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getAuthorizationSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getGrantSignalError() instead")
    void oauthAuthorizations_getGrantSignalE(OAIApplication_grant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getGrantSignalError(OAIApplication_grant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getOrCreateAuthorizationForAppSignalError() instead")
    void oauthAuthorizations_getOrCreateAuthorizationForAppSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getOrCreateAuthorizationForAppSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalError() instead")
    void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_listAuthorizationsSignalError() instead")
    void oauthAuthorizations_listAuthorizationsSignalE(QList<OAIAuthorization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_listAuthorizationsSignalError(QList<OAIAuthorization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_listGrantsSignalError() instead")
    void oauthAuthorizations_listGrantsSignalE(QList<OAIApplication_grant> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_listGrantsSignalError(QList<OAIApplication_grant> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_updateAuthorizationSignalError() instead")
    void oauthAuthorizations_updateAuthorizationSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_updateAuthorizationSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_createAuthorizationSignalErrorFull() instead")
    void oauthAuthorizations_createAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_createAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_deleteAuthorizationSignalErrorFull() instead")
    void oauthAuthorizations_deleteAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_deleteAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_deleteGrantSignalErrorFull() instead")
    void oauthAuthorizations_deleteGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_deleteGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getAuthorizationSignalErrorFull() instead")
    void oauthAuthorizations_getAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getGrantSignalErrorFull() instead")
    void oauthAuthorizations_getGrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getGrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getOrCreateAuthorizationForAppSignalErrorFull() instead")
    void oauthAuthorizations_getOrCreateAuthorizationForAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getOrCreateAuthorizationForAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalErrorFull() instead")
    void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_listAuthorizationsSignalErrorFull() instead")
    void oauthAuthorizations_listAuthorizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_listAuthorizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_listGrantsSignalErrorFull() instead")
    void oauthAuthorizations_listGrantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_listGrantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAuthorizations_updateAuthorizationSignalErrorFull() instead")
    void oauthAuthorizations_updateAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAuthorizations_updateAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
