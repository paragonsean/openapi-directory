/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_upload_sarif_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_upload_sarif_request::OAICode_scanning_upload_sarif_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_upload_sarif_request::OAICode_scanning_upload_sarif_request() {
    this->initializeModel();
}

OAICode_scanning_upload_sarif_request::~OAICode_scanning_upload_sarif_request() {}

void OAICode_scanning_upload_sarif_request::initializeModel() {

    m_checkout_uri_isSet = false;
    m_checkout_uri_isValid = false;

    m_commit_sha_isSet = false;
    m_commit_sha_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_sarif_isSet = false;
    m_sarif_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_tool_name_isSet = false;
    m_tool_name_isValid = false;
}

void OAICode_scanning_upload_sarif_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_upload_sarif_request::fromJsonObject(QJsonObject json) {

    m_checkout_uri_isValid = ::OpenAPI::fromJsonValue(m_checkout_uri, json[QString("checkout_uri")]);
    m_checkout_uri_isSet = !json[QString("checkout_uri")].isNull() && m_checkout_uri_isValid;

    m_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_commit_sha, json[QString("commit_sha")]);
    m_commit_sha_isSet = !json[QString("commit_sha")].isNull() && m_commit_sha_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_sarif_isValid = ::OpenAPI::fromJsonValue(m_sarif, json[QString("sarif")]);
    m_sarif_isSet = !json[QString("sarif")].isNull() && m_sarif_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_tool_name_isValid = ::OpenAPI::fromJsonValue(m_tool_name, json[QString("tool_name")]);
    m_tool_name_isSet = !json[QString("tool_name")].isNull() && m_tool_name_isValid;
}

QString OAICode_scanning_upload_sarif_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_upload_sarif_request::asJsonObject() const {
    QJsonObject obj;
    if (m_checkout_uri_isSet) {
        obj.insert(QString("checkout_uri"), ::OpenAPI::toJsonValue(m_checkout_uri));
    }
    if (m_commit_sha_isSet) {
        obj.insert(QString("commit_sha"), ::OpenAPI::toJsonValue(m_commit_sha));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_sarif_isSet) {
        obj.insert(QString("sarif"), ::OpenAPI::toJsonValue(m_sarif));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_tool_name_isSet) {
        obj.insert(QString("tool_name"), ::OpenAPI::toJsonValue(m_tool_name));
    }
    return obj;
}

QString OAICode_scanning_upload_sarif_request::getCheckoutUri() const {
    return m_checkout_uri;
}
void OAICode_scanning_upload_sarif_request::setCheckoutUri(const QString &checkout_uri) {
    m_checkout_uri = checkout_uri;
    m_checkout_uri_isSet = true;
}

bool OAICode_scanning_upload_sarif_request::is_checkout_uri_Set() const{
    return m_checkout_uri_isSet;
}

bool OAICode_scanning_upload_sarif_request::is_checkout_uri_Valid() const{
    return m_checkout_uri_isValid;
}

QString OAICode_scanning_upload_sarif_request::getCommitSha() const {
    return m_commit_sha;
}
void OAICode_scanning_upload_sarif_request::setCommitSha(const QString &commit_sha) {
    m_commit_sha = commit_sha;
    m_commit_sha_isSet = true;
}

bool OAICode_scanning_upload_sarif_request::is_commit_sha_Set() const{
    return m_commit_sha_isSet;
}

bool OAICode_scanning_upload_sarif_request::is_commit_sha_Valid() const{
    return m_commit_sha_isValid;
}

QString OAICode_scanning_upload_sarif_request::getRef() const {
    return m_ref;
}
void OAICode_scanning_upload_sarif_request::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAICode_scanning_upload_sarif_request::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAICode_scanning_upload_sarif_request::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAICode_scanning_upload_sarif_request::getSarif() const {
    return m_sarif;
}
void OAICode_scanning_upload_sarif_request::setSarif(const QString &sarif) {
    m_sarif = sarif;
    m_sarif_isSet = true;
}

bool OAICode_scanning_upload_sarif_request::is_sarif_Set() const{
    return m_sarif_isSet;
}

bool OAICode_scanning_upload_sarif_request::is_sarif_Valid() const{
    return m_sarif_isValid;
}

QDateTime OAICode_scanning_upload_sarif_request::getStartedAt() const {
    return m_started_at;
}
void OAICode_scanning_upload_sarif_request::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAICode_scanning_upload_sarif_request::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAICode_scanning_upload_sarif_request::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAICode_scanning_upload_sarif_request::getToolName() const {
    return m_tool_name;
}
void OAICode_scanning_upload_sarif_request::setToolName(const QString &tool_name) {
    m_tool_name = tool_name;
    m_tool_name_isSet = true;
}

bool OAICode_scanning_upload_sarif_request::is_tool_name_Set() const{
    return m_tool_name_isSet;
}

bool OAICode_scanning_upload_sarif_request::is_tool_name_Valid() const{
    return m_tool_name_isValid;
}

bool OAICode_scanning_upload_sarif_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkout_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sarif_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_upload_sarif_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commit_sha_isValid && m_ref_isValid && m_sarif_isValid && true;
}

} // namespace OpenAPI
