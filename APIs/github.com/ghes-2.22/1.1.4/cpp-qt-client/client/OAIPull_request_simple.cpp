/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPull_request_simple.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPull_request_simple::OAIPull_request_simple(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPull_request_simple::OAIPull_request_simple() {
    this->initializeModel();
}

OAIPull_request_simple::~OAIPull_request_simple() {}

void OAIPull_request_simple::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_active_lock_reason_isSet = false;
    m_active_lock_reason_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignees_isSet = false;
    m_assignees_isValid = false;

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_base_isSet = false;
    m_base_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_comments_url_isSet = false;
    m_comments_url_isValid = false;

    m_commits_url_isSet = false;
    m_commits_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_diff_url_isSet = false;
    m_diff_url_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_head_isSet = false;
    m_head_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_url_isSet = false;
    m_issue_url_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_merge_commit_sha_isSet = false;
    m_merge_commit_sha_isValid = false;

    m_merged_at_isSet = false;
    m_merged_at_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_patch_url_isSet = false;
    m_patch_url_isValid = false;

    m_requested_reviewers_isSet = false;
    m_requested_reviewers_isValid = false;

    m_requested_teams_isSet = false;
    m_requested_teams_isValid = false;

    m_review_comment_url_isSet = false;
    m_review_comment_url_isValid = false;

    m_review_comments_url_isSet = false;
    m_review_comments_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_statuses_url_isSet = false;
    m_statuses_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPull_request_simple::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPull_request_simple::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_active_lock_reason_isValid = ::OpenAPI::fromJsonValue(m_active_lock_reason, json[QString("active_lock_reason")]);
    m_active_lock_reason_isSet = !json[QString("active_lock_reason")].isNull() && m_active_lock_reason_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignees_isValid = ::OpenAPI::fromJsonValue(m_assignees, json[QString("assignees")]);
    m_assignees_isSet = !json[QString("assignees")].isNull() && m_assignees_isValid;

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_comments_url_isValid = ::OpenAPI::fromJsonValue(m_comments_url, json[QString("comments_url")]);
    m_comments_url_isSet = !json[QString("comments_url")].isNull() && m_comments_url_isValid;

    m_commits_url_isValid = ::OpenAPI::fromJsonValue(m_commits_url, json[QString("commits_url")]);
    m_commits_url_isSet = !json[QString("commits_url")].isNull() && m_commits_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_diff_url_isValid = ::OpenAPI::fromJsonValue(m_diff_url, json[QString("diff_url")]);
    m_diff_url_isSet = !json[QString("diff_url")].isNull() && m_diff_url_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_head_isValid = ::OpenAPI::fromJsonValue(m_head, json[QString("head")]);
    m_head_isSet = !json[QString("head")].isNull() && m_head_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_url_isValid = ::OpenAPI::fromJsonValue(m_issue_url, json[QString("issue_url")]);
    m_issue_url_isSet = !json[QString("issue_url")].isNull() && m_issue_url_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_merge_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_sha, json[QString("merge_commit_sha")]);
    m_merge_commit_sha_isSet = !json[QString("merge_commit_sha")].isNull() && m_merge_commit_sha_isValid;

    m_merged_at_isValid = ::OpenAPI::fromJsonValue(m_merged_at, json[QString("merged_at")]);
    m_merged_at_isSet = !json[QString("merged_at")].isNull() && m_merged_at_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_patch_url_isValid = ::OpenAPI::fromJsonValue(m_patch_url, json[QString("patch_url")]);
    m_patch_url_isSet = !json[QString("patch_url")].isNull() && m_patch_url_isValid;

    m_requested_reviewers_isValid = ::OpenAPI::fromJsonValue(m_requested_reviewers, json[QString("requested_reviewers")]);
    m_requested_reviewers_isSet = !json[QString("requested_reviewers")].isNull() && m_requested_reviewers_isValid;

    m_requested_teams_isValid = ::OpenAPI::fromJsonValue(m_requested_teams, json[QString("requested_teams")]);
    m_requested_teams_isSet = !json[QString("requested_teams")].isNull() && m_requested_teams_isValid;

    m_review_comment_url_isValid = ::OpenAPI::fromJsonValue(m_review_comment_url, json[QString("review_comment_url")]);
    m_review_comment_url_isSet = !json[QString("review_comment_url")].isNull() && m_review_comment_url_isValid;

    m_review_comments_url_isValid = ::OpenAPI::fromJsonValue(m_review_comments_url, json[QString("review_comments_url")]);
    m_review_comments_url_isSet = !json[QString("review_comments_url")].isNull() && m_review_comments_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_statuses_url_isValid = ::OpenAPI::fromJsonValue(m_statuses_url, json[QString("statuses_url")]);
    m_statuses_url_isSet = !json[QString("statuses_url")].isNull() && m_statuses_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPull_request_simple::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPull_request_simple::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_active_lock_reason_isSet) {
        obj.insert(QString("active_lock_reason"), ::OpenAPI::toJsonValue(m_active_lock_reason));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignees.size() > 0) {
        obj.insert(QString("assignees"), ::OpenAPI::toJsonValue(m_assignees));
    }
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_base.isSet()) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_comments_url_isSet) {
        obj.insert(QString("comments_url"), ::OpenAPI::toJsonValue(m_comments_url));
    }
    if (m_commits_url_isSet) {
        obj.insert(QString("commits_url"), ::OpenAPI::toJsonValue(m_commits_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_diff_url_isSet) {
        obj.insert(QString("diff_url"), ::OpenAPI::toJsonValue(m_diff_url));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_head.isSet()) {
        obj.insert(QString("head"), ::OpenAPI::toJsonValue(m_head));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_url_isSet) {
        obj.insert(QString("issue_url"), ::OpenAPI::toJsonValue(m_issue_url));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_merge_commit_sha_isSet) {
        obj.insert(QString("merge_commit_sha"), ::OpenAPI::toJsonValue(m_merge_commit_sha));
    }
    if (m_merged_at_isSet) {
        obj.insert(QString("merged_at"), ::OpenAPI::toJsonValue(m_merged_at));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_patch_url_isSet) {
        obj.insert(QString("patch_url"), ::OpenAPI::toJsonValue(m_patch_url));
    }
    if (m_requested_reviewers.size() > 0) {
        obj.insert(QString("requested_reviewers"), ::OpenAPI::toJsonValue(m_requested_reviewers));
    }
    if (m_requested_teams.size() > 0) {
        obj.insert(QString("requested_teams"), ::OpenAPI::toJsonValue(m_requested_teams));
    }
    if (m_review_comment_url_isSet) {
        obj.insert(QString("review_comment_url"), ::OpenAPI::toJsonValue(m_review_comment_url));
    }
    if (m_review_comments_url_isSet) {
        obj.insert(QString("review_comments_url"), ::OpenAPI::toJsonValue(m_review_comments_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_statuses_url_isSet) {
        obj.insert(QString("statuses_url"), ::OpenAPI::toJsonValue(m_statuses_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIPull_request__links OAIPull_request_simple::getLinks() const {
    return m__links;
}
void OAIPull_request_simple::setLinks(const OAIPull_request__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPull_request_simple::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPull_request_simple::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIPull_request_simple::getActiveLockReason() const {
    return m_active_lock_reason;
}
void OAIPull_request_simple::setActiveLockReason(const QString &active_lock_reason) {
    m_active_lock_reason = active_lock_reason;
    m_active_lock_reason_isSet = true;
}

bool OAIPull_request_simple::is_active_lock_reason_Set() const{
    return m_active_lock_reason_isSet;
}

bool OAIPull_request_simple::is_active_lock_reason_Valid() const{
    return m_active_lock_reason_isValid;
}

OAINullable_simple_user OAIPull_request_simple::getAssignee() const {
    return m_assignee;
}
void OAIPull_request_simple::setAssignee(const OAINullable_simple_user &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIPull_request_simple::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIPull_request_simple::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<OAISimple_user> OAIPull_request_simple::getAssignees() const {
    return m_assignees;
}
void OAIPull_request_simple::setAssignees(const QList<OAISimple_user> &assignees) {
    m_assignees = assignees;
    m_assignees_isSet = true;
}

bool OAIPull_request_simple::is_assignees_Set() const{
    return m_assignees_isSet;
}

bool OAIPull_request_simple::is_assignees_Valid() const{
    return m_assignees_isValid;
}

OAIAuthor_association OAIPull_request_simple::getAuthorAssociation() const {
    return m_author_association;
}
void OAIPull_request_simple::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAIPull_request_simple::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAIPull_request_simple::is_author_association_Valid() const{
    return m_author_association_isValid;
}

OAIPull_request_simple_base OAIPull_request_simple::getBase() const {
    return m_base;
}
void OAIPull_request_simple::setBase(const OAIPull_request_simple_base &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAIPull_request_simple::is_base_Set() const{
    return m_base_isSet;
}

bool OAIPull_request_simple::is_base_Valid() const{
    return m_base_isValid;
}

QString OAIPull_request_simple::getBody() const {
    return m_body;
}
void OAIPull_request_simple::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPull_request_simple::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPull_request_simple::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIPull_request_simple::getClosedAt() const {
    return m_closed_at;
}
void OAIPull_request_simple::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIPull_request_simple::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIPull_request_simple::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

QString OAIPull_request_simple::getCommentsUrl() const {
    return m_comments_url;
}
void OAIPull_request_simple::setCommentsUrl(const QString &comments_url) {
    m_comments_url = comments_url;
    m_comments_url_isSet = true;
}

bool OAIPull_request_simple::is_comments_url_Set() const{
    return m_comments_url_isSet;
}

bool OAIPull_request_simple::is_comments_url_Valid() const{
    return m_comments_url_isValid;
}

QString OAIPull_request_simple::getCommitsUrl() const {
    return m_commits_url;
}
void OAIPull_request_simple::setCommitsUrl(const QString &commits_url) {
    m_commits_url = commits_url;
    m_commits_url_isSet = true;
}

bool OAIPull_request_simple::is_commits_url_Set() const{
    return m_commits_url_isSet;
}

bool OAIPull_request_simple::is_commits_url_Valid() const{
    return m_commits_url_isValid;
}

QDateTime OAIPull_request_simple::getCreatedAt() const {
    return m_created_at;
}
void OAIPull_request_simple::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPull_request_simple::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPull_request_simple::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPull_request_simple::getDiffUrl() const {
    return m_diff_url;
}
void OAIPull_request_simple::setDiffUrl(const QString &diff_url) {
    m_diff_url = diff_url;
    m_diff_url_isSet = true;
}

bool OAIPull_request_simple::is_diff_url_Set() const{
    return m_diff_url_isSet;
}

bool OAIPull_request_simple::is_diff_url_Valid() const{
    return m_diff_url_isValid;
}

bool OAIPull_request_simple::isDraft() const {
    return m_draft;
}
void OAIPull_request_simple::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIPull_request_simple::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIPull_request_simple::is_draft_Valid() const{
    return m_draft_isValid;
}

OAIPull_request_simple_base OAIPull_request_simple::getHead() const {
    return m_head;
}
void OAIPull_request_simple::setHead(const OAIPull_request_simple_base &head) {
    m_head = head;
    m_head_isSet = true;
}

bool OAIPull_request_simple::is_head_Set() const{
    return m_head_isSet;
}

bool OAIPull_request_simple::is_head_Valid() const{
    return m_head_isValid;
}

QString OAIPull_request_simple::getHtmlUrl() const {
    return m_html_url;
}
void OAIPull_request_simple::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPull_request_simple::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPull_request_simple::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIPull_request_simple::getId() const {
    return m_id;
}
void OAIPull_request_simple::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPull_request_simple::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPull_request_simple::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPull_request_simple::getIssueUrl() const {
    return m_issue_url;
}
void OAIPull_request_simple::setIssueUrl(const QString &issue_url) {
    m_issue_url = issue_url;
    m_issue_url_isSet = true;
}

bool OAIPull_request_simple::is_issue_url_Set() const{
    return m_issue_url_isSet;
}

bool OAIPull_request_simple::is_issue_url_Valid() const{
    return m_issue_url_isValid;
}

QList<OAIPull_request_simple_labels_inner> OAIPull_request_simple::getLabels() const {
    return m_labels;
}
void OAIPull_request_simple::setLabels(const QList<OAIPull_request_simple_labels_inner> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPull_request_simple::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPull_request_simple::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIPull_request_simple::isLocked() const {
    return m_locked;
}
void OAIPull_request_simple::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIPull_request_simple::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIPull_request_simple::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIPull_request_simple::getMergeCommitSha() const {
    return m_merge_commit_sha;
}
void OAIPull_request_simple::setMergeCommitSha(const QString &merge_commit_sha) {
    m_merge_commit_sha = merge_commit_sha;
    m_merge_commit_sha_isSet = true;
}

bool OAIPull_request_simple::is_merge_commit_sha_Set() const{
    return m_merge_commit_sha_isSet;
}

bool OAIPull_request_simple::is_merge_commit_sha_Valid() const{
    return m_merge_commit_sha_isValid;
}

QDateTime OAIPull_request_simple::getMergedAt() const {
    return m_merged_at;
}
void OAIPull_request_simple::setMergedAt(const QDateTime &merged_at) {
    m_merged_at = merged_at;
    m_merged_at_isSet = true;
}

bool OAIPull_request_simple::is_merged_at_Set() const{
    return m_merged_at_isSet;
}

bool OAIPull_request_simple::is_merged_at_Valid() const{
    return m_merged_at_isValid;
}

OAINullable_milestone OAIPull_request_simple::getMilestone() const {
    return m_milestone;
}
void OAIPull_request_simple::setMilestone(const OAINullable_milestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIPull_request_simple::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIPull_request_simple::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAIPull_request_simple::getNodeId() const {
    return m_node_id;
}
void OAIPull_request_simple::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIPull_request_simple::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIPull_request_simple::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAIPull_request_simple::getNumber() const {
    return m_number;
}
void OAIPull_request_simple::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPull_request_simple::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPull_request_simple::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPull_request_simple::getPatchUrl() const {
    return m_patch_url;
}
void OAIPull_request_simple::setPatchUrl(const QString &patch_url) {
    m_patch_url = patch_url;
    m_patch_url_isSet = true;
}

bool OAIPull_request_simple::is_patch_url_Set() const{
    return m_patch_url_isSet;
}

bool OAIPull_request_simple::is_patch_url_Valid() const{
    return m_patch_url_isValid;
}

QList<OAISimple_user> OAIPull_request_simple::getRequestedReviewers() const {
    return m_requested_reviewers;
}
void OAIPull_request_simple::setRequestedReviewers(const QList<OAISimple_user> &requested_reviewers) {
    m_requested_reviewers = requested_reviewers;
    m_requested_reviewers_isSet = true;
}

bool OAIPull_request_simple::is_requested_reviewers_Set() const{
    return m_requested_reviewers_isSet;
}

bool OAIPull_request_simple::is_requested_reviewers_Valid() const{
    return m_requested_reviewers_isValid;
}

QList<OAITeam> OAIPull_request_simple::getRequestedTeams() const {
    return m_requested_teams;
}
void OAIPull_request_simple::setRequestedTeams(const QList<OAITeam> &requested_teams) {
    m_requested_teams = requested_teams;
    m_requested_teams_isSet = true;
}

bool OAIPull_request_simple::is_requested_teams_Set() const{
    return m_requested_teams_isSet;
}

bool OAIPull_request_simple::is_requested_teams_Valid() const{
    return m_requested_teams_isValid;
}

QString OAIPull_request_simple::getReviewCommentUrl() const {
    return m_review_comment_url;
}
void OAIPull_request_simple::setReviewCommentUrl(const QString &review_comment_url) {
    m_review_comment_url = review_comment_url;
    m_review_comment_url_isSet = true;
}

bool OAIPull_request_simple::is_review_comment_url_Set() const{
    return m_review_comment_url_isSet;
}

bool OAIPull_request_simple::is_review_comment_url_Valid() const{
    return m_review_comment_url_isValid;
}

QString OAIPull_request_simple::getReviewCommentsUrl() const {
    return m_review_comments_url;
}
void OAIPull_request_simple::setReviewCommentsUrl(const QString &review_comments_url) {
    m_review_comments_url = review_comments_url;
    m_review_comments_url_isSet = true;
}

bool OAIPull_request_simple::is_review_comments_url_Set() const{
    return m_review_comments_url_isSet;
}

bool OAIPull_request_simple::is_review_comments_url_Valid() const{
    return m_review_comments_url_isValid;
}

QString OAIPull_request_simple::getState() const {
    return m_state;
}
void OAIPull_request_simple::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPull_request_simple::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPull_request_simple::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPull_request_simple::getStatusesUrl() const {
    return m_statuses_url;
}
void OAIPull_request_simple::setStatusesUrl(const QString &statuses_url) {
    m_statuses_url = statuses_url;
    m_statuses_url_isSet = true;
}

bool OAIPull_request_simple::is_statuses_url_Set() const{
    return m_statuses_url_isSet;
}

bool OAIPull_request_simple::is_statuses_url_Valid() const{
    return m_statuses_url_isValid;
}

QString OAIPull_request_simple::getTitle() const {
    return m_title;
}
void OAIPull_request_simple::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPull_request_simple::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPull_request_simple::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIPull_request_simple::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPull_request_simple::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPull_request_simple::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPull_request_simple::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPull_request_simple::getUrl() const {
    return m_url;
}
void OAIPull_request_simple::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPull_request_simple::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPull_request_simple::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIPull_request_simple::getUser() const {
    return m_user;
}
void OAIPull_request_simple::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPull_request_simple::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPull_request_simple::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPull_request_simple::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_lock_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_reviewers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_comment_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPull_request_simple::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_assignee_isValid && m_author_association_isValid && m_base_isValid && m_body_isValid && m_closed_at_isValid && m_comments_url_isValid && m_commits_url_isValid && m_created_at_isValid && m_diff_url_isValid && m_head_isValid && m_html_url_isValid && m_id_isValid && m_issue_url_isValid && m_labels_isValid && m_locked_isValid && m_merge_commit_sha_isValid && m_merged_at_isValid && m_milestone_isValid && m_node_id_isValid && m_number_isValid && m_patch_url_isValid && m_review_comment_url_isValid && m_review_comments_url_isValid && m_state_isValid && m_statuses_url_isValid && m_title_isValid && m_updated_at_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
