/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGit_tree.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGit_tree::OAIGit_tree(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGit_tree::OAIGit_tree() {
    this->initializeModel();
}

OAIGit_tree::~OAIGit_tree() {}

void OAIGit_tree::initializeModel() {

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGit_tree::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGit_tree::fromJsonObject(QJsonObject json) {

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGit_tree::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGit_tree::asJsonObject() const {
    QJsonObject obj;
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_tree.size() > 0) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGit_tree::getSha() const {
    return m_sha;
}
void OAIGit_tree::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIGit_tree::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIGit_tree::is_sha_Valid() const{
    return m_sha_isValid;
}

QList<OAIGit_tree_tree_inner> OAIGit_tree::getTree() const {
    return m_tree;
}
void OAIGit_tree::setTree(const QList<OAIGit_tree_tree_inner> &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAIGit_tree::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAIGit_tree::is_tree_Valid() const{
    return m_tree_isValid;
}

bool OAIGit_tree::isTruncated() const {
    return m_truncated;
}
void OAIGit_tree::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIGit_tree::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIGit_tree::is_truncated_Valid() const{
    return m_truncated_isValid;
}

QString OAIGit_tree::getUrl() const {
    return m_url;
}
void OAIGit_tree::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGit_tree::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGit_tree::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGit_tree::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGit_tree::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sha_isValid && m_tree_isValid && m_truncated_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
