/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGit_create_commit_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGit_create_commit_request::OAIGit_create_commit_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGit_create_commit_request::OAIGit_create_commit_request() {
    this->initializeModel();
}

OAIGit_create_commit_request::~OAIGit_create_commit_request() {}

void OAIGit_create_commit_request::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_committer_isSet = false;
    m_committer_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;
}

void OAIGit_create_commit_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGit_create_commit_request::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_committer_isValid = ::OpenAPI::fromJsonValue(m_committer, json[QString("committer")]);
    m_committer_isSet = !json[QString("committer")].isNull() && m_committer_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;
}

QString OAIGit_create_commit_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGit_create_commit_request::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_committer.isSet()) {
        obj.insert(QString("committer"), ::OpenAPI::toJsonValue(m_committer));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_tree_isSet) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    return obj;
}

OAIGit_create_commit_request_author OAIGit_create_commit_request::getAuthor() const {
    return m_author;
}
void OAIGit_create_commit_request::setAuthor(const OAIGit_create_commit_request_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGit_create_commit_request::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGit_create_commit_request::is_author_Valid() const{
    return m_author_isValid;
}

OAIGit_create_commit_request_committer OAIGit_create_commit_request::getCommitter() const {
    return m_committer;
}
void OAIGit_create_commit_request::setCommitter(const OAIGit_create_commit_request_committer &committer) {
    m_committer = committer;
    m_committer_isSet = true;
}

bool OAIGit_create_commit_request::is_committer_Set() const{
    return m_committer_isSet;
}

bool OAIGit_create_commit_request::is_committer_Valid() const{
    return m_committer_isValid;
}

QString OAIGit_create_commit_request::getMessage() const {
    return m_message;
}
void OAIGit_create_commit_request::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGit_create_commit_request::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGit_create_commit_request::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIGit_create_commit_request::getParents() const {
    return m_parents;
}
void OAIGit_create_commit_request::setParents(const QList<QString> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAIGit_create_commit_request::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAIGit_create_commit_request::is_parents_Valid() const{
    return m_parents_isValid;
}

QString OAIGit_create_commit_request::getSignature() const {
    return m_signature;
}
void OAIGit_create_commit_request::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIGit_create_commit_request::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIGit_create_commit_request::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAIGit_create_commit_request::getTree() const {
    return m_tree;
}
void OAIGit_create_commit_request::setTree(const QString &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAIGit_create_commit_request::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAIGit_create_commit_request::is_tree_Valid() const{
    return m_tree_isValid;
}

bool OAIGit_create_commit_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGit_create_commit_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_tree_isValid && true;
}

} // namespace OpenAPI
