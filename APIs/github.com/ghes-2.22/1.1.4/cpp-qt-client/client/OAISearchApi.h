/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchApi_H
#define OAI_OAISearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity_list_public_events_503_response.h"
#include "OAIApps_get_installation_415_response.h"
#include "OAIBasic_error.h"
#include "OAISearch_code_200_response.h"
#include "OAISearch_commits_200_response.h"
#include "OAISearch_issues_and_pull_requests_200_response.h"
#include "OAISearch_labels_200_response.h"
#include "OAISearch_repos_200_response.h"
#include "OAISearch_topics_200_response.h"
#include "OAISearch_users_200_response.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchApi : public QObject {
    Q_OBJECT

public:
    OAISearchApi(const int timeOut = 0);
    ~OAISearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void search_code(const QString &q, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void search_commits(const QString &q, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void search_issuesAndPullRequests(const QString &q, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  repository_id qint32 [required]
    * @param[in]  q QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void search_labels(const qint32 &repository_id, const QString &q, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void search_repos(const QString &q, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void search_topics(const QString &q, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void search_users(const QString &q, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void search_codeCallback(OAIHttpRequestWorker *worker);
    void search_commitsCallback(OAIHttpRequestWorker *worker);
    void search_issuesAndPullRequestsCallback(OAIHttpRequestWorker *worker);
    void search_labelsCallback(OAIHttpRequestWorker *worker);
    void search_reposCallback(OAIHttpRequestWorker *worker);
    void search_topicsCallback(OAIHttpRequestWorker *worker);
    void search_usersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void search_codeSignal(OAISearch_code_200_response summary);
    void search_commitsSignal(OAISearch_commits_200_response summary);
    void search_issuesAndPullRequestsSignal(OAISearch_issues_and_pull_requests_200_response summary);
    void search_labelsSignal(OAISearch_labels_200_response summary);
    void search_reposSignal(OAISearch_repos_200_response summary);
    void search_topicsSignal(OAISearch_topics_200_response summary);
    void search_usersSignal(OAISearch_users_200_response summary);


    void search_codeSignalFull(OAIHttpRequestWorker *worker, OAISearch_code_200_response summary);
    void search_commitsSignalFull(OAIHttpRequestWorker *worker, OAISearch_commits_200_response summary);
    void search_issuesAndPullRequestsSignalFull(OAIHttpRequestWorker *worker, OAISearch_issues_and_pull_requests_200_response summary);
    void search_labelsSignalFull(OAIHttpRequestWorker *worker, OAISearch_labels_200_response summary);
    void search_reposSignalFull(OAIHttpRequestWorker *worker, OAISearch_repos_200_response summary);
    void search_topicsSignalFull(OAIHttpRequestWorker *worker, OAISearch_topics_200_response summary);
    void search_usersSignalFull(OAIHttpRequestWorker *worker, OAISearch_users_200_response summary);

    Q_DECL_DEPRECATED_X("Use search_codeSignalError() instead")
    void search_codeSignalE(OAISearch_code_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_codeSignalError(OAISearch_code_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_commitsSignalError() instead")
    void search_commitsSignalE(OAISearch_commits_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_commitsSignalError(OAISearch_commits_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_issuesAndPullRequestsSignalError() instead")
    void search_issuesAndPullRequestsSignalE(OAISearch_issues_and_pull_requests_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_issuesAndPullRequestsSignalError(OAISearch_issues_and_pull_requests_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_labelsSignalError() instead")
    void search_labelsSignalE(OAISearch_labels_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_labelsSignalError(OAISearch_labels_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_reposSignalError() instead")
    void search_reposSignalE(OAISearch_repos_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_reposSignalError(OAISearch_repos_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_topicsSignalError() instead")
    void search_topicsSignalE(OAISearch_topics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_topicsSignalError(OAISearch_topics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_usersSignalError() instead")
    void search_usersSignalE(OAISearch_users_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void search_usersSignalError(OAISearch_users_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use search_codeSignalErrorFull() instead")
    void search_codeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_codeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_commitsSignalErrorFull() instead")
    void search_commitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_commitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_issuesAndPullRequestsSignalErrorFull() instead")
    void search_issuesAndPullRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_issuesAndPullRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_labelsSignalErrorFull() instead")
    void search_labelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_labelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_reposSignalErrorFull() instead")
    void search_reposSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_reposSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_topicsSignalErrorFull() instead")
    void search_topicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_topicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use search_usersSignalErrorFull() instead")
    void search_usersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void search_usersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
