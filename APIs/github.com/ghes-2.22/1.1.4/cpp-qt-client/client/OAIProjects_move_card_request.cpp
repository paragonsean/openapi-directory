/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjects_move_card_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjects_move_card_request::OAIProjects_move_card_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjects_move_card_request::OAIProjects_move_card_request() {
    this->initializeModel();
}

OAIProjects_move_card_request::~OAIProjects_move_card_request() {}

void OAIProjects_move_card_request::initializeModel() {

    m_column_id_isSet = false;
    m_column_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;
}

void OAIProjects_move_card_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjects_move_card_request::fromJsonObject(QJsonObject json) {

    m_column_id_isValid = ::OpenAPI::fromJsonValue(m_column_id, json[QString("column_id")]);
    m_column_id_isSet = !json[QString("column_id")].isNull() && m_column_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;
}

QString OAIProjects_move_card_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjects_move_card_request::asJsonObject() const {
    QJsonObject obj;
    if (m_column_id_isSet) {
        obj.insert(QString("column_id"), ::OpenAPI::toJsonValue(m_column_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    return obj;
}

qint32 OAIProjects_move_card_request::getColumnId() const {
    return m_column_id;
}
void OAIProjects_move_card_request::setColumnId(const qint32 &column_id) {
    m_column_id = column_id;
    m_column_id_isSet = true;
}

bool OAIProjects_move_card_request::is_column_id_Set() const{
    return m_column_id_isSet;
}

bool OAIProjects_move_card_request::is_column_id_Valid() const{
    return m_column_id_isValid;
}

QString OAIProjects_move_card_request::getPosition() const {
    return m_position;
}
void OAIProjects_move_card_request::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIProjects_move_card_request::is_position_Set() const{
    return m_position_isSet;
}

bool OAIProjects_move_card_request::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIProjects_move_card_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjects_move_card_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_position_isValid && true;
}

} // namespace OpenAPI
