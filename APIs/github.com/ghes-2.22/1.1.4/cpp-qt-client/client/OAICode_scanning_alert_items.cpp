/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_alert_items.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_alert_items::OAICode_scanning_alert_items(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_alert_items::OAICode_scanning_alert_items() {
    this->initializeModel();
}

OAICode_scanning_alert_items::~OAICode_scanning_alert_items() {}

void OAICode_scanning_alert_items::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dismissed_at_isSet = false;
    m_dismissed_at_isValid = false;

    m_dismissed_by_isSet = false;
    m_dismissed_by_isValid = false;

    m_dismissed_reason_isSet = false;
    m_dismissed_reason_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tool_isSet = false;
    m_tool_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICode_scanning_alert_items::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_alert_items::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dismissed_at_isValid = ::OpenAPI::fromJsonValue(m_dismissed_at, json[QString("dismissed_at")]);
    m_dismissed_at_isSet = !json[QString("dismissed_at")].isNull() && m_dismissed_at_isValid;

    m_dismissed_by_isValid = ::OpenAPI::fromJsonValue(m_dismissed_by, json[QString("dismissed_by")]);
    m_dismissed_by_isSet = !json[QString("dismissed_by")].isNull() && m_dismissed_by_isValid;

    m_dismissed_reason_isValid = ::OpenAPI::fromJsonValue(m_dismissed_reason, json[QString("dismissed_reason")]);
    m_dismissed_reason_isSet = !json[QString("dismissed_reason")].isNull() && m_dismissed_reason_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tool_isValid = ::OpenAPI::fromJsonValue(m_tool, json[QString("tool")]);
    m_tool_isSet = !json[QString("tool")].isNull() && m_tool_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICode_scanning_alert_items::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_alert_items::asJsonObject() const {
    QJsonObject obj;
    if (m_classification.isSet()) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dismissed_at_isSet) {
        obj.insert(QString("dismissed_at"), ::OpenAPI::toJsonValue(m_dismissed_at));
    }
    if (m_dismissed_by.isSet()) {
        obj.insert(QString("dismissed_by"), ::OpenAPI::toJsonValue(m_dismissed_by));
    }
    if (m_dismissed_reason.isSet()) {
        obj.insert(QString("dismissed_reason"), ::OpenAPI::toJsonValue(m_dismissed_reason));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_instance.isSet()) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_rule.isSet()) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tool.isSet()) {
        obj.insert(QString("tool"), ::OpenAPI::toJsonValue(m_tool));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAICode_scanning_alert_classification OAICode_scanning_alert_items::getClassification() const {
    return m_classification;
}
void OAICode_scanning_alert_items::setClassification(const OAICode_scanning_alert_classification &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAICode_scanning_alert_items::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAICode_scanning_alert_items::is_classification_Valid() const{
    return m_classification_isValid;
}

QDateTime OAICode_scanning_alert_items::getCreatedAt() const {
    return m_created_at;
}
void OAICode_scanning_alert_items::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICode_scanning_alert_items::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICode_scanning_alert_items::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAICode_scanning_alert_items::getDismissedAt() const {
    return m_dismissed_at;
}
void OAICode_scanning_alert_items::setDismissedAt(const QDateTime &dismissed_at) {
    m_dismissed_at = dismissed_at;
    m_dismissed_at_isSet = true;
}

bool OAICode_scanning_alert_items::is_dismissed_at_Set() const{
    return m_dismissed_at_isSet;
}

bool OAICode_scanning_alert_items::is_dismissed_at_Valid() const{
    return m_dismissed_at_isValid;
}

OAINullable_simple_user OAICode_scanning_alert_items::getDismissedBy() const {
    return m_dismissed_by;
}
void OAICode_scanning_alert_items::setDismissedBy(const OAINullable_simple_user &dismissed_by) {
    m_dismissed_by = dismissed_by;
    m_dismissed_by_isSet = true;
}

bool OAICode_scanning_alert_items::is_dismissed_by_Set() const{
    return m_dismissed_by_isSet;
}

bool OAICode_scanning_alert_items::is_dismissed_by_Valid() const{
    return m_dismissed_by_isValid;
}

OAICode_scanning_alert_dismissed_reason OAICode_scanning_alert_items::getDismissedReason() const {
    return m_dismissed_reason;
}
void OAICode_scanning_alert_items::setDismissedReason(const OAICode_scanning_alert_dismissed_reason &dismissed_reason) {
    m_dismissed_reason = dismissed_reason;
    m_dismissed_reason_isSet = true;
}

bool OAICode_scanning_alert_items::is_dismissed_reason_Set() const{
    return m_dismissed_reason_isSet;
}

bool OAICode_scanning_alert_items::is_dismissed_reason_Valid() const{
    return m_dismissed_reason_isValid;
}

QString OAICode_scanning_alert_items::getHtmlUrl() const {
    return m_html_url;
}
void OAICode_scanning_alert_items::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICode_scanning_alert_items::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICode_scanning_alert_items::is_html_url_Valid() const{
    return m_html_url_isValid;
}

OAICode_scanning_alert_instance OAICode_scanning_alert_items::getInstance() const {
    return m_instance;
}
void OAICode_scanning_alert_items::setInstance(const OAICode_scanning_alert_instance &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAICode_scanning_alert_items::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAICode_scanning_alert_items::is_instance_Valid() const{
    return m_instance_isValid;
}

qint32 OAICode_scanning_alert_items::getNumber() const {
    return m_number;
}
void OAICode_scanning_alert_items::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICode_scanning_alert_items::is_number_Set() const{
    return m_number_isSet;
}

bool OAICode_scanning_alert_items::is_number_Valid() const{
    return m_number_isValid;
}

OAICode_scanning_alert_rule_summary OAICode_scanning_alert_items::getRule() const {
    return m_rule;
}
void OAICode_scanning_alert_items::setRule(const OAICode_scanning_alert_rule_summary &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAICode_scanning_alert_items::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAICode_scanning_alert_items::is_rule_Valid() const{
    return m_rule_isValid;
}

OAICode_scanning_alert_state OAICode_scanning_alert_items::getState() const {
    return m_state;
}
void OAICode_scanning_alert_items::setState(const OAICode_scanning_alert_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICode_scanning_alert_items::is_state_Set() const{
    return m_state_isSet;
}

bool OAICode_scanning_alert_items::is_state_Valid() const{
    return m_state_isValid;
}

OAICode_scanning_analysis_tool OAICode_scanning_alert_items::getTool() const {
    return m_tool;
}
void OAICode_scanning_alert_items::setTool(const OAICode_scanning_analysis_tool &tool) {
    m_tool = tool;
    m_tool_isSet = true;
}

bool OAICode_scanning_alert_items::is_tool_Set() const{
    return m_tool_isSet;
}

bool OAICode_scanning_alert_items::is_tool_Valid() const{
    return m_tool_isValid;
}

QString OAICode_scanning_alert_items::getUrl() const {
    return m_url;
}
void OAICode_scanning_alert_items::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICode_scanning_alert_items::is_url_Set() const{
    return m_url_isSet;
}

bool OAICode_scanning_alert_items::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICode_scanning_alert_items::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismissed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismissed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismissed_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_alert_items::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_classification_isValid && m_created_at_isValid && m_dismissed_at_isValid && m_dismissed_by_isValid && m_dismissed_reason_isValid && m_html_url_isValid && m_instance_isValid && m_number_isValid && m_rule_isValid && m_state_isValid && m_tool_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
