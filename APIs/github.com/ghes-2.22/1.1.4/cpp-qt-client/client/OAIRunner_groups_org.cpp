/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunner_groups_org.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunner_groups_org::OAIRunner_groups_org(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunner_groups_org::OAIRunner_groups_org() {
    this->initializeModel();
}

OAIRunner_groups_org::~OAIRunner_groups_org() {}

void OAIRunner_groups_org::initializeModel() {

    m_allows_public_repositories_isSet = false;
    m_allows_public_repositories_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inherited_isSet = false;
    m_inherited_isValid = false;

    m_inherited_allows_public_repositories_isSet = false;
    m_inherited_allows_public_repositories_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runners_url_isSet = false;
    m_runners_url_isValid = false;

    m_selected_repositories_url_isSet = false;
    m_selected_repositories_url_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIRunner_groups_org::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunner_groups_org::fromJsonObject(QJsonObject json) {

    m_allows_public_repositories_isValid = ::OpenAPI::fromJsonValue(m_allows_public_repositories, json[QString("allows_public_repositories")]);
    m_allows_public_repositories_isSet = !json[QString("allows_public_repositories")].isNull() && m_allows_public_repositories_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inherited_isValid = ::OpenAPI::fromJsonValue(m_inherited, json[QString("inherited")]);
    m_inherited_isSet = !json[QString("inherited")].isNull() && m_inherited_isValid;

    m_inherited_allows_public_repositories_isValid = ::OpenAPI::fromJsonValue(m_inherited_allows_public_repositories, json[QString("inherited_allows_public_repositories")]);
    m_inherited_allows_public_repositories_isSet = !json[QString("inherited_allows_public_repositories")].isNull() && m_inherited_allows_public_repositories_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runners_url_isValid = ::OpenAPI::fromJsonValue(m_runners_url, json[QString("runners_url")]);
    m_runners_url_isSet = !json[QString("runners_url")].isNull() && m_runners_url_isValid;

    m_selected_repositories_url_isValid = ::OpenAPI::fromJsonValue(m_selected_repositories_url, json[QString("selected_repositories_url")]);
    m_selected_repositories_url_isSet = !json[QString("selected_repositories_url")].isNull() && m_selected_repositories_url_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIRunner_groups_org::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunner_groups_org::asJsonObject() const {
    QJsonObject obj;
    if (m_allows_public_repositories_isSet) {
        obj.insert(QString("allows_public_repositories"), ::OpenAPI::toJsonValue(m_allows_public_repositories));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inherited_isSet) {
        obj.insert(QString("inherited"), ::OpenAPI::toJsonValue(m_inherited));
    }
    if (m_inherited_allows_public_repositories_isSet) {
        obj.insert(QString("inherited_allows_public_repositories"), ::OpenAPI::toJsonValue(m_inherited_allows_public_repositories));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runners_url_isSet) {
        obj.insert(QString("runners_url"), ::OpenAPI::toJsonValue(m_runners_url));
    }
    if (m_selected_repositories_url_isSet) {
        obj.insert(QString("selected_repositories_url"), ::OpenAPI::toJsonValue(m_selected_repositories_url));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

bool OAIRunner_groups_org::isAllowsPublicRepositories() const {
    return m_allows_public_repositories;
}
void OAIRunner_groups_org::setAllowsPublicRepositories(const bool &allows_public_repositories) {
    m_allows_public_repositories = allows_public_repositories;
    m_allows_public_repositories_isSet = true;
}

bool OAIRunner_groups_org::is_allows_public_repositories_Set() const{
    return m_allows_public_repositories_isSet;
}

bool OAIRunner_groups_org::is_allows_public_repositories_Valid() const{
    return m_allows_public_repositories_isValid;
}

bool OAIRunner_groups_org::isRDefault() const {
    return m_r_default;
}
void OAIRunner_groups_org::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIRunner_groups_org::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIRunner_groups_org::is_r_default_Valid() const{
    return m_r_default_isValid;
}

double OAIRunner_groups_org::getId() const {
    return m_id;
}
void OAIRunner_groups_org::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRunner_groups_org::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunner_groups_org::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRunner_groups_org::isInherited() const {
    return m_inherited;
}
void OAIRunner_groups_org::setInherited(const bool &inherited) {
    m_inherited = inherited;
    m_inherited_isSet = true;
}

bool OAIRunner_groups_org::is_inherited_Set() const{
    return m_inherited_isSet;
}

bool OAIRunner_groups_org::is_inherited_Valid() const{
    return m_inherited_isValid;
}

bool OAIRunner_groups_org::isInheritedAllowsPublicRepositories() const {
    return m_inherited_allows_public_repositories;
}
void OAIRunner_groups_org::setInheritedAllowsPublicRepositories(const bool &inherited_allows_public_repositories) {
    m_inherited_allows_public_repositories = inherited_allows_public_repositories;
    m_inherited_allows_public_repositories_isSet = true;
}

bool OAIRunner_groups_org::is_inherited_allows_public_repositories_Set() const{
    return m_inherited_allows_public_repositories_isSet;
}

bool OAIRunner_groups_org::is_inherited_allows_public_repositories_Valid() const{
    return m_inherited_allows_public_repositories_isValid;
}

QString OAIRunner_groups_org::getName() const {
    return m_name;
}
void OAIRunner_groups_org::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRunner_groups_org::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRunner_groups_org::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRunner_groups_org::getRunnersUrl() const {
    return m_runners_url;
}
void OAIRunner_groups_org::setRunnersUrl(const QString &runners_url) {
    m_runners_url = runners_url;
    m_runners_url_isSet = true;
}

bool OAIRunner_groups_org::is_runners_url_Set() const{
    return m_runners_url_isSet;
}

bool OAIRunner_groups_org::is_runners_url_Valid() const{
    return m_runners_url_isValid;
}

QString OAIRunner_groups_org::getSelectedRepositoriesUrl() const {
    return m_selected_repositories_url;
}
void OAIRunner_groups_org::setSelectedRepositoriesUrl(const QString &selected_repositories_url) {
    m_selected_repositories_url = selected_repositories_url;
    m_selected_repositories_url_isSet = true;
}

bool OAIRunner_groups_org::is_selected_repositories_url_Set() const{
    return m_selected_repositories_url_isSet;
}

bool OAIRunner_groups_org::is_selected_repositories_url_Valid() const{
    return m_selected_repositories_url_isValid;
}

QString OAIRunner_groups_org::getVisibility() const {
    return m_visibility;
}
void OAIRunner_groups_org::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIRunner_groups_org::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIRunner_groups_org::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIRunner_groups_org::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allows_public_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherited_allows_public_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runners_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_repositories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunner_groups_org::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allows_public_repositories_isValid && m_r_default_isValid && m_id_isValid && m_inherited_isValid && m_name_isValid && m_runners_url_isValid && m_visibility_isValid && true;
}

} // namespace OpenAPI
