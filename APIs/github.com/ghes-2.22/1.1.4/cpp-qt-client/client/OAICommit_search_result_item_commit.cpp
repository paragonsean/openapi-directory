/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommit_search_result_item_commit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommit_search_result_item_commit::OAICommit_search_result_item_commit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommit_search_result_item_commit::OAICommit_search_result_item_commit() {
    this->initializeModel();
}

OAICommit_search_result_item_commit::~OAICommit_search_result_item_commit() {}

void OAICommit_search_result_item_commit::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_committer_isSet = false;
    m_committer_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_verification_isSet = false;
    m_verification_isValid = false;
}

void OAICommit_search_result_item_commit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommit_search_result_item_commit::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("comment_count")]);
    m_comment_count_isSet = !json[QString("comment_count")].isNull() && m_comment_count_isValid;

    m_committer_isValid = ::OpenAPI::fromJsonValue(m_committer, json[QString("committer")]);
    m_committer_isSet = !json[QString("committer")].isNull() && m_committer_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_verification_isValid = ::OpenAPI::fromJsonValue(m_verification, json[QString("verification")]);
    m_verification_isSet = !json[QString("verification")].isNull() && m_verification_isValid;
}

QString OAICommit_search_result_item_commit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommit_search_result_item_commit::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("comment_count"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_committer.isSet()) {
        obj.insert(QString("committer"), ::OpenAPI::toJsonValue(m_committer));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_tree.isSet()) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_verification.isSet()) {
        obj.insert(QString("verification"), ::OpenAPI::toJsonValue(m_verification));
    }
    return obj;
}

OAICommit_search_result_item_commit_author OAICommit_search_result_item_commit::getAuthor() const {
    return m_author;
}
void OAICommit_search_result_item_commit::setAuthor(const OAICommit_search_result_item_commit_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICommit_search_result_item_commit::is_author_Set() const{
    return m_author_isSet;
}

bool OAICommit_search_result_item_commit::is_author_Valid() const{
    return m_author_isValid;
}

qint32 OAICommit_search_result_item_commit::getCommentCount() const {
    return m_comment_count;
}
void OAICommit_search_result_item_commit::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAICommit_search_result_item_commit::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAICommit_search_result_item_commit::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

OAINullable_git_user OAICommit_search_result_item_commit::getCommitter() const {
    return m_committer;
}
void OAICommit_search_result_item_commit::setCommitter(const OAINullable_git_user &committer) {
    m_committer = committer;
    m_committer_isSet = true;
}

bool OAICommit_search_result_item_commit::is_committer_Set() const{
    return m_committer_isSet;
}

bool OAICommit_search_result_item_commit::is_committer_Valid() const{
    return m_committer_isValid;
}

QString OAICommit_search_result_item_commit::getMessage() const {
    return m_message;
}
void OAICommit_search_result_item_commit::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICommit_search_result_item_commit::is_message_Set() const{
    return m_message_isSet;
}

bool OAICommit_search_result_item_commit::is_message_Valid() const{
    return m_message_isValid;
}

OAICommit_search_result_item_commit_tree OAICommit_search_result_item_commit::getTree() const {
    return m_tree;
}
void OAICommit_search_result_item_commit::setTree(const OAICommit_search_result_item_commit_tree &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAICommit_search_result_item_commit::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAICommit_search_result_item_commit::is_tree_Valid() const{
    return m_tree_isValid;
}

QString OAICommit_search_result_item_commit::getUrl() const {
    return m_url;
}
void OAICommit_search_result_item_commit::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICommit_search_result_item_commit::is_url_Set() const{
    return m_url_isSet;
}

bool OAICommit_search_result_item_commit::is_url_Valid() const{
    return m_url_isValid;
}

OAIVerification OAICommit_search_result_item_commit::getVerification() const {
    return m_verification;
}
void OAICommit_search_result_item_commit::setVerification(const OAIVerification &verification) {
    m_verification = verification;
    m_verification_isSet = true;
}

bool OAICommit_search_result_item_commit::is_verification_Set() const{
    return m_verification_isSet;
}

bool OAICommit_search_result_item_commit::is_verification_Valid() const{
    return m_verification_isValid;
}

bool OAICommit_search_result_item_commit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommit_search_result_item_commit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_author_isValid && m_comment_count_isValid && m_committer_isValid && m_message_isValid && m_tree_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
