/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MarkdownRenderRequest from '../model/MarkdownRenderRequest';

/**
* Markdown service.
* @module api/MarkdownApi
* @version 1.1.4
*/
export default class MarkdownApi {

    /**
    * Constructs a new MarkdownApi. 
    * @alias module:api/MarkdownApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the markdownRender operation.
     * @callback module:api/MarkdownApi~markdownRenderCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render a Markdown document
     * 
     * @param {module:model/MarkdownRenderRequest} markdownRenderRequest 
     * @param {module:api/MarkdownApi~markdownRenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    markdownRender(markdownRenderRequest, callback) {
      let postBody = markdownRenderRequest;
      // verify the required parameter 'markdownRenderRequest' is set
      if (markdownRenderRequest === undefined || markdownRenderRequest === null) {
        throw new Error("Missing the required parameter 'markdownRenderRequest' when calling markdownRender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/markdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markdownRenderRaw operation.
     * @callback module:api/MarkdownApi~markdownRenderRawCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render a Markdown document in raw mode
     * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @param {module:api/MarkdownApi~markdownRenderRawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    markdownRenderRaw(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain', 'text/x-markdown'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/markdown/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
