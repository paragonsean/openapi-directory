/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityListPublicEvents503Response from '../model/ActivityListPublicEvents503Response';
import BasicError from '../model/BasicError';
import CodeScanningAlert from '../model/CodeScanningAlert';
import CodeScanningAlertItems from '../model/CodeScanningAlertItems';
import CodeScanningAlertState from '../model/CodeScanningAlertState';
import CodeScanningAnalysis from '../model/CodeScanningAnalysis';
import CodeScanningSarifsReceipt from '../model/CodeScanningSarifsReceipt';
import CodeScanningUpdateAlertRequest from '../model/CodeScanningUpdateAlertRequest';
import CodeScanningUploadSarifRequest from '../model/CodeScanningUploadSarifRequest';

/**
* CodeScanning service.
* @module api/CodeScanningApi
* @version 1.1.4
*/
export default class CodeScanningApi {

    /**
    * Constructs a new CodeScanningApi. 
    * @alias module:api/CodeScanningApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the codeScanningGetAlert operation.
     * @callback module:api/CodeScanningApi~codeScanningGetAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodeScanningAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a code scanning alert
     * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.  **Deprecation notice**: The instances field is deprecated and will, in future, not be included in the response for this endpoint. From GitHub Enterprise Server 3.0, the same information can be retrieved via a GET request to the URL specified by `instances_url`, added in that release.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param {module:api/CodeScanningApi~codeScanningGetAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodeScanningAlert}
     */
    codeScanningGetAlert(owner, repo, alertNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codeScanningGetAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codeScanningGetAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling codeScanningGetAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodeScanningAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeScanningListAlertsForRepo operation.
     * @callback module:api/CodeScanningApi~codeScanningListAlertsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CodeScanningAlertItems>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List code scanning alerts for a repository
     * Lists all open code scanning alerts for the default branch (usually `main` or `master`). You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {String} [toolName] The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
     * @param {String} [toolGuid] The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {String} [ref] The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     * @param {module:model/CodeScanningAlertState} [state] Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
     * @param {module:api/CodeScanningApi~codeScanningListAlertsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CodeScanningAlertItems>}
     */
    codeScanningListAlertsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codeScanningListAlertsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codeScanningListAlertsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'tool_name': opts['toolName'],
        'tool_guid': opts['toolGuid'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'ref': opts['ref'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CodeScanningAlertItems];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/code-scanning/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeScanningListRecentAnalyses operation.
     * @callback module:api/CodeScanningApi~codeScanningListRecentAnalysesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CodeScanningAnalysis>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List code scanning analyses for a repository
     * Lists the details of all code scanning analyses for a repository, starting with the most recent. The response is paginated and you can use the `page` and `per_page` parameters to list the analyses you're interested in. By default 30 analyses are listed per page.  The `rules_count` field in the response give the number of rules that were run in the analysis. For very old analyses this data is not available, and `0` is returned in this field.  You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.  **Deprecation notice**: The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {String} [toolName] The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
     * @param {String} [toolGuid] The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {String} [ref] The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     * @param {String} [sarifId] Filter analyses belonging to the same SARIF upload.
     * @param {module:api/CodeScanningApi~codeScanningListRecentAnalysesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CodeScanningAnalysis>}
     */
    codeScanningListRecentAnalyses(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codeScanningListRecentAnalyses");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codeScanningListRecentAnalyses");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'tool_name': opts['toolName'],
        'tool_guid': opts['toolGuid'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'ref': opts['ref'],
        'sarif_id': opts['sarifId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CodeScanningAnalysis];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/code-scanning/analyses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeScanningUpdateAlert operation.
     * @callback module:api/CodeScanningApi~codeScanningUpdateAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodeScanningAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a code scanning alert
     * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param {module:model/CodeScanningUpdateAlertRequest} codeScanningUpdateAlertRequest 
     * @param {module:api/CodeScanningApi~codeScanningUpdateAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodeScanningAlert}
     */
    codeScanningUpdateAlert(owner, repo, alertNumber, codeScanningUpdateAlertRequest, callback) {
      let postBody = codeScanningUpdateAlertRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codeScanningUpdateAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codeScanningUpdateAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling codeScanningUpdateAlert");
      }
      // verify the required parameter 'codeScanningUpdateAlertRequest' is set
      if (codeScanningUpdateAlertRequest === undefined || codeScanningUpdateAlertRequest === null) {
        throw new Error("Missing the required parameter 'codeScanningUpdateAlertRequest' when calling codeScanningUpdateAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodeScanningAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codeScanningUploadSarif operation.
     * @callback module:api/CodeScanningApi~codeScanningUploadSarifCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodeScanningSarifsReceipt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an analysis as SARIF data
     * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.  There are two places where you can upload code scanning results.  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see \"[Triaging code scanning alerts in pull requests](/github/finding-security-vulnerabilities-and-errors-in-your-code/automatically-scanning-your-code-for-vulnerabilities-and-errors/triaging-code-scanning-alerts-in-pull-requests).\"  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see \"[Managing code scanning alerts for your repository](/github/finding-security-vulnerabilities-and-errors-in-your-code/automatically-scanning-your-code-for-vulnerabilities-and-errors/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\"  You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:  ``` gzip -c analysis-data.sarif | base64 -w0 ```  SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.  The `202 Accepted`, response includes an `id` value. You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint. For more information, see \"[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).\"
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:model/CodeScanningUploadSarifRequest} codeScanningUploadSarifRequest 
     * @param {module:api/CodeScanningApi~codeScanningUploadSarifCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodeScanningSarifsReceipt}
     */
    codeScanningUploadSarif(owner, repo, codeScanningUploadSarifRequest, callback) {
      let postBody = codeScanningUploadSarifRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codeScanningUploadSarif");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codeScanningUploadSarif");
      }
      // verify the required parameter 'codeScanningUploadSarifRequest' is set
      if (codeScanningUploadSarifRequest === undefined || codeScanningUploadSarifRequest === null) {
        throw new Error("Missing the required parameter 'codeScanningUploadSarifRequest' when calling codeScanningUploadSarif");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodeScanningSarifsReceipt;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/code-scanning/sarifs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
