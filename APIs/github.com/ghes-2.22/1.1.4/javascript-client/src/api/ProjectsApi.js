/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsGetInstallation415Response from '../model/AppsGetInstallation415Response';
import BasicError from '../model/BasicError';
import OrgsUpdate422Response from '../model/OrgsUpdate422Response';
import Project from '../model/Project';
import ProjectCard from '../model/ProjectCard';
import ProjectCollaboratorPermission from '../model/ProjectCollaboratorPermission';
import ProjectColumn from '../model/ProjectColumn';
import ProjectsAddCollaboratorRequest from '../model/ProjectsAddCollaboratorRequest';
import ProjectsCreateCardRequest from '../model/ProjectsCreateCardRequest';
import ProjectsCreateForAuthenticatedUserRequest from '../model/ProjectsCreateForAuthenticatedUserRequest';
import ProjectsCreateForOrgRequest from '../model/ProjectsCreateForOrgRequest';
import ProjectsDeleteCard403Response from '../model/ProjectsDeleteCard403Response';
import ProjectsMoveCard403Response from '../model/ProjectsMoveCard403Response';
import ProjectsMoveCard503Response from '../model/ProjectsMoveCard503Response';
import ProjectsMoveCardRequest from '../model/ProjectsMoveCardRequest';
import ProjectsMoveColumnRequest from '../model/ProjectsMoveColumnRequest';
import ProjectsUpdateCardRequest from '../model/ProjectsUpdateCardRequest';
import ProjectsUpdateColumnRequest from '../model/ProjectsUpdateColumnRequest';
import ProjectsUpdateRequest from '../model/ProjectsUpdateRequest';
import SimpleUser from '../model/SimpleUser';
import ValidationError from '../model/ValidationError';
import ValidationErrorSimple from '../model/ValidationErrorSimple';

/**
* Projects service.
* @module api/ProjectsApi
* @version 1.1.4
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectsAddCollaborator operation.
     * @callback module:api/ProjectsApi~projectsAddCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add project collaborator
     * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
     * @param {Number} projectId 
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectsAddCollaboratorRequest} [projectsAddCollaboratorRequest] 
     * @param {module:api/ProjectsApi~projectsAddCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsAddCollaborator(projectId, username, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectsAddCollaboratorRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsAddCollaborator");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectsAddCollaborator");
      }

      let pathParams = {
        'project_id': projectId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{project_id}/collaborators/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreateCard operation.
     * @callback module:api/ProjectsApi~projectsCreateCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project card
     * 
     * @param {Number} columnId column_id parameter
     * @param {module:model/ProjectsCreateCardRequest} projectsCreateCardRequest 
     * @param {module:api/ProjectsApi~projectsCreateCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCard}
     */
    projectsCreateCard(columnId, projectsCreateCardRequest, callback) {
      let postBody = projectsCreateCardRequest;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling projectsCreateCard");
      }
      // verify the required parameter 'projectsCreateCardRequest' is set
      if (projectsCreateCardRequest === undefined || projectsCreateCardRequest === null) {
        throw new Error("Missing the required parameter 'projectsCreateCardRequest' when calling projectsCreateCard");
      }

      let pathParams = {
        'column_id': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectCard;
      return this.apiClient.callApi(
        '/projects/columns/{column_id}/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreateColumn operation.
     * @callback module:api/ProjectsApi~projectsCreateColumnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectColumn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project column
     * 
     * @param {Number} projectId 
     * @param {module:model/ProjectsUpdateColumnRequest} projectsUpdateColumnRequest 
     * @param {module:api/ProjectsApi~projectsCreateColumnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectColumn}
     */
    projectsCreateColumn(projectId, projectsUpdateColumnRequest, callback) {
      let postBody = projectsUpdateColumnRequest;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsCreateColumn");
      }
      // verify the required parameter 'projectsUpdateColumnRequest' is set
      if (projectsUpdateColumnRequest === undefined || projectsUpdateColumnRequest === null) {
        throw new Error("Missing the required parameter 'projectsUpdateColumnRequest' when calling projectsCreateColumn");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectColumn;
      return this.apiClient.callApi(
        '/projects/{project_id}/columns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreateForAuthenticatedUser operation.
     * @callback module:api/ProjectsApi~projectsCreateForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user project
     * 
     * @param {module:model/ProjectsCreateForAuthenticatedUserRequest} projectsCreateForAuthenticatedUserRequest 
     * @param {module:api/ProjectsApi~projectsCreateForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsCreateForAuthenticatedUser(projectsCreateForAuthenticatedUserRequest, callback) {
      let postBody = projectsCreateForAuthenticatedUserRequest;
      // verify the required parameter 'projectsCreateForAuthenticatedUserRequest' is set
      if (projectsCreateForAuthenticatedUserRequest === undefined || projectsCreateForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'projectsCreateForAuthenticatedUserRequest' when calling projectsCreateForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/user/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreateForOrg operation.
     * @callback module:api/ProjectsApi~projectsCreateForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization project
     * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param {String} org 
     * @param {module:model/ProjectsCreateForOrgRequest} projectsCreateForOrgRequest 
     * @param {module:api/ProjectsApi~projectsCreateForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsCreateForOrg(org, projectsCreateForOrgRequest, callback) {
      let postBody = projectsCreateForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling projectsCreateForOrg");
      }
      // verify the required parameter 'projectsCreateForOrgRequest' is set
      if (projectsCreateForOrgRequest === undefined || projectsCreateForOrgRequest === null) {
        throw new Error("Missing the required parameter 'projectsCreateForOrgRequest' when calling projectsCreateForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/orgs/{org}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreateForRepo operation.
     * @callback module:api/ProjectsApi~projectsCreateForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository project
     * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:model/ProjectsCreateForOrgRequest} projectsCreateForOrgRequest 
     * @param {module:api/ProjectsApi~projectsCreateForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsCreateForRepo(owner, repo, projectsCreateForOrgRequest, callback) {
      let postBody = projectsCreateForOrgRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsCreateForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling projectsCreateForRepo");
      }
      // verify the required parameter 'projectsCreateForOrgRequest' is set
      if (projectsCreateForOrgRequest === undefined || projectsCreateForOrgRequest === null) {
        throw new Error("Missing the required parameter 'projectsCreateForOrgRequest' when calling projectsCreateForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDelete operation.
     * @callback module:api/ProjectsApi~projectsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
     * @param {Number} projectId 
     * @param {module:api/ProjectsApi~projectsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDelete(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsDelete");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeleteCard operation.
     * @callback module:api/ProjectsApi~projectsDeleteCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project card
     * 
     * @param {Number} cardId card_id parameter
     * @param {module:api/ProjectsApi~projectsDeleteCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDeleteCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling projectsDeleteCard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/columns/cards/{card_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDeleteColumn operation.
     * @callback module:api/ProjectsApi~projectsDeleteColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project column
     * 
     * @param {Number} columnId column_id parameter
     * @param {module:api/ProjectsApi~projectsDeleteColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDeleteColumn(columnId, callback) {
      let postBody = null;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling projectsDeleteColumn");
      }

      let pathParams = {
        'column_id': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/columns/{column_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGet operation.
     * @callback module:api/ProjectsApi~projectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project
     * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param {Number} projectId 
     * @param {module:api/ProjectsApi~projectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsGet(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsGet");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetCard operation.
     * @callback module:api/ProjectsApi~projectsGetCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project card
     * 
     * @param {Number} cardId card_id parameter
     * @param {module:api/ProjectsApi~projectsGetCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCard}
     */
    projectsGetCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling projectsGetCard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectCard;
      return this.apiClient.callApi(
        '/projects/columns/cards/{card_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetColumn operation.
     * @callback module:api/ProjectsApi~projectsGetColumnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectColumn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project column
     * 
     * @param {Number} columnId column_id parameter
     * @param {module:api/ProjectsApi~projectsGetColumnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectColumn}
     */
    projectsGetColumn(columnId, callback) {
      let postBody = null;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling projectsGetColumn");
      }

      let pathParams = {
        'column_id': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectColumn;
      return this.apiClient.callApi(
        '/projects/columns/{column_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetPermissionForUser operation.
     * @callback module:api/ProjectsApi~projectsGetPermissionForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCollaboratorPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project permission for a user
     * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
     * @param {Number} projectId 
     * @param {String} username 
     * @param {module:api/ProjectsApi~projectsGetPermissionForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCollaboratorPermission}
     */
    projectsGetPermissionForUser(projectId, username, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsGetPermissionForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectsGetPermissionForUser");
      }

      let pathParams = {
        'project_id': projectId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectCollaboratorPermission;
      return this.apiClient.callApi(
        '/projects/{project_id}/collaborators/{username}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsListCards operation.
     * @callback module:api/ProjectsApi~projectsListCardsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project cards
     * 
     * @param {Number} columnId column_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [archivedState = 'not_archived')] Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ProjectsApi~projectsListCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCard>}
     */
    projectsListCards(columnId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling projectsListCards");
      }

      let pathParams = {
        'column_id': columnId
      };
      let queryParams = {
        'archived_state': opts['archivedState'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectCard];
      return this.apiClient.callApi(
        '/projects/columns/{column_id}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsListCollaborators operation.
     * @callback module:api/ProjectsApi~projectsListCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project collaborators
     * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [affiliation = 'all')] Filters the collaborators by their affiliation. Can be one of:   \\* `outside`: Outside collaborators of a project that are not a member of the project's organization.   \\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.   \\* `all`: All collaborators the authenticated user can see.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ProjectsApi~projectsListCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    projectsListCollaborators(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsListCollaborators");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'affiliation': opts['affiliation'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/projects/{project_id}/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsListColumns operation.
     * @callback module:api/ProjectsApi~projectsListColumnsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectColumn>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project columns
     * 
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ProjectsApi~projectsListColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectColumn>}
     */
    projectsListColumns(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsListColumns");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectColumn];
      return this.apiClient.callApi(
        '/projects/{project_id}/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsListForOrg operation.
     * @callback module:api/ProjectsApi~projectsListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization projects
     * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param {String} org 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'open')] Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ProjectsApi~projectsListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectsListForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling projectsListForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'state': opts['state'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/orgs/{org}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsListForRepo operation.
     * @callback module:api/ProjectsApi~projectsListForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository projects
     * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'open')] Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ProjectsApi~projectsListForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectsListForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsListForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling projectsListForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsListForUser operation.
     * @callback module:api/ProjectsApi~projectsListForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user projects
     * 
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'open')] Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ProjectsApi~projectsListForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectsListForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectsListForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'state': opts['state'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/users/{username}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsMoveCard operation.
     * @callback module:api/ProjectsApi~projectsMoveCardCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a project card
     * 
     * @param {Number} cardId card_id parameter
     * @param {module:model/ProjectsMoveCardRequest} projectsMoveCardRequest 
     * @param {module:api/ProjectsApi~projectsMoveCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    projectsMoveCard(cardId, projectsMoveCardRequest, callback) {
      let postBody = projectsMoveCardRequest;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling projectsMoveCard");
      }
      // verify the required parameter 'projectsMoveCardRequest' is set
      if (projectsMoveCardRequest === undefined || projectsMoveCardRequest === null) {
        throw new Error("Missing the required parameter 'projectsMoveCardRequest' when calling projectsMoveCard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/columns/cards/{card_id}/moves', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsMoveColumn operation.
     * @callback module:api/ProjectsApi~projectsMoveColumnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move a project column
     * 
     * @param {Number} columnId column_id parameter
     * @param {module:model/ProjectsMoveColumnRequest} projectsMoveColumnRequest 
     * @param {module:api/ProjectsApi~projectsMoveColumnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    projectsMoveColumn(columnId, projectsMoveColumnRequest, callback) {
      let postBody = projectsMoveColumnRequest;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling projectsMoveColumn");
      }
      // verify the required parameter 'projectsMoveColumnRequest' is set
      if (projectsMoveColumnRequest === undefined || projectsMoveColumnRequest === null) {
        throw new Error("Missing the required parameter 'projectsMoveColumnRequest' when calling projectsMoveColumn");
      }

      let pathParams = {
        'column_id': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/columns/{column_id}/moves', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsRemoveCollaborator operation.
     * @callback module:api/ProjectsApi~projectsRemoveCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user as a collaborator
     * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
     * @param {Number} projectId 
     * @param {String} username 
     * @param {module:api/ProjectsApi~projectsRemoveCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsRemoveCollaborator(projectId, username, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsRemoveCollaborator");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling projectsRemoveCollaborator");
      }

      let pathParams = {
        'project_id': projectId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{project_id}/collaborators/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsUpdate operation.
     * @callback module:api/ProjectsApi~projectsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project
     * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectsUpdateRequest} [projectsUpdateRequest] 
     * @param {module:api/ProjectsApi~projectsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsUpdate(projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectsUpdateRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsUpdate");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/projects/{project_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsUpdateCard operation.
     * @callback module:api/ProjectsApi~projectsUpdateCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project card
     * 
     * @param {Number} cardId card_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectsUpdateCardRequest} [projectsUpdateCardRequest] 
     * @param {module:api/ProjectsApi~projectsUpdateCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCard}
     */
    projectsUpdateCard(cardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectsUpdateCardRequest'];
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling projectsUpdateCard");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectCard;
      return this.apiClient.callApi(
        '/projects/columns/cards/{card_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsUpdateColumn operation.
     * @callback module:api/ProjectsApi~projectsUpdateColumnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectColumn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project column
     * 
     * @param {Number} columnId column_id parameter
     * @param {module:model/ProjectsUpdateColumnRequest} projectsUpdateColumnRequest 
     * @param {module:api/ProjectsApi~projectsUpdateColumnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectColumn}
     */
    projectsUpdateColumn(columnId, projectsUpdateColumnRequest, callback) {
      let postBody = projectsUpdateColumnRequest;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling projectsUpdateColumn");
      }
      // verify the required parameter 'projectsUpdateColumnRequest' is set
      if (projectsUpdateColumnRequest === undefined || projectsUpdateColumnRequest === null) {
        throw new Error("Missing the required parameter 'projectsUpdateColumnRequest' when calling projectsUpdateColumn");
      }

      let pathParams = {
        'column_id': columnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectColumn;
      return this.apiClient.callApi(
        '/projects/columns/{column_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
