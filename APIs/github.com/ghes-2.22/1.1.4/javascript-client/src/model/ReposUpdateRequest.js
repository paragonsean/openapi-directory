/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposUpdateRequest model module.
 * @module model/ReposUpdateRequest
 * @version 1.1.4
 */
class ReposUpdateRequest {
    /**
     * Constructs a new <code>ReposUpdateRequest</code>.
     * @alias module:model/ReposUpdateRequest
     */
    constructor() { 
        
        ReposUpdateRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['allow_forking'] = false;
        obj['allow_merge_commit'] = true;
        obj['allow_rebase_merge'] = true;
        obj['allow_squash_merge'] = true;
        obj['archived'] = false;
        obj['delete_branch_on_merge'] = false;
        obj['has_issues'] = true;
        obj['has_projects'] = true;
        obj['has_wiki'] = true;
        obj['is_template'] = false;
        obj['private'] = false;
    }

    /**
     * Constructs a <code>ReposUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposUpdateRequest} obj Optional instance to populate.
     * @return {module:model/ReposUpdateRequest} The populated <code>ReposUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposUpdateRequest();

            if (data.hasOwnProperty('allow_forking')) {
                obj['allow_forking'] = ApiClient.convertToType(data['allow_forking'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_merge_commit')) {
                obj['allow_merge_commit'] = ApiClient.convertToType(data['allow_merge_commit'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_merge')) {
                obj['allow_rebase_merge'] = ApiClient.convertToType(data['allow_rebase_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_squash_merge')) {
                obj['allow_squash_merge'] = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('delete_branch_on_merge')) {
                obj['delete_branch_on_merge'] = ApiClient.convertToType(data['delete_branch_on_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('has_issues')) {
                obj['has_issues'] = ApiClient.convertToType(data['has_issues'], 'Boolean');
            }
            if (data.hasOwnProperty('has_projects')) {
                obj['has_projects'] = ApiClient.convertToType(data['has_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_wiki')) {
                obj['has_wiki'] = ApiClient.convertToType(data['has_wiki'], 'Boolean');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('is_template')) {
                obj['is_template'] = ApiClient.convertToType(data['is_template'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposUpdateRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * Either `true` to allow private forks, or `false` to prevent private forks.
 * @member {Boolean} allow_forking
 * @default false
 */
ReposUpdateRequest.prototype['allow_forking'] = false;

/**
 * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
 * @member {Boolean} allow_merge_commit
 * @default true
 */
ReposUpdateRequest.prototype['allow_merge_commit'] = true;

/**
 * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
 * @member {Boolean} allow_rebase_merge
 * @default true
 */
ReposUpdateRequest.prototype['allow_rebase_merge'] = true;

/**
 * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
 * @member {Boolean} allow_squash_merge
 * @default true
 */
ReposUpdateRequest.prototype['allow_squash_merge'] = true;

/**
 * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
 * @member {Boolean} archived
 * @default false
 */
ReposUpdateRequest.prototype['archived'] = false;

/**
 * Updates the default branch for this repository.
 * @member {String} default_branch
 */
ReposUpdateRequest.prototype['default_branch'] = undefined;

/**
 * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
 * @member {Boolean} delete_branch_on_merge
 * @default false
 */
ReposUpdateRequest.prototype['delete_branch_on_merge'] = false;

/**
 * A short description of the repository.
 * @member {String} description
 */
ReposUpdateRequest.prototype['description'] = undefined;

/**
 * Either `true` to enable issues for this repository or `false` to disable them.
 * @member {Boolean} has_issues
 * @default true
 */
ReposUpdateRequest.prototype['has_issues'] = true;

/**
 * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
 * @member {Boolean} has_projects
 * @default true
 */
ReposUpdateRequest.prototype['has_projects'] = true;

/**
 * Either `true` to enable the wiki for this repository or `false` to disable it.
 * @member {Boolean} has_wiki
 * @default true
 */
ReposUpdateRequest.prototype['has_wiki'] = true;

/**
 * A URL with more information about the repository.
 * @member {String} homepage
 */
ReposUpdateRequest.prototype['homepage'] = undefined;

/**
 * Either `true` to make this repo available as a template repository or `false` to prevent it.
 * @member {Boolean} is_template
 * @default false
 */
ReposUpdateRequest.prototype['is_template'] = false;

/**
 * The name of the repository.
 * @member {String} name
 */
ReposUpdateRequest.prototype['name'] = undefined;

/**
 * Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
 * @member {Boolean} private
 * @default false
 */
ReposUpdateRequest.prototype['private'] = false;

/**
 * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\"
 * @member {module:model/ReposUpdateRequest.VisibilityEnum} visibility
 */
ReposUpdateRequest.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
ReposUpdateRequest['VisibilityEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "internal"
     * @const
     */
    "internal": "internal"
};



export default ReposUpdateRequest;

