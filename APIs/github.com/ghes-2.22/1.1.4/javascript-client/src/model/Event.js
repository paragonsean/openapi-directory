/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Actor from './Actor';
import EventPayload from './EventPayload';
import EventRepo from './EventRepo';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.1.4
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * Event
     * @alias module:model/Event
     * @param actor {module:model/Actor} 
     * @param createdAt {Date} 
     * @param id {String} 
     * @param payload {module:model/EventPayload} 
     * @param _public {Boolean} 
     * @param repo {module:model/EventRepo} 
     * @param type {String} 
     */
    constructor(actor, createdAt, id, payload, _public, repo, type) { 
        
        Event.initialize(this, actor, createdAt, id, payload, _public, repo, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actor, createdAt, id, payload, _public, repo, type) { 
        obj['actor'] = actor;
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['payload'] = payload;
        obj['public'] = _public;
        obj['repo'] = repo;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('actor')) {
                obj['actor'] = Actor.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('org')) {
                obj['org'] = Actor.constructFromObject(data['org']);
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = EventPayload.constructFromObject(data['payload']);
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = EventRepo.constructFromObject(data['repo']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          Actor.validateJSON(data['actor']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `org`
        if (data['org']) { // data not null
          Actor.validateJSON(data['org']);
        }
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          EventPayload.validateJSON(data['payload']);
        }
        // validate the optional field `repo`
        if (data['repo']) { // data not null
          EventRepo.validateJSON(data['repo']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Event.RequiredProperties = ["actor", "created_at", "id", "payload", "public", "repo", "type"];

/**
 * @member {module:model/Actor} actor
 */
Event.prototype['actor'] = undefined;

/**
 * @member {Date} created_at
 */
Event.prototype['created_at'] = undefined;

/**
 * @member {String} id
 */
Event.prototype['id'] = undefined;

/**
 * @member {module:model/Actor} org
 */
Event.prototype['org'] = undefined;

/**
 * @member {module:model/EventPayload} payload
 */
Event.prototype['payload'] = undefined;

/**
 * @member {Boolean} public
 */
Event.prototype['public'] = undefined;

/**
 * @member {module:model/EventRepo} repo
 */
Event.prototype['repo'] = undefined;

/**
 * @member {String} type
 */
Event.prototype['type'] = undefined;






export default Event;

