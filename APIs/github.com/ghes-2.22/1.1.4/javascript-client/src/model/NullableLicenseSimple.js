/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NullableLicenseSimple model module.
 * @module model/NullableLicenseSimple
 * @version 1.1.4
 */
class NullableLicenseSimple {
    /**
     * Constructs a new <code>NullableLicenseSimple</code>.
     * License Simple
     * @alias module:model/NullableLicenseSimple
     * @param key {String} 
     * @param name {String} 
     * @param nodeId {String} 
     * @param spdxId {String} 
     * @param url {String} 
     */
    constructor(key, name, nodeId, spdxId, url) { 
        
        NullableLicenseSimple.initialize(this, key, name, nodeId, spdxId, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, name, nodeId, spdxId, url) { 
        obj['key'] = key;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['spdx_id'] = spdxId;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>NullableLicenseSimple</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NullableLicenseSimple} obj Optional instance to populate.
     * @return {module:model/NullableLicenseSimple} The populated <code>NullableLicenseSimple</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NullableLicenseSimple();

            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('spdx_id')) {
                obj['spdx_id'] = ApiClient.convertToType(data['spdx_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NullableLicenseSimple</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NullableLicenseSimple</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NullableLicenseSimple.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['spdx_id'] && !(typeof data['spdx_id'] === 'string' || data['spdx_id'] instanceof String)) {
            throw new Error("Expected the field `spdx_id` to be a primitive type in the JSON string but got " + data['spdx_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

NullableLicenseSimple.RequiredProperties = ["key", "name", "node_id", "spdx_id", "url"];

/**
 * @member {String} html_url
 */
NullableLicenseSimple.prototype['html_url'] = undefined;

/**
 * @member {String} key
 */
NullableLicenseSimple.prototype['key'] = undefined;

/**
 * @member {String} name
 */
NullableLicenseSimple.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
NullableLicenseSimple.prototype['node_id'] = undefined;

/**
 * @member {String} spdx_id
 */
NullableLicenseSimple.prototype['spdx_id'] = undefined;

/**
 * @member {String} url
 */
NullableLicenseSimple.prototype['url'] = undefined;






export default NullableLicenseSimple;

