/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitCommitAuthor from './GitCommitAuthor';
import GitCommitParentsInner from './GitCommitParentsInner';
import GitCommitTree from './GitCommitTree';
import GitCommitVerification from './GitCommitVerification';

/**
 * The GitCommit model module.
 * @module model/GitCommit
 * @version 1.1.4
 */
class GitCommit {
    /**
     * Constructs a new <code>GitCommit</code>.
     * Low-level Git commit operations within a repository
     * @alias module:model/GitCommit
     * @param author {module:model/GitCommitAuthor} 
     * @param committer {module:model/GitCommitAuthor} 
     * @param htmlUrl {String} 
     * @param message {String} Message describing the purpose of the commit
     * @param nodeId {String} 
     * @param parents {Array.<module:model/GitCommitParentsInner>} 
     * @param sha {String} SHA for the commit
     * @param tree {module:model/GitCommitTree} 
     * @param url {String} 
     * @param verification {module:model/GitCommitVerification} 
     */
    constructor(author, committer, htmlUrl, message, nodeId, parents, sha, tree, url, verification) { 
        
        GitCommit.initialize(this, author, committer, htmlUrl, message, nodeId, parents, sha, tree, url, verification);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, author, committer, htmlUrl, message, nodeId, parents, sha, tree, url, verification) { 
        obj['author'] = author;
        obj['committer'] = committer;
        obj['html_url'] = htmlUrl;
        obj['message'] = message;
        obj['node_id'] = nodeId;
        obj['parents'] = parents;
        obj['sha'] = sha;
        obj['tree'] = tree;
        obj['url'] = url;
        obj['verification'] = verification;
    }

    /**
     * Constructs a <code>GitCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitCommit} obj Optional instance to populate.
     * @return {module:model/GitCommit} The populated <code>GitCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitCommit();

            if (data.hasOwnProperty('author')) {
                obj['author'] = GitCommitAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = GitCommitAuthor.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [GitCommitParentsInner]);
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = GitCommitTree.constructFromObject(data['tree']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('verification')) {
                obj['verification'] = GitCommitVerification.constructFromObject(data['verification']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitCommit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitCommit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GitCommit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          GitCommitAuthor.validateJSON(data['author']);
        }
        // validate the optional field `committer`
        if (data['committer']) { // data not null
          GitCommitAuthor.validateJSON(data['committer']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        if (data['parents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parents'])) {
                throw new Error("Expected the field `parents` to be an array in the JSON data but got " + data['parents']);
            }
            // validate the optional field `parents` (array)
            for (const item of data['parents']) {
                GitCommitParentsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // validate the optional field `tree`
        if (data['tree']) { // data not null
          GitCommitTree.validateJSON(data['tree']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `verification`
        if (data['verification']) { // data not null
          GitCommitVerification.validateJSON(data['verification']);
        }

        return true;
    }


}

GitCommit.RequiredProperties = ["author", "committer", "html_url", "message", "node_id", "parents", "sha", "tree", "url", "verification"];

/**
 * @member {module:model/GitCommitAuthor} author
 */
GitCommit.prototype['author'] = undefined;

/**
 * @member {module:model/GitCommitAuthor} committer
 */
GitCommit.prototype['committer'] = undefined;

/**
 * @member {String} html_url
 */
GitCommit.prototype['html_url'] = undefined;

/**
 * Message describing the purpose of the commit
 * @member {String} message
 */
GitCommit.prototype['message'] = undefined;

/**
 * @member {String} node_id
 */
GitCommit.prototype['node_id'] = undefined;

/**
 * @member {Array.<module:model/GitCommitParentsInner>} parents
 */
GitCommit.prototype['parents'] = undefined;

/**
 * SHA for the commit
 * @member {String} sha
 */
GitCommit.prototype['sha'] = undefined;

/**
 * @member {module:model/GitCommitTree} tree
 */
GitCommit.prototype['tree'] = undefined;

/**
 * @member {String} url
 */
GitCommit.prototype['url'] = undefined;

/**
 * @member {module:model/GitCommitVerification} verification
 */
GitCommit.prototype['verification'] = undefined;






export default GitCommit;

