/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppPermissions;
import org.openapitools.client.model.Repository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:18.265607-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstallationToken {
  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_HAS_MULTIPLE_SINGLE_FILES = "has_multiple_single_files";
  @SerializedName(SERIALIZED_NAME_HAS_MULTIPLE_SINGLE_FILES)
  private Boolean hasMultipleSingleFiles;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private AppPermissions permissions;

  public static final String SERIALIZED_NAME_REPOSITORIES = "repositories";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES)
  private List<Repository> repositories = new ArrayList<>();

  /**
   * Gets or Sets repositorySelection
   */
  @JsonAdapter(RepositorySelectionEnum.Adapter.class)
  public enum RepositorySelectionEnum {
    ALL("all"),
    
    SELECTED("selected");

    private String value;

    RepositorySelectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepositorySelectionEnum fromValue(String value) {
      for (RepositorySelectionEnum b : RepositorySelectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepositorySelectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepositorySelectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepositorySelectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepositorySelectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepositorySelectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPOSITORY_SELECTION = "repository_selection";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SELECTION)
  private RepositorySelectionEnum repositorySelection;

  public static final String SERIALIZED_NAME_SINGLE_FILE = "single_file";
  @SerializedName(SERIALIZED_NAME_SINGLE_FILE)
  private String singleFile;

  public static final String SERIALIZED_NAME_SINGLE_FILE_PATHS = "single_file_paths";
  @SerializedName(SERIALIZED_NAME_SINGLE_FILE_PATHS)
  private List<String> singleFilePaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public InstallationToken() {
  }

  public InstallationToken expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public InstallationToken hasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
    this.hasMultipleSingleFiles = hasMultipleSingleFiles;
    return this;
  }

  /**
   * Get hasMultipleSingleFiles
   * @return hasMultipleSingleFiles
   */
  @javax.annotation.Nullable
  public Boolean getHasMultipleSingleFiles() {
    return hasMultipleSingleFiles;
  }

  public void setHasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
    this.hasMultipleSingleFiles = hasMultipleSingleFiles;
  }


  public InstallationToken permissions(AppPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public AppPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(AppPermissions permissions) {
    this.permissions = permissions;
  }


  public InstallationToken repositories(List<Repository> repositories) {
    this.repositories = repositories;
    return this;
  }

  public InstallationToken addRepositoriesItem(Repository repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new ArrayList<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

  /**
   * Get repositories
   * @return repositories
   */
  @javax.annotation.Nullable
  public List<Repository> getRepositories() {
    return repositories;
  }

  public void setRepositories(List<Repository> repositories) {
    this.repositories = repositories;
  }


  public InstallationToken repositorySelection(RepositorySelectionEnum repositorySelection) {
    this.repositorySelection = repositorySelection;
    return this;
  }

  /**
   * Get repositorySelection
   * @return repositorySelection
   */
  @javax.annotation.Nullable
  public RepositorySelectionEnum getRepositorySelection() {
    return repositorySelection;
  }

  public void setRepositorySelection(RepositorySelectionEnum repositorySelection) {
    this.repositorySelection = repositorySelection;
  }


  public InstallationToken singleFile(String singleFile) {
    this.singleFile = singleFile;
    return this;
  }

  /**
   * Get singleFile
   * @return singleFile
   */
  @javax.annotation.Nullable
  public String getSingleFile() {
    return singleFile;
  }

  public void setSingleFile(String singleFile) {
    this.singleFile = singleFile;
  }


  public InstallationToken singleFilePaths(List<String> singleFilePaths) {
    this.singleFilePaths = singleFilePaths;
    return this;
  }

  public InstallationToken addSingleFilePathsItem(String singleFilePathsItem) {
    if (this.singleFilePaths == null) {
      this.singleFilePaths = new ArrayList<>();
    }
    this.singleFilePaths.add(singleFilePathsItem);
    return this;
  }

  /**
   * Get singleFilePaths
   * @return singleFilePaths
   */
  @javax.annotation.Nullable
  public List<String> getSingleFilePaths() {
    return singleFilePaths;
  }

  public void setSingleFilePaths(List<String> singleFilePaths) {
    this.singleFilePaths = singleFilePaths;
  }


  public InstallationToken token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nonnull
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstallationToken installationToken = (InstallationToken) o;
    return Objects.equals(this.expiresAt, installationToken.expiresAt) &&
        Objects.equals(this.hasMultipleSingleFiles, installationToken.hasMultipleSingleFiles) &&
        Objects.equals(this.permissions, installationToken.permissions) &&
        Objects.equals(this.repositories, installationToken.repositories) &&
        Objects.equals(this.repositorySelection, installationToken.repositorySelection) &&
        Objects.equals(this.singleFile, installationToken.singleFile) &&
        Objects.equals(this.singleFilePaths, installationToken.singleFilePaths) &&
        Objects.equals(this.token, installationToken.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresAt, hasMultipleSingleFiles, permissions, repositories, repositorySelection, singleFile, singleFilePaths, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstallationToken {\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    hasMultipleSingleFiles: ").append(toIndentedString(hasMultipleSingleFiles)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    repositorySelection: ").append(toIndentedString(repositorySelection)).append("\n");
    sb.append("    singleFile: ").append(toIndentedString(singleFile)).append("\n");
    sb.append("    singleFilePaths: ").append(toIndentedString(singleFilePaths)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expires_at");
    openapiFields.add("has_multiple_single_files");
    openapiFields.add("permissions");
    openapiFields.add("repositories");
    openapiFields.add("repository_selection");
    openapiFields.add("single_file");
    openapiFields.add("single_file_paths");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expires_at");
    openapiRequiredFields.add("token");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstallationToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstallationToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstallationToken is not found in the empty JSON string", InstallationToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstallationToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallationToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstallationToken.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        AppPermissions.validateJsonElement(jsonObj.get("permissions"));
      }
      if (jsonObj.get("repositories") != null && !jsonObj.get("repositories").isJsonNull()) {
        JsonArray jsonArrayrepositories = jsonObj.getAsJsonArray("repositories");
        if (jsonArrayrepositories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repositories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repositories` to be an array in the JSON string but got `%s`", jsonObj.get("repositories").toString()));
          }

          // validate the optional field `repositories` (array)
          for (int i = 0; i < jsonArrayrepositories.size(); i++) {
            Repository.validateJsonElement(jsonArrayrepositories.get(i));
          };
        }
      }
      if ((jsonObj.get("repository_selection") != null && !jsonObj.get("repository_selection").isJsonNull()) && !jsonObj.get("repository_selection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_selection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_selection").toString()));
      }
      // validate the optional field `repository_selection`
      if (jsonObj.get("repository_selection") != null && !jsonObj.get("repository_selection").isJsonNull()) {
        RepositorySelectionEnum.validateJsonElement(jsonObj.get("repository_selection"));
      }
      if ((jsonObj.get("single_file") != null && !jsonObj.get("single_file").isJsonNull()) && !jsonObj.get("single_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `single_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("single_file").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("single_file_paths") != null && !jsonObj.get("single_file_paths").isJsonNull() && !jsonObj.get("single_file_paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `single_file_paths` to be an array in the JSON string but got `%s`", jsonObj.get("single_file_paths").toString()));
      }
      if (!jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstallationToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstallationToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstallationToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstallationToken.class));

       return (TypeAdapter<T>) new TypeAdapter<InstallationToken>() {
           @Override
           public void write(JsonWriter out, InstallationToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstallationToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstallationToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstallationToken
   * @throws IOException if the JSON string is invalid with respect to InstallationToken
   */
  public static InstallationToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstallationToken.class);
  }

  /**
   * Convert an instance of InstallationToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

