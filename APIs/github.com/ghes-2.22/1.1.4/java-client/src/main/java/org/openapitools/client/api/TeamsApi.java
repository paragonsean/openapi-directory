/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppsGetInstallation415Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.OrgsRemoveOutsideCollaborator422Response;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamDiscussion;
import org.openapitools.client.model.TeamDiscussionComment;
import org.openapitools.client.model.TeamFull;
import org.openapitools.client.model.TeamMembership;
import org.openapitools.client.model.TeamProject;
import org.openapitools.client.model.TeamRepository;
import org.openapitools.client.model.TeamsAddOrUpdateMembershipForUserInOrgRequest;
import org.openapitools.client.model.TeamsAddOrUpdateProjectPermissionsInOrgRequest;
import org.openapitools.client.model.TeamsAddOrUpdateProjectPermissionsLegacyRequest;
import org.openapitools.client.model.TeamsAddOrUpdateRepoPermissionsInOrgRequest;
import org.openapitools.client.model.TeamsAddOrUpdateRepoPermissionsLegacyRequest;
import org.openapitools.client.model.TeamsCreateDiscussionCommentInOrgRequest;
import org.openapitools.client.model.TeamsCreateDiscussionInOrgRequest;
import org.openapitools.client.model.TeamsCreateRequest;
import org.openapitools.client.model.TeamsUpdateDiscussionInOrgRequest;
import org.openapitools.client.model.TeamsUpdateInOrgRequest;
import org.openapitools.client.model.TeamsUpdateLegacyRequest;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for teamsAddMemberLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddMemberLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddMemberLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddMemberLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsAddMemberLegacy(Async)");
        }

        return teamsAddMemberLegacyCall(teamId, username, _callback);

    }

    /**
     * Add team member (Legacy)
     * The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsAddMemberLegacy(Integer teamId, String username) throws ApiException {
        teamsAddMemberLegacyWithHttpInfo(teamId, username);
    }

    /**
     * Add team member (Legacy)
     * The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsAddMemberLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsAddMemberLegacyValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add team member (Legacy) (asynchronously)
     * The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddMemberLegacyAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddMemberLegacyValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateMembershipForUserInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateMembershipForUserInOrgCall(String org, String teamSlug, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateMembershipForUserInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/memberships/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateMembershipForUserInOrgValidateBeforeCall(String org, String teamSlug, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsAddOrUpdateMembershipForUserInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsAddOrUpdateMembershipForUserInOrg(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsAddOrUpdateMembershipForUserInOrg(Async)");
        }

        return teamsAddOrUpdateMembershipForUserInOrgCall(org, teamSlug, username, teamsAddOrUpdateMembershipForUserInOrgRequest, _callback);

    }

    /**
     * Add or update team membership for a user
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  An organization owner can add someone who is not part of the team&#39;s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \&quot;pending\&quot; state until the person accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @return TeamMembership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public TeamMembership teamsAddOrUpdateMembershipForUserInOrg(String org, String teamSlug, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest) throws ApiException {
        ApiResponse<TeamMembership> localVarResp = teamsAddOrUpdateMembershipForUserInOrgWithHttpInfo(org, teamSlug, username, teamsAddOrUpdateMembershipForUserInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Add or update team membership for a user
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  An organization owner can add someone who is not part of the team&#39;s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \&quot;pending\&quot; state until the person accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @return ApiResponse&lt;TeamMembership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public ApiResponse<TeamMembership> teamsAddOrUpdateMembershipForUserInOrgWithHttpInfo(String org, String teamSlug, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateMembershipForUserInOrgValidateBeforeCall(org, teamSlug, username, teamsAddOrUpdateMembershipForUserInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or update team membership for a user (asynchronously)
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  An organization owner can add someone who is not part of the team&#39;s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \&quot;pending\&quot; state until the person accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateMembershipForUserInOrgAsync(String org, String teamSlug, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest, final ApiCallback<TeamMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateMembershipForUserInOrgValidateBeforeCall(org, teamSlug, username, teamsAddOrUpdateMembershipForUserInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateMembershipForUserLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy">Add or update team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddOrUpdateMembershipForUserLegacyCall(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateMembershipForUserInOrgRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/memberships/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateMembershipForUserLegacyValidateBeforeCall(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddOrUpdateMembershipForUserLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsAddOrUpdateMembershipForUserLegacy(Async)");
        }

        return teamsAddOrUpdateMembershipForUserLegacyCall(teamId, username, teamsAddOrUpdateMembershipForUserInOrgRequest, _callback);

    }

    /**
     * Add or update team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @return TeamMembership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy">Add or update team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamMembership teamsAddOrUpdateMembershipForUserLegacy(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest) throws ApiException {
        ApiResponse<TeamMembership> localVarResp = teamsAddOrUpdateMembershipForUserLegacyWithHttpInfo(teamId, username, teamsAddOrUpdateMembershipForUserInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Add or update team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @return ApiResponse&lt;TeamMembership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy">Add or update team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamMembership> teamsAddOrUpdateMembershipForUserLegacyWithHttpInfo(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateMembershipForUserLegacyValidateBeforeCall(teamId, username, teamsAddOrUpdateMembershipForUserInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or update team membership for a user (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy">Add or update team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddOrUpdateMembershipForUserLegacyAsync(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserInOrgRequest teamsAddOrUpdateMembershipForUserInOrgRequest, final ApiCallback<TeamMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateMembershipForUserLegacyValidateBeforeCall(teamId, username, teamsAddOrUpdateMembershipForUserInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateProjectPermissionsInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsInOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateProjectPermissionsInOrgCall(String org, String teamSlug, Integer projectId, TeamsAddOrUpdateProjectPermissionsInOrgRequest teamsAddOrUpdateProjectPermissionsInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateProjectPermissionsInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/projects/{project_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateProjectPermissionsInOrgValidateBeforeCall(String org, String teamSlug, Integer projectId, TeamsAddOrUpdateProjectPermissionsInOrgRequest teamsAddOrUpdateProjectPermissionsInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsAddOrUpdateProjectPermissionsInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsAddOrUpdateProjectPermissionsInOrg(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsAddOrUpdateProjectPermissionsInOrg(Async)");
        }

        return teamsAddOrUpdateProjectPermissionsInOrgCall(org, teamSlug, projectId, teamsAddOrUpdateProjectPermissionsInOrgRequest, _callback);

    }

    /**
     * Add or update team project permissions
     * Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsInOrgRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public void teamsAddOrUpdateProjectPermissionsInOrg(String org, String teamSlug, Integer projectId, TeamsAddOrUpdateProjectPermissionsInOrgRequest teamsAddOrUpdateProjectPermissionsInOrgRequest) throws ApiException {
        teamsAddOrUpdateProjectPermissionsInOrgWithHttpInfo(org, teamSlug, projectId, teamsAddOrUpdateProjectPermissionsInOrgRequest);
    }

    /**
     * Add or update team project permissions
     * Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsInOrgRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public ApiResponse<Void> teamsAddOrUpdateProjectPermissionsInOrgWithHttpInfo(String org, String teamSlug, Integer projectId, TeamsAddOrUpdateProjectPermissionsInOrgRequest teamsAddOrUpdateProjectPermissionsInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateProjectPermissionsInOrgValidateBeforeCall(org, teamSlug, projectId, teamsAddOrUpdateProjectPermissionsInOrgRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or update team project permissions (asynchronously)
     * Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsInOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateProjectPermissionsInOrgAsync(String org, String teamSlug, Integer projectId, TeamsAddOrUpdateProjectPermissionsInOrgRequest teamsAddOrUpdateProjectPermissionsInOrgRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateProjectPermissionsInOrgValidateBeforeCall(org, teamSlug, projectId, teamsAddOrUpdateProjectPermissionsInOrgRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateProjectPermissionsLegacy
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsLegacyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-project-permissions-legacy">Add or update team project permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddOrUpdateProjectPermissionsLegacyCall(Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsLegacyRequest teamsAddOrUpdateProjectPermissionsLegacyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateProjectPermissionsLegacyRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects/{project_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateProjectPermissionsLegacyValidateBeforeCall(Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsLegacyRequest teamsAddOrUpdateProjectPermissionsLegacyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddOrUpdateProjectPermissionsLegacy(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsAddOrUpdateProjectPermissionsLegacy(Async)");
        }

        return teamsAddOrUpdateProjectPermissionsLegacyCall(teamId, projectId, teamsAddOrUpdateProjectPermissionsLegacyRequest, _callback);

    }

    /**
     * Add or update team project permissions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsLegacyRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-project-permissions-legacy">Add or update team project permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsAddOrUpdateProjectPermissionsLegacy(Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsLegacyRequest teamsAddOrUpdateProjectPermissionsLegacyRequest) throws ApiException {
        teamsAddOrUpdateProjectPermissionsLegacyWithHttpInfo(teamId, projectId, teamsAddOrUpdateProjectPermissionsLegacyRequest);
    }

    /**
     * Add or update team project permissions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsLegacyRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-project-permissions-legacy">Add or update team project permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsAddOrUpdateProjectPermissionsLegacyWithHttpInfo(Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsLegacyRequest teamsAddOrUpdateProjectPermissionsLegacyRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateProjectPermissionsLegacyValidateBeforeCall(teamId, projectId, teamsAddOrUpdateProjectPermissionsLegacyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or update team project permissions (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsLegacyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-project-permissions-legacy">Add or update team project permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddOrUpdateProjectPermissionsLegacyAsync(Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsLegacyRequest teamsAddOrUpdateProjectPermissionsLegacyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateProjectPermissionsLegacyValidateBeforeCall(teamId, projectId, teamsAddOrUpdateProjectPermissionsLegacyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateRepoPermissionsInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsInOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateRepoPermissionsInOrgCall(String org, String teamSlug, String owner, String repo, TeamsAddOrUpdateRepoPermissionsInOrgRequest teamsAddOrUpdateRepoPermissionsInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateRepoPermissionsInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateRepoPermissionsInOrgValidateBeforeCall(String org, String teamSlug, String owner, String repo, TeamsAddOrUpdateRepoPermissionsInOrgRequest teamsAddOrUpdateRepoPermissionsInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsAddOrUpdateRepoPermissionsInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsAddOrUpdateRepoPermissionsInOrg(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsAddOrUpdateRepoPermissionsInOrg(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsAddOrUpdateRepoPermissionsInOrg(Async)");
        }

        return teamsAddOrUpdateRepoPermissionsInOrgCall(org, teamSlug, owner, repo, teamsAddOrUpdateRepoPermissionsInOrgRequest, _callback);

    }

    /**
     * Add or update team repository permissions
     * To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.  For more information about the permission levels, see \&quot;[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsInOrgRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public void teamsAddOrUpdateRepoPermissionsInOrg(String org, String teamSlug, String owner, String repo, TeamsAddOrUpdateRepoPermissionsInOrgRequest teamsAddOrUpdateRepoPermissionsInOrgRequest) throws ApiException {
        teamsAddOrUpdateRepoPermissionsInOrgWithHttpInfo(org, teamSlug, owner, repo, teamsAddOrUpdateRepoPermissionsInOrgRequest);
    }

    /**
     * Add or update team repository permissions
     * To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.  For more information about the permission levels, see \&quot;[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsInOrgRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public ApiResponse<Void> teamsAddOrUpdateRepoPermissionsInOrgWithHttpInfo(String org, String teamSlug, String owner, String repo, TeamsAddOrUpdateRepoPermissionsInOrgRequest teamsAddOrUpdateRepoPermissionsInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateRepoPermissionsInOrgValidateBeforeCall(org, teamSlug, owner, repo, teamsAddOrUpdateRepoPermissionsInOrgRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or update team repository permissions (asynchronously)
     * To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.  For more information about the permission levels, see \&quot;[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsInOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateRepoPermissionsInOrgAsync(String org, String teamSlug, String owner, String repo, TeamsAddOrUpdateRepoPermissionsInOrgRequest teamsAddOrUpdateRepoPermissionsInOrgRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateRepoPermissionsInOrgValidateBeforeCall(org, teamSlug, owner, repo, teamsAddOrUpdateRepoPermissionsInOrgRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateRepoPermissionsLegacy
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsLegacyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions-legacy">Add or update team repository permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddOrUpdateRepoPermissionsLegacyCall(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsLegacyRequest teamsAddOrUpdateRepoPermissionsLegacyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateRepoPermissionsLegacyRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos/{owner}/{repo}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateRepoPermissionsLegacyValidateBeforeCall(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsLegacyRequest teamsAddOrUpdateRepoPermissionsLegacyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddOrUpdateRepoPermissionsLegacy(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsAddOrUpdateRepoPermissionsLegacy(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsAddOrUpdateRepoPermissionsLegacy(Async)");
        }

        return teamsAddOrUpdateRepoPermissionsLegacyCall(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsLegacyRequest, _callback);

    }

    /**
     * Add or update team repository permissions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Add or update team repository permissions](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-repository-permissions)\&quot; endpoint.  To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsLegacyRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions-legacy">Add or update team repository permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsAddOrUpdateRepoPermissionsLegacy(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsLegacyRequest teamsAddOrUpdateRepoPermissionsLegacyRequest) throws ApiException {
        teamsAddOrUpdateRepoPermissionsLegacyWithHttpInfo(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsLegacyRequest);
    }

    /**
     * Add or update team repository permissions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Add or update team repository permissions](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-repository-permissions)\&quot; endpoint.  To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsLegacyRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions-legacy">Add or update team repository permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsAddOrUpdateRepoPermissionsLegacyWithHttpInfo(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsLegacyRequest teamsAddOrUpdateRepoPermissionsLegacyRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateRepoPermissionsLegacyValidateBeforeCall(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsLegacyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or update team repository permissions (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Add or update team repository permissions](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#add-or-update-team-repository-permissions)\&quot; endpoint.  To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsLegacyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#add-or-update-team-repository-permissions-legacy">Add or update team repository permissions (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddOrUpdateRepoPermissionsLegacyAsync(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsLegacyRequest teamsAddOrUpdateRepoPermissionsLegacyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateRepoPermissionsLegacyValidateBeforeCall(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsLegacyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCheckPermissionsForProjectInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForProjectInOrgCall(String org, String teamSlug, Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/projects/{project_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCheckPermissionsForProjectInOrgValidateBeforeCall(String org, String teamSlug, Integer projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsCheckPermissionsForProjectInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsCheckPermissionsForProjectInOrg(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsCheckPermissionsForProjectInOrg(Async)");
        }

        return teamsCheckPermissionsForProjectInOrgCall(org, teamSlug, projectId, _callback);

    }

    /**
     * Check team permissions for a project
     * Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @return TeamProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public TeamProject teamsCheckPermissionsForProjectInOrg(String org, String teamSlug, Integer projectId) throws ApiException {
        ApiResponse<TeamProject> localVarResp = teamsCheckPermissionsForProjectInOrgWithHttpInfo(org, teamSlug, projectId);
        return localVarResp.getData();
    }

    /**
     * Check team permissions for a project
     * Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TeamProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public ApiResponse<TeamProject> teamsCheckPermissionsForProjectInOrgWithHttpInfo(String org, String teamSlug, Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = teamsCheckPermissionsForProjectInOrgValidateBeforeCall(org, teamSlug, projectId, null);
        Type localVarReturnType = new TypeToken<TeamProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check team permissions for a project (asynchronously)
     * Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForProjectInOrgAsync(String org, String teamSlug, Integer projectId, final ApiCallback<TeamProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCheckPermissionsForProjectInOrgValidateBeforeCall(org, teamSlug, projectId, _callback);
        Type localVarReturnType = new TypeToken<TeamProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCheckPermissionsForProjectLegacy
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-project-legacy">Check team permissions for a project (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCheckPermissionsForProjectLegacyCall(Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects/{project_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCheckPermissionsForProjectLegacyValidateBeforeCall(Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForProjectLegacy(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsCheckPermissionsForProjectLegacy(Async)");
        }

        return teamsCheckPermissionsForProjectLegacyCall(teamId, projectId, _callback);

    }

    /**
     * Check team permissions for a project (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
     * @param teamId  (required)
     * @param projectId  (required)
     * @return TeamProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-project-legacy">Check team permissions for a project (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamProject teamsCheckPermissionsForProjectLegacy(Integer teamId, Integer projectId) throws ApiException {
        ApiResponse<TeamProject> localVarResp = teamsCheckPermissionsForProjectLegacyWithHttpInfo(teamId, projectId);
        return localVarResp.getData();
    }

    /**
     * Check team permissions for a project (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
     * @param teamId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TeamProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-project-legacy">Check team permissions for a project (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamProject> teamsCheckPermissionsForProjectLegacyWithHttpInfo(Integer teamId, Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = teamsCheckPermissionsForProjectLegacyValidateBeforeCall(teamId, projectId, null);
        Type localVarReturnType = new TypeToken<TeamProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check team permissions for a project (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-project-legacy">Check team permissions for a project (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCheckPermissionsForProjectLegacyAsync(Integer teamId, Integer projectId, final ApiCallback<TeamProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCheckPermissionsForProjectLegacyValidateBeforeCall(teamId, projectId, _callback);
        Type localVarReturnType = new TypeToken<TeamProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCheckPermissionsForRepoInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with repository permissions </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if team has permission for the repository. This is the response when the repository media type hasn&#39;t been provded in the Accept header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team does not have permission for the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForRepoInOrgCall(String org, String teamSlug, String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCheckPermissionsForRepoInOrgValidateBeforeCall(String org, String teamSlug, String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsCheckPermissionsForRepoInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsCheckPermissionsForRepoInOrg(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsCheckPermissionsForRepoInOrg(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsCheckPermissionsForRepoInOrg(Async)");
        }

        return teamsCheckPermissionsForRepoInOrgCall(org, teamSlug, owner, repo, _callback);

    }

    /**
     * Check team permissions for a repository
     * Checks whether a team has &#x60;admin&#x60;, &#x60;push&#x60;, &#x60;maintain&#x60;, &#x60;triage&#x60;, or &#x60;pull&#x60; permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/) via the &#x60;application/vnd.github.v3.repository+json&#x60; accept header.  If a team doesn&#39;t have permission for the repository, you will receive a &#x60;404 Not Found&#x60; response status.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return TeamRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with repository permissions </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if team has permission for the repository. This is the response when the repository media type hasn&#39;t been provded in the Accept header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team does not have permission for the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public TeamRepository teamsCheckPermissionsForRepoInOrg(String org, String teamSlug, String owner, String repo) throws ApiException {
        ApiResponse<TeamRepository> localVarResp = teamsCheckPermissionsForRepoInOrgWithHttpInfo(org, teamSlug, owner, repo);
        return localVarResp.getData();
    }

    /**
     * Check team permissions for a repository
     * Checks whether a team has &#x60;admin&#x60;, &#x60;push&#x60;, &#x60;maintain&#x60;, &#x60;triage&#x60;, or &#x60;pull&#x60; permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/) via the &#x60;application/vnd.github.v3.repository+json&#x60; accept header.  If a team doesn&#39;t have permission for the repository, you will receive a &#x60;404 Not Found&#x60; response status.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;TeamRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with repository permissions </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if team has permission for the repository. This is the response when the repository media type hasn&#39;t been provded in the Accept header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team does not have permission for the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public ApiResponse<TeamRepository> teamsCheckPermissionsForRepoInOrgWithHttpInfo(String org, String teamSlug, String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = teamsCheckPermissionsForRepoInOrgValidateBeforeCall(org, teamSlug, owner, repo, null);
        Type localVarReturnType = new TypeToken<TeamRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check team permissions for a repository (asynchronously)
     * Checks whether a team has &#x60;admin&#x60;, &#x60;push&#x60;, &#x60;maintain&#x60;, &#x60;triage&#x60;, or &#x60;pull&#x60; permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/) via the &#x60;application/vnd.github.v3.repository+json&#x60; accept header.  If a team doesn&#39;t have permission for the repository, you will receive a &#x60;404 Not Found&#x60; response status.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with repository permissions </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if team has permission for the repository. This is the response when the repository media type hasn&#39;t been provded in the Accept header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team does not have permission for the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForRepoInOrgAsync(String org, String teamSlug, String owner, String repo, final ApiCallback<TeamRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCheckPermissionsForRepoInOrgValidateBeforeCall(org, teamSlug, owner, repo, _callback);
        Type localVarReturnType = new TypeToken<TeamRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCheckPermissionsForRepoLegacy
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository-legacy">Check team permissions for a repository (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCheckPermissionsForRepoLegacyCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos/{owner}/{repo}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCheckPermissionsForRepoLegacyValidateBeforeCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForRepoLegacy(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsCheckPermissionsForRepoLegacy(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsCheckPermissionsForRepoLegacy(Async)");
        }

        return teamsCheckPermissionsForRepoLegacyCall(teamId, owner, repo, _callback);

    }

    /**
     * Check team permissions for a repository (Legacy)
     * **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return TeamRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository-legacy">Check team permissions for a repository (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamRepository teamsCheckPermissionsForRepoLegacy(Integer teamId, String owner, String repo) throws ApiException {
        ApiResponse<TeamRepository> localVarResp = teamsCheckPermissionsForRepoLegacyWithHttpInfo(teamId, owner, repo);
        return localVarResp.getData();
    }

    /**
     * Check team permissions for a repository (Legacy)
     * **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;TeamRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository-legacy">Check team permissions for a repository (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamRepository> teamsCheckPermissionsForRepoLegacyWithHttpInfo(Integer teamId, String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = teamsCheckPermissionsForRepoLegacyValidateBeforeCall(teamId, owner, repo, null);
        Type localVarReturnType = new TypeToken<TeamRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check team permissions for a repository (Legacy) (asynchronously)
     * **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#check-team-permissions-for-a-repository-legacy">Check team permissions for a repository (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCheckPermissionsForRepoLegacyAsync(Integer teamId, String owner, String repo, final ApiCallback<TeamRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCheckPermissionsForRepoLegacyValidateBeforeCall(teamId, owner, repo, _callback);
        Type localVarReturnType = new TypeToken<TeamRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreate
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public okhttp3.Call teamsCreateCall(String org, TeamsCreateRequest teamsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateValidateBeforeCall(String org, TeamsCreateRequest teamsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsCreate(Async)");
        }

        // verify the required parameter 'teamsCreateRequest' is set
        if (teamsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateRequest' when calling teamsCreate(Async)");
        }

        return teamsCreateCall(org, teamsCreateRequest, _callback);

    }

    /**
     * Create a team
     * To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public TeamFull teamsCreate(String org, TeamsCreateRequest teamsCreateRequest) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsCreateWithHttpInfo(org, teamsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a team
     * To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public ApiResponse<TeamFull> teamsCreateWithHttpInfo(String org, TeamsCreateRequest teamsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(org, teamsCreateRequest, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a team (asynchronously)
     * To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public okhttp3.Call teamsCreateAsync(String org, TeamsCreateRequest teamsCreateRequest, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(org, teamsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateDiscussionCommentInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionCommentInOrgCall(String org, String teamSlug, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionCommentInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateDiscussionCommentInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsCreateDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsCreateDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsCreateDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
        if (teamsCreateDiscussionCommentInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsCreateDiscussionCommentInOrg(Async)");
        }

        return teamsCreateDiscussionCommentInOrgCall(org, teamSlug, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);

    }

    /**
     * Create a discussion comment
     * Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public TeamDiscussionComment teamsCreateDiscussionCommentInOrg(String org, String teamSlug, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsCreateDiscussionCommentInOrgWithHttpInfo(org, teamSlug, discussionNumber, teamsCreateDiscussionCommentInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create a discussion comment
     * Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public ApiResponse<TeamDiscussionComment> teamsCreateDiscussionCommentInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a discussion comment (asynchronously)
     * Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionCommentInOrgAsync(String org, String teamSlug, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateDiscussionCommentLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment-legacy">Create a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCreateDiscussionCommentLegacyCall(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionCommentInOrgRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateDiscussionCommentLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCreateDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsCreateDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
        if (teamsCreateDiscussionCommentInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsCreateDiscussionCommentLegacy(Async)");
        }

        return teamsCreateDiscussionCommentLegacyCall(teamId, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);

    }

    /**
     * Create a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment-legacy">Create a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamDiscussionComment teamsCreateDiscussionCommentLegacy(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsCreateDiscussionCommentLegacyWithHttpInfo(teamId, discussionNumber, teamsCreateDiscussionCommentInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment-legacy">Create a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamDiscussionComment> teamsCreateDiscussionCommentLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a discussion comment (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-comment-legacy">Create a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCreateDiscussionCommentLegacyAsync(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateDiscussionInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionInOrgCall(String org, String teamSlug, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateDiscussionInOrgValidateBeforeCall(String org, String teamSlug, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsCreateDiscussionInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsCreateDiscussionInOrg(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionInOrgRequest' is set
        if (teamsCreateDiscussionInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionInOrgRequest' when calling teamsCreateDiscussionInOrg(Async)");
        }

        return teamsCreateDiscussionInOrgCall(org, teamSlug, teamsCreateDiscussionInOrgRequest, _callback);

    }

    /**
     * Create a discussion
     * Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public TeamDiscussion teamsCreateDiscussionInOrg(String org, String teamSlug, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsCreateDiscussionInOrgWithHttpInfo(org, teamSlug, teamsCreateDiscussionInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create a discussion
     * Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public ApiResponse<TeamDiscussion> teamsCreateDiscussionInOrgWithHttpInfo(String org, String teamSlug, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateDiscussionInOrgValidateBeforeCall(org, teamSlug, teamsCreateDiscussionInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a discussion (asynchronously)
     * Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionInOrgAsync(String org, String teamSlug, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateDiscussionInOrgValidateBeforeCall(org, teamSlug, teamsCreateDiscussionInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateDiscussionLegacy
     * @param teamId  (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-legacy">Create a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCreateDiscussionLegacyCall(Integer teamId, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionInOrgRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateDiscussionLegacyValidateBeforeCall(Integer teamId, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCreateDiscussionLegacy(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionInOrgRequest' is set
        if (teamsCreateDiscussionInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionInOrgRequest' when calling teamsCreateDiscussionLegacy(Async)");
        }

        return teamsCreateDiscussionLegacyCall(teamId, teamsCreateDiscussionInOrgRequest, _callback);

    }

    /**
     * Create a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create a discussion&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-legacy">Create a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamDiscussion teamsCreateDiscussionLegacy(Integer teamId, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsCreateDiscussionLegacyWithHttpInfo(teamId, teamsCreateDiscussionInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create a discussion&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-legacy">Create a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamDiscussion> teamsCreateDiscussionLegacyWithHttpInfo(Integer teamId, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateDiscussionLegacyValidateBeforeCall(teamId, teamsCreateDiscussionInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a discussion (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create a discussion&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param teamsCreateDiscussionInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-discussion-legacy">Create a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsCreateDiscussionLegacyAsync(Integer teamId, TeamsCreateDiscussionInOrgRequest teamsCreateDiscussionInOrgRequest, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateDiscussionLegacyValidateBeforeCall(teamId, teamsCreateDiscussionInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteDiscussionCommentInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionCommentInOrgCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteDiscussionCommentInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsDeleteDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsDeleteDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsDeleteDiscussionCommentInOrg(Async)");
        }

        return teamsDeleteDiscussionCommentInOrgCall(org, teamSlug, discussionNumber, commentNumber, _callback);

    }

    /**
     * Delete a discussion comment
     * Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public void teamsDeleteDiscussionCommentInOrg(String org, String teamSlug, Integer discussionNumber, Integer commentNumber) throws ApiException {
        teamsDeleteDiscussionCommentInOrgWithHttpInfo(org, teamSlug, discussionNumber, commentNumber);
    }

    /**
     * Delete a discussion comment
     * Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public ApiResponse<Void> teamsDeleteDiscussionCommentInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, Integer commentNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a discussion comment (asynchronously)
     * Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionCommentInOrgAsync(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteDiscussionCommentLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment-legacy">Delete a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsDeleteDiscussionCommentLegacyCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteDiscussionCommentLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDeleteDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsDeleteDiscussionCommentLegacy(Async)");
        }

        return teamsDeleteDiscussionCommentLegacyCall(teamId, discussionNumber, commentNumber, _callback);

    }

    /**
     * Delete a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment-legacy">Delete a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsDeleteDiscussionCommentLegacy(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        teamsDeleteDiscussionCommentLegacyWithHttpInfo(teamId, discussionNumber, commentNumber);
    }

    /**
     * Delete a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment-legacy">Delete a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsDeleteDiscussionCommentLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a discussion comment (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-comment-legacy">Delete a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsDeleteDiscussionCommentLegacyAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteDiscussionInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionInOrgCall(String org, String teamSlug, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteDiscussionInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsDeleteDiscussionInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsDeleteDiscussionInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionInOrg(Async)");
        }

        return teamsDeleteDiscussionInOrgCall(org, teamSlug, discussionNumber, _callback);

    }

    /**
     * Delete a discussion
     * Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public void teamsDeleteDiscussionInOrg(String org, String teamSlug, Integer discussionNumber) throws ApiException {
        teamsDeleteDiscussionInOrgWithHttpInfo(org, teamSlug, discussionNumber);
    }

    /**
     * Delete a discussion
     * Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public ApiResponse<Void> teamsDeleteDiscussionInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a discussion (asynchronously)
     * Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionInOrgAsync(String org, String teamSlug, Integer discussionNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteDiscussionLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-legacy">Delete a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsDeleteDiscussionLegacyCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteDiscussionLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDeleteDiscussionLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionLegacy(Async)");
        }

        return teamsDeleteDiscussionLegacyCall(teamId, discussionNumber, _callback);

    }

    /**
     * Delete a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Delete a discussion&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-legacy">Delete a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsDeleteDiscussionLegacy(Integer teamId, Integer discussionNumber) throws ApiException {
        teamsDeleteDiscussionLegacyWithHttpInfo(teamId, discussionNumber);
    }

    /**
     * Delete a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Delete a discussion&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-legacy">Delete a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsDeleteDiscussionLegacyWithHttpInfo(Integer teamId, Integer discussionNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a discussion (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Delete a discussion&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-discussion-legacy">Delete a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsDeleteDiscussionLegacyAsync(Integer teamId, Integer discussionNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-team">Delete a team Documentation</a>
     */
    public okhttp3.Call teamsDeleteInOrgCall(String org, String teamSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteInOrgValidateBeforeCall(String org, String teamSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsDeleteInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsDeleteInOrg(Async)");
        }

        return teamsDeleteInOrgCall(org, teamSlug, _callback);

    }

    /**
     * Delete a team
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-team">Delete a team Documentation</a>
     */
    public void teamsDeleteInOrg(String org, String teamSlug) throws ApiException {
        teamsDeleteInOrgWithHttpInfo(org, teamSlug);
    }

    /**
     * Delete a team
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-team">Delete a team Documentation</a>
     */
    public ApiResponse<Void> teamsDeleteInOrgWithHttpInfo(String org, String teamSlug) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteInOrgValidateBeforeCall(org, teamSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a team (asynchronously)
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-team">Delete a team Documentation</a>
     */
    public okhttp3.Call teamsDeleteInOrgAsync(String org, String teamSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteInOrgValidateBeforeCall(org, teamSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteLegacy
     * @param teamId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#delete-a-team-legacy">Delete a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsDeleteLegacyCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteLegacyValidateBeforeCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDeleteLegacy(Async)");
        }

        return teamsDeleteLegacyCall(teamId, _callback);

    }

    /**
     * Delete a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param teamId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#delete-a-team-legacy">Delete a team (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsDeleteLegacy(Integer teamId) throws ApiException {
        teamsDeleteLegacyWithHttpInfo(teamId);
    }

    /**
     * Delete a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param teamId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#delete-a-team-legacy">Delete a team (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsDeleteLegacyWithHttpInfo(Integer teamId) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteLegacyValidateBeforeCall(teamId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a team (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param teamId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#delete-a-team-legacy">Delete a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsDeleteLegacyAsync(Integer teamId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteLegacyValidateBeforeCall(teamId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetByName
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public okhttp3.Call teamsGetByNameCall(String org, String teamSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetByNameValidateBeforeCall(String org, String teamSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsGetByName(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsGetByName(Async)");
        }

        return teamsGetByNameCall(org, teamSlug, _callback);

    }

    /**
     * Get a team by name
     * Gets a team using the team&#39;s &#x60;slug&#x60;. GitHub Enterprise Server generates the &#x60;slug&#x60; from the team &#x60;name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public TeamFull teamsGetByName(String org, String teamSlug) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsGetByNameWithHttpInfo(org, teamSlug);
        return localVarResp.getData();
    }

    /**
     * Get a team by name
     * Gets a team using the team&#39;s &#x60;slug&#x60;. GitHub Enterprise Server generates the &#x60;slug&#x60; from the team &#x60;name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public ApiResponse<TeamFull> teamsGetByNameWithHttpInfo(String org, String teamSlug) throws ApiException {
        okhttp3.Call localVarCall = teamsGetByNameValidateBeforeCall(org, teamSlug, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a team by name (asynchronously)
     * Gets a team using the team&#39;s &#x60;slug&#x60;. GitHub Enterprise Server generates the &#x60;slug&#x60; from the team &#x60;name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public okhttp3.Call teamsGetByNameAsync(String org, String teamSlug, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetByNameValidateBeforeCall(org, teamSlug, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetDiscussionCommentInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionCommentInOrgCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetDiscussionCommentInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsGetDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsGetDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsGetDiscussionCommentInOrg(Async)");
        }

        return teamsGetDiscussionCommentInOrgCall(org, teamSlug, discussionNumber, commentNumber, _callback);

    }

    /**
     * Get a discussion comment
     * Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public TeamDiscussionComment teamsGetDiscussionCommentInOrg(String org, String teamSlug, Integer discussionNumber, Integer commentNumber) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsGetDiscussionCommentInOrgWithHttpInfo(org, teamSlug, discussionNumber, commentNumber);
        return localVarResp.getData();
    }

    /**
     * Get a discussion comment
     * Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public ApiResponse<TeamDiscussionComment> teamsGetDiscussionCommentInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, Integer commentNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsGetDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a discussion comment (asynchronously)
     * Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionCommentInOrgAsync(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetDiscussionCommentLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment-legacy">Get a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetDiscussionCommentLegacyCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetDiscussionCommentLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsGetDiscussionCommentLegacy(Async)");
        }

        return teamsGetDiscussionCommentLegacyCall(teamId, discussionNumber, commentNumber, _callback);

    }

    /**
     * Get a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment-legacy">Get a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamDiscussionComment teamsGetDiscussionCommentLegacy(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsGetDiscussionCommentLegacyWithHttpInfo(teamId, discussionNumber, commentNumber);
        return localVarResp.getData();
    }

    /**
     * Get a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment-legacy">Get a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamDiscussionComment> teamsGetDiscussionCommentLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsGetDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a discussion comment (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-comment-legacy">Get a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetDiscussionCommentLegacyAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetDiscussionInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionInOrgCall(String org, String teamSlug, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetDiscussionInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsGetDiscussionInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsGetDiscussionInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionInOrg(Async)");
        }

        return teamsGetDiscussionInOrgCall(org, teamSlug, discussionNumber, _callback);

    }

    /**
     * Get a discussion
     * Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public TeamDiscussion teamsGetDiscussionInOrg(String org, String teamSlug, Integer discussionNumber) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsGetDiscussionInOrgWithHttpInfo(org, teamSlug, discussionNumber);
        return localVarResp.getData();
    }

    /**
     * Get a discussion
     * Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public ApiResponse<TeamDiscussion> teamsGetDiscussionInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsGetDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a discussion (asynchronously)
     * Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionInOrgAsync(String org, String teamSlug, Integer discussionNumber, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetDiscussionLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-legacy">Get a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetDiscussionLegacyCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetDiscussionLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetDiscussionLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionLegacy(Async)");
        }

        return teamsGetDiscussionLegacyCall(teamId, discussionNumber, _callback);

    }

    /**
     * Get a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-legacy">Get a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamDiscussion teamsGetDiscussionLegacy(Integer teamId, Integer discussionNumber) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsGetDiscussionLegacyWithHttpInfo(teamId, discussionNumber);
        return localVarResp.getData();
    }

    /**
     * Get a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-legacy">Get a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamDiscussion> teamsGetDiscussionLegacyWithHttpInfo(Integer teamId, Integer discussionNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsGetDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a discussion (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-discussion-legacy">Get a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetDiscussionLegacyAsync(Integer teamId, Integer discussionNumber, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetLegacy
     * @param teamId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#get-a-team-legacy">Get a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetLegacyCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetLegacyValidateBeforeCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetLegacy(Async)");
        }

        return teamsGetLegacyCall(teamId, _callback);

    }

    /**
     * Get a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-team-by-name) endpoint.
     * @param teamId  (required)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#get-a-team-legacy">Get a team (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamFull teamsGetLegacy(Integer teamId) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsGetLegacyWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-team-by-name) endpoint.
     * @param teamId  (required)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#get-a-team-legacy">Get a team (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamFull> teamsGetLegacyWithHttpInfo(Integer teamId) throws ApiException {
        okhttp3.Call localVarCall = teamsGetLegacyValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a team (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-a-team-by-name) endpoint.
     * @param teamId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#get-a-team-legacy">Get a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetLegacyAsync(Integer teamId, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetLegacyValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetMemberLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetMemberLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetMemberLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetMemberLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsGetMemberLegacy(Async)");
        }

        return teamsGetMemberLegacyCall(teamId, username, _callback);

    }

    /**
     * Get team member (Legacy)
     * The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsGetMemberLegacy(Integer teamId, String username) throws ApiException {
        teamsGetMemberLegacyWithHttpInfo(teamId, username);
    }

    /**
     * Get team member (Legacy)
     * The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsGetMemberLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsGetMemberLegacyValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get team member (Legacy) (asynchronously)
     * The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetMemberLegacyAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetMemberLegacyValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetMembershipForUserInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user has no team membership </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsGetMembershipForUserInOrgCall(String org, String teamSlug, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/memberships/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetMembershipForUserInOrgValidateBeforeCall(String org, String teamSlug, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsGetMembershipForUserInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsGetMembershipForUserInOrg(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsGetMembershipForUserInOrg(Async)");
        }

        return teamsGetMembershipForUserInOrgCall(org, teamSlug, username, _callback);

    }

    /**
     * Get team membership for a user
     * Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see see [Create a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team).
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @return TeamMembership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user has no team membership </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public TeamMembership teamsGetMembershipForUserInOrg(String org, String teamSlug, String username) throws ApiException {
        ApiResponse<TeamMembership> localVarResp = teamsGetMembershipForUserInOrgWithHttpInfo(org, teamSlug, username);
        return localVarResp.getData();
    }

    /**
     * Get team membership for a user
     * Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see see [Create a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team).
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @return ApiResponse&lt;TeamMembership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user has no team membership </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public ApiResponse<TeamMembership> teamsGetMembershipForUserInOrgWithHttpInfo(String org, String teamSlug, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsGetMembershipForUserInOrgValidateBeforeCall(org, teamSlug, username, null);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team membership for a user (asynchronously)
     * Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see see [Create a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team).
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user has no team membership </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsGetMembershipForUserInOrgAsync(String org, String teamSlug, String username, final ApiCallback<TeamMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetMembershipForUserInOrgValidateBeforeCall(org, teamSlug, username, _callback);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetMembershipForUserLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user-legacy">Get team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetMembershipForUserLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/memberships/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetMembershipForUserLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetMembershipForUserLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsGetMembershipForUserLegacy(Async)");
        }

        return teamsGetMembershipForUserLegacyCall(teamId, username, _callback);

    }

    /**
     * Get team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team).
     * @param teamId  (required)
     * @param username  (required)
     * @return TeamMembership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user-legacy">Get team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamMembership teamsGetMembershipForUserLegacy(Integer teamId, String username) throws ApiException {
        ApiResponse<TeamMembership> localVarResp = teamsGetMembershipForUserLegacyWithHttpInfo(teamId, username);
        return localVarResp.getData();
    }

    /**
     * Get team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team).
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;TeamMembership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user-legacy">Get team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamMembership> teamsGetMembershipForUserLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsGetMembershipForUserLegacyValidateBeforeCall(teamId, username, null);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team membership for a user (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#create-a-team).
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#get-team-membership-for-a-user-legacy">Get team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetMembershipForUserLegacyAsync(Integer teamId, String username, final ApiCallback<TeamMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetMembershipForUserLegacyValidateBeforeCall(teamId, username, _callback);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsList
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public okhttp3.Call teamsListCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsList(Async)");
        }

        return teamsListCall(org, perPage, page, _callback);

    }

    /**
     * List teams
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public List<Team> teamsList(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Team>> localVarResp = teamsListWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List teams
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public ApiResponse<List<Team>> teamsListWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List teams (asynchronously)
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public okhttp3.Call teamsListAsync(String org, Integer perPage, Integer page, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListChildInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-child-teams">List child teams Documentation</a>
     */
    public okhttp3.Call teamsListChildInOrgCall(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/teams"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListChildInOrgValidateBeforeCall(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsListChildInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsListChildInOrg(Async)");
        }

        return teamsListChildInOrgCall(org, teamSlug, perPage, page, _callback);

    }

    /**
     * List child teams
     * Lists the child teams of the team specified by &#x60;{team_slug}&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/teams&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-child-teams">List child teams Documentation</a>
     */
    public List<Team> teamsListChildInOrg(String org, String teamSlug, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Team>> localVarResp = teamsListChildInOrgWithHttpInfo(org, teamSlug, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List child teams
     * Lists the child teams of the team specified by &#x60;{team_slug}&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/teams&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-child-teams">List child teams Documentation</a>
     */
    public ApiResponse<List<Team>> teamsListChildInOrgWithHttpInfo(String org, String teamSlug, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListChildInOrgValidateBeforeCall(org, teamSlug, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List child teams (asynchronously)
     * Lists the child teams of the team specified by &#x60;{team_slug}&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/teams&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-child-teams">List child teams Documentation</a>
     */
    public okhttp3.Call teamsListChildInOrgAsync(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListChildInOrgValidateBeforeCall(org, teamSlug, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListChildLegacy
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-child-teams-legacy">List child teams (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListChildLegacyCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/teams"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListChildLegacyValidateBeforeCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListChildLegacy(Async)");
        }

        return teamsListChildLegacyCall(teamId, perPage, page, _callback);

    }

    /**
     * List child teams (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List child teams&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-child-teams) endpoint.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-child-teams-legacy">List child teams (Legacy) Documentation</a>
     */
    @Deprecated
    public List<Team> teamsListChildLegacy(Integer teamId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Team>> localVarResp = teamsListChildLegacyWithHttpInfo(teamId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List child teams (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List child teams&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-child-teams) endpoint.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-child-teams-legacy">List child teams (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<Team>> teamsListChildLegacyWithHttpInfo(Integer teamId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListChildLegacyValidateBeforeCall(teamId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List child teams (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List child teams&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-child-teams) endpoint.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-child-teams-legacy">List child teams (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListChildLegacyAsync(Integer teamId, Integer perPage, Integer page, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListChildLegacyValidateBeforeCall(teamId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListDiscussionCommentsInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionCommentsInOrgCall(String org, String teamSlug, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListDiscussionCommentsInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsListDiscussionCommentsInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsListDiscussionCommentsInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsListDiscussionCommentsInOrg(Async)");
        }

        return teamsListDiscussionCommentsInOrgCall(org, teamSlug, discussionNumber, direction, perPage, page, _callback);

    }

    /**
     * List discussion comments
     * List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public List<TeamDiscussionComment> teamsListDiscussionCommentsInOrg(String org, String teamSlug, Integer discussionNumber, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamDiscussionComment>> localVarResp = teamsListDiscussionCommentsInOrgWithHttpInfo(org, teamSlug, discussionNumber, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List discussion comments
     * List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamDiscussionComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public ApiResponse<List<TeamDiscussionComment>> teamsListDiscussionCommentsInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListDiscussionCommentsInOrgValidateBeforeCall(org, teamSlug, discussionNumber, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamDiscussionComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List discussion comments (asynchronously)
     * List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionCommentsInOrgAsync(String org, String teamSlug, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback<List<TeamDiscussionComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListDiscussionCommentsInOrgValidateBeforeCall(org, teamSlug, discussionNumber, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDiscussionComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListDiscussionCommentsLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments-legacy">List discussion comments (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListDiscussionCommentsLegacyCall(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListDiscussionCommentsLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListDiscussionCommentsLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsListDiscussionCommentsLegacy(Async)");
        }

        return teamsListDiscussionCommentsLegacyCall(teamId, discussionNumber, direction, perPage, page, _callback);

    }

    /**
     * List discussion comments (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments-legacy">List discussion comments (Legacy) Documentation</a>
     */
    @Deprecated
    public List<TeamDiscussionComment> teamsListDiscussionCommentsLegacy(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamDiscussionComment>> localVarResp = teamsListDiscussionCommentsLegacyWithHttpInfo(teamId, discussionNumber, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List discussion comments (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamDiscussionComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments-legacy">List discussion comments (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<TeamDiscussionComment>> teamsListDiscussionCommentsLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListDiscussionCommentsLegacyValidateBeforeCall(teamId, discussionNumber, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamDiscussionComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List discussion comments (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussion-comments-legacy">List discussion comments (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListDiscussionCommentsLegacyAsync(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback<List<TeamDiscussionComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListDiscussionCommentsLegacyValidateBeforeCall(teamId, discussionNumber, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDiscussionComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListDiscussionsInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param pinned Pinned discussions only filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionsInOrgCall(String org, String teamSlug, String direction, Integer perPage, Integer page, String pinned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pinned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pinned", pinned));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListDiscussionsInOrgValidateBeforeCall(String org, String teamSlug, String direction, Integer perPage, Integer page, String pinned, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsListDiscussionsInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsListDiscussionsInOrg(Async)");
        }

        return teamsListDiscussionsInOrgCall(org, teamSlug, direction, perPage, page, pinned, _callback);

    }

    /**
     * List discussions
     * List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param pinned Pinned discussions only filter (optional)
     * @return List&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public List<TeamDiscussion> teamsListDiscussionsInOrg(String org, String teamSlug, String direction, Integer perPage, Integer page, String pinned) throws ApiException {
        ApiResponse<List<TeamDiscussion>> localVarResp = teamsListDiscussionsInOrgWithHttpInfo(org, teamSlug, direction, perPage, page, pinned);
        return localVarResp.getData();
    }

    /**
     * List discussions
     * List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param pinned Pinned discussions only filter (optional)
     * @return ApiResponse&lt;List&lt;TeamDiscussion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public ApiResponse<List<TeamDiscussion>> teamsListDiscussionsInOrgWithHttpInfo(String org, String teamSlug, String direction, Integer perPage, Integer page, String pinned) throws ApiException {
        okhttp3.Call localVarCall = teamsListDiscussionsInOrgValidateBeforeCall(org, teamSlug, direction, perPage, page, pinned, null);
        Type localVarReturnType = new TypeToken<List<TeamDiscussion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List discussions (asynchronously)
     * List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param pinned Pinned discussions only filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionsInOrgAsync(String org, String teamSlug, String direction, Integer perPage, Integer page, String pinned, final ApiCallback<List<TeamDiscussion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListDiscussionsInOrgValidateBeforeCall(org, teamSlug, direction, perPage, page, pinned, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDiscussion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListDiscussionsLegacy
     * @param teamId  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions-legacy">List discussions (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListDiscussionsLegacyCall(Integer teamId, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListDiscussionsLegacyValidateBeforeCall(Integer teamId, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListDiscussionsLegacy(Async)");
        }

        return teamsListDiscussionsLegacyCall(teamId, direction, perPage, page, _callback);

    }

    /**
     * List discussions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List discussions&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions-legacy">List discussions (Legacy) Documentation</a>
     */
    @Deprecated
    public List<TeamDiscussion> teamsListDiscussionsLegacy(Integer teamId, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamDiscussion>> localVarResp = teamsListDiscussionsLegacyWithHttpInfo(teamId, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List discussions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List discussions&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamDiscussion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions-legacy">List discussions (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<TeamDiscussion>> teamsListDiscussionsLegacyWithHttpInfo(Integer teamId, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListDiscussionsLegacyValidateBeforeCall(teamId, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamDiscussion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List discussions (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List discussions&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-discussions-legacy">List discussions (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListDiscussionsLegacyAsync(Integer teamId, String direction, Integer perPage, Integer page, final ApiCallback<List<TeamDiscussion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListDiscussionsLegacyValidateBeforeCall(teamId, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDiscussion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListForAuthenticatedUser
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public okhttp3.Call teamsListForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return teamsListForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List teams for the authenticated user
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/).
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public List<TeamFull> teamsListForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamFull>> localVarResp = teamsListForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List teams for the authenticated user
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/).
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamFull&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public ApiResponse<List<TeamFull>> teamsListForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamFull>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List teams for the authenticated user (asynchronously)
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/).
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public okhttp3.Call teamsListForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<TeamFull>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamFull>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListMembersInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public okhttp3.Call teamsListMembersInOrgCall(String org, String teamSlug, String role, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/members"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListMembersInOrgValidateBeforeCall(String org, String teamSlug, String role, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsListMembersInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsListMembersInOrg(Async)");
        }

        return teamsListMembersInOrgCall(org, teamSlug, role, perPage, page, _callback);

    }

    /**
     * List team members
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public List<SimpleUser> teamsListMembersInOrg(String org, String teamSlug, String role, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = teamsListMembersInOrgWithHttpInfo(org, teamSlug, role, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team members
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> teamsListMembersInOrgWithHttpInfo(String org, String teamSlug, String role, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListMembersInOrgValidateBeforeCall(org, teamSlug, role, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team members (asynchronously)
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public okhttp3.Call teamsListMembersInOrgAsync(String org, String teamSlug, String role, Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListMembersInOrgValidateBeforeCall(org, teamSlug, role, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListMembersLegacy
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members-legacy">List team members (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListMembersLegacyCall(Integer teamId, String role, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListMembersLegacyValidateBeforeCall(Integer teamId, String role, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListMembersLegacy(Async)");
        }

        return teamsListMembersLegacyCall(teamId, role, perPage, page, _callback);

    }

    /**
     * List team members (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team members&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members-legacy">List team members (Legacy) Documentation</a>
     */
    @Deprecated
    public List<SimpleUser> teamsListMembersLegacy(Integer teamId, String role, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = teamsListMembersLegacyWithHttpInfo(teamId, role, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team members (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team members&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members-legacy">List team members (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<SimpleUser>> teamsListMembersLegacyWithHttpInfo(Integer teamId, String role, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListMembersLegacyValidateBeforeCall(teamId, role, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team members (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team members&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-members-legacy">List team members (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListMembersLegacyAsync(Integer teamId, String role, Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListMembersLegacyValidateBeforeCall(teamId, role, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListProjectsInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-projects">List team projects Documentation</a>
     */
    public okhttp3.Call teamsListProjectsInOrgCall(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/projects"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListProjectsInOrgValidateBeforeCall(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsListProjectsInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsListProjectsInOrg(Async)");
        }

        return teamsListProjectsInOrgCall(org, teamSlug, perPage, page, _callback);

    }

    /**
     * List team projects
     * Lists the organization projects for a team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-projects">List team projects Documentation</a>
     */
    public List<TeamProject> teamsListProjectsInOrg(String org, String teamSlug, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamProject>> localVarResp = teamsListProjectsInOrgWithHttpInfo(org, teamSlug, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team projects
     * Lists the organization projects for a team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamProject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-projects">List team projects Documentation</a>
     */
    public ApiResponse<List<TeamProject>> teamsListProjectsInOrgWithHttpInfo(String org, String teamSlug, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListProjectsInOrgValidateBeforeCall(org, teamSlug, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamProject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team projects (asynchronously)
     * Lists the organization projects for a team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-projects">List team projects Documentation</a>
     */
    public okhttp3.Call teamsListProjectsInOrgAsync(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback<List<TeamProject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListProjectsInOrgValidateBeforeCall(org, teamSlug, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamProject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListProjectsLegacy
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-projects-legacy">List team projects (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListProjectsLegacyCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListProjectsLegacyValidateBeforeCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListProjectsLegacy(Async)");
        }

        return teamsListProjectsLegacyCall(teamId, perPage, page, _callback);

    }

    /**
     * List team projects (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team projects&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-projects-legacy">List team projects (Legacy) Documentation</a>
     */
    @Deprecated
    public List<TeamProject> teamsListProjectsLegacy(Integer teamId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamProject>> localVarResp = teamsListProjectsLegacyWithHttpInfo(teamId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team projects (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team projects&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamProject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-projects-legacy">List team projects (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<TeamProject>> teamsListProjectsLegacyWithHttpInfo(Integer teamId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListProjectsLegacyValidateBeforeCall(teamId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamProject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team projects (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team projects&#x60;](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-projects-legacy">List team projects (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListProjectsLegacyAsync(Integer teamId, Integer perPage, Integer page, final ApiCallback<List<TeamProject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListProjectsLegacyValidateBeforeCall(teamId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamProject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListReposInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-repositories">List team repositories Documentation</a>
     */
    public okhttp3.Call teamsListReposInOrgCall(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/repos"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListReposInOrgValidateBeforeCall(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsListReposInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsListReposInOrg(Async)");
        }

        return teamsListReposInOrgCall(org, teamSlug, perPage, page, _callback);

    }

    /**
     * List team repositories
     * Lists a team&#39;s repositories visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-repositories">List team repositories Documentation</a>
     */
    public List<MinimalRepository> teamsListReposInOrg(String org, String teamSlug, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = teamsListReposInOrgWithHttpInfo(org, teamSlug, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team repositories
     * Lists a team&#39;s repositories visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-repositories">List team repositories Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> teamsListReposInOrgWithHttpInfo(String org, String teamSlug, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListReposInOrgValidateBeforeCall(org, teamSlug, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team repositories (asynchronously)
     * Lists a team&#39;s repositories visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-repositories">List team repositories Documentation</a>
     */
    public okhttp3.Call teamsListReposInOrgAsync(String org, String teamSlug, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListReposInOrgValidateBeforeCall(org, teamSlug, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListReposLegacy
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-repositories-legacy">List team repositories (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListReposLegacyCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListReposLegacyValidateBeforeCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListReposLegacy(Async)");
        }

        return teamsListReposLegacyCall(teamId, perPage, page, _callback);

    }

    /**
     * List team repositories (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-repositories) endpoint.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-repositories-legacy">List team repositories (Legacy) Documentation</a>
     */
    @Deprecated
    public List<MinimalRepository> teamsListReposLegacy(Integer teamId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = teamsListReposLegacyWithHttpInfo(teamId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team repositories (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-repositories) endpoint.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-repositories-legacy">List team repositories (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<MinimalRepository>> teamsListReposLegacyWithHttpInfo(Integer teamId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListReposLegacyValidateBeforeCall(teamId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team repositories (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#list-team-repositories) endpoint.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#list-team-repositories-legacy">List team repositories (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsListReposLegacyAsync(Integer teamId, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListReposLegacyValidateBeforeCall(teamId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveMemberLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveMemberLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveMemberLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveMemberLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsRemoveMemberLegacy(Async)");
        }

        return teamsRemoveMemberLegacyCall(teamId, username, _callback);

    }

    /**
     * Remove team member (Legacy)
     * The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsRemoveMemberLegacy(Integer teamId, String username) throws ApiException {
        teamsRemoveMemberLegacyWithHttpInfo(teamId, username);
    }

    /**
     * Remove team member (Legacy)
     * The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsRemoveMemberLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveMemberLegacyValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove team member (Legacy) (asynchronously)
     * The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveMemberLegacyAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveMemberLegacyValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveMembershipForUserInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsRemoveMembershipForUserInOrgCall(String org, String teamSlug, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/memberships/{username}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveMembershipForUserInOrgValidateBeforeCall(String org, String teamSlug, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsRemoveMembershipForUserInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsRemoveMembershipForUserInOrg(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsRemoveMembershipForUserInOrg(Async)");
        }

        return teamsRemoveMembershipForUserInOrgCall(org, teamSlug, username, _callback);

    }

    /**
     * Remove team membership for a user
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public void teamsRemoveMembershipForUserInOrg(String org, String teamSlug, String username) throws ApiException {
        teamsRemoveMembershipForUserInOrgWithHttpInfo(org, teamSlug, username);
    }

    /**
     * Remove team membership for a user
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public ApiResponse<Void> teamsRemoveMembershipForUserInOrgWithHttpInfo(String org, String teamSlug, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveMembershipForUserInOrgValidateBeforeCall(org, teamSlug, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove team membership for a user (asynchronously)
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsRemoveMembershipForUserInOrgAsync(String org, String teamSlug, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveMembershipForUserInOrgValidateBeforeCall(org, teamSlug, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveMembershipForUserLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user-legacy">Remove team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveMembershipForUserLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/memberships/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveMembershipForUserLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveMembershipForUserLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsRemoveMembershipForUserLegacy(Async)");
        }

        return teamsRemoveMembershipForUserLegacyCall(teamId, username, _callback);

    }

    /**
     * Remove team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user-legacy">Remove team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsRemoveMembershipForUserLegacy(Integer teamId, String username) throws ApiException {
        teamsRemoveMembershipForUserLegacyWithHttpInfo(teamId, username);
    }

    /**
     * Remove team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user-legacy">Remove team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsRemoveMembershipForUserLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveMembershipForUserLegacyValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove team membership for a user (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> if team synchronization is set up </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-team-membership-for-a-user-legacy">Remove team membership for a user (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveMembershipForUserLegacyAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveMembershipForUserLegacyValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveProjectInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveProjectInOrgCall(String org, String teamSlug, Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/projects/{project_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveProjectInOrgValidateBeforeCall(String org, String teamSlug, Integer projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsRemoveProjectInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsRemoveProjectInOrg(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsRemoveProjectInOrg(Async)");
        }

        return teamsRemoveProjectInOrgCall(org, teamSlug, projectId, _callback);

    }

    /**
     * Remove a project from a team
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public void teamsRemoveProjectInOrg(String org, String teamSlug, Integer projectId) throws ApiException {
        teamsRemoveProjectInOrgWithHttpInfo(org, teamSlug, projectId);
    }

    /**
     * Remove a project from a team
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public ApiResponse<Void> teamsRemoveProjectInOrgWithHttpInfo(String org, String teamSlug, Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveProjectInOrgValidateBeforeCall(org, teamSlug, projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a project from a team (asynchronously)
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveProjectInOrgAsync(String org, String teamSlug, Integer projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveProjectInOrgValidateBeforeCall(org, teamSlug, projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveProjectLegacy
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-project-from-a-team-legacy">Remove a project from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveProjectLegacyCall(Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects/{project_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveProjectLegacyValidateBeforeCall(Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveProjectLegacy(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsRemoveProjectLegacy(Async)");
        }

        return teamsRemoveProjectLegacyCall(teamId, projectId, _callback);

    }

    /**
     * Remove a project from a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param teamId  (required)
     * @param projectId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-project-from-a-team-legacy">Remove a project from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsRemoveProjectLegacy(Integer teamId, Integer projectId) throws ApiException {
        teamsRemoveProjectLegacyWithHttpInfo(teamId, projectId);
    }

    /**
     * Remove a project from a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param teamId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-project-from-a-team-legacy">Remove a project from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsRemoveProjectLegacyWithHttpInfo(Integer teamId, Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveProjectLegacyValidateBeforeCall(teamId, projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a project from a team (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-project-from-a-team-legacy">Remove a project from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveProjectLegacyAsync(Integer teamId, Integer projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveProjectLegacyValidateBeforeCall(teamId, projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveRepoInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveRepoInOrgCall(String org, String teamSlug, String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveRepoInOrgValidateBeforeCall(String org, String teamSlug, String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsRemoveRepoInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsRemoveRepoInOrg(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsRemoveRepoInOrg(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsRemoveRepoInOrg(Async)");
        }

        return teamsRemoveRepoInOrgCall(org, teamSlug, owner, repo, _callback);

    }

    /**
     * Remove a repository from a team
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public void teamsRemoveRepoInOrg(String org, String teamSlug, String owner, String repo) throws ApiException {
        teamsRemoveRepoInOrgWithHttpInfo(org, teamSlug, owner, repo);
    }

    /**
     * Remove a repository from a team
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public ApiResponse<Void> teamsRemoveRepoInOrgWithHttpInfo(String org, String teamSlug, String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveRepoInOrgValidateBeforeCall(org, teamSlug, owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a repository from a team (asynchronously)
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveRepoInOrgAsync(String org, String teamSlug, String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveRepoInOrgValidateBeforeCall(org, teamSlug, owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveRepoLegacy
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team-legacy">Remove a repository from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveRepoLegacyCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos/{owner}/{repo}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveRepoLegacyValidateBeforeCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveRepoLegacy(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsRemoveRepoLegacy(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsRemoveRepoLegacy(Async)");
        }

        return teamsRemoveRepoLegacyCall(teamId, owner, repo, _callback);

    }

    /**
     * Remove a repository from a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team-legacy">Remove a repository from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsRemoveRepoLegacy(Integer teamId, String owner, String repo) throws ApiException {
        teamsRemoveRepoLegacyWithHttpInfo(teamId, owner, repo);
    }

    /**
     * Remove a repository from a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team-legacy">Remove a repository from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsRemoveRepoLegacyWithHttpInfo(Integer teamId, String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveRepoLegacyValidateBeforeCall(teamId, owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a repository from a team (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#remove-a-repository-from-a-team-legacy">Remove a repository from a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveRepoLegacyAsync(Integer teamId, String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveRepoLegacyValidateBeforeCall(teamId, owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateDiscussionCommentInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionCommentInOrgCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionCommentInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateDiscussionCommentInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsUpdateDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsUpdateDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsUpdateDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
        if (teamsCreateDiscussionCommentInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsUpdateDiscussionCommentInOrg(Async)");
        }

        return teamsUpdateDiscussionCommentInOrgCall(org, teamSlug, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);

    }

    /**
     * Update a discussion comment
     * Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public TeamDiscussionComment teamsUpdateDiscussionCommentInOrg(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsUpdateDiscussionCommentInOrgWithHttpInfo(org, teamSlug, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update a discussion comment
     * Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public ApiResponse<TeamDiscussionComment> teamsUpdateDiscussionCommentInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a discussion comment (asynchronously)
     * Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionCommentInOrgAsync(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateDiscussionCommentLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment-legacy">Update a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsUpdateDiscussionCommentLegacyCall(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionCommentInOrgRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateDiscussionCommentLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdateDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsUpdateDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
        if (teamsCreateDiscussionCommentInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsUpdateDiscussionCommentLegacy(Async)");
        }

        return teamsUpdateDiscussionCommentLegacyCall(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);

    }

    /**
     * Update a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment-legacy">Update a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamDiscussionComment teamsUpdateDiscussionCommentLegacy(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsUpdateDiscussionCommentLegacyWithHttpInfo(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment-legacy">Update a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamDiscussionComment> teamsUpdateDiscussionCommentLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a discussion comment (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-comment-legacy">Update a discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsUpdateDiscussionCommentLegacyAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentInOrgRequest teamsCreateDiscussionCommentInOrgRequest, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateDiscussionInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionInOrgCall(String org, String teamSlug, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateDiscussionInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateDiscussionInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsUpdateDiscussionInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsUpdateDiscussionInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionInOrg(Async)");
        }

        return teamsUpdateDiscussionInOrgCall(org, teamSlug, discussionNumber, teamsUpdateDiscussionInOrgRequest, _callback);

    }

    /**
     * Update a discussion
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public TeamDiscussion teamsUpdateDiscussionInOrg(String org, String teamSlug, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsUpdateDiscussionInOrgWithHttpInfo(org, teamSlug, discussionNumber, teamsUpdateDiscussionInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update a discussion
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public ApiResponse<TeamDiscussion> teamsUpdateDiscussionInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, teamsUpdateDiscussionInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a discussion (asynchronously)
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionInOrgAsync(String org, String teamSlug, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, teamsUpdateDiscussionInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateDiscussionLegacy
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-legacy">Update a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsUpdateDiscussionLegacyCall(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateDiscussionInOrgRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateDiscussionLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdateDiscussionLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionLegacy(Async)");
        }

        return teamsUpdateDiscussionLegacyCall(teamId, discussionNumber, teamsUpdateDiscussionInOrgRequest, _callback);

    }

    /**
     * Update a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-legacy">Update a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamDiscussion teamsUpdateDiscussionLegacy(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsUpdateDiscussionLegacyWithHttpInfo(teamId, discussionNumber, teamsUpdateDiscussionInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-legacy">Update a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamDiscussion> teamsUpdateDiscussionLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, teamsUpdateDiscussionInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a discussion (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionInOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-discussion-legacy">Update a discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsUpdateDiscussionLegacyAsync(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionInOrgRequest teamsUpdateDiscussionInOrgRequest, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, teamsUpdateDiscussionInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateInOrg
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsUpdateInOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-team">Update a team Documentation</a>
     */
    public okhttp3.Call teamsUpdateInOrgCall(String org, String teamSlug, TeamsUpdateInOrgRequest teamsUpdateInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateInOrgValidateBeforeCall(String org, String teamSlug, TeamsUpdateInOrgRequest teamsUpdateInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsUpdateInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsUpdateInOrg(Async)");
        }

        return teamsUpdateInOrgCall(org, teamSlug, teamsUpdateInOrgRequest, _callback);

    }

    /**
     * Update a team
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsUpdateInOrgRequest  (optional)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-team">Update a team Documentation</a>
     */
    public TeamFull teamsUpdateInOrg(String org, String teamSlug, TeamsUpdateInOrgRequest teamsUpdateInOrgRequest) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsUpdateInOrgWithHttpInfo(org, teamSlug, teamsUpdateInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update a team
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsUpdateInOrgRequest  (optional)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-team">Update a team Documentation</a>
     */
    public ApiResponse<TeamFull> teamsUpdateInOrgWithHttpInfo(String org, String teamSlug, TeamsUpdateInOrgRequest teamsUpdateInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateInOrgValidateBeforeCall(org, teamSlug, teamsUpdateInOrgRequest, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a team (asynchronously)
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param teamsUpdateInOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-team">Update a team Documentation</a>
     */
    public okhttp3.Call teamsUpdateInOrgAsync(String org, String teamSlug, TeamsUpdateInOrgRequest teamsUpdateInOrgRequest, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateInOrgValidateBeforeCall(org, teamSlug, teamsUpdateInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateLegacy
     * @param teamId  (required)
     * @param teamsUpdateLegacyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#update-a-team-legacy">Update a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsUpdateLegacyCall(Integer teamId, TeamsUpdateLegacyRequest teamsUpdateLegacyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateLegacyRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateLegacyValidateBeforeCall(Integer teamId, TeamsUpdateLegacyRequest teamsUpdateLegacyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdateLegacy(Async)");
        }

        // verify the required parameter 'teamsUpdateLegacyRequest' is set
        if (teamsUpdateLegacyRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsUpdateLegacyRequest' when calling teamsUpdateLegacy(Async)");
        }

        return teamsUpdateLegacyCall(teamId, teamsUpdateLegacyRequest, _callback);

    }

    /**
     * Update a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
     * @param teamId  (required)
     * @param teamsUpdateLegacyRequest  (required)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#update-a-team-legacy">Update a team (Legacy) Documentation</a>
     */
    @Deprecated
    public TeamFull teamsUpdateLegacy(Integer teamId, TeamsUpdateLegacyRequest teamsUpdateLegacyRequest) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsUpdateLegacyWithHttpInfo(teamId, teamsUpdateLegacyRequest);
        return localVarResp.getData();
    }

    /**
     * Update a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
     * @param teamId  (required)
     * @param teamsUpdateLegacyRequest  (required)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#update-a-team-legacy">Update a team (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<TeamFull> teamsUpdateLegacyWithHttpInfo(Integer teamId, TeamsUpdateLegacyRequest teamsUpdateLegacyRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateLegacyValidateBeforeCall(teamId, teamsUpdateLegacyRequest, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a team (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@2.22/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
     * @param teamId  (required)
     * @param teamsUpdateLegacyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/teams/#update-a-team-legacy">Update a team (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsUpdateLegacyAsync(Integer teamId, TeamsUpdateLegacyRequest teamsUpdateLegacyRequest, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateLegacyValidateBeforeCall(teamId, teamsUpdateLegacyRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
