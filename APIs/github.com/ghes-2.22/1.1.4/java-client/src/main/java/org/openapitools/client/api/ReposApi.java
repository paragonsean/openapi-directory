/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityListPublicEvents503Response;
import org.openapitools.client.model.ActivityMarkNotificationsAsRead202Response;
import org.openapitools.client.model.AppsGetInstallation415Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.BranchProtection;
import org.openapitools.client.model.BranchRestrictionPolicy;
import org.openapitools.client.model.BranchShort;
import org.openapitools.client.model.BranchWithProtection;
import org.openapitools.client.model.Collaborator;
import org.openapitools.client.model.CombinedCommitStatus;
import org.openapitools.client.model.Commit;
import org.openapitools.client.model.CommitActivity;
import org.openapitools.client.model.CommitComment;
import org.openapitools.client.model.CommitComparison;
import org.openapitools.client.model.ContentFile;
import org.openapitools.client.model.ContentTree;
import org.openapitools.client.model.Contributor;
import org.openapitools.client.model.ContributorActivity;
import org.openapitools.client.model.DeployKey;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentStatus;
import org.openapitools.client.model.FileCommit;
import org.openapitools.client.model.FullRepository;
import org.openapitools.client.model.Hook;
import org.openapitools.client.model.Integration;
import org.openapitools.client.model.MinimalRepository;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrgsRemoveOutsideCollaborator422Response;
import org.openapitools.client.model.Page;
import org.openapitools.client.model.PageBuild;
import org.openapitools.client.model.PageBuildStatus;
import org.openapitools.client.model.ParticipationStats;
import org.openapitools.client.model.ProtectedBranch;
import org.openapitools.client.model.ProtectedBranchAdminEnforced;
import org.openapitools.client.model.ProtectedBranchPullRequestReview;
import org.openapitools.client.model.PullRequestSimple;
import org.openapitools.client.model.Release;
import org.openapitools.client.model.ReleaseAsset;
import org.openapitools.client.model.ReposAddCollaboratorRequest;
import org.openapitools.client.model.ReposCreateCommitCommentRequest;
import org.openapitools.client.model.ReposCreateCommitStatusRequest;
import org.openapitools.client.model.ReposCreateDeployKeyRequest;
import org.openapitools.client.model.ReposCreateDeploymentRequest;
import org.openapitools.client.model.ReposCreateDeploymentStatusRequest;
import org.openapitools.client.model.ReposCreateDispatchEventRequest;
import org.openapitools.client.model.ReposCreateForAuthenticatedUserRequest;
import org.openapitools.client.model.ReposCreateForkRequest;
import org.openapitools.client.model.ReposCreateInOrgRequest;
import org.openapitools.client.model.ReposCreateOrUpdateFileContentsRequest;
import org.openapitools.client.model.ReposCreatePagesSiteRequest;
import org.openapitools.client.model.ReposCreateReleaseRequest;
import org.openapitools.client.model.ReposCreateUsingTemplateRequest;
import org.openapitools.client.model.ReposCreateWebhookRequest;
import org.openapitools.client.model.ReposDeleteFileRequest;
import org.openapitools.client.model.ReposGetContent200Response;
import org.openapitools.client.model.ReposMergeRequest;
import org.openapitools.client.model.ReposReplaceAllTopicsRequest;
import org.openapitools.client.model.ReposSetAppAccessRestrictionsRequest;
import org.openapitools.client.model.ReposSetStatusCheckContextsRequest;
import org.openapitools.client.model.ReposSetTeamAccessRestrictionsRequest;
import org.openapitools.client.model.ReposSetUserAccessRestrictionsRequest;
import org.openapitools.client.model.ReposTransferRequest;
import org.openapitools.client.model.ReposUpdateBranchProtectionRequest;
import org.openapitools.client.model.ReposUpdateCommitCommentRequest;
import org.openapitools.client.model.ReposUpdateInformationAboutPagesSiteRequest;
import org.openapitools.client.model.ReposUpdateInvitationRequest;
import org.openapitools.client.model.ReposUpdatePullRequestReviewProtectionRequest;
import org.openapitools.client.model.ReposUpdateReleaseAssetRequest;
import org.openapitools.client.model.ReposUpdateReleaseRequest;
import org.openapitools.client.model.ReposUpdateRequest;
import org.openapitools.client.model.ReposUpdateStatusCheckProtectionRequest;
import org.openapitools.client.model.ReposUpdateWebhookRequest;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.RepositoryCollaboratorPermission;
import org.openapitools.client.model.RepositoryInvitation;
import org.openapitools.client.model.ScimError;
import org.openapitools.client.model.ShortBranch;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.StatusCheckPolicy;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.Topic;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.ValidationErrorSimple;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReposApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReposApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReposApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reposAcceptInvitationForAuthenticatedUser
     * @param invitationId invitation_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#accept-a-repository-invitation">Accept a repository invitation Documentation</a>
     */
    public okhttp3.Call reposAcceptInvitationForAuthenticatedUserCall(Integer invitationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/repository_invitations/{invitation_id}"
            .replace("{" + "invitation_id" + "}", localVarApiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposAcceptInvitationForAuthenticatedUserValidateBeforeCall(Integer invitationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling reposAcceptInvitationForAuthenticatedUser(Async)");
        }

        return reposAcceptInvitationForAuthenticatedUserCall(invitationId, _callback);

    }

    /**
     * Accept a repository invitation
     * 
     * @param invitationId invitation_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#accept-a-repository-invitation">Accept a repository invitation Documentation</a>
     */
    public void reposAcceptInvitationForAuthenticatedUser(Integer invitationId) throws ApiException {
        reposAcceptInvitationForAuthenticatedUserWithHttpInfo(invitationId);
    }

    /**
     * Accept a repository invitation
     * 
     * @param invitationId invitation_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#accept-a-repository-invitation">Accept a repository invitation Documentation</a>
     */
    public ApiResponse<Void> reposAcceptInvitationForAuthenticatedUserWithHttpInfo(Integer invitationId) throws ApiException {
        okhttp3.Call localVarCall = reposAcceptInvitationForAuthenticatedUserValidateBeforeCall(invitationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept a repository invitation (asynchronously)
     * 
     * @param invitationId invitation_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#accept-a-repository-invitation">Accept a repository invitation Documentation</a>
     */
    public okhttp3.Call reposAcceptInvitationForAuthenticatedUserAsync(Integer invitationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposAcceptInvitationForAuthenticatedUserValidateBeforeCall(invitationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposAddAppAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-app-access-restrictions">Add app access restrictions Documentation</a>
     */
    public okhttp3.Call reposAddAppAccessRestrictionsCall(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetAppAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposAddAppAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposAddAppAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposAddAppAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposAddAppAccessRestrictions(Async)");
        }

        return reposAddAppAccessRestrictionsCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, _callback);

    }

    /**
     * Add app access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified apps push access for this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @return List&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-app-access-restrictions">Add app access restrictions Documentation</a>
     */
    public List<Integration> reposAddAppAccessRestrictions(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<Integration>> localVarResp = reposAddAppAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetAppAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Add app access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified apps push access for this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Integration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-app-access-restrictions">Add app access restrictions Documentation</a>
     */
    public ApiResponse<List<Integration>> reposAddAppAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposAddAppAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add app access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified apps push access for this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-app-access-restrictions">Add app access restrictions Documentation</a>
     */
    public okhttp3.Call reposAddAppAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback<List<Integration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposAddAppAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposAddCollaborator
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param reposAddCollaboratorRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when a new invitation is created </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when person is already a collaborator </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-a-repository-collaborator">Add a repository collaborator Documentation</a>
     */
    public okhttp3.Call reposAddCollaboratorCall(String owner, String repo, String username, ReposAddCollaboratorRequest reposAddCollaboratorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposAddCollaboratorRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{username}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposAddCollaboratorValidateBeforeCall(String owner, String repo, String username, ReposAddCollaboratorRequest reposAddCollaboratorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposAddCollaborator(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposAddCollaborator(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling reposAddCollaborator(Async)");
        }

        return reposAddCollaboratorCall(owner, repo, username, reposAddCollaboratorRequest, _callback);

    }

    /**
     * Add a repository collaborator
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  For more information on permission levels, see \&quot;[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#invitations).  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param reposAddCollaboratorRequest  (optional)
     * @return RepositoryInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when a new invitation is created </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when person is already a collaborator </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-a-repository-collaborator">Add a repository collaborator Documentation</a>
     */
    public RepositoryInvitation reposAddCollaborator(String owner, String repo, String username, ReposAddCollaboratorRequest reposAddCollaboratorRequest) throws ApiException {
        ApiResponse<RepositoryInvitation> localVarResp = reposAddCollaboratorWithHttpInfo(owner, repo, username, reposAddCollaboratorRequest);
        return localVarResp.getData();
    }

    /**
     * Add a repository collaborator
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  For more information on permission levels, see \&quot;[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#invitations).  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param reposAddCollaboratorRequest  (optional)
     * @return ApiResponse&lt;RepositoryInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when a new invitation is created </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when person is already a collaborator </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-a-repository-collaborator">Add a repository collaborator Documentation</a>
     */
    public ApiResponse<RepositoryInvitation> reposAddCollaboratorWithHttpInfo(String owner, String repo, String username, ReposAddCollaboratorRequest reposAddCollaboratorRequest) throws ApiException {
        okhttp3.Call localVarCall = reposAddCollaboratorValidateBeforeCall(owner, repo, username, reposAddCollaboratorRequest, null);
        Type localVarReturnType = new TypeToken<RepositoryInvitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a repository collaborator (asynchronously)
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  For more information on permission levels, see \&quot;[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#invitations).  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param reposAddCollaboratorRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when a new invitation is created </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when person is already a collaborator </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-a-repository-collaborator">Add a repository collaborator Documentation</a>
     */
    public okhttp3.Call reposAddCollaboratorAsync(String owner, String repo, String username, ReposAddCollaboratorRequest reposAddCollaboratorRequest, final ApiCallback<RepositoryInvitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposAddCollaboratorValidateBeforeCall(owner, repo, username, reposAddCollaboratorRequest, _callback);
        Type localVarReturnType = new TypeToken<RepositoryInvitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposAddStatusCheckContexts
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-status-check-contexts">Add status check contexts Documentation</a>
     */
    public okhttp3.Call reposAddStatusCheckContextsCall(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetStatusCheckContextsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposAddStatusCheckContextsValidateBeforeCall(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposAddStatusCheckContexts(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposAddStatusCheckContexts(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposAddStatusCheckContexts(Async)");
        }

        return reposAddStatusCheckContextsCall(owner, repo, branch, reposSetStatusCheckContextsRequest, _callback);

    }

    /**
     * Add status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-status-check-contexts">Add status check contexts Documentation</a>
     */
    public List<String> reposAddStatusCheckContexts(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest) throws ApiException {
        ApiResponse<List<String>> localVarResp = reposAddStatusCheckContextsWithHttpInfo(owner, repo, branch, reposSetStatusCheckContextsRequest);
        return localVarResp.getData();
    }

    /**
     * Add status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-status-check-contexts">Add status check contexts Documentation</a>
     */
    public ApiResponse<List<String>> reposAddStatusCheckContextsWithHttpInfo(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposAddStatusCheckContextsValidateBeforeCall(owner, repo, branch, reposSetStatusCheckContextsRequest, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add status check contexts (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-status-check-contexts">Add status check contexts Documentation</a>
     */
    public okhttp3.Call reposAddStatusCheckContextsAsync(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposAddStatusCheckContextsValidateBeforeCall(owner, repo, branch, reposSetStatusCheckContextsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposAddTeamAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-team-access-restrictions">Add team access restrictions Documentation</a>
     */
    public okhttp3.Call reposAddTeamAccessRestrictionsCall(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetTeamAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposAddTeamAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposAddTeamAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposAddTeamAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposAddTeamAccessRestrictions(Async)");
        }

        return reposAddTeamAccessRestrictionsCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, _callback);

    }

    /**
     * Add team access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified teams push access for this branch. You can also give push access to child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | &#x60;array&#x60; | The teams that can have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-team-access-restrictions">Add team access restrictions Documentation</a>
     */
    public List<Team> reposAddTeamAccessRestrictions(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<Team>> localVarResp = reposAddTeamAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetTeamAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Add team access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified teams push access for this branch. You can also give push access to child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | &#x60;array&#x60; | The teams that can have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-team-access-restrictions">Add team access restrictions Documentation</a>
     */
    public ApiResponse<List<Team>> reposAddTeamAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposAddTeamAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add team access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified teams push access for this branch. You can also give push access to child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | &#x60;array&#x60; | The teams that can have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-team-access-restrictions">Add team access restrictions Documentation</a>
     */
    public okhttp3.Call reposAddTeamAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposAddTeamAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposAddUserAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-user-access-restrictions">Add user access restrictions Documentation</a>
     */
    public okhttp3.Call reposAddUserAccessRestrictionsCall(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetUserAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposAddUserAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposAddUserAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposAddUserAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposAddUserAccessRestrictions(Async)");
        }

        return reposAddUserAccessRestrictionsCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, _callback);

    }

    /**
     * Add user access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified people push access for this branch.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-user-access-restrictions">Add user access restrictions Documentation</a>
     */
    public List<SimpleUser> reposAddUserAccessRestrictions(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = reposAddUserAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetUserAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Add user access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified people push access for this branch.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-user-access-restrictions">Add user access restrictions Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> reposAddUserAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposAddUserAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add user access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified people push access for this branch.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#add-user-access-restrictions">Add user access restrictions Documentation</a>
     */
    public okhttp3.Call reposAddUserAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposAddUserAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCheckCollaborator
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if user is a collaborator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#check-if-a-user-is-a-repository-collaborator">Check if a user is a repository collaborator Documentation</a>
     */
    public okhttp3.Call reposCheckCollaboratorCall(String owner, String repo, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{username}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCheckCollaboratorValidateBeforeCall(String owner, String repo, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCheckCollaborator(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCheckCollaborator(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling reposCheckCollaborator(Async)");
        }

        return reposCheckCollaboratorCall(owner, repo, username, _callback);

    }

    /**
     * Check if a user is a repository collaborator
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if user is a collaborator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#check-if-a-user-is-a-repository-collaborator">Check if a user is a repository collaborator Documentation</a>
     */
    public void reposCheckCollaborator(String owner, String repo, String username) throws ApiException {
        reposCheckCollaboratorWithHttpInfo(owner, repo, username);
    }

    /**
     * Check if a user is a repository collaborator
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if user is a collaborator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#check-if-a-user-is-a-repository-collaborator">Check if a user is a repository collaborator Documentation</a>
     */
    public ApiResponse<Void> reposCheckCollaboratorWithHttpInfo(String owner, String repo, String username) throws ApiException {
        okhttp3.Call localVarCall = reposCheckCollaboratorValidateBeforeCall(owner, repo, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user is a repository collaborator (asynchronously)
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if user is a collaborator </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#check-if-a-user-is-a-repository-collaborator">Check if a user is a repository collaborator Documentation</a>
     */
    public okhttp3.Call reposCheckCollaboratorAsync(String owner, String repo, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCheckCollaboratorValidateBeforeCall(owner, repo, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCompareCommits
     * @param owner  (required)
     * @param repo  (required)
     * @param basehead The base branch and head branch to compare. This parameter expects the format &#x60;{base}...{head}&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#compare-two-commits">Compare two commits Documentation</a>
     */
    public okhttp3.Call reposCompareCommitsCall(String owner, String repo, String basehead, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/compare/{basehead}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "basehead" + "}", localVarApiClient.escapeString(basehead.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCompareCommitsValidateBeforeCall(String owner, String repo, String basehead, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCompareCommits(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCompareCommits(Async)");
        }

        // verify the required parameter 'basehead' is set
        if (basehead == null) {
            throw new ApiException("Missing the required parameter 'basehead' when calling reposCompareCommits(Async)");
        }

        return reposCompareCommitsCall(owner, repo, basehead, _callback);

    }

    /**
     * Compare two commits
     * The &#x60;basehead&#x60; param is comprised of two parts: &#x60;base&#x60; and &#x60;head&#x60;. Both must be branch names in &#x60;repo&#x60;. To compare branches across other repositories in the same network as &#x60;repo&#x60;, use the format &#x60;&lt;USERNAME&gt;:branch&#x60;.  The response from the API is equivalent to running the &#x60;git log base..head&#x60; command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.  The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a &#x60;renamed&#x60; status have a &#x60;previous_filename&#x60; field showing the previous filename of the file, and files with a &#x60;modified&#x60; status have a &#x60;patch&#x60; field showing the changes made to the file.  **Working with large comparisons**  The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commits) to enumerate all commits in the range.  For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param basehead The base branch and head branch to compare. This parameter expects the format &#x60;{base}...{head}&#x60;. (required)
     * @return CommitComparison
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#compare-two-commits">Compare two commits Documentation</a>
     */
    public CommitComparison reposCompareCommits(String owner, String repo, String basehead) throws ApiException {
        ApiResponse<CommitComparison> localVarResp = reposCompareCommitsWithHttpInfo(owner, repo, basehead);
        return localVarResp.getData();
    }

    /**
     * Compare two commits
     * The &#x60;basehead&#x60; param is comprised of two parts: &#x60;base&#x60; and &#x60;head&#x60;. Both must be branch names in &#x60;repo&#x60;. To compare branches across other repositories in the same network as &#x60;repo&#x60;, use the format &#x60;&lt;USERNAME&gt;:branch&#x60;.  The response from the API is equivalent to running the &#x60;git log base..head&#x60; command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.  The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a &#x60;renamed&#x60; status have a &#x60;previous_filename&#x60; field showing the previous filename of the file, and files with a &#x60;modified&#x60; status have a &#x60;patch&#x60; field showing the changes made to the file.  **Working with large comparisons**  The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commits) to enumerate all commits in the range.  For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param basehead The base branch and head branch to compare. This parameter expects the format &#x60;{base}...{head}&#x60;. (required)
     * @return ApiResponse&lt;CommitComparison&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#compare-two-commits">Compare two commits Documentation</a>
     */
    public ApiResponse<CommitComparison> reposCompareCommitsWithHttpInfo(String owner, String repo, String basehead) throws ApiException {
        okhttp3.Call localVarCall = reposCompareCommitsValidateBeforeCall(owner, repo, basehead, null);
        Type localVarReturnType = new TypeToken<CommitComparison>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compare two commits (asynchronously)
     * The &#x60;basehead&#x60; param is comprised of two parts: &#x60;base&#x60; and &#x60;head&#x60;. Both must be branch names in &#x60;repo&#x60;. To compare branches across other repositories in the same network as &#x60;repo&#x60;, use the format &#x60;&lt;USERNAME&gt;:branch&#x60;.  The response from the API is equivalent to running the &#x60;git log base..head&#x60; command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.  The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a &#x60;renamed&#x60; status have a &#x60;previous_filename&#x60; field showing the previous filename of the file, and files with a &#x60;modified&#x60; status have a &#x60;patch&#x60; field showing the changes made to the file.  **Working with large comparisons**  The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commits) to enumerate all commits in the range.  For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param basehead The base branch and head branch to compare. This parameter expects the format &#x60;{base}...{head}&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#compare-two-commits">Compare two commits Documentation</a>
     */
    public okhttp3.Call reposCompareCommitsAsync(String owner, String repo, String basehead, final ApiCallback<CommitComparison> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCompareCommitsValidateBeforeCall(owner, repo, basehead, _callback);
        Type localVarReturnType = new TypeToken<CommitComparison>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateCommitComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param reposCreateCommitCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-comment">Create a commit comment Documentation</a>
     */
    public okhttp3.Call reposCreateCommitCommentCall(String owner, String repo, String commitSha, ReposCreateCommitCommentRequest reposCreateCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateCommitCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{commit_sha}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "commit_sha" + "}", localVarApiClient.escapeString(commitSha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateCommitCommentValidateBeforeCall(String owner, String repo, String commitSha, ReposCreateCommitCommentRequest reposCreateCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateCommitComment(Async)");
        }

        // verify the required parameter 'commitSha' is set
        if (commitSha == null) {
            throw new ApiException("Missing the required parameter 'commitSha' when calling reposCreateCommitComment(Async)");
        }

        // verify the required parameter 'reposCreateCommitCommentRequest' is set
        if (reposCreateCommitCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateCommitCommentRequest' when calling reposCreateCommitComment(Async)");
        }

        return reposCreateCommitCommentCall(owner, repo, commitSha, reposCreateCommitCommentRequest, _callback);

    }

    /**
     * Create a commit comment
     * Create a comment for a commit using its &#x60;:commit_sha&#x60;.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param reposCreateCommitCommentRequest  (required)
     * @return CommitComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-comment">Create a commit comment Documentation</a>
     */
    public CommitComment reposCreateCommitComment(String owner, String repo, String commitSha, ReposCreateCommitCommentRequest reposCreateCommitCommentRequest) throws ApiException {
        ApiResponse<CommitComment> localVarResp = reposCreateCommitCommentWithHttpInfo(owner, repo, commitSha, reposCreateCommitCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create a commit comment
     * Create a comment for a commit using its &#x60;:commit_sha&#x60;.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param reposCreateCommitCommentRequest  (required)
     * @return ApiResponse&lt;CommitComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-comment">Create a commit comment Documentation</a>
     */
    public ApiResponse<CommitComment> reposCreateCommitCommentWithHttpInfo(String owner, String repo, String commitSha, ReposCreateCommitCommentRequest reposCreateCommitCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateCommitCommentValidateBeforeCall(owner, repo, commitSha, reposCreateCommitCommentRequest, null);
        Type localVarReturnType = new TypeToken<CommitComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a commit comment (asynchronously)
     * Create a comment for a commit using its &#x60;:commit_sha&#x60;.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param reposCreateCommitCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-comment">Create a commit comment Documentation</a>
     */
    public okhttp3.Call reposCreateCommitCommentAsync(String owner, String repo, String commitSha, ReposCreateCommitCommentRequest reposCreateCommitCommentRequest, final ApiCallback<CommitComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateCommitCommentValidateBeforeCall(owner, repo, commitSha, reposCreateCommitCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<CommitComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateCommitSignatureProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-commit-signature-protection">Create commit signature protection Documentation</a>
     */
    public okhttp3.Call reposCreateCommitSignatureProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateCommitSignatureProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateCommitSignatureProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateCommitSignatureProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposCreateCommitSignatureProtection(Async)");
        }

        return reposCreateCommitSignatureProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Create commit signature protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ProtectedBranchAdminEnforced
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-commit-signature-protection">Create commit signature protection Documentation</a>
     */
    public ProtectedBranchAdminEnforced reposCreateCommitSignatureProtection(String owner, String repo, String branch) throws ApiException {
        ApiResponse<ProtectedBranchAdminEnforced> localVarResp = reposCreateCommitSignatureProtectionWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Create commit signature protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;ProtectedBranchAdminEnforced&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-commit-signature-protection">Create commit signature protection Documentation</a>
     */
    public ApiResponse<ProtectedBranchAdminEnforced> reposCreateCommitSignatureProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposCreateCommitSignatureProtectionValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create commit signature protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-commit-signature-protection">Create commit signature protection Documentation</a>
     */
    public okhttp3.Call reposCreateCommitSignatureProtectionAsync(String owner, String repo, String branch, final ApiCallback<ProtectedBranchAdminEnforced> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateCommitSignatureProtectionValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateCommitStatus
     * @param owner  (required)
     * @param repo  (required)
     * @param sha  (required)
     * @param reposCreateCommitStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-status">Create a commit status Documentation</a>
     */
    public okhttp3.Call reposCreateCommitStatusCall(String owner, String repo, String sha, ReposCreateCommitStatusRequest reposCreateCommitStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateCommitStatusRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/statuses/{sha}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sha" + "}", localVarApiClient.escapeString(sha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateCommitStatusValidateBeforeCall(String owner, String repo, String sha, ReposCreateCommitStatusRequest reposCreateCommitStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateCommitStatus(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateCommitStatus(Async)");
        }

        // verify the required parameter 'sha' is set
        if (sha == null) {
            throw new ApiException("Missing the required parameter 'sha' when calling reposCreateCommitStatus(Async)");
        }

        // verify the required parameter 'reposCreateCommitStatusRequest' is set
        if (reposCreateCommitStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateCommitStatusRequest' when calling reposCreateCommitStatus(Async)");
        }

        return reposCreateCommitStatusCall(owner, repo, sha, reposCreateCommitStatusRequest, _callback);

    }

    /**
     * Create a commit status
     * Users with push access in a repository can create commit statuses for a given SHA.  Note: there is a limit of 1000 statuses per &#x60;sha&#x60; and &#x60;context&#x60; within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     * @param owner  (required)
     * @param repo  (required)
     * @param sha  (required)
     * @param reposCreateCommitStatusRequest  (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-status">Create a commit status Documentation</a>
     */
    public Status reposCreateCommitStatus(String owner, String repo, String sha, ReposCreateCommitStatusRequest reposCreateCommitStatusRequest) throws ApiException {
        ApiResponse<Status> localVarResp = reposCreateCommitStatusWithHttpInfo(owner, repo, sha, reposCreateCommitStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Create a commit status
     * Users with push access in a repository can create commit statuses for a given SHA.  Note: there is a limit of 1000 statuses per &#x60;sha&#x60; and &#x60;context&#x60; within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     * @param owner  (required)
     * @param repo  (required)
     * @param sha  (required)
     * @param reposCreateCommitStatusRequest  (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-status">Create a commit status Documentation</a>
     */
    public ApiResponse<Status> reposCreateCommitStatusWithHttpInfo(String owner, String repo, String sha, ReposCreateCommitStatusRequest reposCreateCommitStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateCommitStatusValidateBeforeCall(owner, repo, sha, reposCreateCommitStatusRequest, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a commit status (asynchronously)
     * Users with push access in a repository can create commit statuses for a given SHA.  Note: there is a limit of 1000 statuses per &#x60;sha&#x60; and &#x60;context&#x60; within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     * @param owner  (required)
     * @param repo  (required)
     * @param sha  (required)
     * @param reposCreateCommitStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-commit-status">Create a commit status Documentation</a>
     */
    public okhttp3.Call reposCreateCommitStatusAsync(String owner, String repo, String sha, ReposCreateCommitStatusRequest reposCreateCommitStatusRequest, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateCommitStatusValidateBeforeCall(owner, repo, sha, reposCreateCommitStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateDeployKey
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeployKeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deploy-key">Create a deploy key Documentation</a>
     */
    public okhttp3.Call reposCreateDeployKeyCall(String owner, String repo, ReposCreateDeployKeyRequest reposCreateDeployKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateDeployKeyRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateDeployKeyValidateBeforeCall(String owner, String repo, ReposCreateDeployKeyRequest reposCreateDeployKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateDeployKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateDeployKey(Async)");
        }

        // verify the required parameter 'reposCreateDeployKeyRequest' is set
        if (reposCreateDeployKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateDeployKeyRequest' when calling reposCreateDeployKey(Async)");
        }

        return reposCreateDeployKeyCall(owner, repo, reposCreateDeployKeyRequest, _callback);

    }

    /**
     * Create a deploy key
     * You can create a read-only deploy key.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeployKeyRequest  (required)
     * @return DeployKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deploy-key">Create a deploy key Documentation</a>
     */
    public DeployKey reposCreateDeployKey(String owner, String repo, ReposCreateDeployKeyRequest reposCreateDeployKeyRequest) throws ApiException {
        ApiResponse<DeployKey> localVarResp = reposCreateDeployKeyWithHttpInfo(owner, repo, reposCreateDeployKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deploy key
     * You can create a read-only deploy key.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeployKeyRequest  (required)
     * @return ApiResponse&lt;DeployKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deploy-key">Create a deploy key Documentation</a>
     */
    public ApiResponse<DeployKey> reposCreateDeployKeyWithHttpInfo(String owner, String repo, ReposCreateDeployKeyRequest reposCreateDeployKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateDeployKeyValidateBeforeCall(owner, repo, reposCreateDeployKeyRequest, null);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deploy key (asynchronously)
     * You can create a read-only deploy key.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeployKeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deploy-key">Create a deploy key Documentation</a>
     */
    public okhttp3.Call reposCreateDeployKeyAsync(String owner, String repo, ReposCreateDeployKeyRequest reposCreateDeployKeyRequest, final ApiCallback<DeployKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateDeployKeyValidateBeforeCall(owner, repo, reposCreateDeployKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateDeployment
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeploymentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Merged branch response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict or the commit&#39;s status checks failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment">Create a deployment Documentation</a>
     */
    public okhttp3.Call reposCreateDeploymentCall(String owner, String repo, ReposCreateDeploymentRequest reposCreateDeploymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateDeploymentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/deployments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateDeploymentValidateBeforeCall(String owner, String repo, ReposCreateDeploymentRequest reposCreateDeploymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateDeployment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateDeployment(Async)");
        }

        // verify the required parameter 'reposCreateDeploymentRequest' is set
        if (reposCreateDeploymentRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateDeploymentRequest' when calling reposCreateDeployment(Async)");
        }

        return reposCreateDeploymentCall(owner, repo, reposCreateDeploymentRequest, _callback);

    }

    /**
     * Create a deployment
     * Deployments offer a few configurable parameters with certain defaults.  The &#x60;ref&#x60; parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them before we merge a pull request.  The &#x60;environment&#x60; parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as &#x60;production&#x60;, &#x60;staging&#x60;, and &#x60;qa&#x60;. This parameter makes it easier to track which environments have requested deployments. The default environment is &#x60;production&#x60;.  The &#x60;auto_merge&#x60; parameter is used to ensure that the requested ref is not behind the repository&#39;s default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.  By default, [commit statuses](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#statuses) for every submitted context must be in a &#x60;success&#x60; state. The &#x60;required_contexts&#x60; parameter allows you to specify a subset of contexts that must be &#x60;success&#x60;, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.  The &#x60;payload&#x60; parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.  The &#x60;task&#x60; parameter is used by the deployment system to allow different execution paths. In the web world this might be &#x60;deploy:migrations&#x60; to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.  Users with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can create a deployment for a given ref.  #### Merged branch response You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is &#x60;master&#x60; in the response example *   There are no merge conflicts  If there are no new commits in the base branch, a new request to create a deployment should give a successful response.  #### Merge conflict response This error happens when the &#x60;auto_merge&#x60; option is enabled and when the default branch (in this case &#x60;master&#x60;), can&#39;t be merged into the branch that&#39;s being deployed (in this case &#x60;topic-branch&#x60;), due to merge conflicts.  #### Failed commit status checks This error happens when the &#x60;required_contexts&#x60; parameter indicates that one or more contexts need to have a &#x60;success&#x60; status for the commit to be deployed, but one or more of the required contexts do not have a state of &#x60;success&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeploymentRequest  (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Merged branch response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict or the commit&#39;s status checks failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment">Create a deployment Documentation</a>
     */
    public Deployment reposCreateDeployment(String owner, String repo, ReposCreateDeploymentRequest reposCreateDeploymentRequest) throws ApiException {
        ApiResponse<Deployment> localVarResp = reposCreateDeploymentWithHttpInfo(owner, repo, reposCreateDeploymentRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deployment
     * Deployments offer a few configurable parameters with certain defaults.  The &#x60;ref&#x60; parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them before we merge a pull request.  The &#x60;environment&#x60; parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as &#x60;production&#x60;, &#x60;staging&#x60;, and &#x60;qa&#x60;. This parameter makes it easier to track which environments have requested deployments. The default environment is &#x60;production&#x60;.  The &#x60;auto_merge&#x60; parameter is used to ensure that the requested ref is not behind the repository&#39;s default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.  By default, [commit statuses](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#statuses) for every submitted context must be in a &#x60;success&#x60; state. The &#x60;required_contexts&#x60; parameter allows you to specify a subset of contexts that must be &#x60;success&#x60;, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.  The &#x60;payload&#x60; parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.  The &#x60;task&#x60; parameter is used by the deployment system to allow different execution paths. In the web world this might be &#x60;deploy:migrations&#x60; to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.  Users with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can create a deployment for a given ref.  #### Merged branch response You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is &#x60;master&#x60; in the response example *   There are no merge conflicts  If there are no new commits in the base branch, a new request to create a deployment should give a successful response.  #### Merge conflict response This error happens when the &#x60;auto_merge&#x60; option is enabled and when the default branch (in this case &#x60;master&#x60;), can&#39;t be merged into the branch that&#39;s being deployed (in this case &#x60;topic-branch&#x60;), due to merge conflicts.  #### Failed commit status checks This error happens when the &#x60;required_contexts&#x60; parameter indicates that one or more contexts need to have a &#x60;success&#x60; status for the commit to be deployed, but one or more of the required contexts do not have a state of &#x60;success&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeploymentRequest  (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Merged branch response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict or the commit&#39;s status checks failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment">Create a deployment Documentation</a>
     */
    public ApiResponse<Deployment> reposCreateDeploymentWithHttpInfo(String owner, String repo, ReposCreateDeploymentRequest reposCreateDeploymentRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateDeploymentValidateBeforeCall(owner, repo, reposCreateDeploymentRequest, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment (asynchronously)
     * Deployments offer a few configurable parameters with certain defaults.  The &#x60;ref&#x60; parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them before we merge a pull request.  The &#x60;environment&#x60; parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as &#x60;production&#x60;, &#x60;staging&#x60;, and &#x60;qa&#x60;. This parameter makes it easier to track which environments have requested deployments. The default environment is &#x60;production&#x60;.  The &#x60;auto_merge&#x60; parameter is used to ensure that the requested ref is not behind the repository&#39;s default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.  By default, [commit statuses](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#statuses) for every submitted context must be in a &#x60;success&#x60; state. The &#x60;required_contexts&#x60; parameter allows you to specify a subset of contexts that must be &#x60;success&#x60;, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.  The &#x60;payload&#x60; parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.  The &#x60;task&#x60; parameter is used by the deployment system to allow different execution paths. In the web world this might be &#x60;deploy:migrations&#x60; to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.  Users with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can create a deployment for a given ref.  #### Merged branch response You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is &#x60;master&#x60; in the response example *   There are no merge conflicts  If there are no new commits in the base branch, a new request to create a deployment should give a successful response.  #### Merge conflict response This error happens when the &#x60;auto_merge&#x60; option is enabled and when the default branch (in this case &#x60;master&#x60;), can&#39;t be merged into the branch that&#39;s being deployed (in this case &#x60;topic-branch&#x60;), due to merge conflicts.  #### Failed commit status checks This error happens when the &#x60;required_contexts&#x60; parameter indicates that one or more contexts need to have a &#x60;success&#x60; status for the commit to be deployed, but one or more of the required contexts do not have a state of &#x60;success&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDeploymentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Merged branch response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict or the commit&#39;s status checks failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment">Create a deployment Documentation</a>
     */
    public okhttp3.Call reposCreateDeploymentAsync(String owner, String repo, ReposCreateDeploymentRequest reposCreateDeploymentRequest, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateDeploymentValidateBeforeCall(owner, repo, reposCreateDeploymentRequest, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateDeploymentStatus
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param reposCreateDeploymentStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment-status">Create a deployment status Documentation</a>
     */
    public okhttp3.Call reposCreateDeploymentStatusCall(String owner, String repo, Integer deploymentId, ReposCreateDeploymentStatusRequest reposCreateDeploymentStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateDeploymentStatusRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateDeploymentStatusValidateBeforeCall(String owner, String repo, Integer deploymentId, ReposCreateDeploymentStatusRequest reposCreateDeploymentStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateDeploymentStatus(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateDeploymentStatus(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling reposCreateDeploymentStatus(Async)");
        }

        // verify the required parameter 'reposCreateDeploymentStatusRequest' is set
        if (reposCreateDeploymentStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateDeploymentStatusRequest' when calling reposCreateDeploymentStatus(Async)");
        }

        return reposCreateDeploymentStatusCall(owner, repo, deploymentId, reposCreateDeploymentStatusRequest, _callback);

    }

    /**
     * Create a deployment status
     * Users with &#x60;push&#x60; access can create deployment statuses for a given deployment.  GitHub Apps require &#x60;read &amp; write&#x60; access to \&quot;Deployments\&quot; and &#x60;read-only&#x60; access to \&quot;Repo contents\&quot; (for private repos). OAuth Apps require the &#x60;repo_deployment&#x60; scope.
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param reposCreateDeploymentStatusRequest  (required)
     * @return DeploymentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment-status">Create a deployment status Documentation</a>
     */
    public DeploymentStatus reposCreateDeploymentStatus(String owner, String repo, Integer deploymentId, ReposCreateDeploymentStatusRequest reposCreateDeploymentStatusRequest) throws ApiException {
        ApiResponse<DeploymentStatus> localVarResp = reposCreateDeploymentStatusWithHttpInfo(owner, repo, deploymentId, reposCreateDeploymentStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deployment status
     * Users with &#x60;push&#x60; access can create deployment statuses for a given deployment.  GitHub Apps require &#x60;read &amp; write&#x60; access to \&quot;Deployments\&quot; and &#x60;read-only&#x60; access to \&quot;Repo contents\&quot; (for private repos). OAuth Apps require the &#x60;repo_deployment&#x60; scope.
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param reposCreateDeploymentStatusRequest  (required)
     * @return ApiResponse&lt;DeploymentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment-status">Create a deployment status Documentation</a>
     */
    public ApiResponse<DeploymentStatus> reposCreateDeploymentStatusWithHttpInfo(String owner, String repo, Integer deploymentId, ReposCreateDeploymentStatusRequest reposCreateDeploymentStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateDeploymentStatusValidateBeforeCall(owner, repo, deploymentId, reposCreateDeploymentStatusRequest, null);
        Type localVarReturnType = new TypeToken<DeploymentStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment status (asynchronously)
     * Users with &#x60;push&#x60; access can create deployment statuses for a given deployment.  GitHub Apps require &#x60;read &amp; write&#x60; access to \&quot;Deployments\&quot; and &#x60;read-only&#x60; access to \&quot;Repo contents\&quot; (for private repos). OAuth Apps require the &#x60;repo_deployment&#x60; scope.
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param reposCreateDeploymentStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment-status">Create a deployment status Documentation</a>
     */
    public okhttp3.Call reposCreateDeploymentStatusAsync(String owner, String repo, Integer deploymentId, ReposCreateDeploymentStatusRequest reposCreateDeploymentStatusRequest, final ApiCallback<DeploymentStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateDeploymentStatusValidateBeforeCall(owner, repo, deploymentId, reposCreateDeploymentStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<DeploymentStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateDispatchEvent
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDispatchEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-dispatch-event">Create a repository dispatch event Documentation</a>
     */
    public okhttp3.Call reposCreateDispatchEventCall(String owner, String repo, ReposCreateDispatchEventRequest reposCreateDispatchEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateDispatchEventRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/dispatches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateDispatchEventValidateBeforeCall(String owner, String repo, ReposCreateDispatchEventRequest reposCreateDispatchEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateDispatchEvent(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateDispatchEvent(Async)");
        }

        // verify the required parameter 'reposCreateDispatchEventRequest' is set
        if (reposCreateDispatchEventRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateDispatchEventRequest' when calling reposCreateDispatchEvent(Async)");
        }

        return reposCreateDispatchEventCall(owner, repo, reposCreateDispatchEventRequest, _callback);

    }

    /**
     * Create a repository dispatch event
     * You can use this endpoint to trigger a webhook event called &#x60;repository_dispatch&#x60; when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the &#x60;repository_dispatch&#x60; event occurs. For an example &#x60;repository_dispatch&#x60; webhook payload, see \&quot;[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@2.22/webhooks/event-payloads/#repository_dispatch).\&quot;  The &#x60;client_payload&#x60; parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the &#x60;client_payload&#x60; can include a message that a user would like to send using a GitHub Actions workflow. Or the &#x60;client_payload&#x60; can be used as a test to debug your workflow.  This endpoint requires write access to the repository by providing either:    - Personal access tokens with &#x60;repo&#x60; scope. For more information, see \&quot;[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\&quot; in the GitHub Help documentation.   - GitHub Apps with both &#x60;metadata:read&#x60; and &#x60;contents:read&amp;write&#x60; permissions.  This input example shows how you can use the &#x60;client_payload&#x60; as a test to debug your workflow.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDispatchEventRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-dispatch-event">Create a repository dispatch event Documentation</a>
     */
    public void reposCreateDispatchEvent(String owner, String repo, ReposCreateDispatchEventRequest reposCreateDispatchEventRequest) throws ApiException {
        reposCreateDispatchEventWithHttpInfo(owner, repo, reposCreateDispatchEventRequest);
    }

    /**
     * Create a repository dispatch event
     * You can use this endpoint to trigger a webhook event called &#x60;repository_dispatch&#x60; when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the &#x60;repository_dispatch&#x60; event occurs. For an example &#x60;repository_dispatch&#x60; webhook payload, see \&quot;[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@2.22/webhooks/event-payloads/#repository_dispatch).\&quot;  The &#x60;client_payload&#x60; parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the &#x60;client_payload&#x60; can include a message that a user would like to send using a GitHub Actions workflow. Or the &#x60;client_payload&#x60; can be used as a test to debug your workflow.  This endpoint requires write access to the repository by providing either:    - Personal access tokens with &#x60;repo&#x60; scope. For more information, see \&quot;[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\&quot; in the GitHub Help documentation.   - GitHub Apps with both &#x60;metadata:read&#x60; and &#x60;contents:read&amp;write&#x60; permissions.  This input example shows how you can use the &#x60;client_payload&#x60; as a test to debug your workflow.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDispatchEventRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-dispatch-event">Create a repository dispatch event Documentation</a>
     */
    public ApiResponse<Void> reposCreateDispatchEventWithHttpInfo(String owner, String repo, ReposCreateDispatchEventRequest reposCreateDispatchEventRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateDispatchEventValidateBeforeCall(owner, repo, reposCreateDispatchEventRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a repository dispatch event (asynchronously)
     * You can use this endpoint to trigger a webhook event called &#x60;repository_dispatch&#x60; when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the &#x60;repository_dispatch&#x60; event occurs. For an example &#x60;repository_dispatch&#x60; webhook payload, see \&quot;[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@2.22/webhooks/event-payloads/#repository_dispatch).\&quot;  The &#x60;client_payload&#x60; parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the &#x60;client_payload&#x60; can include a message that a user would like to send using a GitHub Actions workflow. Or the &#x60;client_payload&#x60; can be used as a test to debug your workflow.  This endpoint requires write access to the repository by providing either:    - Personal access tokens with &#x60;repo&#x60; scope. For more information, see \&quot;[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\&quot; in the GitHub Help documentation.   - GitHub Apps with both &#x60;metadata:read&#x60; and &#x60;contents:read&amp;write&#x60; permissions.  This input example shows how you can use the &#x60;client_payload&#x60; as a test to debug your workflow.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateDispatchEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-dispatch-event">Create a repository dispatch event Documentation</a>
     */
    public okhttp3.Call reposCreateDispatchEventAsync(String owner, String repo, ReposCreateDispatchEventRequest reposCreateDispatchEventRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateDispatchEventValidateBeforeCall(owner, repo, reposCreateDispatchEventRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateForAuthenticatedUser
     * @param reposCreateForAuthenticatedUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-for-the-authenticated-user">Create a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call reposCreateForAuthenticatedUserCall(ReposCreateForAuthenticatedUserRequest reposCreateForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateForAuthenticatedUserRequest;

        // create path and map variables
        String localVarPath = "/user/repos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateForAuthenticatedUserValidateBeforeCall(ReposCreateForAuthenticatedUserRequest reposCreateForAuthenticatedUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reposCreateForAuthenticatedUserRequest' is set
        if (reposCreateForAuthenticatedUserRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateForAuthenticatedUserRequest' when calling reposCreateForAuthenticatedUser(Async)");
        }

        return reposCreateForAuthenticatedUserCall(reposCreateForAuthenticatedUserRequest, _callback);

    }

    /**
     * Create a repository for the authenticated user
     * Creates a new repository for the authenticated user.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository.
     * @param reposCreateForAuthenticatedUserRequest  (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-for-the-authenticated-user">Create a repository for the authenticated user Documentation</a>
     */
    public Repository reposCreateForAuthenticatedUser(ReposCreateForAuthenticatedUserRequest reposCreateForAuthenticatedUserRequest) throws ApiException {
        ApiResponse<Repository> localVarResp = reposCreateForAuthenticatedUserWithHttpInfo(reposCreateForAuthenticatedUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a repository for the authenticated user
     * Creates a new repository for the authenticated user.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository.
     * @param reposCreateForAuthenticatedUserRequest  (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-for-the-authenticated-user">Create a repository for the authenticated user Documentation</a>
     */
    public ApiResponse<Repository> reposCreateForAuthenticatedUserWithHttpInfo(ReposCreateForAuthenticatedUserRequest reposCreateForAuthenticatedUserRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateForAuthenticatedUserValidateBeforeCall(reposCreateForAuthenticatedUserRequest, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository for the authenticated user (asynchronously)
     * Creates a new repository for the authenticated user.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository.
     * @param reposCreateForAuthenticatedUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-for-the-authenticated-user">Create a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call reposCreateForAuthenticatedUserAsync(ReposCreateForAuthenticatedUserRequest reposCreateForAuthenticatedUserRequest, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateForAuthenticatedUserValidateBeforeCall(reposCreateForAuthenticatedUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateFork
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateForkRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-fork">Create a fork Documentation</a>
     */
    public okhttp3.Call reposCreateForkCall(String owner, String repo, ReposCreateForkRequest reposCreateForkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateForkRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/forks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateForkValidateBeforeCall(String owner, String repo, ReposCreateForkRequest reposCreateForkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateFork(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateFork(Async)");
        }

        return reposCreateForkCall(owner, repo, reposCreateForkRequest, _callback);

    }

    /**
     * Create a fork
     * Create a fork for the authenticated user.  **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateForkRequest  (optional)
     * @return FullRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-fork">Create a fork Documentation</a>
     */
    public FullRepository reposCreateFork(String owner, String repo, ReposCreateForkRequest reposCreateForkRequest) throws ApiException {
        ApiResponse<FullRepository> localVarResp = reposCreateForkWithHttpInfo(owner, repo, reposCreateForkRequest);
        return localVarResp.getData();
    }

    /**
     * Create a fork
     * Create a fork for the authenticated user.  **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateForkRequest  (optional)
     * @return ApiResponse&lt;FullRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-fork">Create a fork Documentation</a>
     */
    public ApiResponse<FullRepository> reposCreateForkWithHttpInfo(String owner, String repo, ReposCreateForkRequest reposCreateForkRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateForkValidateBeforeCall(owner, repo, reposCreateForkRequest, null);
        Type localVarReturnType = new TypeToken<FullRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a fork (asynchronously)
     * Create a fork for the authenticated user.  **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateForkRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-fork">Create a fork Documentation</a>
     */
    public okhttp3.Call reposCreateForkAsync(String owner, String repo, ReposCreateForkRequest reposCreateForkRequest, final ApiCallback<FullRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateForkValidateBeforeCall(owner, repo, reposCreateForkRequest, _callback);
        Type localVarReturnType = new TypeToken<FullRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateInOrg
     * @param org  (required)
     * @param reposCreateInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-an-organization-repository">Create an organization repository Documentation</a>
     */
    public okhttp3.Call reposCreateInOrgCall(String org, ReposCreateInOrgRequest reposCreateInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/repos"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateInOrgValidateBeforeCall(String org, ReposCreateInOrgRequest reposCreateInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reposCreateInOrg(Async)");
        }

        // verify the required parameter 'reposCreateInOrgRequest' is set
        if (reposCreateInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateInOrgRequest' when calling reposCreateInOrg(Async)");
        }

        return reposCreateInOrgCall(org, reposCreateInOrgRequest, _callback);

    }

    /**
     * Create an organization repository
     * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
     * @param org  (required)
     * @param reposCreateInOrgRequest  (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-an-organization-repository">Create an organization repository Documentation</a>
     */
    public Repository reposCreateInOrg(String org, ReposCreateInOrgRequest reposCreateInOrgRequest) throws ApiException {
        ApiResponse<Repository> localVarResp = reposCreateInOrgWithHttpInfo(org, reposCreateInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create an organization repository
     * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
     * @param org  (required)
     * @param reposCreateInOrgRequest  (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-an-organization-repository">Create an organization repository Documentation</a>
     */
    public ApiResponse<Repository> reposCreateInOrgWithHttpInfo(String org, ReposCreateInOrgRequest reposCreateInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateInOrgValidateBeforeCall(org, reposCreateInOrgRequest, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organization repository (asynchronously)
     * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
     * @param org  (required)
     * @param reposCreateInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-an-organization-repository">Create an organization repository Documentation</a>
     */
    public okhttp3.Call reposCreateInOrgAsync(String org, ReposCreateInOrgRequest reposCreateInOrgRequest, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateInOrgValidateBeforeCall(org, reposCreateInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateOrUpdateFileContents
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposCreateOrUpdateFileContentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-or-update-file-contents">Create or update file contents Documentation</a>
     */
    public okhttp3.Call reposCreateOrUpdateFileContentsCall(String owner, String repo, String path, ReposCreateOrUpdateFileContentsRequest reposCreateOrUpdateFileContentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateOrUpdateFileContentsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents/{path}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateOrUpdateFileContentsValidateBeforeCall(String owner, String repo, String path, ReposCreateOrUpdateFileContentsRequest reposCreateOrUpdateFileContentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateOrUpdateFileContents(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateOrUpdateFileContents(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling reposCreateOrUpdateFileContents(Async)");
        }

        // verify the required parameter 'reposCreateOrUpdateFileContentsRequest' is set
        if (reposCreateOrUpdateFileContentsRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateOrUpdateFileContentsRequest' when calling reposCreateOrUpdateFileContents(Async)");
        }

        return reposCreateOrUpdateFileContentsCall(owner, repo, path, reposCreateOrUpdateFileContentsRequest, _callback);

    }

    /**
     * Create or update file contents
     * Creates a new file or replaces an existing file in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposCreateOrUpdateFileContentsRequest  (required)
     * @return FileCommit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-or-update-file-contents">Create or update file contents Documentation</a>
     */
    public FileCommit reposCreateOrUpdateFileContents(String owner, String repo, String path, ReposCreateOrUpdateFileContentsRequest reposCreateOrUpdateFileContentsRequest) throws ApiException {
        ApiResponse<FileCommit> localVarResp = reposCreateOrUpdateFileContentsWithHttpInfo(owner, repo, path, reposCreateOrUpdateFileContentsRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update file contents
     * Creates a new file or replaces an existing file in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposCreateOrUpdateFileContentsRequest  (required)
     * @return ApiResponse&lt;FileCommit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-or-update-file-contents">Create or update file contents Documentation</a>
     */
    public ApiResponse<FileCommit> reposCreateOrUpdateFileContentsWithHttpInfo(String owner, String repo, String path, ReposCreateOrUpdateFileContentsRequest reposCreateOrUpdateFileContentsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateOrUpdateFileContentsValidateBeforeCall(owner, repo, path, reposCreateOrUpdateFileContentsRequest, null);
        Type localVarReturnType = new TypeToken<FileCommit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update file contents (asynchronously)
     * Creates a new file or replaces an existing file in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposCreateOrUpdateFileContentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-or-update-file-contents">Create or update file contents Documentation</a>
     */
    public okhttp3.Call reposCreateOrUpdateFileContentsAsync(String owner, String repo, String path, ReposCreateOrUpdateFileContentsRequest reposCreateOrUpdateFileContentsRequest, final ApiCallback<FileCommit> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateOrUpdateFileContentsValidateBeforeCall(owner, repo, path, reposCreateOrUpdateFileContentsRequest, _callback);
        Type localVarReturnType = new TypeToken<FileCommit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreatePagesSite
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreatePagesSiteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-github-pages-site">Create a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposCreatePagesSiteCall(String owner, String repo, ReposCreatePagesSiteRequest reposCreatePagesSiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreatePagesSiteRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreatePagesSiteValidateBeforeCall(String owner, String repo, ReposCreatePagesSiteRequest reposCreatePagesSiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreatePagesSite(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreatePagesSite(Async)");
        }

        // verify the required parameter 'reposCreatePagesSiteRequest' is set
        if (reposCreatePagesSiteRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreatePagesSiteRequest' when calling reposCreatePagesSite(Async)");
        }

        return reposCreatePagesSiteCall(owner, repo, reposCreatePagesSiteRequest, _callback);

    }

    /**
     * Create a GitHub Enterprise Server Pages site
     * Configures a GitHub Enterprise Server Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreatePagesSiteRequest  (required)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-github-pages-site">Create a GitHub Enterprise Server Pages site Documentation</a>
     */
    public Page reposCreatePagesSite(String owner, String repo, ReposCreatePagesSiteRequest reposCreatePagesSiteRequest) throws ApiException {
        ApiResponse<Page> localVarResp = reposCreatePagesSiteWithHttpInfo(owner, repo, reposCreatePagesSiteRequest);
        return localVarResp.getData();
    }

    /**
     * Create a GitHub Enterprise Server Pages site
     * Configures a GitHub Enterprise Server Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreatePagesSiteRequest  (required)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-github-pages-site">Create a GitHub Enterprise Server Pages site Documentation</a>
     */
    public ApiResponse<Page> reposCreatePagesSiteWithHttpInfo(String owner, String repo, ReposCreatePagesSiteRequest reposCreatePagesSiteRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreatePagesSiteValidateBeforeCall(owner, repo, reposCreatePagesSiteRequest, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a GitHub Enterprise Server Pages site (asynchronously)
     * Configures a GitHub Enterprise Server Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreatePagesSiteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-github-pages-site">Create a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposCreatePagesSiteAsync(String owner, String repo, ReposCreatePagesSiteRequest reposCreatePagesSiteRequest, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreatePagesSiteValidateBeforeCall(owner, repo, reposCreatePagesSiteRequest, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateRelease
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateReleaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-release">Create a release Documentation</a>
     */
    public okhttp3.Call reposCreateReleaseCall(String owner, String repo, ReposCreateReleaseRequest reposCreateReleaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateReleaseRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateReleaseValidateBeforeCall(String owner, String repo, ReposCreateReleaseRequest reposCreateReleaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateRelease(Async)");
        }

        // verify the required parameter 'reposCreateReleaseRequest' is set
        if (reposCreateReleaseRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateReleaseRequest' when calling reposCreateRelease(Async)");
        }

        return reposCreateReleaseCall(owner, repo, reposCreateReleaseRequest, _callback);

    }

    /**
     * Create a release
     * Users with push access to the repository can create a release.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateReleaseRequest  (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-release">Create a release Documentation</a>
     */
    public Release reposCreateRelease(String owner, String repo, ReposCreateReleaseRequest reposCreateReleaseRequest) throws ApiException {
        ApiResponse<Release> localVarResp = reposCreateReleaseWithHttpInfo(owner, repo, reposCreateReleaseRequest);
        return localVarResp.getData();
    }

    /**
     * Create a release
     * Users with push access to the repository can create a release.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateReleaseRequest  (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-release">Create a release Documentation</a>
     */
    public ApiResponse<Release> reposCreateReleaseWithHttpInfo(String owner, String repo, ReposCreateReleaseRequest reposCreateReleaseRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateReleaseValidateBeforeCall(owner, repo, reposCreateReleaseRequest, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a release (asynchronously)
     * Users with push access to the repository can create a release.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.22/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateReleaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-release">Create a release Documentation</a>
     */
    public okhttp3.Call reposCreateReleaseAsync(String owner, String repo, ReposCreateReleaseRequest reposCreateReleaseRequest, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateReleaseValidateBeforeCall(owner, repo, reposCreateReleaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateUsingTemplate
     * @param templateOwner  (required)
     * @param templateRepo  (required)
     * @param reposCreateUsingTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-using-a-template">Create a repository using a template Documentation</a>
     */
    public okhttp3.Call reposCreateUsingTemplateCall(String templateOwner, String templateRepo, ReposCreateUsingTemplateRequest reposCreateUsingTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateUsingTemplateRequest;

        // create path and map variables
        String localVarPath = "/repos/{template_owner}/{template_repo}/generate"
            .replace("{" + "template_owner" + "}", localVarApiClient.escapeString(templateOwner.toString()))
            .replace("{" + "template_repo" + "}", localVarApiClient.escapeString(templateRepo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateUsingTemplateValidateBeforeCall(String templateOwner, String templateRepo, ReposCreateUsingTemplateRequest reposCreateUsingTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateOwner' is set
        if (templateOwner == null) {
            throw new ApiException("Missing the required parameter 'templateOwner' when calling reposCreateUsingTemplate(Async)");
        }

        // verify the required parameter 'templateRepo' is set
        if (templateRepo == null) {
            throw new ApiException("Missing the required parameter 'templateRepo' when calling reposCreateUsingTemplate(Async)");
        }

        // verify the required parameter 'reposCreateUsingTemplateRequest' is set
        if (reposCreateUsingTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'reposCreateUsingTemplateRequest' when calling reposCreateUsingTemplate(Async)");
        }

        return reposCreateUsingTemplateCall(templateOwner, templateRepo, reposCreateUsingTemplateRequest, _callback);

    }

    /**
     * Create a repository using a template
     * Creates a new repository using a repository template. Use the &#x60;template_owner&#x60; and &#x60;template_repo&#x60; route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository&#39;s information using the [Get a repository](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository) endpoint and check that the &#x60;is_template&#x60; key is &#x60;true&#x60;.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
     * @param templateOwner  (required)
     * @param templateRepo  (required)
     * @param reposCreateUsingTemplateRequest  (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-using-a-template">Create a repository using a template Documentation</a>
     */
    public Repository reposCreateUsingTemplate(String templateOwner, String templateRepo, ReposCreateUsingTemplateRequest reposCreateUsingTemplateRequest) throws ApiException {
        ApiResponse<Repository> localVarResp = reposCreateUsingTemplateWithHttpInfo(templateOwner, templateRepo, reposCreateUsingTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a repository using a template
     * Creates a new repository using a repository template. Use the &#x60;template_owner&#x60; and &#x60;template_repo&#x60; route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository&#39;s information using the [Get a repository](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository) endpoint and check that the &#x60;is_template&#x60; key is &#x60;true&#x60;.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
     * @param templateOwner  (required)
     * @param templateRepo  (required)
     * @param reposCreateUsingTemplateRequest  (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-using-a-template">Create a repository using a template Documentation</a>
     */
    public ApiResponse<Repository> reposCreateUsingTemplateWithHttpInfo(String templateOwner, String templateRepo, ReposCreateUsingTemplateRequest reposCreateUsingTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateUsingTemplateValidateBeforeCall(templateOwner, templateRepo, reposCreateUsingTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository using a template (asynchronously)
     * Creates a new repository using a repository template. Use the &#x60;template_owner&#x60; and &#x60;template_repo&#x60; route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository&#39;s information using the [Get a repository](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository) endpoint and check that the &#x60;is_template&#x60; key is &#x60;true&#x60;.  **OAuth scope requirements**  When using [OAuth](https://docs.github.com/enterprise-server@2.22/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:  *   &#x60;public_repo&#x60; scope or &#x60;repo&#x60; scope to create a public repository. Note: For GitHub AE, use &#x60;repo&#x60; scope to create an internal repository. *   &#x60;repo&#x60; scope to create a private repository
     * @param templateOwner  (required)
     * @param templateRepo  (required)
     * @param reposCreateUsingTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-using-a-template">Create a repository using a template Documentation</a>
     */
    public okhttp3.Call reposCreateUsingTemplateAsync(String templateOwner, String templateRepo, ReposCreateUsingTemplateRequest reposCreateUsingTemplateRequest, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateUsingTemplateValidateBeforeCall(templateOwner, templateRepo, reposCreateUsingTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposCreateWebhook
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateWebhookRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-webhook">Create a repository webhook Documentation</a>
     */
    public okhttp3.Call reposCreateWebhookCall(String owner, String repo, ReposCreateWebhookRequest reposCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposCreateWebhookRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposCreateWebhookValidateBeforeCall(String owner, String repo, ReposCreateWebhookRequest reposCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposCreateWebhook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposCreateWebhook(Async)");
        }

        return reposCreateWebhookCall(owner, repo, reposCreateWebhookRequest, _callback);

    }

    /**
     * Create a repository webhook
     * Repositories can have multiple webhooks installed. Each webhook should have a unique &#x60;config&#x60;. Multiple webhooks can share the same &#x60;config&#x60; as long as those webhooks do not have any &#x60;events&#x60; that overlap.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateWebhookRequest  (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-webhook">Create a repository webhook Documentation</a>
     */
    public Hook reposCreateWebhook(String owner, String repo, ReposCreateWebhookRequest reposCreateWebhookRequest) throws ApiException {
        ApiResponse<Hook> localVarResp = reposCreateWebhookWithHttpInfo(owner, repo, reposCreateWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Create a repository webhook
     * Repositories can have multiple webhooks installed. Each webhook should have a unique &#x60;config&#x60;. Multiple webhooks can share the same &#x60;config&#x60; as long as those webhooks do not have any &#x60;events&#x60; that overlap.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateWebhookRequest  (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-webhook">Create a repository webhook Documentation</a>
     */
    public ApiResponse<Hook> reposCreateWebhookWithHttpInfo(String owner, String repo, ReposCreateWebhookRequest reposCreateWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = reposCreateWebhookValidateBeforeCall(owner, repo, reposCreateWebhookRequest, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository webhook (asynchronously)
     * Repositories can have multiple webhooks installed. Each webhook should have a unique &#x60;config&#x60;. Multiple webhooks can share the same &#x60;config&#x60; as long as those webhooks do not have any &#x60;events&#x60; that overlap.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposCreateWebhookRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-repository-webhook">Create a repository webhook Documentation</a>
     */
    public okhttp3.Call reposCreateWebhookAsync(String owner, String repo, ReposCreateWebhookRequest reposCreateWebhookRequest, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposCreateWebhookValidateBeforeCall(owner, repo, reposCreateWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeclineInvitationForAuthenticatedUser
     * @param invitationId invitation_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#decline-a-repository-invitation">Decline a repository invitation Documentation</a>
     */
    public okhttp3.Call reposDeclineInvitationForAuthenticatedUserCall(Integer invitationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/repository_invitations/{invitation_id}"
            .replace("{" + "invitation_id" + "}", localVarApiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeclineInvitationForAuthenticatedUserValidateBeforeCall(Integer invitationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling reposDeclineInvitationForAuthenticatedUser(Async)");
        }

        return reposDeclineInvitationForAuthenticatedUserCall(invitationId, _callback);

    }

    /**
     * Decline a repository invitation
     * 
     * @param invitationId invitation_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#decline-a-repository-invitation">Decline a repository invitation Documentation</a>
     */
    public void reposDeclineInvitationForAuthenticatedUser(Integer invitationId) throws ApiException {
        reposDeclineInvitationForAuthenticatedUserWithHttpInfo(invitationId);
    }

    /**
     * Decline a repository invitation
     * 
     * @param invitationId invitation_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#decline-a-repository-invitation">Decline a repository invitation Documentation</a>
     */
    public ApiResponse<Void> reposDeclineInvitationForAuthenticatedUserWithHttpInfo(Integer invitationId) throws ApiException {
        okhttp3.Call localVarCall = reposDeclineInvitationForAuthenticatedUserValidateBeforeCall(invitationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Decline a repository invitation (asynchronously)
     * 
     * @param invitationId invitation_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#decline-a-repository-invitation">Decline a repository invitation Documentation</a>
     */
    public okhttp3.Call reposDeclineInvitationForAuthenticatedUserAsync(Integer invitationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeclineInvitationForAuthenticatedUserValidateBeforeCall(invitationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDelete
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository">Delete a repository Documentation</a>
     */
    public okhttp3.Call reposDeleteCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDelete(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDelete(Async)");
        }

        return reposDeleteCall(owner, repo, _callback);

    }

    /**
     * Delete a repository
     * Deleting a repository requires admin access. If OAuth is used, the &#x60;delete_repo&#x60; scope is required.  If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a &#x60;403 Forbidden&#x60; response.
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository">Delete a repository Documentation</a>
     */
    public void reposDelete(String owner, String repo) throws ApiException {
        reposDeleteWithHttpInfo(owner, repo);
    }

    /**
     * Delete a repository
     * Deleting a repository requires admin access. If OAuth is used, the &#x60;delete_repo&#x60; scope is required.  If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a &#x60;403 Forbidden&#x60; response.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository">Delete a repository Documentation</a>
     */
    public ApiResponse<Void> reposDeleteWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository (asynchronously)
     * Deleting a repository requires admin access. If OAuth is used, the &#x60;delete_repo&#x60; scope is required.  If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a &#x60;403 Forbidden&#x60; response.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository">Delete a repository Documentation</a>
     */
    public okhttp3.Call reposDeleteAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-access-restrictions">Delete access restrictions Documentation</a>
     */
    public okhttp3.Call reposDeleteAccessRestrictionsCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposDeleteAccessRestrictions(Async)");
        }

        return reposDeleteAccessRestrictionsCall(owner, repo, branch, _callback);

    }

    /**
     * Delete access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Disables the ability to restrict who can push to this branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-access-restrictions">Delete access restrictions Documentation</a>
     */
    public void reposDeleteAccessRestrictions(String owner, String repo, String branch) throws ApiException {
        reposDeleteAccessRestrictionsWithHttpInfo(owner, repo, branch);
    }

    /**
     * Delete access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Disables the ability to restrict who can push to this branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-access-restrictions">Delete access restrictions Documentation</a>
     */
    public ApiResponse<Void> reposDeleteAccessRestrictionsWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteAccessRestrictionsValidateBeforeCall(owner, repo, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Disables the ability to restrict who can push to this branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-access-restrictions">Delete access restrictions Documentation</a>
     */
    public okhttp3.Call reposDeleteAccessRestrictionsAsync(String owner, String repo, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteAccessRestrictionsValidateBeforeCall(owner, repo, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteAdminBranchProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-admin-branch-protection">Delete admin branch protection Documentation</a>
     */
    public okhttp3.Call reposDeleteAdminBranchProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteAdminBranchProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteAdminBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteAdminBranchProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposDeleteAdminBranchProtection(Async)");
        }

        return reposDeleteAdminBranchProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Delete admin branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-admin-branch-protection">Delete admin branch protection Documentation</a>
     */
    public void reposDeleteAdminBranchProtection(String owner, String repo, String branch) throws ApiException {
        reposDeleteAdminBranchProtectionWithHttpInfo(owner, repo, branch);
    }

    /**
     * Delete admin branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-admin-branch-protection">Delete admin branch protection Documentation</a>
     */
    public ApiResponse<Void> reposDeleteAdminBranchProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteAdminBranchProtectionValidateBeforeCall(owner, repo, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete admin branch protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-admin-branch-protection">Delete admin branch protection Documentation</a>
     */
    public okhttp3.Call reposDeleteAdminBranchProtectionAsync(String owner, String repo, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteAdminBranchProtectionValidateBeforeCall(owner, repo, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteBranchProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-branch-protection">Delete branch protection Documentation</a>
     */
    public okhttp3.Call reposDeleteBranchProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteBranchProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteBranchProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposDeleteBranchProtection(Async)");
        }

        return reposDeleteBranchProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Delete branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-branch-protection">Delete branch protection Documentation</a>
     */
    public void reposDeleteBranchProtection(String owner, String repo, String branch) throws ApiException {
        reposDeleteBranchProtectionWithHttpInfo(owner, repo, branch);
    }

    /**
     * Delete branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-branch-protection">Delete branch protection Documentation</a>
     */
    public ApiResponse<Void> reposDeleteBranchProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteBranchProtectionValidateBeforeCall(owner, repo, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete branch protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-branch-protection">Delete branch protection Documentation</a>
     */
    public okhttp3.Call reposDeleteBranchProtectionAsync(String owner, String repo, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteBranchProtectionValidateBeforeCall(owner, repo, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteCommitComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-commit-comment">Delete a commit comment Documentation</a>
     */
    public okhttp3.Call reposDeleteCommitCommentCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reposDeleteCommitComment(Async)");
        }

        return reposDeleteCommitCommentCall(owner, repo, commentId, _callback);

    }

    /**
     * Delete a commit comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-commit-comment">Delete a commit comment Documentation</a>
     */
    public void reposDeleteCommitComment(String owner, String repo, Integer commentId) throws ApiException {
        reposDeleteCommitCommentWithHttpInfo(owner, repo, commentId);
    }

    /**
     * Delete a commit comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-commit-comment">Delete a commit comment Documentation</a>
     */
    public ApiResponse<Void> reposDeleteCommitCommentWithHttpInfo(String owner, String repo, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteCommitCommentValidateBeforeCall(owner, repo, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a commit comment (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-commit-comment">Delete a commit comment Documentation</a>
     */
    public okhttp3.Call reposDeleteCommitCommentAsync(String owner, String repo, Integer commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteCommitCommentValidateBeforeCall(owner, repo, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteCommitSignatureProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-commit-signature-protection">Delete commit signature protection Documentation</a>
     */
    public okhttp3.Call reposDeleteCommitSignatureProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteCommitSignatureProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteCommitSignatureProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteCommitSignatureProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposDeleteCommitSignatureProtection(Async)");
        }

        return reposDeleteCommitSignatureProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Delete commit signature protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-commit-signature-protection">Delete commit signature protection Documentation</a>
     */
    public void reposDeleteCommitSignatureProtection(String owner, String repo, String branch) throws ApiException {
        reposDeleteCommitSignatureProtectionWithHttpInfo(owner, repo, branch);
    }

    /**
     * Delete commit signature protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-commit-signature-protection">Delete commit signature protection Documentation</a>
     */
    public ApiResponse<Void> reposDeleteCommitSignatureProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteCommitSignatureProtectionValidateBeforeCall(owner, repo, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete commit signature protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-commit-signature-protection">Delete commit signature protection Documentation</a>
     */
    public okhttp3.Call reposDeleteCommitSignatureProtectionAsync(String owner, String repo, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteCommitSignatureProtectionValidateBeforeCall(owner, repo, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteDeployKey
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deploy-key">Delete a deploy key Documentation</a>
     */
    public okhttp3.Call reposDeleteDeployKeyCall(String owner, String repo, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys/{key_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteDeployKeyValidateBeforeCall(String owner, String repo, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteDeployKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteDeployKey(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling reposDeleteDeployKey(Async)");
        }

        return reposDeleteDeployKeyCall(owner, repo, keyId, _callback);

    }

    /**
     * Delete a deploy key
     * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deploy-key">Delete a deploy key Documentation</a>
     */
    public void reposDeleteDeployKey(String owner, String repo, Integer keyId) throws ApiException {
        reposDeleteDeployKeyWithHttpInfo(owner, repo, keyId);
    }

    /**
     * Delete a deploy key
     * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deploy-key">Delete a deploy key Documentation</a>
     */
    public ApiResponse<Void> reposDeleteDeployKeyWithHttpInfo(String owner, String repo, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteDeployKeyValidateBeforeCall(owner, repo, keyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a deploy key (asynchronously)
     * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deploy-key">Delete a deploy key Documentation</a>
     */
    public okhttp3.Call reposDeleteDeployKeyAsync(String owner, String repo, Integer keyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteDeployKeyValidateBeforeCall(owner, repo, keyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteDeployment
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deployment">Delete a deployment Documentation</a>
     */
    public okhttp3.Call reposDeleteDeploymentCall(String owner, String repo, Integer deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/deployments/{deployment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteDeploymentValidateBeforeCall(String owner, String repo, Integer deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteDeployment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteDeployment(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling reposDeleteDeployment(Async)");
        }

        return reposDeleteDeploymentCall(owner, repo, deploymentId, _callback);

    }

    /**
     * Delete a deployment
     * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can delete an inactive deployment.  To set a deployment as inactive, you must:  *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status.  For more information, see \&quot;[Create a deployment](https://docs.github.com/enterprise-server@2.22/rest/reference/repos/#create-a-deployment)\&quot; and \&quot;[Create a deployment status](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment-status).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deployment">Delete a deployment Documentation</a>
     */
    public void reposDeleteDeployment(String owner, String repo, Integer deploymentId) throws ApiException {
        reposDeleteDeploymentWithHttpInfo(owner, repo, deploymentId);
    }

    /**
     * Delete a deployment
     * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can delete an inactive deployment.  To set a deployment as inactive, you must:  *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status.  For more information, see \&quot;[Create a deployment](https://docs.github.com/enterprise-server@2.22/rest/reference/repos/#create-a-deployment)\&quot; and \&quot;[Create a deployment status](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment-status).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deployment">Delete a deployment Documentation</a>
     */
    public ApiResponse<Void> reposDeleteDeploymentWithHttpInfo(String owner, String repo, Integer deploymentId) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteDeploymentValidateBeforeCall(owner, repo, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a deployment (asynchronously)
     * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scopes can delete an inactive deployment.  To set a deployment as inactive, you must:  *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status.  For more information, see \&quot;[Create a deployment](https://docs.github.com/enterprise-server@2.22/rest/reference/repos/#create-a-deployment)\&quot; and \&quot;[Create a deployment status](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-deployment-status).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-deployment">Delete a deployment Documentation</a>
     */
    public okhttp3.Call reposDeleteDeploymentAsync(String owner, String repo, Integer deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteDeploymentValidateBeforeCall(owner, repo, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteFile
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposDeleteFileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-file">Delete a file Documentation</a>
     */
    public okhttp3.Call reposDeleteFileCall(String owner, String repo, String path, ReposDeleteFileRequest reposDeleteFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposDeleteFileRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents/{path}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteFileValidateBeforeCall(String owner, String repo, String path, ReposDeleteFileRequest reposDeleteFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteFile(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteFile(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling reposDeleteFile(Async)");
        }

        // verify the required parameter 'reposDeleteFileRequest' is set
        if (reposDeleteFileRequest == null) {
            throw new ApiException("Missing the required parameter 'reposDeleteFileRequest' when calling reposDeleteFile(Async)");
        }

        return reposDeleteFileCall(owner, repo, path, reposDeleteFileRequest, _callback);

    }

    /**
     * Delete a file
     * Deletes a file in a repository.  You can provide an additional &#x60;committer&#x60; parameter, which is an object containing information about the committer. Or, you can provide an &#x60;author&#x60; parameter, which is an object containing information about the author.  The &#x60;author&#x60; section is optional and is filled in with the &#x60;committer&#x60; information if omitted. If the &#x60;committer&#x60; information is omitted, the authenticated user&#39;s information is used.  You must provide values for both &#x60;name&#x60; and &#x60;email&#x60;, whether you choose to use &#x60;author&#x60; or &#x60;committer&#x60;. Otherwise, you&#39;ll receive a &#x60;422&#x60; status code.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposDeleteFileRequest  (required)
     * @return FileCommit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-file">Delete a file Documentation</a>
     */
    public FileCommit reposDeleteFile(String owner, String repo, String path, ReposDeleteFileRequest reposDeleteFileRequest) throws ApiException {
        ApiResponse<FileCommit> localVarResp = reposDeleteFileWithHttpInfo(owner, repo, path, reposDeleteFileRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a file
     * Deletes a file in a repository.  You can provide an additional &#x60;committer&#x60; parameter, which is an object containing information about the committer. Or, you can provide an &#x60;author&#x60; parameter, which is an object containing information about the author.  The &#x60;author&#x60; section is optional and is filled in with the &#x60;committer&#x60; information if omitted. If the &#x60;committer&#x60; information is omitted, the authenticated user&#39;s information is used.  You must provide values for both &#x60;name&#x60; and &#x60;email&#x60;, whether you choose to use &#x60;author&#x60; or &#x60;committer&#x60;. Otherwise, you&#39;ll receive a &#x60;422&#x60; status code.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposDeleteFileRequest  (required)
     * @return ApiResponse&lt;FileCommit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-file">Delete a file Documentation</a>
     */
    public ApiResponse<FileCommit> reposDeleteFileWithHttpInfo(String owner, String repo, String path, ReposDeleteFileRequest reposDeleteFileRequest) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteFileValidateBeforeCall(owner, repo, path, reposDeleteFileRequest, null);
        Type localVarReturnType = new TypeToken<FileCommit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a file (asynchronously)
     * Deletes a file in a repository.  You can provide an additional &#x60;committer&#x60; parameter, which is an object containing information about the committer. Or, you can provide an &#x60;author&#x60; parameter, which is an object containing information about the author.  The &#x60;author&#x60; section is optional and is filled in with the &#x60;committer&#x60; information if omitted. If the &#x60;committer&#x60; information is omitted, the authenticated user&#39;s information is used.  You must provide values for both &#x60;name&#x60; and &#x60;email&#x60;, whether you choose to use &#x60;author&#x60; or &#x60;committer&#x60;. Otherwise, you&#39;ll receive a &#x60;422&#x60; status code.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param reposDeleteFileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-file">Delete a file Documentation</a>
     */
    public okhttp3.Call reposDeleteFileAsync(String owner, String repo, String path, ReposDeleteFileRequest reposDeleteFileRequest, final ApiCallback<FileCommit> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteFileValidateBeforeCall(owner, repo, path, reposDeleteFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FileCommit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteInvitation
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-invitation">Delete a repository invitation Documentation</a>
     */
    public okhttp3.Call reposDeleteInvitationCall(String owner, String repo, Integer invitationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/invitations/{invitation_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "invitation_id" + "}", localVarApiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteInvitationValidateBeforeCall(String owner, String repo, Integer invitationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteInvitation(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteInvitation(Async)");
        }

        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling reposDeleteInvitation(Async)");
        }

        return reposDeleteInvitationCall(owner, repo, invitationId, _callback);

    }

    /**
     * Delete a repository invitation
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-invitation">Delete a repository invitation Documentation</a>
     */
    public void reposDeleteInvitation(String owner, String repo, Integer invitationId) throws ApiException {
        reposDeleteInvitationWithHttpInfo(owner, repo, invitationId);
    }

    /**
     * Delete a repository invitation
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-invitation">Delete a repository invitation Documentation</a>
     */
    public ApiResponse<Void> reposDeleteInvitationWithHttpInfo(String owner, String repo, Integer invitationId) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteInvitationValidateBeforeCall(owner, repo, invitationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository invitation (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-invitation">Delete a repository invitation Documentation</a>
     */
    public okhttp3.Call reposDeleteInvitationAsync(String owner, String repo, Integer invitationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteInvitationValidateBeforeCall(owner, repo, invitationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeletePagesSite
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-github-pages-site">Delete a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposDeletePagesSiteCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeletePagesSiteValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeletePagesSite(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeletePagesSite(Async)");
        }

        return reposDeletePagesSiteCall(owner, repo, _callback);

    }

    /**
     * Delete a GitHub Enterprise Server Pages site
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-github-pages-site">Delete a GitHub Enterprise Server Pages site Documentation</a>
     */
    public void reposDeletePagesSite(String owner, String repo) throws ApiException {
        reposDeletePagesSiteWithHttpInfo(owner, repo);
    }

    /**
     * Delete a GitHub Enterprise Server Pages site
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-github-pages-site">Delete a GitHub Enterprise Server Pages site Documentation</a>
     */
    public ApiResponse<Void> reposDeletePagesSiteWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposDeletePagesSiteValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a GitHub Enterprise Server Pages site (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-github-pages-site">Delete a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposDeletePagesSiteAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeletePagesSiteValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeletePullRequestReviewProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-pull-request-review-protection">Delete pull request review protection Documentation</a>
     */
    public okhttp3.Call reposDeletePullRequestReviewProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeletePullRequestReviewProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeletePullRequestReviewProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeletePullRequestReviewProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposDeletePullRequestReviewProtection(Async)");
        }

        return reposDeletePullRequestReviewProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Delete pull request review protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-pull-request-review-protection">Delete pull request review protection Documentation</a>
     */
    public void reposDeletePullRequestReviewProtection(String owner, String repo, String branch) throws ApiException {
        reposDeletePullRequestReviewProtectionWithHttpInfo(owner, repo, branch);
    }

    /**
     * Delete pull request review protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-pull-request-review-protection">Delete pull request review protection Documentation</a>
     */
    public ApiResponse<Void> reposDeletePullRequestReviewProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposDeletePullRequestReviewProtectionValidateBeforeCall(owner, repo, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete pull request review protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-pull-request-review-protection">Delete pull request review protection Documentation</a>
     */
    public okhttp3.Call reposDeletePullRequestReviewProtectionAsync(String owner, String repo, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeletePullRequestReviewProtectionValidateBeforeCall(owner, repo, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteRelease
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release">Delete a release Documentation</a>
     */
    public okhttp3.Call reposDeleteReleaseCall(String owner, String repo, Integer releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteReleaseValidateBeforeCall(String owner, String repo, Integer releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteRelease(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reposDeleteRelease(Async)");
        }

        return reposDeleteReleaseCall(owner, repo, releaseId, _callback);

    }

    /**
     * Delete a release
     * Users with push access to the repository can delete a release.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release">Delete a release Documentation</a>
     */
    public void reposDeleteRelease(String owner, String repo, Integer releaseId) throws ApiException {
        reposDeleteReleaseWithHttpInfo(owner, repo, releaseId);
    }

    /**
     * Delete a release
     * Users with push access to the repository can delete a release.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release">Delete a release Documentation</a>
     */
    public ApiResponse<Void> reposDeleteReleaseWithHttpInfo(String owner, String repo, Integer releaseId) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteReleaseValidateBeforeCall(owner, repo, releaseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a release (asynchronously)
     * Users with push access to the repository can delete a release.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release">Delete a release Documentation</a>
     */
    public okhttp3.Call reposDeleteReleaseAsync(String owner, String repo, Integer releaseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteReleaseValidateBeforeCall(owner, repo, releaseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteReleaseAsset
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release-asset">Delete a release asset Documentation</a>
     */
    public okhttp3.Call reposDeleteReleaseAssetCall(String owner, String repo, Integer assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteReleaseAssetValidateBeforeCall(String owner, String repo, Integer assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteReleaseAsset(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteReleaseAsset(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling reposDeleteReleaseAsset(Async)");
        }

        return reposDeleteReleaseAssetCall(owner, repo, assetId, _callback);

    }

    /**
     * Delete a release asset
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release-asset">Delete a release asset Documentation</a>
     */
    public void reposDeleteReleaseAsset(String owner, String repo, Integer assetId) throws ApiException {
        reposDeleteReleaseAssetWithHttpInfo(owner, repo, assetId);
    }

    /**
     * Delete a release asset
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release-asset">Delete a release asset Documentation</a>
     */
    public ApiResponse<Void> reposDeleteReleaseAssetWithHttpInfo(String owner, String repo, Integer assetId) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteReleaseAssetValidateBeforeCall(owner, repo, assetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a release asset (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-release-asset">Delete a release asset Documentation</a>
     */
    public okhttp3.Call reposDeleteReleaseAssetAsync(String owner, String repo, Integer assetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteReleaseAssetValidateBeforeCall(owner, repo, assetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDeleteWebhook
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-webhook">Delete a repository webhook Documentation</a>
     */
    public okhttp3.Call reposDeleteWebhookCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDeleteWebhookValidateBeforeCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDeleteWebhook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDeleteWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling reposDeleteWebhook(Async)");
        }

        return reposDeleteWebhookCall(owner, repo, hookId, _callback);

    }

    /**
     * Delete a repository webhook
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-webhook">Delete a repository webhook Documentation</a>
     */
    public void reposDeleteWebhook(String owner, String repo, Integer hookId) throws ApiException {
        reposDeleteWebhookWithHttpInfo(owner, repo, hookId);
    }

    /**
     * Delete a repository webhook
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-webhook">Delete a repository webhook Documentation</a>
     */
    public ApiResponse<Void> reposDeleteWebhookWithHttpInfo(String owner, String repo, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = reposDeleteWebhookValidateBeforeCall(owner, repo, hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository webhook (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#delete-a-repository-webhook">Delete a repository webhook Documentation</a>
     */
    public okhttp3.Call reposDeleteWebhookAsync(String owner, String repo, Integer hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDeleteWebhookValidateBeforeCall(owner, repo, hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDownloadTarballArchive
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (tar) Documentation</a>
     */
    public okhttp3.Call reposDownloadTarballArchiveCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/tarball/{ref}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDownloadTarballArchiveValidateBeforeCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDownloadTarballArchive(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDownloadTarballArchive(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling reposDownloadTarballArchive(Async)");
        }

        return reposDownloadTarballArchiveCall(owner, repo, ref, _callback);

    }

    /**
     * Download a repository archive (tar)
     * Gets a redirect URL to download a tar archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (tar) Documentation</a>
     */
    public void reposDownloadTarballArchive(String owner, String repo, String ref) throws ApiException {
        reposDownloadTarballArchiveWithHttpInfo(owner, repo, ref);
    }

    /**
     * Download a repository archive (tar)
     * Gets a redirect URL to download a tar archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (tar) Documentation</a>
     */
    public ApiResponse<Void> reposDownloadTarballArchiveWithHttpInfo(String owner, String repo, String ref) throws ApiException {
        okhttp3.Call localVarCall = reposDownloadTarballArchiveValidateBeforeCall(owner, repo, ref, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download a repository archive (tar) (asynchronously)
     * Gets a redirect URL to download a tar archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (tar) Documentation</a>
     */
    public okhttp3.Call reposDownloadTarballArchiveAsync(String owner, String repo, String ref, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDownloadTarballArchiveValidateBeforeCall(owner, repo, ref, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposDownloadZipballArchive
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (zip) Documentation</a>
     */
    public okhttp3.Call reposDownloadZipballArchiveCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/zipball/{ref}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposDownloadZipballArchiveValidateBeforeCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposDownloadZipballArchive(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposDownloadZipballArchive(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling reposDownloadZipballArchive(Async)");
        }

        return reposDownloadZipballArchiveCall(owner, repo, ref, _callback);

    }

    /**
     * Download a repository archive (zip)
     * Gets a redirect URL to download a zip archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (zip) Documentation</a>
     */
    public void reposDownloadZipballArchive(String owner, String repo, String ref) throws ApiException {
        reposDownloadZipballArchiveWithHttpInfo(owner, repo, ref);
    }

    /**
     * Download a repository archive (zip)
     * Gets a redirect URL to download a zip archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (zip) Documentation</a>
     */
    public ApiResponse<Void> reposDownloadZipballArchiveWithHttpInfo(String owner, String repo, String ref) throws ApiException {
        okhttp3.Call localVarCall = reposDownloadZipballArchiveValidateBeforeCall(owner, repo, ref, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download a repository archive (zip) (asynchronously)
     * Gets a redirect URL to download a zip archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;master&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#download-a-repository-archive">Download a repository archive (zip) Documentation</a>
     */
    public okhttp3.Call reposDownloadZipballArchiveAsync(String owner, String repo, String ref, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposDownloadZipballArchiveValidateBeforeCall(owner, repo, ref, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGet
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository">Get a repository Documentation</a>
     */
    public okhttp3.Call reposGetCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGet(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGet(Async)");
        }

        return reposGetCall(owner, repo, _callback);

    }

    /**
     * Get a repository
     * When you pass the &#x60;scarlet-witch-preview&#x60; media type, requests to get a repository will also return the repository&#39;s code of conduct if it can be detected from the repository&#39;s code of conduct file.  The &#x60;parent&#x60; and &#x60;source&#x60; objects are present when the repository is a fork. &#x60;parent&#x60; is the repository this repository was forked from, &#x60;source&#x60; is the ultimate source for the network.
     * @param owner  (required)
     * @param repo  (required)
     * @return FullRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository">Get a repository Documentation</a>
     */
    public FullRepository reposGet(String owner, String repo) throws ApiException {
        ApiResponse<FullRepository> localVarResp = reposGetWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get a repository
     * When you pass the &#x60;scarlet-witch-preview&#x60; media type, requests to get a repository will also return the repository&#39;s code of conduct if it can be detected from the repository&#39;s code of conduct file.  The &#x60;parent&#x60; and &#x60;source&#x60; objects are present when the repository is a fork. &#x60;parent&#x60; is the repository this repository was forked from, &#x60;source&#x60; is the ultimate source for the network.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;FullRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository">Get a repository Documentation</a>
     */
    public ApiResponse<FullRepository> reposGetWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<FullRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository (asynchronously)
     * When you pass the &#x60;scarlet-witch-preview&#x60; media type, requests to get a repository will also return the repository&#39;s code of conduct if it can be detected from the repository&#39;s code of conduct file.  The &#x60;parent&#x60; and &#x60;source&#x60; objects are present when the repository is a fork. &#x60;parent&#x60; is the repository this repository was forked from, &#x60;source&#x60; is the ultimate source for the network.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository">Get a repository Documentation</a>
     */
    public okhttp3.Call reposGetAsync(String owner, String repo, final ApiCallback<FullRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<FullRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-access-restrictions">Get access restrictions Documentation</a>
     */
    public okhttp3.Call reposGetAccessRestrictionsCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetAccessRestrictions(Async)");
        }

        return reposGetAccessRestrictionsCall(owner, repo, branch, _callback);

    }

    /**
     * Get access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists who has access to this protected branch.  **Note**: Users, apps, and teams &#x60;restrictions&#x60; are only available for organization-owned repositories.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return BranchRestrictionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-access-restrictions">Get access restrictions Documentation</a>
     */
    public BranchRestrictionPolicy reposGetAccessRestrictions(String owner, String repo, String branch) throws ApiException {
        ApiResponse<BranchRestrictionPolicy> localVarResp = reposGetAccessRestrictionsWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists who has access to this protected branch.  **Note**: Users, apps, and teams &#x60;restrictions&#x60; are only available for organization-owned repositories.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;BranchRestrictionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-access-restrictions">Get access restrictions Documentation</a>
     */
    public ApiResponse<BranchRestrictionPolicy> reposGetAccessRestrictionsWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetAccessRestrictionsValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<BranchRestrictionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists who has access to this protected branch.  **Note**: Users, apps, and teams &#x60;restrictions&#x60; are only available for organization-owned repositories.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-access-restrictions">Get access restrictions Documentation</a>
     */
    public okhttp3.Call reposGetAccessRestrictionsAsync(String owner, String repo, String branch, final ApiCallback<BranchRestrictionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetAccessRestrictionsValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<BranchRestrictionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetAdminBranchProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-admin-branch-protection">Get admin branch protection Documentation</a>
     */
    public okhttp3.Call reposGetAdminBranchProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetAdminBranchProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetAdminBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetAdminBranchProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetAdminBranchProtection(Async)");
        }

        return reposGetAdminBranchProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Get admin branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ProtectedBranchAdminEnforced
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-admin-branch-protection">Get admin branch protection Documentation</a>
     */
    public ProtectedBranchAdminEnforced reposGetAdminBranchProtection(String owner, String repo, String branch) throws ApiException {
        ApiResponse<ProtectedBranchAdminEnforced> localVarResp = reposGetAdminBranchProtectionWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get admin branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;ProtectedBranchAdminEnforced&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-admin-branch-protection">Get admin branch protection Documentation</a>
     */
    public ApiResponse<ProtectedBranchAdminEnforced> reposGetAdminBranchProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetAdminBranchProtectionValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get admin branch protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-admin-branch-protection">Get admin branch protection Documentation</a>
     */
    public okhttp3.Call reposGetAdminBranchProtectionAsync(String owner, String repo, String branch, final ApiCallback<ProtectedBranchAdminEnforced> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetAdminBranchProtectionValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetAllStatusCheckContexts
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-status-check-contexts">Get all status check contexts Documentation</a>
     */
    public okhttp3.Call reposGetAllStatusCheckContextsCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetAllStatusCheckContextsValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetAllStatusCheckContexts(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetAllStatusCheckContexts(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetAllStatusCheckContexts(Async)");
        }

        return reposGetAllStatusCheckContextsCall(owner, repo, branch, _callback);

    }

    /**
     * Get all status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-status-check-contexts">Get all status check contexts Documentation</a>
     */
    public List<String> reposGetAllStatusCheckContexts(String owner, String repo, String branch) throws ApiException {
        ApiResponse<List<String>> localVarResp = reposGetAllStatusCheckContextsWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get all status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-status-check-contexts">Get all status check contexts Documentation</a>
     */
    public ApiResponse<List<String>> reposGetAllStatusCheckContextsWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetAllStatusCheckContextsValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all status check contexts (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-status-check-contexts">Get all status check contexts Documentation</a>
     */
    public okhttp3.Call reposGetAllStatusCheckContextsAsync(String owner, String repo, String branch, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetAllStatusCheckContextsValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetAllTopics
     * @param owner  (required)
     * @param repo  (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-repository-topics">Get all repository topics Documentation</a>
     */
    public okhttp3.Call reposGetAllTopicsCall(String owner, String repo, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/topics"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetAllTopicsValidateBeforeCall(String owner, String repo, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetAllTopics(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetAllTopics(Async)");
        }

        return reposGetAllTopicsCall(owner, repo, page, perPage, _callback);

    }

    /**
     * Get all repository topics
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-repository-topics">Get all repository topics Documentation</a>
     */
    public Topic reposGetAllTopics(String owner, String repo, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Topic> localVarResp = reposGetAllTopicsWithHttpInfo(owner, repo, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all repository topics
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-repository-topics">Get all repository topics Documentation</a>
     */
    public ApiResponse<Topic> reposGetAllTopicsWithHttpInfo(String owner, String repo, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = reposGetAllTopicsValidateBeforeCall(owner, repo, page, perPage, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all repository topics (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-repository-topics">Get all repository topics Documentation</a>
     */
    public okhttp3.Call reposGetAllTopicsAsync(String owner, String repo, Integer page, Integer perPage, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetAllTopicsValidateBeforeCall(owner, repo, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetAppsWithAccessToProtectedBranch
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-apps-with-access-to-the-protected-branch">Get apps with access to the protected branch Documentation</a>
     */
    public okhttp3.Call reposGetAppsWithAccessToProtectedBranchCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetAppsWithAccessToProtectedBranchValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetAppsWithAccessToProtectedBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetAppsWithAccessToProtectedBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetAppsWithAccessToProtectedBranch(Async)");
        }

        return reposGetAppsWithAccessToProtectedBranchCall(owner, repo, branch, _callback);

    }

    /**
     * Get apps with access to the protected branch
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return List&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-apps-with-access-to-the-protected-branch">Get apps with access to the protected branch Documentation</a>
     */
    public List<Integration> reposGetAppsWithAccessToProtectedBranch(String owner, String repo, String branch) throws ApiException {
        ApiResponse<List<Integration>> localVarResp = reposGetAppsWithAccessToProtectedBranchWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get apps with access to the protected branch
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;List&lt;Integration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-apps-with-access-to-the-protected-branch">Get apps with access to the protected branch Documentation</a>
     */
    public ApiResponse<List<Integration>> reposGetAppsWithAccessToProtectedBranchWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetAppsWithAccessToProtectedBranchValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get apps with access to the protected branch (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-apps-with-access-to-the-protected-branch">Get apps with access to the protected branch Documentation</a>
     */
    public okhttp3.Call reposGetAppsWithAccessToProtectedBranchAsync(String owner, String repo, String branch, final ApiCallback<List<Integration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetAppsWithAccessToProtectedBranchValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetBranch
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-branch">Get a branch Documentation</a>
     */
    public okhttp3.Call reposGetBranchCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetBranchValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetBranch(Async)");
        }

        return reposGetBranchCall(owner, repo, branch, _callback);

    }

    /**
     * Get a branch
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return BranchWithProtection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-branch">Get a branch Documentation</a>
     */
    public BranchWithProtection reposGetBranch(String owner, String repo, String branch) throws ApiException {
        ApiResponse<BranchWithProtection> localVarResp = reposGetBranchWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get a branch
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;BranchWithProtection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-branch">Get a branch Documentation</a>
     */
    public ApiResponse<BranchWithProtection> reposGetBranchWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetBranchValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<BranchWithProtection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a branch (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-branch">Get a branch Documentation</a>
     */
    public okhttp3.Call reposGetBranchAsync(String owner, String repo, String branch, final ApiCallback<BranchWithProtection> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetBranchValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<BranchWithProtection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetBranchProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-branch-protection">Get branch protection Documentation</a>
     */
    public okhttp3.Call reposGetBranchProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetBranchProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetBranchProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetBranchProtection(Async)");
        }

        return reposGetBranchProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Get branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return BranchProtection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-branch-protection">Get branch protection Documentation</a>
     */
    public BranchProtection reposGetBranchProtection(String owner, String repo, String branch) throws ApiException {
        ApiResponse<BranchProtection> localVarResp = reposGetBranchProtectionWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;BranchProtection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-branch-protection">Get branch protection Documentation</a>
     */
    public ApiResponse<BranchProtection> reposGetBranchProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetBranchProtectionValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get branch protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-branch-protection">Get branch protection Documentation</a>
     */
    public okhttp3.Call reposGetBranchProtectionAsync(String owner, String repo, String branch, final ApiCallback<BranchProtection> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetBranchProtectionValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<BranchProtection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetCodeFrequencyStats
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a weekly aggregate of the number of additions and deletions pushed to a repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-activity">Get the weekly commit activity Documentation</a>
     */
    public okhttp3.Call reposGetCodeFrequencyStatsCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/stats/code_frequency"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetCodeFrequencyStatsValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetCodeFrequencyStats(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetCodeFrequencyStats(Async)");
        }

        return reposGetCodeFrequencyStatsCall(owner, repo, _callback);

    }

    /**
     * Get the weekly commit activity
     * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @return List&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a weekly aggregate of the number of additions and deletions pushed to a repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-activity">Get the weekly commit activity Documentation</a>
     */
    public List<List<Integer>> reposGetCodeFrequencyStats(String owner, String repo) throws ApiException {
        ApiResponse<List<List<Integer>>> localVarResp = reposGetCodeFrequencyStatsWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get the weekly commit activity
     * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;List&lt;List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a weekly aggregate of the number of additions and deletions pushed to a repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-activity">Get the weekly commit activity Documentation</a>
     */
    public ApiResponse<List<List<Integer>>> reposGetCodeFrequencyStatsWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetCodeFrequencyStatsValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the weekly commit activity (asynchronously)
     * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a weekly aggregate of the number of additions and deletions pushed to a repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-activity">Get the weekly commit activity Documentation</a>
     */
    public okhttp3.Call reposGetCodeFrequencyStatsAsync(String owner, String repo, final ApiCallback<List<List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetCodeFrequencyStatsValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetCollaboratorPermissionLevel
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if user has admin permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-permissions-for-a-user">Get repository permissions for a user Documentation</a>
     */
    public okhttp3.Call reposGetCollaboratorPermissionLevelCall(String owner, String repo, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{username}/permission"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetCollaboratorPermissionLevelValidateBeforeCall(String owner, String repo, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetCollaboratorPermissionLevel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetCollaboratorPermissionLevel(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling reposGetCollaboratorPermissionLevel(Async)");
        }

        return reposGetCollaboratorPermissionLevelCall(owner, repo, username, _callback);

    }

    /**
     * Get repository permissions for a user
     * Checks the repository permission of a collaborator. The possible repository permissions are &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @return RepositoryCollaboratorPermission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if user has admin permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-permissions-for-a-user">Get repository permissions for a user Documentation</a>
     */
    public RepositoryCollaboratorPermission reposGetCollaboratorPermissionLevel(String owner, String repo, String username) throws ApiException {
        ApiResponse<RepositoryCollaboratorPermission> localVarResp = reposGetCollaboratorPermissionLevelWithHttpInfo(owner, repo, username);
        return localVarResp.getData();
    }

    /**
     * Get repository permissions for a user
     * Checks the repository permission of a collaborator. The possible repository permissions are &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @return ApiResponse&lt;RepositoryCollaboratorPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if user has admin permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-permissions-for-a-user">Get repository permissions for a user Documentation</a>
     */
    public ApiResponse<RepositoryCollaboratorPermission> reposGetCollaboratorPermissionLevelWithHttpInfo(String owner, String repo, String username) throws ApiException {
        okhttp3.Call localVarCall = reposGetCollaboratorPermissionLevelValidateBeforeCall(owner, repo, username, null);
        Type localVarReturnType = new TypeToken<RepositoryCollaboratorPermission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository permissions for a user (asynchronously)
     * Checks the repository permission of a collaborator. The possible repository permissions are &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if user has admin permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-permissions-for-a-user">Get repository permissions for a user Documentation</a>
     */
    public okhttp3.Call reposGetCollaboratorPermissionLevelAsync(String owner, String repo, String username, final ApiCallback<RepositoryCollaboratorPermission> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetCollaboratorPermissionLevelValidateBeforeCall(owner, repo, username, _callback);
        Type localVarReturnType = new TypeToken<RepositoryCollaboratorPermission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetCombinedStatusForRef
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-combined-status-for-a-specific-reference">Get the combined status for a specific reference Documentation</a>
     */
    public okhttp3.Call reposGetCombinedStatusForRefCall(String owner, String repo, String ref, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{ref}/status"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetCombinedStatusForRefValidateBeforeCall(String owner, String repo, String ref, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetCombinedStatusForRef(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetCombinedStatusForRef(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling reposGetCombinedStatusForRef(Async)");
        }

        return reposGetCombinedStatusForRefCall(owner, repo, ref, perPage, page, _callback);

    }

    /**
     * Get the combined status for a specific reference
     * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.   Additionally, a combined &#x60;state&#x60; is returned. The &#x60;state&#x60; is one of:  *   **failure** if any of the contexts report as &#x60;error&#x60; or &#x60;failure&#x60; *   **pending** if there are no statuses or a context is &#x60;pending&#x60; *   **success** if the latest status for all contexts is &#x60;success&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return CombinedCommitStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-combined-status-for-a-specific-reference">Get the combined status for a specific reference Documentation</a>
     */
    public CombinedCommitStatus reposGetCombinedStatusForRef(String owner, String repo, String ref, Integer perPage, Integer page) throws ApiException {
        ApiResponse<CombinedCommitStatus> localVarResp = reposGetCombinedStatusForRefWithHttpInfo(owner, repo, ref, perPage, page);
        return localVarResp.getData();
    }

    /**
     * Get the combined status for a specific reference
     * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.   Additionally, a combined &#x60;state&#x60; is returned. The &#x60;state&#x60; is one of:  *   **failure** if any of the contexts report as &#x60;error&#x60; or &#x60;failure&#x60; *   **pending** if there are no statuses or a context is &#x60;pending&#x60; *   **success** if the latest status for all contexts is &#x60;success&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;CombinedCommitStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-combined-status-for-a-specific-reference">Get the combined status for a specific reference Documentation</a>
     */
    public ApiResponse<CombinedCommitStatus> reposGetCombinedStatusForRefWithHttpInfo(String owner, String repo, String ref, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposGetCombinedStatusForRefValidateBeforeCall(owner, repo, ref, perPage, page, null);
        Type localVarReturnType = new TypeToken<CombinedCommitStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the combined status for a specific reference (asynchronously)
     * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.   Additionally, a combined &#x60;state&#x60; is returned. The &#x60;state&#x60; is one of:  *   **failure** if any of the contexts report as &#x60;error&#x60; or &#x60;failure&#x60; *   **pending** if there are no statuses or a context is &#x60;pending&#x60; *   **success** if the latest status for all contexts is &#x60;success&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-combined-status-for-a-specific-reference">Get the combined status for a specific reference Documentation</a>
     */
    public okhttp3.Call reposGetCombinedStatusForRefAsync(String owner, String repo, String ref, Integer perPage, Integer page, final ApiCallback<CombinedCommitStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetCombinedStatusForRefValidateBeforeCall(owner, repo, ref, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<CombinedCommitStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetCommit
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit">Get a commit Documentation</a>
     */
    public okhttp3.Call reposGetCommitCall(String owner, String repo, String ref, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{ref}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetCommitValidateBeforeCall(String owner, String repo, String ref, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetCommit(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetCommit(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling reposGetCommit(Async)");
        }

        return reposGetCommitCall(owner, repo, ref, page, perPage, _callback);

    }

    /**
     * Get a commit
     * Returns the contents of a single commit reference. You must have &#x60;read&#x60; access for the repository to use this endpoint.  **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.  You can pass the appropriate [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch &#x60;diff&#x60; and &#x60;patch&#x60; formats. Diffs with binary data will have no &#x60;patch&#x60; property.  To return only the SHA-1 hash of the commit reference, you can provide the &#x60;sha&#x60; custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the &#x60;Accept&#x60; header. You can use this endpoint to check if a remote reference&#39;s SHA-1 hash is the same as your local reference&#39;s SHA-1 hash by providing the local SHA-1 reference as the ETag.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @return Commit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit">Get a commit Documentation</a>
     */
    public Commit reposGetCommit(String owner, String repo, String ref, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Commit> localVarResp = reposGetCommitWithHttpInfo(owner, repo, ref, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a commit
     * Returns the contents of a single commit reference. You must have &#x60;read&#x60; access for the repository to use this endpoint.  **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.  You can pass the appropriate [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch &#x60;diff&#x60; and &#x60;patch&#x60; formats. Diffs with binary data will have no &#x60;patch&#x60; property.  To return only the SHA-1 hash of the commit reference, you can provide the &#x60;sha&#x60; custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the &#x60;Accept&#x60; header. You can use this endpoint to check if a remote reference&#39;s SHA-1 hash is the same as your local reference&#39;s SHA-1 hash by providing the local SHA-1 reference as the ETag.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @return ApiResponse&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit">Get a commit Documentation</a>
     */
    public ApiResponse<Commit> reposGetCommitWithHttpInfo(String owner, String repo, String ref, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = reposGetCommitValidateBeforeCall(owner, repo, ref, page, perPage, null);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit (asynchronously)
     * Returns the contents of a single commit reference. You must have &#x60;read&#x60; access for the repository to use this endpoint.  **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.  You can pass the appropriate [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch &#x60;diff&#x60; and &#x60;patch&#x60; formats. Diffs with binary data will have no &#x60;patch&#x60; property.  To return only the SHA-1 hash of the commit reference, you can provide the &#x60;sha&#x60; custom [media type](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the &#x60;Accept&#x60; header. You can use this endpoint to check if a remote reference&#39;s SHA-1 hash is the same as your local reference&#39;s SHA-1 hash by providing the local SHA-1 reference as the ETag.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit">Get a commit Documentation</a>
     */
    public okhttp3.Call reposGetCommitAsync(String owner, String repo, String ref, Integer page, Integer perPage, final ApiCallback<Commit> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetCommitValidateBeforeCall(owner, repo, ref, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetCommitActivityStats
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-last-year-of-commit-activity">Get the last year of commit activity Documentation</a>
     */
    public okhttp3.Call reposGetCommitActivityStatsCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/stats/commit_activity"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetCommitActivityStatsValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetCommitActivityStats(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetCommitActivityStats(Async)");
        }

        return reposGetCommitActivityStatsCall(owner, repo, _callback);

    }

    /**
     * Get the last year of commit activity
     * Returns the last year of commit activity grouped by week. The &#x60;days&#x60; array is a group of commits per day, starting on &#x60;Sunday&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @return List&lt;CommitActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-last-year-of-commit-activity">Get the last year of commit activity Documentation</a>
     */
    public List<CommitActivity> reposGetCommitActivityStats(String owner, String repo) throws ApiException {
        ApiResponse<List<CommitActivity>> localVarResp = reposGetCommitActivityStatsWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get the last year of commit activity
     * Returns the last year of commit activity grouped by week. The &#x60;days&#x60; array is a group of commits per day, starting on &#x60;Sunday&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;List&lt;CommitActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-last-year-of-commit-activity">Get the last year of commit activity Documentation</a>
     */
    public ApiResponse<List<CommitActivity>> reposGetCommitActivityStatsWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetCommitActivityStatsValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<CommitActivity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the last year of commit activity (asynchronously)
     * Returns the last year of commit activity grouped by week. The &#x60;days&#x60; array is a group of commits per day, starting on &#x60;Sunday&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-last-year-of-commit-activity">Get the last year of commit activity Documentation</a>
     */
    public okhttp3.Call reposGetCommitActivityStatsAsync(String owner, String repo, final ApiCallback<List<CommitActivity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetCommitActivityStatsValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<CommitActivity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetCommitComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit-comment">Get a commit comment Documentation</a>
     */
    public okhttp3.Call reposGetCommitCommentCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reposGetCommitComment(Async)");
        }

        return reposGetCommitCommentCall(owner, repo, commentId, _callback);

    }

    /**
     * Get a commit comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return CommitComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit-comment">Get a commit comment Documentation</a>
     */
    public CommitComment reposGetCommitComment(String owner, String repo, Integer commentId) throws ApiException {
        ApiResponse<CommitComment> localVarResp = reposGetCommitCommentWithHttpInfo(owner, repo, commentId);
        return localVarResp.getData();
    }

    /**
     * Get a commit comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return ApiResponse&lt;CommitComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit-comment">Get a commit comment Documentation</a>
     */
    public ApiResponse<CommitComment> reposGetCommitCommentWithHttpInfo(String owner, String repo, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = reposGetCommitCommentValidateBeforeCall(owner, repo, commentId, null);
        Type localVarReturnType = new TypeToken<CommitComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit comment (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-commit-comment">Get a commit comment Documentation</a>
     */
    public okhttp3.Call reposGetCommitCommentAsync(String owner, String repo, Integer commentId, final ApiCallback<CommitComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetCommitCommentValidateBeforeCall(owner, repo, commentId, _callback);
        Type localVarReturnType = new TypeToken<CommitComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetCommitSignatureProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-commit-signature-protection">Get commit signature protection Documentation</a>
     */
    public okhttp3.Call reposGetCommitSignatureProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetCommitSignatureProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetCommitSignatureProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetCommitSignatureProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetCommitSignatureProtection(Async)");
        }

        return reposGetCommitSignatureProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Get commit signature protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of &#x60;true&#x60; indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.  **Note**: You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ProtectedBranchAdminEnforced
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-commit-signature-protection">Get commit signature protection Documentation</a>
     */
    public ProtectedBranchAdminEnforced reposGetCommitSignatureProtection(String owner, String repo, String branch) throws ApiException {
        ApiResponse<ProtectedBranchAdminEnforced> localVarResp = reposGetCommitSignatureProtectionWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get commit signature protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of &#x60;true&#x60; indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.  **Note**: You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;ProtectedBranchAdminEnforced&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-commit-signature-protection">Get commit signature protection Documentation</a>
     */
    public ApiResponse<ProtectedBranchAdminEnforced> reposGetCommitSignatureProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetCommitSignatureProtectionValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get commit signature protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of &#x60;true&#x60; indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.  **Note**: You must enable branch protection to require signed commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-commit-signature-protection">Get commit signature protection Documentation</a>
     */
    public okhttp3.Call reposGetCommitSignatureProtectionAsync(String owner, String repo, String branch, final ApiCallback<ProtectedBranchAdminEnforced> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetCommitSignatureProtectionValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetContent
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-content">Get repository content Documentation</a>
     */
    public okhttp3.Call reposGetContentCall(String owner, String repo, String path, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contents/{path}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.github.v3.object"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetContentValidateBeforeCall(String owner, String repo, String path, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetContent(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetContent(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling reposGetContent(Async)");
        }

        return reposGetContentCall(owner, repo, path, ref, _callback);

    }

    /**
     * Get repository content
     * Gets the contents of a file or directory in a repository. Specify the file path or directory in &#x60;:path&#x60;. If you omit &#x60;:path&#x60;, you will receive the contents of the repository&#39;s root directory. See the description below regarding what the API response includes for directories.   Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent object format.  **Note**: *   To get a repository&#39;s contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@2.22/rest/reference/git#trees). *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/enterprise-server@2.22/rest/reference/git#get-a-tree). *   This API supports files up to 1 megabyte in size.  #### If the content is a directory The response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \&quot;type\&quot; specified as \&quot;file\&quot;. Logically, the value _should_ be \&quot;submodule\&quot;. This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \&quot;submodule\&quot;.  #### If the content is a symlink  If the requested &#x60;:path&#x60; points to a symlink, and the symlink&#39;s target is a normal file in the repository, then the API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object  describing the symlink itself.  #### If the content is a submodule The &#x60;submodule_git_url&#x60; identifies the location of the submodule repository, and the &#x60;sha&#x60; identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.  If the submodule repository is not hosted on github.com, the Git URLs (&#x60;git_url&#x60; and &#x60;_links[\&quot;git\&quot;]&#x60;) and the github.com URLs (&#x60;html_url&#x60; and &#x60;_links[\&quot;html\&quot;]&#x60;) will have null values.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @return ReposGetContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-content">Get repository content Documentation</a>
     */
    public ReposGetContent200Response reposGetContent(String owner, String repo, String path, String ref) throws ApiException {
        ApiResponse<ReposGetContent200Response> localVarResp = reposGetContentWithHttpInfo(owner, repo, path, ref);
        return localVarResp.getData();
    }

    /**
     * Get repository content
     * Gets the contents of a file or directory in a repository. Specify the file path or directory in &#x60;:path&#x60;. If you omit &#x60;:path&#x60;, you will receive the contents of the repository&#39;s root directory. See the description below regarding what the API response includes for directories.   Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent object format.  **Note**: *   To get a repository&#39;s contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@2.22/rest/reference/git#trees). *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/enterprise-server@2.22/rest/reference/git#get-a-tree). *   This API supports files up to 1 megabyte in size.  #### If the content is a directory The response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \&quot;type\&quot; specified as \&quot;file\&quot;. Logically, the value _should_ be \&quot;submodule\&quot;. This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \&quot;submodule\&quot;.  #### If the content is a symlink  If the requested &#x60;:path&#x60; points to a symlink, and the symlink&#39;s target is a normal file in the repository, then the API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object  describing the symlink itself.  #### If the content is a submodule The &#x60;submodule_git_url&#x60; identifies the location of the submodule repository, and the &#x60;sha&#x60; identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.  If the submodule repository is not hosted on github.com, the Git URLs (&#x60;git_url&#x60; and &#x60;_links[\&quot;git\&quot;]&#x60;) and the github.com URLs (&#x60;html_url&#x60; and &#x60;_links[\&quot;html\&quot;]&#x60;) will have null values.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @return ApiResponse&lt;ReposGetContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-content">Get repository content Documentation</a>
     */
    public ApiResponse<ReposGetContent200Response> reposGetContentWithHttpInfo(String owner, String repo, String path, String ref) throws ApiException {
        okhttp3.Call localVarCall = reposGetContentValidateBeforeCall(owner, repo, path, ref, null);
        Type localVarReturnType = new TypeToken<ReposGetContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository content (asynchronously)
     * Gets the contents of a file or directory in a repository. Specify the file path or directory in &#x60;:path&#x60;. If you omit &#x60;:path&#x60;, you will receive the contents of the repository&#39;s root directory. See the description below regarding what the API response includes for directories.   Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent object format.  **Note**: *   To get a repository&#39;s contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@2.22/rest/reference/git#trees). *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/enterprise-server@2.22/rest/reference/git#get-a-tree). *   This API supports files up to 1 megabyte in size.  #### If the content is a directory The response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \&quot;type\&quot; specified as \&quot;file\&quot;. Logically, the value _should_ be \&quot;submodule\&quot;. This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \&quot;submodule\&quot;.  #### If the content is a symlink  If the requested &#x60;:path&#x60; points to a symlink, and the symlink&#39;s target is a normal file in the repository, then the API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object  describing the symlink itself.  #### If the content is a submodule The &#x60;submodule_git_url&#x60; identifies the location of the submodule repository, and the &#x60;sha&#x60; identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.  If the submodule repository is not hosted on github.com, the Git URLs (&#x60;git_url&#x60; and &#x60;_links[\&quot;git\&quot;]&#x60;) and the github.com URLs (&#x60;html_url&#x60; and &#x60;_links[\&quot;html\&quot;]&#x60;) will have null values.
     * @param owner  (required)
     * @param repo  (required)
     * @param path path parameter (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-repository-content">Get repository content Documentation</a>
     */
    public okhttp3.Call reposGetContentAsync(String owner, String repo, String path, String ref, final ApiCallback<ReposGetContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetContentValidateBeforeCall(owner, repo, path, ref, _callback);
        Type localVarReturnType = new TypeToken<ReposGetContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetContributorsStats
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-contributor-commit-activity">Get all contributor commit activity Documentation</a>
     */
    public okhttp3.Call reposGetContributorsStatsCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/stats/contributors"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetContributorsStatsValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetContributorsStats(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetContributorsStats(Async)");
        }

        return reposGetContributorsStatsCall(owner, repo, _callback);

    }

    /**
     * Get all contributor commit activity
     *  Returns the &#x60;total&#x60; number of commits authored by the contributor. In addition, the response includes a Weekly Hash (&#x60;weeks&#x60; array) with the following information:  *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits
     * @param owner  (required)
     * @param repo  (required)
     * @return List&lt;ContributorActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-contributor-commit-activity">Get all contributor commit activity Documentation</a>
     */
    public List<ContributorActivity> reposGetContributorsStats(String owner, String repo) throws ApiException {
        ApiResponse<List<ContributorActivity>> localVarResp = reposGetContributorsStatsWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get all contributor commit activity
     *  Returns the &#x60;total&#x60; number of commits authored by the contributor. In addition, the response includes a Weekly Hash (&#x60;weeks&#x60; array) with the following information:  *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;List&lt;ContributorActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-contributor-commit-activity">Get all contributor commit activity Documentation</a>
     */
    public ApiResponse<List<ContributorActivity>> reposGetContributorsStatsWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetContributorsStatsValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<ContributorActivity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contributor commit activity (asynchronously)
     *  Returns the &#x60;total&#x60; number of commits authored by the contributor. In addition, the response includes a Weekly Hash (&#x60;weeks&#x60; array) with the following information:  *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-all-contributor-commit-activity">Get all contributor commit activity Documentation</a>
     */
    public okhttp3.Call reposGetContributorsStatsAsync(String owner, String repo, final ApiCallback<List<ContributorActivity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetContributorsStatsValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<ContributorActivity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetDeployKey
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deploy-key">Get a deploy key Documentation</a>
     */
    public okhttp3.Call reposGetDeployKeyCall(String owner, String repo, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys/{key_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetDeployKeyValidateBeforeCall(String owner, String repo, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetDeployKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetDeployKey(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling reposGetDeployKey(Async)");
        }

        return reposGetDeployKeyCall(owner, repo, keyId, _callback);

    }

    /**
     * Get a deploy key
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @return DeployKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deploy-key">Get a deploy key Documentation</a>
     */
    public DeployKey reposGetDeployKey(String owner, String repo, Integer keyId) throws ApiException {
        ApiResponse<DeployKey> localVarResp = reposGetDeployKeyWithHttpInfo(owner, repo, keyId);
        return localVarResp.getData();
    }

    /**
     * Get a deploy key
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @return ApiResponse&lt;DeployKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deploy-key">Get a deploy key Documentation</a>
     */
    public ApiResponse<DeployKey> reposGetDeployKeyWithHttpInfo(String owner, String repo, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = reposGetDeployKeyValidateBeforeCall(owner, repo, keyId, null);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a deploy key (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param keyId key_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deploy-key">Get a deploy key Documentation</a>
     */
    public okhttp3.Call reposGetDeployKeyAsync(String owner, String repo, Integer keyId, final ApiCallback<DeployKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetDeployKeyValidateBeforeCall(owner, repo, keyId, _callback);
        Type localVarReturnType = new TypeToken<DeployKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetDeployment
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment">Get a deployment Documentation</a>
     */
    public okhttp3.Call reposGetDeploymentCall(String owner, String repo, Integer deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/deployments/{deployment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetDeploymentValidateBeforeCall(String owner, String repo, Integer deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetDeployment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetDeployment(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling reposGetDeployment(Async)");
        }

        return reposGetDeploymentCall(owner, repo, deploymentId, _callback);

    }

    /**
     * Get a deployment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment">Get a deployment Documentation</a>
     */
    public Deployment reposGetDeployment(String owner, String repo, Integer deploymentId) throws ApiException {
        ApiResponse<Deployment> localVarResp = reposGetDeploymentWithHttpInfo(owner, repo, deploymentId);
        return localVarResp.getData();
    }

    /**
     * Get a deployment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment">Get a deployment Documentation</a>
     */
    public ApiResponse<Deployment> reposGetDeploymentWithHttpInfo(String owner, String repo, Integer deploymentId) throws ApiException {
        okhttp3.Call localVarCall = reposGetDeploymentValidateBeforeCall(owner, repo, deploymentId, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a deployment (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment">Get a deployment Documentation</a>
     */
    public okhttp3.Call reposGetDeploymentAsync(String owner, String repo, Integer deploymentId, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetDeploymentValidateBeforeCall(owner, repo, deploymentId, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetDeploymentStatus
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param statusId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment-status">Get a deployment status Documentation</a>
     */
    public okhttp3.Call reposGetDeploymentStatusCall(String owner, String repo, Integer deploymentId, Integer statusId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "status_id" + "}", localVarApiClient.escapeString(statusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetDeploymentStatusValidateBeforeCall(String owner, String repo, Integer deploymentId, Integer statusId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetDeploymentStatus(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetDeploymentStatus(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling reposGetDeploymentStatus(Async)");
        }

        // verify the required parameter 'statusId' is set
        if (statusId == null) {
            throw new ApiException("Missing the required parameter 'statusId' when calling reposGetDeploymentStatus(Async)");
        }

        return reposGetDeploymentStatusCall(owner, repo, deploymentId, statusId, _callback);

    }

    /**
     * Get a deployment status
     * Users with pull access can view a deployment status for a deployment:
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param statusId  (required)
     * @return DeploymentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment-status">Get a deployment status Documentation</a>
     */
    public DeploymentStatus reposGetDeploymentStatus(String owner, String repo, Integer deploymentId, Integer statusId) throws ApiException {
        ApiResponse<DeploymentStatus> localVarResp = reposGetDeploymentStatusWithHttpInfo(owner, repo, deploymentId, statusId);
        return localVarResp.getData();
    }

    /**
     * Get a deployment status
     * Users with pull access can view a deployment status for a deployment:
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param statusId  (required)
     * @return ApiResponse&lt;DeploymentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment-status">Get a deployment status Documentation</a>
     */
    public ApiResponse<DeploymentStatus> reposGetDeploymentStatusWithHttpInfo(String owner, String repo, Integer deploymentId, Integer statusId) throws ApiException {
        okhttp3.Call localVarCall = reposGetDeploymentStatusValidateBeforeCall(owner, repo, deploymentId, statusId, null);
        Type localVarReturnType = new TypeToken<DeploymentStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a deployment status (asynchronously)
     * Users with pull access can view a deployment status for a deployment:
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param statusId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-deployment-status">Get a deployment status Documentation</a>
     */
    public okhttp3.Call reposGetDeploymentStatusAsync(String owner, String repo, Integer deploymentId, Integer statusId, final ApiCallback<DeploymentStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetDeploymentStatusValidateBeforeCall(owner, repo, deploymentId, statusId, _callback);
        Type localVarReturnType = new TypeToken<DeploymentStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetLatestPagesBuild
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-latest-pages-build">Get latest Pages build Documentation</a>
     */
    public okhttp3.Call reposGetLatestPagesBuildCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages/builds/latest"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetLatestPagesBuildValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetLatestPagesBuild(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetLatestPagesBuild(Async)");
        }

        return reposGetLatestPagesBuildCall(owner, repo, _callback);

    }

    /**
     * Get latest Pages build
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return PageBuild
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-latest-pages-build">Get latest Pages build Documentation</a>
     */
    public PageBuild reposGetLatestPagesBuild(String owner, String repo) throws ApiException {
        ApiResponse<PageBuild> localVarResp = reposGetLatestPagesBuildWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get latest Pages build
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;PageBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-latest-pages-build">Get latest Pages build Documentation</a>
     */
    public ApiResponse<PageBuild> reposGetLatestPagesBuildWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetLatestPagesBuildValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<PageBuild>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get latest Pages build (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-latest-pages-build">Get latest Pages build Documentation</a>
     */
    public okhttp3.Call reposGetLatestPagesBuildAsync(String owner, String repo, final ApiCallback<PageBuild> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetLatestPagesBuildValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<PageBuild>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetLatestRelease
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-latest-release">Get the latest release Documentation</a>
     */
    public okhttp3.Call reposGetLatestReleaseCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/latest"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetLatestReleaseValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetLatestRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetLatestRelease(Async)");
        }

        return reposGetLatestReleaseCall(owner, repo, _callback);

    }

    /**
     * Get the latest release
     * View the latest published full release for the repository.  The latest release is the most recent non-prerelease, non-draft release, sorted by the &#x60;created_at&#x60; attribute. The &#x60;created_at&#x60; attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     * @param owner  (required)
     * @param repo  (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-latest-release">Get the latest release Documentation</a>
     */
    public Release reposGetLatestRelease(String owner, String repo) throws ApiException {
        ApiResponse<Release> localVarResp = reposGetLatestReleaseWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get the latest release
     * View the latest published full release for the repository.  The latest release is the most recent non-prerelease, non-draft release, sorted by the &#x60;created_at&#x60; attribute. The &#x60;created_at&#x60; attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-latest-release">Get the latest release Documentation</a>
     */
    public ApiResponse<Release> reposGetLatestReleaseWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetLatestReleaseValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the latest release (asynchronously)
     * View the latest published full release for the repository.  The latest release is the most recent non-prerelease, non-draft release, sorted by the &#x60;created_at&#x60; attribute. The &#x60;created_at&#x60; attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-latest-release">Get the latest release Documentation</a>
     */
    public okhttp3.Call reposGetLatestReleaseAsync(String owner, String repo, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetLatestReleaseValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetPages
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-github-pages-site">Get a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposGetPagesCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetPagesValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetPages(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetPages(Async)");
        }

        return reposGetPagesCall(owner, repo, _callback);

    }

    /**
     * Get a GitHub Enterprise Server Pages site
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return Page
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-github-pages-site">Get a GitHub Enterprise Server Pages site Documentation</a>
     */
    public Page reposGetPages(String owner, String repo) throws ApiException {
        ApiResponse<Page> localVarResp = reposGetPagesWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get a GitHub Enterprise Server Pages site
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Page&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-github-pages-site">Get a GitHub Enterprise Server Pages site Documentation</a>
     */
    public ApiResponse<Page> reposGetPagesWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetPagesValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a GitHub Enterprise Server Pages site (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-github-pages-site">Get a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposGetPagesAsync(String owner, String repo, final ApiCallback<Page> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetPagesValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Page>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetPagesBuild
     * @param owner  (required)
     * @param repo  (required)
     * @param buildId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-github-pages-build">Get GitHub Enterprise Server Pages build Documentation</a>
     */
    public okhttp3.Call reposGetPagesBuildCall(String owner, String repo, Integer buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages/builds/{build_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetPagesBuildValidateBeforeCall(String owner, String repo, Integer buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetPagesBuild(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetPagesBuild(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling reposGetPagesBuild(Async)");
        }

        return reposGetPagesBuildCall(owner, repo, buildId, _callback);

    }

    /**
     * Get GitHub Enterprise Server Pages build
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param buildId  (required)
     * @return PageBuild
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-github-pages-build">Get GitHub Enterprise Server Pages build Documentation</a>
     */
    public PageBuild reposGetPagesBuild(String owner, String repo, Integer buildId) throws ApiException {
        ApiResponse<PageBuild> localVarResp = reposGetPagesBuildWithHttpInfo(owner, repo, buildId);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Enterprise Server Pages build
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param buildId  (required)
     * @return ApiResponse&lt;PageBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-github-pages-build">Get GitHub Enterprise Server Pages build Documentation</a>
     */
    public ApiResponse<PageBuild> reposGetPagesBuildWithHttpInfo(String owner, String repo, Integer buildId) throws ApiException {
        okhttp3.Call localVarCall = reposGetPagesBuildValidateBeforeCall(owner, repo, buildId, null);
        Type localVarReturnType = new TypeToken<PageBuild>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Enterprise Server Pages build (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param buildId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-github-pages-build">Get GitHub Enterprise Server Pages build Documentation</a>
     */
    public okhttp3.Call reposGetPagesBuildAsync(String owner, String repo, Integer buildId, final ApiCallback<PageBuild> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetPagesBuildValidateBeforeCall(owner, repo, buildId, _callback);
        Type localVarReturnType = new TypeToken<PageBuild>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetParticipationStats
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The array order is oldest week (index 0) to most recent week. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-count">Get the weekly commit count Documentation</a>
     */
    public okhttp3.Call reposGetParticipationStatsCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/stats/participation"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetParticipationStatsValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetParticipationStats(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetParticipationStats(Async)");
        }

        return reposGetParticipationStatsCall(owner, repo, _callback);

    }

    /**
     * Get the weekly commit count
     * Returns the total commit counts for the &#x60;owner&#x60; and total commit counts in &#x60;all&#x60;. &#x60;all&#x60; is everyone combined, including the &#x60;owner&#x60; in the last 52 weeks. If you&#39;d like to get the commit counts for non-owners, you can subtract &#x60;owner&#x60; from &#x60;all&#x60;.  The array order is oldest week (index 0) to most recent week.
     * @param owner  (required)
     * @param repo  (required)
     * @return ParticipationStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The array order is oldest week (index 0) to most recent week. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-count">Get the weekly commit count Documentation</a>
     */
    public ParticipationStats reposGetParticipationStats(String owner, String repo) throws ApiException {
        ApiResponse<ParticipationStats> localVarResp = reposGetParticipationStatsWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get the weekly commit count
     * Returns the total commit counts for the &#x60;owner&#x60; and total commit counts in &#x60;all&#x60;. &#x60;all&#x60; is everyone combined, including the &#x60;owner&#x60; in the last 52 weeks. If you&#39;d like to get the commit counts for non-owners, you can subtract &#x60;owner&#x60; from &#x60;all&#x60;.  The array order is oldest week (index 0) to most recent week.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;ParticipationStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The array order is oldest week (index 0) to most recent week. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-count">Get the weekly commit count Documentation</a>
     */
    public ApiResponse<ParticipationStats> reposGetParticipationStatsWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetParticipationStatsValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ParticipationStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the weekly commit count (asynchronously)
     * Returns the total commit counts for the &#x60;owner&#x60; and total commit counts in &#x60;all&#x60;. &#x60;all&#x60; is everyone combined, including the &#x60;owner&#x60; in the last 52 weeks. If you&#39;d like to get the commit counts for non-owners, you can subtract &#x60;owner&#x60; from &#x60;all&#x60;.  The array order is oldest week (index 0) to most recent week.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The array order is oldest week (index 0) to most recent week. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-weekly-commit-count">Get the weekly commit count Documentation</a>
     */
    public okhttp3.Call reposGetParticipationStatsAsync(String owner, String repo, final ApiCallback<ParticipationStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetParticipationStatsValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ParticipationStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetPullRequestReviewProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-pull-request-review-protection">Get pull request review protection Documentation</a>
     */
    public okhttp3.Call reposGetPullRequestReviewProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetPullRequestReviewProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetPullRequestReviewProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetPullRequestReviewProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetPullRequestReviewProtection(Async)");
        }

        return reposGetPullRequestReviewProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Get pull request review protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ProtectedBranchPullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-pull-request-review-protection">Get pull request review protection Documentation</a>
     */
    public ProtectedBranchPullRequestReview reposGetPullRequestReviewProtection(String owner, String repo, String branch) throws ApiException {
        ApiResponse<ProtectedBranchPullRequestReview> localVarResp = reposGetPullRequestReviewProtectionWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get pull request review protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;ProtectedBranchPullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-pull-request-review-protection">Get pull request review protection Documentation</a>
     */
    public ApiResponse<ProtectedBranchPullRequestReview> reposGetPullRequestReviewProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetPullRequestReviewProtectionValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<ProtectedBranchPullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pull request review protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-pull-request-review-protection">Get pull request review protection Documentation</a>
     */
    public okhttp3.Call reposGetPullRequestReviewProtectionAsync(String owner, String repo, String branch, final ApiCallback<ProtectedBranchPullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetPullRequestReviewProtectionValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<ProtectedBranchPullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetPunchCardStats
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-hourly-commit-count-for-each-day">Get the hourly commit count for each day Documentation</a>
     */
    public okhttp3.Call reposGetPunchCardStatsCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/stats/punch_card"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetPunchCardStatsValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetPunchCardStats(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetPunchCardStats(Async)");
        }

        return reposGetPunchCardStatsCall(owner, repo, _callback);

    }

    /**
     * Get the hourly commit count for each day
     * Each array contains the day number, hour number, and number of commits:  *   &#x60;0-6&#x60;: Sunday - Saturday *   &#x60;0-23&#x60;: Hour of day *   Number of commits  For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     * @param owner  (required)
     * @param repo  (required)
     * @return List&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-hourly-commit-count-for-each-day">Get the hourly commit count for each day Documentation</a>
     */
    public List<List<Integer>> reposGetPunchCardStats(String owner, String repo) throws ApiException {
        ApiResponse<List<List<Integer>>> localVarResp = reposGetPunchCardStatsWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get the hourly commit count for each day
     * Each array contains the day number, hour number, and number of commits:  *   &#x60;0-6&#x60;: Sunday - Saturday *   &#x60;0-23&#x60;: Hour of day *   Number of commits  For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;List&lt;List&lt;Integer&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-hourly-commit-count-for-each-day">Get the hourly commit count for each day Documentation</a>
     */
    public ApiResponse<List<List<Integer>>> reposGetPunchCardStatsWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposGetPunchCardStatsValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the hourly commit count for each day (asynchronously)
     * Each array contains the day number, hour number, and number of commits:  *   &#x60;0-6&#x60;: Sunday - Saturday *   &#x60;0-23&#x60;: Hour of day *   Number of commits  For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> A header with no content is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-the-hourly-commit-count-for-each-day">Get the hourly commit count for each day Documentation</a>
     */
    public okhttp3.Call reposGetPunchCardStatsAsync(String owner, String repo, final ApiCallback<List<List<Integer>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetPunchCardStatsValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<List<Integer>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetReadme
     * @param owner  (required)
     * @param repo  (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-readme">Get a repository README Documentation</a>
     */
    public okhttp3.Call reposGetReadmeCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/readme"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetReadmeValidateBeforeCall(String owner, String repo, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetReadme(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetReadme(Async)");
        }

        return reposGetReadmeCall(owner, repo, ref, _callback);

    }

    /**
     * Get a repository README
     * Gets the preferred README for a repository.  READMEs support [custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @return ContentFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-readme">Get a repository README Documentation</a>
     */
    public ContentFile reposGetReadme(String owner, String repo, String ref) throws ApiException {
        ApiResponse<ContentFile> localVarResp = reposGetReadmeWithHttpInfo(owner, repo, ref);
        return localVarResp.getData();
    }

    /**
     * Get a repository README
     * Gets the preferred README for a repository.  READMEs support [custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @return ApiResponse&lt;ContentFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-readme">Get a repository README Documentation</a>
     */
    public ApiResponse<ContentFile> reposGetReadmeWithHttpInfo(String owner, String repo, String ref) throws ApiException {
        okhttp3.Call localVarCall = reposGetReadmeValidateBeforeCall(owner, repo, ref, null);
        Type localVarReturnType = new TypeToken<ContentFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository README (asynchronously)
     * Gets the preferred README for a repository.  READMEs support [custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-readme">Get a repository README Documentation</a>
     */
    public okhttp3.Call reposGetReadmeAsync(String owner, String repo, String ref, final ApiCallback<ContentFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetReadmeValidateBeforeCall(owner, repo, ref, _callback);
        Type localVarReturnType = new TypeToken<ContentFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetReadmeInDirectory
     * @param owner  (required)
     * @param repo  (required)
     * @param dir The alternate path to look for a README file (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-directory-readme">Get a repository README for a directory Documentation</a>
     */
    public okhttp3.Call reposGetReadmeInDirectoryCall(String owner, String repo, String dir, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/readme/{dir}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "dir" + "}", localVarApiClient.escapeString(dir.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetReadmeInDirectoryValidateBeforeCall(String owner, String repo, String dir, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetReadmeInDirectory(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetReadmeInDirectory(Async)");
        }

        // verify the required parameter 'dir' is set
        if (dir == null) {
            throw new ApiException("Missing the required parameter 'dir' when calling reposGetReadmeInDirectory(Async)");
        }

        return reposGetReadmeInDirectoryCall(owner, repo, dir, ref, _callback);

    }

    /**
     * Get a repository README for a directory
     * Gets the README from a repository directory.  READMEs support [custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     * @param owner  (required)
     * @param repo  (required)
     * @param dir The alternate path to look for a README file (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @return ContentFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-directory-readme">Get a repository README for a directory Documentation</a>
     */
    public ContentFile reposGetReadmeInDirectory(String owner, String repo, String dir, String ref) throws ApiException {
        ApiResponse<ContentFile> localVarResp = reposGetReadmeInDirectoryWithHttpInfo(owner, repo, dir, ref);
        return localVarResp.getData();
    }

    /**
     * Get a repository README for a directory
     * Gets the README from a repository directory.  READMEs support [custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     * @param owner  (required)
     * @param repo  (required)
     * @param dir The alternate path to look for a README file (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @return ApiResponse&lt;ContentFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-directory-readme">Get a repository README for a directory Documentation</a>
     */
    public ApiResponse<ContentFile> reposGetReadmeInDirectoryWithHttpInfo(String owner, String repo, String dir, String ref) throws ApiException {
        okhttp3.Call localVarCall = reposGetReadmeInDirectoryValidateBeforeCall(owner, repo, dir, ref, null);
        Type localVarReturnType = new TypeToken<ContentFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository README for a directory (asynchronously)
     * Gets the README from a repository directory.  READMEs support [custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     * @param owner  (required)
     * @param repo  (required)
     * @param dir The alternate path to look for a README file (required)
     * @param ref The name of the commit/branch/tag. Default: the repository’s default branch (usually &#x60;master&#x60;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-directory-readme">Get a repository README for a directory Documentation</a>
     */
    public okhttp3.Call reposGetReadmeInDirectoryAsync(String owner, String repo, String dir, String ref, final ApiCallback<ContentFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetReadmeInDirectoryValidateBeforeCall(owner, repo, dir, ref, _callback);
        Type localVarReturnType = new TypeToken<ContentFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetRelease
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release">Get a release Documentation</a>
     */
    public okhttp3.Call reposGetReleaseCall(String owner, String repo, Integer releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetReleaseValidateBeforeCall(String owner, String repo, Integer releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetRelease(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reposGetRelease(Async)");
        }

        return reposGetReleaseCall(owner, repo, releaseId, _callback);

    }

    /**
     * Get a release
     * **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia).
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release">Get a release Documentation</a>
     */
    public Release reposGetRelease(String owner, String repo, Integer releaseId) throws ApiException {
        ApiResponse<Release> localVarResp = reposGetReleaseWithHttpInfo(owner, repo, releaseId);
        return localVarResp.getData();
    }

    /**
     * Get a release
     * **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia).
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release">Get a release Documentation</a>
     */
    public ApiResponse<Release> reposGetReleaseWithHttpInfo(String owner, String repo, Integer releaseId) throws ApiException {
        okhttp3.Call localVarCall = reposGetReleaseValidateBeforeCall(owner, repo, releaseId, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a release (asynchronously)
     * **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia).
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia). </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release">Get a release Documentation</a>
     */
    public okhttp3.Call reposGetReleaseAsync(String owner, String repo, Integer releaseId, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetReleaseValidateBeforeCall(owner, repo, releaseId, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetReleaseAsset
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-asset">Get a release asset Documentation</a>
     */
    public okhttp3.Call reposGetReleaseAssetCall(String owner, String repo, Integer assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetReleaseAssetValidateBeforeCall(String owner, String repo, Integer assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetReleaseAsset(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetReleaseAsset(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling reposGetReleaseAsset(Async)");
        }

        return reposGetReleaseAssetCall(owner, repo, assetId, _callback);

    }

    /**
     * Get a release asset
     * To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response.
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @return ReleaseAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-asset">Get a release asset Documentation</a>
     */
    public ReleaseAsset reposGetReleaseAsset(String owner, String repo, Integer assetId) throws ApiException {
        ApiResponse<ReleaseAsset> localVarResp = reposGetReleaseAssetWithHttpInfo(owner, repo, assetId);
        return localVarResp.getData();
    }

    /**
     * Get a release asset
     * To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response.
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @return ApiResponse&lt;ReleaseAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-asset">Get a release asset Documentation</a>
     */
    public ApiResponse<ReleaseAsset> reposGetReleaseAssetWithHttpInfo(String owner, String repo, Integer assetId) throws ApiException {
        okhttp3.Call localVarCall = reposGetReleaseAssetValidateBeforeCall(owner, repo, assetId, null);
        Type localVarReturnType = new TypeToken<ReleaseAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a release asset (asynchronously)
     * To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response.
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-asset">Get a release asset Documentation</a>
     */
    public okhttp3.Call reposGetReleaseAssetAsync(String owner, String repo, Integer assetId, final ApiCallback<ReleaseAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetReleaseAssetValidateBeforeCall(owner, repo, assetId, _callback);
        Type localVarReturnType = new TypeToken<ReleaseAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetReleaseByTag
     * @param owner  (required)
     * @param repo  (required)
     * @param tag tag parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-by-tag-name">Get a release by tag name Documentation</a>
     */
    public okhttp3.Call reposGetReleaseByTagCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/tags/{tag}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetReleaseByTagValidateBeforeCall(String owner, String repo, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetReleaseByTag(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetReleaseByTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling reposGetReleaseByTag(Async)");
        }

        return reposGetReleaseByTagCall(owner, repo, tag, _callback);

    }

    /**
     * Get a release by tag name
     * Get a published release with the specified tag.
     * @param owner  (required)
     * @param repo  (required)
     * @param tag tag parameter (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-by-tag-name">Get a release by tag name Documentation</a>
     */
    public Release reposGetReleaseByTag(String owner, String repo, String tag) throws ApiException {
        ApiResponse<Release> localVarResp = reposGetReleaseByTagWithHttpInfo(owner, repo, tag);
        return localVarResp.getData();
    }

    /**
     * Get a release by tag name
     * Get a published release with the specified tag.
     * @param owner  (required)
     * @param repo  (required)
     * @param tag tag parameter (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-by-tag-name">Get a release by tag name Documentation</a>
     */
    public ApiResponse<Release> reposGetReleaseByTagWithHttpInfo(String owner, String repo, String tag) throws ApiException {
        okhttp3.Call localVarCall = reposGetReleaseByTagValidateBeforeCall(owner, repo, tag, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a release by tag name (asynchronously)
     * Get a published release with the specified tag.
     * @param owner  (required)
     * @param repo  (required)
     * @param tag tag parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-release-by-tag-name">Get a release by tag name Documentation</a>
     */
    public okhttp3.Call reposGetReleaseByTagAsync(String owner, String repo, String tag, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetReleaseByTagValidateBeforeCall(owner, repo, tag, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetStatusChecksProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-status-checks-protection">Get status checks protection Documentation</a>
     */
    public okhttp3.Call reposGetStatusChecksProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetStatusChecksProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetStatusChecksProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetStatusChecksProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetStatusChecksProtection(Async)");
        }

        return reposGetStatusChecksProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Get status checks protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return StatusCheckPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-status-checks-protection">Get status checks protection Documentation</a>
     */
    public StatusCheckPolicy reposGetStatusChecksProtection(String owner, String repo, String branch) throws ApiException {
        ApiResponse<StatusCheckPolicy> localVarResp = reposGetStatusChecksProtectionWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get status checks protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;StatusCheckPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-status-checks-protection">Get status checks protection Documentation</a>
     */
    public ApiResponse<StatusCheckPolicy> reposGetStatusChecksProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetStatusChecksProtectionValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<StatusCheckPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status checks protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-status-checks-protection">Get status checks protection Documentation</a>
     */
    public okhttp3.Call reposGetStatusChecksProtectionAsync(String owner, String repo, String branch, final ApiCallback<StatusCheckPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetStatusChecksProtectionValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<StatusCheckPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetTeamsWithAccessToProtectedBranch
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-teams-with-access-to-the-protected-branch">Get teams with access to the protected branch Documentation</a>
     */
    public okhttp3.Call reposGetTeamsWithAccessToProtectedBranchCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetTeamsWithAccessToProtectedBranchValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetTeamsWithAccessToProtectedBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetTeamsWithAccessToProtectedBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetTeamsWithAccessToProtectedBranch(Async)");
        }

        return reposGetTeamsWithAccessToProtectedBranchCall(owner, repo, branch, _callback);

    }

    /**
     * Get teams with access to the protected branch
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the teams who have push access to this branch. The list includes child teams.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-teams-with-access-to-the-protected-branch">Get teams with access to the protected branch Documentation</a>
     */
    public List<Team> reposGetTeamsWithAccessToProtectedBranch(String owner, String repo, String branch) throws ApiException {
        ApiResponse<List<Team>> localVarResp = reposGetTeamsWithAccessToProtectedBranchWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get teams with access to the protected branch
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the teams who have push access to this branch. The list includes child teams.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-teams-with-access-to-the-protected-branch">Get teams with access to the protected branch Documentation</a>
     */
    public ApiResponse<List<Team>> reposGetTeamsWithAccessToProtectedBranchWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetTeamsWithAccessToProtectedBranchValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get teams with access to the protected branch (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the teams who have push access to this branch. The list includes child teams.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-teams-with-access-to-the-protected-branch">Get teams with access to the protected branch Documentation</a>
     */
    public okhttp3.Call reposGetTeamsWithAccessToProtectedBranchAsync(String owner, String repo, String branch, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetTeamsWithAccessToProtectedBranchValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetUsersWithAccessToProtectedBranch
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-users-with-access-to-the-protected-branch">Get users with access to the protected branch Documentation</a>
     */
    public okhttp3.Call reposGetUsersWithAccessToProtectedBranchCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetUsersWithAccessToProtectedBranchValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetUsersWithAccessToProtectedBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetUsersWithAccessToProtectedBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposGetUsersWithAccessToProtectedBranch(Async)");
        }

        return reposGetUsersWithAccessToProtectedBranchCall(owner, repo, branch, _callback);

    }

    /**
     * Get users with access to the protected branch
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the people who have push access to this branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-users-with-access-to-the-protected-branch">Get users with access to the protected branch Documentation</a>
     */
    public List<SimpleUser> reposGetUsersWithAccessToProtectedBranch(String owner, String repo, String branch) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = reposGetUsersWithAccessToProtectedBranchWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Get users with access to the protected branch
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the people who have push access to this branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-users-with-access-to-the-protected-branch">Get users with access to the protected branch Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> reposGetUsersWithAccessToProtectedBranchWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposGetUsersWithAccessToProtectedBranchValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users with access to the protected branch (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the people who have push access to this branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-users-with-access-to-the-protected-branch">Get users with access to the protected branch Documentation</a>
     */
    public okhttp3.Call reposGetUsersWithAccessToProtectedBranchAsync(String owner, String repo, String branch, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetUsersWithAccessToProtectedBranchValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposGetWebhook
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-webhook">Get a repository webhook Documentation</a>
     */
    public okhttp3.Call reposGetWebhookCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposGetWebhookValidateBeforeCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposGetWebhook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposGetWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling reposGetWebhook(Async)");
        }

        return reposGetWebhookCall(owner, repo, hookId, _callback);

    }

    /**
     * Get a repository webhook
     * Returns a webhook configured in a repository. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-webhook">Get a repository webhook Documentation</a>
     */
    public Hook reposGetWebhook(String owner, String repo, Integer hookId) throws ApiException {
        ApiResponse<Hook> localVarResp = reposGetWebhookWithHttpInfo(owner, repo, hookId);
        return localVarResp.getData();
    }

    /**
     * Get a repository webhook
     * Returns a webhook configured in a repository. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-webhook">Get a repository webhook Documentation</a>
     */
    public ApiResponse<Hook> reposGetWebhookWithHttpInfo(String owner, String repo, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = reposGetWebhookValidateBeforeCall(owner, repo, hookId, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository webhook (asynchronously)
     * Returns a webhook configured in a repository. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#get-a-repository-webhook">Get a repository webhook Documentation</a>
     */
    public okhttp3.Call reposGetWebhookAsync(String owner, String repo, Integer hookId, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposGetWebhookValidateBeforeCall(owner, repo, hookId, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListBranches
     * @param owner  (required)
     * @param repo  (required)
     * @param _protected Setting to &#x60;true&#x60; returns only protected branches. When set to &#x60;false&#x60;, only unprotected branches are returned. Omitting this parameter returns all branches. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches">List branches Documentation</a>
     */
    public okhttp3.Call reposListBranchesCall(String owner, String repo, Boolean _protected, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_protected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("protected", _protected));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListBranchesValidateBeforeCall(String owner, String repo, Boolean _protected, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListBranches(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListBranches(Async)");
        }

        return reposListBranchesCall(owner, repo, _protected, perPage, page, _callback);

    }

    /**
     * List branches
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _protected Setting to &#x60;true&#x60; returns only protected branches. When set to &#x60;false&#x60;, only unprotected branches are returned. Omitting this parameter returns all branches. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;ShortBranch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches">List branches Documentation</a>
     */
    public List<ShortBranch> reposListBranches(String owner, String repo, Boolean _protected, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<ShortBranch>> localVarResp = reposListBranchesWithHttpInfo(owner, repo, _protected, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List branches
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _protected Setting to &#x60;true&#x60; returns only protected branches. When set to &#x60;false&#x60;, only unprotected branches are returned. Omitting this parameter returns all branches. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;ShortBranch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches">List branches Documentation</a>
     */
    public ApiResponse<List<ShortBranch>> reposListBranchesWithHttpInfo(String owner, String repo, Boolean _protected, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListBranchesValidateBeforeCall(owner, repo, _protected, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<ShortBranch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List branches (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _protected Setting to &#x60;true&#x60; returns only protected branches. When set to &#x60;false&#x60;, only unprotected branches are returned. Omitting this parameter returns all branches. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches">List branches Documentation</a>
     */
    public okhttp3.Call reposListBranchesAsync(String owner, String repo, Boolean _protected, Integer perPage, Integer page, final ApiCallback<List<ShortBranch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListBranchesValidateBeforeCall(owner, repo, _protected, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<ShortBranch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListBranchesForHeadCommit
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches-for-head-commit">List branches for HEAD commit Documentation</a>
     */
    public okhttp3.Call reposListBranchesForHeadCommitCall(String owner, String repo, String commitSha, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "commit_sha" + "}", localVarApiClient.escapeString(commitSha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListBranchesForHeadCommitValidateBeforeCall(String owner, String repo, String commitSha, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListBranchesForHeadCommit(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListBranchesForHeadCommit(Async)");
        }

        // verify the required parameter 'commitSha' is set
        if (commitSha == null) {
            throw new ApiException("Missing the required parameter 'commitSha' when calling reposListBranchesForHeadCommit(Async)");
        }

        return reposListBranchesForHeadCommitCall(owner, repo, commitSha, _callback);

    }

    /**
     * List branches for HEAD commit
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @return List&lt;BranchShort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches-for-head-commit">List branches for HEAD commit Documentation</a>
     */
    public List<BranchShort> reposListBranchesForHeadCommit(String owner, String repo, String commitSha) throws ApiException {
        ApiResponse<List<BranchShort>> localVarResp = reposListBranchesForHeadCommitWithHttpInfo(owner, repo, commitSha);
        return localVarResp.getData();
    }

    /**
     * List branches for HEAD commit
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @return ApiResponse&lt;List&lt;BranchShort&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches-for-head-commit">List branches for HEAD commit Documentation</a>
     */
    public ApiResponse<List<BranchShort>> reposListBranchesForHeadCommitWithHttpInfo(String owner, String repo, String commitSha) throws ApiException {
        okhttp3.Call localVarCall = reposListBranchesForHeadCommitValidateBeforeCall(owner, repo, commitSha, null);
        Type localVarReturnType = new TypeToken<List<BranchShort>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List branches for HEAD commit (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-branches-for-head-commit">List branches for HEAD commit Documentation</a>
     */
    public okhttp3.Call reposListBranchesForHeadCommitAsync(String owner, String repo, String commitSha, final ApiCallback<List<BranchShort>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListBranchesForHeadCommitValidateBeforeCall(owner, repo, commitSha, _callback);
        Type localVarReturnType = new TypeToken<List<BranchShort>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListCollaborators
     * @param owner  (required)
     * @param repo  (required)
     * @param affiliation Filter collaborators returned by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: All outside collaborators of an organization-owned repository.   \\* &#x60;direct&#x60;: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-collaborators">List repository collaborators Documentation</a>
     */
    public okhttp3.Call reposListCollaboratorsCall(String owner, String repo, String affiliation, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (affiliation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affiliation", affiliation));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListCollaboratorsValidateBeforeCall(String owner, String repo, String affiliation, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListCollaborators(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListCollaborators(Async)");
        }

        return reposListCollaboratorsCall(owner, repo, affiliation, perPage, page, _callback);

    }

    /**
     * List repository collaborators
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.  You must have push access to the repository in order to list collaborators.
     * @param owner  (required)
     * @param repo  (required)
     * @param affiliation Filter collaborators returned by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: All outside collaborators of an organization-owned repository.   \\* &#x60;direct&#x60;: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Collaborator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-collaborators">List repository collaborators Documentation</a>
     */
    public List<Collaborator> reposListCollaborators(String owner, String repo, String affiliation, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Collaborator>> localVarResp = reposListCollaboratorsWithHttpInfo(owner, repo, affiliation, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository collaborators
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.  You must have push access to the repository in order to list collaborators.
     * @param owner  (required)
     * @param repo  (required)
     * @param affiliation Filter collaborators returned by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: All outside collaborators of an organization-owned repository.   \\* &#x60;direct&#x60;: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Collaborator&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-collaborators">List repository collaborators Documentation</a>
     */
    public ApiResponse<List<Collaborator>> reposListCollaboratorsWithHttpInfo(String owner, String repo, String affiliation, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListCollaboratorsValidateBeforeCall(owner, repo, affiliation, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Collaborator>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository collaborators (asynchronously)
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.  You must have push access to the repository in order to list collaborators.
     * @param owner  (required)
     * @param repo  (required)
     * @param affiliation Filter collaborators returned by their affiliation. Can be one of:   \\* &#x60;outside&#x60;: All outside collaborators of an organization-owned repository.   \\* &#x60;direct&#x60;: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.   \\* &#x60;all&#x60;: All collaborators the authenticated user can see. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-collaborators">List repository collaborators Documentation</a>
     */
    public okhttp3.Call reposListCollaboratorsAsync(String owner, String repo, String affiliation, Integer perPage, Integer page, final ApiCallback<List<Collaborator>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListCollaboratorsValidateBeforeCall(owner, repo, affiliation, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Collaborator>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListCommentsForCommit
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments">List commit comments Documentation</a>
     */
    public okhttp3.Call reposListCommentsForCommitCall(String owner, String repo, String commitSha, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{commit_sha}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "commit_sha" + "}", localVarApiClient.escapeString(commitSha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListCommentsForCommitValidateBeforeCall(String owner, String repo, String commitSha, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListCommentsForCommit(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListCommentsForCommit(Async)");
        }

        // verify the required parameter 'commitSha' is set
        if (commitSha == null) {
            throw new ApiException("Missing the required parameter 'commitSha' when calling reposListCommentsForCommit(Async)");
        }

        return reposListCommentsForCommitCall(owner, repo, commitSha, perPage, page, _callback);

    }

    /**
     * List commit comments
     * Use the &#x60;:commit_sha&#x60; to specify the commit that will have its comments listed.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;CommitComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments">List commit comments Documentation</a>
     */
    public List<CommitComment> reposListCommentsForCommit(String owner, String repo, String commitSha, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<CommitComment>> localVarResp = reposListCommentsForCommitWithHttpInfo(owner, repo, commitSha, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List commit comments
     * Use the &#x60;:commit_sha&#x60; to specify the commit that will have its comments listed.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;CommitComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments">List commit comments Documentation</a>
     */
    public ApiResponse<List<CommitComment>> reposListCommentsForCommitWithHttpInfo(String owner, String repo, String commitSha, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListCommentsForCommitValidateBeforeCall(owner, repo, commitSha, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<CommitComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List commit comments (asynchronously)
     * Use the &#x60;:commit_sha&#x60; to specify the commit that will have its comments listed.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments">List commit comments Documentation</a>
     */
    public okhttp3.Call reposListCommentsForCommitAsync(String owner, String repo, String commitSha, Integer perPage, Integer page, final ApiCallback<List<CommitComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListCommentsForCommitValidateBeforeCall(owner, repo, commitSha, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<CommitComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListCommitCommentsForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments-for-a-repository">List commit comments for a repository Documentation</a>
     */
    public okhttp3.Call reposListCommitCommentsForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListCommitCommentsForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListCommitCommentsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListCommitCommentsForRepo(Async)");
        }

        return reposListCommitCommentsForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List commit comments for a repository
     * Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/).  Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;CommitComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments-for-a-repository">List commit comments for a repository Documentation</a>
     */
    public List<CommitComment> reposListCommitCommentsForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<CommitComment>> localVarResp = reposListCommitCommentsForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List commit comments for a repository
     * Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/).  Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;CommitComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments-for-a-repository">List commit comments for a repository Documentation</a>
     */
    public ApiResponse<List<CommitComment>> reposListCommitCommentsForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListCommitCommentsForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<CommitComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List commit comments for a repository (asynchronously)
     * Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@2.22/rest/overview/media-types/).  Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-comments-for-a-repository">List commit comments for a repository Documentation</a>
     */
    public okhttp3.Call reposListCommitCommentsForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<CommitComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListCommitCommentsForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<CommitComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListCommitStatusesForRef
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-statuses-for-a-reference">List commit statuses for a reference Documentation</a>
     */
    public okhttp3.Call reposListCommitStatusesForRefCall(String owner, String repo, String ref, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{ref}/statuses"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListCommitStatusesForRefValidateBeforeCall(String owner, String repo, String ref, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListCommitStatusesForRef(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListCommitStatusesForRef(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling reposListCommitStatusesForRef(Async)");
        }

        return reposListCommitStatusesForRefCall(owner, repo, ref, perPage, page, _callback);

    }

    /**
     * List commit statuses for a reference
     * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.  This resource is also available via a legacy route: &#x60;GET /repos/:owner/:repo/statuses/:ref&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-statuses-for-a-reference">List commit statuses for a reference Documentation</a>
     */
    public List<Status> reposListCommitStatusesForRef(String owner, String repo, String ref, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Status>> localVarResp = reposListCommitStatusesForRefWithHttpInfo(owner, repo, ref, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List commit statuses for a reference
     * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.  This resource is also available via a legacy route: &#x60;GET /repos/:owner/:repo/statuses/:ref&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-statuses-for-a-reference">List commit statuses for a reference Documentation</a>
     */
    public ApiResponse<List<Status>> reposListCommitStatusesForRefWithHttpInfo(String owner, String repo, String ref, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListCommitStatusesForRefValidateBeforeCall(owner, repo, ref, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List commit statuses for a reference (asynchronously)
     * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.  This resource is also available via a legacy route: &#x60;GET /repos/:owner/:repo/statuses/:ref&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commit-statuses-for-a-reference">List commit statuses for a reference Documentation</a>
     */
    public okhttp3.Call reposListCommitStatusesForRefAsync(String owner, String repo, String ref, Integer perPage, Integer page, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListCommitStatusesForRefValidateBeforeCall(owner, repo, ref, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListCommits
     * @param owner  (required)
     * @param repo  (required)
     * @param sha SHA or branch to start listing commits from. Default: the repository’s default branch (usually &#x60;master&#x60;). (optional)
     * @param path Only commits containing this file path will be returned. (optional)
     * @param author GitHub login or email address by which to filter by commit author. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param until Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commits">List commits Documentation</a>
     */
    public okhttp3.Call reposListCommitsCall(String owner, String repo, String sha, String path, String author, OffsetDateTime since, OffsetDateTime until, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sha", sha));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListCommitsValidateBeforeCall(String owner, String repo, String sha, String path, String author, OffsetDateTime since, OffsetDateTime until, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListCommits(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListCommits(Async)");
        }

        return reposListCommitsCall(owner, repo, sha, path, author, since, until, perPage, page, _callback);

    }

    /**
     * List commits
     * **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param sha SHA or branch to start listing commits from. Default: the repository’s default branch (usually &#x60;master&#x60;). (optional)
     * @param path Only commits containing this file path will be returned. (optional)
     * @param author GitHub login or email address by which to filter by commit author. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param until Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commits">List commits Documentation</a>
     */
    public List<Commit> reposListCommits(String owner, String repo, String sha, String path, String author, OffsetDateTime since, OffsetDateTime until, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Commit>> localVarResp = reposListCommitsWithHttpInfo(owner, repo, sha, path, author, since, until, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List commits
     * **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param sha SHA or branch to start listing commits from. Default: the repository’s default branch (usually &#x60;master&#x60;). (optional)
     * @param path Only commits containing this file path will be returned. (optional)
     * @param author GitHub login or email address by which to filter by commit author. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param until Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Commit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commits">List commits Documentation</a>
     */
    public ApiResponse<List<Commit>> reposListCommitsWithHttpInfo(String owner, String repo, String sha, String path, String author, OffsetDateTime since, OffsetDateTime until, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListCommitsValidateBeforeCall(owner, repo, sha, path, author, since, until, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List commits (asynchronously)
     * **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     * @param owner  (required)
     * @param repo  (required)
     * @param sha SHA or branch to start listing commits from. Default: the repository’s default branch (usually &#x60;master&#x60;). (optional)
     * @param path Only commits containing this file path will be returned. (optional)
     * @param author GitHub login or email address by which to filter by commit author. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param until Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-commits">List commits Documentation</a>
     */
    public okhttp3.Call reposListCommitsAsync(String owner, String repo, String sha, String path, String author, OffsetDateTime since, OffsetDateTime until, Integer perPage, Integer page, final ApiCallback<List<Commit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListCommitsValidateBeforeCall(owner, repo, sha, path, author, since, until, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListContributors
     * @param owner  (required)
     * @param repo  (required)
     * @param anon Set to &#x60;1&#x60; or &#x60;true&#x60; to include anonymous contributors in results. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if repository contains content </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response if repository is empty </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-contributors">List repository contributors Documentation</a>
     */
    public okhttp3.Call reposListContributorsCall(String owner, String repo, String anon, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/contributors"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (anon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anon", anon));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListContributorsValidateBeforeCall(String owner, String repo, String anon, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListContributors(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListContributors(Async)");
        }

        return reposListContributorsCall(owner, repo, anon, perPage, page, _callback);

    }

    /**
     * List repository contributors
     * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     * @param owner  (required)
     * @param repo  (required)
     * @param anon Set to &#x60;1&#x60; or &#x60;true&#x60; to include anonymous contributors in results. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Contributor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if repository contains content </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response if repository is empty </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-contributors">List repository contributors Documentation</a>
     */
    public List<Contributor> reposListContributors(String owner, String repo, String anon, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Contributor>> localVarResp = reposListContributorsWithHttpInfo(owner, repo, anon, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository contributors
     * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     * @param owner  (required)
     * @param repo  (required)
     * @param anon Set to &#x60;1&#x60; or &#x60;true&#x60; to include anonymous contributors in results. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Contributor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if repository contains content </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response if repository is empty </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-contributors">List repository contributors Documentation</a>
     */
    public ApiResponse<List<Contributor>> reposListContributorsWithHttpInfo(String owner, String repo, String anon, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListContributorsValidateBeforeCall(owner, repo, anon, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Contributor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository contributors (asynchronously)
     * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     * @param owner  (required)
     * @param repo  (required)
     * @param anon Set to &#x60;1&#x60; or &#x60;true&#x60; to include anonymous contributors in results. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if repository contains content </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 204 </td><td> Response if repository is empty </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-contributors">List repository contributors Documentation</a>
     */
    public okhttp3.Call reposListContributorsAsync(String owner, String repo, String anon, Integer perPage, Integer page, final ApiCallback<List<Contributor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListContributorsValidateBeforeCall(owner, repo, anon, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Contributor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListDeployKeys
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deploy-keys">List deploy keys Documentation</a>
     */
    public okhttp3.Call reposListDeployKeysCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/keys"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListDeployKeysValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListDeployKeys(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListDeployKeys(Async)");
        }

        return reposListDeployKeysCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List deploy keys
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;DeployKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deploy-keys">List deploy keys Documentation</a>
     */
    public List<DeployKey> reposListDeployKeys(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<DeployKey>> localVarResp = reposListDeployKeysWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List deploy keys
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;DeployKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deploy-keys">List deploy keys Documentation</a>
     */
    public ApiResponse<List<DeployKey>> reposListDeployKeysWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListDeployKeysValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<DeployKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deploy keys (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deploy-keys">List deploy keys Documentation</a>
     */
    public okhttp3.Call reposListDeployKeysAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<DeployKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListDeployKeysValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<DeployKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListDeploymentStatuses
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployment-statuses">List deployment statuses Documentation</a>
     */
    public okhttp3.Call reposListDeploymentStatusesCall(String owner, String repo, Integer deploymentId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListDeploymentStatusesValidateBeforeCall(String owner, String repo, Integer deploymentId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListDeploymentStatuses(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListDeploymentStatuses(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling reposListDeploymentStatuses(Async)");
        }

        return reposListDeploymentStatusesCall(owner, repo, deploymentId, perPage, page, _callback);

    }

    /**
     * List deployment statuses
     * Users with pull access can view deployment statuses for a deployment:
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;DeploymentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployment-statuses">List deployment statuses Documentation</a>
     */
    public List<DeploymentStatus> reposListDeploymentStatuses(String owner, String repo, Integer deploymentId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<DeploymentStatus>> localVarResp = reposListDeploymentStatusesWithHttpInfo(owner, repo, deploymentId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List deployment statuses
     * Users with pull access can view deployment statuses for a deployment:
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;DeploymentStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployment-statuses">List deployment statuses Documentation</a>
     */
    public ApiResponse<List<DeploymentStatus>> reposListDeploymentStatusesWithHttpInfo(String owner, String repo, Integer deploymentId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListDeploymentStatusesValidateBeforeCall(owner, repo, deploymentId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<DeploymentStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployment statuses (asynchronously)
     * Users with pull access can view deployment statuses for a deployment:
     * @param owner  (required)
     * @param repo  (required)
     * @param deploymentId deployment_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployment-statuses">List deployment statuses Documentation</a>
     */
    public okhttp3.Call reposListDeploymentStatusesAsync(String owner, String repo, Integer deploymentId, Integer perPage, Integer page, final ApiCallback<List<DeploymentStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListDeploymentStatusesValidateBeforeCall(owner, repo, deploymentId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<DeploymentStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListDeployments
     * @param owner  (required)
     * @param repo  (required)
     * @param sha The SHA recorded at creation time. (optional, default to none)
     * @param ref The name of the ref. This can be a branch, tag, or SHA. (optional, default to none)
     * @param task The name of the task for the deployment (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;). (optional, default to none)
     * @param environment The name of the environment that was deployed to (e.g., &#x60;staging&#x60; or &#x60;production&#x60;). (optional, default to none)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployments">List deployments Documentation</a>
     */
    public okhttp3.Call reposListDeploymentsCall(String owner, String repo, String sha, String ref, String task, String environment, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/deployments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sha", sha));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (task != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task", task));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListDeploymentsValidateBeforeCall(String owner, String repo, String sha, String ref, String task, String environment, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListDeployments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListDeployments(Async)");
        }

        return reposListDeploymentsCall(owner, repo, sha, ref, task, environment, perPage, page, _callback);

    }

    /**
     * List deployments
     * Simple filtering of deployments is available via query parameters:
     * @param owner  (required)
     * @param repo  (required)
     * @param sha The SHA recorded at creation time. (optional, default to none)
     * @param ref The name of the ref. This can be a branch, tag, or SHA. (optional, default to none)
     * @param task The name of the task for the deployment (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;). (optional, default to none)
     * @param environment The name of the environment that was deployed to (e.g., &#x60;staging&#x60; or &#x60;production&#x60;). (optional, default to none)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployments">List deployments Documentation</a>
     */
    public List<Deployment> reposListDeployments(String owner, String repo, String sha, String ref, String task, String environment, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = reposListDeploymentsWithHttpInfo(owner, repo, sha, ref, task, environment, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List deployments
     * Simple filtering of deployments is available via query parameters:
     * @param owner  (required)
     * @param repo  (required)
     * @param sha The SHA recorded at creation time. (optional, default to none)
     * @param ref The name of the ref. This can be a branch, tag, or SHA. (optional, default to none)
     * @param task The name of the task for the deployment (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;). (optional, default to none)
     * @param environment The name of the environment that was deployed to (e.g., &#x60;staging&#x60; or &#x60;production&#x60;). (optional, default to none)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployments">List deployments Documentation</a>
     */
    public ApiResponse<List<Deployment>> reposListDeploymentsWithHttpInfo(String owner, String repo, String sha, String ref, String task, String environment, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListDeploymentsValidateBeforeCall(owner, repo, sha, ref, task, environment, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployments (asynchronously)
     * Simple filtering of deployments is available via query parameters:
     * @param owner  (required)
     * @param repo  (required)
     * @param sha The SHA recorded at creation time. (optional, default to none)
     * @param ref The name of the ref. This can be a branch, tag, or SHA. (optional, default to none)
     * @param task The name of the task for the deployment (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;). (optional, default to none)
     * @param environment The name of the environment that was deployed to (e.g., &#x60;staging&#x60; or &#x60;production&#x60;). (optional, default to none)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-deployments">List deployments Documentation</a>
     */
    public okhttp3.Call reposListDeploymentsAsync(String owner, String repo, String sha, String ref, String task, String environment, Integer perPage, Integer page, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListDeploymentsValidateBeforeCall(owner, repo, sha, ref, task, environment, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListForAuthenticatedUser
     * @param visibility Can be one of &#x60;all&#x60;, &#x60;public&#x60;, or &#x60;private&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;internal&#x60;, or &#x60;private&#x60;. (optional, default to all)
     * @param affiliation Comma-separated list of values. Can include:   \\* &#x60;owner&#x60;: Repositories that are owned by the authenticated user.   \\* &#x60;collaborator&#x60;: Repositories that the user has been added to as a collaborator.   \\* &#x60;organization_member&#x60;: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. (optional, default to owner,collaborator,organization_member)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;internal&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Default: &#x60;all&#x60;      Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. (optional, default to all)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-the-authenticated-user">List repositories for the authenticated user Documentation</a>
     */
    public okhttp3.Call reposListForAuthenticatedUserCall(String visibility, String affiliation, String type, String sort, String direction, Integer perPage, Integer page, OffsetDateTime since, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/repos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (affiliation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affiliation", affiliation));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListForAuthenticatedUserValidateBeforeCall(String visibility, String affiliation, String type, String sort, String direction, Integer perPage, Integer page, OffsetDateTime since, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return reposListForAuthenticatedUserCall(visibility, affiliation, type, sort, direction, perPage, page, since, before, _callback);

    }

    /**
     * List repositories for the authenticated user
     * Lists repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     * @param visibility Can be one of &#x60;all&#x60;, &#x60;public&#x60;, or &#x60;private&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;internal&#x60;, or &#x60;private&#x60;. (optional, default to all)
     * @param affiliation Comma-separated list of values. Can include:   \\* &#x60;owner&#x60;: Repositories that are owned by the authenticated user.   \\* &#x60;collaborator&#x60;: Repositories that the user has been added to as a collaborator.   \\* &#x60;organization_member&#x60;: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. (optional, default to owner,collaborator,organization_member)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;internal&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Default: &#x60;all&#x60;      Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. (optional, default to all)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-the-authenticated-user">List repositories for the authenticated user Documentation</a>
     */
    public List<Repository> reposListForAuthenticatedUser(String visibility, String affiliation, String type, String sort, String direction, Integer perPage, Integer page, OffsetDateTime since, OffsetDateTime before) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = reposListForAuthenticatedUserWithHttpInfo(visibility, affiliation, type, sort, direction, perPage, page, since, before);
        return localVarResp.getData();
    }

    /**
     * List repositories for the authenticated user
     * Lists repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     * @param visibility Can be one of &#x60;all&#x60;, &#x60;public&#x60;, or &#x60;private&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;internal&#x60;, or &#x60;private&#x60;. (optional, default to all)
     * @param affiliation Comma-separated list of values. Can include:   \\* &#x60;owner&#x60;: Repositories that are owned by the authenticated user.   \\* &#x60;collaborator&#x60;: Repositories that the user has been added to as a collaborator.   \\* &#x60;organization_member&#x60;: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. (optional, default to owner,collaborator,organization_member)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;internal&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Default: &#x60;all&#x60;      Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. (optional, default to all)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-the-authenticated-user">List repositories for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Repository>> reposListForAuthenticatedUserWithHttpInfo(String visibility, String affiliation, String type, String sort, String direction, Integer perPage, Integer page, OffsetDateTime since, OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = reposListForAuthenticatedUserValidateBeforeCall(visibility, affiliation, type, sort, direction, perPage, page, since, before, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories for the authenticated user (asynchronously)
     * Lists repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     * @param visibility Can be one of &#x60;all&#x60;, &#x60;public&#x60;, or &#x60;private&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;internal&#x60;, or &#x60;private&#x60;. (optional, default to all)
     * @param affiliation Comma-separated list of values. Can include:   \\* &#x60;owner&#x60;: Repositories that are owned by the authenticated user.   \\* &#x60;collaborator&#x60;: Repositories that the user has been added to as a collaborator.   \\* &#x60;organization_member&#x60;: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. (optional, default to owner,collaborator,organization_member)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;internal&#x60;, &#x60;private&#x60;, &#x60;member&#x60;. Default: &#x60;all&#x60;      Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. (optional, default to all)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-the-authenticated-user">List repositories for the authenticated user Documentation</a>
     */
    public okhttp3.Call reposListForAuthenticatedUserAsync(String visibility, String affiliation, String type, String sort, String direction, Integer perPage, Integer page, OffsetDateTime since, OffsetDateTime before, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListForAuthenticatedUserValidateBeforeCall(visibility, affiliation, type, sort, direction, perPage, page, since, before, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListForOrg
     * @param org  (required)
     * @param type Specifies the types of repositories you want returned. Can be one of &#x60;all&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Default: &#x60;all&#x60;. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, &#x60;type&#x60; can also be &#x60;internal&#x60;. However, the &#x60;internal&#x60; value is not yet supported when a GitHub App calls this API with an installation access token. (optional)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to created)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: when using &#x60;full_name&#x60;: &#x60;asc&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-organization-repositories">List organization repositories Documentation</a>
     */
    public okhttp3.Call reposListForOrgCall(String org, String type, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/repos"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListForOrgValidateBeforeCall(String org, String type, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reposListForOrg(Async)");
        }

        return reposListForOrgCall(org, type, sort, direction, perPage, page, _callback);

    }

    /**
     * List organization repositories
     * Lists repositories for the specified organization.
     * @param org  (required)
     * @param type Specifies the types of repositories you want returned. Can be one of &#x60;all&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Default: &#x60;all&#x60;. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, &#x60;type&#x60; can also be &#x60;internal&#x60;. However, the &#x60;internal&#x60; value is not yet supported when a GitHub App calls this API with an installation access token. (optional)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to created)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: when using &#x60;full_name&#x60;: &#x60;asc&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-organization-repositories">List organization repositories Documentation</a>
     */
    public List<MinimalRepository> reposListForOrg(String org, String type, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = reposListForOrgWithHttpInfo(org, type, sort, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization repositories
     * Lists repositories for the specified organization.
     * @param org  (required)
     * @param type Specifies the types of repositories you want returned. Can be one of &#x60;all&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Default: &#x60;all&#x60;. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, &#x60;type&#x60; can also be &#x60;internal&#x60;. However, the &#x60;internal&#x60; value is not yet supported when a GitHub App calls this API with an installation access token. (optional)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to created)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: when using &#x60;full_name&#x60;: &#x60;asc&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-organization-repositories">List organization repositories Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> reposListForOrgWithHttpInfo(String org, String type, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListForOrgValidateBeforeCall(org, type, sort, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization repositories (asynchronously)
     * Lists repositories for the specified organization.
     * @param org  (required)
     * @param type Specifies the types of repositories you want returned. Can be one of &#x60;all&#x60;, &#x60;public&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Note: For GitHub AE, can be one of &#x60;all&#x60;, &#x60;private&#x60;, &#x60;forks&#x60;, &#x60;sources&#x60;, &#x60;member&#x60;, &#x60;internal&#x60;. Default: &#x60;all&#x60;. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, &#x60;type&#x60; can also be &#x60;internal&#x60;. However, the &#x60;internal&#x60; value is not yet supported when a GitHub App calls this API with an installation access token. (optional)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to created)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: when using &#x60;full_name&#x60;: &#x60;asc&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-organization-repositories">List organization repositories Documentation</a>
     */
    public okhttp3.Call reposListForOrgAsync(String org, String type, String sort, String direction, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListForOrgValidateBeforeCall(org, type, sort, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListForUser
     * @param username  (required)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;member&#x60;. (optional, default to owner)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-a-user">List repositories for a user Documentation</a>
     */
    public okhttp3.Call reposListForUserCall(String username, String type, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/repos"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListForUserValidateBeforeCall(String username, String type, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling reposListForUser(Async)");
        }

        return reposListForUserCall(username, type, sort, direction, perPage, page, _callback);

    }

    /**
     * List repositories for a user
     * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
     * @param username  (required)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;member&#x60;. (optional, default to owner)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-a-user">List repositories for a user Documentation</a>
     */
    public List<MinimalRepository> reposListForUser(String username, String type, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = reposListForUserWithHttpInfo(username, type, sort, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories for a user
     * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
     * @param username  (required)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;member&#x60;. (optional, default to owner)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-a-user">List repositories for a user Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> reposListForUserWithHttpInfo(String username, String type, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListForUserValidateBeforeCall(username, type, sort, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories for a user (asynchronously)
     * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
     * @param username  (required)
     * @param type Can be one of &#x60;all&#x60;, &#x60;owner&#x60;, &#x60;member&#x60;. (optional, default to owner)
     * @param sort Can be one of &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;pushed&#x60;, &#x60;full_name&#x60;. (optional, default to full_name)
     * @param direction Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60; (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repositories-for-a-user">List repositories for a user Documentation</a>
     */
    public okhttp3.Call reposListForUserAsync(String username, String type, String sort, String direction, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListForUserValidateBeforeCall(username, type, sort, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListForks
     * @param owner  (required)
     * @param repo  (required)
     * @param sort The sort order. Can be either &#x60;newest&#x60;, &#x60;oldest&#x60;, or &#x60;stargazers&#x60;. (optional, default to newest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-forks">List forks Documentation</a>
     */
    public okhttp3.Call reposListForksCall(String owner, String repo, String sort, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/forks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListForksValidateBeforeCall(String owner, String repo, String sort, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListForks(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListForks(Async)");
        }

        return reposListForksCall(owner, repo, sort, perPage, page, _callback);

    }

    /**
     * List forks
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param sort The sort order. Can be either &#x60;newest&#x60;, &#x60;oldest&#x60;, or &#x60;stargazers&#x60;. (optional, default to newest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-forks">List forks Documentation</a>
     */
    public List<MinimalRepository> reposListForks(String owner, String repo, String sort, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = reposListForksWithHttpInfo(owner, repo, sort, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List forks
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param sort The sort order. Can be either &#x60;newest&#x60;, &#x60;oldest&#x60;, or &#x60;stargazers&#x60;. (optional, default to newest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-forks">List forks Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> reposListForksWithHttpInfo(String owner, String repo, String sort, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListForksValidateBeforeCall(owner, repo, sort, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List forks (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param sort The sort order. Can be either &#x60;newest&#x60;, &#x60;oldest&#x60;, or &#x60;stargazers&#x60;. (optional, default to newest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-forks">List forks Documentation</a>
     */
    public okhttp3.Call reposListForksAsync(String owner, String repo, String sort, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListForksValidateBeforeCall(owner, repo, sort, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListInvitations
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations">List repository invitations Documentation</a>
     */
    public okhttp3.Call reposListInvitationsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/invitations"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListInvitationsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListInvitations(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListInvitations(Async)");
        }

        return reposListInvitationsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository invitations
     * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;RepositoryInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations">List repository invitations Documentation</a>
     */
    public List<RepositoryInvitation> reposListInvitations(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<RepositoryInvitation>> localVarResp = reposListInvitationsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository invitations
     * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;RepositoryInvitation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations">List repository invitations Documentation</a>
     */
    public ApiResponse<List<RepositoryInvitation>> reposListInvitationsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListInvitationsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<RepositoryInvitation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository invitations (asynchronously)
     * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations">List repository invitations Documentation</a>
     */
    public okhttp3.Call reposListInvitationsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<RepositoryInvitation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListInvitationsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoryInvitation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListInvitationsForAuthenticatedUser
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations-for-the-authenticated-user">List repository invitations for the authenticated user Documentation</a>
     */
    public okhttp3.Call reposListInvitationsForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/repository_invitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListInvitationsForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return reposListInvitationsForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List repository invitations for the authenticated user
     * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;RepositoryInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations-for-the-authenticated-user">List repository invitations for the authenticated user Documentation</a>
     */
    public List<RepositoryInvitation> reposListInvitationsForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<RepositoryInvitation>> localVarResp = reposListInvitationsForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository invitations for the authenticated user
     * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;RepositoryInvitation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations-for-the-authenticated-user">List repository invitations for the authenticated user Documentation</a>
     */
    public ApiResponse<List<RepositoryInvitation>> reposListInvitationsForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListInvitationsForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<RepositoryInvitation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository invitations for the authenticated user (asynchronously)
     * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-invitations-for-the-authenticated-user">List repository invitations for the authenticated user Documentation</a>
     */
    public okhttp3.Call reposListInvitationsForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<RepositoryInvitation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListInvitationsForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoryInvitation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListLanguages
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-languages">List repository languages Documentation</a>
     */
    public okhttp3.Call reposListLanguagesCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/languages"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListLanguagesValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListLanguages(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListLanguages(Async)");
        }

        return reposListLanguagesCall(owner, repo, _callback);

    }

    /**
     * List repository languages
     * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     * @param owner  (required)
     * @param repo  (required)
     * @return Map&lt;String, Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-languages">List repository languages Documentation</a>
     */
    public Map<String, Integer> reposListLanguages(String owner, String repo) throws ApiException {
        ApiResponse<Map<String, Integer>> localVarResp = reposListLanguagesWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * List repository languages
     * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-languages">List repository languages Documentation</a>
     */
    public ApiResponse<Map<String, Integer>> reposListLanguagesWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposListLanguagesValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository languages (asynchronously)
     * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-languages">List repository languages Documentation</a>
     */
    public okhttp3.Call reposListLanguagesAsync(String owner, String repo, final ApiCallback<Map<String, Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListLanguagesValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListPagesBuilds
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-github-pages-builds">List GitHub Enterprise Server Pages builds Documentation</a>
     */
    public okhttp3.Call reposListPagesBuildsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages/builds"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListPagesBuildsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListPagesBuilds(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListPagesBuilds(Async)");
        }

        return reposListPagesBuildsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List GitHub Enterprise Server Pages builds
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;PageBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-github-pages-builds">List GitHub Enterprise Server Pages builds Documentation</a>
     */
    public List<PageBuild> reposListPagesBuilds(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<PageBuild>> localVarResp = reposListPagesBuildsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List GitHub Enterprise Server Pages builds
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PageBuild&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-github-pages-builds">List GitHub Enterprise Server Pages builds Documentation</a>
     */
    public ApiResponse<List<PageBuild>> reposListPagesBuildsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListPagesBuildsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<PageBuild>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List GitHub Enterprise Server Pages builds (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-github-pages-builds">List GitHub Enterprise Server Pages builds Documentation</a>
     */
    public okhttp3.Call reposListPagesBuildsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<PageBuild>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListPagesBuildsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<PageBuild>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListPublic
     * @param since A repository ID. Only return repositories with an ID greater than this ID. (optional)
     * @param visibility Specifies the types of repositories to return. Can be one of &#x60;all&#x60; or &#x60;public&#x60;. Default: &#x60;public&#x60;. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. (optional, default to public)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-public-repositories">List public repositories Documentation</a>
     */
    public okhttp3.Call reposListPublicCall(Integer since, String visibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListPublicValidateBeforeCall(Integer since, String visibility, final ApiCallback _callback) throws ApiException {
        return reposListPublicCall(since, visibility, _callback);

    }

    /**
     * List public repositories
     * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     * @param since A repository ID. Only return repositories with an ID greater than this ID. (optional)
     * @param visibility Specifies the types of repositories to return. Can be one of &#x60;all&#x60; or &#x60;public&#x60;. Default: &#x60;public&#x60;. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. (optional, default to public)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-public-repositories">List public repositories Documentation</a>
     */
    public List<MinimalRepository> reposListPublic(Integer since, String visibility) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = reposListPublicWithHttpInfo(since, visibility);
        return localVarResp.getData();
    }

    /**
     * List public repositories
     * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     * @param since A repository ID. Only return repositories with an ID greater than this ID. (optional)
     * @param visibility Specifies the types of repositories to return. Can be one of &#x60;all&#x60; or &#x60;public&#x60;. Default: &#x60;public&#x60;. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. (optional, default to public)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-public-repositories">List public repositories Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> reposListPublicWithHttpInfo(Integer since, String visibility) throws ApiException {
        okhttp3.Call localVarCall = reposListPublicValidateBeforeCall(since, visibility, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public repositories (asynchronously)
     * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     * @param since A repository ID. Only return repositories with an ID greater than this ID. (optional)
     * @param visibility Specifies the types of repositories to return. Can be one of &#x60;all&#x60; or &#x60;public&#x60;. Default: &#x60;public&#x60;. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. (optional, default to public)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-public-repositories">List public repositories Documentation</a>
     */
    public okhttp3.Call reposListPublicAsync(Integer since, String visibility, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListPublicValidateBeforeCall(since, visibility, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListPullRequestsAssociatedWithCommit
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-pull-requests-associated-with-a-commit">List pull requests associated with a commit Documentation</a>
     */
    public okhttp3.Call reposListPullRequestsAssociatedWithCommitCall(String owner, String repo, String commitSha, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{commit_sha}/pulls"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "commit_sha" + "}", localVarApiClient.escapeString(commitSha.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListPullRequestsAssociatedWithCommitValidateBeforeCall(String owner, String repo, String commitSha, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListPullRequestsAssociatedWithCommit(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListPullRequestsAssociatedWithCommit(Async)");
        }

        // verify the required parameter 'commitSha' is set
        if (commitSha == null) {
            throw new ApiException("Missing the required parameter 'commitSha' when calling reposListPullRequestsAssociatedWithCommit(Async)");
        }

        return reposListPullRequestsAssociatedWithCommitCall(owner, repo, commitSha, perPage, page, _callback);

    }

    /**
     * List pull requests associated with a commit
     * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@2.22/rest/reference/pulls#list-pull-requests) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;PullRequestSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-pull-requests-associated-with-a-commit">List pull requests associated with a commit Documentation</a>
     */
    public List<PullRequestSimple> reposListPullRequestsAssociatedWithCommit(String owner, String repo, String commitSha, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<PullRequestSimple>> localVarResp = reposListPullRequestsAssociatedWithCommitWithHttpInfo(owner, repo, commitSha, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List pull requests associated with a commit
     * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@2.22/rest/reference/pulls#list-pull-requests) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PullRequestSimple&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-pull-requests-associated-with-a-commit">List pull requests associated with a commit Documentation</a>
     */
    public ApiResponse<List<PullRequestSimple>> reposListPullRequestsAssociatedWithCommitWithHttpInfo(String owner, String repo, String commitSha, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListPullRequestsAssociatedWithCommitValidateBeforeCall(owner, repo, commitSha, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<PullRequestSimple>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pull requests associated with a commit (asynchronously)
     * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@2.22/rest/reference/pulls#list-pull-requests) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param commitSha commit_sha parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-pull-requests-associated-with-a-commit">List pull requests associated with a commit Documentation</a>
     */
    public okhttp3.Call reposListPullRequestsAssociatedWithCommitAsync(String owner, String repo, String commitSha, Integer perPage, Integer page, final ApiCallback<List<PullRequestSimple>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListPullRequestsAssociatedWithCommitValidateBeforeCall(owner, repo, commitSha, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<PullRequestSimple>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListReleaseAssets
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-release-assets">List release assets Documentation</a>
     */
    public okhttp3.Call reposListReleaseAssetsCall(String owner, String repo, Integer releaseId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListReleaseAssetsValidateBeforeCall(String owner, String repo, Integer releaseId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListReleaseAssets(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListReleaseAssets(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reposListReleaseAssets(Async)");
        }

        return reposListReleaseAssetsCall(owner, repo, releaseId, perPage, page, _callback);

    }

    /**
     * List release assets
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;ReleaseAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-release-assets">List release assets Documentation</a>
     */
    public List<ReleaseAsset> reposListReleaseAssets(String owner, String repo, Integer releaseId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<ReleaseAsset>> localVarResp = reposListReleaseAssetsWithHttpInfo(owner, repo, releaseId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List release assets
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;ReleaseAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-release-assets">List release assets Documentation</a>
     */
    public ApiResponse<List<ReleaseAsset>> reposListReleaseAssetsWithHttpInfo(String owner, String repo, Integer releaseId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListReleaseAssetsValidateBeforeCall(owner, repo, releaseId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<ReleaseAsset>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List release assets (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-release-assets">List release assets Documentation</a>
     */
    public okhttp3.Call reposListReleaseAssetsAsync(String owner, String repo, Integer releaseId, Integer perPage, Integer page, final ApiCallback<List<ReleaseAsset>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListReleaseAssetsValidateBeforeCall(owner, repo, releaseId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<ReleaseAsset>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListReleases
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-releases">List releases Documentation</a>
     */
    public okhttp3.Call reposListReleasesCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListReleasesValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListReleases(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListReleases(Async)");
        }

        return reposListReleasesCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List releases
     * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-releases">List releases Documentation</a>
     */
    public List<Release> reposListReleases(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Release>> localVarResp = reposListReleasesWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List releases
     * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Release&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-releases">List releases Documentation</a>
     */
    public ApiResponse<List<Release>> reposListReleasesWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListReleasesValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Release>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List releases (asynchronously)
     * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-releases">List releases Documentation</a>
     */
    public okhttp3.Call reposListReleasesAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<Release>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListReleasesValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Release>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListTags
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-tags">List repository tags Documentation</a>
     */
    public okhttp3.Call reposListTagsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/tags"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListTagsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListTags(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListTags(Async)");
        }

        return reposListTagsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository tags
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-tags">List repository tags Documentation</a>
     */
    public List<Tag> reposListTags(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = reposListTagsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository tags
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-tags">List repository tags Documentation</a>
     */
    public ApiResponse<List<Tag>> reposListTagsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListTagsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository tags (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-tags">List repository tags Documentation</a>
     */
    public okhttp3.Call reposListTagsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListTagsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListTeams
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-teams">List repository teams Documentation</a>
     */
    public okhttp3.Call reposListTeamsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/teams"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListTeamsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListTeams(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListTeams(Async)");
        }

        return reposListTeamsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository teams
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-teams">List repository teams Documentation</a>
     */
    public List<Team> reposListTeams(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Team>> localVarResp = reposListTeamsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository teams
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-teams">List repository teams Documentation</a>
     */
    public ApiResponse<List<Team>> reposListTeamsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListTeamsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository teams (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-teams">List repository teams Documentation</a>
     */
    public okhttp3.Call reposListTeamsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListTeamsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposListWebhooks
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-webhooks">List repository webhooks Documentation</a>
     */
    public okhttp3.Call reposListWebhooksCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposListWebhooksValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposListWebhooks(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposListWebhooks(Async)");
        }

        return reposListWebhooksCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository webhooks
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-webhooks">List repository webhooks Documentation</a>
     */
    public List<Hook> reposListWebhooks(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Hook>> localVarResp = reposListWebhooksWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository webhooks
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Hook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-webhooks">List repository webhooks Documentation</a>
     */
    public ApiResponse<List<Hook>> reposListWebhooksWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reposListWebhooksValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository webhooks (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-repository-webhooks">List repository webhooks Documentation</a>
     */
    public okhttp3.Call reposListWebhooksAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<Hook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposListWebhooksValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposMerge
     * @param owner  (required)
     * @param repo  (required)
     * @param reposMergeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response (The resulting merge commit) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when already merged </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found when the base or head does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#merge-a-branch">Merge a branch Documentation</a>
     */
    public okhttp3.Call reposMergeCall(String owner, String repo, ReposMergeRequest reposMergeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposMergeRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/merges"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposMergeValidateBeforeCall(String owner, String repo, ReposMergeRequest reposMergeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposMerge(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposMerge(Async)");
        }

        // verify the required parameter 'reposMergeRequest' is set
        if (reposMergeRequest == null) {
            throw new ApiException("Missing the required parameter 'reposMergeRequest' when calling reposMerge(Async)");
        }

        return reposMergeCall(owner, repo, reposMergeRequest, _callback);

    }

    /**
     * Merge a branch
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param reposMergeRequest  (required)
     * @return Commit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response (The resulting merge commit) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when already merged </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found when the base or head does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#merge-a-branch">Merge a branch Documentation</a>
     */
    public Commit reposMerge(String owner, String repo, ReposMergeRequest reposMergeRequest) throws ApiException {
        ApiResponse<Commit> localVarResp = reposMergeWithHttpInfo(owner, repo, reposMergeRequest);
        return localVarResp.getData();
    }

    /**
     * Merge a branch
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param reposMergeRequest  (required)
     * @return ApiResponse&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response (The resulting merge commit) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when already merged </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found when the base or head does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#merge-a-branch">Merge a branch Documentation</a>
     */
    public ApiResponse<Commit> reposMergeWithHttpInfo(String owner, String repo, ReposMergeRequest reposMergeRequest) throws ApiException {
        okhttp3.Call localVarCall = reposMergeValidateBeforeCall(owner, repo, reposMergeRequest, null);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merge a branch (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param reposMergeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response (The resulting merge commit) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when already merged </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found when the base or head does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when there is a merge conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#merge-a-branch">Merge a branch Documentation</a>
     */
    public okhttp3.Call reposMergeAsync(String owner, String repo, ReposMergeRequest reposMergeRequest, final ApiCallback<Commit> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposMergeValidateBeforeCall(owner, repo, reposMergeRequest, _callback);
        Type localVarReturnType = new TypeToken<Commit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposPingWebhook
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#ping-a-repository-webhook">Ping a repository webhook Documentation</a>
     */
    public okhttp3.Call reposPingWebhookCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{hook_id}/pings"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposPingWebhookValidateBeforeCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposPingWebhook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposPingWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling reposPingWebhook(Async)");
        }

        return reposPingWebhookCall(owner, repo, hookId, _callback);

    }

    /**
     * Ping a repository webhook
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.22/webhooks/#ping-event) to be sent to the hook.
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#ping-a-repository-webhook">Ping a repository webhook Documentation</a>
     */
    public void reposPingWebhook(String owner, String repo, Integer hookId) throws ApiException {
        reposPingWebhookWithHttpInfo(owner, repo, hookId);
    }

    /**
     * Ping a repository webhook
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.22/webhooks/#ping-event) to be sent to the hook.
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#ping-a-repository-webhook">Ping a repository webhook Documentation</a>
     */
    public ApiResponse<Void> reposPingWebhookWithHttpInfo(String owner, String repo, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = reposPingWebhookValidateBeforeCall(owner, repo, hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Ping a repository webhook (asynchronously)
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.22/webhooks/#ping-event) to be sent to the hook.
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#ping-a-repository-webhook">Ping a repository webhook Documentation</a>
     */
    public okhttp3.Call reposPingWebhookAsync(String owner, String repo, Integer hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposPingWebhookValidateBeforeCall(owner, repo, hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposRemoveAppAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-app-access-restrictions">Remove app access restrictions Documentation</a>
     */
    public okhttp3.Call reposRemoveAppAccessRestrictionsCall(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetAppAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposRemoveAppAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposRemoveAppAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposRemoveAppAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposRemoveAppAccessRestrictions(Async)");
        }

        return reposRemoveAppAccessRestrictionsCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, _callback);

    }

    /**
     * Remove app access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of an app to push to this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @return List&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-app-access-restrictions">Remove app access restrictions Documentation</a>
     */
    public List<Integration> reposRemoveAppAccessRestrictions(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<Integration>> localVarResp = reposRemoveAppAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetAppAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove app access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of an app to push to this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Integration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-app-access-restrictions">Remove app access restrictions Documentation</a>
     */
    public ApiResponse<List<Integration>> reposRemoveAppAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposRemoveAppAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove app access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of an app to push to this branch. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-app-access-restrictions">Remove app access restrictions Documentation</a>
     */
    public okhttp3.Call reposRemoveAppAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback<List<Integration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposRemoveAppAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposRemoveCollaborator
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-a-repository-collaborator">Remove a repository collaborator Documentation</a>
     */
    public okhttp3.Call reposRemoveCollaboratorCall(String owner, String repo, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/collaborators/{username}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposRemoveCollaboratorValidateBeforeCall(String owner, String repo, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposRemoveCollaborator(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposRemoveCollaborator(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling reposRemoveCollaborator(Async)");
        }

        return reposRemoveCollaboratorCall(owner, repo, username, _callback);

    }

    /**
     * Remove a repository collaborator
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-a-repository-collaborator">Remove a repository collaborator Documentation</a>
     */
    public void reposRemoveCollaborator(String owner, String repo, String username) throws ApiException {
        reposRemoveCollaboratorWithHttpInfo(owner, repo, username);
    }

    /**
     * Remove a repository collaborator
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-a-repository-collaborator">Remove a repository collaborator Documentation</a>
     */
    public ApiResponse<Void> reposRemoveCollaboratorWithHttpInfo(String owner, String repo, String username) throws ApiException {
        okhttp3.Call localVarCall = reposRemoveCollaboratorValidateBeforeCall(owner, repo, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a repository collaborator (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-a-repository-collaborator">Remove a repository collaborator Documentation</a>
     */
    public okhttp3.Call reposRemoveCollaboratorAsync(String owner, String repo, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposRemoveCollaboratorValidateBeforeCall(owner, repo, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposRemoveStatusCheckContexts
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-contexts">Remove status check contexts Documentation</a>
     */
    public okhttp3.Call reposRemoveStatusCheckContextsCall(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetStatusCheckContextsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposRemoveStatusCheckContextsValidateBeforeCall(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposRemoveStatusCheckContexts(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposRemoveStatusCheckContexts(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposRemoveStatusCheckContexts(Async)");
        }

        return reposRemoveStatusCheckContextsCall(owner, repo, branch, reposSetStatusCheckContextsRequest, _callback);

    }

    /**
     * Remove status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-contexts">Remove status check contexts Documentation</a>
     */
    public List<String> reposRemoveStatusCheckContexts(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest) throws ApiException {
        ApiResponse<List<String>> localVarResp = reposRemoveStatusCheckContextsWithHttpInfo(owner, repo, branch, reposSetStatusCheckContextsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-contexts">Remove status check contexts Documentation</a>
     */
    public ApiResponse<List<String>> reposRemoveStatusCheckContextsWithHttpInfo(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposRemoveStatusCheckContextsValidateBeforeCall(owner, repo, branch, reposSetStatusCheckContextsRequest, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove status check contexts (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-contexts">Remove status check contexts Documentation</a>
     */
    public okhttp3.Call reposRemoveStatusCheckContextsAsync(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposRemoveStatusCheckContextsValidateBeforeCall(owner, repo, branch, reposSetStatusCheckContextsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposRemoveStatusCheckProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-protection">Remove status check protection Documentation</a>
     */
    public okhttp3.Call reposRemoveStatusCheckProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposRemoveStatusCheckProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposRemoveStatusCheckProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposRemoveStatusCheckProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposRemoveStatusCheckProtection(Async)");
        }

        return reposRemoveStatusCheckProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Remove status check protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-protection">Remove status check protection Documentation</a>
     */
    public void reposRemoveStatusCheckProtection(String owner, String repo, String branch) throws ApiException {
        reposRemoveStatusCheckProtectionWithHttpInfo(owner, repo, branch);
    }

    /**
     * Remove status check protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-protection">Remove status check protection Documentation</a>
     */
    public ApiResponse<Void> reposRemoveStatusCheckProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposRemoveStatusCheckProtectionValidateBeforeCall(owner, repo, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove status check protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-status-check-protection">Remove status check protection Documentation</a>
     */
    public okhttp3.Call reposRemoveStatusCheckProtectionAsync(String owner, String repo, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposRemoveStatusCheckProtectionValidateBeforeCall(owner, repo, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposRemoveTeamAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-team-access-restrictions">Remove team access restrictions Documentation</a>
     */
    public okhttp3.Call reposRemoveTeamAccessRestrictionsCall(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetTeamAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposRemoveTeamAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposRemoveTeamAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposRemoveTeamAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposRemoveTeamAccessRestrictions(Async)");
        }

        return reposRemoveTeamAccessRestrictionsCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, _callback);

    }

    /**
     * Remove team access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a team to push to this branch. You can also remove push access for child teams.  | Type    | Description                                                                                                                                         | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Teams that should no longer have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-team-access-restrictions">Remove team access restrictions Documentation</a>
     */
    public List<Team> reposRemoveTeamAccessRestrictions(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<Team>> localVarResp = reposRemoveTeamAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetTeamAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove team access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a team to push to this branch. You can also remove push access for child teams.  | Type    | Description                                                                                                                                         | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Teams that should no longer have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-team-access-restrictions">Remove team access restrictions Documentation</a>
     */
    public ApiResponse<List<Team>> reposRemoveTeamAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposRemoveTeamAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove team access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a team to push to this branch. You can also remove push access for child teams.  | Type    | Description                                                                                                                                         | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Teams that should no longer have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-team-access-restrictions">Remove team access restrictions Documentation</a>
     */
    public okhttp3.Call reposRemoveTeamAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposRemoveTeamAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposRemoveUserAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-user-access-restrictions">Remove user access restrictions Documentation</a>
     */
    public okhttp3.Call reposRemoveUserAccessRestrictionsCall(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetUserAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposRemoveUserAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposRemoveUserAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposRemoveUserAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposRemoveUserAccessRestrictions(Async)");
        }

        return reposRemoveUserAccessRestrictionsCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, _callback);

    }

    /**
     * Remove user access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a user to push to this branch.  | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-user-access-restrictions">Remove user access restrictions Documentation</a>
     */
    public List<SimpleUser> reposRemoveUserAccessRestrictions(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = reposRemoveUserAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetUserAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove user access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a user to push to this branch.  | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-user-access-restrictions">Remove user access restrictions Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> reposRemoveUserAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposRemoveUserAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove user access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a user to push to this branch.  | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#remove-user-access-restrictions">Remove user access restrictions Documentation</a>
     */
    public okhttp3.Call reposRemoveUserAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposRemoveUserAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposReplaceAllTopics
     * @param owner  (required)
     * @param repo  (required)
     * @param reposReplaceAllTopicsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#replace-all-repository-topics">Replace all repository topics Documentation</a>
     */
    public okhttp3.Call reposReplaceAllTopicsCall(String owner, String repo, ReposReplaceAllTopicsRequest reposReplaceAllTopicsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposReplaceAllTopicsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/topics"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposReplaceAllTopicsValidateBeforeCall(String owner, String repo, ReposReplaceAllTopicsRequest reposReplaceAllTopicsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposReplaceAllTopics(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposReplaceAllTopics(Async)");
        }

        // verify the required parameter 'reposReplaceAllTopicsRequest' is set
        if (reposReplaceAllTopicsRequest == null) {
            throw new ApiException("Missing the required parameter 'reposReplaceAllTopicsRequest' when calling reposReplaceAllTopics(Async)");
        }

        return reposReplaceAllTopicsCall(owner, repo, reposReplaceAllTopicsRequest, _callback);

    }

    /**
     * Replace all repository topics
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param reposReplaceAllTopicsRequest  (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#replace-all-repository-topics">Replace all repository topics Documentation</a>
     */
    public Topic reposReplaceAllTopics(String owner, String repo, ReposReplaceAllTopicsRequest reposReplaceAllTopicsRequest) throws ApiException {
        ApiResponse<Topic> localVarResp = reposReplaceAllTopicsWithHttpInfo(owner, repo, reposReplaceAllTopicsRequest);
        return localVarResp.getData();
    }

    /**
     * Replace all repository topics
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param reposReplaceAllTopicsRequest  (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#replace-all-repository-topics">Replace all repository topics Documentation</a>
     */
    public ApiResponse<Topic> reposReplaceAllTopicsWithHttpInfo(String owner, String repo, ReposReplaceAllTopicsRequest reposReplaceAllTopicsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposReplaceAllTopicsValidateBeforeCall(owner, repo, reposReplaceAllTopicsRequest, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace all repository topics (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param reposReplaceAllTopicsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#replace-all-repository-topics">Replace all repository topics Documentation</a>
     */
    public okhttp3.Call reposReplaceAllTopicsAsync(String owner, String repo, ReposReplaceAllTopicsRequest reposReplaceAllTopicsRequest, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposReplaceAllTopicsValidateBeforeCall(owner, repo, reposReplaceAllTopicsRequest, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposRequestPagesBuild
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#request-a-github-pages-build">Request a GitHub Enterprise Server Pages build Documentation</a>
     */
    public okhttp3.Call reposRequestPagesBuildCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages/builds"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposRequestPagesBuildValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposRequestPagesBuild(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposRequestPagesBuild(Async)");
        }

        return reposRequestPagesBuildCall(owner, repo, _callback);

    }

    /**
     * Request a GitHub Enterprise Server Pages build
     * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.  Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     * @param owner  (required)
     * @param repo  (required)
     * @return PageBuildStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#request-a-github-pages-build">Request a GitHub Enterprise Server Pages build Documentation</a>
     */
    public PageBuildStatus reposRequestPagesBuild(String owner, String repo) throws ApiException {
        ApiResponse<PageBuildStatus> localVarResp = reposRequestPagesBuildWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Request a GitHub Enterprise Server Pages build
     * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.  Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;PageBuildStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#request-a-github-pages-build">Request a GitHub Enterprise Server Pages build Documentation</a>
     */
    public ApiResponse<PageBuildStatus> reposRequestPagesBuildWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = reposRequestPagesBuildValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<PageBuildStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request a GitHub Enterprise Server Pages build (asynchronously)
     * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.  Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#request-a-github-pages-build">Request a GitHub Enterprise Server Pages build Documentation</a>
     */
    public okhttp3.Call reposRequestPagesBuildAsync(String owner, String repo, final ApiCallback<PageBuildStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposRequestPagesBuildValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<PageBuildStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposSetAdminBranchProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-admin-branch-protection">Set admin branch protection Documentation</a>
     */
    public okhttp3.Call reposSetAdminBranchProtectionCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposSetAdminBranchProtectionValidateBeforeCall(String owner, String repo, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposSetAdminBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposSetAdminBranchProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposSetAdminBranchProtection(Async)");
        }

        return reposSetAdminBranchProtectionCall(owner, repo, branch, _callback);

    }

    /**
     * Set admin branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ProtectedBranchAdminEnforced
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-admin-branch-protection">Set admin branch protection Documentation</a>
     */
    public ProtectedBranchAdminEnforced reposSetAdminBranchProtection(String owner, String repo, String branch) throws ApiException {
        ApiResponse<ProtectedBranchAdminEnforced> localVarResp = reposSetAdminBranchProtectionWithHttpInfo(owner, repo, branch);
        return localVarResp.getData();
    }

    /**
     * Set admin branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @return ApiResponse&lt;ProtectedBranchAdminEnforced&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-admin-branch-protection">Set admin branch protection Documentation</a>
     */
    public ApiResponse<ProtectedBranchAdminEnforced> reposSetAdminBranchProtectionWithHttpInfo(String owner, String repo, String branch) throws ApiException {
        okhttp3.Call localVarCall = reposSetAdminBranchProtectionValidateBeforeCall(owner, repo, branch, null);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set admin branch protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-admin-branch-protection">Set admin branch protection Documentation</a>
     */
    public okhttp3.Call reposSetAdminBranchProtectionAsync(String owner, String repo, String branch, final ApiCallback<ProtectedBranchAdminEnforced> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposSetAdminBranchProtectionValidateBeforeCall(owner, repo, branch, _callback);
        Type localVarReturnType = new TypeToken<ProtectedBranchAdminEnforced>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposSetAppAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-app-access-restrictions">Set app access restrictions Documentation</a>
     */
    public okhttp3.Call reposSetAppAccessRestrictionsCall(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetAppAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposSetAppAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposSetAppAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposSetAppAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposSetAppAccessRestrictions(Async)");
        }

        return reposSetAppAccessRestrictionsCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, _callback);

    }

    /**
     * Set app access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @return List&lt;Integration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-app-access-restrictions">Set app access restrictions Documentation</a>
     */
    public List<Integration> reposSetAppAccessRestrictions(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<Integration>> localVarResp = reposSetAppAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetAppAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Set app access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Integration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-app-access-restrictions">Set app access restrictions Documentation</a>
     */
    public ApiResponse<List<Integration>> reposSetAppAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposSetAppAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set app access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with &#x60;write&#x60; access to the &#x60;contents&#x60; permission can be added as authorized actors on a protected branch.  | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | The GitHub Apps that have push access to this branch. Use the app&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetAppAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-app-access-restrictions">Set app access restrictions Documentation</a>
     */
    public okhttp3.Call reposSetAppAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetAppAccessRestrictionsRequest reposSetAppAccessRestrictionsRequest, final ApiCallback<List<Integration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposSetAppAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetAppAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Integration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposSetStatusCheckContexts
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-status-check-contexts">Set status check contexts Documentation</a>
     */
    public okhttp3.Call reposSetStatusCheckContextsCall(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetStatusCheckContextsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposSetStatusCheckContextsValidateBeforeCall(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposSetStatusCheckContexts(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposSetStatusCheckContexts(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposSetStatusCheckContexts(Async)");
        }

        return reposSetStatusCheckContextsCall(owner, repo, branch, reposSetStatusCheckContextsRequest, _callback);

    }

    /**
     * Set status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-status-check-contexts">Set status check contexts Documentation</a>
     */
    public List<String> reposSetStatusCheckContexts(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest) throws ApiException {
        ApiResponse<List<String>> localVarResp = reposSetStatusCheckContextsWithHttpInfo(owner, repo, branch, reposSetStatusCheckContextsRequest);
        return localVarResp.getData();
    }

    /**
     * Set status check contexts
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-status-check-contexts">Set status check contexts Documentation</a>
     */
    public ApiResponse<List<String>> reposSetStatusCheckContextsWithHttpInfo(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposSetStatusCheckContextsValidateBeforeCall(owner, repo, branch, reposSetStatusCheckContextsRequest, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set status check contexts (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetStatusCheckContextsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-status-check-contexts">Set status check contexts Documentation</a>
     */
    public okhttp3.Call reposSetStatusCheckContextsAsync(String owner, String repo, String branch, ReposSetStatusCheckContextsRequest reposSetStatusCheckContextsRequest, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposSetStatusCheckContextsValidateBeforeCall(owner, repo, branch, reposSetStatusCheckContextsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposSetTeamAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-team-access-restrictions">Set team access restrictions Documentation</a>
     */
    public okhttp3.Call reposSetTeamAccessRestrictionsCall(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetTeamAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposSetTeamAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposSetTeamAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposSetTeamAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposSetTeamAccessRestrictions(Async)");
        }

        return reposSetTeamAccessRestrictionsCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, _callback);

    }

    /**
     * Set team access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | &#x60;array&#x60; | The teams that can have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-team-access-restrictions">Set team access restrictions Documentation</a>
     */
    public List<Team> reposSetTeamAccessRestrictions(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<Team>> localVarResp = reposSetTeamAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetTeamAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Set team access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | &#x60;array&#x60; | The teams that can have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-team-access-restrictions">Set team access restrictions Documentation</a>
     */
    public ApiResponse<List<Team>> reposSetTeamAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposSetTeamAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set team access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.  | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | &#x60;array&#x60; | The teams that can have push access. Use the team&#39;s &#x60;slug&#x60;. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetTeamAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-team-access-restrictions">Set team access restrictions Documentation</a>
     */
    public okhttp3.Call reposSetTeamAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetTeamAccessRestrictionsRequest reposSetTeamAccessRestrictionsRequest, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposSetTeamAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetTeamAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposSetUserAccessRestrictions
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-user-access-restrictions">Set user access restrictions Documentation</a>
     */
    public okhttp3.Call reposSetUserAccessRestrictionsCall(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposSetUserAccessRestrictionsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposSetUserAccessRestrictionsValidateBeforeCall(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposSetUserAccessRestrictions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposSetUserAccessRestrictions(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposSetUserAccessRestrictions(Async)");
        }

        return reposSetUserAccessRestrictionsCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, _callback);

    }

    /**
     * Set user access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-user-access-restrictions">Set user access restrictions Documentation</a>
     */
    public List<SimpleUser> reposSetUserAccessRestrictions(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = reposSetUserAccessRestrictionsWithHttpInfo(owner, repo, branch, reposSetUserAccessRestrictionsRequest);
        return localVarResp.getData();
    }

    /**
     * Set user access restrictions
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-user-access-restrictions">Set user access restrictions Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> reposSetUserAccessRestrictionsWithHttpInfo(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest) throws ApiException {
        okhttp3.Call localVarCall = reposSetUserAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set user access restrictions (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposSetUserAccessRestrictionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#set-user-access-restrictions">Set user access restrictions Documentation</a>
     */
    public okhttp3.Call reposSetUserAccessRestrictionsAsync(String owner, String repo, String branch, ReposSetUserAccessRestrictionsRequest reposSetUserAccessRestrictionsRequest, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposSetUserAccessRestrictionsValidateBeforeCall(owner, repo, branch, reposSetUserAccessRestrictionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposTestPushWebhook
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#test-the-push-repository-webhook">Test the push repository webhook Documentation</a>
     */
    public okhttp3.Call reposTestPushWebhookCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{hook_id}/tests"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposTestPushWebhookValidateBeforeCall(String owner, String repo, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposTestPushWebhook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposTestPushWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling reposTestPushWebhook(Async)");
        }

        return reposTestPushWebhookCall(owner, repo, hookId, _callback);

    }

    /**
     * Test the push repository webhook
     * This will trigger the hook with the latest push to the current repository if the hook is subscribed to &#x60;push&#x60; events. If the hook is not subscribed to &#x60;push&#x60; events, the server will respond with 204 but no test POST will be generated.  **Note**: Previously &#x60;/repos/:owner/:repo/hooks/:hook_id/test&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#test-the-push-repository-webhook">Test the push repository webhook Documentation</a>
     */
    public void reposTestPushWebhook(String owner, String repo, Integer hookId) throws ApiException {
        reposTestPushWebhookWithHttpInfo(owner, repo, hookId);
    }

    /**
     * Test the push repository webhook
     * This will trigger the hook with the latest push to the current repository if the hook is subscribed to &#x60;push&#x60; events. If the hook is not subscribed to &#x60;push&#x60; events, the server will respond with 204 but no test POST will be generated.  **Note**: Previously &#x60;/repos/:owner/:repo/hooks/:hook_id/test&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#test-the-push-repository-webhook">Test the push repository webhook Documentation</a>
     */
    public ApiResponse<Void> reposTestPushWebhookWithHttpInfo(String owner, String repo, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = reposTestPushWebhookValidateBeforeCall(owner, repo, hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Test the push repository webhook (asynchronously)
     * This will trigger the hook with the latest push to the current repository if the hook is subscribed to &#x60;push&#x60; events. If the hook is not subscribed to &#x60;push&#x60; events, the server will respond with 204 but no test POST will be generated.  **Note**: Previously &#x60;/repos/:owner/:repo/hooks/:hook_id/test&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#test-the-push-repository-webhook">Test the push repository webhook Documentation</a>
     */
    public okhttp3.Call reposTestPushWebhookAsync(String owner, String repo, Integer hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposTestPushWebhookValidateBeforeCall(owner, repo, hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposTransfer
     * @param owner  (required)
     * @param repo  (required)
     * @param reposTransferRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#transfer-a-repository">Transfer a repository Documentation</a>
     */
    public okhttp3.Call reposTransferCall(String owner, String repo, ReposTransferRequest reposTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposTransferRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/transfer"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposTransferValidateBeforeCall(String owner, String repo, ReposTransferRequest reposTransferRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposTransfer(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposTransfer(Async)");
        }

        // verify the required parameter 'reposTransferRequest' is set
        if (reposTransferRequest == null) {
            throw new ApiException("Missing the required parameter 'reposTransferRequest' when calling reposTransfer(Async)");
        }

        return reposTransferCall(owner, repo, reposTransferRequest, _callback);

    }

    /**
     * Transfer a repository
     * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original &#x60;owner&#x60;, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposTransferRequest  (required)
     * @return MinimalRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#transfer-a-repository">Transfer a repository Documentation</a>
     */
    public MinimalRepository reposTransfer(String owner, String repo, ReposTransferRequest reposTransferRequest) throws ApiException {
        ApiResponse<MinimalRepository> localVarResp = reposTransferWithHttpInfo(owner, repo, reposTransferRequest);
        return localVarResp.getData();
    }

    /**
     * Transfer a repository
     * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original &#x60;owner&#x60;, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposTransferRequest  (required)
     * @return ApiResponse&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#transfer-a-repository">Transfer a repository Documentation</a>
     */
    public ApiResponse<MinimalRepository> reposTransferWithHttpInfo(String owner, String repo, ReposTransferRequest reposTransferRequest) throws ApiException {
        okhttp3.Call localVarCall = reposTransferValidateBeforeCall(owner, repo, reposTransferRequest, null);
        Type localVarReturnType = new TypeToken<MinimalRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer a repository (asynchronously)
     * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original &#x60;owner&#x60;, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposTransferRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#transfer-a-repository">Transfer a repository Documentation</a>
     */
    public okhttp3.Call reposTransferAsync(String owner, String repo, ReposTransferRequest reposTransferRequest, final ApiCallback<MinimalRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposTransferValidateBeforeCall(owner, repo, reposTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<MinimalRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdate
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos/#update-a-repository">Update a repository Documentation</a>
     */
    public okhttp3.Call reposUpdateCall(String owner, String repo, ReposUpdateRequest reposUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateValidateBeforeCall(String owner, String repo, ReposUpdateRequest reposUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdate(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdate(Async)");
        }

        return reposUpdateCall(owner, repo, reposUpdateRequest, _callback);

    }

    /**
     * Update a repository
     * **Note**: To edit a repository&#39;s topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#replace-all-repository-topics) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateRequest  (optional)
     * @return FullRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos/#update-a-repository">Update a repository Documentation</a>
     */
    public FullRepository reposUpdate(String owner, String repo, ReposUpdateRequest reposUpdateRequest) throws ApiException {
        ApiResponse<FullRepository> localVarResp = reposUpdateWithHttpInfo(owner, repo, reposUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a repository
     * **Note**: To edit a repository&#39;s topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#replace-all-repository-topics) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateRequest  (optional)
     * @return ApiResponse&lt;FullRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos/#update-a-repository">Update a repository Documentation</a>
     */
    public ApiResponse<FullRepository> reposUpdateWithHttpInfo(String owner, String repo, ReposUpdateRequest reposUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateValidateBeforeCall(owner, repo, reposUpdateRequest, null);
        Type localVarReturnType = new TypeToken<FullRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a repository (asynchronously)
     * **Note**: To edit a repository&#39;s topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#replace-all-repository-topics) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos/#update-a-repository">Update a repository Documentation</a>
     */
    public okhttp3.Call reposUpdateAsync(String owner, String repo, ReposUpdateRequest reposUpdateRequest, final ApiCallback<FullRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateValidateBeforeCall(owner, repo, reposUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<FullRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateBranchProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateBranchProtectionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-branch-protection">Update branch protection Documentation</a>
     */
    public okhttp3.Call reposUpdateBranchProtectionCall(String owner, String repo, String branch, ReposUpdateBranchProtectionRequest reposUpdateBranchProtectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateBranchProtectionRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateBranchProtectionValidateBeforeCall(String owner, String repo, String branch, ReposUpdateBranchProtectionRequest reposUpdateBranchProtectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateBranchProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateBranchProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposUpdateBranchProtection(Async)");
        }

        // verify the required parameter 'reposUpdateBranchProtectionRequest' is set
        if (reposUpdateBranchProtectionRequest == null) {
            throw new ApiException("Missing the required parameter 'reposUpdateBranchProtectionRequest' when calling reposUpdateBranchProtection(Async)");
        }

        return reposUpdateBranchProtectionCall(owner, repo, branch, reposUpdateBranchProtectionRequest, _callback);

    }

    /**
     * Update branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Protecting a branch requires admin or owner permissions to the repository.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.  **Note**: The list of users, apps, and teams in total is limited to 100 items.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateBranchProtectionRequest  (required)
     * @return ProtectedBranch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-branch-protection">Update branch protection Documentation</a>
     */
    public ProtectedBranch reposUpdateBranchProtection(String owner, String repo, String branch, ReposUpdateBranchProtectionRequest reposUpdateBranchProtectionRequest) throws ApiException {
        ApiResponse<ProtectedBranch> localVarResp = reposUpdateBranchProtectionWithHttpInfo(owner, repo, branch, reposUpdateBranchProtectionRequest);
        return localVarResp.getData();
    }

    /**
     * Update branch protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Protecting a branch requires admin or owner permissions to the repository.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.  **Note**: The list of users, apps, and teams in total is limited to 100 items.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateBranchProtectionRequest  (required)
     * @return ApiResponse&lt;ProtectedBranch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-branch-protection">Update branch protection Documentation</a>
     */
    public ApiResponse<ProtectedBranch> reposUpdateBranchProtectionWithHttpInfo(String owner, String repo, String branch, ReposUpdateBranchProtectionRequest reposUpdateBranchProtectionRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateBranchProtectionValidateBeforeCall(owner, repo, branch, reposUpdateBranchProtectionRequest, null);
        Type localVarReturnType = new TypeToken<ProtectedBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update branch protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Protecting a branch requires admin or owner permissions to the repository.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.  **Note**: The list of users, apps, and teams in total is limited to 100 items.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateBranchProtectionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-branch-protection">Update branch protection Documentation</a>
     */
    public okhttp3.Call reposUpdateBranchProtectionAsync(String owner, String repo, String branch, ReposUpdateBranchProtectionRequest reposUpdateBranchProtectionRequest, final ApiCallback<ProtectedBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateBranchProtectionValidateBeforeCall(owner, repo, branch, reposUpdateBranchProtectionRequest, _callback);
        Type localVarReturnType = new TypeToken<ProtectedBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateCommitComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reposUpdateCommitCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-commit-comment">Update a commit comment Documentation</a>
     */
    public okhttp3.Call reposUpdateCommitCommentCall(String owner, String repo, Integer commentId, ReposUpdateCommitCommentRequest reposUpdateCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateCommitCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, ReposUpdateCommitCommentRequest reposUpdateCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reposUpdateCommitComment(Async)");
        }

        // verify the required parameter 'reposUpdateCommitCommentRequest' is set
        if (reposUpdateCommitCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reposUpdateCommitCommentRequest' when calling reposUpdateCommitComment(Async)");
        }

        return reposUpdateCommitCommentCall(owner, repo, commentId, reposUpdateCommitCommentRequest, _callback);

    }

    /**
     * Update a commit comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reposUpdateCommitCommentRequest  (required)
     * @return CommitComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-commit-comment">Update a commit comment Documentation</a>
     */
    public CommitComment reposUpdateCommitComment(String owner, String repo, Integer commentId, ReposUpdateCommitCommentRequest reposUpdateCommitCommentRequest) throws ApiException {
        ApiResponse<CommitComment> localVarResp = reposUpdateCommitCommentWithHttpInfo(owner, repo, commentId, reposUpdateCommitCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Update a commit comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reposUpdateCommitCommentRequest  (required)
     * @return ApiResponse&lt;CommitComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-commit-comment">Update a commit comment Documentation</a>
     */
    public ApiResponse<CommitComment> reposUpdateCommitCommentWithHttpInfo(String owner, String repo, Integer commentId, ReposUpdateCommitCommentRequest reposUpdateCommitCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateCommitCommentValidateBeforeCall(owner, repo, commentId, reposUpdateCommitCommentRequest, null);
        Type localVarReturnType = new TypeToken<CommitComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a commit comment (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reposUpdateCommitCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-commit-comment">Update a commit comment Documentation</a>
     */
    public okhttp3.Call reposUpdateCommitCommentAsync(String owner, String repo, Integer commentId, ReposUpdateCommitCommentRequest reposUpdateCommitCommentRequest, final ApiCallback<CommitComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateCommitCommentValidateBeforeCall(owner, repo, commentId, reposUpdateCommitCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<CommitComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateInformationAboutPagesSite
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateInformationAboutPagesSiteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-information-about-a-github-pages-site">Update information about a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposUpdateInformationAboutPagesSiteCall(String owner, String repo, ReposUpdateInformationAboutPagesSiteRequest reposUpdateInformationAboutPagesSiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateInformationAboutPagesSiteRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pages"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateInformationAboutPagesSiteValidateBeforeCall(String owner, String repo, ReposUpdateInformationAboutPagesSiteRequest reposUpdateInformationAboutPagesSiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateInformationAboutPagesSite(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateInformationAboutPagesSite(Async)");
        }

        // verify the required parameter 'reposUpdateInformationAboutPagesSiteRequest' is set
        if (reposUpdateInformationAboutPagesSiteRequest == null) {
            throw new ApiException("Missing the required parameter 'reposUpdateInformationAboutPagesSiteRequest' when calling reposUpdateInformationAboutPagesSite(Async)");
        }

        return reposUpdateInformationAboutPagesSiteCall(owner, repo, reposUpdateInformationAboutPagesSiteRequest, _callback);

    }

    /**
     * Update information about a GitHub Enterprise Server Pages site
     * Updates information for a GitHub Enterprise Server Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateInformationAboutPagesSiteRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-information-about-a-github-pages-site">Update information about a GitHub Enterprise Server Pages site Documentation</a>
     */
    public void reposUpdateInformationAboutPagesSite(String owner, String repo, ReposUpdateInformationAboutPagesSiteRequest reposUpdateInformationAboutPagesSiteRequest) throws ApiException {
        reposUpdateInformationAboutPagesSiteWithHttpInfo(owner, repo, reposUpdateInformationAboutPagesSiteRequest);
    }

    /**
     * Update information about a GitHub Enterprise Server Pages site
     * Updates information for a GitHub Enterprise Server Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateInformationAboutPagesSiteRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-information-about-a-github-pages-site">Update information about a GitHub Enterprise Server Pages site Documentation</a>
     */
    public ApiResponse<Void> reposUpdateInformationAboutPagesSiteWithHttpInfo(String owner, String repo, ReposUpdateInformationAboutPagesSiteRequest reposUpdateInformationAboutPagesSiteRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateInformationAboutPagesSiteValidateBeforeCall(owner, repo, reposUpdateInformationAboutPagesSiteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update information about a GitHub Enterprise Server Pages site (asynchronously)
     * Updates information for a GitHub Enterprise Server Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
     * @param owner  (required)
     * @param repo  (required)
     * @param reposUpdateInformationAboutPagesSiteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-information-about-a-github-pages-site">Update information about a GitHub Enterprise Server Pages site Documentation</a>
     */
    public okhttp3.Call reposUpdateInformationAboutPagesSiteAsync(String owner, String repo, ReposUpdateInformationAboutPagesSiteRequest reposUpdateInformationAboutPagesSiteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateInformationAboutPagesSiteValidateBeforeCall(owner, repo, reposUpdateInformationAboutPagesSiteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateInvitation
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @param reposUpdateInvitationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-invitation">Update a repository invitation Documentation</a>
     */
    public okhttp3.Call reposUpdateInvitationCall(String owner, String repo, Integer invitationId, ReposUpdateInvitationRequest reposUpdateInvitationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateInvitationRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/invitations/{invitation_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "invitation_id" + "}", localVarApiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateInvitationValidateBeforeCall(String owner, String repo, Integer invitationId, ReposUpdateInvitationRequest reposUpdateInvitationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateInvitation(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateInvitation(Async)");
        }

        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling reposUpdateInvitation(Async)");
        }

        return reposUpdateInvitationCall(owner, repo, invitationId, reposUpdateInvitationRequest, _callback);

    }

    /**
     * Update a repository invitation
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @param reposUpdateInvitationRequest  (optional)
     * @return RepositoryInvitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-invitation">Update a repository invitation Documentation</a>
     */
    public RepositoryInvitation reposUpdateInvitation(String owner, String repo, Integer invitationId, ReposUpdateInvitationRequest reposUpdateInvitationRequest) throws ApiException {
        ApiResponse<RepositoryInvitation> localVarResp = reposUpdateInvitationWithHttpInfo(owner, repo, invitationId, reposUpdateInvitationRequest);
        return localVarResp.getData();
    }

    /**
     * Update a repository invitation
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @param reposUpdateInvitationRequest  (optional)
     * @return ApiResponse&lt;RepositoryInvitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-invitation">Update a repository invitation Documentation</a>
     */
    public ApiResponse<RepositoryInvitation> reposUpdateInvitationWithHttpInfo(String owner, String repo, Integer invitationId, ReposUpdateInvitationRequest reposUpdateInvitationRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateInvitationValidateBeforeCall(owner, repo, invitationId, reposUpdateInvitationRequest, null);
        Type localVarReturnType = new TypeToken<RepositoryInvitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a repository invitation (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param invitationId invitation_id parameter (required)
     * @param reposUpdateInvitationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-invitation">Update a repository invitation Documentation</a>
     */
    public okhttp3.Call reposUpdateInvitationAsync(String owner, String repo, Integer invitationId, ReposUpdateInvitationRequest reposUpdateInvitationRequest, final ApiCallback<RepositoryInvitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateInvitationValidateBeforeCall(owner, repo, invitationId, reposUpdateInvitationRequest, _callback);
        Type localVarReturnType = new TypeToken<RepositoryInvitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdatePullRequestReviewProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdatePullRequestReviewProtectionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-pull-request-review-protection">Update pull request review protection Documentation</a>
     */
    public okhttp3.Call reposUpdatePullRequestReviewProtectionCall(String owner, String repo, String branch, ReposUpdatePullRequestReviewProtectionRequest reposUpdatePullRequestReviewProtectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdatePullRequestReviewProtectionRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdatePullRequestReviewProtectionValidateBeforeCall(String owner, String repo, String branch, ReposUpdatePullRequestReviewProtectionRequest reposUpdatePullRequestReviewProtectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdatePullRequestReviewProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdatePullRequestReviewProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposUpdatePullRequestReviewProtection(Async)");
        }

        return reposUpdatePullRequestReviewProtectionCall(owner, repo, branch, reposUpdatePullRequestReviewProtectionRequest, _callback);

    }

    /**
     * Update pull request review protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdatePullRequestReviewProtectionRequest  (optional)
     * @return ProtectedBranchPullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-pull-request-review-protection">Update pull request review protection Documentation</a>
     */
    public ProtectedBranchPullRequestReview reposUpdatePullRequestReviewProtection(String owner, String repo, String branch, ReposUpdatePullRequestReviewProtectionRequest reposUpdatePullRequestReviewProtectionRequest) throws ApiException {
        ApiResponse<ProtectedBranchPullRequestReview> localVarResp = reposUpdatePullRequestReviewProtectionWithHttpInfo(owner, repo, branch, reposUpdatePullRequestReviewProtectionRequest);
        return localVarResp.getData();
    }

    /**
     * Update pull request review protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdatePullRequestReviewProtectionRequest  (optional)
     * @return ApiResponse&lt;ProtectedBranchPullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-pull-request-review-protection">Update pull request review protection Documentation</a>
     */
    public ApiResponse<ProtectedBranchPullRequestReview> reposUpdatePullRequestReviewProtectionWithHttpInfo(String owner, String repo, String branch, ReposUpdatePullRequestReviewProtectionRequest reposUpdatePullRequestReviewProtectionRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdatePullRequestReviewProtectionValidateBeforeCall(owner, repo, branch, reposUpdatePullRequestReviewProtectionRequest, null);
        Type localVarReturnType = new TypeToken<ProtectedBranchPullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pull request review protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdatePullRequestReviewProtectionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-pull-request-review-protection">Update pull request review protection Documentation</a>
     */
    public okhttp3.Call reposUpdatePullRequestReviewProtectionAsync(String owner, String repo, String branch, ReposUpdatePullRequestReviewProtectionRequest reposUpdatePullRequestReviewProtectionRequest, final ApiCallback<ProtectedBranchPullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdatePullRequestReviewProtectionValidateBeforeCall(owner, repo, branch, reposUpdatePullRequestReviewProtectionRequest, _callback);
        Type localVarReturnType = new TypeToken<ProtectedBranchPullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateRelease
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param reposUpdateReleaseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release">Update a release Documentation</a>
     */
    public okhttp3.Call reposUpdateReleaseCall(String owner, String repo, Integer releaseId, ReposUpdateReleaseRequest reposUpdateReleaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateReleaseRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateReleaseValidateBeforeCall(String owner, String repo, Integer releaseId, ReposUpdateReleaseRequest reposUpdateReleaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateRelease(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reposUpdateRelease(Async)");
        }

        return reposUpdateReleaseCall(owner, repo, releaseId, reposUpdateReleaseRequest, _callback);

    }

    /**
     * Update a release
     * Users with push access to the repository can edit a release.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param reposUpdateReleaseRequest  (optional)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release">Update a release Documentation</a>
     */
    public Release reposUpdateRelease(String owner, String repo, Integer releaseId, ReposUpdateReleaseRequest reposUpdateReleaseRequest) throws ApiException {
        ApiResponse<Release> localVarResp = reposUpdateReleaseWithHttpInfo(owner, repo, releaseId, reposUpdateReleaseRequest);
        return localVarResp.getData();
    }

    /**
     * Update a release
     * Users with push access to the repository can edit a release.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param reposUpdateReleaseRequest  (optional)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release">Update a release Documentation</a>
     */
    public ApiResponse<Release> reposUpdateReleaseWithHttpInfo(String owner, String repo, Integer releaseId, ReposUpdateReleaseRequest reposUpdateReleaseRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateReleaseValidateBeforeCall(owner, repo, releaseId, reposUpdateReleaseRequest, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a release (asynchronously)
     * Users with push access to the repository can edit a release.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param reposUpdateReleaseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release">Update a release Documentation</a>
     */
    public okhttp3.Call reposUpdateReleaseAsync(String owner, String repo, Integer releaseId, ReposUpdateReleaseRequest reposUpdateReleaseRequest, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateReleaseValidateBeforeCall(owner, repo, releaseId, reposUpdateReleaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateReleaseAsset
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param reposUpdateReleaseAssetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release-asset">Update a release asset Documentation</a>
     */
    public okhttp3.Call reposUpdateReleaseAssetCall(String owner, String repo, Integer assetId, ReposUpdateReleaseAssetRequest reposUpdateReleaseAssetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateReleaseAssetRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/assets/{asset_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateReleaseAssetValidateBeforeCall(String owner, String repo, Integer assetId, ReposUpdateReleaseAssetRequest reposUpdateReleaseAssetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateReleaseAsset(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateReleaseAsset(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling reposUpdateReleaseAsset(Async)");
        }

        return reposUpdateReleaseAssetCall(owner, repo, assetId, reposUpdateReleaseAssetRequest, _callback);

    }

    /**
     * Update a release asset
     * Users with push access to the repository can edit a release asset.
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param reposUpdateReleaseAssetRequest  (optional)
     * @return ReleaseAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release-asset">Update a release asset Documentation</a>
     */
    public ReleaseAsset reposUpdateReleaseAsset(String owner, String repo, Integer assetId, ReposUpdateReleaseAssetRequest reposUpdateReleaseAssetRequest) throws ApiException {
        ApiResponse<ReleaseAsset> localVarResp = reposUpdateReleaseAssetWithHttpInfo(owner, repo, assetId, reposUpdateReleaseAssetRequest);
        return localVarResp.getData();
    }

    /**
     * Update a release asset
     * Users with push access to the repository can edit a release asset.
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param reposUpdateReleaseAssetRequest  (optional)
     * @return ApiResponse&lt;ReleaseAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release-asset">Update a release asset Documentation</a>
     */
    public ApiResponse<ReleaseAsset> reposUpdateReleaseAssetWithHttpInfo(String owner, String repo, Integer assetId, ReposUpdateReleaseAssetRequest reposUpdateReleaseAssetRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateReleaseAssetValidateBeforeCall(owner, repo, assetId, reposUpdateReleaseAssetRequest, null);
        Type localVarReturnType = new TypeToken<ReleaseAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a release asset (asynchronously)
     * Users with push access to the repository can edit a release asset.
     * @param owner  (required)
     * @param repo  (required)
     * @param assetId asset_id parameter (required)
     * @param reposUpdateReleaseAssetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-release-asset">Update a release asset Documentation</a>
     */
    public okhttp3.Call reposUpdateReleaseAssetAsync(String owner, String repo, Integer assetId, ReposUpdateReleaseAssetRequest reposUpdateReleaseAssetRequest, final ApiCallback<ReleaseAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateReleaseAssetValidateBeforeCall(owner, repo, assetId, reposUpdateReleaseAssetRequest, _callback);
        Type localVarReturnType = new TypeToken<ReleaseAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateStatusCheckProtection
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateStatusCheckProtectionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-status-check-potection">Update status check protection Documentation</a>
     */
    public okhttp3.Call reposUpdateStatusCheckProtectionCall(String owner, String repo, String branch, ReposUpdateStatusCheckProtectionRequest reposUpdateStatusCheckProtectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateStatusCheckProtectionRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateStatusCheckProtectionValidateBeforeCall(String owner, String repo, String branch, ReposUpdateStatusCheckProtectionRequest reposUpdateStatusCheckProtectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateStatusCheckProtection(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateStatusCheckProtection(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling reposUpdateStatusCheckProtection(Async)");
        }

        return reposUpdateStatusCheckProtectionCall(owner, repo, branch, reposUpdateStatusCheckProtectionRequest, _callback);

    }

    /**
     * Update status check protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateStatusCheckProtectionRequest  (optional)
     * @return StatusCheckPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-status-check-potection">Update status check protection Documentation</a>
     */
    public StatusCheckPolicy reposUpdateStatusCheckProtection(String owner, String repo, String branch, ReposUpdateStatusCheckProtectionRequest reposUpdateStatusCheckProtectionRequest) throws ApiException {
        ApiResponse<StatusCheckPolicy> localVarResp = reposUpdateStatusCheckProtectionWithHttpInfo(owner, repo, branch, reposUpdateStatusCheckProtectionRequest);
        return localVarResp.getData();
    }

    /**
     * Update status check protection
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateStatusCheckProtectionRequest  (optional)
     * @return ApiResponse&lt;StatusCheckPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-status-check-potection">Update status check protection Documentation</a>
     */
    public ApiResponse<StatusCheckPolicy> reposUpdateStatusCheckProtectionWithHttpInfo(String owner, String repo, String branch, ReposUpdateStatusCheckProtectionRequest reposUpdateStatusCheckProtectionRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateStatusCheckProtectionValidateBeforeCall(owner, repo, branch, reposUpdateStatusCheckProtectionRequest, null);
        Type localVarReturnType = new TypeToken<StatusCheckPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update status check protection (asynchronously)
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     * @param owner  (required)
     * @param repo  (required)
     * @param branch The name of the branch. (required)
     * @param reposUpdateStatusCheckProtectionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-status-check-potection">Update status check protection Documentation</a>
     */
    public okhttp3.Call reposUpdateStatusCheckProtectionAsync(String owner, String repo, String branch, ReposUpdateStatusCheckProtectionRequest reposUpdateStatusCheckProtectionRequest, final ApiCallback<StatusCheckPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateStatusCheckProtectionValidateBeforeCall(owner, repo, branch, reposUpdateStatusCheckProtectionRequest, _callback);
        Type localVarReturnType = new TypeToken<StatusCheckPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUpdateWebhook
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param reposUpdateWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-webhook">Update a repository webhook Documentation</a>
     */
    public okhttp3.Call reposUpdateWebhookCall(String owner, String repo, Integer hookId, ReposUpdateWebhookRequest reposUpdateWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reposUpdateWebhookRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/hooks/{hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUpdateWebhookValidateBeforeCall(String owner, String repo, Integer hookId, ReposUpdateWebhookRequest reposUpdateWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUpdateWebhook(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUpdateWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling reposUpdateWebhook(Async)");
        }

        // verify the required parameter 'reposUpdateWebhookRequest' is set
        if (reposUpdateWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'reposUpdateWebhookRequest' when calling reposUpdateWebhook(Async)");
        }

        return reposUpdateWebhookCall(owner, repo, hookId, reposUpdateWebhookRequest, _callback);

    }

    /**
     * Update a repository webhook
     * Updates a webhook configured in a repository. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param reposUpdateWebhookRequest  (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-webhook">Update a repository webhook Documentation</a>
     */
    public Hook reposUpdateWebhook(String owner, String repo, Integer hookId, ReposUpdateWebhookRequest reposUpdateWebhookRequest) throws ApiException {
        ApiResponse<Hook> localVarResp = reposUpdateWebhookWithHttpInfo(owner, repo, hookId, reposUpdateWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Update a repository webhook
     * Updates a webhook configured in a repository. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param reposUpdateWebhookRequest  (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-webhook">Update a repository webhook Documentation</a>
     */
    public ApiResponse<Hook> reposUpdateWebhookWithHttpInfo(String owner, String repo, Integer hookId, ReposUpdateWebhookRequest reposUpdateWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = reposUpdateWebhookValidateBeforeCall(owner, repo, hookId, reposUpdateWebhookRequest, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a repository webhook (asynchronously)
     * Updates a webhook configured in a repository. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param hookId  (required)
     * @param reposUpdateWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#update-a-repository-webhook">Update a repository webhook Documentation</a>
     */
    public okhttp3.Call reposUpdateWebhookAsync(String owner, String repo, Integer hookId, ReposUpdateWebhookRequest reposUpdateWebhookRequest, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUpdateWebhookValidateBeforeCall(owner, repo, hookId, reposUpdateWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reposUploadReleaseAsset
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param name  (required)
     * @param label  (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for successful upload </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Response if you upload an asset with the same filename as another uploaded asset </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#upload-a-release-asset">Upload a release asset Documentation</a>
     */
    public okhttp3.Call reposUploadReleaseAssetCall(String owner, String repo, Integer releaseId, String name, String label, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{origin}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}/assets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reposUploadReleaseAssetValidateBeforeCall(String owner, String repo, Integer releaseId, String name, String label, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reposUploadReleaseAsset(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reposUploadReleaseAsset(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reposUploadReleaseAsset(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling reposUploadReleaseAsset(Async)");
        }

        return reposUploadReleaseAssetCall(owner, repo, releaseId, name, label, body, _callback);

    }

    /**
     * Upload a release asset
     * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the &#x60;upload_url&#x60; returned in the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-release) to upload a release asset.  You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.  Most libraries will set the required &#x60;Content-Length&#x60; header automatically. Use the required &#x60;Content-Type&#x60; header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:   &#x60;application/zip&#x60;  GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you&#39;ll still need to pass your authentication to be able to upload an asset.  When an upstream failure occurs, you will receive a &#x60;502 Bad Gateway&#x60; status. This may leave an empty asset with a state of &#x60;starter&#x60;. It can be safely deleted.  **Notes:** *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \&quot;[List assets for a release](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-assets-for-a-release)\&quot; endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api). *   If you upload an asset with the same filename as another uploaded asset, you&#39;ll receive an error and must delete the old file before you can re-upload the new asset.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param name  (required)
     * @param label  (optional)
     * @param body  (optional)
     * @return ReleaseAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for successful upload </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Response if you upload an asset with the same filename as another uploaded asset </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#upload-a-release-asset">Upload a release asset Documentation</a>
     */
    public ReleaseAsset reposUploadReleaseAsset(String owner, String repo, Integer releaseId, String name, String label, String body) throws ApiException {
        ApiResponse<ReleaseAsset> localVarResp = reposUploadReleaseAssetWithHttpInfo(owner, repo, releaseId, name, label, body);
        return localVarResp.getData();
    }

    /**
     * Upload a release asset
     * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the &#x60;upload_url&#x60; returned in the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-release) to upload a release asset.  You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.  Most libraries will set the required &#x60;Content-Length&#x60; header automatically. Use the required &#x60;Content-Type&#x60; header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:   &#x60;application/zip&#x60;  GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you&#39;ll still need to pass your authentication to be able to upload an asset.  When an upstream failure occurs, you will receive a &#x60;502 Bad Gateway&#x60; status. This may leave an empty asset with a state of &#x60;starter&#x60;. It can be safely deleted.  **Notes:** *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \&quot;[List assets for a release](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-assets-for-a-release)\&quot; endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api). *   If you upload an asset with the same filename as another uploaded asset, you&#39;ll receive an error and must delete the old file before you can re-upload the new asset.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param name  (required)
     * @param label  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;ReleaseAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for successful upload </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Response if you upload an asset with the same filename as another uploaded asset </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#upload-a-release-asset">Upload a release asset Documentation</a>
     */
    public ApiResponse<ReleaseAsset> reposUploadReleaseAssetWithHttpInfo(String owner, String repo, Integer releaseId, String name, String label, String body) throws ApiException {
        okhttp3.Call localVarCall = reposUploadReleaseAssetValidateBeforeCall(owner, repo, releaseId, name, label, body, null);
        Type localVarReturnType = new TypeToken<ReleaseAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a release asset (asynchronously)
     * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@2.22/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the &#x60;upload_url&#x60; returned in the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#create-a-release) to upload a release asset.  You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.  Most libraries will set the required &#x60;Content-Length&#x60; header automatically. Use the required &#x60;Content-Type&#x60; header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:   &#x60;application/zip&#x60;  GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you&#39;ll still need to pass your authentication to be able to upload an asset.  When an upstream failure occurs, you will receive a &#x60;502 Bad Gateway&#x60; status. This may leave an empty asset with a state of &#x60;starter&#x60;. It can be safely deleted.  **Notes:** *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \&quot;[List assets for a release](https://docs.github.com/enterprise-server@2.22/rest/reference/repos#list-assets-for-a-release)\&quot; endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api). *   If you upload an asset with the same filename as another uploaded asset, you&#39;ll receive an error and must delete the old file before you can re-upload the new asset.
     * @param owner  (required)
     * @param repo  (required)
     * @param releaseId release_id parameter (required)
     * @param name  (required)
     * @param label  (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response for successful upload </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Response if you upload an asset with the same filename as another uploaded asset </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.22/rest/reference/repos#upload-a-release-asset">Upload a release asset Documentation</a>
     */
    public okhttp3.Call reposUploadReleaseAssetAsync(String owner, String repo, Integer releaseId, String name, String label, String body, final ApiCallback<ReleaseAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = reposUploadReleaseAssetValidateBeforeCall(owner, repo, releaseId, name, label, body, _callback);
        Type localVarReturnType = new TypeToken<ReleaseAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
