/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstallationGhes2Permissions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:18.265607-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstallationGhes2Permissions {
  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private String checks;

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private String contents;

  public static final String SERIALIZED_NAME_DEPLOYMENTS = "deployments";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS)
  private String deployments;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private String issues;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_ORGANIZATION_ADMINISTRATION = "organization_administration";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ADMINISTRATION)
  private String organizationAdministration;

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pull_requests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  private String pullRequests;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private String statuses;

  public InstallationGhes2Permissions() {
  }

  public InstallationGhes2Permissions checks(String checks) {
    this.checks = checks;
    return this;
  }

  /**
   * Get checks
   * @return checks
   */
  @javax.annotation.Nullable
  public String getChecks() {
    return checks;
  }

  public void setChecks(String checks) {
    this.checks = checks;
  }


  public InstallationGhes2Permissions contents(String contents) {
    this.contents = contents;
    return this;
  }

  /**
   * Get contents
   * @return contents
   */
  @javax.annotation.Nullable
  public String getContents() {
    return contents;
  }

  public void setContents(String contents) {
    this.contents = contents;
  }


  public InstallationGhes2Permissions deployments(String deployments) {
    this.deployments = deployments;
    return this;
  }

  /**
   * Get deployments
   * @return deployments
   */
  @javax.annotation.Nullable
  public String getDeployments() {
    return deployments;
  }

  public void setDeployments(String deployments) {
    this.deployments = deployments;
  }


  public InstallationGhes2Permissions issues(String issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Get issues
   * @return issues
   */
  @javax.annotation.Nullable
  public String getIssues() {
    return issues;
  }

  public void setIssues(String issues) {
    this.issues = issues;
  }


  public InstallationGhes2Permissions metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public InstallationGhes2Permissions organizationAdministration(String organizationAdministration) {
    this.organizationAdministration = organizationAdministration;
    return this;
  }

  /**
   * Get organizationAdministration
   * @return organizationAdministration
   */
  @javax.annotation.Nullable
  public String getOrganizationAdministration() {
    return organizationAdministration;
  }

  public void setOrganizationAdministration(String organizationAdministration) {
    this.organizationAdministration = organizationAdministration;
  }


  public InstallationGhes2Permissions pullRequests(String pullRequests) {
    this.pullRequests = pullRequests;
    return this;
  }

  /**
   * Get pullRequests
   * @return pullRequests
   */
  @javax.annotation.Nullable
  public String getPullRequests() {
    return pullRequests;
  }

  public void setPullRequests(String pullRequests) {
    this.pullRequests = pullRequests;
  }


  public InstallationGhes2Permissions statuses(String statuses) {
    this.statuses = statuses;
    return this;
  }

  /**
   * Get statuses
   * @return statuses
   */
  @javax.annotation.Nullable
  public String getStatuses() {
    return statuses;
  }

  public void setStatuses(String statuses) {
    this.statuses = statuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstallationGhes2Permissions installationGhes2Permissions = (InstallationGhes2Permissions) o;
    return Objects.equals(this.checks, installationGhes2Permissions.checks) &&
        Objects.equals(this.contents, installationGhes2Permissions.contents) &&
        Objects.equals(this.deployments, installationGhes2Permissions.deployments) &&
        Objects.equals(this.issues, installationGhes2Permissions.issues) &&
        Objects.equals(this.metadata, installationGhes2Permissions.metadata) &&
        Objects.equals(this.organizationAdministration, installationGhes2Permissions.organizationAdministration) &&
        Objects.equals(this.pullRequests, installationGhes2Permissions.pullRequests) &&
        Objects.equals(this.statuses, installationGhes2Permissions.statuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checks, contents, deployments, issues, metadata, organizationAdministration, pullRequests, statuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstallationGhes2Permissions {\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    deployments: ").append(toIndentedString(deployments)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    organizationAdministration: ").append(toIndentedString(organizationAdministration)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checks");
    openapiFields.add("contents");
    openapiFields.add("deployments");
    openapiFields.add("issues");
    openapiFields.add("metadata");
    openapiFields.add("organization_administration");
    openapiFields.add("pull_requests");
    openapiFields.add("statuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstallationGhes2Permissions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstallationGhes2Permissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstallationGhes2Permissions is not found in the empty JSON string", InstallationGhes2Permissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstallationGhes2Permissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallationGhes2Permissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checks") != null && !jsonObj.get("checks").isJsonNull()) && !jsonObj.get("checks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checks").toString()));
      }
      if ((jsonObj.get("contents") != null && !jsonObj.get("contents").isJsonNull()) && !jsonObj.get("contents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents").toString()));
      }
      if ((jsonObj.get("deployments") != null && !jsonObj.get("deployments").isJsonNull()) && !jsonObj.get("deployments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments").toString()));
      }
      if ((jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) && !jsonObj.get("issues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("organization_administration") != null && !jsonObj.get("organization_administration").isJsonNull()) && !jsonObj.get("organization_administration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_administration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_administration").toString()));
      }
      if ((jsonObj.get("pull_requests") != null && !jsonObj.get("pull_requests").isJsonNull()) && !jsonObj.get("pull_requests").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_requests` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pull_requests").toString()));
      }
      if ((jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) && !jsonObj.get("statuses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstallationGhes2Permissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstallationGhes2Permissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstallationGhes2Permissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstallationGhes2Permissions.class));

       return (TypeAdapter<T>) new TypeAdapter<InstallationGhes2Permissions>() {
           @Override
           public void write(JsonWriter out, InstallationGhes2Permissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstallationGhes2Permissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstallationGhes2Permissions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstallationGhes2Permissions
   * @throws IOException if the JSON string is invalid with respect to InstallationGhes2Permissions
   */
  public static InstallationGhes2Permissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstallationGhes2Permissions.class);
  }

  /**
   * Convert an instance of InstallationGhes2Permissions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

