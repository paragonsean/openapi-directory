/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PreReceiveHookEnvironment;
import org.openapitools.client.model.PreReceiveHookScriptRepository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PreReceiveHook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:18.265607-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PreReceiveHook {
  public static final String SERIALIZED_NAME_ALLOW_DOWNSTREAM_CONFIGURATION = "allow_downstream_configuration";
  @SerializedName(SERIALIZED_NAME_ALLOW_DOWNSTREAM_CONFIGURATION)
  private Boolean allowDownstreamConfiguration;

  public static final String SERIALIZED_NAME_ENFORCEMENT = "enforcement";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT)
  private String enforcement;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private PreReceiveHookEnvironment environment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_SCRIPT_REPOSITORY = "script_repository";
  @SerializedName(SERIALIZED_NAME_SCRIPT_REPOSITORY)
  private PreReceiveHookScriptRepository scriptRepository;

  public PreReceiveHook() {
  }

  public PreReceiveHook allowDownstreamConfiguration(Boolean allowDownstreamConfiguration) {
    this.allowDownstreamConfiguration = allowDownstreamConfiguration;
    return this;
  }

  /**
   * Get allowDownstreamConfiguration
   * @return allowDownstreamConfiguration
   */
  @javax.annotation.Nullable
  public Boolean getAllowDownstreamConfiguration() {
    return allowDownstreamConfiguration;
  }

  public void setAllowDownstreamConfiguration(Boolean allowDownstreamConfiguration) {
    this.allowDownstreamConfiguration = allowDownstreamConfiguration;
  }


  public PreReceiveHook enforcement(String enforcement) {
    this.enforcement = enforcement;
    return this;
  }

  /**
   * Get enforcement
   * @return enforcement
   */
  @javax.annotation.Nullable
  public String getEnforcement() {
    return enforcement;
  }

  public void setEnforcement(String enforcement) {
    this.enforcement = enforcement;
  }


  public PreReceiveHook environment(PreReceiveHookEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public PreReceiveHookEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(PreReceiveHookEnvironment environment) {
    this.environment = environment;
  }


  public PreReceiveHook id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PreReceiveHook name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PreReceiveHook script(String script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }


  public PreReceiveHook scriptRepository(PreReceiveHookScriptRepository scriptRepository) {
    this.scriptRepository = scriptRepository;
    return this;
  }

  /**
   * Get scriptRepository
   * @return scriptRepository
   */
  @javax.annotation.Nullable
  public PreReceiveHookScriptRepository getScriptRepository() {
    return scriptRepository;
  }

  public void setScriptRepository(PreReceiveHookScriptRepository scriptRepository) {
    this.scriptRepository = scriptRepository;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreReceiveHook preReceiveHook = (PreReceiveHook) o;
    return Objects.equals(this.allowDownstreamConfiguration, preReceiveHook.allowDownstreamConfiguration) &&
        Objects.equals(this.enforcement, preReceiveHook.enforcement) &&
        Objects.equals(this.environment, preReceiveHook.environment) &&
        Objects.equals(this.id, preReceiveHook.id) &&
        Objects.equals(this.name, preReceiveHook.name) &&
        Objects.equals(this.script, preReceiveHook.script) &&
        Objects.equals(this.scriptRepository, preReceiveHook.scriptRepository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowDownstreamConfiguration, enforcement, environment, id, name, script, scriptRepository);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreReceiveHook {\n");
    sb.append("    allowDownstreamConfiguration: ").append(toIndentedString(allowDownstreamConfiguration)).append("\n");
    sb.append("    enforcement: ").append(toIndentedString(enforcement)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    scriptRepository: ").append(toIndentedString(scriptRepository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_downstream_configuration");
    openapiFields.add("enforcement");
    openapiFields.add("environment");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("script");
    openapiFields.add("script_repository");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PreReceiveHook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PreReceiveHook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PreReceiveHook is not found in the empty JSON string", PreReceiveHook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PreReceiveHook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PreReceiveHook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("enforcement") != null && !jsonObj.get("enforcement").isJsonNull()) && !jsonObj.get("enforcement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcement").toString()));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        PreReceiveHookEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) && !jsonObj.get("script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script").toString()));
      }
      // validate the optional field `script_repository`
      if (jsonObj.get("script_repository") != null && !jsonObj.get("script_repository").isJsonNull()) {
        PreReceiveHookScriptRepository.validateJsonElement(jsonObj.get("script_repository"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PreReceiveHook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PreReceiveHook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PreReceiveHook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PreReceiveHook.class));

       return (TypeAdapter<T>) new TypeAdapter<PreReceiveHook>() {
           @Override
           public void write(JsonWriter out, PreReceiveHook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PreReceiveHook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PreReceiveHook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PreReceiveHook
   * @throws IOException if the JSON string is invalid with respect to PreReceiveHook
   */
  public static PreReceiveHook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PreReceiveHook.class);
  }

  /**
   * Convert an instance of PreReceiveHook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

