/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.NullableSimpleCommit;
import org.openapitools.client.model.PullRequestMinimal;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An invocation of a workflow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:18.265607-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowRun {
  public static final String SERIALIZED_NAME_ARTIFACTS_URL = "artifacts_url";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS_URL)
  private String artifactsUrl;

  public static final String SERIALIZED_NAME_CANCEL_URL = "cancel_url";
  @SerializedName(SERIALIZED_NAME_CANCEL_URL)
  private String cancelUrl;

  public static final String SERIALIZED_NAME_CHECK_SUITE_ID = "check_suite_id";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_ID)
  private Integer checkSuiteId;

  public static final String SERIALIZED_NAME_CHECK_SUITE_NODE_ID = "check_suite_node_id";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_NODE_ID)
  private String checkSuiteNodeId;

  public static final String SERIALIZED_NAME_CHECK_SUITE_URL = "check_suite_url";
  @SerializedName(SERIALIZED_NAME_CHECK_SUITE_URL)
  private String checkSuiteUrl;

  public static final String SERIALIZED_NAME_CONCLUSION = "conclusion";
  @SerializedName(SERIALIZED_NAME_CONCLUSION)
  private String conclusion;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_HEAD_BRANCH = "head_branch";
  @SerializedName(SERIALIZED_NAME_HEAD_BRANCH)
  private String headBranch;

  public static final String SERIALIZED_NAME_HEAD_COMMIT = "head_commit";
  @SerializedName(SERIALIZED_NAME_HEAD_COMMIT)
  private NullableSimpleCommit headCommit;

  public static final String SERIALIZED_NAME_HEAD_REPOSITORY = "head_repository";
  @SerializedName(SERIALIZED_NAME_HEAD_REPOSITORY)
  private MinimalRepository headRepository;

  public static final String SERIALIZED_NAME_HEAD_REPOSITORY_ID = "head_repository_id";
  @SerializedName(SERIALIZED_NAME_HEAD_REPOSITORY_ID)
  private Integer headRepositoryId;

  public static final String SERIALIZED_NAME_HEAD_SHA = "head_sha";
  @SerializedName(SERIALIZED_NAME_HEAD_SHA)
  private String headSha;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JOBS_URL = "jobs_url";
  @SerializedName(SERIALIZED_NAME_JOBS_URL)
  private String jobsUrl;

  public static final String SERIALIZED_NAME_LOGS_URL = "logs_url";
  @SerializedName(SERIALIZED_NAME_LOGS_URL)
  private String logsUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_PREVIOUS_ATTEMPT_URL = "previous_attempt_url";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ATTEMPT_URL)
  private String previousAttemptUrl;

  public static final String SERIALIZED_NAME_PULL_REQUESTS = "pull_requests";
  @SerializedName(SERIALIZED_NAME_PULL_REQUESTS)
  private List<PullRequestMinimal> pullRequests;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private MinimalRepository repository;

  public static final String SERIALIZED_NAME_RERUN_URL = "rerun_url";
  @SerializedName(SERIALIZED_NAME_RERUN_URL)
  private String rerunUrl;

  public static final String SERIALIZED_NAME_RUN_ATTEMPT = "run_attempt";
  @SerializedName(SERIALIZED_NAME_RUN_ATTEMPT)
  private Integer runAttempt;

  public static final String SERIALIZED_NAME_RUN_NUMBER = "run_number";
  @SerializedName(SERIALIZED_NAME_RUN_NUMBER)
  private Integer runNumber;

  public static final String SERIALIZED_NAME_RUN_STARTED_AT = "run_started_at";
  @SerializedName(SERIALIZED_NAME_RUN_STARTED_AT)
  private OffsetDateTime runStartedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflow_id";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private Integer workflowId;

  public static final String SERIALIZED_NAME_WORKFLOW_URL = "workflow_url";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_URL)
  private String workflowUrl;

  public WorkflowRun() {
  }

  public WorkflowRun artifactsUrl(String artifactsUrl) {
    this.artifactsUrl = artifactsUrl;
    return this;
  }

  /**
   * The URL to the artifacts for the workflow run.
   * @return artifactsUrl
   */
  @javax.annotation.Nonnull
  public String getArtifactsUrl() {
    return artifactsUrl;
  }

  public void setArtifactsUrl(String artifactsUrl) {
    this.artifactsUrl = artifactsUrl;
  }


  public WorkflowRun cancelUrl(String cancelUrl) {
    this.cancelUrl = cancelUrl;
    return this;
  }

  /**
   * The URL to cancel the workflow run.
   * @return cancelUrl
   */
  @javax.annotation.Nonnull
  public String getCancelUrl() {
    return cancelUrl;
  }

  public void setCancelUrl(String cancelUrl) {
    this.cancelUrl = cancelUrl;
  }


  public WorkflowRun checkSuiteId(Integer checkSuiteId) {
    this.checkSuiteId = checkSuiteId;
    return this;
  }

  /**
   * The ID of the associated check suite.
   * @return checkSuiteId
   */
  @javax.annotation.Nullable
  public Integer getCheckSuiteId() {
    return checkSuiteId;
  }

  public void setCheckSuiteId(Integer checkSuiteId) {
    this.checkSuiteId = checkSuiteId;
  }


  public WorkflowRun checkSuiteNodeId(String checkSuiteNodeId) {
    this.checkSuiteNodeId = checkSuiteNodeId;
    return this;
  }

  /**
   * The node ID of the associated check suite.
   * @return checkSuiteNodeId
   */
  @javax.annotation.Nullable
  public String getCheckSuiteNodeId() {
    return checkSuiteNodeId;
  }

  public void setCheckSuiteNodeId(String checkSuiteNodeId) {
    this.checkSuiteNodeId = checkSuiteNodeId;
  }


  public WorkflowRun checkSuiteUrl(String checkSuiteUrl) {
    this.checkSuiteUrl = checkSuiteUrl;
    return this;
  }

  /**
   * The URL to the associated check suite.
   * @return checkSuiteUrl
   */
  @javax.annotation.Nonnull
  public String getCheckSuiteUrl() {
    return checkSuiteUrl;
  }

  public void setCheckSuiteUrl(String checkSuiteUrl) {
    this.checkSuiteUrl = checkSuiteUrl;
  }


  public WorkflowRun conclusion(String conclusion) {
    this.conclusion = conclusion;
    return this;
  }

  /**
   * Get conclusion
   * @return conclusion
   */
  @javax.annotation.Nullable
  public String getConclusion() {
    return conclusion;
  }

  public void setConclusion(String conclusion) {
    this.conclusion = conclusion;
  }


  public WorkflowRun createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WorkflowRun event(String event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nonnull
  public String getEvent() {
    return event;
  }

  public void setEvent(String event) {
    this.event = event;
  }


  public WorkflowRun headBranch(String headBranch) {
    this.headBranch = headBranch;
    return this;
  }

  /**
   * Get headBranch
   * @return headBranch
   */
  @javax.annotation.Nullable
  public String getHeadBranch() {
    return headBranch;
  }

  public void setHeadBranch(String headBranch) {
    this.headBranch = headBranch;
  }


  public WorkflowRun headCommit(NullableSimpleCommit headCommit) {
    this.headCommit = headCommit;
    return this;
  }

  /**
   * Get headCommit
   * @return headCommit
   */
  @javax.annotation.Nullable
  public NullableSimpleCommit getHeadCommit() {
    return headCommit;
  }

  public void setHeadCommit(NullableSimpleCommit headCommit) {
    this.headCommit = headCommit;
  }


  public WorkflowRun headRepository(MinimalRepository headRepository) {
    this.headRepository = headRepository;
    return this;
  }

  /**
   * Get headRepository
   * @return headRepository
   */
  @javax.annotation.Nonnull
  public MinimalRepository getHeadRepository() {
    return headRepository;
  }

  public void setHeadRepository(MinimalRepository headRepository) {
    this.headRepository = headRepository;
  }


  public WorkflowRun headRepositoryId(Integer headRepositoryId) {
    this.headRepositoryId = headRepositoryId;
    return this;
  }

  /**
   * Get headRepositoryId
   * @return headRepositoryId
   */
  @javax.annotation.Nullable
  public Integer getHeadRepositoryId() {
    return headRepositoryId;
  }

  public void setHeadRepositoryId(Integer headRepositoryId) {
    this.headRepositoryId = headRepositoryId;
  }


  public WorkflowRun headSha(String headSha) {
    this.headSha = headSha;
    return this;
  }

  /**
   * The SHA of the head commit that points to the version of the worflow being run.
   * @return headSha
   */
  @javax.annotation.Nonnull
  public String getHeadSha() {
    return headSha;
  }

  public void setHeadSha(String headSha) {
    this.headSha = headSha;
  }


  public WorkflowRun htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public WorkflowRun id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the workflow run.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public WorkflowRun jobsUrl(String jobsUrl) {
    this.jobsUrl = jobsUrl;
    return this;
  }

  /**
   * The URL to the jobs for the workflow run.
   * @return jobsUrl
   */
  @javax.annotation.Nonnull
  public String getJobsUrl() {
    return jobsUrl;
  }

  public void setJobsUrl(String jobsUrl) {
    this.jobsUrl = jobsUrl;
  }


  public WorkflowRun logsUrl(String logsUrl) {
    this.logsUrl = logsUrl;
    return this;
  }

  /**
   * The URL to download the logs for the workflow run.
   * @return logsUrl
   */
  @javax.annotation.Nonnull
  public String getLogsUrl() {
    return logsUrl;
  }

  public void setLogsUrl(String logsUrl) {
    this.logsUrl = logsUrl;
  }


  public WorkflowRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the workflow run.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WorkflowRun nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public WorkflowRun previousAttemptUrl(String previousAttemptUrl) {
    this.previousAttemptUrl = previousAttemptUrl;
    return this;
  }

  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   * @return previousAttemptUrl
   */
  @javax.annotation.Nullable
  public String getPreviousAttemptUrl() {
    return previousAttemptUrl;
  }

  public void setPreviousAttemptUrl(String previousAttemptUrl) {
    this.previousAttemptUrl = previousAttemptUrl;
  }


  public WorkflowRun pullRequests(List<PullRequestMinimal> pullRequests) {
    this.pullRequests = pullRequests;
    return this;
  }

  public WorkflowRun addPullRequestsItem(PullRequestMinimal pullRequestsItem) {
    if (this.pullRequests == null) {
      this.pullRequests = new ArrayList<>();
    }
    this.pullRequests.add(pullRequestsItem);
    return this;
  }

  /**
   * Get pullRequests
   * @return pullRequests
   */
  @javax.annotation.Nullable
  public List<PullRequestMinimal> getPullRequests() {
    return pullRequests;
  }

  public void setPullRequests(List<PullRequestMinimal> pullRequests) {
    this.pullRequests = pullRequests;
  }


  public WorkflowRun repository(MinimalRepository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nonnull
  public MinimalRepository getRepository() {
    return repository;
  }

  public void setRepository(MinimalRepository repository) {
    this.repository = repository;
  }


  public WorkflowRun rerunUrl(String rerunUrl) {
    this.rerunUrl = rerunUrl;
    return this;
  }

  /**
   * The URL to rerun the workflow run.
   * @return rerunUrl
   */
  @javax.annotation.Nonnull
  public String getRerunUrl() {
    return rerunUrl;
  }

  public void setRerunUrl(String rerunUrl) {
    this.rerunUrl = rerunUrl;
  }


  public WorkflowRun runAttempt(Integer runAttempt) {
    this.runAttempt = runAttempt;
    return this;
  }

  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   * @return runAttempt
   */
  @javax.annotation.Nullable
  public Integer getRunAttempt() {
    return runAttempt;
  }

  public void setRunAttempt(Integer runAttempt) {
    this.runAttempt = runAttempt;
  }


  public WorkflowRun runNumber(Integer runNumber) {
    this.runNumber = runNumber;
    return this;
  }

  /**
   * The auto incrementing run number for the workflow run.
   * @return runNumber
   */
  @javax.annotation.Nonnull
  public Integer getRunNumber() {
    return runNumber;
  }

  public void setRunNumber(Integer runNumber) {
    this.runNumber = runNumber;
  }


  public WorkflowRun runStartedAt(OffsetDateTime runStartedAt) {
    this.runStartedAt = runStartedAt;
    return this;
  }

  /**
   * The start time of the latest run. Resets on re-run.
   * @return runStartedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRunStartedAt() {
    return runStartedAt;
  }

  public void setRunStartedAt(OffsetDateTime runStartedAt) {
    this.runStartedAt = runStartedAt;
  }


  public WorkflowRun status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public WorkflowRun updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WorkflowRun url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL to the workflow run.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public WorkflowRun workflowId(Integer workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * The ID of the parent workflow.
   * @return workflowId
   */
  @javax.annotation.Nonnull
  public Integer getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(Integer workflowId) {
    this.workflowId = workflowId;
  }


  public WorkflowRun workflowUrl(String workflowUrl) {
    this.workflowUrl = workflowUrl;
    return this;
  }

  /**
   * The URL to the workflow.
   * @return workflowUrl
   */
  @javax.annotation.Nonnull
  public String getWorkflowUrl() {
    return workflowUrl;
  }

  public void setWorkflowUrl(String workflowUrl) {
    this.workflowUrl = workflowUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowRun workflowRun = (WorkflowRun) o;
    return Objects.equals(this.artifactsUrl, workflowRun.artifactsUrl) &&
        Objects.equals(this.cancelUrl, workflowRun.cancelUrl) &&
        Objects.equals(this.checkSuiteId, workflowRun.checkSuiteId) &&
        Objects.equals(this.checkSuiteNodeId, workflowRun.checkSuiteNodeId) &&
        Objects.equals(this.checkSuiteUrl, workflowRun.checkSuiteUrl) &&
        Objects.equals(this.conclusion, workflowRun.conclusion) &&
        Objects.equals(this.createdAt, workflowRun.createdAt) &&
        Objects.equals(this.event, workflowRun.event) &&
        Objects.equals(this.headBranch, workflowRun.headBranch) &&
        Objects.equals(this.headCommit, workflowRun.headCommit) &&
        Objects.equals(this.headRepository, workflowRun.headRepository) &&
        Objects.equals(this.headRepositoryId, workflowRun.headRepositoryId) &&
        Objects.equals(this.headSha, workflowRun.headSha) &&
        Objects.equals(this.htmlUrl, workflowRun.htmlUrl) &&
        Objects.equals(this.id, workflowRun.id) &&
        Objects.equals(this.jobsUrl, workflowRun.jobsUrl) &&
        Objects.equals(this.logsUrl, workflowRun.logsUrl) &&
        Objects.equals(this.name, workflowRun.name) &&
        Objects.equals(this.nodeId, workflowRun.nodeId) &&
        Objects.equals(this.previousAttemptUrl, workflowRun.previousAttemptUrl) &&
        Objects.equals(this.pullRequests, workflowRun.pullRequests) &&
        Objects.equals(this.repository, workflowRun.repository) &&
        Objects.equals(this.rerunUrl, workflowRun.rerunUrl) &&
        Objects.equals(this.runAttempt, workflowRun.runAttempt) &&
        Objects.equals(this.runNumber, workflowRun.runNumber) &&
        Objects.equals(this.runStartedAt, workflowRun.runStartedAt) &&
        Objects.equals(this.status, workflowRun.status) &&
        Objects.equals(this.updatedAt, workflowRun.updatedAt) &&
        Objects.equals(this.url, workflowRun.url) &&
        Objects.equals(this.workflowId, workflowRun.workflowId) &&
        Objects.equals(this.workflowUrl, workflowRun.workflowUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactsUrl, cancelUrl, checkSuiteId, checkSuiteNodeId, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headRepositoryId, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId, previousAttemptUrl, pullRequests, repository, rerunUrl, runAttempt, runNumber, runStartedAt, status, updatedAt, url, workflowId, workflowUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowRun {\n");
    sb.append("    artifactsUrl: ").append(toIndentedString(artifactsUrl)).append("\n");
    sb.append("    cancelUrl: ").append(toIndentedString(cancelUrl)).append("\n");
    sb.append("    checkSuiteId: ").append(toIndentedString(checkSuiteId)).append("\n");
    sb.append("    checkSuiteNodeId: ").append(toIndentedString(checkSuiteNodeId)).append("\n");
    sb.append("    checkSuiteUrl: ").append(toIndentedString(checkSuiteUrl)).append("\n");
    sb.append("    conclusion: ").append(toIndentedString(conclusion)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    headBranch: ").append(toIndentedString(headBranch)).append("\n");
    sb.append("    headCommit: ").append(toIndentedString(headCommit)).append("\n");
    sb.append("    headRepository: ").append(toIndentedString(headRepository)).append("\n");
    sb.append("    headRepositoryId: ").append(toIndentedString(headRepositoryId)).append("\n");
    sb.append("    headSha: ").append(toIndentedString(headSha)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobsUrl: ").append(toIndentedString(jobsUrl)).append("\n");
    sb.append("    logsUrl: ").append(toIndentedString(logsUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    previousAttemptUrl: ").append(toIndentedString(previousAttemptUrl)).append("\n");
    sb.append("    pullRequests: ").append(toIndentedString(pullRequests)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    rerunUrl: ").append(toIndentedString(rerunUrl)).append("\n");
    sb.append("    runAttempt: ").append(toIndentedString(runAttempt)).append("\n");
    sb.append("    runNumber: ").append(toIndentedString(runNumber)).append("\n");
    sb.append("    runStartedAt: ").append(toIndentedString(runStartedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    workflowUrl: ").append(toIndentedString(workflowUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifacts_url");
    openapiFields.add("cancel_url");
    openapiFields.add("check_suite_id");
    openapiFields.add("check_suite_node_id");
    openapiFields.add("check_suite_url");
    openapiFields.add("conclusion");
    openapiFields.add("created_at");
    openapiFields.add("event");
    openapiFields.add("head_branch");
    openapiFields.add("head_commit");
    openapiFields.add("head_repository");
    openapiFields.add("head_repository_id");
    openapiFields.add("head_sha");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("jobs_url");
    openapiFields.add("logs_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("previous_attempt_url");
    openapiFields.add("pull_requests");
    openapiFields.add("repository");
    openapiFields.add("rerun_url");
    openapiFields.add("run_attempt");
    openapiFields.add("run_number");
    openapiFields.add("run_started_at");
    openapiFields.add("status");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("workflow_id");
    openapiFields.add("workflow_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("artifacts_url");
    openapiRequiredFields.add("cancel_url");
    openapiRequiredFields.add("check_suite_url");
    openapiRequiredFields.add("conclusion");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("head_branch");
    openapiRequiredFields.add("head_commit");
    openapiRequiredFields.add("head_repository");
    openapiRequiredFields.add("head_sha");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("jobs_url");
    openapiRequiredFields.add("logs_url");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("pull_requests");
    openapiRequiredFields.add("repository");
    openapiRequiredFields.add("rerun_url");
    openapiRequiredFields.add("run_number");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("workflow_id");
    openapiRequiredFields.add("workflow_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowRun is not found in the empty JSON string", WorkflowRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowRun.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("artifacts_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifacts_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifacts_url").toString()));
      }
      if (!jsonObj.get("cancel_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_url").toString()));
      }
      if ((jsonObj.get("check_suite_node_id") != null && !jsonObj.get("check_suite_node_id").isJsonNull()) && !jsonObj.get("check_suite_node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_suite_node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_suite_node_id").toString()));
      }
      if (!jsonObj.get("check_suite_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_suite_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_suite_url").toString()));
      }
      if ((jsonObj.get("conclusion") != null && !jsonObj.get("conclusion").isJsonNull()) && !jsonObj.get("conclusion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conclusion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conclusion").toString()));
      }
      if (!jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if ((jsonObj.get("head_branch") != null && !jsonObj.get("head_branch").isJsonNull()) && !jsonObj.get("head_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_branch").toString()));
      }
      // validate the required field `head_commit`
      NullableSimpleCommit.validateJsonElement(jsonObj.get("head_commit"));
      // validate the required field `head_repository`
      MinimalRepository.validateJsonElement(jsonObj.get("head_repository"));
      if (!jsonObj.get("head_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_sha").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("jobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobs_url").toString()));
      }
      if (!jsonObj.get("logs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logs_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("previous_attempt_url") != null && !jsonObj.get("previous_attempt_url").isJsonNull()) && !jsonObj.get("previous_attempt_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_attempt_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_attempt_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("pull_requests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_requests` to be an array in the JSON string but got `%s`", jsonObj.get("pull_requests").toString()));
      }

      JsonArray jsonArraypullRequests = jsonObj.getAsJsonArray("pull_requests");
      // validate the required field `pull_requests` (array)
      for (int i = 0; i < jsonArraypullRequests.size(); i++) {
        PullRequestMinimal.validateJsonElement(jsonArraypullRequests.get(i));
      };
      // validate the required field `repository`
      MinimalRepository.validateJsonElement(jsonObj.get("repository"));
      if (!jsonObj.get("rerun_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerun_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rerun_url").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("workflow_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowRun.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowRun>() {
           @Override
           public void write(JsonWriter out, WorkflowRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowRun
   * @throws IOException if the JSON string is invalid with respect to WorkflowRun
   */
  public static WorkflowRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowRun.class);
  }

  /**
   * Convert an instance of WorkflowRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

