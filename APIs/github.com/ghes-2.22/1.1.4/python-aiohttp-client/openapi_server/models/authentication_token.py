# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository import Repository
from openapi_server import util


class AuthenticationToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: datetime=None, permissions: object=None, repositories: List[Repository]=None, repository_selection: str=None, single_file: str=None, token: str=None):
        """AuthenticationToken - a model defined in OpenAPI

        :param expires_at: The expires_at of this AuthenticationToken.
        :param permissions: The permissions of this AuthenticationToken.
        :param repositories: The repositories of this AuthenticationToken.
        :param repository_selection: The repository_selection of this AuthenticationToken.
        :param single_file: The single_file of this AuthenticationToken.
        :param token: The token of this AuthenticationToken.
        """
        self.openapi_types = {
            'expires_at': datetime,
            'permissions': object,
            'repositories': List[Repository],
            'repository_selection': str,
            'single_file': str,
            'token': str
        }

        self.attribute_map = {
            'expires_at': 'expires_at',
            'permissions': 'permissions',
            'repositories': 'repositories',
            'repository_selection': 'repository_selection',
            'single_file': 'single_file',
            'token': 'token'
        }

        self._expires_at = expires_at
        self._permissions = permissions
        self._repositories = repositories
        self._repository_selection = repository_selection
        self._single_file = single_file
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The authentication-token of this AuthenticationToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this AuthenticationToken.

        The time this token expires

        :return: The expires_at of this AuthenticationToken.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this AuthenticationToken.

        The time this token expires

        :param expires_at: The expires_at of this AuthenticationToken.
        :type expires_at: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at

    @property
    def permissions(self):
        """Gets the permissions of this AuthenticationToken.


        :return: The permissions of this AuthenticationToken.
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AuthenticationToken.


        :param permissions: The permissions of this AuthenticationToken.
        :type permissions: object
        """

        self._permissions = permissions

    @property
    def repositories(self):
        """Gets the repositories of this AuthenticationToken.

        The repositories this token has access to

        :return: The repositories of this AuthenticationToken.
        :rtype: List[Repository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this AuthenticationToken.

        The repositories this token has access to

        :param repositories: The repositories of this AuthenticationToken.
        :type repositories: List[Repository]
        """

        self._repositories = repositories

    @property
    def repository_selection(self):
        """Gets the repository_selection of this AuthenticationToken.

        Describe whether all repositories have been selected or there's a selection involved

        :return: The repository_selection of this AuthenticationToken.
        :rtype: str
        """
        return self._repository_selection

    @repository_selection.setter
    def repository_selection(self, repository_selection):
        """Sets the repository_selection of this AuthenticationToken.

        Describe whether all repositories have been selected or there's a selection involved

        :param repository_selection: The repository_selection of this AuthenticationToken.
        :type repository_selection: str
        """
        allowed_values = ["all", "selected"]  # noqa: E501
        if repository_selection not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_selection` ({0}), must be one of {1}"
                .format(repository_selection, allowed_values)
            )

        self._repository_selection = repository_selection

    @property
    def single_file(self):
        """Gets the single_file of this AuthenticationToken.


        :return: The single_file of this AuthenticationToken.
        :rtype: str
        """
        return self._single_file

    @single_file.setter
    def single_file(self, single_file):
        """Sets the single_file of this AuthenticationToken.


        :param single_file: The single_file of this AuthenticationToken.
        :type single_file: str
        """

        self._single_file = single_file

    @property
    def token(self):
        """Gets the token of this AuthenticationToken.

        The token used for authentication

        :return: The token of this AuthenticationToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthenticationToken.

        The token used for authentication

        :param token: The token of this AuthenticationToken.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
