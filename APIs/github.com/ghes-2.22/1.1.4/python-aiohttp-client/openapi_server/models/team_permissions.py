# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, maintain: bool=None, pull: bool=None, push: bool=None, triage: bool=None):
        """TeamPermissions - a model defined in OpenAPI

        :param admin: The admin of this TeamPermissions.
        :param maintain: The maintain of this TeamPermissions.
        :param pull: The pull of this TeamPermissions.
        :param push: The push of this TeamPermissions.
        :param triage: The triage of this TeamPermissions.
        """
        self.openapi_types = {
            'admin': bool,
            'maintain': bool,
            'pull': bool,
            'push': bool,
            'triage': bool
        }

        self.attribute_map = {
            'admin': 'admin',
            'maintain': 'maintain',
            'pull': 'pull',
            'push': 'push',
            'triage': 'triage'
        }

        self._admin = admin
        self._maintain = maintain
        self._pull = pull
        self._push = push
        self._triage = triage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team_permissions of this TeamPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this TeamPermissions.


        :return: The admin of this TeamPermissions.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this TeamPermissions.


        :param admin: The admin of this TeamPermissions.
        :type admin: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")

        self._admin = admin

    @property
    def maintain(self):
        """Gets the maintain of this TeamPermissions.


        :return: The maintain of this TeamPermissions.
        :rtype: bool
        """
        return self._maintain

    @maintain.setter
    def maintain(self, maintain):
        """Sets the maintain of this TeamPermissions.


        :param maintain: The maintain of this TeamPermissions.
        :type maintain: bool
        """
        if maintain is None:
            raise ValueError("Invalid value for `maintain`, must not be `None`")

        self._maintain = maintain

    @property
    def pull(self):
        """Gets the pull of this TeamPermissions.


        :return: The pull of this TeamPermissions.
        :rtype: bool
        """
        return self._pull

    @pull.setter
    def pull(self, pull):
        """Sets the pull of this TeamPermissions.


        :param pull: The pull of this TeamPermissions.
        :type pull: bool
        """
        if pull is None:
            raise ValueError("Invalid value for `pull`, must not be `None`")

        self._pull = pull

    @property
    def push(self):
        """Gets the push of this TeamPermissions.


        :return: The push of this TeamPermissions.
        :rtype: bool
        """
        return self._push

    @push.setter
    def push(self, push):
        """Sets the push of this TeamPermissions.


        :param push: The push of this TeamPermissions.
        :type push: bool
        """
        if push is None:
            raise ValueError("Invalid value for `push`, must not be `None`")

        self._push = push

    @property
    def triage(self):
        """Gets the triage of this TeamPermissions.


        :return: The triage of this TeamPermissions.
        :rtype: bool
        """
        return self._triage

    @triage.setter
    def triage(self, triage):
        """Sets the triage of this TeamPermissions.


        :param triage: The triage of this TeamPermissions.
        :type triage: bool
        """
        if triage is None:
            raise ValueError("Invalid value for `triage`, must not be `None`")

        self._triage = triage
