# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationFullPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filled_seats: int=None, name: str=None, private_repos: int=None, seats: int=None, space: int=None):
        """OrganizationFullPlan - a model defined in OpenAPI

        :param filled_seats: The filled_seats of this OrganizationFullPlan.
        :param name: The name of this OrganizationFullPlan.
        :param private_repos: The private_repos of this OrganizationFullPlan.
        :param seats: The seats of this OrganizationFullPlan.
        :param space: The space of this OrganizationFullPlan.
        """
        self.openapi_types = {
            'filled_seats': int,
            'name': str,
            'private_repos': int,
            'seats': int,
            'space': int
        }

        self.attribute_map = {
            'filled_seats': 'filled_seats',
            'name': 'name',
            'private_repos': 'private_repos',
            'seats': 'seats',
            'space': 'space'
        }

        self._filled_seats = filled_seats
        self._name = name
        self._private_repos = private_repos
        self._seats = seats
        self._space = space

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationFullPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The organization_full_plan of this OrganizationFullPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filled_seats(self):
        """Gets the filled_seats of this OrganizationFullPlan.


        :return: The filled_seats of this OrganizationFullPlan.
        :rtype: int
        """
        return self._filled_seats

    @filled_seats.setter
    def filled_seats(self, filled_seats):
        """Sets the filled_seats of this OrganizationFullPlan.


        :param filled_seats: The filled_seats of this OrganizationFullPlan.
        :type filled_seats: int
        """

        self._filled_seats = filled_seats

    @property
    def name(self):
        """Gets the name of this OrganizationFullPlan.


        :return: The name of this OrganizationFullPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationFullPlan.


        :param name: The name of this OrganizationFullPlan.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def private_repos(self):
        """Gets the private_repos of this OrganizationFullPlan.


        :return: The private_repos of this OrganizationFullPlan.
        :rtype: int
        """
        return self._private_repos

    @private_repos.setter
    def private_repos(self, private_repos):
        """Sets the private_repos of this OrganizationFullPlan.


        :param private_repos: The private_repos of this OrganizationFullPlan.
        :type private_repos: int
        """
        if private_repos is None:
            raise ValueError("Invalid value for `private_repos`, must not be `None`")

        self._private_repos = private_repos

    @property
    def seats(self):
        """Gets the seats of this OrganizationFullPlan.


        :return: The seats of this OrganizationFullPlan.
        :rtype: int
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """Sets the seats of this OrganizationFullPlan.


        :param seats: The seats of this OrganizationFullPlan.
        :type seats: int
        """

        self._seats = seats

    @property
    def space(self):
        """Gets the space of this OrganizationFullPlan.


        :return: The space of this OrganizationFullPlan.
        :rtype: int
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this OrganizationFullPlan.


        :param space: The space of this OrganizationFullPlan.
        :type space: int
        """
        if space is None:
            raise ValueError("Invalid value for `space`, must not be `None`")

        self._space = space
