# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.pull_request_minimal import PullRequestMinimal
from openapi_server.models.simple_commit import SimpleCommit
from openapi_server import util


class CheckSuite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after: str=None, app: NullableIntegration=None, before: str=None, check_runs_url: str=None, conclusion: str=None, created_at: datetime=None, head_branch: str=None, head_commit: SimpleCommit=None, head_sha: str=None, id: int=None, latest_check_runs_count: int=None, node_id: str=None, pull_requests: List[PullRequestMinimal]=None, repository: MinimalRepository=None, status: str=None, updated_at: datetime=None, url: str=None):
        """CheckSuite - a model defined in OpenAPI

        :param after: The after of this CheckSuite.
        :param app: The app of this CheckSuite.
        :param before: The before of this CheckSuite.
        :param check_runs_url: The check_runs_url of this CheckSuite.
        :param conclusion: The conclusion of this CheckSuite.
        :param created_at: The created_at of this CheckSuite.
        :param head_branch: The head_branch of this CheckSuite.
        :param head_commit: The head_commit of this CheckSuite.
        :param head_sha: The head_sha of this CheckSuite.
        :param id: The id of this CheckSuite.
        :param latest_check_runs_count: The latest_check_runs_count of this CheckSuite.
        :param node_id: The node_id of this CheckSuite.
        :param pull_requests: The pull_requests of this CheckSuite.
        :param repository: The repository of this CheckSuite.
        :param status: The status of this CheckSuite.
        :param updated_at: The updated_at of this CheckSuite.
        :param url: The url of this CheckSuite.
        """
        self.openapi_types = {
            'after': str,
            'app': NullableIntegration,
            'before': str,
            'check_runs_url': str,
            'conclusion': str,
            'created_at': datetime,
            'head_branch': str,
            'head_commit': SimpleCommit,
            'head_sha': str,
            'id': int,
            'latest_check_runs_count': int,
            'node_id': str,
            'pull_requests': List[PullRequestMinimal],
            'repository': MinimalRepository,
            'status': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'after': 'after',
            'app': 'app',
            'before': 'before',
            'check_runs_url': 'check_runs_url',
            'conclusion': 'conclusion',
            'created_at': 'created_at',
            'head_branch': 'head_branch',
            'head_commit': 'head_commit',
            'head_sha': 'head_sha',
            'id': 'id',
            'latest_check_runs_count': 'latest_check_runs_count',
            'node_id': 'node_id',
            'pull_requests': 'pull_requests',
            'repository': 'repository',
            'status': 'status',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._after = after
        self._app = app
        self._before = before
        self._check_runs_url = check_runs_url
        self._conclusion = conclusion
        self._created_at = created_at
        self._head_branch = head_branch
        self._head_commit = head_commit
        self._head_sha = head_sha
        self._id = id
        self._latest_check_runs_count = latest_check_runs_count
        self._node_id = node_id
        self._pull_requests = pull_requests
        self._repository = repository
        self._status = status
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckSuite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check-suite of this CheckSuite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self):
        """Gets the after of this CheckSuite.


        :return: The after of this CheckSuite.
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this CheckSuite.


        :param after: The after of this CheckSuite.
        :type after: str
        """
        if after is None:
            raise ValueError("Invalid value for `after`, must not be `None`")

        self._after = after

    @property
    def app(self):
        """Gets the app of this CheckSuite.


        :return: The app of this CheckSuite.
        :rtype: NullableIntegration
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this CheckSuite.


        :param app: The app of this CheckSuite.
        :type app: NullableIntegration
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def before(self):
        """Gets the before of this CheckSuite.


        :return: The before of this CheckSuite.
        :rtype: str
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this CheckSuite.


        :param before: The before of this CheckSuite.
        :type before: str
        """
        if before is None:
            raise ValueError("Invalid value for `before`, must not be `None`")

        self._before = before

    @property
    def check_runs_url(self):
        """Gets the check_runs_url of this CheckSuite.


        :return: The check_runs_url of this CheckSuite.
        :rtype: str
        """
        return self._check_runs_url

    @check_runs_url.setter
    def check_runs_url(self, check_runs_url):
        """Sets the check_runs_url of this CheckSuite.


        :param check_runs_url: The check_runs_url of this CheckSuite.
        :type check_runs_url: str
        """
        if check_runs_url is None:
            raise ValueError("Invalid value for `check_runs_url`, must not be `None`")

        self._check_runs_url = check_runs_url

    @property
    def conclusion(self):
        """Gets the conclusion of this CheckSuite.


        :return: The conclusion of this CheckSuite.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this CheckSuite.


        :param conclusion: The conclusion of this CheckSuite.
        :type conclusion: str
        """
        allowed_values = [None,"success", "failure", "neutral", "cancelled", "skipped", "timed_out", "action_required"]  # noqa: E501
        if conclusion not in allowed_values:
            raise ValueError(
                "Invalid value for `conclusion` ({0}), must be one of {1}"
                .format(conclusion, allowed_values)
            )

        self._conclusion = conclusion

    @property
    def created_at(self):
        """Gets the created_at of this CheckSuite.


        :return: The created_at of this CheckSuite.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CheckSuite.


        :param created_at: The created_at of this CheckSuite.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def head_branch(self):
        """Gets the head_branch of this CheckSuite.


        :return: The head_branch of this CheckSuite.
        :rtype: str
        """
        return self._head_branch

    @head_branch.setter
    def head_branch(self, head_branch):
        """Sets the head_branch of this CheckSuite.


        :param head_branch: The head_branch of this CheckSuite.
        :type head_branch: str
        """
        if head_branch is None:
            raise ValueError("Invalid value for `head_branch`, must not be `None`")

        self._head_branch = head_branch

    @property
    def head_commit(self):
        """Gets the head_commit of this CheckSuite.


        :return: The head_commit of this CheckSuite.
        :rtype: SimpleCommit
        """
        return self._head_commit

    @head_commit.setter
    def head_commit(self, head_commit):
        """Sets the head_commit of this CheckSuite.


        :param head_commit: The head_commit of this CheckSuite.
        :type head_commit: SimpleCommit
        """
        if head_commit is None:
            raise ValueError("Invalid value for `head_commit`, must not be `None`")

        self._head_commit = head_commit

    @property
    def head_sha(self):
        """Gets the head_sha of this CheckSuite.

        The SHA of the head commit that is being checked.

        :return: The head_sha of this CheckSuite.
        :rtype: str
        """
        return self._head_sha

    @head_sha.setter
    def head_sha(self, head_sha):
        """Sets the head_sha of this CheckSuite.

        The SHA of the head commit that is being checked.

        :param head_sha: The head_sha of this CheckSuite.
        :type head_sha: str
        """
        if head_sha is None:
            raise ValueError("Invalid value for `head_sha`, must not be `None`")

        self._head_sha = head_sha

    @property
    def id(self):
        """Gets the id of this CheckSuite.


        :return: The id of this CheckSuite.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckSuite.


        :param id: The id of this CheckSuite.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def latest_check_runs_count(self):
        """Gets the latest_check_runs_count of this CheckSuite.


        :return: The latest_check_runs_count of this CheckSuite.
        :rtype: int
        """
        return self._latest_check_runs_count

    @latest_check_runs_count.setter
    def latest_check_runs_count(self, latest_check_runs_count):
        """Sets the latest_check_runs_count of this CheckSuite.


        :param latest_check_runs_count: The latest_check_runs_count of this CheckSuite.
        :type latest_check_runs_count: int
        """
        if latest_check_runs_count is None:
            raise ValueError("Invalid value for `latest_check_runs_count`, must not be `None`")

        self._latest_check_runs_count = latest_check_runs_count

    @property
    def node_id(self):
        """Gets the node_id of this CheckSuite.


        :return: The node_id of this CheckSuite.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this CheckSuite.


        :param node_id: The node_id of this CheckSuite.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def pull_requests(self):
        """Gets the pull_requests of this CheckSuite.


        :return: The pull_requests of this CheckSuite.
        :rtype: List[PullRequestMinimal]
        """
        return self._pull_requests

    @pull_requests.setter
    def pull_requests(self, pull_requests):
        """Sets the pull_requests of this CheckSuite.


        :param pull_requests: The pull_requests of this CheckSuite.
        :type pull_requests: List[PullRequestMinimal]
        """
        if pull_requests is None:
            raise ValueError("Invalid value for `pull_requests`, must not be `None`")

        self._pull_requests = pull_requests

    @property
    def repository(self):
        """Gets the repository of this CheckSuite.


        :return: The repository of this CheckSuite.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CheckSuite.


        :param repository: The repository of this CheckSuite.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def status(self):
        """Gets the status of this CheckSuite.


        :return: The status of this CheckSuite.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckSuite.


        :param status: The status of this CheckSuite.
        :type status: str
        """
        allowed_values = [None,"queued", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this CheckSuite.


        :return: The updated_at of this CheckSuite.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CheckSuite.


        :param updated_at: The updated_at of this CheckSuite.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this CheckSuite.


        :return: The url of this CheckSuite.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CheckSuite.


        :param url: The url of this CheckSuite.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
