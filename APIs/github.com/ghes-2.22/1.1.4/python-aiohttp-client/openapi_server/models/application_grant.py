# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_grant_app import ApplicationGrantApp
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class ApplicationGrant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: ApplicationGrantApp=None, created_at: datetime=None, id: int=None, scopes: List[str]=None, updated_at: datetime=None, url: str=None, user: NullableSimpleUser=None):
        """ApplicationGrant - a model defined in OpenAPI

        :param app: The app of this ApplicationGrant.
        :param created_at: The created_at of this ApplicationGrant.
        :param id: The id of this ApplicationGrant.
        :param scopes: The scopes of this ApplicationGrant.
        :param updated_at: The updated_at of this ApplicationGrant.
        :param url: The url of this ApplicationGrant.
        :param user: The user of this ApplicationGrant.
        """
        self.openapi_types = {
            'app': ApplicationGrantApp,
            'created_at': datetime,
            'id': int,
            'scopes': List[str],
            'updated_at': datetime,
            'url': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'app': 'app',
            'created_at': 'created_at',
            'id': 'id',
            'scopes': 'scopes',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._app = app
        self._created_at = created_at
        self._id = id
        self._scopes = scopes
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGrant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The application-grant of this ApplicationGrant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this ApplicationGrant.


        :return: The app of this ApplicationGrant.
        :rtype: ApplicationGrantApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this ApplicationGrant.


        :param app: The app of this ApplicationGrant.
        :type app: ApplicationGrantApp
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def created_at(self):
        """Gets the created_at of this ApplicationGrant.


        :return: The created_at of this ApplicationGrant.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApplicationGrant.


        :param created_at: The created_at of this ApplicationGrant.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ApplicationGrant.


        :return: The id of this ApplicationGrant.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationGrant.


        :param id: The id of this ApplicationGrant.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def scopes(self):
        """Gets the scopes of this ApplicationGrant.


        :return: The scopes of this ApplicationGrant.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ApplicationGrant.


        :param scopes: The scopes of this ApplicationGrant.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def updated_at(self):
        """Gets the updated_at of this ApplicationGrant.


        :return: The updated_at of this ApplicationGrant.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ApplicationGrant.


        :param updated_at: The updated_at of this ApplicationGrant.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this ApplicationGrant.


        :return: The url of this ApplicationGrant.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApplicationGrant.


        :param url: The url of this ApplicationGrant.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this ApplicationGrant.


        :return: The user of this ApplicationGrant.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ApplicationGrant.


        :param user: The user of this ApplicationGrant.
        :type user: NullableSimpleUser
        """

        self._user = user
