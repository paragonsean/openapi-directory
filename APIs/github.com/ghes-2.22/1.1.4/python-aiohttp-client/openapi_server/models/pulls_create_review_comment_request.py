# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullsCreateReviewCommentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, commit_id: str=None, in_reply_to: int=None, line: int=None, path: str=None, position: int=None, side: str=None, start_line: int=None, start_side: str=None):
        """PullsCreateReviewCommentRequest - a model defined in OpenAPI

        :param body: The body of this PullsCreateReviewCommentRequest.
        :param commit_id: The commit_id of this PullsCreateReviewCommentRequest.
        :param in_reply_to: The in_reply_to of this PullsCreateReviewCommentRequest.
        :param line: The line of this PullsCreateReviewCommentRequest.
        :param path: The path of this PullsCreateReviewCommentRequest.
        :param position: The position of this PullsCreateReviewCommentRequest.
        :param side: The side of this PullsCreateReviewCommentRequest.
        :param start_line: The start_line of this PullsCreateReviewCommentRequest.
        :param start_side: The start_side of this PullsCreateReviewCommentRequest.
        """
        self.openapi_types = {
            'body': str,
            'commit_id': str,
            'in_reply_to': int,
            'line': int,
            'path': str,
            'position': int,
            'side': str,
            'start_line': int,
            'start_side': str
        }

        self.attribute_map = {
            'body': 'body',
            'commit_id': 'commit_id',
            'in_reply_to': 'in_reply_to',
            'line': 'line',
            'path': 'path',
            'position': 'position',
            'side': 'side',
            'start_line': 'start_line',
            'start_side': 'start_side'
        }

        self._body = body
        self._commit_id = commit_id
        self._in_reply_to = in_reply_to
        self._line = line
        self._path = path
        self._position = position
        self._side = side
        self._start_line = start_line
        self._start_side = start_side

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullsCreateReviewCommentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pulls_create_review_comment_request of this PullsCreateReviewCommentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this PullsCreateReviewCommentRequest.

        The text of the review comment.

        :return: The body of this PullsCreateReviewCommentRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullsCreateReviewCommentRequest.

        The text of the review comment.

        :param body: The body of this PullsCreateReviewCommentRequest.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def commit_id(self):
        """Gets the commit_id of this PullsCreateReviewCommentRequest.

        The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.

        :return: The commit_id of this PullsCreateReviewCommentRequest.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this PullsCreateReviewCommentRequest.

        The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.

        :param commit_id: The commit_id of this PullsCreateReviewCommentRequest.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def in_reply_to(self):
        """Gets the in_reply_to of this PullsCreateReviewCommentRequest.


        :return: The in_reply_to of this PullsCreateReviewCommentRequest.
        :rtype: int
        """
        return self._in_reply_to

    @in_reply_to.setter
    def in_reply_to(self, in_reply_to):
        """Sets the in_reply_to of this PullsCreateReviewCommentRequest.


        :param in_reply_to: The in_reply_to of this PullsCreateReviewCommentRequest.
        :type in_reply_to: int
        """

        self._in_reply_to = in_reply_to

    @property
    def line(self):
        """Gets the line of this PullsCreateReviewCommentRequest.

        The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.

        :return: The line of this PullsCreateReviewCommentRequest.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this PullsCreateReviewCommentRequest.

        The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.

        :param line: The line of this PullsCreateReviewCommentRequest.
        :type line: int
        """

        self._line = line

    @property
    def path(self):
        """Gets the path of this PullsCreateReviewCommentRequest.

        The relative path to the file that necessitates a comment.

        :return: The path of this PullsCreateReviewCommentRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PullsCreateReviewCommentRequest.

        The relative path to the file that necessitates a comment.

        :param path: The path of this PullsCreateReviewCommentRequest.
        :type path: str
        """

        self._path = path

    @property
    def position(self):
        """Gets the position of this PullsCreateReviewCommentRequest.

        The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.

        :return: The position of this PullsCreateReviewCommentRequest.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PullsCreateReviewCommentRequest.

        The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.

        :param position: The position of this PullsCreateReviewCommentRequest.
        :type position: int
        """

        self._position = position

    @property
    def side(self):
        """Gets the side of this PullsCreateReviewCommentRequest.

        In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.

        :return: The side of this PullsCreateReviewCommentRequest.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this PullsCreateReviewCommentRequest.

        In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.

        :param side: The side of this PullsCreateReviewCommentRequest.
        :type side: str
        """
        allowed_values = ["LEFT", "RIGHT"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def start_line(self):
        """Gets the start_line of this PullsCreateReviewCommentRequest.

        **Required when using multi-line comments**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.

        :return: The start_line of this PullsCreateReviewCommentRequest.
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line):
        """Sets the start_line of this PullsCreateReviewCommentRequest.

        **Required when using multi-line comments**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.

        :param start_line: The start_line of this PullsCreateReviewCommentRequest.
        :type start_line: int
        """

        self._start_line = start_line

    @property
    def start_side(self):
        """Gets the start_side of this PullsCreateReviewCommentRequest.

        **Required when using multi-line comments**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.

        :return: The start_side of this PullsCreateReviewCommentRequest.
        :rtype: str
        """
        return self._start_side

    @start_side.setter
    def start_side(self, start_side):
        """Sets the start_side of this PullsCreateReviewCommentRequest.

        **Required when using multi-line comments**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.

        :param start_side: The start_side of this PullsCreateReviewCommentRequest.
        :type start_side: str
        """
        allowed_values = ["LEFT", "RIGHT", "side"]  # noqa: E501
        if start_side not in allowed_values:
            raise ValueError(
                "Invalid value for `start_side` ({0}), must be one of {1}"
                .format(start_side, allowed_values)
            )

        self._start_side = start_side
