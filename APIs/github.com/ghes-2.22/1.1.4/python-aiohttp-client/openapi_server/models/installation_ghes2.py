# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.installation_ghes2_account import InstallationGhes2Account
from openapi_server.models.installation_ghes2_permissions import InstallationGhes2Permissions
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class InstallationGhes2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_tokens_url: str=None, account: InstallationGhes2Account=None, app_id: int=None, app_slug: str=None, contact_email: str=None, created_at: datetime=None, events: List[str]=None, html_url: str=None, id: int=None, permissions: InstallationGhes2Permissions=None, repositories_url: str=None, repository_selection: str=None, single_file_name: str=None, suspended_at: datetime=None, suspended_by: NullableSimpleUser=None, target_id: int=None, target_type: str=None, updated_at: datetime=None):
        """InstallationGhes2 - a model defined in OpenAPI

        :param access_tokens_url: The access_tokens_url of this InstallationGhes2.
        :param account: The account of this InstallationGhes2.
        :param app_id: The app_id of this InstallationGhes2.
        :param app_slug: The app_slug of this InstallationGhes2.
        :param contact_email: The contact_email of this InstallationGhes2.
        :param created_at: The created_at of this InstallationGhes2.
        :param events: The events of this InstallationGhes2.
        :param html_url: The html_url of this InstallationGhes2.
        :param id: The id of this InstallationGhes2.
        :param permissions: The permissions of this InstallationGhes2.
        :param repositories_url: The repositories_url of this InstallationGhes2.
        :param repository_selection: The repository_selection of this InstallationGhes2.
        :param single_file_name: The single_file_name of this InstallationGhes2.
        :param suspended_at: The suspended_at of this InstallationGhes2.
        :param suspended_by: The suspended_by of this InstallationGhes2.
        :param target_id: The target_id of this InstallationGhes2.
        :param target_type: The target_type of this InstallationGhes2.
        :param updated_at: The updated_at of this InstallationGhes2.
        """
        self.openapi_types = {
            'access_tokens_url': str,
            'account': InstallationGhes2Account,
            'app_id': int,
            'app_slug': str,
            'contact_email': str,
            'created_at': datetime,
            'events': List[str],
            'html_url': str,
            'id': int,
            'permissions': InstallationGhes2Permissions,
            'repositories_url': str,
            'repository_selection': str,
            'single_file_name': str,
            'suspended_at': datetime,
            'suspended_by': NullableSimpleUser,
            'target_id': int,
            'target_type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'access_tokens_url': 'access_tokens_url',
            'account': 'account',
            'app_id': 'app_id',
            'app_slug': 'app_slug',
            'contact_email': 'contact_email',
            'created_at': 'created_at',
            'events': 'events',
            'html_url': 'html_url',
            'id': 'id',
            'permissions': 'permissions',
            'repositories_url': 'repositories_url',
            'repository_selection': 'repository_selection',
            'single_file_name': 'single_file_name',
            'suspended_at': 'suspended_at',
            'suspended_by': 'suspended_by',
            'target_id': 'target_id',
            'target_type': 'target_type',
            'updated_at': 'updated_at'
        }

        self._access_tokens_url = access_tokens_url
        self._account = account
        self._app_id = app_id
        self._app_slug = app_slug
        self._contact_email = contact_email
        self._created_at = created_at
        self._events = events
        self._html_url = html_url
        self._id = id
        self._permissions = permissions
        self._repositories_url = repositories_url
        self._repository_selection = repository_selection
        self._single_file_name = single_file_name
        self._suspended_at = suspended_at
        self._suspended_by = suspended_by
        self._target_id = target_id
        self._target_type = target_type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstallationGhes2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The installation-ghes-2 of this InstallationGhes2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_tokens_url(self):
        """Gets the access_tokens_url of this InstallationGhes2.


        :return: The access_tokens_url of this InstallationGhes2.
        :rtype: str
        """
        return self._access_tokens_url

    @access_tokens_url.setter
    def access_tokens_url(self, access_tokens_url):
        """Sets the access_tokens_url of this InstallationGhes2.


        :param access_tokens_url: The access_tokens_url of this InstallationGhes2.
        :type access_tokens_url: str
        """
        if access_tokens_url is None:
            raise ValueError("Invalid value for `access_tokens_url`, must not be `None`")

        self._access_tokens_url = access_tokens_url

    @property
    def account(self):
        """Gets the account of this InstallationGhes2.


        :return: The account of this InstallationGhes2.
        :rtype: InstallationGhes2Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this InstallationGhes2.


        :param account: The account of this InstallationGhes2.
        :type account: InstallationGhes2Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def app_id(self):
        """Gets the app_id of this InstallationGhes2.


        :return: The app_id of this InstallationGhes2.
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this InstallationGhes2.


        :param app_id: The app_id of this InstallationGhes2.
        :type app_id: int
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_slug(self):
        """Gets the app_slug of this InstallationGhes2.


        :return: The app_slug of this InstallationGhes2.
        :rtype: str
        """
        return self._app_slug

    @app_slug.setter
    def app_slug(self, app_slug):
        """Sets the app_slug of this InstallationGhes2.


        :param app_slug: The app_slug of this InstallationGhes2.
        :type app_slug: str
        """
        if app_slug is None:
            raise ValueError("Invalid value for `app_slug`, must not be `None`")

        self._app_slug = app_slug

    @property
    def contact_email(self):
        """Gets the contact_email of this InstallationGhes2.


        :return: The contact_email of this InstallationGhes2.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this InstallationGhes2.


        :param contact_email: The contact_email of this InstallationGhes2.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def created_at(self):
        """Gets the created_at of this InstallationGhes2.


        :return: The created_at of this InstallationGhes2.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InstallationGhes2.


        :param created_at: The created_at of this InstallationGhes2.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def events(self):
        """Gets the events of this InstallationGhes2.


        :return: The events of this InstallationGhes2.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this InstallationGhes2.


        :param events: The events of this InstallationGhes2.
        :type events: List[str]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def html_url(self):
        """Gets the html_url of this InstallationGhes2.


        :return: The html_url of this InstallationGhes2.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this InstallationGhes2.


        :param html_url: The html_url of this InstallationGhes2.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this InstallationGhes2.

        The ID of the installation.

        :return: The id of this InstallationGhes2.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallationGhes2.

        The ID of the installation.

        :param id: The id of this InstallationGhes2.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def permissions(self):
        """Gets the permissions of this InstallationGhes2.


        :return: The permissions of this InstallationGhes2.
        :rtype: InstallationGhes2Permissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this InstallationGhes2.


        :param permissions: The permissions of this InstallationGhes2.
        :type permissions: InstallationGhes2Permissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def repositories_url(self):
        """Gets the repositories_url of this InstallationGhes2.


        :return: The repositories_url of this InstallationGhes2.
        :rtype: str
        """
        return self._repositories_url

    @repositories_url.setter
    def repositories_url(self, repositories_url):
        """Sets the repositories_url of this InstallationGhes2.


        :param repositories_url: The repositories_url of this InstallationGhes2.
        :type repositories_url: str
        """
        if repositories_url is None:
            raise ValueError("Invalid value for `repositories_url`, must not be `None`")

        self._repositories_url = repositories_url

    @property
    def repository_selection(self):
        """Gets the repository_selection of this InstallationGhes2.

        Describe whether all repositories have been selected or there's a selection involved

        :return: The repository_selection of this InstallationGhes2.
        :rtype: str
        """
        return self._repository_selection

    @repository_selection.setter
    def repository_selection(self, repository_selection):
        """Sets the repository_selection of this InstallationGhes2.

        Describe whether all repositories have been selected or there's a selection involved

        :param repository_selection: The repository_selection of this InstallationGhes2.
        :type repository_selection: str
        """
        allowed_values = ["all", "selected"]  # noqa: E501
        if repository_selection not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_selection` ({0}), must be one of {1}"
                .format(repository_selection, allowed_values)
            )

        self._repository_selection = repository_selection

    @property
    def single_file_name(self):
        """Gets the single_file_name of this InstallationGhes2.


        :return: The single_file_name of this InstallationGhes2.
        :rtype: str
        """
        return self._single_file_name

    @single_file_name.setter
    def single_file_name(self, single_file_name):
        """Sets the single_file_name of this InstallationGhes2.


        :param single_file_name: The single_file_name of this InstallationGhes2.
        :type single_file_name: str
        """
        if single_file_name is None:
            raise ValueError("Invalid value for `single_file_name`, must not be `None`")

        self._single_file_name = single_file_name

    @property
    def suspended_at(self):
        """Gets the suspended_at of this InstallationGhes2.


        :return: The suspended_at of this InstallationGhes2.
        :rtype: datetime
        """
        return self._suspended_at

    @suspended_at.setter
    def suspended_at(self, suspended_at):
        """Sets the suspended_at of this InstallationGhes2.


        :param suspended_at: The suspended_at of this InstallationGhes2.
        :type suspended_at: datetime
        """

        self._suspended_at = suspended_at

    @property
    def suspended_by(self):
        """Gets the suspended_by of this InstallationGhes2.


        :return: The suspended_by of this InstallationGhes2.
        :rtype: NullableSimpleUser
        """
        return self._suspended_by

    @suspended_by.setter
    def suspended_by(self, suspended_by):
        """Sets the suspended_by of this InstallationGhes2.


        :param suspended_by: The suspended_by of this InstallationGhes2.
        :type suspended_by: NullableSimpleUser
        """

        self._suspended_by = suspended_by

    @property
    def target_id(self):
        """Gets the target_id of this InstallationGhes2.

        The ID of the user or organization this token is being scoped to.

        :return: The target_id of this InstallationGhes2.
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this InstallationGhes2.

        The ID of the user or organization this token is being scoped to.

        :param target_id: The target_id of this InstallationGhes2.
        :type target_id: int
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")

        self._target_id = target_id

    @property
    def target_type(self):
        """Gets the target_type of this InstallationGhes2.


        :return: The target_type of this InstallationGhes2.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this InstallationGhes2.


        :param target_type: The target_type of this InstallationGhes2.
        :type target_type: str
        """
        if target_type is None:
            raise ValueError("Invalid value for `target_type`, must not be `None`")

        self._target_type = target_type

    @property
    def updated_at(self):
        """Gets the updated_at of this InstallationGhes2.


        :return: The updated_at of this InstallationGhes2.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InstallationGhes2.


        :param updated_at: The updated_at of this InstallationGhes2.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
