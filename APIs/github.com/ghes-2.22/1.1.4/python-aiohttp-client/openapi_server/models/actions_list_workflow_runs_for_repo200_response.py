# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_run import WorkflowRun
from openapi_server import util


class ActionsListWorkflowRunsForRepo200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_count: int=None, workflow_runs: List[WorkflowRun]=None):
        """ActionsListWorkflowRunsForRepo200Response - a model defined in OpenAPI

        :param total_count: The total_count of this ActionsListWorkflowRunsForRepo200Response.
        :param workflow_runs: The workflow_runs of this ActionsListWorkflowRunsForRepo200Response.
        """
        self.openapi_types = {
            'total_count': int,
            'workflow_runs': List[WorkflowRun]
        }

        self.attribute_map = {
            'total_count': 'total_count',
            'workflow_runs': 'workflow_runs'
        }

        self._total_count = total_count
        self._workflow_runs = workflow_runs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsListWorkflowRunsForRepo200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_list_workflow_runs_for_repo_200_response of this ActionsListWorkflowRunsForRepo200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_count(self):
        """Gets the total_count of this ActionsListWorkflowRunsForRepo200Response.


        :return: The total_count of this ActionsListWorkflowRunsForRepo200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActionsListWorkflowRunsForRepo200Response.


        :param total_count: The total_count of this ActionsListWorkflowRunsForRepo200Response.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

    @property
    def workflow_runs(self):
        """Gets the workflow_runs of this ActionsListWorkflowRunsForRepo200Response.


        :return: The workflow_runs of this ActionsListWorkflowRunsForRepo200Response.
        :rtype: List[WorkflowRun]
        """
        return self._workflow_runs

    @workflow_runs.setter
    def workflow_runs(self, workflow_runs):
        """Sets the workflow_runs of this ActionsListWorkflowRunsForRepo200Response.


        :param workflow_runs: The workflow_runs of this ActionsListWorkflowRunsForRepo200Response.
        :type workflow_runs: List[WorkflowRun]
        """
        if workflow_runs is None:
            raise ValueError("Invalid value for `workflow_runs`, must not be `None`")

        self._workflow_runs = workflow_runs
