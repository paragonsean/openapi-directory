# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collaborator_permissions import CollaboratorPermissions
from openapi_server.models.nullable_license_simple import NullableLicenseSimple
from openapi_server.models.nullable_repository_template_repository import NullableRepositoryTemplateRepository
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class Repository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_forking: bool=None, allow_merge_commit: bool=True, allow_rebase_merge: bool=True, allow_squash_merge: bool=True, archive_url: str=None, archived: bool=False, assignees_url: str=None, blobs_url: str=None, branches_url: str=None, clone_url: str=None, collaborators_url: str=None, comments_url: str=None, commits_url: str=None, compare_url: str=None, contents_url: str=None, contributors_url: str=None, created_at: datetime=None, default_branch: str=None, delete_branch_on_merge: bool=False, deployments_url: str=None, description: str=None, disabled: bool=None, downloads_url: str=None, events_url: str=None, fork: bool=None, forks: int=None, forks_count: int=None, forks_url: str=None, full_name: str=None, git_commits_url: str=None, git_refs_url: str=None, git_tags_url: str=None, git_url: str=None, has_downloads: bool=True, has_issues: bool=True, has_pages: bool=None, has_projects: bool=True, has_wiki: bool=True, homepage: str=None, hooks_url: str=None, html_url: str=None, id: int=None, is_template: bool=False, issue_comment_url: str=None, issue_events_url: str=None, issues_url: str=None, keys_url: str=None, labels_url: str=None, language: str=None, languages_url: str=None, license: NullableLicenseSimple=None, master_branch: str=None, merges_url: str=None, milestones_url: str=None, mirror_url: str=None, name: str=None, network_count: int=None, node_id: str=None, notifications_url: str=None, open_issues: int=None, open_issues_count: int=None, organization: NullableSimpleUser=None, owner: SimpleUser=None, permissions: CollaboratorPermissions=None, private: bool=False, pulls_url: str=None, pushed_at: datetime=None, releases_url: str=None, size: int=None, ssh_url: str=None, stargazers_count: int=None, stargazers_url: str=None, starred_at: str=None, statuses_url: str=None, subscribers_count: int=None, subscribers_url: str=None, subscription_url: str=None, svn_url: str=None, tags_url: str=None, teams_url: str=None, temp_clone_token: str=None, template_repository: NullableRepositoryTemplateRepository=None, topics: List[str]=None, trees_url: str=None, updated_at: datetime=None, url: str=None, visibility: str='public', watchers: int=None, watchers_count: int=None):
        """Repository - a model defined in OpenAPI

        :param allow_forking: The allow_forking of this Repository.
        :param allow_merge_commit: The allow_merge_commit of this Repository.
        :param allow_rebase_merge: The allow_rebase_merge of this Repository.
        :param allow_squash_merge: The allow_squash_merge of this Repository.
        :param archive_url: The archive_url of this Repository.
        :param archived: The archived of this Repository.
        :param assignees_url: The assignees_url of this Repository.
        :param blobs_url: The blobs_url of this Repository.
        :param branches_url: The branches_url of this Repository.
        :param clone_url: The clone_url of this Repository.
        :param collaborators_url: The collaborators_url of this Repository.
        :param comments_url: The comments_url of this Repository.
        :param commits_url: The commits_url of this Repository.
        :param compare_url: The compare_url of this Repository.
        :param contents_url: The contents_url of this Repository.
        :param contributors_url: The contributors_url of this Repository.
        :param created_at: The created_at of this Repository.
        :param default_branch: The default_branch of this Repository.
        :param delete_branch_on_merge: The delete_branch_on_merge of this Repository.
        :param deployments_url: The deployments_url of this Repository.
        :param description: The description of this Repository.
        :param disabled: The disabled of this Repository.
        :param downloads_url: The downloads_url of this Repository.
        :param events_url: The events_url of this Repository.
        :param fork: The fork of this Repository.
        :param forks: The forks of this Repository.
        :param forks_count: The forks_count of this Repository.
        :param forks_url: The forks_url of this Repository.
        :param full_name: The full_name of this Repository.
        :param git_commits_url: The git_commits_url of this Repository.
        :param git_refs_url: The git_refs_url of this Repository.
        :param git_tags_url: The git_tags_url of this Repository.
        :param git_url: The git_url of this Repository.
        :param has_downloads: The has_downloads of this Repository.
        :param has_issues: The has_issues of this Repository.
        :param has_pages: The has_pages of this Repository.
        :param has_projects: The has_projects of this Repository.
        :param has_wiki: The has_wiki of this Repository.
        :param homepage: The homepage of this Repository.
        :param hooks_url: The hooks_url of this Repository.
        :param html_url: The html_url of this Repository.
        :param id: The id of this Repository.
        :param is_template: The is_template of this Repository.
        :param issue_comment_url: The issue_comment_url of this Repository.
        :param issue_events_url: The issue_events_url of this Repository.
        :param issues_url: The issues_url of this Repository.
        :param keys_url: The keys_url of this Repository.
        :param labels_url: The labels_url of this Repository.
        :param language: The language of this Repository.
        :param languages_url: The languages_url of this Repository.
        :param license: The license of this Repository.
        :param master_branch: The master_branch of this Repository.
        :param merges_url: The merges_url of this Repository.
        :param milestones_url: The milestones_url of this Repository.
        :param mirror_url: The mirror_url of this Repository.
        :param name: The name of this Repository.
        :param network_count: The network_count of this Repository.
        :param node_id: The node_id of this Repository.
        :param notifications_url: The notifications_url of this Repository.
        :param open_issues: The open_issues of this Repository.
        :param open_issues_count: The open_issues_count of this Repository.
        :param organization: The organization of this Repository.
        :param owner: The owner of this Repository.
        :param permissions: The permissions of this Repository.
        :param private: The private of this Repository.
        :param pulls_url: The pulls_url of this Repository.
        :param pushed_at: The pushed_at of this Repository.
        :param releases_url: The releases_url of this Repository.
        :param size: The size of this Repository.
        :param ssh_url: The ssh_url of this Repository.
        :param stargazers_count: The stargazers_count of this Repository.
        :param stargazers_url: The stargazers_url of this Repository.
        :param starred_at: The starred_at of this Repository.
        :param statuses_url: The statuses_url of this Repository.
        :param subscribers_count: The subscribers_count of this Repository.
        :param subscribers_url: The subscribers_url of this Repository.
        :param subscription_url: The subscription_url of this Repository.
        :param svn_url: The svn_url of this Repository.
        :param tags_url: The tags_url of this Repository.
        :param teams_url: The teams_url of this Repository.
        :param temp_clone_token: The temp_clone_token of this Repository.
        :param template_repository: The template_repository of this Repository.
        :param topics: The topics of this Repository.
        :param trees_url: The trees_url of this Repository.
        :param updated_at: The updated_at of this Repository.
        :param url: The url of this Repository.
        :param visibility: The visibility of this Repository.
        :param watchers: The watchers of this Repository.
        :param watchers_count: The watchers_count of this Repository.
        """
        self.openapi_types = {
            'allow_forking': bool,
            'allow_merge_commit': bool,
            'allow_rebase_merge': bool,
            'allow_squash_merge': bool,
            'archive_url': str,
            'archived': bool,
            'assignees_url': str,
            'blobs_url': str,
            'branches_url': str,
            'clone_url': str,
            'collaborators_url': str,
            'comments_url': str,
            'commits_url': str,
            'compare_url': str,
            'contents_url': str,
            'contributors_url': str,
            'created_at': datetime,
            'default_branch': str,
            'delete_branch_on_merge': bool,
            'deployments_url': str,
            'description': str,
            'disabled': bool,
            'downloads_url': str,
            'events_url': str,
            'fork': bool,
            'forks': int,
            'forks_count': int,
            'forks_url': str,
            'full_name': str,
            'git_commits_url': str,
            'git_refs_url': str,
            'git_tags_url': str,
            'git_url': str,
            'has_downloads': bool,
            'has_issues': bool,
            'has_pages': bool,
            'has_projects': bool,
            'has_wiki': bool,
            'homepage': str,
            'hooks_url': str,
            'html_url': str,
            'id': int,
            'is_template': bool,
            'issue_comment_url': str,
            'issue_events_url': str,
            'issues_url': str,
            'keys_url': str,
            'labels_url': str,
            'language': str,
            'languages_url': str,
            'license': NullableLicenseSimple,
            'master_branch': str,
            'merges_url': str,
            'milestones_url': str,
            'mirror_url': str,
            'name': str,
            'network_count': int,
            'node_id': str,
            'notifications_url': str,
            'open_issues': int,
            'open_issues_count': int,
            'organization': NullableSimpleUser,
            'owner': SimpleUser,
            'permissions': CollaboratorPermissions,
            'private': bool,
            'pulls_url': str,
            'pushed_at': datetime,
            'releases_url': str,
            'size': int,
            'ssh_url': str,
            'stargazers_count': int,
            'stargazers_url': str,
            'starred_at': str,
            'statuses_url': str,
            'subscribers_count': int,
            'subscribers_url': str,
            'subscription_url': str,
            'svn_url': str,
            'tags_url': str,
            'teams_url': str,
            'temp_clone_token': str,
            'template_repository': NullableRepositoryTemplateRepository,
            'topics': List[str],
            'trees_url': str,
            'updated_at': datetime,
            'url': str,
            'visibility': str,
            'watchers': int,
            'watchers_count': int
        }

        self.attribute_map = {
            'allow_forking': 'allow_forking',
            'allow_merge_commit': 'allow_merge_commit',
            'allow_rebase_merge': 'allow_rebase_merge',
            'allow_squash_merge': 'allow_squash_merge',
            'archive_url': 'archive_url',
            'archived': 'archived',
            'assignees_url': 'assignees_url',
            'blobs_url': 'blobs_url',
            'branches_url': 'branches_url',
            'clone_url': 'clone_url',
            'collaborators_url': 'collaborators_url',
            'comments_url': 'comments_url',
            'commits_url': 'commits_url',
            'compare_url': 'compare_url',
            'contents_url': 'contents_url',
            'contributors_url': 'contributors_url',
            'created_at': 'created_at',
            'default_branch': 'default_branch',
            'delete_branch_on_merge': 'delete_branch_on_merge',
            'deployments_url': 'deployments_url',
            'description': 'description',
            'disabled': 'disabled',
            'downloads_url': 'downloads_url',
            'events_url': 'events_url',
            'fork': 'fork',
            'forks': 'forks',
            'forks_count': 'forks_count',
            'forks_url': 'forks_url',
            'full_name': 'full_name',
            'git_commits_url': 'git_commits_url',
            'git_refs_url': 'git_refs_url',
            'git_tags_url': 'git_tags_url',
            'git_url': 'git_url',
            'has_downloads': 'has_downloads',
            'has_issues': 'has_issues',
            'has_pages': 'has_pages',
            'has_projects': 'has_projects',
            'has_wiki': 'has_wiki',
            'homepage': 'homepage',
            'hooks_url': 'hooks_url',
            'html_url': 'html_url',
            'id': 'id',
            'is_template': 'is_template',
            'issue_comment_url': 'issue_comment_url',
            'issue_events_url': 'issue_events_url',
            'issues_url': 'issues_url',
            'keys_url': 'keys_url',
            'labels_url': 'labels_url',
            'language': 'language',
            'languages_url': 'languages_url',
            'license': 'license',
            'master_branch': 'master_branch',
            'merges_url': 'merges_url',
            'milestones_url': 'milestones_url',
            'mirror_url': 'mirror_url',
            'name': 'name',
            'network_count': 'network_count',
            'node_id': 'node_id',
            'notifications_url': 'notifications_url',
            'open_issues': 'open_issues',
            'open_issues_count': 'open_issues_count',
            'organization': 'organization',
            'owner': 'owner',
            'permissions': 'permissions',
            'private': 'private',
            'pulls_url': 'pulls_url',
            'pushed_at': 'pushed_at',
            'releases_url': 'releases_url',
            'size': 'size',
            'ssh_url': 'ssh_url',
            'stargazers_count': 'stargazers_count',
            'stargazers_url': 'stargazers_url',
            'starred_at': 'starred_at',
            'statuses_url': 'statuses_url',
            'subscribers_count': 'subscribers_count',
            'subscribers_url': 'subscribers_url',
            'subscription_url': 'subscription_url',
            'svn_url': 'svn_url',
            'tags_url': 'tags_url',
            'teams_url': 'teams_url',
            'temp_clone_token': 'temp_clone_token',
            'template_repository': 'template_repository',
            'topics': 'topics',
            'trees_url': 'trees_url',
            'updated_at': 'updated_at',
            'url': 'url',
            'visibility': 'visibility',
            'watchers': 'watchers',
            'watchers_count': 'watchers_count'
        }

        self._allow_forking = allow_forking
        self._allow_merge_commit = allow_merge_commit
        self._allow_rebase_merge = allow_rebase_merge
        self._allow_squash_merge = allow_squash_merge
        self._archive_url = archive_url
        self._archived = archived
        self._assignees_url = assignees_url
        self._blobs_url = blobs_url
        self._branches_url = branches_url
        self._clone_url = clone_url
        self._collaborators_url = collaborators_url
        self._comments_url = comments_url
        self._commits_url = commits_url
        self._compare_url = compare_url
        self._contents_url = contents_url
        self._contributors_url = contributors_url
        self._created_at = created_at
        self._default_branch = default_branch
        self._delete_branch_on_merge = delete_branch_on_merge
        self._deployments_url = deployments_url
        self._description = description
        self._disabled = disabled
        self._downloads_url = downloads_url
        self._events_url = events_url
        self._fork = fork
        self._forks = forks
        self._forks_count = forks_count
        self._forks_url = forks_url
        self._full_name = full_name
        self._git_commits_url = git_commits_url
        self._git_refs_url = git_refs_url
        self._git_tags_url = git_tags_url
        self._git_url = git_url
        self._has_downloads = has_downloads
        self._has_issues = has_issues
        self._has_pages = has_pages
        self._has_projects = has_projects
        self._has_wiki = has_wiki
        self._homepage = homepage
        self._hooks_url = hooks_url
        self._html_url = html_url
        self._id = id
        self._is_template = is_template
        self._issue_comment_url = issue_comment_url
        self._issue_events_url = issue_events_url
        self._issues_url = issues_url
        self._keys_url = keys_url
        self._labels_url = labels_url
        self._language = language
        self._languages_url = languages_url
        self._license = license
        self._master_branch = master_branch
        self._merges_url = merges_url
        self._milestones_url = milestones_url
        self._mirror_url = mirror_url
        self._name = name
        self._network_count = network_count
        self._node_id = node_id
        self._notifications_url = notifications_url
        self._open_issues = open_issues
        self._open_issues_count = open_issues_count
        self._organization = organization
        self._owner = owner
        self._permissions = permissions
        self._private = private
        self._pulls_url = pulls_url
        self._pushed_at = pushed_at
        self._releases_url = releases_url
        self._size = size
        self._ssh_url = ssh_url
        self._stargazers_count = stargazers_count
        self._stargazers_url = stargazers_url
        self._starred_at = starred_at
        self._statuses_url = statuses_url
        self._subscribers_count = subscribers_count
        self._subscribers_url = subscribers_url
        self._subscription_url = subscription_url
        self._svn_url = svn_url
        self._tags_url = tags_url
        self._teams_url = teams_url
        self._temp_clone_token = temp_clone_token
        self._template_repository = template_repository
        self._topics = topics
        self._trees_url = trees_url
        self._updated_at = updated_at
        self._url = url
        self._visibility = visibility
        self._watchers = watchers
        self._watchers_count = watchers_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repository of this Repository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_forking(self):
        """Gets the allow_forking of this Repository.

        Whether to allow forking this repo

        :return: The allow_forking of this Repository.
        :rtype: bool
        """
        return self._allow_forking

    @allow_forking.setter
    def allow_forking(self, allow_forking):
        """Sets the allow_forking of this Repository.

        Whether to allow forking this repo

        :param allow_forking: The allow_forking of this Repository.
        :type allow_forking: bool
        """

        self._allow_forking = allow_forking

    @property
    def allow_merge_commit(self):
        """Gets the allow_merge_commit of this Repository.

        Whether to allow merge commits for pull requests.

        :return: The allow_merge_commit of this Repository.
        :rtype: bool
        """
        return self._allow_merge_commit

    @allow_merge_commit.setter
    def allow_merge_commit(self, allow_merge_commit):
        """Sets the allow_merge_commit of this Repository.

        Whether to allow merge commits for pull requests.

        :param allow_merge_commit: The allow_merge_commit of this Repository.
        :type allow_merge_commit: bool
        """

        self._allow_merge_commit = allow_merge_commit

    @property
    def allow_rebase_merge(self):
        """Gets the allow_rebase_merge of this Repository.

        Whether to allow rebase merges for pull requests.

        :return: The allow_rebase_merge of this Repository.
        :rtype: bool
        """
        return self._allow_rebase_merge

    @allow_rebase_merge.setter
    def allow_rebase_merge(self, allow_rebase_merge):
        """Sets the allow_rebase_merge of this Repository.

        Whether to allow rebase merges for pull requests.

        :param allow_rebase_merge: The allow_rebase_merge of this Repository.
        :type allow_rebase_merge: bool
        """

        self._allow_rebase_merge = allow_rebase_merge

    @property
    def allow_squash_merge(self):
        """Gets the allow_squash_merge of this Repository.

        Whether to allow squash merges for pull requests.

        :return: The allow_squash_merge of this Repository.
        :rtype: bool
        """
        return self._allow_squash_merge

    @allow_squash_merge.setter
    def allow_squash_merge(self, allow_squash_merge):
        """Sets the allow_squash_merge of this Repository.

        Whether to allow squash merges for pull requests.

        :param allow_squash_merge: The allow_squash_merge of this Repository.
        :type allow_squash_merge: bool
        """

        self._allow_squash_merge = allow_squash_merge

    @property
    def archive_url(self):
        """Gets the archive_url of this Repository.


        :return: The archive_url of this Repository.
        :rtype: str
        """
        return self._archive_url

    @archive_url.setter
    def archive_url(self, archive_url):
        """Sets the archive_url of this Repository.


        :param archive_url: The archive_url of this Repository.
        :type archive_url: str
        """
        if archive_url is None:
            raise ValueError("Invalid value for `archive_url`, must not be `None`")

        self._archive_url = archive_url

    @property
    def archived(self):
        """Gets the archived of this Repository.

        Whether the repository is archived.

        :return: The archived of this Repository.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Repository.

        Whether the repository is archived.

        :param archived: The archived of this Repository.
        :type archived: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")

        self._archived = archived

    @property
    def assignees_url(self):
        """Gets the assignees_url of this Repository.


        :return: The assignees_url of this Repository.
        :rtype: str
        """
        return self._assignees_url

    @assignees_url.setter
    def assignees_url(self, assignees_url):
        """Sets the assignees_url of this Repository.


        :param assignees_url: The assignees_url of this Repository.
        :type assignees_url: str
        """
        if assignees_url is None:
            raise ValueError("Invalid value for `assignees_url`, must not be `None`")

        self._assignees_url = assignees_url

    @property
    def blobs_url(self):
        """Gets the blobs_url of this Repository.


        :return: The blobs_url of this Repository.
        :rtype: str
        """
        return self._blobs_url

    @blobs_url.setter
    def blobs_url(self, blobs_url):
        """Sets the blobs_url of this Repository.


        :param blobs_url: The blobs_url of this Repository.
        :type blobs_url: str
        """
        if blobs_url is None:
            raise ValueError("Invalid value for `blobs_url`, must not be `None`")

        self._blobs_url = blobs_url

    @property
    def branches_url(self):
        """Gets the branches_url of this Repository.


        :return: The branches_url of this Repository.
        :rtype: str
        """
        return self._branches_url

    @branches_url.setter
    def branches_url(self, branches_url):
        """Sets the branches_url of this Repository.


        :param branches_url: The branches_url of this Repository.
        :type branches_url: str
        """
        if branches_url is None:
            raise ValueError("Invalid value for `branches_url`, must not be `None`")

        self._branches_url = branches_url

    @property
    def clone_url(self):
        """Gets the clone_url of this Repository.


        :return: The clone_url of this Repository.
        :rtype: str
        """
        return self._clone_url

    @clone_url.setter
    def clone_url(self, clone_url):
        """Sets the clone_url of this Repository.


        :param clone_url: The clone_url of this Repository.
        :type clone_url: str
        """
        if clone_url is None:
            raise ValueError("Invalid value for `clone_url`, must not be `None`")

        self._clone_url = clone_url

    @property
    def collaborators_url(self):
        """Gets the collaborators_url of this Repository.


        :return: The collaborators_url of this Repository.
        :rtype: str
        """
        return self._collaborators_url

    @collaborators_url.setter
    def collaborators_url(self, collaborators_url):
        """Sets the collaborators_url of this Repository.


        :param collaborators_url: The collaborators_url of this Repository.
        :type collaborators_url: str
        """
        if collaborators_url is None:
            raise ValueError("Invalid value for `collaborators_url`, must not be `None`")

        self._collaborators_url = collaborators_url

    @property
    def comments_url(self):
        """Gets the comments_url of this Repository.


        :return: The comments_url of this Repository.
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this Repository.


        :param comments_url: The comments_url of this Repository.
        :type comments_url: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")

        self._comments_url = comments_url

    @property
    def commits_url(self):
        """Gets the commits_url of this Repository.


        :return: The commits_url of this Repository.
        :rtype: str
        """
        return self._commits_url

    @commits_url.setter
    def commits_url(self, commits_url):
        """Sets the commits_url of this Repository.


        :param commits_url: The commits_url of this Repository.
        :type commits_url: str
        """
        if commits_url is None:
            raise ValueError("Invalid value for `commits_url`, must not be `None`")

        self._commits_url = commits_url

    @property
    def compare_url(self):
        """Gets the compare_url of this Repository.


        :return: The compare_url of this Repository.
        :rtype: str
        """
        return self._compare_url

    @compare_url.setter
    def compare_url(self, compare_url):
        """Sets the compare_url of this Repository.


        :param compare_url: The compare_url of this Repository.
        :type compare_url: str
        """
        if compare_url is None:
            raise ValueError("Invalid value for `compare_url`, must not be `None`")

        self._compare_url = compare_url

    @property
    def contents_url(self):
        """Gets the contents_url of this Repository.


        :return: The contents_url of this Repository.
        :rtype: str
        """
        return self._contents_url

    @contents_url.setter
    def contents_url(self, contents_url):
        """Sets the contents_url of this Repository.


        :param contents_url: The contents_url of this Repository.
        :type contents_url: str
        """
        if contents_url is None:
            raise ValueError("Invalid value for `contents_url`, must not be `None`")

        self._contents_url = contents_url

    @property
    def contributors_url(self):
        """Gets the contributors_url of this Repository.


        :return: The contributors_url of this Repository.
        :rtype: str
        """
        return self._contributors_url

    @contributors_url.setter
    def contributors_url(self, contributors_url):
        """Sets the contributors_url of this Repository.


        :param contributors_url: The contributors_url of this Repository.
        :type contributors_url: str
        """
        if contributors_url is None:
            raise ValueError("Invalid value for `contributors_url`, must not be `None`")

        self._contributors_url = contributors_url

    @property
    def created_at(self):
        """Gets the created_at of this Repository.


        :return: The created_at of this Repository.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Repository.


        :param created_at: The created_at of this Repository.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def default_branch(self):
        """Gets the default_branch of this Repository.

        The default branch of the repository.

        :return: The default_branch of this Repository.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this Repository.

        The default branch of the repository.

        :param default_branch: The default_branch of this Repository.
        :type default_branch: str
        """
        if default_branch is None:
            raise ValueError("Invalid value for `default_branch`, must not be `None`")

        self._default_branch = default_branch

    @property
    def delete_branch_on_merge(self):
        """Gets the delete_branch_on_merge of this Repository.

        Whether to delete head branches when pull requests are merged

        :return: The delete_branch_on_merge of this Repository.
        :rtype: bool
        """
        return self._delete_branch_on_merge

    @delete_branch_on_merge.setter
    def delete_branch_on_merge(self, delete_branch_on_merge):
        """Sets the delete_branch_on_merge of this Repository.

        Whether to delete head branches when pull requests are merged

        :param delete_branch_on_merge: The delete_branch_on_merge of this Repository.
        :type delete_branch_on_merge: bool
        """

        self._delete_branch_on_merge = delete_branch_on_merge

    @property
    def deployments_url(self):
        """Gets the deployments_url of this Repository.


        :return: The deployments_url of this Repository.
        :rtype: str
        """
        return self._deployments_url

    @deployments_url.setter
    def deployments_url(self, deployments_url):
        """Sets the deployments_url of this Repository.


        :param deployments_url: The deployments_url of this Repository.
        :type deployments_url: str
        """
        if deployments_url is None:
            raise ValueError("Invalid value for `deployments_url`, must not be `None`")

        self._deployments_url = deployments_url

    @property
    def description(self):
        """Gets the description of this Repository.


        :return: The description of this Repository.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repository.


        :param description: The description of this Repository.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this Repository.

        Returns whether or not this repository disabled.

        :return: The disabled of this Repository.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Repository.

        Returns whether or not this repository disabled.

        :param disabled: The disabled of this Repository.
        :type disabled: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")

        self._disabled = disabled

    @property
    def downloads_url(self):
        """Gets the downloads_url of this Repository.


        :return: The downloads_url of this Repository.
        :rtype: str
        """
        return self._downloads_url

    @downloads_url.setter
    def downloads_url(self, downloads_url):
        """Sets the downloads_url of this Repository.


        :param downloads_url: The downloads_url of this Repository.
        :type downloads_url: str
        """
        if downloads_url is None:
            raise ValueError("Invalid value for `downloads_url`, must not be `None`")

        self._downloads_url = downloads_url

    @property
    def events_url(self):
        """Gets the events_url of this Repository.


        :return: The events_url of this Repository.
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this Repository.


        :param events_url: The events_url of this Repository.
        :type events_url: str
        """
        if events_url is None:
            raise ValueError("Invalid value for `events_url`, must not be `None`")

        self._events_url = events_url

    @property
    def fork(self):
        """Gets the fork of this Repository.


        :return: The fork of this Repository.
        :rtype: bool
        """
        return self._fork

    @fork.setter
    def fork(self, fork):
        """Sets the fork of this Repository.


        :param fork: The fork of this Repository.
        :type fork: bool
        """
        if fork is None:
            raise ValueError("Invalid value for `fork`, must not be `None`")

        self._fork = fork

    @property
    def forks(self):
        """Gets the forks of this Repository.


        :return: The forks of this Repository.
        :rtype: int
        """
        return self._forks

    @forks.setter
    def forks(self, forks):
        """Sets the forks of this Repository.


        :param forks: The forks of this Repository.
        :type forks: int
        """
        if forks is None:
            raise ValueError("Invalid value for `forks`, must not be `None`")

        self._forks = forks

    @property
    def forks_count(self):
        """Gets the forks_count of this Repository.


        :return: The forks_count of this Repository.
        :rtype: int
        """
        return self._forks_count

    @forks_count.setter
    def forks_count(self, forks_count):
        """Sets the forks_count of this Repository.


        :param forks_count: The forks_count of this Repository.
        :type forks_count: int
        """
        if forks_count is None:
            raise ValueError("Invalid value for `forks_count`, must not be `None`")

        self._forks_count = forks_count

    @property
    def forks_url(self):
        """Gets the forks_url of this Repository.


        :return: The forks_url of this Repository.
        :rtype: str
        """
        return self._forks_url

    @forks_url.setter
    def forks_url(self, forks_url):
        """Sets the forks_url of this Repository.


        :param forks_url: The forks_url of this Repository.
        :type forks_url: str
        """
        if forks_url is None:
            raise ValueError("Invalid value for `forks_url`, must not be `None`")

        self._forks_url = forks_url

    @property
    def full_name(self):
        """Gets the full_name of this Repository.


        :return: The full_name of this Repository.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Repository.


        :param full_name: The full_name of this Repository.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def git_commits_url(self):
        """Gets the git_commits_url of this Repository.


        :return: The git_commits_url of this Repository.
        :rtype: str
        """
        return self._git_commits_url

    @git_commits_url.setter
    def git_commits_url(self, git_commits_url):
        """Sets the git_commits_url of this Repository.


        :param git_commits_url: The git_commits_url of this Repository.
        :type git_commits_url: str
        """
        if git_commits_url is None:
            raise ValueError("Invalid value for `git_commits_url`, must not be `None`")

        self._git_commits_url = git_commits_url

    @property
    def git_refs_url(self):
        """Gets the git_refs_url of this Repository.


        :return: The git_refs_url of this Repository.
        :rtype: str
        """
        return self._git_refs_url

    @git_refs_url.setter
    def git_refs_url(self, git_refs_url):
        """Sets the git_refs_url of this Repository.


        :param git_refs_url: The git_refs_url of this Repository.
        :type git_refs_url: str
        """
        if git_refs_url is None:
            raise ValueError("Invalid value for `git_refs_url`, must not be `None`")

        self._git_refs_url = git_refs_url

    @property
    def git_tags_url(self):
        """Gets the git_tags_url of this Repository.


        :return: The git_tags_url of this Repository.
        :rtype: str
        """
        return self._git_tags_url

    @git_tags_url.setter
    def git_tags_url(self, git_tags_url):
        """Sets the git_tags_url of this Repository.


        :param git_tags_url: The git_tags_url of this Repository.
        :type git_tags_url: str
        """
        if git_tags_url is None:
            raise ValueError("Invalid value for `git_tags_url`, must not be `None`")

        self._git_tags_url = git_tags_url

    @property
    def git_url(self):
        """Gets the git_url of this Repository.


        :return: The git_url of this Repository.
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this Repository.


        :param git_url: The git_url of this Repository.
        :type git_url: str
        """
        if git_url is None:
            raise ValueError("Invalid value for `git_url`, must not be `None`")

        self._git_url = git_url

    @property
    def has_downloads(self):
        """Gets the has_downloads of this Repository.

        Whether downloads are enabled.

        :return: The has_downloads of this Repository.
        :rtype: bool
        """
        return self._has_downloads

    @has_downloads.setter
    def has_downloads(self, has_downloads):
        """Sets the has_downloads of this Repository.

        Whether downloads are enabled.

        :param has_downloads: The has_downloads of this Repository.
        :type has_downloads: bool
        """
        if has_downloads is None:
            raise ValueError("Invalid value for `has_downloads`, must not be `None`")

        self._has_downloads = has_downloads

    @property
    def has_issues(self):
        """Gets the has_issues of this Repository.

        Whether issues are enabled.

        :return: The has_issues of this Repository.
        :rtype: bool
        """
        return self._has_issues

    @has_issues.setter
    def has_issues(self, has_issues):
        """Sets the has_issues of this Repository.

        Whether issues are enabled.

        :param has_issues: The has_issues of this Repository.
        :type has_issues: bool
        """
        if has_issues is None:
            raise ValueError("Invalid value for `has_issues`, must not be `None`")

        self._has_issues = has_issues

    @property
    def has_pages(self):
        """Gets the has_pages of this Repository.


        :return: The has_pages of this Repository.
        :rtype: bool
        """
        return self._has_pages

    @has_pages.setter
    def has_pages(self, has_pages):
        """Sets the has_pages of this Repository.


        :param has_pages: The has_pages of this Repository.
        :type has_pages: bool
        """
        if has_pages is None:
            raise ValueError("Invalid value for `has_pages`, must not be `None`")

        self._has_pages = has_pages

    @property
    def has_projects(self):
        """Gets the has_projects of this Repository.

        Whether projects are enabled.

        :return: The has_projects of this Repository.
        :rtype: bool
        """
        return self._has_projects

    @has_projects.setter
    def has_projects(self, has_projects):
        """Sets the has_projects of this Repository.

        Whether projects are enabled.

        :param has_projects: The has_projects of this Repository.
        :type has_projects: bool
        """
        if has_projects is None:
            raise ValueError("Invalid value for `has_projects`, must not be `None`")

        self._has_projects = has_projects

    @property
    def has_wiki(self):
        """Gets the has_wiki of this Repository.

        Whether the wiki is enabled.

        :return: The has_wiki of this Repository.
        :rtype: bool
        """
        return self._has_wiki

    @has_wiki.setter
    def has_wiki(self, has_wiki):
        """Sets the has_wiki of this Repository.

        Whether the wiki is enabled.

        :param has_wiki: The has_wiki of this Repository.
        :type has_wiki: bool
        """
        if has_wiki is None:
            raise ValueError("Invalid value for `has_wiki`, must not be `None`")

        self._has_wiki = has_wiki

    @property
    def homepage(self):
        """Gets the homepage of this Repository.


        :return: The homepage of this Repository.
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this Repository.


        :param homepage: The homepage of this Repository.
        :type homepage: str
        """
        if homepage is None:
            raise ValueError("Invalid value for `homepage`, must not be `None`")

        self._homepage = homepage

    @property
    def hooks_url(self):
        """Gets the hooks_url of this Repository.


        :return: The hooks_url of this Repository.
        :rtype: str
        """
        return self._hooks_url

    @hooks_url.setter
    def hooks_url(self, hooks_url):
        """Sets the hooks_url of this Repository.


        :param hooks_url: The hooks_url of this Repository.
        :type hooks_url: str
        """
        if hooks_url is None:
            raise ValueError("Invalid value for `hooks_url`, must not be `None`")

        self._hooks_url = hooks_url

    @property
    def html_url(self):
        """Gets the html_url of this Repository.


        :return: The html_url of this Repository.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Repository.


        :param html_url: The html_url of this Repository.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Repository.

        Unique identifier of the repository

        :return: The id of this Repository.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repository.

        Unique identifier of the repository

        :param id: The id of this Repository.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_template(self):
        """Gets the is_template of this Repository.

        Whether this repository acts as a template that can be used to generate new repositories.

        :return: The is_template of this Repository.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this Repository.

        Whether this repository acts as a template that can be used to generate new repositories.

        :param is_template: The is_template of this Repository.
        :type is_template: bool
        """

        self._is_template = is_template

    @property
    def issue_comment_url(self):
        """Gets the issue_comment_url of this Repository.


        :return: The issue_comment_url of this Repository.
        :rtype: str
        """
        return self._issue_comment_url

    @issue_comment_url.setter
    def issue_comment_url(self, issue_comment_url):
        """Sets the issue_comment_url of this Repository.


        :param issue_comment_url: The issue_comment_url of this Repository.
        :type issue_comment_url: str
        """
        if issue_comment_url is None:
            raise ValueError("Invalid value for `issue_comment_url`, must not be `None`")

        self._issue_comment_url = issue_comment_url

    @property
    def issue_events_url(self):
        """Gets the issue_events_url of this Repository.


        :return: The issue_events_url of this Repository.
        :rtype: str
        """
        return self._issue_events_url

    @issue_events_url.setter
    def issue_events_url(self, issue_events_url):
        """Sets the issue_events_url of this Repository.


        :param issue_events_url: The issue_events_url of this Repository.
        :type issue_events_url: str
        """
        if issue_events_url is None:
            raise ValueError("Invalid value for `issue_events_url`, must not be `None`")

        self._issue_events_url = issue_events_url

    @property
    def issues_url(self):
        """Gets the issues_url of this Repository.


        :return: The issues_url of this Repository.
        :rtype: str
        """
        return self._issues_url

    @issues_url.setter
    def issues_url(self, issues_url):
        """Sets the issues_url of this Repository.


        :param issues_url: The issues_url of this Repository.
        :type issues_url: str
        """
        if issues_url is None:
            raise ValueError("Invalid value for `issues_url`, must not be `None`")

        self._issues_url = issues_url

    @property
    def keys_url(self):
        """Gets the keys_url of this Repository.


        :return: The keys_url of this Repository.
        :rtype: str
        """
        return self._keys_url

    @keys_url.setter
    def keys_url(self, keys_url):
        """Sets the keys_url of this Repository.


        :param keys_url: The keys_url of this Repository.
        :type keys_url: str
        """
        if keys_url is None:
            raise ValueError("Invalid value for `keys_url`, must not be `None`")

        self._keys_url = keys_url

    @property
    def labels_url(self):
        """Gets the labels_url of this Repository.


        :return: The labels_url of this Repository.
        :rtype: str
        """
        return self._labels_url

    @labels_url.setter
    def labels_url(self, labels_url):
        """Sets the labels_url of this Repository.


        :param labels_url: The labels_url of this Repository.
        :type labels_url: str
        """
        if labels_url is None:
            raise ValueError("Invalid value for `labels_url`, must not be `None`")

        self._labels_url = labels_url

    @property
    def language(self):
        """Gets the language of this Repository.


        :return: The language of this Repository.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Repository.


        :param language: The language of this Repository.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def languages_url(self):
        """Gets the languages_url of this Repository.


        :return: The languages_url of this Repository.
        :rtype: str
        """
        return self._languages_url

    @languages_url.setter
    def languages_url(self, languages_url):
        """Sets the languages_url of this Repository.


        :param languages_url: The languages_url of this Repository.
        :type languages_url: str
        """
        if languages_url is None:
            raise ValueError("Invalid value for `languages_url`, must not be `None`")

        self._languages_url = languages_url

    @property
    def license(self):
        """Gets the license of this Repository.


        :return: The license of this Repository.
        :rtype: NullableLicenseSimple
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Repository.


        :param license: The license of this Repository.
        :type license: NullableLicenseSimple
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")

        self._license = license

    @property
    def master_branch(self):
        """Gets the master_branch of this Repository.


        :return: The master_branch of this Repository.
        :rtype: str
        """
        return self._master_branch

    @master_branch.setter
    def master_branch(self, master_branch):
        """Sets the master_branch of this Repository.


        :param master_branch: The master_branch of this Repository.
        :type master_branch: str
        """

        self._master_branch = master_branch

    @property
    def merges_url(self):
        """Gets the merges_url of this Repository.


        :return: The merges_url of this Repository.
        :rtype: str
        """
        return self._merges_url

    @merges_url.setter
    def merges_url(self, merges_url):
        """Sets the merges_url of this Repository.


        :param merges_url: The merges_url of this Repository.
        :type merges_url: str
        """
        if merges_url is None:
            raise ValueError("Invalid value for `merges_url`, must not be `None`")

        self._merges_url = merges_url

    @property
    def milestones_url(self):
        """Gets the milestones_url of this Repository.


        :return: The milestones_url of this Repository.
        :rtype: str
        """
        return self._milestones_url

    @milestones_url.setter
    def milestones_url(self, milestones_url):
        """Sets the milestones_url of this Repository.


        :param milestones_url: The milestones_url of this Repository.
        :type milestones_url: str
        """
        if milestones_url is None:
            raise ValueError("Invalid value for `milestones_url`, must not be `None`")

        self._milestones_url = milestones_url

    @property
    def mirror_url(self):
        """Gets the mirror_url of this Repository.


        :return: The mirror_url of this Repository.
        :rtype: str
        """
        return self._mirror_url

    @mirror_url.setter
    def mirror_url(self, mirror_url):
        """Sets the mirror_url of this Repository.


        :param mirror_url: The mirror_url of this Repository.
        :type mirror_url: str
        """
        if mirror_url is None:
            raise ValueError("Invalid value for `mirror_url`, must not be `None`")

        self._mirror_url = mirror_url

    @property
    def name(self):
        """Gets the name of this Repository.

        The name of the repository.

        :return: The name of this Repository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.

        The name of the repository.

        :param name: The name of this Repository.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_count(self):
        """Gets the network_count of this Repository.


        :return: The network_count of this Repository.
        :rtype: int
        """
        return self._network_count

    @network_count.setter
    def network_count(self, network_count):
        """Sets the network_count of this Repository.


        :param network_count: The network_count of this Repository.
        :type network_count: int
        """

        self._network_count = network_count

    @property
    def node_id(self):
        """Gets the node_id of this Repository.


        :return: The node_id of this Repository.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Repository.


        :param node_id: The node_id of this Repository.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def notifications_url(self):
        """Gets the notifications_url of this Repository.


        :return: The notifications_url of this Repository.
        :rtype: str
        """
        return self._notifications_url

    @notifications_url.setter
    def notifications_url(self, notifications_url):
        """Sets the notifications_url of this Repository.


        :param notifications_url: The notifications_url of this Repository.
        :type notifications_url: str
        """
        if notifications_url is None:
            raise ValueError("Invalid value for `notifications_url`, must not be `None`")

        self._notifications_url = notifications_url

    @property
    def open_issues(self):
        """Gets the open_issues of this Repository.


        :return: The open_issues of this Repository.
        :rtype: int
        """
        return self._open_issues

    @open_issues.setter
    def open_issues(self, open_issues):
        """Sets the open_issues of this Repository.


        :param open_issues: The open_issues of this Repository.
        :type open_issues: int
        """
        if open_issues is None:
            raise ValueError("Invalid value for `open_issues`, must not be `None`")

        self._open_issues = open_issues

    @property
    def open_issues_count(self):
        """Gets the open_issues_count of this Repository.


        :return: The open_issues_count of this Repository.
        :rtype: int
        """
        return self._open_issues_count

    @open_issues_count.setter
    def open_issues_count(self, open_issues_count):
        """Sets the open_issues_count of this Repository.


        :param open_issues_count: The open_issues_count of this Repository.
        :type open_issues_count: int
        """
        if open_issues_count is None:
            raise ValueError("Invalid value for `open_issues_count`, must not be `None`")

        self._open_issues_count = open_issues_count

    @property
    def organization(self):
        """Gets the organization of this Repository.


        :return: The organization of this Repository.
        :rtype: NullableSimpleUser
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Repository.


        :param organization: The organization of this Repository.
        :type organization: NullableSimpleUser
        """

        self._organization = organization

    @property
    def owner(self):
        """Gets the owner of this Repository.


        :return: The owner of this Repository.
        :rtype: SimpleUser
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Repository.


        :param owner: The owner of this Repository.
        :type owner: SimpleUser
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this Repository.


        :return: The permissions of this Repository.
        :rtype: CollaboratorPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Repository.


        :param permissions: The permissions of this Repository.
        :type permissions: CollaboratorPermissions
        """

        self._permissions = permissions

    @property
    def private(self):
        """Gets the private of this Repository.

        Whether the repository is private or public.

        :return: The private of this Repository.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Repository.

        Whether the repository is private or public.

        :param private: The private of this Repository.
        :type private: bool
        """
        if private is None:
            raise ValueError("Invalid value for `private`, must not be `None`")

        self._private = private

    @property
    def pulls_url(self):
        """Gets the pulls_url of this Repository.


        :return: The pulls_url of this Repository.
        :rtype: str
        """
        return self._pulls_url

    @pulls_url.setter
    def pulls_url(self, pulls_url):
        """Sets the pulls_url of this Repository.


        :param pulls_url: The pulls_url of this Repository.
        :type pulls_url: str
        """
        if pulls_url is None:
            raise ValueError("Invalid value for `pulls_url`, must not be `None`")

        self._pulls_url = pulls_url

    @property
    def pushed_at(self):
        """Gets the pushed_at of this Repository.


        :return: The pushed_at of this Repository.
        :rtype: datetime
        """
        return self._pushed_at

    @pushed_at.setter
    def pushed_at(self, pushed_at):
        """Sets the pushed_at of this Repository.


        :param pushed_at: The pushed_at of this Repository.
        :type pushed_at: datetime
        """
        if pushed_at is None:
            raise ValueError("Invalid value for `pushed_at`, must not be `None`")

        self._pushed_at = pushed_at

    @property
    def releases_url(self):
        """Gets the releases_url of this Repository.


        :return: The releases_url of this Repository.
        :rtype: str
        """
        return self._releases_url

    @releases_url.setter
    def releases_url(self, releases_url):
        """Sets the releases_url of this Repository.


        :param releases_url: The releases_url of this Repository.
        :type releases_url: str
        """
        if releases_url is None:
            raise ValueError("Invalid value for `releases_url`, must not be `None`")

        self._releases_url = releases_url

    @property
    def size(self):
        """Gets the size of this Repository.


        :return: The size of this Repository.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Repository.


        :param size: The size of this Repository.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def ssh_url(self):
        """Gets the ssh_url of this Repository.


        :return: The ssh_url of this Repository.
        :rtype: str
        """
        return self._ssh_url

    @ssh_url.setter
    def ssh_url(self, ssh_url):
        """Sets the ssh_url of this Repository.


        :param ssh_url: The ssh_url of this Repository.
        :type ssh_url: str
        """
        if ssh_url is None:
            raise ValueError("Invalid value for `ssh_url`, must not be `None`")

        self._ssh_url = ssh_url

    @property
    def stargazers_count(self):
        """Gets the stargazers_count of this Repository.


        :return: The stargazers_count of this Repository.
        :rtype: int
        """
        return self._stargazers_count

    @stargazers_count.setter
    def stargazers_count(self, stargazers_count):
        """Sets the stargazers_count of this Repository.


        :param stargazers_count: The stargazers_count of this Repository.
        :type stargazers_count: int
        """
        if stargazers_count is None:
            raise ValueError("Invalid value for `stargazers_count`, must not be `None`")

        self._stargazers_count = stargazers_count

    @property
    def stargazers_url(self):
        """Gets the stargazers_url of this Repository.


        :return: The stargazers_url of this Repository.
        :rtype: str
        """
        return self._stargazers_url

    @stargazers_url.setter
    def stargazers_url(self, stargazers_url):
        """Sets the stargazers_url of this Repository.


        :param stargazers_url: The stargazers_url of this Repository.
        :type stargazers_url: str
        """
        if stargazers_url is None:
            raise ValueError("Invalid value for `stargazers_url`, must not be `None`")

        self._stargazers_url = stargazers_url

    @property
    def starred_at(self):
        """Gets the starred_at of this Repository.


        :return: The starred_at of this Repository.
        :rtype: str
        """
        return self._starred_at

    @starred_at.setter
    def starred_at(self, starred_at):
        """Sets the starred_at of this Repository.


        :param starred_at: The starred_at of this Repository.
        :type starred_at: str
        """

        self._starred_at = starred_at

    @property
    def statuses_url(self):
        """Gets the statuses_url of this Repository.


        :return: The statuses_url of this Repository.
        :rtype: str
        """
        return self._statuses_url

    @statuses_url.setter
    def statuses_url(self, statuses_url):
        """Sets the statuses_url of this Repository.


        :param statuses_url: The statuses_url of this Repository.
        :type statuses_url: str
        """
        if statuses_url is None:
            raise ValueError("Invalid value for `statuses_url`, must not be `None`")

        self._statuses_url = statuses_url

    @property
    def subscribers_count(self):
        """Gets the subscribers_count of this Repository.


        :return: The subscribers_count of this Repository.
        :rtype: int
        """
        return self._subscribers_count

    @subscribers_count.setter
    def subscribers_count(self, subscribers_count):
        """Sets the subscribers_count of this Repository.


        :param subscribers_count: The subscribers_count of this Repository.
        :type subscribers_count: int
        """

        self._subscribers_count = subscribers_count

    @property
    def subscribers_url(self):
        """Gets the subscribers_url of this Repository.


        :return: The subscribers_url of this Repository.
        :rtype: str
        """
        return self._subscribers_url

    @subscribers_url.setter
    def subscribers_url(self, subscribers_url):
        """Sets the subscribers_url of this Repository.


        :param subscribers_url: The subscribers_url of this Repository.
        :type subscribers_url: str
        """
        if subscribers_url is None:
            raise ValueError("Invalid value for `subscribers_url`, must not be `None`")

        self._subscribers_url = subscribers_url

    @property
    def subscription_url(self):
        """Gets the subscription_url of this Repository.


        :return: The subscription_url of this Repository.
        :rtype: str
        """
        return self._subscription_url

    @subscription_url.setter
    def subscription_url(self, subscription_url):
        """Sets the subscription_url of this Repository.


        :param subscription_url: The subscription_url of this Repository.
        :type subscription_url: str
        """
        if subscription_url is None:
            raise ValueError("Invalid value for `subscription_url`, must not be `None`")

        self._subscription_url = subscription_url

    @property
    def svn_url(self):
        """Gets the svn_url of this Repository.


        :return: The svn_url of this Repository.
        :rtype: str
        """
        return self._svn_url

    @svn_url.setter
    def svn_url(self, svn_url):
        """Sets the svn_url of this Repository.


        :param svn_url: The svn_url of this Repository.
        :type svn_url: str
        """
        if svn_url is None:
            raise ValueError("Invalid value for `svn_url`, must not be `None`")

        self._svn_url = svn_url

    @property
    def tags_url(self):
        """Gets the tags_url of this Repository.


        :return: The tags_url of this Repository.
        :rtype: str
        """
        return self._tags_url

    @tags_url.setter
    def tags_url(self, tags_url):
        """Sets the tags_url of this Repository.


        :param tags_url: The tags_url of this Repository.
        :type tags_url: str
        """
        if tags_url is None:
            raise ValueError("Invalid value for `tags_url`, must not be `None`")

        self._tags_url = tags_url

    @property
    def teams_url(self):
        """Gets the teams_url of this Repository.


        :return: The teams_url of this Repository.
        :rtype: str
        """
        return self._teams_url

    @teams_url.setter
    def teams_url(self, teams_url):
        """Sets the teams_url of this Repository.


        :param teams_url: The teams_url of this Repository.
        :type teams_url: str
        """
        if teams_url is None:
            raise ValueError("Invalid value for `teams_url`, must not be `None`")

        self._teams_url = teams_url

    @property
    def temp_clone_token(self):
        """Gets the temp_clone_token of this Repository.


        :return: The temp_clone_token of this Repository.
        :rtype: str
        """
        return self._temp_clone_token

    @temp_clone_token.setter
    def temp_clone_token(self, temp_clone_token):
        """Sets the temp_clone_token of this Repository.


        :param temp_clone_token: The temp_clone_token of this Repository.
        :type temp_clone_token: str
        """

        self._temp_clone_token = temp_clone_token

    @property
    def template_repository(self):
        """Gets the template_repository of this Repository.


        :return: The template_repository of this Repository.
        :rtype: NullableRepositoryTemplateRepository
        """
        return self._template_repository

    @template_repository.setter
    def template_repository(self, template_repository):
        """Sets the template_repository of this Repository.


        :param template_repository: The template_repository of this Repository.
        :type template_repository: NullableRepositoryTemplateRepository
        """

        self._template_repository = template_repository

    @property
    def topics(self):
        """Gets the topics of this Repository.


        :return: The topics of this Repository.
        :rtype: List[str]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this Repository.


        :param topics: The topics of this Repository.
        :type topics: List[str]
        """

        self._topics = topics

    @property
    def trees_url(self):
        """Gets the trees_url of this Repository.


        :return: The trees_url of this Repository.
        :rtype: str
        """
        return self._trees_url

    @trees_url.setter
    def trees_url(self, trees_url):
        """Sets the trees_url of this Repository.


        :param trees_url: The trees_url of this Repository.
        :type trees_url: str
        """
        if trees_url is None:
            raise ValueError("Invalid value for `trees_url`, must not be `None`")

        self._trees_url = trees_url

    @property
    def updated_at(self):
        """Gets the updated_at of this Repository.


        :return: The updated_at of this Repository.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Repository.


        :param updated_at: The updated_at of this Repository.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Repository.


        :return: The url of this Repository.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repository.


        :param url: The url of this Repository.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def visibility(self):
        """Gets the visibility of this Repository.

        The repository visibility: public, private, or internal.

        :return: The visibility of this Repository.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Repository.

        The repository visibility: public, private, or internal.

        :param visibility: The visibility of this Repository.
        :type visibility: str
        """

        self._visibility = visibility

    @property
    def watchers(self):
        """Gets the watchers of this Repository.


        :return: The watchers of this Repository.
        :rtype: int
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers):
        """Sets the watchers of this Repository.


        :param watchers: The watchers of this Repository.
        :type watchers: int
        """
        if watchers is None:
            raise ValueError("Invalid value for `watchers`, must not be `None`")

        self._watchers = watchers

    @property
    def watchers_count(self):
        """Gets the watchers_count of this Repository.


        :return: The watchers_count of this Repository.
        :rtype: int
        """
        return self._watchers_count

    @watchers_count.setter
    def watchers_count(self, watchers_count):
        """Sets the watchers_count of this Repository.


        :param watchers_count: The watchers_count of this Repository.
        :type watchers_count: int
        """
        if watchers_count is None:
            raise ValueError("Invalid value for `watchers_count`, must not be `None`")

        self._watchers_count = watchers_count
