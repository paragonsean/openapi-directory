# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobStepsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_at: datetime=None, conclusion: str=None, name: str=None, number: int=None, started_at: datetime=None, status: str=None):
        """JobStepsInner - a model defined in OpenAPI

        :param completed_at: The completed_at of this JobStepsInner.
        :param conclusion: The conclusion of this JobStepsInner.
        :param name: The name of this JobStepsInner.
        :param number: The number of this JobStepsInner.
        :param started_at: The started_at of this JobStepsInner.
        :param status: The status of this JobStepsInner.
        """
        self.openapi_types = {
            'completed_at': datetime,
            'conclusion': str,
            'name': str,
            'number': int,
            'started_at': datetime,
            'status': str
        }

        self.attribute_map = {
            'completed_at': 'completed_at',
            'conclusion': 'conclusion',
            'name': 'name',
            'number': 'number',
            'started_at': 'started_at',
            'status': 'status'
        }

        self._completed_at = completed_at
        self._conclusion = conclusion
        self._name = name
        self._number = number
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStepsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The job_steps_inner of this JobStepsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_at(self):
        """Gets the completed_at of this JobStepsInner.

        The time that the job finished, in ISO 8601 format.

        :return: The completed_at of this JobStepsInner.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this JobStepsInner.

        The time that the job finished, in ISO 8601 format.

        :param completed_at: The completed_at of this JobStepsInner.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def conclusion(self):
        """Gets the conclusion of this JobStepsInner.

        The outcome of the job.

        :return: The conclusion of this JobStepsInner.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this JobStepsInner.

        The outcome of the job.

        :param conclusion: The conclusion of this JobStepsInner.
        :type conclusion: str
        """
        if conclusion is None:
            raise ValueError("Invalid value for `conclusion`, must not be `None`")

        self._conclusion = conclusion

    @property
    def name(self):
        """Gets the name of this JobStepsInner.

        The name of the job.

        :return: The name of this JobStepsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobStepsInner.

        The name of the job.

        :param name: The name of this JobStepsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this JobStepsInner.


        :return: The number of this JobStepsInner.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this JobStepsInner.


        :param number: The number of this JobStepsInner.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def started_at(self):
        """Gets the started_at of this JobStepsInner.

        The time that the step started, in ISO 8601 format.

        :return: The started_at of this JobStepsInner.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this JobStepsInner.

        The time that the step started, in ISO 8601 format.

        :param started_at: The started_at of this JobStepsInner.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this JobStepsInner.

        The phase of the lifecycle that the job is currently in.

        :return: The status of this JobStepsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobStepsInner.

        The phase of the lifecycle that the job is currently in.

        :param status: The status of this JobStepsInner.
        :type status: str
        """
        allowed_values = ["queued", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
