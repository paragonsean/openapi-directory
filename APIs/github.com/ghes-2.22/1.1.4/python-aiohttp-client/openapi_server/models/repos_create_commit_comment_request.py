# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposCreateCommitCommentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, line: int=None, path: str=None, position: int=None):
        """ReposCreateCommitCommentRequest - a model defined in OpenAPI

        :param body: The body of this ReposCreateCommitCommentRequest.
        :param line: The line of this ReposCreateCommitCommentRequest.
        :param path: The path of this ReposCreateCommitCommentRequest.
        :param position: The position of this ReposCreateCommitCommentRequest.
        """
        self.openapi_types = {
            'body': str,
            'line': int,
            'path': str,
            'position': int
        }

        self.attribute_map = {
            'body': 'body',
            'line': 'line',
            'path': 'path',
            'position': 'position'
        }

        self._body = body
        self._line = line
        self._path = path
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposCreateCommitCommentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_create_commit_comment_request of this ReposCreateCommitCommentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ReposCreateCommitCommentRequest.

        The contents of the comment.

        :return: The body of this ReposCreateCommitCommentRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ReposCreateCommitCommentRequest.

        The contents of the comment.

        :param body: The body of this ReposCreateCommitCommentRequest.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def line(self):
        """Gets the line of this ReposCreateCommitCommentRequest.

        **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.

        :return: The line of this ReposCreateCommitCommentRequest.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ReposCreateCommitCommentRequest.

        **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.

        :param line: The line of this ReposCreateCommitCommentRequest.
        :type line: int
        """

        self._line = line

    @property
    def path(self):
        """Gets the path of this ReposCreateCommitCommentRequest.

        Relative path of the file to comment on.

        :return: The path of this ReposCreateCommitCommentRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ReposCreateCommitCommentRequest.

        Relative path of the file to comment on.

        :param path: The path of this ReposCreateCommitCommentRequest.
        :type path: str
        """

        self._path = path

    @property
    def position(self):
        """Gets the position of this ReposCreateCommitCommentRequest.

        Line index in the diff to comment on.

        :return: The position of this ReposCreateCommitCommentRequest.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ReposCreateCommitCommentRequest.

        Line index in the diff to comment on.

        :param position: The position of this ReposCreateCommitCommentRequest.
        :type position: int
        """

        self._position = position
