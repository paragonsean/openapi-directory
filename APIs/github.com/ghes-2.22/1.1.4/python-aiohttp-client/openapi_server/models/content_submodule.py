# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_directory_inner_links import ContentDirectoryInnerLinks
from openapi_server import util


class ContentSubmodule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: ContentDirectoryInnerLinks=None, download_url: str=None, git_url: str=None, html_url: str=None, name: str=None, path: str=None, sha: str=None, size: int=None, submodule_git_url: str=None, type: str=None, url: str=None):
        """ContentSubmodule - a model defined in OpenAPI

        :param links: The links of this ContentSubmodule.
        :param download_url: The download_url of this ContentSubmodule.
        :param git_url: The git_url of this ContentSubmodule.
        :param html_url: The html_url of this ContentSubmodule.
        :param name: The name of this ContentSubmodule.
        :param path: The path of this ContentSubmodule.
        :param sha: The sha of this ContentSubmodule.
        :param size: The size of this ContentSubmodule.
        :param submodule_git_url: The submodule_git_url of this ContentSubmodule.
        :param type: The type of this ContentSubmodule.
        :param url: The url of this ContentSubmodule.
        """
        self.openapi_types = {
            'links': ContentDirectoryInnerLinks,
            'download_url': str,
            'git_url': str,
            'html_url': str,
            'name': str,
            'path': str,
            'sha': str,
            'size': int,
            'submodule_git_url': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'links': '_links',
            'download_url': 'download_url',
            'git_url': 'git_url',
            'html_url': 'html_url',
            'name': 'name',
            'path': 'path',
            'sha': 'sha',
            'size': 'size',
            'submodule_git_url': 'submodule_git_url',
            'type': 'type',
            'url': 'url'
        }

        self._links = links
        self._download_url = download_url
        self._git_url = git_url
        self._html_url = html_url
        self._name = name
        self._path = path
        self._sha = sha
        self._size = size
        self._submodule_git_url = submodule_git_url
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentSubmodule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The content-submodule of this ContentSubmodule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ContentSubmodule.


        :return: The links of this ContentSubmodule.
        :rtype: ContentDirectoryInnerLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ContentSubmodule.


        :param links: The links of this ContentSubmodule.
        :type links: ContentDirectoryInnerLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def download_url(self):
        """Gets the download_url of this ContentSubmodule.


        :return: The download_url of this ContentSubmodule.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ContentSubmodule.


        :param download_url: The download_url of this ContentSubmodule.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def git_url(self):
        """Gets the git_url of this ContentSubmodule.


        :return: The git_url of this ContentSubmodule.
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this ContentSubmodule.


        :param git_url: The git_url of this ContentSubmodule.
        :type git_url: str
        """
        if git_url is None:
            raise ValueError("Invalid value for `git_url`, must not be `None`")

        self._git_url = git_url

    @property
    def html_url(self):
        """Gets the html_url of this ContentSubmodule.


        :return: The html_url of this ContentSubmodule.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this ContentSubmodule.


        :param html_url: The html_url of this ContentSubmodule.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def name(self):
        """Gets the name of this ContentSubmodule.


        :return: The name of this ContentSubmodule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentSubmodule.


        :param name: The name of this ContentSubmodule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this ContentSubmodule.


        :return: The path of this ContentSubmodule.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ContentSubmodule.


        :param path: The path of this ContentSubmodule.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def sha(self):
        """Gets the sha of this ContentSubmodule.


        :return: The sha of this ContentSubmodule.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this ContentSubmodule.


        :param sha: The sha of this ContentSubmodule.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def size(self):
        """Gets the size of this ContentSubmodule.


        :return: The size of this ContentSubmodule.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ContentSubmodule.


        :param size: The size of this ContentSubmodule.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def submodule_git_url(self):
        """Gets the submodule_git_url of this ContentSubmodule.


        :return: The submodule_git_url of this ContentSubmodule.
        :rtype: str
        """
        return self._submodule_git_url

    @submodule_git_url.setter
    def submodule_git_url(self, submodule_git_url):
        """Sets the submodule_git_url of this ContentSubmodule.


        :param submodule_git_url: The submodule_git_url of this ContentSubmodule.
        :type submodule_git_url: str
        """
        if submodule_git_url is None:
            raise ValueError("Invalid value for `submodule_git_url`, must not be `None`")

        self._submodule_git_url = submodule_git_url

    @property
    def type(self):
        """Gets the type of this ContentSubmodule.


        :return: The type of this ContentSubmodule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContentSubmodule.


        :param type: The type of this ContentSubmodule.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this ContentSubmodule.


        :return: The url of this ContentSubmodule.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContentSubmodule.


        :param url: The url of this ContentSubmodule.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
