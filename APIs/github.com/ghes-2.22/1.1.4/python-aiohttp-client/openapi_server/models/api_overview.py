# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependabot: List[str]=None, installed_version: str=None, packages: List[str]=None, verifiable_password_authentication: bool=None):
        """ApiOverview - a model defined in OpenAPI

        :param dependabot: The dependabot of this ApiOverview.
        :param installed_version: The installed_version of this ApiOverview.
        :param packages: The packages of this ApiOverview.
        :param verifiable_password_authentication: The verifiable_password_authentication of this ApiOverview.
        """
        self.openapi_types = {
            'dependabot': List[str],
            'installed_version': str,
            'packages': List[str],
            'verifiable_password_authentication': bool
        }

        self.attribute_map = {
            'dependabot': 'dependabot',
            'installed_version': 'installed_version',
            'packages': 'packages',
            'verifiable_password_authentication': 'verifiable_password_authentication'
        }

        self._dependabot = dependabot
        self._installed_version = installed_version
        self._packages = packages
        self._verifiable_password_authentication = verifiable_password_authentication

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The api-overview of this ApiOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependabot(self):
        """Gets the dependabot of this ApiOverview.


        :return: The dependabot of this ApiOverview.
        :rtype: List[str]
        """
        return self._dependabot

    @dependabot.setter
    def dependabot(self, dependabot):
        """Sets the dependabot of this ApiOverview.


        :param dependabot: The dependabot of this ApiOverview.
        :type dependabot: List[str]
        """

        self._dependabot = dependabot

    @property
    def installed_version(self):
        """Gets the installed_version of this ApiOverview.


        :return: The installed_version of this ApiOverview.
        :rtype: str
        """
        return self._installed_version

    @installed_version.setter
    def installed_version(self, installed_version):
        """Sets the installed_version of this ApiOverview.


        :param installed_version: The installed_version of this ApiOverview.
        :type installed_version: str
        """

        self._installed_version = installed_version

    @property
    def packages(self):
        """Gets the packages of this ApiOverview.


        :return: The packages of this ApiOverview.
        :rtype: List[str]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this ApiOverview.


        :param packages: The packages of this ApiOverview.
        :type packages: List[str]
        """

        self._packages = packages

    @property
    def verifiable_password_authentication(self):
        """Gets the verifiable_password_authentication of this ApiOverview.


        :return: The verifiable_password_authentication of this ApiOverview.
        :rtype: bool
        """
        return self._verifiable_password_authentication

    @verifiable_password_authentication.setter
    def verifiable_password_authentication(self, verifiable_password_authentication):
        """Sets the verifiable_password_authentication of this ApiOverview.


        :param verifiable_password_authentication: The verifiable_password_authentication of this ApiOverview.
        :type verifiable_password_authentication: bool
        """
        if verifiable_password_authentication is None:
            raise ValueError("Invalid value for `verifiable_password_authentication`, must not be `None`")

        self._verifiable_password_authentication = verifiable_password_authentication
