# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_payload_pages_inner import EventPayloadPagesInner
from openapi_server.models.issue import Issue
from openapi_server.models.issue_comment import IssueComment
from openapi_server import util


class EventPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, comment: IssueComment=None, issue: Issue=None, pages: List[EventPayloadPagesInner]=None):
        """EventPayload - a model defined in OpenAPI

        :param action: The action of this EventPayload.
        :param comment: The comment of this EventPayload.
        :param issue: The issue of this EventPayload.
        :param pages: The pages of this EventPayload.
        """
        self.openapi_types = {
            'action': str,
            'comment': IssueComment,
            'issue': Issue,
            'pages': List[EventPayloadPagesInner]
        }

        self.attribute_map = {
            'action': 'action',
            'comment': 'comment',
            'issue': 'issue',
            'pages': 'pages'
        }

        self._action = action
        self._comment = comment
        self._issue = issue
        self._pages = pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The event_payload of this EventPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this EventPayload.


        :return: The action of this EventPayload.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EventPayload.


        :param action: The action of this EventPayload.
        :type action: str
        """

        self._action = action

    @property
    def comment(self):
        """Gets the comment of this EventPayload.


        :return: The comment of this EventPayload.
        :rtype: IssueComment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EventPayload.


        :param comment: The comment of this EventPayload.
        :type comment: IssueComment
        """

        self._comment = comment

    @property
    def issue(self):
        """Gets the issue of this EventPayload.


        :return: The issue of this EventPayload.
        :rtype: Issue
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this EventPayload.


        :param issue: The issue of this EventPayload.
        :type issue: Issue
        """

        self._issue = issue

    @property
    def pages(self):
        """Gets the pages of this EventPayload.


        :return: The pages of this EventPayload.
        :rtype: List[EventPayloadPagesInner]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this EventPayload.


        :param pages: The pages of this EventPayload.
        :type pages: List[EventPayloadPagesInner]
        """

        self._pages = pages
