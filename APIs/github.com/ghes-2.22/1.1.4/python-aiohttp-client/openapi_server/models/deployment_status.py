# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class DeploymentStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, creator: NullableSimpleUser=None, deployment_url: str=None, description: str='', environment: str='', environment_url: str='', id: int=None, log_url: str='', node_id: str=None, performed_via_github_app: NullableIntegration=None, repository_url: str=None, state: str=None, target_url: str='', updated_at: datetime=None, url: str=None):
        """DeploymentStatus - a model defined in OpenAPI

        :param created_at: The created_at of this DeploymentStatus.
        :param creator: The creator of this DeploymentStatus.
        :param deployment_url: The deployment_url of this DeploymentStatus.
        :param description: The description of this DeploymentStatus.
        :param environment: The environment of this DeploymentStatus.
        :param environment_url: The environment_url of this DeploymentStatus.
        :param id: The id of this DeploymentStatus.
        :param log_url: The log_url of this DeploymentStatus.
        :param node_id: The node_id of this DeploymentStatus.
        :param performed_via_github_app: The performed_via_github_app of this DeploymentStatus.
        :param repository_url: The repository_url of this DeploymentStatus.
        :param state: The state of this DeploymentStatus.
        :param target_url: The target_url of this DeploymentStatus.
        :param updated_at: The updated_at of this DeploymentStatus.
        :param url: The url of this DeploymentStatus.
        """
        self.openapi_types = {
            'created_at': datetime,
            'creator': NullableSimpleUser,
            'deployment_url': str,
            'description': str,
            'environment': str,
            'environment_url': str,
            'id': int,
            'log_url': str,
            'node_id': str,
            'performed_via_github_app': NullableIntegration,
            'repository_url': str,
            'state': str,
            'target_url': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'creator': 'creator',
            'deployment_url': 'deployment_url',
            'description': 'description',
            'environment': 'environment',
            'environment_url': 'environment_url',
            'id': 'id',
            'log_url': 'log_url',
            'node_id': 'node_id',
            'performed_via_github_app': 'performed_via_github_app',
            'repository_url': 'repository_url',
            'state': 'state',
            'target_url': 'target_url',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._created_at = created_at
        self._creator = creator
        self._deployment_url = deployment_url
        self._description = description
        self._environment = environment
        self._environment_url = environment_url
        self._id = id
        self._log_url = log_url
        self._node_id = node_id
        self._performed_via_github_app = performed_via_github_app
        self._repository_url = repository_url
        self._state = state
        self._target_url = target_url
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deployment-status of this DeploymentStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this DeploymentStatus.


        :return: The created_at of this DeploymentStatus.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeploymentStatus.


        :param created_at: The created_at of this DeploymentStatus.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this DeploymentStatus.


        :return: The creator of this DeploymentStatus.
        :rtype: NullableSimpleUser
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this DeploymentStatus.


        :param creator: The creator of this DeploymentStatus.
        :type creator: NullableSimpleUser
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def deployment_url(self):
        """Gets the deployment_url of this DeploymentStatus.


        :return: The deployment_url of this DeploymentStatus.
        :rtype: str
        """
        return self._deployment_url

    @deployment_url.setter
    def deployment_url(self, deployment_url):
        """Sets the deployment_url of this DeploymentStatus.


        :param deployment_url: The deployment_url of this DeploymentStatus.
        :type deployment_url: str
        """
        if deployment_url is None:
            raise ValueError("Invalid value for `deployment_url`, must not be `None`")

        self._deployment_url = deployment_url

    @property
    def description(self):
        """Gets the description of this DeploymentStatus.

        A short description of the status.

        :return: The description of this DeploymentStatus.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeploymentStatus.

        A short description of the status.

        :param description: The description of this DeploymentStatus.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 140:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `140`")

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this DeploymentStatus.

        The environment of the deployment that the status is for.

        :return: The environment of this DeploymentStatus.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this DeploymentStatus.

        The environment of the deployment that the status is for.

        :param environment: The environment of this DeploymentStatus.
        :type environment: str
        """

        self._environment = environment

    @property
    def environment_url(self):
        """Gets the environment_url of this DeploymentStatus.

        The URL for accessing your environment.

        :return: The environment_url of this DeploymentStatus.
        :rtype: str
        """
        return self._environment_url

    @environment_url.setter
    def environment_url(self, environment_url):
        """Sets the environment_url of this DeploymentStatus.

        The URL for accessing your environment.

        :param environment_url: The environment_url of this DeploymentStatus.
        :type environment_url: str
        """

        self._environment_url = environment_url

    @property
    def id(self):
        """Gets the id of this DeploymentStatus.


        :return: The id of this DeploymentStatus.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentStatus.


        :param id: The id of this DeploymentStatus.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def log_url(self):
        """Gets the log_url of this DeploymentStatus.

        The URL to associate with this status.

        :return: The log_url of this DeploymentStatus.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this DeploymentStatus.

        The URL to associate with this status.

        :param log_url: The log_url of this DeploymentStatus.
        :type log_url: str
        """

        self._log_url = log_url

    @property
    def node_id(self):
        """Gets the node_id of this DeploymentStatus.


        :return: The node_id of this DeploymentStatus.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DeploymentStatus.


        :param node_id: The node_id of this DeploymentStatus.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def performed_via_github_app(self):
        """Gets the performed_via_github_app of this DeploymentStatus.


        :return: The performed_via_github_app of this DeploymentStatus.
        :rtype: NullableIntegration
        """
        return self._performed_via_github_app

    @performed_via_github_app.setter
    def performed_via_github_app(self, performed_via_github_app):
        """Sets the performed_via_github_app of this DeploymentStatus.


        :param performed_via_github_app: The performed_via_github_app of this DeploymentStatus.
        :type performed_via_github_app: NullableIntegration
        """

        self._performed_via_github_app = performed_via_github_app

    @property
    def repository_url(self):
        """Gets the repository_url of this DeploymentStatus.


        :return: The repository_url of this DeploymentStatus.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this DeploymentStatus.


        :param repository_url: The repository_url of this DeploymentStatus.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def state(self):
        """Gets the state of this DeploymentStatus.

        The state of the status.

        :return: The state of this DeploymentStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeploymentStatus.

        The state of the status.

        :param state: The state of this DeploymentStatus.
        :type state: str
        """
        allowed_values = ["error", "failure", "inactive", "pending", "success", "queued", "in_progress"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target_url(self):
        """Gets the target_url of this DeploymentStatus.

        Deprecated: the URL to associate with this status.

        :return: The target_url of this DeploymentStatus.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this DeploymentStatus.

        Deprecated: the URL to associate with this status.

        :param target_url: The target_url of this DeploymentStatus.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")

        self._target_url = target_url

    @property
    def updated_at(self):
        """Gets the updated_at of this DeploymentStatus.


        :return: The updated_at of this DeploymentStatus.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DeploymentStatus.


        :param updated_at: The updated_at of this DeploymentStatus.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this DeploymentStatus.


        :return: The url of this DeploymentStatus.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DeploymentStatus.


        :param url: The url of this DeploymentStatus.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
