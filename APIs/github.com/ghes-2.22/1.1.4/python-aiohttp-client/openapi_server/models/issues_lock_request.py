# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesLockRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lock_reason: str=None):
        """IssuesLockRequest - a model defined in OpenAPI

        :param lock_reason: The lock_reason of this IssuesLockRequest.
        """
        self.openapi_types = {
            'lock_reason': str
        }

        self.attribute_map = {
            'lock_reason': 'lock_reason'
        }

        self._lock_reason = lock_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesLockRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issues_lock_request of this IssuesLockRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lock_reason(self):
        """Gets the lock_reason of this IssuesLockRequest.

        The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:   \\* `off-topic`   \\* `too heated`   \\* `resolved`   \\* `spam`

        :return: The lock_reason of this IssuesLockRequest.
        :rtype: str
        """
        return self._lock_reason

    @lock_reason.setter
    def lock_reason(self, lock_reason):
        """Sets the lock_reason of this IssuesLockRequest.

        The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:   \\* `off-topic`   \\* `too heated`   \\* `resolved`   \\* `spam`

        :param lock_reason: The lock_reason of this IssuesLockRequest.
        :type lock_reason: str
        """
        allowed_values = ["off-topic", "too heated", "resolved", "spam"]  # noqa: E501
        if lock_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `lock_reason` ({0}), must be one of {1}"
                .format(lock_reason, allowed_values)
            )

        self._lock_reason = lock_reason
