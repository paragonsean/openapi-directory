# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesSetLabelsRequestOneOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: List[str]=None):
        """IssuesSetLabelsRequestOneOf - a model defined in OpenAPI

        :param labels: The labels of this IssuesSetLabelsRequestOneOf.
        """
        self.openapi_types = {
            'labels': List[str]
        }

        self.attribute_map = {
            'labels': 'labels'
        }

        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesSetLabelsRequestOneOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issues_set_labels_request_oneOf of this IssuesSetLabelsRequestOneOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this IssuesSetLabelsRequestOneOf.

        The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.

        :return: The labels of this IssuesSetLabelsRequestOneOf.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IssuesSetLabelsRequestOneOf.

        The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.

        :param labels: The labels of this IssuesSetLabelsRequestOneOf.
        :type labels: List[str]
        """
        if labels is not None and len(labels) < 1:
            raise ValueError("Invalid value for `labels`, number of items must be greater than or equal to `1`")

        self._labels = labels
