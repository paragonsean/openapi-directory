# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pages_https_certificate import PagesHttpsCertificate
from openapi_server.models.pages_source_hash import PagesSourceHash
from openapi_server import util


class Page(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cname: str=None, custom_404: bool=False, html_url: str=None, https_certificate: PagesHttpsCertificate=None, https_enforced: bool=None, pending_domain_unverified_at: datetime=None, protected_domain_state: str=None, public: bool=None, source: PagesSourceHash=None, status: str=None, url: str=None):
        """Page - a model defined in OpenAPI

        :param cname: The cname of this Page.
        :param custom_404: The custom_404 of this Page.
        :param html_url: The html_url of this Page.
        :param https_certificate: The https_certificate of this Page.
        :param https_enforced: The https_enforced of this Page.
        :param pending_domain_unverified_at: The pending_domain_unverified_at of this Page.
        :param protected_domain_state: The protected_domain_state of this Page.
        :param public: The public of this Page.
        :param source: The source of this Page.
        :param status: The status of this Page.
        :param url: The url of this Page.
        """
        self.openapi_types = {
            'cname': str,
            'custom_404': bool,
            'html_url': str,
            'https_certificate': PagesHttpsCertificate,
            'https_enforced': bool,
            'pending_domain_unverified_at': datetime,
            'protected_domain_state': str,
            'public': bool,
            'source': PagesSourceHash,
            'status': str,
            'url': str
        }

        self.attribute_map = {
            'cname': 'cname',
            'custom_404': 'custom_404',
            'html_url': 'html_url',
            'https_certificate': 'https_certificate',
            'https_enforced': 'https_enforced',
            'pending_domain_unverified_at': 'pending_domain_unverified_at',
            'protected_domain_state': 'protected_domain_state',
            'public': 'public',
            'source': 'source',
            'status': 'status',
            'url': 'url'
        }

        self._cname = cname
        self._custom_404 = custom_404
        self._html_url = html_url
        self._https_certificate = https_certificate
        self._https_enforced = https_enforced
        self._pending_domain_unverified_at = pending_domain_unverified_at
        self._protected_domain_state = protected_domain_state
        self._public = public
        self._source = source
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Page':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The page of this Page.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cname(self):
        """Gets the cname of this Page.

        The Pages site's custom domain

        :return: The cname of this Page.
        :rtype: str
        """
        return self._cname

    @cname.setter
    def cname(self, cname):
        """Sets the cname of this Page.

        The Pages site's custom domain

        :param cname: The cname of this Page.
        :type cname: str
        """
        if cname is None:
            raise ValueError("Invalid value for `cname`, must not be `None`")

        self._cname = cname

    @property
    def custom_404(self):
        """Gets the custom_404 of this Page.

        Whether the Page has a custom 404 page.

        :return: The custom_404 of this Page.
        :rtype: bool
        """
        return self._custom_404

    @custom_404.setter
    def custom_404(self, custom_404):
        """Sets the custom_404 of this Page.

        Whether the Page has a custom 404 page.

        :param custom_404: The custom_404 of this Page.
        :type custom_404: bool
        """
        if custom_404 is None:
            raise ValueError("Invalid value for `custom_404`, must not be `None`")

        self._custom_404 = custom_404

    @property
    def html_url(self):
        """Gets the html_url of this Page.

        The web address the Page can be accessed from.

        :return: The html_url of this Page.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Page.

        The web address the Page can be accessed from.

        :param html_url: The html_url of this Page.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def https_certificate(self):
        """Gets the https_certificate of this Page.


        :return: The https_certificate of this Page.
        :rtype: PagesHttpsCertificate
        """
        return self._https_certificate

    @https_certificate.setter
    def https_certificate(self, https_certificate):
        """Sets the https_certificate of this Page.


        :param https_certificate: The https_certificate of this Page.
        :type https_certificate: PagesHttpsCertificate
        """

        self._https_certificate = https_certificate

    @property
    def https_enforced(self):
        """Gets the https_enforced of this Page.

        Whether https is enabled on the domain

        :return: The https_enforced of this Page.
        :rtype: bool
        """
        return self._https_enforced

    @https_enforced.setter
    def https_enforced(self, https_enforced):
        """Sets the https_enforced of this Page.

        Whether https is enabled on the domain

        :param https_enforced: The https_enforced of this Page.
        :type https_enforced: bool
        """

        self._https_enforced = https_enforced

    @property
    def pending_domain_unverified_at(self):
        """Gets the pending_domain_unverified_at of this Page.

        The timestamp when a pending domain becomes unverified.

        :return: The pending_domain_unverified_at of this Page.
        :rtype: datetime
        """
        return self._pending_domain_unverified_at

    @pending_domain_unverified_at.setter
    def pending_domain_unverified_at(self, pending_domain_unverified_at):
        """Sets the pending_domain_unverified_at of this Page.

        The timestamp when a pending domain becomes unverified.

        :param pending_domain_unverified_at: The pending_domain_unverified_at of this Page.
        :type pending_domain_unverified_at: datetime
        """

        self._pending_domain_unverified_at = pending_domain_unverified_at

    @property
    def protected_domain_state(self):
        """Gets the protected_domain_state of this Page.

        The state if the domain is protected

        :return: The protected_domain_state of this Page.
        :rtype: str
        """
        return self._protected_domain_state

    @protected_domain_state.setter
    def protected_domain_state(self, protected_domain_state):
        """Sets the protected_domain_state of this Page.

        The state if the domain is protected

        :param protected_domain_state: The protected_domain_state of this Page.
        :type protected_domain_state: str
        """
        allowed_values = [None,"pending", "verified", "unverified"]  # noqa: E501
        if protected_domain_state not in allowed_values:
            raise ValueError(
                "Invalid value for `protected_domain_state` ({0}), must be one of {1}"
                .format(protected_domain_state, allowed_values)
            )

        self._protected_domain_state = protected_domain_state

    @property
    def public(self):
        """Gets the public of this Page.

        Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.

        :return: The public of this Page.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Page.

        Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.

        :param public: The public of this Page.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")

        self._public = public

    @property
    def source(self):
        """Gets the source of this Page.


        :return: The source of this Page.
        :rtype: PagesSourceHash
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Page.


        :param source: The source of this Page.
        :type source: PagesSourceHash
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Page.

        The status of the most recent build of the Page.

        :return: The status of this Page.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Page.

        The status of the most recent build of the Page.

        :param status: The status of this Page.
        :type status: str
        """
        allowed_values = [None,"built", "building", "errored"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url(self):
        """Gets the url of this Page.

        The API address for accessing this Page resource.

        :return: The url of this Page.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Page.

        The API address for accessing this Page resource.

        :param url: The url of this Page.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
