# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ActionsCreateOrUpdateOrgSecretRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted_value: str=None, key_id: str=None, selected_repository_ids: List[str]=None, visibility: str=None):
        """ActionsCreateOrUpdateOrgSecretRequest - a model defined in OpenAPI

        :param encrypted_value: The encrypted_value of this ActionsCreateOrUpdateOrgSecretRequest.
        :param key_id: The key_id of this ActionsCreateOrUpdateOrgSecretRequest.
        :param selected_repository_ids: The selected_repository_ids of this ActionsCreateOrUpdateOrgSecretRequest.
        :param visibility: The visibility of this ActionsCreateOrUpdateOrgSecretRequest.
        """
        self.openapi_types = {
            'encrypted_value': str,
            'key_id': str,
            'selected_repository_ids': List[str],
            'visibility': str
        }

        self.attribute_map = {
            'encrypted_value': 'encrypted_value',
            'key_id': 'key_id',
            'selected_repository_ids': 'selected_repository_ids',
            'visibility': 'visibility'
        }

        self._encrypted_value = encrypted_value
        self._key_id = key_id
        self._selected_repository_ids = selected_repository_ids
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsCreateOrUpdateOrgSecretRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_create_or_update_org_secret_request of this ActionsCreateOrUpdateOrgSecretRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted_value(self):
        """Gets the encrypted_value of this ActionsCreateOrUpdateOrgSecretRequest.

        Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#get-an-organization-public-key) endpoint.

        :return: The encrypted_value of this ActionsCreateOrUpdateOrgSecretRequest.
        :rtype: str
        """
        return self._encrypted_value

    @encrypted_value.setter
    def encrypted_value(self, encrypted_value):
        """Sets the encrypted_value of this ActionsCreateOrUpdateOrgSecretRequest.

        Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#get-an-organization-public-key) endpoint.

        :param encrypted_value: The encrypted_value of this ActionsCreateOrUpdateOrgSecretRequest.
        :type encrypted_value: str
        """
        if encrypted_value is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$', encrypted_value):
            raise ValueError("Invalid value for `encrypted_value`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$/`")

        self._encrypted_value = encrypted_value

    @property
    def key_id(self):
        """Gets the key_id of this ActionsCreateOrUpdateOrgSecretRequest.

        ID of the key you used to encrypt the secret.

        :return: The key_id of this ActionsCreateOrUpdateOrgSecretRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ActionsCreateOrUpdateOrgSecretRequest.

        ID of the key you used to encrypt the secret.

        :param key_id: The key_id of this ActionsCreateOrUpdateOrgSecretRequest.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def selected_repository_ids(self):
        """Gets the selected_repository_ids of this ActionsCreateOrUpdateOrgSecretRequest.

        An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.

        :return: The selected_repository_ids of this ActionsCreateOrUpdateOrgSecretRequest.
        :rtype: List[str]
        """
        return self._selected_repository_ids

    @selected_repository_ids.setter
    def selected_repository_ids(self, selected_repository_ids):
        """Sets the selected_repository_ids of this ActionsCreateOrUpdateOrgSecretRequest.

        An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@2.22/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.

        :param selected_repository_ids: The selected_repository_ids of this ActionsCreateOrUpdateOrgSecretRequest.
        :type selected_repository_ids: List[str]
        """

        self._selected_repository_ids = selected_repository_ids

    @property
    def visibility(self):
        """Gets the visibility of this ActionsCreateOrUpdateOrgSecretRequest.

        Configures the access that repositories have to the organization secret. Can be one of:   \\- `all` - All repositories in an organization can access the secret.   \\- `private` - Private repositories in an organization can access the secret.   \\- `selected` - Only specific repositories can access the secret.

        :return: The visibility of this ActionsCreateOrUpdateOrgSecretRequest.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ActionsCreateOrUpdateOrgSecretRequest.

        Configures the access that repositories have to the organization secret. Can be one of:   \\- `all` - All repositories in an organization can access the secret.   \\- `private` - Private repositories in an organization can access the secret.   \\- `selected` - Only specific repositories can access the secret.

        :param visibility: The visibility of this ActionsCreateOrUpdateOrgSecretRequest.
        :type visibility: str
        """
        allowed_values = ["all", "private", "selected"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
