# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseMilestoneOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_milestones: int=None, open_milestones: int=None, total_milestones: int=None):
        """EnterpriseMilestoneOverview - a model defined in OpenAPI

        :param closed_milestones: The closed_milestones of this EnterpriseMilestoneOverview.
        :param open_milestones: The open_milestones of this EnterpriseMilestoneOverview.
        :param total_milestones: The total_milestones of this EnterpriseMilestoneOverview.
        """
        self.openapi_types = {
            'closed_milestones': int,
            'open_milestones': int,
            'total_milestones': int
        }

        self.attribute_map = {
            'closed_milestones': 'closed_milestones',
            'open_milestones': 'open_milestones',
            'total_milestones': 'total_milestones'
        }

        self._closed_milestones = closed_milestones
        self._open_milestones = open_milestones
        self._total_milestones = total_milestones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseMilestoneOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-milestone-overview of this EnterpriseMilestoneOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_milestones(self):
        """Gets the closed_milestones of this EnterpriseMilestoneOverview.


        :return: The closed_milestones of this EnterpriseMilestoneOverview.
        :rtype: int
        """
        return self._closed_milestones

    @closed_milestones.setter
    def closed_milestones(self, closed_milestones):
        """Sets the closed_milestones of this EnterpriseMilestoneOverview.


        :param closed_milestones: The closed_milestones of this EnterpriseMilestoneOverview.
        :type closed_milestones: int
        """
        if closed_milestones is None:
            raise ValueError("Invalid value for `closed_milestones`, must not be `None`")

        self._closed_milestones = closed_milestones

    @property
    def open_milestones(self):
        """Gets the open_milestones of this EnterpriseMilestoneOverview.


        :return: The open_milestones of this EnterpriseMilestoneOverview.
        :rtype: int
        """
        return self._open_milestones

    @open_milestones.setter
    def open_milestones(self, open_milestones):
        """Sets the open_milestones of this EnterpriseMilestoneOverview.


        :param open_milestones: The open_milestones of this EnterpriseMilestoneOverview.
        :type open_milestones: int
        """
        if open_milestones is None:
            raise ValueError("Invalid value for `open_milestones`, must not be `None`")

        self._open_milestones = open_milestones

    @property
    def total_milestones(self):
        """Gets the total_milestones of this EnterpriseMilestoneOverview.


        :return: The total_milestones of this EnterpriseMilestoneOverview.
        :rtype: int
        """
        return self._total_milestones

    @total_milestones.setter
    def total_milestones(self, total_milestones):
        """Sets the total_milestones of this EnterpriseMilestoneOverview.


        :param total_milestones: The total_milestones of this EnterpriseMilestoneOverview.
        :type total_milestones: int
        """
        if total_milestones is None:
            raise ValueError("Invalid value for `total_milestones`, must not be `None`")

        self._total_milestones = total_milestones
