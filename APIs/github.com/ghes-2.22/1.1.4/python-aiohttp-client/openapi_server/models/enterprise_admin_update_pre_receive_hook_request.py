# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseAdminUpdatePreReceiveHookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_downstream_configuration: bool=None, enforcement: str=None, environment: Dict[str, object]=None, name: str=None, script: str=None, script_repository: Dict[str, object]=None):
        """EnterpriseAdminUpdatePreReceiveHookRequest - a model defined in OpenAPI

        :param allow_downstream_configuration: The allow_downstream_configuration of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :param enforcement: The enforcement of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :param environment: The environment of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :param name: The name of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :param script: The script of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :param script_repository: The script_repository of this EnterpriseAdminUpdatePreReceiveHookRequest.
        """
        self.openapi_types = {
            'allow_downstream_configuration': bool,
            'enforcement': str,
            'environment': Dict[str, object],
            'name': str,
            'script': str,
            'script_repository': Dict[str, object]
        }

        self.attribute_map = {
            'allow_downstream_configuration': 'allow_downstream_configuration',
            'enforcement': 'enforcement',
            'environment': 'environment',
            'name': 'name',
            'script': 'script',
            'script_repository': 'script_repository'
        }

        self._allow_downstream_configuration = allow_downstream_configuration
        self._enforcement = enforcement
        self._environment = environment
        self._name = name
        self._script = script
        self._script_repository = script_repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseAdminUpdatePreReceiveHookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_admin_update_pre_receive_hook_request of this EnterpriseAdminUpdatePreReceiveHookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_downstream_configuration(self):
        """Gets the allow_downstream_configuration of this EnterpriseAdminUpdatePreReceiveHookRequest.

        Whether enforcement can be overridden at the org or repo level.

        :return: The allow_downstream_configuration of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :rtype: bool
        """
        return self._allow_downstream_configuration

    @allow_downstream_configuration.setter
    def allow_downstream_configuration(self, allow_downstream_configuration):
        """Sets the allow_downstream_configuration of this EnterpriseAdminUpdatePreReceiveHookRequest.

        Whether enforcement can be overridden at the org or repo level.

        :param allow_downstream_configuration: The allow_downstream_configuration of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :type allow_downstream_configuration: bool
        """

        self._allow_downstream_configuration = allow_downstream_configuration

    @property
    def enforcement(self):
        """Gets the enforcement of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The state of enforcement for this hook.

        :return: The enforcement of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :rtype: str
        """
        return self._enforcement

    @enforcement.setter
    def enforcement(self, enforcement):
        """Sets the enforcement of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The state of enforcement for this hook.

        :param enforcement: The enforcement of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :type enforcement: str
        """

        self._enforcement = enforcement

    @property
    def environment(self):
        """Gets the environment of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The pre-receive environment where the script is executed.

        :return: The environment of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :rtype: Dict[str, object]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The pre-receive environment where the script is executed.

        :param environment: The environment of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :type environment: Dict[str, object]
        """

        self._environment = environment

    @property
    def name(self):
        """Gets the name of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The name of the hook.

        :return: The name of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The name of the hook.

        :param name: The name of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :type name: str
        """

        self._name = name

    @property
    def script(self):
        """Gets the script of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The script that the hook runs.

        :return: The script of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The script that the hook runs.

        :param script: The script of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :type script: str
        """

        self._script = script

    @property
    def script_repository(self):
        """Gets the script_repository of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The GitHub repository where the script is kept.

        :return: The script_repository of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :rtype: Dict[str, object]
        """
        return self._script_repository

    @script_repository.setter
    def script_repository(self, script_repository):
        """Sets the script_repository of this EnterpriseAdminUpdatePreReceiveHookRequest.

        The GitHub repository where the script is kept.

        :param script_repository: The script_repository of this EnterpriseAdminUpdatePreReceiveHookRequest.
        :type script_repository: Dict[str, object]
        """

        self._script_repository = script_repository
