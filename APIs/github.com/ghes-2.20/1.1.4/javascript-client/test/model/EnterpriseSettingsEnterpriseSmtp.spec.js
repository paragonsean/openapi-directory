/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EnterpriseSettingsEnterpriseSmtp', function() {
    it('should create an instance of EnterpriseSettingsEnterpriseSmtp', function() {
      // uncomment below and update the code to test EnterpriseSettingsEnterpriseSmtp
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be.a(GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp);
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property authentication (base name: "authentication")', function() {
      // uncomment below and update the code to test the property authentication
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property discardToNoreplyAddress (base name: "discard-to-noreply-address")', function() {
      // uncomment below and update the code to test the property discardToNoreplyAddress
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property domain (base name: "domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property enableStarttlsAuto (base name: "enable_starttls_auto")', function() {
      // uncomment below and update the code to test the property enableStarttlsAuto
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property noreplyAddress (base name: "noreply_address")', function() {
      // uncomment below and update the code to test the property noreplyAddress
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property supportAddress (base name: "support_address")', function() {
      // uncomment below and update the code to test the property supportAddress
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property supportAddressType (base name: "support_address_type")', function() {
      // uncomment below and update the code to test the property supportAddressType
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property userName (base name: "user_name")', function() {
      // uncomment below and update the code to test the property userName
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseSmtp();
      //expect(instance).to.be();
    });

  });

}));
