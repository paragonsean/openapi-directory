/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicError from '../model/BasicError';
import FullRepository from '../model/FullRepository';
import MinimalRepository from '../model/MinimalRepository';
import OrgsRemoveOutsideCollaborator422Response from '../model/OrgsRemoveOutsideCollaborator422Response';
import SimpleUser from '../model/SimpleUser';
import Team from '../model/Team';
import Team2 from '../model/Team2';
import TeamDiscussion from '../model/TeamDiscussion';
import TeamDiscussionComment from '../model/TeamDiscussionComment';
import TeamFull from '../model/TeamFull';
import TeamMembership from '../model/TeamMembership';
import TeamProject from '../model/TeamProject';
import TeamsAddOrUpdateMembershipForUserRequest from '../model/TeamsAddOrUpdateMembershipForUserRequest';
import TeamsAddOrUpdateProjectPermissionsRequest from '../model/TeamsAddOrUpdateProjectPermissionsRequest';
import TeamsAddOrUpdateRepoPermissionsRequest from '../model/TeamsAddOrUpdateRepoPermissionsRequest';
import TeamsCreateDiscussionCommentRequest from '../model/TeamsCreateDiscussionCommentRequest';
import TeamsCreateDiscussionRequest from '../model/TeamsCreateDiscussionRequest';
import TeamsCreateRequest from '../model/TeamsCreateRequest';
import TeamsUpdateDiscussionRequest from '../model/TeamsUpdateDiscussionRequest';
import TeamsUpdateRequest from '../model/TeamsUpdateRequest';
import ValidationError from '../model/ValidationError';

/**
* Teams service.
* @module api/TeamsApi
* @version 1.1.4
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the teamsAddMemberLegacy operation.
     * @callback module:api/TeamsApi~teamsAddMemberLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add team member (Legacy)
     * The \"Add team member\" endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {Number} teamId 
     * @param {String} username 
     * @param {module:api/TeamsApi~teamsAddMemberLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddMemberLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddMemberLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsAddMemberLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/members/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateMembershipForUser operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team membership for a user
     * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param {Number} teamId 
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateMembershipForUserRequest} [teamsAddOrUpdateMembershipForUserRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMembership}
     */
    teamsAddOrUpdateMembershipForUser(teamId, username, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateMembershipForUserRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddOrUpdateMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsAddOrUpdateMembershipForUser");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamMembership;
      return this.apiClient.callApi(
        '/teams/{team_id}/memberships/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateProjectPermissions operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateProjectPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team project permissions
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} teamId 
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateProjectPermissionsRequest} [teamsAddOrUpdateProjectPermissionsRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateProjectPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddOrUpdateProjectPermissions(accept, teamId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateProjectPermissionsRequest'];
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling teamsAddOrUpdateProjectPermissions");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddOrUpdateProjectPermissions");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsAddOrUpdateProjectPermissions");
      }

      let pathParams = {
        'team_id': teamId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateRepoPermissions operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateRepoPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team repository permissions
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {Number} teamId 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateRepoPermissionsRequest} [teamsAddOrUpdateRepoPermissionsRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateRepoPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddOrUpdateRepoPermissions(teamId, owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateRepoPermissionsRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddOrUpdateRepoPermissions");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsAddOrUpdateRepoPermissions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsAddOrUpdateRepoPermissions");
      }

      let pathParams = {
        'team_id': teamId,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/repos/{owner}/{repo}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCheckPermissionsForProject operation.
     * @callback module:api/TeamsApi~teamsCheckPermissionsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check team permissions for a project
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} teamId 
     * @param {Number} projectId 
     * @param {module:api/TeamsApi~teamsCheckPermissionsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamProject}
     */
    teamsCheckPermissionsForProject(accept, teamId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling teamsCheckPermissionsForProject");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsCheckPermissionsForProject");
      }

      let pathParams = {
        'team_id': teamId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamProject;
      return this.apiClient.callApi(
        '/teams/{team_id}/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCheckPermissionsForRepo operation.
     * @callback module:api/TeamsApi~teamsCheckPermissionsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MinimalRepository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check team permissions for a repository
     * **Note**: Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/) via the `Accept` header:
     * @param {Number} teamId 
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:api/TeamsApi~teamsCheckPermissionsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MinimalRepository}
     */
    teamsCheckPermissionsForRepo(teamId, owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForRepo");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsCheckPermissionsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsCheckPermissionsForRepo");
      }

      let pathParams = {
        'team_id': teamId,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.github.v3.repository+json'];
      let returnType = MinimalRepository;
      return this.apiClient.callApi(
        '/teams/{team_id}/repos/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreate operation.
     * @callback module:api/TeamsApi~teamsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a team
     * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".
     * @param {String} org 
     * @param {module:model/TeamsCreateRequest} teamsCreateRequest 
     * @param {module:api/TeamsApi~teamsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsCreate(org, teamsCreateRequest, callback) {
      let postBody = teamsCreateRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsCreate");
      }
      // verify the required parameter 'teamsCreateRequest' is set
      if (teamsCreateRequest === undefined || teamsCreateRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateRequest' when calling teamsCreate");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/orgs/{org}/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateDiscussion operation.
     * @callback module:api/TeamsApi~teamsCreateDiscussionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a discussion
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" for details.
     * @param {Number} teamId 
     * @param {module:model/TeamsCreateDiscussionRequest} teamsCreateDiscussionRequest 
     * @param {module:api/TeamsApi~teamsCreateDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsCreateDiscussion(teamId, teamsCreateDiscussionRequest, callback) {
      let postBody = teamsCreateDiscussionRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCreateDiscussion");
      }
      // verify the required parameter 'teamsCreateDiscussionRequest' is set
      if (teamsCreateDiscussionRequest === undefined || teamsCreateDiscussionRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionRequest' when calling teamsCreateDiscussion");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateDiscussionComment operation.
     * @callback module:api/TeamsApi~teamsCreateDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a discussion comment
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" for details.
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {module:model/TeamsCreateDiscussionCommentRequest} teamsCreateDiscussionCommentRequest 
     * @param {module:api/TeamsApi~teamsCreateDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsCreateDiscussionComment(teamId, discussionNumber, teamsCreateDiscussionCommentRequest, callback) {
      let postBody = teamsCreateDiscussionCommentRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCreateDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsCreateDiscussionComment");
      }
      // verify the required parameter 'teamsCreateDiscussionCommentRequest' is set
      if (teamsCreateDiscussionCommentRequest === undefined || teamsCreateDiscussionCommentRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionCommentRequest' when calling teamsCreateDiscussionComment");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDelete operation.
     * @callback module:api/TeamsApi~teamsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param {Number} teamId 
     * @param {module:api/TeamsApi~teamsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDelete(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDelete");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteDiscussion operation.
     * @callback module:api/TeamsApi~teamsDeleteDiscussionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a discussion
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {module:api/TeamsApi~teamsDeleteDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteDiscussion(teamId, discussionNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDeleteDiscussion");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussion");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteDiscussionComment operation.
     * @callback module:api/TeamsApi~teamsDeleteDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a discussion comment
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {module:api/TeamsApi~teamsDeleteDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteDiscussionComment(teamId, discussionNumber, commentNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDeleteDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionComment");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsDeleteDiscussionComment");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGet operation.
     * @callback module:api/TeamsApi~teamsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team
     * 
     * @param {Number} teamId 
     * @param {module:api/TeamsApi~teamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGet");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/teams/{team_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetByName operation.
     * @callback module:api/TeamsApi~teamsGetByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team by name
     * Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
     * @param {String} org 
     * @param {String} teamSlug team_slug parameter
     * @param {module:api/TeamsApi~teamsGetByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsGetByName(org, teamSlug, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsGetByName");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsGetByName");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetDiscussion operation.
     * @callback module:api/TeamsApi~teamsGetDiscussionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a discussion
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {module:api/TeamsApi~teamsGetDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsGetDiscussion(teamId, discussionNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetDiscussion");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussion");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetDiscussionComment operation.
     * @callback module:api/TeamsApi~teamsGetDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a discussion comment
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {module:api/TeamsApi~teamsGetDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsGetDiscussionComment(teamId, discussionNumber, commentNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionComment");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsGetDiscussionComment");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetMemberLegacy operation.
     * @callback module:api/TeamsApi~teamsGetMemberLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team member (Legacy)
     * The \"Get team member\" endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param {Number} teamId 
     * @param {String} username 
     * @param {module:api/TeamsApi~teamsGetMemberLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsGetMemberLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetMemberLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsGetMemberLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/members/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetMembershipForUser operation.
     * @callback module:api/TeamsApi~teamsGetMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team membership for a user
     * Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team).
     * @param {Number} teamId 
     * @param {String} username 
     * @param {module:api/TeamsApi~teamsGetMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMembership}
     */
    teamsGetMembershipForUser(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsGetMembershipForUser");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamMembership;
      return this.apiClient.callApi(
        '/teams/{team_id}/memberships/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsList operation.
     * @callback module:api/TeamsApi~teamsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List teams
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param {String} org 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsList(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsList");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/orgs/{org}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListChild operation.
     * @callback module:api/TeamsApi~teamsListChildCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List child teams
     * 
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team2>}
     */
    teamsListChild(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListChild");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team2];
      return this.apiClient.callApi(
        '/teams/{team_id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListDiscussionComments operation.
     * @callback module:api/TeamsApi~teamsListDiscussionCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDiscussionComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List discussion comments
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListDiscussionCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDiscussionComment>}
     */
    teamsListDiscussionComments(teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListDiscussionComments");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsListDiscussionComments");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDiscussionComment];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListDiscussions operation.
     * @callback module:api/TeamsApi~teamsListDiscussionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDiscussion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List discussions
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListDiscussionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDiscussion>}
     */
    teamsListDiscussions(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListDiscussions");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDiscussion];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListForAuthenticatedUser operation.
     * @callback module:api/TeamsApi~teamsListForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamFull>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List teams for the authenticated user
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/).
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamFull>}
     */
    teamsListForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamFull];
      return this.apiClient.callApi(
        '/user/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListMembers operation.
     * @callback module:api/TeamsApi~teamsListMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team members
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [role = 'all')] Filters members returned by their role in the team. Can be one of:   \\* `member` - normal members of the team.   \\* `maintainer` - team maintainers.   \\* `all` - all members of the team.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    teamsListMembers(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListMembers");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'role': opts['role'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/teams/{team_id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListProjects operation.
     * @callback module:api/TeamsApi~teamsListProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team projects
     * Lists the organization projects for a team. If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all projects for the team.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamProject>}
     */
    teamsListProjects(accept, teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling teamsListProjects");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListProjects");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamProject];
      return this.apiClient.callApi(
        '/teams/{team_id}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListRepos operation.
     * @callback module:api/TeamsApi~teamsListReposCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team repositories
     * If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all repositories for the team.
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    teamsListRepos(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListRepos");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/teams/{team_id}/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveMemberLegacy operation.
     * @callback module:api/TeamsApi~teamsRemoveMemberLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove team member (Legacy)
     * The \"Remove team member\" endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"
     * @param {Number} teamId 
     * @param {String} username 
     * @param {module:api/TeamsApi~teamsRemoveMemberLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveMemberLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveMemberLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsRemoveMemberLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/members/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveMembershipForUser operation.
     * @callback module:api/TeamsApi~teamsRemoveMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove team membership for a user
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     * @param {Number} teamId 
     * @param {String} username 
     * @param {module:api/TeamsApi~teamsRemoveMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveMembershipForUser(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsRemoveMembershipForUser");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/memberships/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveProject operation.
     * @callback module:api/TeamsApi~teamsRemoveProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a project from a team
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param {Number} teamId 
     * @param {Number} projectId 
     * @param {module:api/TeamsApi~teamsRemoveProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveProject(teamId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsRemoveProject");
      }

      let pathParams = {
        'team_id': teamId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveRepo operation.
     * @callback module:api/TeamsApi~teamsRemoveRepoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a repository from a team
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param {Number} teamId 
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:api/TeamsApi~teamsRemoveRepoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveRepo(teamId, owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveRepo");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsRemoveRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsRemoveRepo");
      }

      let pathParams = {
        'team_id': teamId,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/repos/{owner}/{repo}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdate operation.
     * @callback module:api/TeamsApi~teamsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateRequest} [teamsUpdateRequest] 
     * @param {module:api/TeamsApi~teamsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsUpdate(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdate");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/teams/{team_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateDiscussion operation.
     * @callback module:api/TeamsApi~teamsUpdateDiscussionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a discussion
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateDiscussionRequest} [teamsUpdateDiscussionRequest] 
     * @param {module:api/TeamsApi~teamsUpdateDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsUpdateDiscussion(teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateDiscussionRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdateDiscussion");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussion");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateDiscussionComment operation.
     * @callback module:api/TeamsApi~teamsUpdateDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a discussion comment
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {module:model/TeamsCreateDiscussionCommentRequest} teamsCreateDiscussionCommentRequest 
     * @param {module:api/TeamsApi~teamsUpdateDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsUpdateDiscussionComment(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentRequest, callback) {
      let postBody = teamsCreateDiscussionCommentRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdateDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionComment");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsUpdateDiscussionComment");
      }
      // verify the required parameter 'teamsCreateDiscussionCommentRequest' is set
      if (teamsCreateDiscussionCommentRequest === undefined || teamsCreateDiscussionCommentRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionCommentRequest' when calling teamsUpdateDiscussionComment");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
