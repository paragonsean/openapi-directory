/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableIntegration from './NullableIntegration';
import SimpleUser from './SimpleUser';
import Team from './Team';

/**
 * The ReviewRequestedIssueEvent model module.
 * @module model/ReviewRequestedIssueEvent
 * @version 1.1.4
 */
class ReviewRequestedIssueEvent {
    /**
     * Constructs a new <code>ReviewRequestedIssueEvent</code>.
     * Review Requested Issue Event
     * @alias module:model/ReviewRequestedIssueEvent
     * @param actor {module:model/SimpleUser} 
     * @param commitId {String} 
     * @param commitUrl {String} 
     * @param createdAt {String} 
     * @param event {String} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param performedViaGithubApp {module:model/NullableIntegration} 
     * @param reviewRequester {module:model/SimpleUser} 
     * @param url {String} 
     */
    constructor(actor, commitId, commitUrl, createdAt, event, id, nodeId, performedViaGithubApp, reviewRequester, url) { 
        
        ReviewRequestedIssueEvent.initialize(this, actor, commitId, commitUrl, createdAt, event, id, nodeId, performedViaGithubApp, reviewRequester, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actor, commitId, commitUrl, createdAt, event, id, nodeId, performedViaGithubApp, reviewRequester, url) { 
        obj['actor'] = actor;
        obj['commit_id'] = commitId;
        obj['commit_url'] = commitUrl;
        obj['created_at'] = createdAt;
        obj['event'] = event;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['performed_via_github_app'] = performedViaGithubApp;
        obj['review_requester'] = reviewRequester;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ReviewRequestedIssueEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReviewRequestedIssueEvent} obj Optional instance to populate.
     * @return {module:model/ReviewRequestedIssueEvent} The populated <code>ReviewRequestedIssueEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReviewRequestedIssueEvent();

            if (data.hasOwnProperty('actor')) {
                obj['actor'] = SimpleUser.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('commit_url')) {
                obj['commit_url'] = ApiClient.convertToType(data['commit_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('performed_via_github_app')) {
                obj['performed_via_github_app'] = NullableIntegration.constructFromObject(data['performed_via_github_app']);
            }
            if (data.hasOwnProperty('requested_reviewer')) {
                obj['requested_reviewer'] = SimpleUser.constructFromObject(data['requested_reviewer']);
            }
            if (data.hasOwnProperty('requested_team')) {
                obj['requested_team'] = Team.constructFromObject(data['requested_team']);
            }
            if (data.hasOwnProperty('review_requester')) {
                obj['review_requester'] = SimpleUser.constructFromObject(data['review_requester']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReviewRequestedIssueEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReviewRequestedIssueEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReviewRequestedIssueEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          SimpleUser.validateJSON(data['actor']);
        }
        // ensure the json data is a string
        if (data['commit_id'] && !(typeof data['commit_id'] === 'string' || data['commit_id'] instanceof String)) {
            throw new Error("Expected the field `commit_id` to be a primitive type in the JSON string but got " + data['commit_id']);
        }
        // ensure the json data is a string
        if (data['commit_url'] && !(typeof data['commit_url'] === 'string' || data['commit_url'] instanceof String)) {
            throw new Error("Expected the field `commit_url` to be a primitive type in the JSON string but got " + data['commit_url']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `performed_via_github_app`
        if (data['performed_via_github_app']) { // data not null
          NullableIntegration.validateJSON(data['performed_via_github_app']);
        }
        // validate the optional field `requested_reviewer`
        if (data['requested_reviewer']) { // data not null
          SimpleUser.validateJSON(data['requested_reviewer']);
        }
        // validate the optional field `requested_team`
        if (data['requested_team']) { // data not null
          Team.validateJSON(data['requested_team']);
        }
        // validate the optional field `review_requester`
        if (data['review_requester']) { // data not null
          SimpleUser.validateJSON(data['review_requester']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ReviewRequestedIssueEvent.RequiredProperties = ["actor", "commit_id", "commit_url", "created_at", "event", "id", "node_id", "performed_via_github_app", "review_requester", "url"];

/**
 * @member {module:model/SimpleUser} actor
 */
ReviewRequestedIssueEvent.prototype['actor'] = undefined;

/**
 * @member {String} commit_id
 */
ReviewRequestedIssueEvent.prototype['commit_id'] = undefined;

/**
 * @member {String} commit_url
 */
ReviewRequestedIssueEvent.prototype['commit_url'] = undefined;

/**
 * @member {String} created_at
 */
ReviewRequestedIssueEvent.prototype['created_at'] = undefined;

/**
 * @member {String} event
 */
ReviewRequestedIssueEvent.prototype['event'] = undefined;

/**
 * @member {Number} id
 */
ReviewRequestedIssueEvent.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
ReviewRequestedIssueEvent.prototype['node_id'] = undefined;

/**
 * @member {module:model/NullableIntegration} performed_via_github_app
 */
ReviewRequestedIssueEvent.prototype['performed_via_github_app'] = undefined;

/**
 * @member {module:model/SimpleUser} requested_reviewer
 */
ReviewRequestedIssueEvent.prototype['requested_reviewer'] = undefined;

/**
 * @member {module:model/Team} requested_team
 */
ReviewRequestedIssueEvent.prototype['requested_team'] = undefined;

/**
 * @member {module:model/SimpleUser} review_requester
 */
ReviewRequestedIssueEvent.prototype['review_requester'] = undefined;

/**
 * @member {String} url
 */
ReviewRequestedIssueEvent.prototype['url'] = undefined;






export default ReviewRequestedIssueEvent;

