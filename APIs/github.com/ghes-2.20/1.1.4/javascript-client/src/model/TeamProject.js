/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleUser from './SimpleUser';
import TeamProjectPermissions from './TeamProjectPermissions';

/**
 * The TeamProject model module.
 * @module model/TeamProject
 * @version 1.1.4
 */
class TeamProject {
    /**
     * Constructs a new <code>TeamProject</code>.
     * A team&#39;s access to a project.
     * @alias module:model/TeamProject
     * @param body {String} 
     * @param columnsUrl {String} 
     * @param createdAt {String} 
     * @param creator {module:model/SimpleUser} 
     * @param htmlUrl {String} 
     * @param id {Number} 
     * @param name {String} 
     * @param nodeId {String} 
     * @param number {Number} 
     * @param ownerUrl {String} 
     * @param permissions {module:model/TeamProjectPermissions} 
     * @param state {String} 
     * @param updatedAt {String} 
     * @param url {String} 
     */
    constructor(body, columnsUrl, createdAt, creator, htmlUrl, id, name, nodeId, number, ownerUrl, permissions, state, updatedAt, url) { 
        
        TeamProject.initialize(this, body, columnsUrl, createdAt, creator, htmlUrl, id, name, nodeId, number, ownerUrl, permissions, state, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, columnsUrl, createdAt, creator, htmlUrl, id, name, nodeId, number, ownerUrl, permissions, state, updatedAt, url) { 
        obj['body'] = body;
        obj['columns_url'] = columnsUrl;
        obj['created_at'] = createdAt;
        obj['creator'] = creator;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['number'] = number;
        obj['owner_url'] = ownerUrl;
        obj['permissions'] = permissions;
        obj['state'] = state;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>TeamProject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamProject} obj Optional instance to populate.
     * @return {module:model/TeamProject} The populated <code>TeamProject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamProject();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('columns_url')) {
                obj['columns_url'] = ApiClient.convertToType(data['columns_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = SimpleUser.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('organization_permission')) {
                obj['organization_permission'] = ApiClient.convertToType(data['organization_permission'], 'String');
            }
            if (data.hasOwnProperty('owner_url')) {
                obj['owner_url'] = ApiClient.convertToType(data['owner_url'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = TeamProjectPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamProject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamProject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TeamProject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['columns_url'] && !(typeof data['columns_url'] === 'string' || data['columns_url'] instanceof String)) {
            throw new Error("Expected the field `columns_url` to be a primitive type in the JSON string but got " + data['columns_url']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          SimpleUser.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['organization_permission'] && !(typeof data['organization_permission'] === 'string' || data['organization_permission'] instanceof String)) {
            throw new Error("Expected the field `organization_permission` to be a primitive type in the JSON string but got " + data['organization_permission']);
        }
        // ensure the json data is a string
        if (data['owner_url'] && !(typeof data['owner_url'] === 'string' || data['owner_url'] instanceof String)) {
            throw new Error("Expected the field `owner_url` to be a primitive type in the JSON string but got " + data['owner_url']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          TeamProjectPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

TeamProject.RequiredProperties = ["body", "columns_url", "created_at", "creator", "html_url", "id", "name", "node_id", "number", "owner_url", "permissions", "state", "updated_at", "url"];

/**
 * @member {String} body
 */
TeamProject.prototype['body'] = undefined;

/**
 * @member {String} columns_url
 */
TeamProject.prototype['columns_url'] = undefined;

/**
 * @member {String} created_at
 */
TeamProject.prototype['created_at'] = undefined;

/**
 * @member {module:model/SimpleUser} creator
 */
TeamProject.prototype['creator'] = undefined;

/**
 * @member {String} html_url
 */
TeamProject.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
TeamProject.prototype['id'] = undefined;

/**
 * @member {String} name
 */
TeamProject.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
TeamProject.prototype['node_id'] = undefined;

/**
 * @member {Number} number
 */
TeamProject.prototype['number'] = undefined;

/**
 * The organization permission for this project. Only present when owner is an organization.
 * @member {String} organization_permission
 */
TeamProject.prototype['organization_permission'] = undefined;

/**
 * @member {String} owner_url
 */
TeamProject.prototype['owner_url'] = undefined;

/**
 * @member {module:model/TeamProjectPermissions} permissions
 */
TeamProject.prototype['permissions'] = undefined;

/**
 * Whether the project is private or not. Only present when owner is an organization.
 * @member {Boolean} private
 */
TeamProject.prototype['private'] = undefined;

/**
 * @member {String} state
 */
TeamProject.prototype['state'] = undefined;

/**
 * @member {String} updated_at
 */
TeamProject.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
TeamProject.prototype['url'] = undefined;






export default TeamProject;

