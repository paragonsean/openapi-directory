/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckAnnotation model module.
 * @module model/CheckAnnotation
 * @version 1.1.4
 */
class CheckAnnotation {
    /**
     * Constructs a new <code>CheckAnnotation</code>.
     * Check Annotation
     * @alias module:model/CheckAnnotation
     * @param annotationLevel {String} 
     * @param blobHref {String} 
     * @param endColumn {Number} 
     * @param endLine {Number} 
     * @param message {String} 
     * @param path {String} 
     * @param rawDetails {String} 
     * @param startColumn {Number} 
     * @param startLine {Number} 
     * @param title {String} 
     */
    constructor(annotationLevel, blobHref, endColumn, endLine, message, path, rawDetails, startColumn, startLine, title) { 
        
        CheckAnnotation.initialize(this, annotationLevel, blobHref, endColumn, endLine, message, path, rawDetails, startColumn, startLine, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, annotationLevel, blobHref, endColumn, endLine, message, path, rawDetails, startColumn, startLine, title) { 
        obj['annotation_level'] = annotationLevel;
        obj['blob_href'] = blobHref;
        obj['end_column'] = endColumn;
        obj['end_line'] = endLine;
        obj['message'] = message;
        obj['path'] = path;
        obj['raw_details'] = rawDetails;
        obj['start_column'] = startColumn;
        obj['start_line'] = startLine;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>CheckAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckAnnotation} obj Optional instance to populate.
     * @return {module:model/CheckAnnotation} The populated <code>CheckAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckAnnotation();

            if (data.hasOwnProperty('annotation_level')) {
                obj['annotation_level'] = ApiClient.convertToType(data['annotation_level'], 'String');
            }
            if (data.hasOwnProperty('blob_href')) {
                obj['blob_href'] = ApiClient.convertToType(data['blob_href'], 'String');
            }
            if (data.hasOwnProperty('end_column')) {
                obj['end_column'] = ApiClient.convertToType(data['end_column'], 'Number');
            }
            if (data.hasOwnProperty('end_line')) {
                obj['end_line'] = ApiClient.convertToType(data['end_line'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('raw_details')) {
                obj['raw_details'] = ApiClient.convertToType(data['raw_details'], 'String');
            }
            if (data.hasOwnProperty('start_column')) {
                obj['start_column'] = ApiClient.convertToType(data['start_column'], 'Number');
            }
            if (data.hasOwnProperty('start_line')) {
                obj['start_line'] = ApiClient.convertToType(data['start_line'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckAnnotation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckAnnotation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['annotation_level'] && !(typeof data['annotation_level'] === 'string' || data['annotation_level'] instanceof String)) {
            throw new Error("Expected the field `annotation_level` to be a primitive type in the JSON string but got " + data['annotation_level']);
        }
        // ensure the json data is a string
        if (data['blob_href'] && !(typeof data['blob_href'] === 'string' || data['blob_href'] instanceof String)) {
            throw new Error("Expected the field `blob_href` to be a primitive type in the JSON string but got " + data['blob_href']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['raw_details'] && !(typeof data['raw_details'] === 'string' || data['raw_details'] instanceof String)) {
            throw new Error("Expected the field `raw_details` to be a primitive type in the JSON string but got " + data['raw_details']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

CheckAnnotation.RequiredProperties = ["annotation_level", "blob_href", "end_column", "end_line", "message", "path", "raw_details", "start_column", "start_line", "title"];

/**
 * @member {String} annotation_level
 */
CheckAnnotation.prototype['annotation_level'] = undefined;

/**
 * @member {String} blob_href
 */
CheckAnnotation.prototype['blob_href'] = undefined;

/**
 * @member {Number} end_column
 */
CheckAnnotation.prototype['end_column'] = undefined;

/**
 * @member {Number} end_line
 */
CheckAnnotation.prototype['end_line'] = undefined;

/**
 * @member {String} message
 */
CheckAnnotation.prototype['message'] = undefined;

/**
 * @member {String} path
 */
CheckAnnotation.prototype['path'] = undefined;

/**
 * @member {String} raw_details
 */
CheckAnnotation.prototype['raw_details'] = undefined;

/**
 * @member {Number} start_column
 */
CheckAnnotation.prototype['start_column'] = undefined;

/**
 * @member {Number} start_line
 */
CheckAnnotation.prototype['start_line'] = undefined;

/**
 * @member {String} title
 */
CheckAnnotation.prototype['title'] = undefined;






export default CheckAnnotation;

