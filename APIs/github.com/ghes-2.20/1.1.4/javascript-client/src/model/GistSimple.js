/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Gist from './Gist';
import GistHistory from './GistHistory';
import GistSimpleFilesValue from './GistSimpleFilesValue';
import GistSimpleForksInner from './GistSimpleForksInner';
import SimpleUser from './SimpleUser';

/**
 * The GistSimple model module.
 * @module model/GistSimple
 * @version 1.1.4
 */
class GistSimple {
    /**
     * Constructs a new <code>GistSimple</code>.
     * Gist Simple
     * @alias module:model/GistSimple
     */
    constructor() { 
        
        GistSimple.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GistSimple</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GistSimple} obj Optional instance to populate.
     * @return {module:model/GistSimple} The populated <code>GistSimple</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GistSimple();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'Number');
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('commits_url')) {
                obj['commits_url'] = ApiClient.convertToType(data['commits_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], {'String': GistSimpleFilesValue});
            }
            if (data.hasOwnProperty('fork_of')) {
                obj['fork_of'] = Gist.constructFromObject(data['fork_of']);
            }
            if (data.hasOwnProperty('forks')) {
                obj['forks'] = ApiClient.convertToType(data['forks'], [GistSimpleForksInner]);
            }
            if (data.hasOwnProperty('forks_url')) {
                obj['forks_url'] = ApiClient.convertToType(data['forks_url'], 'String');
            }
            if (data.hasOwnProperty('git_pull_url')) {
                obj['git_pull_url'] = ApiClient.convertToType(data['git_pull_url'], 'String');
            }
            if (data.hasOwnProperty('git_push_url')) {
                obj['git_push_url'] = ApiClient.convertToType(data['git_push_url'], 'String');
            }
            if (data.hasOwnProperty('history')) {
                obj['history'] = ApiClient.convertToType(data['history'], [GistHistory]);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = SimpleUser.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('truncated')) {
                obj['truncated'] = ApiClient.convertToType(data['truncated'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GistSimple</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GistSimple</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comments_url'] && !(typeof data['comments_url'] === 'string' || data['comments_url'] instanceof String)) {
            throw new Error("Expected the field `comments_url` to be a primitive type in the JSON string but got " + data['comments_url']);
        }
        // ensure the json data is a string
        if (data['commits_url'] && !(typeof data['commits_url'] === 'string' || data['commits_url'] instanceof String)) {
            throw new Error("Expected the field `commits_url` to be a primitive type in the JSON string but got " + data['commits_url']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `fork_of`
        if (data['fork_of']) { // data not null
          Gist.validateJSON(data['fork_of']);
        }
        if (data['forks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['forks'])) {
                throw new Error("Expected the field `forks` to be an array in the JSON data but got " + data['forks']);
            }
            // validate the optional field `forks` (array)
            for (const item of data['forks']) {
                GistSimpleForksInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['forks_url'] && !(typeof data['forks_url'] === 'string' || data['forks_url'] instanceof String)) {
            throw new Error("Expected the field `forks_url` to be a primitive type in the JSON string but got " + data['forks_url']);
        }
        // ensure the json data is a string
        if (data['git_pull_url'] && !(typeof data['git_pull_url'] === 'string' || data['git_pull_url'] instanceof String)) {
            throw new Error("Expected the field `git_pull_url` to be a primitive type in the JSON string but got " + data['git_pull_url']);
        }
        // ensure the json data is a string
        if (data['git_push_url'] && !(typeof data['git_push_url'] === 'string' || data['git_push_url'] instanceof String)) {
            throw new Error("Expected the field `git_push_url` to be a primitive type in the JSON string but got " + data['git_push_url']);
        }
        if (data['history']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['history'])) {
                throw new Error("Expected the field `history` to be an array in the JSON data but got " + data['history']);
            }
            // validate the optional field `history` (array)
            for (const item of data['history']) {
                GistHistory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          SimpleUser.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}



/**
 * @member {Number} comments
 */
GistSimple.prototype['comments'] = undefined;

/**
 * @member {String} comments_url
 */
GistSimple.prototype['comments_url'] = undefined;

/**
 * @member {String} commits_url
 */
GistSimple.prototype['commits_url'] = undefined;

/**
 * @member {String} created_at
 */
GistSimple.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
GistSimple.prototype['description'] = undefined;

/**
 * @member {Object.<String, module:model/GistSimpleFilesValue>} files
 */
GistSimple.prototype['files'] = undefined;

/**
 * @member {module:model/Gist} fork_of
 */
GistSimple.prototype['fork_of'] = undefined;

/**
 * @member {Array.<module:model/GistSimpleForksInner>} forks
 */
GistSimple.prototype['forks'] = undefined;

/**
 * @member {String} forks_url
 */
GistSimple.prototype['forks_url'] = undefined;

/**
 * @member {String} git_pull_url
 */
GistSimple.prototype['git_pull_url'] = undefined;

/**
 * @member {String} git_push_url
 */
GistSimple.prototype['git_push_url'] = undefined;

/**
 * @member {Array.<module:model/GistHistory>} history
 */
GistSimple.prototype['history'] = undefined;

/**
 * @member {String} html_url
 */
GistSimple.prototype['html_url'] = undefined;

/**
 * @member {String} id
 */
GistSimple.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
GistSimple.prototype['node_id'] = undefined;

/**
 * @member {module:model/SimpleUser} owner
 */
GistSimple.prototype['owner'] = undefined;

/**
 * @member {Boolean} public
 */
GistSimple.prototype['public'] = undefined;

/**
 * @member {Boolean} truncated
 */
GistSimple.prototype['truncated'] = undefined;

/**
 * @member {String} updated_at
 */
GistSimple.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
GistSimple.prototype['url'] = undefined;

/**
 * @member {String} user
 */
GistSimple.prototype['user'] = undefined;






export default GistSimple;

