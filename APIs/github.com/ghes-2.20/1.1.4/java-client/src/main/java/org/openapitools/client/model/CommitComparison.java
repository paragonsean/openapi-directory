/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Commit;
import org.openapitools.client.model.DiffEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Commit Comparison
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitComparison {
  public static final String SERIALIZED_NAME_AHEAD_BY = "ahead_by";
  @SerializedName(SERIALIZED_NAME_AHEAD_BY)
  private Integer aheadBy;

  public static final String SERIALIZED_NAME_BASE_COMMIT = "base_commit";
  @SerializedName(SERIALIZED_NAME_BASE_COMMIT)
  private Commit baseCommit;

  public static final String SERIALIZED_NAME_BEHIND_BY = "behind_by";
  @SerializedName(SERIALIZED_NAME_BEHIND_BY)
  private Integer behindBy;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private List<Commit> commits = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIFF_URL = "diff_url";
  @SerializedName(SERIALIZED_NAME_DIFF_URL)
  private URI diffUrl;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<DiffEntry> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_MERGE_BASE_COMMIT = "merge_base_commit";
  @SerializedName(SERIALIZED_NAME_MERGE_BASE_COMMIT)
  private Commit mergeBaseCommit;

  public static final String SERIALIZED_NAME_PATCH_URL = "patch_url";
  @SerializedName(SERIALIZED_NAME_PATCH_URL)
  private URI patchUrl;

  public static final String SERIALIZED_NAME_PERMALINK_URL = "permalink_url";
  @SerializedName(SERIALIZED_NAME_PERMALINK_URL)
  private URI permalinkUrl;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DIVERGED("diverged"),
    
    AHEAD("ahead"),
    
    BEHIND("behind"),
    
    IDENTICAL("identical");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TOTAL_COMMITS = "total_commits";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMMITS)
  private Integer totalCommits;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public CommitComparison() {
  }

  public CommitComparison aheadBy(Integer aheadBy) {
    this.aheadBy = aheadBy;
    return this;
  }

  /**
   * Get aheadBy
   * @return aheadBy
   */
  @javax.annotation.Nonnull
  public Integer getAheadBy() {
    return aheadBy;
  }

  public void setAheadBy(Integer aheadBy) {
    this.aheadBy = aheadBy;
  }


  public CommitComparison baseCommit(Commit baseCommit) {
    this.baseCommit = baseCommit;
    return this;
  }

  /**
   * Get baseCommit
   * @return baseCommit
   */
  @javax.annotation.Nonnull
  public Commit getBaseCommit() {
    return baseCommit;
  }

  public void setBaseCommit(Commit baseCommit) {
    this.baseCommit = baseCommit;
  }


  public CommitComparison behindBy(Integer behindBy) {
    this.behindBy = behindBy;
    return this;
  }

  /**
   * Get behindBy
   * @return behindBy
   */
  @javax.annotation.Nonnull
  public Integer getBehindBy() {
    return behindBy;
  }

  public void setBehindBy(Integer behindBy) {
    this.behindBy = behindBy;
  }


  public CommitComparison commits(List<Commit> commits) {
    this.commits = commits;
    return this;
  }

  public CommitComparison addCommitsItem(Commit commitsItem) {
    if (this.commits == null) {
      this.commits = new ArrayList<>();
    }
    this.commits.add(commitsItem);
    return this;
  }

  /**
   * Get commits
   * @return commits
   */
  @javax.annotation.Nonnull
  public List<Commit> getCommits() {
    return commits;
  }

  public void setCommits(List<Commit> commits) {
    this.commits = commits;
  }


  public CommitComparison diffUrl(URI diffUrl) {
    this.diffUrl = diffUrl;
    return this;
  }

  /**
   * Get diffUrl
   * @return diffUrl
   */
  @javax.annotation.Nonnull
  public URI getDiffUrl() {
    return diffUrl;
  }

  public void setDiffUrl(URI diffUrl) {
    this.diffUrl = diffUrl;
  }


  public CommitComparison files(List<DiffEntry> files) {
    this.files = files;
    return this;
  }

  public CommitComparison addFilesItem(DiffEntry filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<DiffEntry> getFiles() {
    return files;
  }

  public void setFiles(List<DiffEntry> files) {
    this.files = files;
  }


  public CommitComparison htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public CommitComparison mergeBaseCommit(Commit mergeBaseCommit) {
    this.mergeBaseCommit = mergeBaseCommit;
    return this;
  }

  /**
   * Get mergeBaseCommit
   * @return mergeBaseCommit
   */
  @javax.annotation.Nonnull
  public Commit getMergeBaseCommit() {
    return mergeBaseCommit;
  }

  public void setMergeBaseCommit(Commit mergeBaseCommit) {
    this.mergeBaseCommit = mergeBaseCommit;
  }


  public CommitComparison patchUrl(URI patchUrl) {
    this.patchUrl = patchUrl;
    return this;
  }

  /**
   * Get patchUrl
   * @return patchUrl
   */
  @javax.annotation.Nonnull
  public URI getPatchUrl() {
    return patchUrl;
  }

  public void setPatchUrl(URI patchUrl) {
    this.patchUrl = patchUrl;
  }


  public CommitComparison permalinkUrl(URI permalinkUrl) {
    this.permalinkUrl = permalinkUrl;
    return this;
  }

  /**
   * Get permalinkUrl
   * @return permalinkUrl
   */
  @javax.annotation.Nonnull
  public URI getPermalinkUrl() {
    return permalinkUrl;
  }

  public void setPermalinkUrl(URI permalinkUrl) {
    this.permalinkUrl = permalinkUrl;
  }


  public CommitComparison status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CommitComparison totalCommits(Integer totalCommits) {
    this.totalCommits = totalCommits;
    return this;
  }

  /**
   * Get totalCommits
   * @return totalCommits
   */
  @javax.annotation.Nonnull
  public Integer getTotalCommits() {
    return totalCommits;
  }

  public void setTotalCommits(Integer totalCommits) {
    this.totalCommits = totalCommits;
  }


  public CommitComparison url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitComparison commitComparison = (CommitComparison) o;
    return Objects.equals(this.aheadBy, commitComparison.aheadBy) &&
        Objects.equals(this.baseCommit, commitComparison.baseCommit) &&
        Objects.equals(this.behindBy, commitComparison.behindBy) &&
        Objects.equals(this.commits, commitComparison.commits) &&
        Objects.equals(this.diffUrl, commitComparison.diffUrl) &&
        Objects.equals(this.files, commitComparison.files) &&
        Objects.equals(this.htmlUrl, commitComparison.htmlUrl) &&
        Objects.equals(this.mergeBaseCommit, commitComparison.mergeBaseCommit) &&
        Objects.equals(this.patchUrl, commitComparison.patchUrl) &&
        Objects.equals(this.permalinkUrl, commitComparison.permalinkUrl) &&
        Objects.equals(this.status, commitComparison.status) &&
        Objects.equals(this.totalCommits, commitComparison.totalCommits) &&
        Objects.equals(this.url, commitComparison.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aheadBy, baseCommit, behindBy, commits, diffUrl, files, htmlUrl, mergeBaseCommit, patchUrl, permalinkUrl, status, totalCommits, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitComparison {\n");
    sb.append("    aheadBy: ").append(toIndentedString(aheadBy)).append("\n");
    sb.append("    baseCommit: ").append(toIndentedString(baseCommit)).append("\n");
    sb.append("    behindBy: ").append(toIndentedString(behindBy)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    diffUrl: ").append(toIndentedString(diffUrl)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    mergeBaseCommit: ").append(toIndentedString(mergeBaseCommit)).append("\n");
    sb.append("    patchUrl: ").append(toIndentedString(patchUrl)).append("\n");
    sb.append("    permalinkUrl: ").append(toIndentedString(permalinkUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalCommits: ").append(toIndentedString(totalCommits)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ahead_by");
    openapiFields.add("base_commit");
    openapiFields.add("behind_by");
    openapiFields.add("commits");
    openapiFields.add("diff_url");
    openapiFields.add("files");
    openapiFields.add("html_url");
    openapiFields.add("merge_base_commit");
    openapiFields.add("patch_url");
    openapiFields.add("permalink_url");
    openapiFields.add("status");
    openapiFields.add("total_commits");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ahead_by");
    openapiRequiredFields.add("base_commit");
    openapiRequiredFields.add("behind_by");
    openapiRequiredFields.add("commits");
    openapiRequiredFields.add("diff_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("merge_base_commit");
    openapiRequiredFields.add("patch_url");
    openapiRequiredFields.add("permalink_url");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("total_commits");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitComparison
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitComparison.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitComparison is not found in the empty JSON string", CommitComparison.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitComparison.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitComparison` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommitComparison.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `base_commit`
      Commit.validateJsonElement(jsonObj.get("base_commit"));
      // ensure the json data is an array
      if (!jsonObj.get("commits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits` to be an array in the JSON string but got `%s`", jsonObj.get("commits").toString()));
      }

      JsonArray jsonArraycommits = jsonObj.getAsJsonArray("commits");
      // validate the required field `commits` (array)
      for (int i = 0; i < jsonArraycommits.size(); i++) {
        Commit.validateJsonElement(jsonArraycommits.get(i));
      };
      if (!jsonObj.get("diff_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff_url").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            DiffEntry.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      // validate the required field `merge_base_commit`
      Commit.validateJsonElement(jsonObj.get("merge_base_commit"));
      if (!jsonObj.get("patch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch_url").toString()));
      }
      if (!jsonObj.get("permalink_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink_url").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitComparison.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitComparison' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitComparison> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitComparison.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitComparison>() {
           @Override
           public void write(JsonWriter out, CommitComparison value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitComparison read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitComparison given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitComparison
   * @throws IOException if the JSON string is invalid with respect to CommitComparison
   */
  public static CommitComparison fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitComparison.class);
  }

  /**
   * Convert an instance of CommitComparison to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

