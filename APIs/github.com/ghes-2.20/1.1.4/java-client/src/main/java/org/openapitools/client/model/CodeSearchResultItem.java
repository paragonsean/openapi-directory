/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.SearchResultTextMatchesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Code Search Result Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeSearchResultItem {
  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_GIT_URL = "git_url";
  @SerializedName(SERIALIZED_NAME_GIT_URL)
  private URI gitUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_AT = "last_modified_at";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_AT)
  private OffsetDateTime lastModifiedAt;

  public static final String SERIALIZED_NAME_LINE_NUMBERS = "line_numbers";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBERS)
  private List<String> lineNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private MinimalRepository repository;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public static final String SERIALIZED_NAME_TEXT_MATCHES = "text_matches";
  @SerializedName(SERIALIZED_NAME_TEXT_MATCHES)
  private List<SearchResultTextMatchesInner> textMatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public CodeSearchResultItem() {
  }

  public CodeSearchResultItem fileSize(Integer fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * Get fileSize
   * @return fileSize
   */
  @javax.annotation.Nullable
  public Integer getFileSize() {
    return fileSize;
  }

  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }


  public CodeSearchResultItem gitUrl(URI gitUrl) {
    this.gitUrl = gitUrl;
    return this;
  }

  /**
   * Get gitUrl
   * @return gitUrl
   */
  @javax.annotation.Nonnull
  public URI getGitUrl() {
    return gitUrl;
  }

  public void setGitUrl(URI gitUrl) {
    this.gitUrl = gitUrl;
  }


  public CodeSearchResultItem htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public CodeSearchResultItem language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public CodeSearchResultItem lastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

  /**
   * Get lastModifiedAt
   * @return lastModifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }

  public void setLastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }


  public CodeSearchResultItem lineNumbers(List<String> lineNumbers) {
    this.lineNumbers = lineNumbers;
    return this;
  }

  public CodeSearchResultItem addLineNumbersItem(String lineNumbersItem) {
    if (this.lineNumbers == null) {
      this.lineNumbers = new ArrayList<>();
    }
    this.lineNumbers.add(lineNumbersItem);
    return this;
  }

  /**
   * Get lineNumbers
   * @return lineNumbers
   */
  @javax.annotation.Nullable
  public List<String> getLineNumbers() {
    return lineNumbers;
  }

  public void setLineNumbers(List<String> lineNumbers) {
    this.lineNumbers = lineNumbers;
  }


  public CodeSearchResultItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CodeSearchResultItem path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public CodeSearchResultItem repository(MinimalRepository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nonnull
  public MinimalRepository getRepository() {
    return repository;
  }

  public void setRepository(MinimalRepository repository) {
    this.repository = repository;
  }


  public CodeSearchResultItem score(BigDecimal score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public CodeSearchResultItem sha(String sha) {
    this.sha = sha;
    return this;
  }

  /**
   * Get sha
   * @return sha
   */
  @javax.annotation.Nonnull
  public String getSha() {
    return sha;
  }

  public void setSha(String sha) {
    this.sha = sha;
  }


  public CodeSearchResultItem textMatches(List<SearchResultTextMatchesInner> textMatches) {
    this.textMatches = textMatches;
    return this;
  }

  public CodeSearchResultItem addTextMatchesItem(SearchResultTextMatchesInner textMatchesItem) {
    if (this.textMatches == null) {
      this.textMatches = new ArrayList<>();
    }
    this.textMatches.add(textMatchesItem);
    return this;
  }

  /**
   * Get textMatches
   * @return textMatches
   */
  @javax.annotation.Nullable
  public List<SearchResultTextMatchesInner> getTextMatches() {
    return textMatches;
  }

  public void setTextMatches(List<SearchResultTextMatchesInner> textMatches) {
    this.textMatches = textMatches;
  }


  public CodeSearchResultItem url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeSearchResultItem codeSearchResultItem = (CodeSearchResultItem) o;
    return Objects.equals(this.fileSize, codeSearchResultItem.fileSize) &&
        Objects.equals(this.gitUrl, codeSearchResultItem.gitUrl) &&
        Objects.equals(this.htmlUrl, codeSearchResultItem.htmlUrl) &&
        Objects.equals(this.language, codeSearchResultItem.language) &&
        Objects.equals(this.lastModifiedAt, codeSearchResultItem.lastModifiedAt) &&
        Objects.equals(this.lineNumbers, codeSearchResultItem.lineNumbers) &&
        Objects.equals(this.name, codeSearchResultItem.name) &&
        Objects.equals(this.path, codeSearchResultItem.path) &&
        Objects.equals(this.repository, codeSearchResultItem.repository) &&
        Objects.equals(this.score, codeSearchResultItem.score) &&
        Objects.equals(this.sha, codeSearchResultItem.sha) &&
        Objects.equals(this.textMatches, codeSearchResultItem.textMatches) &&
        Objects.equals(this.url, codeSearchResultItem.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSize, gitUrl, htmlUrl, language, lastModifiedAt, lineNumbers, name, path, repository, score, sha, textMatches, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeSearchResultItem {\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    gitUrl: ").append(toIndentedString(gitUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    lineNumbers: ").append(toIndentedString(lineNumbers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("    textMatches: ").append(toIndentedString(textMatches)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("file_size");
    openapiFields.add("git_url");
    openapiFields.add("html_url");
    openapiFields.add("language");
    openapiFields.add("last_modified_at");
    openapiFields.add("line_numbers");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("repository");
    openapiFields.add("score");
    openapiFields.add("sha");
    openapiFields.add("text_matches");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("git_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("repository");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("sha");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeSearchResultItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeSearchResultItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeSearchResultItem is not found in the empty JSON string", CodeSearchResultItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeSearchResultItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeSearchResultItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeSearchResultItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("git_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("line_numbers") != null && !jsonObj.get("line_numbers").isJsonNull() && !jsonObj.get("line_numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_numbers` to be an array in the JSON string but got `%s`", jsonObj.get("line_numbers").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the required field `repository`
      MinimalRepository.validateJsonElement(jsonObj.get("repository"));
      if (!jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
      if (jsonObj.get("text_matches") != null && !jsonObj.get("text_matches").isJsonNull()) {
        JsonArray jsonArraytextMatches = jsonObj.getAsJsonArray("text_matches");
        if (jsonArraytextMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text_matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text_matches` to be an array in the JSON string but got `%s`", jsonObj.get("text_matches").toString()));
          }

          // validate the optional field `text_matches` (array)
          for (int i = 0; i < jsonArraytextMatches.size(); i++) {
            SearchResultTextMatchesInner.validateJsonElement(jsonArraytextMatches.get(i));
          };
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeSearchResultItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeSearchResultItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeSearchResultItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeSearchResultItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeSearchResultItem>() {
           @Override
           public void write(JsonWriter out, CodeSearchResultItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeSearchResultItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeSearchResultItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeSearchResultItem
   * @throws IOException if the JSON string is invalid with respect to CodeSearchResultItem
   */
  public static CodeSearchResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeSearchResultItem.class);
  }

  /**
   * Convert an instance of CodeSearchResultItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

