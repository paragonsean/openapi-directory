/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.FullRepository;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.OrgsRemoveOutsideCollaborator422Response;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.Team2;
import org.openapitools.client.model.TeamDiscussion;
import org.openapitools.client.model.TeamDiscussionComment;
import org.openapitools.client.model.TeamFull;
import org.openapitools.client.model.TeamMembership;
import org.openapitools.client.model.TeamProject;
import org.openapitools.client.model.TeamsAddOrUpdateMembershipForUserRequest;
import org.openapitools.client.model.TeamsAddOrUpdateProjectPermissionsRequest;
import org.openapitools.client.model.TeamsAddOrUpdateRepoPermissionsRequest;
import org.openapitools.client.model.TeamsCreateDiscussionCommentRequest;
import org.openapitools.client.model.TeamsCreateDiscussionRequest;
import org.openapitools.client.model.TeamsCreateRequest;
import org.openapitools.client.model.TeamsUpdateDiscussionRequest;
import org.openapitools.client.model.TeamsUpdateRequest;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for teamsAddMemberLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddMemberLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddMemberLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddMemberLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsAddMemberLegacy(Async)");
        }

        return teamsAddMemberLegacyCall(teamId, username, _callback);

    }

    /**
     * Add team member (Legacy)
     * The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsAddMemberLegacy(Integer teamId, String username) throws ApiException {
        teamsAddMemberLegacyWithHttpInfo(teamId, username);
    }

    /**
     * Add team member (Legacy)
     * The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsAddMemberLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsAddMemberLegacyValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add team member (Legacy) (asynchronously)
     * The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is set up </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-team-member-legacy">Add team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsAddMemberLegacyAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddMemberLegacyValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateMembershipForUser
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateMembershipForUserCall(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserRequest teamsAddOrUpdateMembershipForUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateMembershipForUserRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/memberships/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateMembershipForUserValidateBeforeCall(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserRequest teamsAddOrUpdateMembershipForUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddOrUpdateMembershipForUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsAddOrUpdateMembershipForUser(Async)");
        }

        return teamsAddOrUpdateMembershipForUserCall(teamId, username, teamsAddOrUpdateMembershipForUserRequest, _callback);

    }

    /**
     * Add or update team membership for a user
     * If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserRequest  (optional)
     * @return TeamMembership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public TeamMembership teamsAddOrUpdateMembershipForUser(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserRequest teamsAddOrUpdateMembershipForUserRequest) throws ApiException {
        ApiResponse<TeamMembership> localVarResp = teamsAddOrUpdateMembershipForUserWithHttpInfo(teamId, username, teamsAddOrUpdateMembershipForUserRequest);
        return localVarResp.getData();
    }

    /**
     * Add or update team membership for a user
     * If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserRequest  (optional)
     * @return ApiResponse&lt;TeamMembership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public ApiResponse<TeamMembership> teamsAddOrUpdateMembershipForUserWithHttpInfo(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserRequest teamsAddOrUpdateMembershipForUserRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateMembershipForUserValidateBeforeCall(teamId, username, teamsAddOrUpdateMembershipForUserRequest, null);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or update team membership for a user (asynchronously)
     * If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param teamId  (required)
     * @param username  (required)
     * @param teamsAddOrUpdateMembershipForUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if you attempt to add an organization to a team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#add-or-update-team-membership-for-a-user">Add or update team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateMembershipForUserAsync(Integer teamId, String username, TeamsAddOrUpdateMembershipForUserRequest teamsAddOrUpdateMembershipForUserRequest, final ApiCallback<TeamMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateMembershipForUserValidateBeforeCall(teamId, username, teamsAddOrUpdateMembershipForUserRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateProjectPermissions
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateProjectPermissionsCall(String accept, Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsRequest teamsAddOrUpdateProjectPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateProjectPermissionsRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects/{project_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateProjectPermissionsValidateBeforeCall(String accept, Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsRequest teamsAddOrUpdateProjectPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling teamsAddOrUpdateProjectPermissions(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddOrUpdateProjectPermissions(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsAddOrUpdateProjectPermissions(Async)");
        }

        return teamsAddOrUpdateProjectPermissionsCall(accept, teamId, projectId, teamsAddOrUpdateProjectPermissionsRequest, _callback);

    }

    /**
     * Add or update team project permissions
     * Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public void teamsAddOrUpdateProjectPermissions(String accept, Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsRequest teamsAddOrUpdateProjectPermissionsRequest) throws ApiException {
        teamsAddOrUpdateProjectPermissionsWithHttpInfo(accept, teamId, projectId, teamsAddOrUpdateProjectPermissionsRequest);
    }

    /**
     * Add or update team project permissions
     * Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public ApiResponse<Void> teamsAddOrUpdateProjectPermissionsWithHttpInfo(String accept, Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsRequest teamsAddOrUpdateProjectPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateProjectPermissionsValidateBeforeCall(accept, teamId, projectId, teamsAddOrUpdateProjectPermissionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or update team project permissions (asynchronously)
     * Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @param teamsAddOrUpdateProjectPermissionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden if the project is not owned by the organization </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-project-permissions">Add or update team project permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateProjectPermissionsAsync(String accept, Integer teamId, Integer projectId, TeamsAddOrUpdateProjectPermissionsRequest teamsAddOrUpdateProjectPermissionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateProjectPermissionsValidateBeforeCall(accept, teamId, projectId, teamsAddOrUpdateProjectPermissionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddOrUpdateRepoPermissions
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateRepoPermissionsCall(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsRequest teamsAddOrUpdateRepoPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsAddOrUpdateRepoPermissionsRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos/{owner}/{repo}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddOrUpdateRepoPermissionsValidateBeforeCall(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsRequest teamsAddOrUpdateRepoPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsAddOrUpdateRepoPermissions(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsAddOrUpdateRepoPermissions(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsAddOrUpdateRepoPermissions(Async)");
        }

        return teamsAddOrUpdateRepoPermissionsCall(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsRequest, _callback);

    }

    /**
     * Add or update team repository permissions
     * To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public void teamsAddOrUpdateRepoPermissions(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsRequest teamsAddOrUpdateRepoPermissionsRequest) throws ApiException {
        teamsAddOrUpdateRepoPermissionsWithHttpInfo(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsRequest);
    }

    /**
     * Add or update team repository permissions
     * To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public ApiResponse<Void> teamsAddOrUpdateRepoPermissionsWithHttpInfo(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsRequest teamsAddOrUpdateRepoPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddOrUpdateRepoPermissionsValidateBeforeCall(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or update team repository permissions (asynchronously)
     * To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param teamsAddOrUpdateRepoPermissionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#add-or-update-team-repository-permissions">Add or update team repository permissions Documentation</a>
     */
    public okhttp3.Call teamsAddOrUpdateRepoPermissionsAsync(Integer teamId, String owner, String repo, TeamsAddOrUpdateRepoPermissionsRequest teamsAddOrUpdateRepoPermissionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddOrUpdateRepoPermissionsValidateBeforeCall(teamId, owner, repo, teamsAddOrUpdateRepoPermissionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCheckPermissionsForProject
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForProjectCall(String accept, Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects/{project_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCheckPermissionsForProjectValidateBeforeCall(String accept, Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling teamsCheckPermissionsForProject(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsCheckPermissionsForProject(Async)");
        }

        return teamsCheckPermissionsForProjectCall(accept, teamId, projectId, _callback);

    }

    /**
     * Check team permissions for a project
     * Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @return TeamProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public TeamProject teamsCheckPermissionsForProject(String accept, Integer teamId, Integer projectId) throws ApiException {
        ApiResponse<TeamProject> localVarResp = teamsCheckPermissionsForProjectWithHttpInfo(accept, teamId, projectId);
        return localVarResp.getData();
    }

    /**
     * Check team permissions for a project
     * Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TeamProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public ApiResponse<TeamProject> teamsCheckPermissionsForProjectWithHttpInfo(String accept, Integer teamId, Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = teamsCheckPermissionsForProjectValidateBeforeCall(accept, teamId, projectId, null);
        Type localVarReturnType = new TypeToken<TeamProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check team permissions for a project (asynchronously)
     * Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if project is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-project">Check team permissions for a project Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForProjectAsync(String accept, Integer teamId, Integer projectId, final ApiCallback<TeamProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCheckPermissionsForProjectValidateBeforeCall(accept, teamId, projectId, _callback);
        Type localVarReturnType = new TypeToken<TeamProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCheckPermissionsForRepo
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForRepoCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos/{owner}/{repo}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.github.v3.repository+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCheckPermissionsForRepoValidateBeforeCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForRepo(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsCheckPermissionsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsCheckPermissionsForRepo(Async)");
        }

        return teamsCheckPermissionsForRepoCall(teamId, owner, repo, _callback);

    }

    /**
     * Check team permissions for a repository
     * **Note**: Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return MinimalRepository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public MinimalRepository teamsCheckPermissionsForRepo(Integer teamId, String owner, String repo) throws ApiException {
        ApiResponse<MinimalRepository> localVarResp = teamsCheckPermissionsForRepoWithHttpInfo(teamId, owner, repo);
        return localVarResp.getData();
    }

    /**
     * Check team permissions for a repository
     * **Note**: Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public ApiResponse<MinimalRepository> teamsCheckPermissionsForRepoWithHttpInfo(Integer teamId, String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = teamsCheckPermissionsForRepoValidateBeforeCall(teamId, owner, repo, null);
        Type localVarReturnType = new TypeToken<MinimalRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check team permissions for a repository (asynchronously)
     * **Note**: Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Alternative response with extra repository information </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response if repository is managed by this team </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if repository is not managed by this team </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#check-team-permissions-for-a-repository">Check team permissions for a repository Documentation</a>
     */
    public okhttp3.Call teamsCheckPermissionsForRepoAsync(Integer teamId, String owner, String repo, final ApiCallback<MinimalRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCheckPermissionsForRepoValidateBeforeCall(teamId, owner, repo, _callback);
        Type localVarReturnType = new TypeToken<MinimalRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreate
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public okhttp3.Call teamsCreateCall(String org, TeamsCreateRequest teamsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateValidateBeforeCall(String org, TeamsCreateRequest teamsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsCreate(Async)");
        }

        // verify the required parameter 'teamsCreateRequest' is set
        if (teamsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateRequest' when calling teamsCreate(Async)");
        }

        return teamsCreateCall(org, teamsCreateRequest, _callback);

    }

    /**
     * Create a team
     * To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public TeamFull teamsCreate(String org, TeamsCreateRequest teamsCreateRequest) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsCreateWithHttpInfo(org, teamsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a team
     * To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public ApiResponse<TeamFull> teamsCreateWithHttpInfo(String org, TeamsCreateRequest teamsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(org, teamsCreateRequest, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a team (asynchronously)
     * To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
     * @param org  (required)
     * @param teamsCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team">Create a team Documentation</a>
     */
    public okhttp3.Call teamsCreateAsync(String org, TeamsCreateRequest teamsCreateRequest, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(org, teamsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateDiscussion
     * @param teamId  (required)
     * @param teamsCreateDiscussionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionCall(Integer teamId, TeamsCreateDiscussionRequest teamsCreateDiscussionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateDiscussionValidateBeforeCall(Integer teamId, TeamsCreateDiscussionRequest teamsCreateDiscussionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCreateDiscussion(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionRequest' is set
        if (teamsCreateDiscussionRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionRequest' when calling teamsCreateDiscussion(Async)");
        }

        return teamsCreateDiscussionCall(teamId, teamsCreateDiscussionRequest, _callback);

    }

    /**
     * Create a discussion
     * Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param teamsCreateDiscussionRequest  (required)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public TeamDiscussion teamsCreateDiscussion(Integer teamId, TeamsCreateDiscussionRequest teamsCreateDiscussionRequest) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsCreateDiscussionWithHttpInfo(teamId, teamsCreateDiscussionRequest);
        return localVarResp.getData();
    }

    /**
     * Create a discussion
     * Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param teamsCreateDiscussionRequest  (required)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public ApiResponse<TeamDiscussion> teamsCreateDiscussionWithHttpInfo(Integer teamId, TeamsCreateDiscussionRequest teamsCreateDiscussionRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateDiscussionValidateBeforeCall(teamId, teamsCreateDiscussionRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a discussion (asynchronously)
     * Creates a new discussion post on a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param teamsCreateDiscussionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion">Create a discussion Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionAsync(Integer teamId, TeamsCreateDiscussionRequest teamsCreateDiscussionRequest, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateDiscussionValidateBeforeCall(teamId, teamsCreateDiscussionRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateDiscussionComment
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionCommentCall(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionCommentRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateDiscussionCommentValidateBeforeCall(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCreateDiscussionComment(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsCreateDiscussionComment(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionCommentRequest' is set
        if (teamsCreateDiscussionCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionCommentRequest' when calling teamsCreateDiscussionComment(Async)");
        }

        return teamsCreateDiscussionCommentCall(teamId, discussionNumber, teamsCreateDiscussionCommentRequest, _callback);

    }

    /**
     * Create a discussion comment
     * Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public TeamDiscussionComment teamsCreateDiscussionComment(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsCreateDiscussionCommentWithHttpInfo(teamId, discussionNumber, teamsCreateDiscussionCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create a discussion comment
     * Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public ApiResponse<TeamDiscussionComment> teamsCreateDiscussionCommentWithHttpInfo(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateDiscussionCommentValidateBeforeCall(teamId, discussionNumber, teamsCreateDiscussionCommentRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a discussion comment (asynchronously)
     * Creates a new comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-discussion-comment">Create a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsCreateDiscussionCommentAsync(Integer teamId, Integer discussionNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateDiscussionCommentValidateBeforeCall(teamId, discussionNumber, teamsCreateDiscussionCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDelete
     * @param teamId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#delete-a-team">Delete a team Documentation</a>
     */
    public okhttp3.Call teamsDeleteCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteValidateBeforeCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDelete(Async)");
        }

        return teamsDeleteCall(teamId, _callback);

    }

    /**
     * Delete a team
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param teamId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#delete-a-team">Delete a team Documentation</a>
     */
    public void teamsDelete(Integer teamId) throws ApiException {
        teamsDeleteWithHttpInfo(teamId);
    }

    /**
     * Delete a team
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param teamId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#delete-a-team">Delete a team Documentation</a>
     */
    public ApiResponse<Void> teamsDeleteWithHttpInfo(Integer teamId) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(teamId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a team (asynchronously)
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param teamId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#delete-a-team">Delete a team Documentation</a>
     */
    public okhttp3.Call teamsDeleteAsync(Integer teamId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(teamId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteDiscussion
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteDiscussionValidateBeforeCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDeleteDiscussion(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussion(Async)");
        }

        return teamsDeleteDiscussionCall(teamId, discussionNumber, _callback);

    }

    /**
     * Delete a discussion
     * Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public void teamsDeleteDiscussion(Integer teamId, Integer discussionNumber) throws ApiException {
        teamsDeleteDiscussionWithHttpInfo(teamId, discussionNumber);
    }

    /**
     * Delete a discussion
     * Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public ApiResponse<Void> teamsDeleteDiscussionWithHttpInfo(Integer teamId, Integer discussionNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteDiscussionValidateBeforeCall(teamId, discussionNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a discussion (asynchronously)
     * Delete a discussion from a team&#39;s page. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion">Delete a discussion Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionAsync(Integer teamId, Integer discussionNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteDiscussionValidateBeforeCall(teamId, discussionNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteDiscussionComment
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionCommentCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteDiscussionCommentValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDeleteDiscussionComment(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionComment(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsDeleteDiscussionComment(Async)");
        }

        return teamsDeleteDiscussionCommentCall(teamId, discussionNumber, commentNumber, _callback);

    }

    /**
     * Delete a discussion comment
     * Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public void teamsDeleteDiscussionComment(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        teamsDeleteDiscussionCommentWithHttpInfo(teamId, discussionNumber, commentNumber);
    }

    /**
     * Delete a discussion comment
     * Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public ApiResponse<Void> teamsDeleteDiscussionCommentWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteDiscussionCommentValidateBeforeCall(teamId, discussionNumber, commentNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a discussion comment (asynchronously)
     * Deletes a comment on a team discussion. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#delete-a-discussion-comment">Delete a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsDeleteDiscussionCommentAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteDiscussionCommentValidateBeforeCall(teamId, discussionNumber, commentNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGet
     * @param teamId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#get-a-team">Get a team Documentation</a>
     */
    public okhttp3.Call teamsGetCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetValidateBeforeCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGet(Async)");
        }

        return teamsGetCall(teamId, _callback);

    }

    /**
     * Get a team
     * 
     * @param teamId  (required)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#get-a-team">Get a team Documentation</a>
     */
    public TeamFull teamsGet(Integer teamId) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsGetWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get a team
     * 
     * @param teamId  (required)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#get-a-team">Get a team Documentation</a>
     */
    public ApiResponse<TeamFull> teamsGetWithHttpInfo(Integer teamId) throws ApiException {
        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a team (asynchronously)
     * 
     * @param teamId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#get-a-team">Get a team Documentation</a>
     */
    public okhttp3.Call teamsGetAsync(Integer teamId, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetByName
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public okhttp3.Call teamsGetByNameCall(String org, String teamSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetByNameValidateBeforeCall(String org, String teamSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsGetByName(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling teamsGetByName(Async)");
        }

        return teamsGetByNameCall(org, teamSlug, _callback);

    }

    /**
     * Get a team by name
     * Gets a team using the team&#39;s &#x60;slug&#x60;. GitHub Enterprise Server generates the &#x60;slug&#x60; from the team &#x60;name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public TeamFull teamsGetByName(String org, String teamSlug) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsGetByNameWithHttpInfo(org, teamSlug);
        return localVarResp.getData();
    }

    /**
     * Get a team by name
     * Gets a team using the team&#39;s &#x60;slug&#x60;. GitHub Enterprise Server generates the &#x60;slug&#x60; from the team &#x60;name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public ApiResponse<TeamFull> teamsGetByNameWithHttpInfo(String org, String teamSlug) throws ApiException {
        okhttp3.Call localVarCall = teamsGetByNameValidateBeforeCall(org, teamSlug, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a team by name (asynchronously)
     * Gets a team using the team&#39;s &#x60;slug&#x60;. GitHub Enterprise Server generates the &#x60;slug&#x60; from the team &#x60;name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
     * @param org  (required)
     * @param teamSlug team_slug parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-team-by-name">Get a team by name Documentation</a>
     */
    public okhttp3.Call teamsGetByNameAsync(String org, String teamSlug, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetByNameValidateBeforeCall(org, teamSlug, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetDiscussion
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetDiscussionValidateBeforeCall(Integer teamId, Integer discussionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetDiscussion(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussion(Async)");
        }

        return teamsGetDiscussionCall(teamId, discussionNumber, _callback);

    }

    /**
     * Get a discussion
     * Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public TeamDiscussion teamsGetDiscussion(Integer teamId, Integer discussionNumber) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsGetDiscussionWithHttpInfo(teamId, discussionNumber);
        return localVarResp.getData();
    }

    /**
     * Get a discussion
     * Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public ApiResponse<TeamDiscussion> teamsGetDiscussionWithHttpInfo(Integer teamId, Integer discussionNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsGetDiscussionValidateBeforeCall(teamId, discussionNumber, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a discussion (asynchronously)
     * Get a specific discussion on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion">Get a discussion Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionAsync(Integer teamId, Integer discussionNumber, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetDiscussionValidateBeforeCall(teamId, discussionNumber, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetDiscussionComment
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionCommentCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetDiscussionCommentValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetDiscussionComment(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionComment(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsGetDiscussionComment(Async)");
        }

        return teamsGetDiscussionCommentCall(teamId, discussionNumber, commentNumber, _callback);

    }

    /**
     * Get a discussion comment
     * Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public TeamDiscussionComment teamsGetDiscussionComment(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsGetDiscussionCommentWithHttpInfo(teamId, discussionNumber, commentNumber);
        return localVarResp.getData();
    }

    /**
     * Get a discussion comment
     * Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public ApiResponse<TeamDiscussionComment> teamsGetDiscussionCommentWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber) throws ApiException {
        okhttp3.Call localVarCall = teamsGetDiscussionCommentValidateBeforeCall(teamId, discussionNumber, commentNumber, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a discussion comment (asynchronously)
     * Get a specific comment on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-a-discussion-comment">Get a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsGetDiscussionCommentAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetDiscussionCommentValidateBeforeCall(teamId, discussionNumber, commentNumber, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetMemberLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetMemberLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetMemberLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetMemberLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsGetMemberLegacy(Async)");
        }

        return teamsGetMemberLegacyCall(teamId, username, _callback);

    }

    /**
     * Get team member (Legacy)
     * The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsGetMemberLegacy(Integer teamId, String username) throws ApiException {
        teamsGetMemberLegacyWithHttpInfo(teamId, username);
    }

    /**
     * Get team member (Legacy)
     * The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsGetMemberLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsGetMemberLegacyValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get team member (Legacy) (asynchronously)
     * The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> if user is a member </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if user is not a member </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-member-legacy">Get team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsGetMemberLegacyAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetMemberLegacyValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetMembershipForUser
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsGetMembershipForUserCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/memberships/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetMembershipForUserValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetMembershipForUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsGetMembershipForUser(Async)");
        }

        return teamsGetMembershipForUserCall(teamId, username, _callback);

    }

    /**
     * Get team membership for a user
     * Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The &#x60;role&#x60; for organization owners returns as &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team).
     * @param teamId  (required)
     * @param username  (required)
     * @return TeamMembership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public TeamMembership teamsGetMembershipForUser(Integer teamId, String username) throws ApiException {
        ApiResponse<TeamMembership> localVarResp = teamsGetMembershipForUserWithHttpInfo(teamId, username);
        return localVarResp.getData();
    }

    /**
     * Get team membership for a user
     * Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The &#x60;role&#x60; for organization owners returns as &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team).
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;TeamMembership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public ApiResponse<TeamMembership> teamsGetMembershipForUserWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsGetMembershipForUserValidateBeforeCall(teamId, username, null);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get team membership for a user (asynchronously)
     * Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The &#x60;role&#x60; for organization owners returns as &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#create-a-team).
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#get-team-membership-for-a-user">Get team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsGetMembershipForUserAsync(Integer teamId, String username, final ApiCallback<TeamMembership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetMembershipForUserValidateBeforeCall(teamId, username, _callback);
        Type localVarReturnType = new TypeToken<TeamMembership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsList
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public okhttp3.Call teamsListCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling teamsList(Async)");
        }

        return teamsListCall(org, perPage, page, _callback);

    }

    /**
     * List teams
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public List<Team> teamsList(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Team>> localVarResp = teamsListWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List teams
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public ApiResponse<List<Team>> teamsListWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List teams (asynchronously)
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams">List teams Documentation</a>
     */
    public okhttp3.Call teamsListAsync(String org, Integer perPage, Integer page, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListChild
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-child-teams">List child teams Documentation</a>
     */
    public okhttp3.Call teamsListChildCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/teams"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListChildValidateBeforeCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListChild(Async)");
        }

        return teamsListChildCall(teamId, perPage, page, _callback);

    }

    /**
     * List child teams
     * 
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Team2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-child-teams">List child teams Documentation</a>
     */
    public List<Team2> teamsListChild(Integer teamId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Team2>> localVarResp = teamsListChildWithHttpInfo(teamId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List child teams
     * 
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Team2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-child-teams">List child teams Documentation</a>
     */
    public ApiResponse<List<Team2>> teamsListChildWithHttpInfo(Integer teamId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListChildValidateBeforeCall(teamId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Team2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List child teams (asynchronously)
     * 
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if child teams exist </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-child-teams">List child teams Documentation</a>
     */
    public okhttp3.Call teamsListChildAsync(Integer teamId, Integer perPage, Integer page, final ApiCallback<List<Team2>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListChildValidateBeforeCall(teamId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Team2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListDiscussionComments
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionCommentsCall(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListDiscussionCommentsValidateBeforeCall(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListDiscussionComments(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsListDiscussionComments(Async)");
        }

        return teamsListDiscussionCommentsCall(teamId, discussionNumber, direction, perPage, page, _callback);

    }

    /**
     * List discussion comments
     * List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public List<TeamDiscussionComment> teamsListDiscussionComments(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamDiscussionComment>> localVarResp = teamsListDiscussionCommentsWithHttpInfo(teamId, discussionNumber, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List discussion comments
     * List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamDiscussionComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public ApiResponse<List<TeamDiscussionComment>> teamsListDiscussionCommentsWithHttpInfo(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListDiscussionCommentsValidateBeforeCall(teamId, discussionNumber, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamDiscussionComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List discussion comments (asynchronously)
     * List all comments on a team discussion. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussion-comments">List discussion comments Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionCommentsAsync(Integer teamId, Integer discussionNumber, String direction, Integer perPage, Integer page, final ApiCallback<List<TeamDiscussionComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListDiscussionCommentsValidateBeforeCall(teamId, discussionNumber, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDiscussionComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListDiscussions
     * @param teamId  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionsCall(Integer teamId, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListDiscussionsValidateBeforeCall(Integer teamId, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListDiscussions(Async)");
        }

        return teamsListDiscussionsCall(teamId, direction, perPage, page, _callback);

    }

    /**
     * List discussions
     * List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public List<TeamDiscussion> teamsListDiscussions(Integer teamId, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamDiscussion>> localVarResp = teamsListDiscussionsWithHttpInfo(teamId, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List discussions
     * List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamDiscussion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public ApiResponse<List<TeamDiscussion>> teamsListDiscussionsWithHttpInfo(Integer teamId, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListDiscussionsValidateBeforeCall(teamId, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamDiscussion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List discussions (asynchronously)
     * List all discussions on a team&#39;s page. OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param direction Sorts the discussion comments by the date they were created. To return the oldest comments first, set to &#x60;asc&#x60;. Can be one of &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-discussions">List discussions Documentation</a>
     */
    public okhttp3.Call teamsListDiscussionsAsync(Integer teamId, String direction, Integer perPage, Integer page, final ApiCallback<List<TeamDiscussion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListDiscussionsValidateBeforeCall(teamId, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamDiscussion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListForAuthenticatedUser
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public okhttp3.Call teamsListForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return teamsListForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List teams for the authenticated user
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/).
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public List<TeamFull> teamsListForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamFull>> localVarResp = teamsListForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List teams for the authenticated user
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/).
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamFull&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public ApiResponse<List<TeamFull>> teamsListForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamFull>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List teams for the authenticated user (asynchronously)
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/).
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-teams-for-the-authenticated-user">List teams for the authenticated user Documentation</a>
     */
    public okhttp3.Call teamsListForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<TeamFull>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamFull>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListMembers
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public okhttp3.Call teamsListMembersCall(Integer teamId, String role, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListMembersValidateBeforeCall(Integer teamId, String role, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListMembers(Async)");
        }

        return teamsListMembersCall(teamId, role, perPage, page, _callback);

    }

    /**
     * List team members
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public List<SimpleUser> teamsListMembers(Integer teamId, String role, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = teamsListMembersWithHttpInfo(teamId, role, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team members
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> teamsListMembersWithHttpInfo(Integer teamId, String role, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListMembersValidateBeforeCall(teamId, role, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team members (asynchronously)
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param teamId  (required)
     * @param role Filters members returned by their role in the team. Can be one of:   \\* &#x60;member&#x60; - normal members of the team.   \\* &#x60;maintainer&#x60; - team maintainers.   \\* &#x60;all&#x60; - all members of the team. (optional, default to all)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#list-team-members">List team members Documentation</a>
     */
    public okhttp3.Call teamsListMembersAsync(Integer teamId, String role, Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListMembersValidateBeforeCall(teamId, role, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListProjects
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-projects">List team projects Documentation</a>
     */
    public okhttp3.Call teamsListProjectsCall(String accept, Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListProjectsValidateBeforeCall(String accept, Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling teamsListProjects(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListProjects(Async)");
        }

        return teamsListProjectsCall(accept, teamId, perPage, page, _callback);

    }

    /**
     * List team projects
     * Lists the organization projects for a team. If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all projects for the team.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TeamProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-projects">List team projects Documentation</a>
     */
    public List<TeamProject> teamsListProjects(String accept, Integer teamId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TeamProject>> localVarResp = teamsListProjectsWithHttpInfo(accept, teamId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team projects
     * Lists the organization projects for a team. If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all projects for the team.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TeamProject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-projects">List team projects Documentation</a>
     */
    public ApiResponse<List<TeamProject>> teamsListProjectsWithHttpInfo(String accept, Integer teamId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListProjectsValidateBeforeCall(accept, teamId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TeamProject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team projects (asynchronously)
     * Lists the organization projects for a team. If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all projects for the team.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-projects">List team projects Documentation</a>
     */
    public okhttp3.Call teamsListProjectsAsync(String accept, Integer teamId, Integer perPage, Integer page, final ApiCallback<List<TeamProject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListProjectsValidateBeforeCall(accept, teamId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TeamProject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListRepos
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-repositories">List team repositories Documentation</a>
     */
    public okhttp3.Call teamsListReposCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListReposValidateBeforeCall(Integer teamId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsListRepos(Async)");
        }

        return teamsListReposCall(teamId, perPage, page, _callback);

    }

    /**
     * List team repositories
     * If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all repositories for the team.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-repositories">List team repositories Documentation</a>
     */
    public List<MinimalRepository> teamsListRepos(Integer teamId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = teamsListReposWithHttpInfo(teamId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List team repositories
     * If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all repositories for the team.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-repositories">List team repositories Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> teamsListReposWithHttpInfo(Integer teamId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = teamsListReposValidateBeforeCall(teamId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team repositories (asynchronously)
     * If you are an [authenticated](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#authentication) site administrator for your Enterprise instance, you will be able to list all repositories for the team.
     * @param teamId  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#list-team-repositories">List team repositories Documentation</a>
     */
    public okhttp3.Call teamsListReposAsync(Integer teamId, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListReposValidateBeforeCall(teamId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveMemberLegacy
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveMemberLegacyCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/members/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveMemberLegacyValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveMemberLegacy(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsRemoveMemberLegacy(Async)");
        }

        return teamsRemoveMemberLegacyCall(teamId, username, _callback);

    }

    /**
     * Remove team member (Legacy)
     * The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public void teamsRemoveMemberLegacy(Integer teamId, String username) throws ApiException {
        teamsRemoveMemberLegacyWithHttpInfo(teamId, username);
    }

    /**
     * Remove team member (Legacy)
     * The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> teamsRemoveMemberLegacyWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveMemberLegacyValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove team member (Legacy) (asynchronously)
     * The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if team synchronization is setup </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-member-legacy">Remove team member (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call teamsRemoveMemberLegacyAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveMemberLegacyValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveMembershipForUser
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsRemoveMembershipForUserCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/memberships/{username}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveMembershipForUserValidateBeforeCall(Integer teamId, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveMembershipForUser(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling teamsRemoveMembershipForUser(Async)");
        }

        return teamsRemoveMembershipForUserCall(teamId, username, _callback);

    }

    /**
     * Remove team membership for a user
     * To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     * @param teamId  (required)
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public void teamsRemoveMembershipForUser(Integer teamId, String username) throws ApiException {
        teamsRemoveMembershipForUserWithHttpInfo(teamId, username);
    }

    /**
     * Remove team membership for a user
     * To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     * @param teamId  (required)
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public ApiResponse<Void> teamsRemoveMembershipForUserWithHttpInfo(Integer teamId, String username) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveMembershipForUserValidateBeforeCall(teamId, username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove team membership for a user (asynchronously)
     * To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     * @param teamId  (required)
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#remove-team-membership-for-a-user">Remove team membership for a user Documentation</a>
     */
    public okhttp3.Call teamsRemoveMembershipForUserAsync(Integer teamId, String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveMembershipForUserValidateBeforeCall(teamId, username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveProject
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveProjectCall(Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/projects/{project_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveProjectValidateBeforeCall(Integer teamId, Integer projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling teamsRemoveProject(Async)");
        }

        return teamsRemoveProjectCall(teamId, projectId, _callback);

    }

    /**
     * Remove a project from a team
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param teamId  (required)
     * @param projectId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public void teamsRemoveProject(Integer teamId, Integer projectId) throws ApiException {
        teamsRemoveProjectWithHttpInfo(teamId, projectId);
    }

    /**
     * Remove a project from a team
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param teamId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public ApiResponse<Void> teamsRemoveProjectWithHttpInfo(Integer teamId, Integer projectId) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveProjectValidateBeforeCall(teamId, projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a project from a team (asynchronously)
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param teamId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-project-from-a-team">Remove a project from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveProjectAsync(Integer teamId, Integer projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveProjectValidateBeforeCall(teamId, projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveRepo
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveRepoCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/repos/{owner}/{repo}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveRepoValidateBeforeCall(Integer teamId, String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsRemoveRepo(Async)");
        }

        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling teamsRemoveRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling teamsRemoveRepo(Async)");
        }

        return teamsRemoveRepoCall(teamId, owner, repo, _callback);

    }

    /**
     * Remove a repository from a team
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public void teamsRemoveRepo(Integer teamId, String owner, String repo) throws ApiException {
        teamsRemoveRepoWithHttpInfo(teamId, owner, repo);
    }

    /**
     * Remove a repository from a team
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public ApiResponse<Void> teamsRemoveRepoWithHttpInfo(Integer teamId, String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveRepoValidateBeforeCall(teamId, owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a repository from a team (asynchronously)
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param teamId  (required)
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#remove-a-repository-from-a-team">Remove a repository from a team Documentation</a>
     */
    public okhttp3.Call teamsRemoveRepoAsync(Integer teamId, String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveRepoValidateBeforeCall(teamId, owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdate
     * @param teamId  (required)
     * @param teamsUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#update-a-team">Update a team Documentation</a>
     */
    public okhttp3.Call teamsUpdateCall(Integer teamId, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateValidateBeforeCall(Integer teamId, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdate(Async)");
        }

        return teamsUpdateCall(teamId, teamsUpdateRequest, _callback);

    }

    /**
     * Update a team
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
     * @param teamId  (required)
     * @param teamsUpdateRequest  (optional)
     * @return TeamFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#update-a-team">Update a team Documentation</a>
     */
    public TeamFull teamsUpdate(Integer teamId, TeamsUpdateRequest teamsUpdateRequest) throws ApiException {
        ApiResponse<TeamFull> localVarResp = teamsUpdateWithHttpInfo(teamId, teamsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a team
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
     * @param teamId  (required)
     * @param teamsUpdateRequest  (optional)
     * @return ApiResponse&lt;TeamFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#update-a-team">Update a team Documentation</a>
     */
    public ApiResponse<TeamFull> teamsUpdateWithHttpInfo(Integer teamId, TeamsUpdateRequest teamsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(teamId, teamsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a team (asynchronously)
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
     * @param teamId  (required)
     * @param teamsUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#update-a-team">Update a team Documentation</a>
     */
    public okhttp3.Call teamsUpdateAsync(Integer teamId, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback<TeamFull> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(teamId, teamsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamFull>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateDiscussion
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionCall(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionRequest teamsUpdateDiscussionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateDiscussionRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateDiscussionValidateBeforeCall(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionRequest teamsUpdateDiscussionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdateDiscussion(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussion(Async)");
        }

        return teamsUpdateDiscussionCall(teamId, discussionNumber, teamsUpdateDiscussionRequest, _callback);

    }

    /**
     * Update a discussion
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionRequest  (optional)
     * @return TeamDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public TeamDiscussion teamsUpdateDiscussion(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionRequest teamsUpdateDiscussionRequest) throws ApiException {
        ApiResponse<TeamDiscussion> localVarResp = teamsUpdateDiscussionWithHttpInfo(teamId, discussionNumber, teamsUpdateDiscussionRequest);
        return localVarResp.getData();
    }

    /**
     * Update a discussion
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionRequest  (optional)
     * @return ApiResponse&lt;TeamDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public ApiResponse<TeamDiscussion> teamsUpdateDiscussionWithHttpInfo(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionRequest teamsUpdateDiscussionRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateDiscussionValidateBeforeCall(teamId, discussionNumber, teamsUpdateDiscussionRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a discussion (asynchronously)
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param teamsUpdateDiscussionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion">Update a discussion Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionAsync(Integer teamId, Integer discussionNumber, TeamsUpdateDiscussionRequest teamsUpdateDiscussionRequest, final ApiCallback<TeamDiscussion> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateDiscussionValidateBeforeCall(teamId, discussionNumber, teamsUpdateDiscussionRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateDiscussionComment
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionCommentCall(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateDiscussionCommentRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateDiscussionCommentValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdateDiscussionComment(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionComment(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling teamsUpdateDiscussionComment(Async)");
        }

        // verify the required parameter 'teamsCreateDiscussionCommentRequest' is set
        if (teamsCreateDiscussionCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateDiscussionCommentRequest' when calling teamsUpdateDiscussionComment(Async)");
        }

        return teamsUpdateDiscussionCommentCall(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentRequest, _callback);

    }

    /**
     * Update a discussion comment
     * Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @return TeamDiscussionComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public TeamDiscussionComment teamsUpdateDiscussionComment(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest) throws ApiException {
        ApiResponse<TeamDiscussionComment> localVarResp = teamsUpdateDiscussionCommentWithHttpInfo(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Update a discussion comment
     * Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @return ApiResponse&lt;TeamDiscussionComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public ApiResponse<TeamDiscussionComment> teamsUpdateDiscussionCommentWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateDiscussionCommentValidateBeforeCall(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentRequest, null);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a discussion comment (asynchronously)
     * Edits the body text of a discussion comment. OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param teamsCreateDiscussionCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/teams#update-a-discussion-comment">Update a discussion comment Documentation</a>
     */
    public okhttp3.Call teamsUpdateDiscussionCommentAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, TeamsCreateDiscussionCommentRequest teamsCreateDiscussionCommentRequest, final ApiCallback<TeamDiscussionComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateDiscussionCommentValidateBeforeCall(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamDiscussionComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
