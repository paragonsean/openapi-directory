/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NullableSimpleUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of related issues and pull requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NullableMilestone {
  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_CLOSED_ISSUES = "closed_issues";
  @SerializedName(SERIALIZED_NAME_CLOSED_ISSUES)
  private Integer closedIssues;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private NullableSimpleUser creator;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DUE_ON = "due_on";
  @SerializedName(SERIALIZED_NAME_DUE_ON)
  private OffsetDateTime dueOn;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private URI labelsUrl;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_OPEN_ISSUES = "open_issues";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES)
  private Integer openIssues;

  /**
   * The state of the milestone.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OPEN("open"),
    
    CLOSED("closed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state = StateEnum.OPEN;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public NullableMilestone() {
  }

  public NullableMilestone closedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
    return this;
  }

  /**
   * Get closedAt
   * @return closedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }


  public NullableMilestone closedIssues(Integer closedIssues) {
    this.closedIssues = closedIssues;
    return this;
  }

  /**
   * Get closedIssues
   * @return closedIssues
   */
  @javax.annotation.Nonnull
  public Integer getClosedIssues() {
    return closedIssues;
  }

  public void setClosedIssues(Integer closedIssues) {
    this.closedIssues = closedIssues;
  }


  public NullableMilestone createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public NullableMilestone creator(NullableSimpleUser creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Get creator
   * @return creator
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getCreator() {
    return creator;
  }

  public void setCreator(NullableSimpleUser creator) {
    this.creator = creator;
  }


  public NullableMilestone description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NullableMilestone dueOn(OffsetDateTime dueOn) {
    this.dueOn = dueOn;
    return this;
  }

  /**
   * Get dueOn
   * @return dueOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueOn() {
    return dueOn;
  }

  public void setDueOn(OffsetDateTime dueOn) {
    this.dueOn = dueOn;
  }


  public NullableMilestone htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public NullableMilestone id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public NullableMilestone labelsUrl(URI labelsUrl) {
    this.labelsUrl = labelsUrl;
    return this;
  }

  /**
   * Get labelsUrl
   * @return labelsUrl
   */
  @javax.annotation.Nonnull
  public URI getLabelsUrl() {
    return labelsUrl;
  }

  public void setLabelsUrl(URI labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public NullableMilestone nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public NullableMilestone number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The number of the milestone.
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public NullableMilestone openIssues(Integer openIssues) {
    this.openIssues = openIssues;
    return this;
  }

  /**
   * Get openIssues
   * @return openIssues
   */
  @javax.annotation.Nonnull
  public Integer getOpenIssues() {
    return openIssues;
  }

  public void setOpenIssues(Integer openIssues) {
    this.openIssues = openIssues;
  }


  public NullableMilestone state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the milestone.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public NullableMilestone title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the milestone.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public NullableMilestone updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public NullableMilestone url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NullableMilestone nullableMilestone = (NullableMilestone) o;
    return Objects.equals(this.closedAt, nullableMilestone.closedAt) &&
        Objects.equals(this.closedIssues, nullableMilestone.closedIssues) &&
        Objects.equals(this.createdAt, nullableMilestone.createdAt) &&
        Objects.equals(this.creator, nullableMilestone.creator) &&
        Objects.equals(this.description, nullableMilestone.description) &&
        Objects.equals(this.dueOn, nullableMilestone.dueOn) &&
        Objects.equals(this.htmlUrl, nullableMilestone.htmlUrl) &&
        Objects.equals(this.id, nullableMilestone.id) &&
        Objects.equals(this.labelsUrl, nullableMilestone.labelsUrl) &&
        Objects.equals(this.nodeId, nullableMilestone.nodeId) &&
        Objects.equals(this.number, nullableMilestone.number) &&
        Objects.equals(this.openIssues, nullableMilestone.openIssues) &&
        Objects.equals(this.state, nullableMilestone.state) &&
        Objects.equals(this.title, nullableMilestone.title) &&
        Objects.equals(this.updatedAt, nullableMilestone.updatedAt) &&
        Objects.equals(this.url, nullableMilestone.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedAt, closedIssues, createdAt, creator, description, dueOn, htmlUrl, id, labelsUrl, nodeId, number, openIssues, state, title, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NullableMilestone {\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    closedIssues: ").append(toIndentedString(closedIssues)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueOn: ").append(toIndentedString(dueOn)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    openIssues: ").append(toIndentedString(openIssues)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed_at");
    openapiFields.add("closed_issues");
    openapiFields.add("created_at");
    openapiFields.add("creator");
    openapiFields.add("description");
    openapiFields.add("due_on");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("labels_url");
    openapiFields.add("node_id");
    openapiFields.add("number");
    openapiFields.add("open_issues");
    openapiFields.add("state");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("closed_at");
    openapiRequiredFields.add("closed_issues");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("creator");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("due_on");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("labels_url");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("open_issues");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NullableMilestone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NullableMilestone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NullableMilestone is not found in the empty JSON string", NullableMilestone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NullableMilestone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NullableMilestone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NullableMilestone.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `creator`
      NullableSimpleUser.validateJsonElement(jsonObj.get("creator"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NullableMilestone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NullableMilestone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NullableMilestone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NullableMilestone.class));

       return (TypeAdapter<T>) new TypeAdapter<NullableMilestone>() {
           @Override
           public void write(JsonWriter out, NullableMilestone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NullableMilestone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NullableMilestone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NullableMilestone
   * @throws IOException if the JSON string is invalid with respect to NullableMilestone
   */
  public static NullableMilestone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NullableMilestone.class);
  }

  /**
   * Convert an instance of NullableMilestone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

