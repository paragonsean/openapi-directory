/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnterpriseCommentOverview;
import org.openapitools.client.model.EnterpriseGistOverview;
import org.openapitools.client.model.EnterpriseHookOverview;
import org.openapitools.client.model.EnterpriseIssueOverview;
import org.openapitools.client.model.EnterpriseMilestoneOverview;
import org.openapitools.client.model.EnterpriseOrganizationOverview;
import org.openapitools.client.model.EnterprisePageOverview;
import org.openapitools.client.model.EnterprisePullRequestOverview;
import org.openapitools.client.model.EnterpriseRepositoryOverview;
import org.openapitools.client.model.EnterpriseUserOverview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseOverview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseOverview {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private EnterpriseCommentOverview comments;

  public static final String SERIALIZED_NAME_GISTS = "gists";
  @SerializedName(SERIALIZED_NAME_GISTS)
  private EnterpriseGistOverview gists;

  public static final String SERIALIZED_NAME_HOOKS = "hooks";
  @SerializedName(SERIALIZED_NAME_HOOKS)
  private EnterpriseHookOverview hooks;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private EnterpriseIssueOverview issues;

  public static final String SERIALIZED_NAME_MILESTONES = "milestones";
  @SerializedName(SERIALIZED_NAME_MILESTONES)
  private EnterpriseMilestoneOverview milestones;

  public static final String SERIALIZED_NAME_ORGS = "orgs";
  @SerializedName(SERIALIZED_NAME_ORGS)
  private EnterpriseOrganizationOverview orgs;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private EnterprisePageOverview pages;

  public static final String SERIALIZED_NAME_PULLS = "pulls";
  @SerializedName(SERIALIZED_NAME_PULLS)
  private EnterprisePullRequestOverview pulls;

  public static final String SERIALIZED_NAME_REPOS = "repos";
  @SerializedName(SERIALIZED_NAME_REPOS)
  private EnterpriseRepositoryOverview repos;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private EnterpriseUserOverview users;

  public EnterpriseOverview() {
  }

  public EnterpriseOverview comments(EnterpriseCommentOverview comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public EnterpriseCommentOverview getComments() {
    return comments;
  }

  public void setComments(EnterpriseCommentOverview comments) {
    this.comments = comments;
  }


  public EnterpriseOverview gists(EnterpriseGistOverview gists) {
    this.gists = gists;
    return this;
  }

  /**
   * Get gists
   * @return gists
   */
  @javax.annotation.Nullable
  public EnterpriseGistOverview getGists() {
    return gists;
  }

  public void setGists(EnterpriseGistOverview gists) {
    this.gists = gists;
  }


  public EnterpriseOverview hooks(EnterpriseHookOverview hooks) {
    this.hooks = hooks;
    return this;
  }

  /**
   * Get hooks
   * @return hooks
   */
  @javax.annotation.Nullable
  public EnterpriseHookOverview getHooks() {
    return hooks;
  }

  public void setHooks(EnterpriseHookOverview hooks) {
    this.hooks = hooks;
  }


  public EnterpriseOverview issues(EnterpriseIssueOverview issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Get issues
   * @return issues
   */
  @javax.annotation.Nullable
  public EnterpriseIssueOverview getIssues() {
    return issues;
  }

  public void setIssues(EnterpriseIssueOverview issues) {
    this.issues = issues;
  }


  public EnterpriseOverview milestones(EnterpriseMilestoneOverview milestones) {
    this.milestones = milestones;
    return this;
  }

  /**
   * Get milestones
   * @return milestones
   */
  @javax.annotation.Nullable
  public EnterpriseMilestoneOverview getMilestones() {
    return milestones;
  }

  public void setMilestones(EnterpriseMilestoneOverview milestones) {
    this.milestones = milestones;
  }


  public EnterpriseOverview orgs(EnterpriseOrganizationOverview orgs) {
    this.orgs = orgs;
    return this;
  }

  /**
   * Get orgs
   * @return orgs
   */
  @javax.annotation.Nullable
  public EnterpriseOrganizationOverview getOrgs() {
    return orgs;
  }

  public void setOrgs(EnterpriseOrganizationOverview orgs) {
    this.orgs = orgs;
  }


  public EnterpriseOverview pages(EnterprisePageOverview pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Get pages
   * @return pages
   */
  @javax.annotation.Nullable
  public EnterprisePageOverview getPages() {
    return pages;
  }

  public void setPages(EnterprisePageOverview pages) {
    this.pages = pages;
  }


  public EnterpriseOverview pulls(EnterprisePullRequestOverview pulls) {
    this.pulls = pulls;
    return this;
  }

  /**
   * Get pulls
   * @return pulls
   */
  @javax.annotation.Nullable
  public EnterprisePullRequestOverview getPulls() {
    return pulls;
  }

  public void setPulls(EnterprisePullRequestOverview pulls) {
    this.pulls = pulls;
  }


  public EnterpriseOverview repos(EnterpriseRepositoryOverview repos) {
    this.repos = repos;
    return this;
  }

  /**
   * Get repos
   * @return repos
   */
  @javax.annotation.Nullable
  public EnterpriseRepositoryOverview getRepos() {
    return repos;
  }

  public void setRepos(EnterpriseRepositoryOverview repos) {
    this.repos = repos;
  }


  public EnterpriseOverview users(EnterpriseUserOverview users) {
    this.users = users;
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public EnterpriseUserOverview getUsers() {
    return users;
  }

  public void setUsers(EnterpriseUserOverview users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseOverview enterpriseOverview = (EnterpriseOverview) o;
    return Objects.equals(this.comments, enterpriseOverview.comments) &&
        Objects.equals(this.gists, enterpriseOverview.gists) &&
        Objects.equals(this.hooks, enterpriseOverview.hooks) &&
        Objects.equals(this.issues, enterpriseOverview.issues) &&
        Objects.equals(this.milestones, enterpriseOverview.milestones) &&
        Objects.equals(this.orgs, enterpriseOverview.orgs) &&
        Objects.equals(this.pages, enterpriseOverview.pages) &&
        Objects.equals(this.pulls, enterpriseOverview.pulls) &&
        Objects.equals(this.repos, enterpriseOverview.repos) &&
        Objects.equals(this.users, enterpriseOverview.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, gists, hooks, issues, milestones, orgs, pages, pulls, repos, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseOverview {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    gists: ").append(toIndentedString(gists)).append("\n");
    sb.append("    hooks: ").append(toIndentedString(hooks)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    milestones: ").append(toIndentedString(milestones)).append("\n");
    sb.append("    orgs: ").append(toIndentedString(orgs)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    pulls: ").append(toIndentedString(pulls)).append("\n");
    sb.append("    repos: ").append(toIndentedString(repos)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("gists");
    openapiFields.add("hooks");
    openapiFields.add("issues");
    openapiFields.add("milestones");
    openapiFields.add("orgs");
    openapiFields.add("pages");
    openapiFields.add("pulls");
    openapiFields.add("repos");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseOverview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseOverview is not found in the empty JSON string", EnterpriseOverview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseOverview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseOverview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `comments`
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        EnterpriseCommentOverview.validateJsonElement(jsonObj.get("comments"));
      }
      // validate the optional field `gists`
      if (jsonObj.get("gists") != null && !jsonObj.get("gists").isJsonNull()) {
        EnterpriseGistOverview.validateJsonElement(jsonObj.get("gists"));
      }
      // validate the optional field `hooks`
      if (jsonObj.get("hooks") != null && !jsonObj.get("hooks").isJsonNull()) {
        EnterpriseHookOverview.validateJsonElement(jsonObj.get("hooks"));
      }
      // validate the optional field `issues`
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) {
        EnterpriseIssueOverview.validateJsonElement(jsonObj.get("issues"));
      }
      // validate the optional field `milestones`
      if (jsonObj.get("milestones") != null && !jsonObj.get("milestones").isJsonNull()) {
        EnterpriseMilestoneOverview.validateJsonElement(jsonObj.get("milestones"));
      }
      // validate the optional field `orgs`
      if (jsonObj.get("orgs") != null && !jsonObj.get("orgs").isJsonNull()) {
        EnterpriseOrganizationOverview.validateJsonElement(jsonObj.get("orgs"));
      }
      // validate the optional field `pages`
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) {
        EnterprisePageOverview.validateJsonElement(jsonObj.get("pages"));
      }
      // validate the optional field `pulls`
      if (jsonObj.get("pulls") != null && !jsonObj.get("pulls").isJsonNull()) {
        EnterprisePullRequestOverview.validateJsonElement(jsonObj.get("pulls"));
      }
      // validate the optional field `repos`
      if (jsonObj.get("repos") != null && !jsonObj.get("repos").isJsonNull()) {
        EnterpriseRepositoryOverview.validateJsonElement(jsonObj.get("repos"));
      }
      // validate the optional field `users`
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        EnterpriseUserOverview.validateJsonElement(jsonObj.get("users"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseOverview>() {
           @Override
           public void write(JsonWriter out, EnterpriseOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseOverview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseOverview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseOverview
   * @throws IOException if the JSON string is invalid with respect to EnterpriseOverview
   */
  public static EnterpriseOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseOverview.class);
  }

  /**
   * Convert an instance of EnterpriseOverview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

