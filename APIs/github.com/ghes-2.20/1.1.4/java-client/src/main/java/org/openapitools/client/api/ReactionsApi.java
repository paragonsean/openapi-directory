/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppsGetInstallation415Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Reaction;
import org.openapitools.client.model.ReactionsCreateForCommitCommentRequest;
import org.openapitools.client.model.ReactionsCreateForIssueCommentRequest;
import org.openapitools.client.model.ReactionsCreateForIssueRequest;
import org.openapitools.client.model.ReactionsCreateForPullRequestReviewCommentRequest;
import org.openapitools.client.model.ReactionsCreateForTeamDiscussionCommentRequest;
import org.openapitools.client.model.ReactionsCreateForTeamDiscussionRequest;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reactionsCreateForCommitComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForCommitCommentCall(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForCommitCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsCreateForCommitComment(Async)");
        }

        // verify the required parameter 'reactionsCreateForCommitCommentRequest' is set
        if (reactionsCreateForCommitCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForCommitCommentRequest' when calling reactionsCreateForCommitComment(Async)");
        }

        return reactionsCreateForCommitCommentCall(owner, repo, commentId, reactionsCreateForCommitCommentRequest, _callback);

    }

    /**
     * Create reaction for a commit comment
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public Reaction reactionsCreateForCommitComment(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForCommitCommentWithHttpInfo(owner, repo, commentId, reactionsCreateForCommitCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a commit comment
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForCommitCommentWithHttpInfo(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForCommitCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForCommitCommentRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a commit comment (asynchronously)
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForCommitCommentAsync(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForCommitCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForCommitCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForIssue
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueCall(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForIssueRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForIssueValidateBeforeCall(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForIssue(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling reactionsCreateForIssue(Async)");
        }

        // verify the required parameter 'reactionsCreateForIssueRequest' is set
        if (reactionsCreateForIssueRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForIssueRequest' when calling reactionsCreateForIssue(Async)");
        }

        return reactionsCreateForIssueCall(owner, repo, issueNumber, reactionsCreateForIssueRequest, _callback);

    }

    /**
     * Create reaction for an issue
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@2.20/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public Reaction reactionsCreateForIssue(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForIssueWithHttpInfo(owner, repo, issueNumber, reactionsCreateForIssueRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for an issue
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@2.20/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForIssueWithHttpInfo(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForIssueValidateBeforeCall(owner, repo, issueNumber, reactionsCreateForIssueRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for an issue (asynchronously)
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@2.20/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueAsync(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForIssueValidateBeforeCall(owner, repo, issueNumber, reactionsCreateForIssueRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForIssueComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueCommentCall(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForIssueCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForIssueCommentValidateBeforeCall(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForIssueComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForIssueComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsCreateForIssueComment(Async)");
        }

        // verify the required parameter 'reactionsCreateForIssueCommentRequest' is set
        if (reactionsCreateForIssueCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForIssueCommentRequest' when calling reactionsCreateForIssueComment(Async)");
        }

        return reactionsCreateForIssueCommentCall(owner, repo, commentId, reactionsCreateForIssueCommentRequest, _callback);

    }

    /**
     * Create reaction for an issue comment
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public Reaction reactionsCreateForIssueComment(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForIssueCommentWithHttpInfo(owner, repo, commentId, reactionsCreateForIssueCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for an issue comment
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForIssueCommentWithHttpInfo(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForIssueCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForIssueCommentRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for an issue comment (asynchronously)
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueCommentAsync(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForIssueCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForIssueCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForPullRequestReviewComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForPullRequestReviewCommentCall(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForPullRequestReviewCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForPullRequestReviewCommentValidateBeforeCall(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' is set
        if (reactionsCreateForPullRequestReviewCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        return reactionsCreateForPullRequestReviewCommentCall(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, _callback);

    }

    /**
     * Create reaction for a pull request review comment
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public Reaction reactionsCreateForPullRequestReviewComment(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForPullRequestReviewCommentWithHttpInfo(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a pull request review comment
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForPullRequestReviewCommentWithHttpInfo(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a pull request review comment (asynchronously)
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForPullRequestReviewCommentAsync(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForTeamDiscussion
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param reactionsCreateForTeamDiscussionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionCall(String accept, Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionRequest reactionsCreateForTeamDiscussionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForTeamDiscussionRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForTeamDiscussionValidateBeforeCall(String accept, Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionRequest reactionsCreateForTeamDiscussionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling reactionsCreateForTeamDiscussion(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussion(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussion(Async)");
        }

        // verify the required parameter 'reactionsCreateForTeamDiscussionRequest' is set
        if (reactionsCreateForTeamDiscussionRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForTeamDiscussionRequest' when calling reactionsCreateForTeamDiscussion(Async)");
        }

        return reactionsCreateForTeamDiscussionCall(accept, teamId, discussionNumber, reactionsCreateForTeamDiscussionRequest, _callback);

    }

    /**
     * Create reaction for a team discussion
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param reactionsCreateForTeamDiscussionRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public Reaction reactionsCreateForTeamDiscussion(String accept, Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionRequest reactionsCreateForTeamDiscussionRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForTeamDiscussionWithHttpInfo(accept, teamId, discussionNumber, reactionsCreateForTeamDiscussionRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a team discussion
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param reactionsCreateForTeamDiscussionRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForTeamDiscussionWithHttpInfo(String accept, Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionRequest reactionsCreateForTeamDiscussionRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionValidateBeforeCall(accept, teamId, discussionNumber, reactionsCreateForTeamDiscussionRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a team discussion (asynchronously)
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param reactionsCreateForTeamDiscussionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionAsync(String accept, Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionRequest reactionsCreateForTeamDiscussionRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionValidateBeforeCall(accept, teamId, discussionNumber, reactionsCreateForTeamDiscussionRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForTeamDiscussionComment
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param reactionsCreateForTeamDiscussionCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionCommentCall(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentRequest reactionsCreateForTeamDiscussionCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForTeamDiscussionCommentRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForTeamDiscussionCommentValidateBeforeCall(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentRequest reactionsCreateForTeamDiscussionCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling reactionsCreateForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'reactionsCreateForTeamDiscussionCommentRequest' is set
        if (reactionsCreateForTeamDiscussionCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForTeamDiscussionCommentRequest' when calling reactionsCreateForTeamDiscussionComment(Async)");
        }

        return reactionsCreateForTeamDiscussionCommentCall(accept, teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentRequest, _callback);

    }

    /**
     * Create reaction for a team discussion comment
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param reactionsCreateForTeamDiscussionCommentRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public Reaction reactionsCreateForTeamDiscussionComment(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentRequest reactionsCreateForTeamDiscussionCommentRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForTeamDiscussionCommentWithHttpInfo(accept, teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a team discussion comment
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param reactionsCreateForTeamDiscussionCommentRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForTeamDiscussionCommentWithHttpInfo(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentRequest reactionsCreateForTeamDiscussionCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionCommentValidateBeforeCall(accept, teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a team discussion comment (asynchronously)
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param reactionsCreateForTeamDiscussionCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionCommentAsync(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentRequest reactionsCreateForTeamDiscussionCommentRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionCommentValidateBeforeCall(accept, teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDelete
     * @param accept This API is under preview and subject to change. (required)
     * @param reactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#delete-a-reaction-legacy">Delete a reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteCall(String accept, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions/{reaction_id}"
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteValidateBeforeCall(String accept, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling reactionsDelete(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDelete(Async)");
        }

        return reactionsDeleteCall(accept, reactionId, _callback);

    }

    /**
     * Delete a reaction
     * OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments).
     * @param accept This API is under preview and subject to change. (required)
     * @param reactionId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#delete-a-reaction-legacy">Delete a reaction Documentation</a>
     */
    public void reactionsDelete(String accept, Integer reactionId) throws ApiException {
        reactionsDeleteWithHttpInfo(accept, reactionId);
    }

    /**
     * Delete a reaction
     * OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments).
     * @param accept This API is under preview and subject to change. (required)
     * @param reactionId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#delete-a-reaction-legacy">Delete a reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteWithHttpInfo(String accept, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteValidateBeforeCall(accept, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a reaction (asynchronously)
     * OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments).
     * @param accept This API is under preview and subject to change. (required)
     * @param reactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#delete-a-reaction-legacy">Delete a reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteAsync(String accept, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteValidateBeforeCall(accept, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForCommitComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsListForCommitCommentCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsListForCommitComment(Async)");
        }

        return reactionsListForCommitCommentCall(owner, repo, commentId, content, perPage, page, _callback);

    }

    /**
     * List reactions for a commit comment
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public List<Reaction> reactionsListForCommitComment(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForCommitCommentWithHttpInfo(owner, repo, commentId, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a commit comment
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForCommitCommentWithHttpInfo(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForCommitCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a commit comment (asynchronously)
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsListForCommitCommentAsync(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForCommitCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForIssue
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueCall(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForIssueValidateBeforeCall(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForIssue(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling reactionsListForIssue(Async)");
        }

        return reactionsListForIssueCall(owner, repo, issueNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for an issue
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@2.20/rest/reference/issues).
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public List<Reaction> reactionsListForIssue(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForIssueWithHttpInfo(owner, repo, issueNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for an issue
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@2.20/rest/reference/issues).
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForIssueWithHttpInfo(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForIssueValidateBeforeCall(owner, repo, issueNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for an issue (asynchronously)
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@2.20/rest/reference/issues).
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueAsync(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForIssueValidateBeforeCall(owner, repo, issueNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForIssueComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueCommentCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForIssueCommentValidateBeforeCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForIssueComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForIssueComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsListForIssueComment(Async)");
        }

        return reactionsListForIssueCommentCall(owner, repo, commentId, content, perPage, page, _callback);

    }

    /**
     * List reactions for an issue comment
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public List<Reaction> reactionsListForIssueComment(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForIssueCommentWithHttpInfo(owner, repo, commentId, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for an issue comment
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForIssueCommentWithHttpInfo(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForIssueCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for an issue comment (asynchronously)
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueCommentAsync(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForIssueCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForPullRequestReviewComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsListForPullRequestReviewCommentCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForPullRequestReviewCommentValidateBeforeCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsListForPullRequestReviewComment(Async)");
        }

        return reactionsListForPullRequestReviewCommentCall(owner, repo, commentId, content, perPage, page, _callback);

    }

    /**
     * List reactions for a pull request review comment
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#review-comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public List<Reaction> reactionsListForPullRequestReviewComment(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForPullRequestReviewCommentWithHttpInfo(owner, repo, commentId, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a pull request review comment
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#review-comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForPullRequestReviewCommentWithHttpInfo(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a pull request review comment (asynchronously)
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#review-comments).
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsListForPullRequestReviewCommentAsync(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForTeamDiscussion
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionCall(String accept, Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForTeamDiscussionValidateBeforeCall(String accept, Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling reactionsListForTeamDiscussion(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussion(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussion(Async)");
        }

        return reactionsListForTeamDiscussionCall(accept, teamId, discussionNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for a team discussion
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public List<Reaction> reactionsListForTeamDiscussion(String accept, Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForTeamDiscussionWithHttpInfo(accept, teamId, discussionNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a team discussion
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForTeamDiscussionWithHttpInfo(String accept, Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForTeamDiscussionValidateBeforeCall(accept, teamId, discussionNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a team discussion (asynchronously)
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionAsync(String accept, Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForTeamDiscussionValidateBeforeCall(accept, teamId, discussionNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForTeamDiscussionComment
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionCommentCall(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForTeamDiscussionCommentValidateBeforeCall(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling reactionsListForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionComment(Async)");
        }

        return reactionsListForTeamDiscussionCommentCall(accept, teamId, discussionNumber, commentNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for a team discussion comment
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public List<Reaction> reactionsListForTeamDiscussionComment(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForTeamDiscussionCommentWithHttpInfo(accept, teamId, discussionNumber, commentNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a team discussion comment
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForTeamDiscussionCommentWithHttpInfo(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForTeamDiscussionCommentValidateBeforeCall(accept, teamId, discussionNumber, commentNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a team discussion comment (asynchronously)
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.20/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.20/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param accept This API is under preview and subject to change. (required)
     * @param teamId  (required)
     * @param discussionNumber  (required)
     * @param commentNumber  (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionCommentAsync(String accept, Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForTeamDiscussionCommentValidateBeforeCall(accept, teamId, discussionNumber, commentNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
