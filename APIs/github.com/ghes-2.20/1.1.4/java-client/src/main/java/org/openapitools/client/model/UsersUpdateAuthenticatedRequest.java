/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersUpdateAuthenticatedRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsersUpdateAuthenticatedRequest {
  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_BLOG = "blog";
  @SerializedName(SERIALIZED_NAME_BLOG)
  private String blog;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_HIREABLE = "hireable";
  @SerializedName(SERIALIZED_NAME_HIREABLE)
  private Boolean hireable;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TWITTER_USERNAME = "twitter_username";
  @SerializedName(SERIALIZED_NAME_TWITTER_USERNAME)
  private String twitterUsername;

  public UsersUpdateAuthenticatedRequest() {
  }

  public UsersUpdateAuthenticatedRequest bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * The new short biography of the user.
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public UsersUpdateAuthenticatedRequest blog(String blog) {
    this.blog = blog;
    return this;
  }

  /**
   * The new blog URL of the user.
   * @return blog
   */
  @javax.annotation.Nullable
  public String getBlog() {
    return blog;
  }

  public void setBlog(String blog) {
    this.blog = blog;
  }


  public UsersUpdateAuthenticatedRequest company(String company) {
    this.company = company;
    return this;
  }

  /**
   * The new company of the user.
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public UsersUpdateAuthenticatedRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The publicly visible email address of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UsersUpdateAuthenticatedRequest hireable(Boolean hireable) {
    this.hireable = hireable;
    return this;
  }

  /**
   * The new hiring availability of the user.
   * @return hireable
   */
  @javax.annotation.Nullable
  public Boolean getHireable() {
    return hireable;
  }

  public void setHireable(Boolean hireable) {
    this.hireable = hireable;
  }


  public UsersUpdateAuthenticatedRequest location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The new location of the user.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public UsersUpdateAuthenticatedRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The new name of the user.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UsersUpdateAuthenticatedRequest twitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
    return this;
  }

  /**
   * The new Twitter username of the user.
   * @return twitterUsername
   */
  @javax.annotation.Nullable
  public String getTwitterUsername() {
    return twitterUsername;
  }

  public void setTwitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersUpdateAuthenticatedRequest usersUpdateAuthenticatedRequest = (UsersUpdateAuthenticatedRequest) o;
    return Objects.equals(this.bio, usersUpdateAuthenticatedRequest.bio) &&
        Objects.equals(this.blog, usersUpdateAuthenticatedRequest.blog) &&
        Objects.equals(this.company, usersUpdateAuthenticatedRequest.company) &&
        Objects.equals(this.email, usersUpdateAuthenticatedRequest.email) &&
        Objects.equals(this.hireable, usersUpdateAuthenticatedRequest.hireable) &&
        Objects.equals(this.location, usersUpdateAuthenticatedRequest.location) &&
        Objects.equals(this.name, usersUpdateAuthenticatedRequest.name) &&
        Objects.equals(this.twitterUsername, usersUpdateAuthenticatedRequest.twitterUsername);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bio, blog, company, email, hireable, location, name, twitterUsername);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersUpdateAuthenticatedRequest {\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    blog: ").append(toIndentedString(blog)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    hireable: ").append(toIndentedString(hireable)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    twitterUsername: ").append(toIndentedString(twitterUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bio");
    openapiFields.add("blog");
    openapiFields.add("company");
    openapiFields.add("email");
    openapiFields.add("hireable");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("twitter_username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsersUpdateAuthenticatedRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsersUpdateAuthenticatedRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersUpdateAuthenticatedRequest is not found in the empty JSON string", UsersUpdateAuthenticatedRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsersUpdateAuthenticatedRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersUpdateAuthenticatedRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("blog") != null && !jsonObj.get("blog").isJsonNull()) && !jsonObj.get("blog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blog").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("twitter_username") != null && !jsonObj.get("twitter_username").isJsonNull()) && !jsonObj.get("twitter_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersUpdateAuthenticatedRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersUpdateAuthenticatedRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersUpdateAuthenticatedRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersUpdateAuthenticatedRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersUpdateAuthenticatedRequest>() {
           @Override
           public void write(JsonWriter out, UsersUpdateAuthenticatedRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersUpdateAuthenticatedRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsersUpdateAuthenticatedRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsersUpdateAuthenticatedRequest
   * @throws IOException if the JSON string is invalid with respect to UsersUpdateAuthenticatedRequest
   */
  public static UsersUpdateAuthenticatedRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersUpdateAuthenticatedRequest.class);
  }

  /**
   * Convert an instance of UsersUpdateAuthenticatedRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

