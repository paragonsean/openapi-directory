/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReposCreateForAuthenticatedUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReposCreateForAuthenticatedUserRequest {
  public static final String SERIALIZED_NAME_ALLOW_MERGE_COMMIT = "allow_merge_commit";
  @SerializedName(SERIALIZED_NAME_ALLOW_MERGE_COMMIT)
  private Boolean allowMergeCommit = true;

  public static final String SERIALIZED_NAME_ALLOW_REBASE_MERGE = "allow_rebase_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE_MERGE)
  private Boolean allowRebaseMerge = true;

  public static final String SERIALIZED_NAME_ALLOW_SQUASH_MERGE = "allow_squash_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_SQUASH_MERGE)
  private Boolean allowSquashMerge = true;

  public static final String SERIALIZED_NAME_AUTO_INIT = "auto_init";
  @SerializedName(SERIALIZED_NAME_AUTO_INIT)
  private Boolean autoInit = false;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE = "delete_branch_on_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE)
  private Boolean deleteBranchOnMerge = false;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GITIGNORE_TEMPLATE = "gitignore_template";
  @SerializedName(SERIALIZED_NAME_GITIGNORE_TEMPLATE)
  private String gitignoreTemplate;

  public static final String SERIALIZED_NAME_HAS_DOWNLOADS = "has_downloads";
  @SerializedName(SERIALIZED_NAME_HAS_DOWNLOADS)
  private Boolean hasDownloads = true;

  public static final String SERIALIZED_NAME_HAS_ISSUES = "has_issues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  private Boolean hasIssues = true;

  public static final String SERIALIZED_NAME_HAS_PROJECTS = "has_projects";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECTS)
  private Boolean hasProjects = true;

  public static final String SERIALIZED_NAME_HAS_WIKI = "has_wiki";
  @SerializedName(SERIALIZED_NAME_HAS_WIKI)
  private Boolean hasWiki = true;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_IS_TEMPLATE = "is_template";
  @SerializedName(SERIALIZED_NAME_IS_TEMPLATE)
  private Boolean isTemplate = false;

  public static final String SERIALIZED_NAME_LICENSE_TEMPLATE = "license_template";
  @SerializedName(SERIALIZED_NAME_LICENSE_TEMPLATE)
  private String licenseTemplate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private = false;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public ReposCreateForAuthenticatedUserRequest() {
  }

  public ReposCreateForAuthenticatedUserRequest allowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
    return this;
  }

  /**
   * Whether to allow merge commits for pull requests.
   * @return allowMergeCommit
   */
  @javax.annotation.Nullable
  public Boolean getAllowMergeCommit() {
    return allowMergeCommit;
  }

  public void setAllowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
  }


  public ReposCreateForAuthenticatedUserRequest allowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
    return this;
  }

  /**
   * Whether to allow rebase merges for pull requests.
   * @return allowRebaseMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowRebaseMerge() {
    return allowRebaseMerge;
  }

  public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
  }


  public ReposCreateForAuthenticatedUserRequest allowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
    return this;
  }

  /**
   * Whether to allow squash merges for pull requests.
   * @return allowSquashMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowSquashMerge() {
    return allowSquashMerge;
  }

  public void setAllowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
  }


  public ReposCreateForAuthenticatedUserRequest autoInit(Boolean autoInit) {
    this.autoInit = autoInit;
    return this;
  }

  /**
   * Whether the repository is initialized with a minimal README.
   * @return autoInit
   */
  @javax.annotation.Nullable
  public Boolean getAutoInit() {
    return autoInit;
  }

  public void setAutoInit(Boolean autoInit) {
    this.autoInit = autoInit;
  }


  public ReposCreateForAuthenticatedUserRequest deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
    return this;
  }

  /**
   * Whether to delete head branches when pull requests are merged
   * @return deleteBranchOnMerge
   */
  @javax.annotation.Nullable
  public Boolean getDeleteBranchOnMerge() {
    return deleteBranchOnMerge;
  }

  public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
  }


  public ReposCreateForAuthenticatedUserRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of the repository.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReposCreateForAuthenticatedUserRequest gitignoreTemplate(String gitignoreTemplate) {
    this.gitignoreTemplate = gitignoreTemplate;
    return this;
  }

  /**
   * The desired language or platform to apply to the .gitignore.
   * @return gitignoreTemplate
   */
  @javax.annotation.Nullable
  public String getGitignoreTemplate() {
    return gitignoreTemplate;
  }

  public void setGitignoreTemplate(String gitignoreTemplate) {
    this.gitignoreTemplate = gitignoreTemplate;
  }


  public ReposCreateForAuthenticatedUserRequest hasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
    return this;
  }

  /**
   * Whether downloads are enabled.
   * @return hasDownloads
   */
  @javax.annotation.Nullable
  public Boolean getHasDownloads() {
    return hasDownloads;
  }

  public void setHasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
  }


  public ReposCreateForAuthenticatedUserRequest hasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
    return this;
  }

  /**
   * Whether issues are enabled.
   * @return hasIssues
   */
  @javax.annotation.Nullable
  public Boolean getHasIssues() {
    return hasIssues;
  }

  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public ReposCreateForAuthenticatedUserRequest hasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
    return this;
  }

  /**
   * Whether projects are enabled.
   * @return hasProjects
   */
  @javax.annotation.Nullable
  public Boolean getHasProjects() {
    return hasProjects;
  }

  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }


  public ReposCreateForAuthenticatedUserRequest hasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
    return this;
  }

  /**
   * Whether the wiki is enabled.
   * @return hasWiki
   */
  @javax.annotation.Nullable
  public Boolean getHasWiki() {
    return hasWiki;
  }

  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }


  public ReposCreateForAuthenticatedUserRequest homepage(String homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * A URL with more information about the repository.
   * @return homepage
   */
  @javax.annotation.Nullable
  public String getHomepage() {
    return homepage;
  }

  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public ReposCreateForAuthenticatedUserRequest isTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
    return this;
  }

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @return isTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsTemplate() {
    return isTemplate;
  }

  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }


  public ReposCreateForAuthenticatedUserRequest licenseTemplate(String licenseTemplate) {
    this.licenseTemplate = licenseTemplate;
    return this;
  }

  /**
   * The license keyword of the open source license for this repository.
   * @return licenseTemplate
   */
  @javax.annotation.Nullable
  public String getLicenseTemplate() {
    return licenseTemplate;
  }

  public void setLicenseTemplate(String licenseTemplate) {
    this.licenseTemplate = licenseTemplate;
  }


  public ReposCreateForAuthenticatedUserRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the repository.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReposCreateForAuthenticatedUserRequest _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Whether the repository is private.
   * @return _private
   */
  @javax.annotation.Nullable
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public ReposCreateForAuthenticatedUserRequest teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposCreateForAuthenticatedUserRequest reposCreateForAuthenticatedUserRequest = (ReposCreateForAuthenticatedUserRequest) o;
    return Objects.equals(this.allowMergeCommit, reposCreateForAuthenticatedUserRequest.allowMergeCommit) &&
        Objects.equals(this.allowRebaseMerge, reposCreateForAuthenticatedUserRequest.allowRebaseMerge) &&
        Objects.equals(this.allowSquashMerge, reposCreateForAuthenticatedUserRequest.allowSquashMerge) &&
        Objects.equals(this.autoInit, reposCreateForAuthenticatedUserRequest.autoInit) &&
        Objects.equals(this.deleteBranchOnMerge, reposCreateForAuthenticatedUserRequest.deleteBranchOnMerge) &&
        Objects.equals(this.description, reposCreateForAuthenticatedUserRequest.description) &&
        Objects.equals(this.gitignoreTemplate, reposCreateForAuthenticatedUserRequest.gitignoreTemplate) &&
        Objects.equals(this.hasDownloads, reposCreateForAuthenticatedUserRequest.hasDownloads) &&
        Objects.equals(this.hasIssues, reposCreateForAuthenticatedUserRequest.hasIssues) &&
        Objects.equals(this.hasProjects, reposCreateForAuthenticatedUserRequest.hasProjects) &&
        Objects.equals(this.hasWiki, reposCreateForAuthenticatedUserRequest.hasWiki) &&
        Objects.equals(this.homepage, reposCreateForAuthenticatedUserRequest.homepage) &&
        Objects.equals(this.isTemplate, reposCreateForAuthenticatedUserRequest.isTemplate) &&
        Objects.equals(this.licenseTemplate, reposCreateForAuthenticatedUserRequest.licenseTemplate) &&
        Objects.equals(this.name, reposCreateForAuthenticatedUserRequest.name) &&
        Objects.equals(this._private, reposCreateForAuthenticatedUserRequest._private) &&
        Objects.equals(this.teamId, reposCreateForAuthenticatedUserRequest.teamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMergeCommit, allowRebaseMerge, allowSquashMerge, autoInit, deleteBranchOnMerge, description, gitignoreTemplate, hasDownloads, hasIssues, hasProjects, hasWiki, homepage, isTemplate, licenseTemplate, name, _private, teamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposCreateForAuthenticatedUserRequest {\n");
    sb.append("    allowMergeCommit: ").append(toIndentedString(allowMergeCommit)).append("\n");
    sb.append("    allowRebaseMerge: ").append(toIndentedString(allowRebaseMerge)).append("\n");
    sb.append("    allowSquashMerge: ").append(toIndentedString(allowSquashMerge)).append("\n");
    sb.append("    autoInit: ").append(toIndentedString(autoInit)).append("\n");
    sb.append("    deleteBranchOnMerge: ").append(toIndentedString(deleteBranchOnMerge)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gitignoreTemplate: ").append(toIndentedString(gitignoreTemplate)).append("\n");
    sb.append("    hasDownloads: ").append(toIndentedString(hasDownloads)).append("\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    hasProjects: ").append(toIndentedString(hasProjects)).append("\n");
    sb.append("    hasWiki: ").append(toIndentedString(hasWiki)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    licenseTemplate: ").append(toIndentedString(licenseTemplate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_merge_commit");
    openapiFields.add("allow_rebase_merge");
    openapiFields.add("allow_squash_merge");
    openapiFields.add("auto_init");
    openapiFields.add("delete_branch_on_merge");
    openapiFields.add("description");
    openapiFields.add("gitignore_template");
    openapiFields.add("has_downloads");
    openapiFields.add("has_issues");
    openapiFields.add("has_projects");
    openapiFields.add("has_wiki");
    openapiFields.add("homepage");
    openapiFields.add("is_template");
    openapiFields.add("license_template");
    openapiFields.add("name");
    openapiFields.add("private");
    openapiFields.add("team_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReposCreateForAuthenticatedUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReposCreateForAuthenticatedUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposCreateForAuthenticatedUserRequest is not found in the empty JSON string", ReposCreateForAuthenticatedUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReposCreateForAuthenticatedUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposCreateForAuthenticatedUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReposCreateForAuthenticatedUserRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gitignore_template") != null && !jsonObj.get("gitignore_template").isJsonNull()) && !jsonObj.get("gitignore_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitignore_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitignore_template").toString()));
      }
      if ((jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) && !jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      if ((jsonObj.get("license_template") != null && !jsonObj.get("license_template").isJsonNull()) && !jsonObj.get("license_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_template").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposCreateForAuthenticatedUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposCreateForAuthenticatedUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposCreateForAuthenticatedUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposCreateForAuthenticatedUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposCreateForAuthenticatedUserRequest>() {
           @Override
           public void write(JsonWriter out, ReposCreateForAuthenticatedUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposCreateForAuthenticatedUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReposCreateForAuthenticatedUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReposCreateForAuthenticatedUserRequest
   * @throws IOException if the JSON string is invalid with respect to ReposCreateForAuthenticatedUserRequest
   */
  public static ReposCreateForAuthenticatedUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposCreateForAuthenticatedUserRequest.class);
  }

  /**
   * Convert an instance of ReposCreateForAuthenticatedUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

