/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReposUpdateInformationAboutPagesSiteRequestSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReposUpdateInformationAboutPagesSiteRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReposUpdateInformationAboutPagesSiteRequest {
  public static final String SERIALIZED_NAME_HTTPS_ENFORCED = "https_enforced";
  @SerializedName(SERIALIZED_NAME_HTTPS_ENFORCED)
  private Boolean httpsEnforced;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ReposUpdateInformationAboutPagesSiteRequestSource source;

  public ReposUpdateInformationAboutPagesSiteRequest() {
  }

  public ReposUpdateInformationAboutPagesSiteRequest httpsEnforced(Boolean httpsEnforced) {
    this.httpsEnforced = httpsEnforced;
    return this;
  }

  /**
   * Specify whether HTTPS should be enforced for the repository.
   * @return httpsEnforced
   */
  @javax.annotation.Nullable
  public Boolean getHttpsEnforced() {
    return httpsEnforced;
  }

  public void setHttpsEnforced(Boolean httpsEnforced) {
    this.httpsEnforced = httpsEnforced;
  }


  public ReposUpdateInformationAboutPagesSiteRequest _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Configures access controls for the GitHub Pages site. If public is set to &#x60;true&#x60;, the site is accessible to anyone on the internet. If set to &#x60;false&#x60;, the site will only be accessible to users who have at least &#x60;read&#x60; access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to &#x60;internal&#x60; visibility. This feature is only available to repositories in an organization on an Enterprise plan.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public ReposUpdateInformationAboutPagesSiteRequest source(ReposUpdateInformationAboutPagesSiteRequestSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public ReposUpdateInformationAboutPagesSiteRequestSource getSource() {
    return source;
  }

  public void setSource(ReposUpdateInformationAboutPagesSiteRequestSource source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposUpdateInformationAboutPagesSiteRequest reposUpdateInformationAboutPagesSiteRequest = (ReposUpdateInformationAboutPagesSiteRequest) o;
    return Objects.equals(this.httpsEnforced, reposUpdateInformationAboutPagesSiteRequest.httpsEnforced) &&
        Objects.equals(this._public, reposUpdateInformationAboutPagesSiteRequest._public) &&
        Objects.equals(this.source, reposUpdateInformationAboutPagesSiteRequest.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpsEnforced, _public, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposUpdateInformationAboutPagesSiteRequest {\n");
    sb.append("    httpsEnforced: ").append(toIndentedString(httpsEnforced)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReposUpdateInformationAboutPagesSiteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReposUpdateInformationAboutPagesSiteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposUpdateInformationAboutPagesSiteRequest is not found in the empty JSON string", ReposUpdateInformationAboutPagesSiteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReposUpdateInformationAboutPagesSiteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposUpdateInformationAboutPagesSiteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ReposUpdateInformationAboutPagesSiteRequestSource.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ReposUpdateInformationAboutPagesSiteRequestSource.validateJsonElement(jsonObj.get("source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposUpdateInformationAboutPagesSiteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposUpdateInformationAboutPagesSiteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposUpdateInformationAboutPagesSiteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposUpdateInformationAboutPagesSiteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposUpdateInformationAboutPagesSiteRequest>() {
           @Override
           public void write(JsonWriter out, ReposUpdateInformationAboutPagesSiteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposUpdateInformationAboutPagesSiteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReposUpdateInformationAboutPagesSiteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReposUpdateInformationAboutPagesSiteRequest
   * @throws IOException if the JSON string is invalid with respect to ReposUpdateInformationAboutPagesSiteRequest
   */
  public static ReposUpdateInformationAboutPagesSiteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposUpdateInformationAboutPagesSiteRequest.class);
  }

  /**
   * Convert an instance of ReposUpdateInformationAboutPagesSiteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

