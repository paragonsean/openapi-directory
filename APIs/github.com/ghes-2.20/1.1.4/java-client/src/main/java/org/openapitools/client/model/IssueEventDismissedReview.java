/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IssueEventDismissedReview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:30.453620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssueEventDismissedReview {
  public static final String SERIALIZED_NAME_DISMISSAL_COMMIT_ID = "dismissal_commit_id";
  @SerializedName(SERIALIZED_NAME_DISMISSAL_COMMIT_ID)
  private String dismissalCommitId;

  public static final String SERIALIZED_NAME_DISMISSAL_MESSAGE = "dismissal_message";
  @SerializedName(SERIALIZED_NAME_DISMISSAL_MESSAGE)
  private String dismissalMessage;

  public static final String SERIALIZED_NAME_REVIEW_ID = "review_id";
  @SerializedName(SERIALIZED_NAME_REVIEW_ID)
  private Integer reviewId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public IssueEventDismissedReview() {
  }

  public IssueEventDismissedReview dismissalCommitId(String dismissalCommitId) {
    this.dismissalCommitId = dismissalCommitId;
    return this;
  }

  /**
   * Get dismissalCommitId
   * @return dismissalCommitId
   */
  @javax.annotation.Nullable
  public String getDismissalCommitId() {
    return dismissalCommitId;
  }

  public void setDismissalCommitId(String dismissalCommitId) {
    this.dismissalCommitId = dismissalCommitId;
  }


  public IssueEventDismissedReview dismissalMessage(String dismissalMessage) {
    this.dismissalMessage = dismissalMessage;
    return this;
  }

  /**
   * Get dismissalMessage
   * @return dismissalMessage
   */
  @javax.annotation.Nullable
  public String getDismissalMessage() {
    return dismissalMessage;
  }

  public void setDismissalMessage(String dismissalMessage) {
    this.dismissalMessage = dismissalMessage;
  }


  public IssueEventDismissedReview reviewId(Integer reviewId) {
    this.reviewId = reviewId;
    return this;
  }

  /**
   * Get reviewId
   * @return reviewId
   */
  @javax.annotation.Nonnull
  public Integer getReviewId() {
    return reviewId;
  }

  public void setReviewId(Integer reviewId) {
    this.reviewId = reviewId;
  }


  public IssueEventDismissedReview state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueEventDismissedReview issueEventDismissedReview = (IssueEventDismissedReview) o;
    return Objects.equals(this.dismissalCommitId, issueEventDismissedReview.dismissalCommitId) &&
        Objects.equals(this.dismissalMessage, issueEventDismissedReview.dismissalMessage) &&
        Objects.equals(this.reviewId, issueEventDismissedReview.reviewId) &&
        Objects.equals(this.state, issueEventDismissedReview.state);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dismissalCommitId, dismissalMessage, reviewId, state);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueEventDismissedReview {\n");
    sb.append("    dismissalCommitId: ").append(toIndentedString(dismissalCommitId)).append("\n");
    sb.append("    dismissalMessage: ").append(toIndentedString(dismissalMessage)).append("\n");
    sb.append("    reviewId: ").append(toIndentedString(reviewId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dismissal_commit_id");
    openapiFields.add("dismissal_message");
    openapiFields.add("review_id");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dismissal_message");
    openapiRequiredFields.add("review_id");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueEventDismissedReview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueEventDismissedReview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueEventDismissedReview is not found in the empty JSON string", IssueEventDismissedReview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueEventDismissedReview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueEventDismissedReview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IssueEventDismissedReview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dismissal_commit_id") != null && !jsonObj.get("dismissal_commit_id").isJsonNull()) && !jsonObj.get("dismissal_commit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dismissal_commit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dismissal_commit_id").toString()));
      }
      if ((jsonObj.get("dismissal_message") != null && !jsonObj.get("dismissal_message").isJsonNull()) && !jsonObj.get("dismissal_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dismissal_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dismissal_message").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueEventDismissedReview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueEventDismissedReview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueEventDismissedReview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueEventDismissedReview.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueEventDismissedReview>() {
           @Override
           public void write(JsonWriter out, IssueEventDismissedReview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueEventDismissedReview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueEventDismissedReview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueEventDismissedReview
   * @throws IOException if the JSON string is invalid with respect to IssueEventDismissedReview
   */
  public static IssueEventDismissedReview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueEventDismissedReview.class);
  }

  /**
   * Convert an instance of IssueEventDismissedReview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

