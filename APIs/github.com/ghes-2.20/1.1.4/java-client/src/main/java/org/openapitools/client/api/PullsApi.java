/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppsGetInstallation415Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Commit;
import org.openapitools.client.model.DiffEntry;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgName202Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrgsRemoveOutsideCollaborator422Response;
import org.openapitools.client.model.PullRequest;
import org.openapitools.client.model.PullRequestMergeResult;
import org.openapitools.client.model.PullRequestReview;
import org.openapitools.client.model.PullRequestReviewComment;
import org.openapitools.client.model.PullRequestReviewRequest;
import org.openapitools.client.model.PullRequestSimple;
import org.openapitools.client.model.PullsCreateReplyForReviewCommentRequest;
import org.openapitools.client.model.PullsCreateRequest;
import org.openapitools.client.model.PullsCreateReviewCommentRequest;
import org.openapitools.client.model.PullsCreateReviewRequest;
import org.openapitools.client.model.PullsDismissReviewRequest;
import org.openapitools.client.model.PullsMergeRequest;
import org.openapitools.client.model.PullsRemoveRequestedReviewersRequest;
import org.openapitools.client.model.PullsRequestReviewersRequest;
import org.openapitools.client.model.PullsSubmitReviewRequest;
import org.openapitools.client.model.PullsUpdateBranchRequest;
import org.openapitools.client.model.PullsUpdateRequest;
import org.openapitools.client.model.PullsUpdateReviewCommentRequest;
import org.openapitools.client.model.PullsUpdateReviewRequest;
import org.openapitools.client.model.ReviewComment;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.ValidationErrorSimple;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PullsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PullsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PullsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pullsCheckIfMerged
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if pull request has not been merged </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#check-if-a-pull-request-has-been-merged">Check if a pull request has been merged Documentation</a>
     */
    public okhttp3.Call pullsCheckIfMergedCall(String owner, String repo, Integer pullNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/merge"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsCheckIfMergedValidateBeforeCall(String owner, String repo, Integer pullNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsCheckIfMerged(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsCheckIfMerged(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsCheckIfMerged(Async)");
        }

        return pullsCheckIfMergedCall(owner, repo, pullNumber, _callback);

    }

    /**
     * Check if a pull request has been merged
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if pull request has not been merged </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#check-if-a-pull-request-has-been-merged">Check if a pull request has been merged Documentation</a>
     */
    public void pullsCheckIfMerged(String owner, String repo, Integer pullNumber) throws ApiException {
        pullsCheckIfMergedWithHttpInfo(owner, repo, pullNumber);
    }

    /**
     * Check if a pull request has been merged
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if pull request has not been merged </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#check-if-a-pull-request-has-been-merged">Check if a pull request has been merged Documentation</a>
     */
    public ApiResponse<Void> pullsCheckIfMergedWithHttpInfo(String owner, String repo, Integer pullNumber) throws ApiException {
        okhttp3.Call localVarCall = pullsCheckIfMergedValidateBeforeCall(owner, repo, pullNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a pull request has been merged (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if pull request has been merged </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if pull request has not been merged </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#check-if-a-pull-request-has-been-merged">Check if a pull request has been merged Documentation</a>
     */
    public okhttp3.Call pullsCheckIfMergedAsync(String owner, String repo, Integer pullNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsCheckIfMergedValidateBeforeCall(owner, repo, pullNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsCreate
     * @param owner  (required)
     * @param repo  (required)
     * @param pullsCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-pull-request">Create a pull request Documentation</a>
     */
    public okhttp3.Call pullsCreateCall(String owner, String repo, PullsCreateRequest pullsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsCreateRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsCreateValidateBeforeCall(String owner, String repo, PullsCreateRequest pullsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsCreate(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsCreate(Async)");
        }

        // verify the required parameter 'pullsCreateRequest' is set
        if (pullsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsCreateRequest' when calling pullsCreate(Async)");
        }

        return pullsCreateCall(owner, repo, pullsCreateRequest, _callback);

    }

    /**
     * Create a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud. You can create a new pull request. This endpoint triggers [notifications](https://docs.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullsCreateRequest  (required)
     * @return PullRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-pull-request">Create a pull request Documentation</a>
     */
    public PullRequest pullsCreate(String owner, String repo, PullsCreateRequest pullsCreateRequest) throws ApiException {
        ApiResponse<PullRequest> localVarResp = pullsCreateWithHttpInfo(owner, repo, pullsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud. You can create a new pull request. This endpoint triggers [notifications](https://docs.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullsCreateRequest  (required)
     * @return ApiResponse&lt;PullRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-pull-request">Create a pull request Documentation</a>
     */
    public ApiResponse<PullRequest> pullsCreateWithHttpInfo(String owner, String repo, PullsCreateRequest pullsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsCreateValidateBeforeCall(owner, repo, pullsCreateRequest, null);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a pull request (asynchronously)
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud. You can create a new pull request. This endpoint triggers [notifications](https://docs.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullsCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-pull-request">Create a pull request Documentation</a>
     */
    public okhttp3.Call pullsCreateAsync(String owner, String repo, PullsCreateRequest pullsCreateRequest, final ApiCallback<PullRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsCreateValidateBeforeCall(owner, repo, pullsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsCreateReplyForReviewComment
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsCreateReplyForReviewCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-reply-for-a-review-comment">Create a reply for a review comment Documentation</a>
     */
    public okhttp3.Call pullsCreateReplyForReviewCommentCall(String owner, String repo, Integer pullNumber, Integer commentId, PullsCreateReplyForReviewCommentRequest pullsCreateReplyForReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsCreateReplyForReviewCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsCreateReplyForReviewCommentValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer commentId, PullsCreateReplyForReviewCommentRequest pullsCreateReplyForReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsCreateReplyForReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsCreateReplyForReviewComment(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsCreateReplyForReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling pullsCreateReplyForReviewComment(Async)");
        }

        // verify the required parameter 'pullsCreateReplyForReviewCommentRequest' is set
        if (pullsCreateReplyForReviewCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsCreateReplyForReviewCommentRequest' when calling pullsCreateReplyForReviewComment(Async)");
        }

        return pullsCreateReplyForReviewCommentCall(owner, repo, pullNumber, commentId, pullsCreateReplyForReviewCommentRequest, _callback);

    }

    /**
     * Create a reply for a review comment
     * Creates a reply to a review comment for a pull request. For the &#x60;comment_id&#x60;, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsCreateReplyForReviewCommentRequest  (required)
     * @return PullRequestReviewComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-reply-for-a-review-comment">Create a reply for a review comment Documentation</a>
     */
    public PullRequestReviewComment pullsCreateReplyForReviewComment(String owner, String repo, Integer pullNumber, Integer commentId, PullsCreateReplyForReviewCommentRequest pullsCreateReplyForReviewCommentRequest) throws ApiException {
        ApiResponse<PullRequestReviewComment> localVarResp = pullsCreateReplyForReviewCommentWithHttpInfo(owner, repo, pullNumber, commentId, pullsCreateReplyForReviewCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create a reply for a review comment
     * Creates a reply to a review comment for a pull request. For the &#x60;comment_id&#x60;, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsCreateReplyForReviewCommentRequest  (required)
     * @return ApiResponse&lt;PullRequestReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-reply-for-a-review-comment">Create a reply for a review comment Documentation</a>
     */
    public ApiResponse<PullRequestReviewComment> pullsCreateReplyForReviewCommentWithHttpInfo(String owner, String repo, Integer pullNumber, Integer commentId, PullsCreateReplyForReviewCommentRequest pullsCreateReplyForReviewCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsCreateReplyForReviewCommentValidateBeforeCall(owner, repo, pullNumber, commentId, pullsCreateReplyForReviewCommentRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a reply for a review comment (asynchronously)
     * Creates a reply to a review comment for a pull request. For the &#x60;comment_id&#x60;, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsCreateReplyForReviewCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-reply-for-a-review-comment">Create a reply for a review comment Documentation</a>
     */
    public okhttp3.Call pullsCreateReplyForReviewCommentAsync(String owner, String repo, Integer pullNumber, Integer commentId, PullsCreateReplyForReviewCommentRequest pullsCreateReplyForReviewCommentRequest, final ApiCallback<PullRequestReviewComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsCreateReplyForReviewCommentValidateBeforeCall(owner, repo, pullNumber, commentId, pullsCreateReplyForReviewCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsCreateReview
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-for-a-pull-request">Create a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsCreateReviewCall(String owner, String repo, Integer pullNumber, PullsCreateReviewRequest pullsCreateReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsCreateReviewRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsCreateReviewValidateBeforeCall(String owner, String repo, Integer pullNumber, PullsCreateReviewRequest pullsCreateReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsCreateReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsCreateReview(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsCreateReview(Async)");
        }

        return pullsCreateReviewCall(owner, repo, pullNumber, pullsCreateReviewRequest, _callback);

    }

    /**
     * Create a review for a pull request
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  Pull request reviews created in the &#x60;PENDING&#x60; state do not include the &#x60;submitted_at&#x60; property in the response.  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the &#x60;application/vnd.github.v3.diff&#x60; [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the &#x60;Accept&#x60; header of a call to the [single pull request](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-pull-request) endpoint.  The &#x60;position&#x60; value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewRequest  (optional)
     * @return PullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-for-a-pull-request">Create a review for a pull request Documentation</a>
     */
    public PullRequestReview pullsCreateReview(String owner, String repo, Integer pullNumber, PullsCreateReviewRequest pullsCreateReviewRequest) throws ApiException {
        ApiResponse<PullRequestReview> localVarResp = pullsCreateReviewWithHttpInfo(owner, repo, pullNumber, pullsCreateReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Create a review for a pull request
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  Pull request reviews created in the &#x60;PENDING&#x60; state do not include the &#x60;submitted_at&#x60; property in the response.  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the &#x60;application/vnd.github.v3.diff&#x60; [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the &#x60;Accept&#x60; header of a call to the [single pull request](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-pull-request) endpoint.  The &#x60;position&#x60; value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewRequest  (optional)
     * @return ApiResponse&lt;PullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-for-a-pull-request">Create a review for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReview> pullsCreateReviewWithHttpInfo(String owner, String repo, Integer pullNumber, PullsCreateReviewRequest pullsCreateReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsCreateReviewValidateBeforeCall(owner, repo, pullNumber, pullsCreateReviewRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a review for a pull request (asynchronously)
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  Pull request reviews created in the &#x60;PENDING&#x60; state do not include the &#x60;submitted_at&#x60; property in the response.  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the &#x60;application/vnd.github.v3.diff&#x60; [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the &#x60;Accept&#x60; header of a call to the [single pull request](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-pull-request) endpoint.  The &#x60;position&#x60; value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-for-a-pull-request">Create a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsCreateReviewAsync(String owner, String repo, Integer pullNumber, PullsCreateReviewRequest pullsCreateReviewRequest, final ApiCallback<PullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsCreateReviewValidateBeforeCall(owner, repo, pullNumber, pullsCreateReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsCreateReviewComment
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-comment-for-a-pull-request">Create a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsCreateReviewCommentCall(String owner, String repo, Integer pullNumber, PullsCreateReviewCommentRequest pullsCreateReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsCreateReviewCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsCreateReviewCommentValidateBeforeCall(String owner, String repo, Integer pullNumber, PullsCreateReviewCommentRequest pullsCreateReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsCreateReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsCreateReviewComment(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsCreateReviewComment(Async)");
        }

        // verify the required parameter 'pullsCreateReviewCommentRequest' is set
        if (pullsCreateReviewCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsCreateReviewCommentRequest' when calling pullsCreateReviewComment(Async)");
        }

        return pullsCreateReviewCommentCall(owner, repo, pullNumber, pullsCreateReviewCommentRequest, _callback);

    }

    /**
     * Create a review comment for a pull request
     *  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \&quot;[Create an issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#create-an-issue-comment).\&quot; We recommend creating a review comment using &#x60;line&#x60;, &#x60;side&#x60;, and optionally &#x60;start_line&#x60; and &#x60;start_side&#x60; if your comment applies to more than one line in the pull request diff.  You can still create a review comment using the &#x60;position&#x60; parameter. When you use &#x60;position&#x60;, the &#x60;line&#x60;, &#x60;side&#x60;, &#x60;start_line&#x60;, and &#x60;start_side&#x60; parameters are not required. For more information, see the [&#x60;comfort-fade&#x60; preview notice](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).  **Note:** The position value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewCommentRequest  (required)
     * @return PullRequestReviewComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-comment-for-a-pull-request">Create a review comment for a pull request Documentation</a>
     */
    public PullRequestReviewComment pullsCreateReviewComment(String owner, String repo, Integer pullNumber, PullsCreateReviewCommentRequest pullsCreateReviewCommentRequest) throws ApiException {
        ApiResponse<PullRequestReviewComment> localVarResp = pullsCreateReviewCommentWithHttpInfo(owner, repo, pullNumber, pullsCreateReviewCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create a review comment for a pull request
     *  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \&quot;[Create an issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#create-an-issue-comment).\&quot; We recommend creating a review comment using &#x60;line&#x60;, &#x60;side&#x60;, and optionally &#x60;start_line&#x60; and &#x60;start_side&#x60; if your comment applies to more than one line in the pull request diff.  You can still create a review comment using the &#x60;position&#x60; parameter. When you use &#x60;position&#x60;, the &#x60;line&#x60;, &#x60;side&#x60;, &#x60;start_line&#x60;, and &#x60;start_side&#x60; parameters are not required. For more information, see the [&#x60;comfort-fade&#x60; preview notice](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).  **Note:** The position value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewCommentRequest  (required)
     * @return ApiResponse&lt;PullRequestReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-comment-for-a-pull-request">Create a review comment for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReviewComment> pullsCreateReviewCommentWithHttpInfo(String owner, String repo, Integer pullNumber, PullsCreateReviewCommentRequest pullsCreateReviewCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsCreateReviewCommentValidateBeforeCall(owner, repo, pullNumber, pullsCreateReviewCommentRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a review comment for a pull request (asynchronously)
     *  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \&quot;[Create an issue comment](https://docs.github.com/enterprise-server@2.20/rest/reference/issues#create-an-issue-comment).\&quot; We recommend creating a review comment using &#x60;line&#x60;, &#x60;side&#x60;, and optionally &#x60;start_line&#x60; and &#x60;start_side&#x60; if your comment applies to more than one line in the pull request diff.  You can still create a review comment using the &#x60;position&#x60; parameter. When you use &#x60;position&#x60;, the &#x60;line&#x60;, &#x60;side&#x60;, &#x60;start_line&#x60;, and &#x60;start_side&#x60; parameters are not required. For more information, see the [&#x60;comfort-fade&#x60; preview notice](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).  **Note:** The position value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.20/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsCreateReviewCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#create-a-review-comment-for-a-pull-request">Create a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsCreateReviewCommentAsync(String owner, String repo, Integer pullNumber, PullsCreateReviewCommentRequest pullsCreateReviewCommentRequest, final ApiCallback<PullRequestReviewComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsCreateReviewCommentValidateBeforeCall(owner, repo, pullNumber, pullsCreateReviewCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsDeletePendingReview
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-pending-review-for-a-pull-request">Delete a pending review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsDeletePendingReviewCall(String owner, String repo, Integer pullNumber, Integer reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()))
            .replace("{" + "review_id" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsDeletePendingReviewValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsDeletePendingReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsDeletePendingReview(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsDeletePendingReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling pullsDeletePendingReview(Async)");
        }

        return pullsDeletePendingReviewCall(owner, repo, pullNumber, reviewId, _callback);

    }

    /**
     * Delete a pending review for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @return PullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-pending-review-for-a-pull-request">Delete a pending review for a pull request Documentation</a>
     */
    public PullRequestReview pullsDeletePendingReview(String owner, String repo, Integer pullNumber, Integer reviewId) throws ApiException {
        ApiResponse<PullRequestReview> localVarResp = pullsDeletePendingReviewWithHttpInfo(owner, repo, pullNumber, reviewId);
        return localVarResp.getData();
    }

    /**
     * Delete a pending review for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @return ApiResponse&lt;PullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-pending-review-for-a-pull-request">Delete a pending review for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReview> pullsDeletePendingReviewWithHttpInfo(String owner, String repo, Integer pullNumber, Integer reviewId) throws ApiException {
        okhttp3.Call localVarCall = pullsDeletePendingReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, null);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a pending review for a pull request (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-pending-review-for-a-pull-request">Delete a pending review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsDeletePendingReviewAsync(String owner, String repo, Integer pullNumber, Integer reviewId, final ApiCallback<PullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsDeletePendingReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsDeleteReviewComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-review-comment-for-a-pull-request">Delete a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsDeleteReviewCommentCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsDeleteReviewCommentValidateBeforeCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsDeleteReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsDeleteReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling pullsDeleteReviewComment(Async)");
        }

        return pullsDeleteReviewCommentCall(owner, repo, commentId, _callback);

    }

    /**
     * Delete a review comment for a pull request
     * Deletes a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-review-comment-for-a-pull-request">Delete a review comment for a pull request Documentation</a>
     */
    public void pullsDeleteReviewComment(String owner, String repo, Integer commentId) throws ApiException {
        pullsDeleteReviewCommentWithHttpInfo(owner, repo, commentId);
    }

    /**
     * Delete a review comment for a pull request
     * Deletes a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-review-comment-for-a-pull-request">Delete a review comment for a pull request Documentation</a>
     */
    public ApiResponse<Void> pullsDeleteReviewCommentWithHttpInfo(String owner, String repo, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = pullsDeleteReviewCommentValidateBeforeCall(owner, repo, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a review comment for a pull request (asynchronously)
     * Deletes a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#delete-a-review-comment-for-a-pull-request">Delete a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsDeleteReviewCommentAsync(String owner, String repo, Integer commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsDeleteReviewCommentValidateBeforeCall(owner, repo, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsDismissReview
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsDismissReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#dismiss-a-review-for-a-pull-request">Dismiss a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsDismissReviewCall(String owner, String repo, Integer pullNumber, Integer reviewId, PullsDismissReviewRequest pullsDismissReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsDismissReviewRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()))
            .replace("{" + "review_id" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsDismissReviewValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer reviewId, PullsDismissReviewRequest pullsDismissReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsDismissReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsDismissReview(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsDismissReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling pullsDismissReview(Async)");
        }

        // verify the required parameter 'pullsDismissReviewRequest' is set
        if (pullsDismissReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsDismissReviewRequest' when calling pullsDismissReview(Async)");
        }

        return pullsDismissReviewCall(owner, repo, pullNumber, reviewId, pullsDismissReviewRequest, _callback);

    }

    /**
     * Dismiss a review for a pull request
     * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsDismissReviewRequest  (required)
     * @return PullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#dismiss-a-review-for-a-pull-request">Dismiss a review for a pull request Documentation</a>
     */
    public PullRequestReview pullsDismissReview(String owner, String repo, Integer pullNumber, Integer reviewId, PullsDismissReviewRequest pullsDismissReviewRequest) throws ApiException {
        ApiResponse<PullRequestReview> localVarResp = pullsDismissReviewWithHttpInfo(owner, repo, pullNumber, reviewId, pullsDismissReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Dismiss a review for a pull request
     * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsDismissReviewRequest  (required)
     * @return ApiResponse&lt;PullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#dismiss-a-review-for-a-pull-request">Dismiss a review for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReview> pullsDismissReviewWithHttpInfo(String owner, String repo, Integer pullNumber, Integer reviewId, PullsDismissReviewRequest pullsDismissReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsDismissReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, pullsDismissReviewRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dismiss a review for a pull request (asynchronously)
     * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsDismissReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#dismiss-a-review-for-a-pull-request">Dismiss a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsDismissReviewAsync(String owner, String repo, Integer pullNumber, Integer reviewId, PullsDismissReviewRequest pullsDismissReviewRequest, final ApiCallback<PullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsDismissReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, pullsDismissReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsGet
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-pull-request">Get a pull request Documentation</a>
     */
    public okhttp3.Call pullsGetCall(String owner, String repo, Integer pullNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsGetValidateBeforeCall(String owner, String repo, Integer pullNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsGet(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsGet(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsGet(Async)");
        }

        return pullsGetCall(owner, repo, pullNumber, _callback);

    }

    /**
     * Get a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the &#x60;mergeable&#x60; key. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.20/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.  The value of the &#x60;mergeable&#x60; attribute can be &#x60;true&#x60;, &#x60;false&#x60;, or &#x60;null&#x60;. If the value is &#x60;null&#x60;, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-&#x60;null&#x60; value for the &#x60;mergeable&#x60; attribute in the response. If &#x60;mergeable&#x60; is &#x60;true&#x60;, then &#x60;merge_commit_sha&#x60; will be the SHA of the _test_ merge commit.  The value of the &#x60;merge_commit_sha&#x60; attribute changes depending on the state of the pull request. Before merging a pull request, the &#x60;merge_commit_sha&#x60; attribute holds the SHA of the _test_ merge commit. After merging a pull request, the &#x60;merge_commit_sha&#x60; attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), &#x60;merge_commit_sha&#x60; represents the SHA of the merge commit. *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), &#x60;merge_commit_sha&#x60; represents the SHA of the squashed commit on the base branch. *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), &#x60;merge_commit_sha&#x60; represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @return PullRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-pull-request">Get a pull request Documentation</a>
     */
    public PullRequest pullsGet(String owner, String repo, Integer pullNumber) throws ApiException {
        ApiResponse<PullRequest> localVarResp = pullsGetWithHttpInfo(owner, repo, pullNumber);
        return localVarResp.getData();
    }

    /**
     * Get a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the &#x60;mergeable&#x60; key. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.20/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.  The value of the &#x60;mergeable&#x60; attribute can be &#x60;true&#x60;, &#x60;false&#x60;, or &#x60;null&#x60;. If the value is &#x60;null&#x60;, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-&#x60;null&#x60; value for the &#x60;mergeable&#x60; attribute in the response. If &#x60;mergeable&#x60; is &#x60;true&#x60;, then &#x60;merge_commit_sha&#x60; will be the SHA of the _test_ merge commit.  The value of the &#x60;merge_commit_sha&#x60; attribute changes depending on the state of the pull request. Before merging a pull request, the &#x60;merge_commit_sha&#x60; attribute holds the SHA of the _test_ merge commit. After merging a pull request, the &#x60;merge_commit_sha&#x60; attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), &#x60;merge_commit_sha&#x60; represents the SHA of the merge commit. *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), &#x60;merge_commit_sha&#x60; represents the SHA of the squashed commit on the base branch. *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), &#x60;merge_commit_sha&#x60; represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @return ApiResponse&lt;PullRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-pull-request">Get a pull request Documentation</a>
     */
    public ApiResponse<PullRequest> pullsGetWithHttpInfo(String owner, String repo, Integer pullNumber) throws ApiException {
        okhttp3.Call localVarCall = pullsGetValidateBeforeCall(owner, repo, pullNumber, null);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pull request (asynchronously)
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the &#x60;mergeable&#x60; key. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.20/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.  The value of the &#x60;mergeable&#x60; attribute can be &#x60;true&#x60;, &#x60;false&#x60;, or &#x60;null&#x60;. If the value is &#x60;null&#x60;, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-&#x60;null&#x60; value for the &#x60;mergeable&#x60; attribute in the response. If &#x60;mergeable&#x60; is &#x60;true&#x60;, then &#x60;merge_commit_sha&#x60; will be the SHA of the _test_ merge commit.  The value of the &#x60;merge_commit_sha&#x60; attribute changes depending on the state of the pull request. Before merging a pull request, the &#x60;merge_commit_sha&#x60; attribute holds the SHA of the _test_ merge commit. After merging a pull request, the &#x60;merge_commit_sha&#x60; attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), &#x60;merge_commit_sha&#x60; represents the SHA of the merge commit. *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), &#x60;merge_commit_sha&#x60; represents the SHA of the squashed commit on the base branch. *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), &#x60;merge_commit_sha&#x60; represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pass the appropriate [media type](https://docs.github.com/enterprise-server@2.20/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-pull-request">Get a pull request Documentation</a>
     */
    public okhttp3.Call pullsGetAsync(String owner, String repo, Integer pullNumber, final ApiCallback<PullRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsGetValidateBeforeCall(owner, repo, pullNumber, _callback);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsGetReview
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-for-a-pull-request">Get a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsGetReviewCall(String owner, String repo, Integer pullNumber, Integer reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()))
            .replace("{" + "review_id" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsGetReviewValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsGetReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsGetReview(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsGetReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling pullsGetReview(Async)");
        }

        return pullsGetReviewCall(owner, repo, pullNumber, reviewId, _callback);

    }

    /**
     * Get a review for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @return PullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-for-a-pull-request">Get a review for a pull request Documentation</a>
     */
    public PullRequestReview pullsGetReview(String owner, String repo, Integer pullNumber, Integer reviewId) throws ApiException {
        ApiResponse<PullRequestReview> localVarResp = pullsGetReviewWithHttpInfo(owner, repo, pullNumber, reviewId);
        return localVarResp.getData();
    }

    /**
     * Get a review for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @return ApiResponse&lt;PullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-for-a-pull-request">Get a review for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReview> pullsGetReviewWithHttpInfo(String owner, String repo, Integer pullNumber, Integer reviewId) throws ApiException {
        okhttp3.Call localVarCall = pullsGetReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, null);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a review for a pull request (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-for-a-pull-request">Get a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsGetReviewAsync(String owner, String repo, Integer pullNumber, Integer reviewId, final ApiCallback<PullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsGetReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsGetReviewComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-comment-for-a-pull-request">Get a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsGetReviewCommentCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsGetReviewCommentValidateBeforeCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsGetReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsGetReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling pullsGetReviewComment(Async)");
        }

        return pullsGetReviewCommentCall(owner, repo, commentId, _callback);

    }

    /**
     * Get a review comment for a pull request
     * Provides details for a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return PullRequestReviewComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-comment-for-a-pull-request">Get a review comment for a pull request Documentation</a>
     */
    public PullRequestReviewComment pullsGetReviewComment(String owner, String repo, Integer commentId) throws ApiException {
        ApiResponse<PullRequestReviewComment> localVarResp = pullsGetReviewCommentWithHttpInfo(owner, repo, commentId);
        return localVarResp.getData();
    }

    /**
     * Get a review comment for a pull request
     * Provides details for a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return ApiResponse&lt;PullRequestReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-comment-for-a-pull-request">Get a review comment for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReviewComment> pullsGetReviewCommentWithHttpInfo(String owner, String repo, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = pullsGetReviewCommentValidateBeforeCall(owner, repo, commentId, null);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a review comment for a pull request (asynchronously)
     * Provides details for a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#get-a-review-comment-for-a-pull-request">Get a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsGetReviewCommentAsync(String owner, String repo, Integer commentId, final ApiCallback<PullRequestReviewComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsGetReviewCommentValidateBeforeCall(owner, repo, commentId, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsList
     * @param owner  (required)
     * @param repo  (required)
     * @param state Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (optional, default to open)
     * @param head Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;. (optional)
     * @param base Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;. (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (optional, default to created)
     * @param direction The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests">List pull requests Documentation</a>
     */
    public okhttp3.Call pullsListCall(String owner, String repo, String state, String head, String base, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (head != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head", head));
        }

        if (base != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base", base));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListValidateBeforeCall(String owner, String repo, String state, String head, String base, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsList(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsList(Async)");
        }

        return pullsListCall(owner, repo, state, head, base, sort, direction, perPage, page, _callback);

    }

    /**
     * List pull requests
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud.
     * @param owner  (required)
     * @param repo  (required)
     * @param state Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (optional, default to open)
     * @param head Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;. (optional)
     * @param base Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;. (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (optional, default to created)
     * @param direction The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;PullRequestSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests">List pull requests Documentation</a>
     */
    public List<PullRequestSimple> pullsList(String owner, String repo, String state, String head, String base, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<PullRequestSimple>> localVarResp = pullsListWithHttpInfo(owner, repo, state, head, base, sort, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List pull requests
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud.
     * @param owner  (required)
     * @param repo  (required)
     * @param state Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (optional, default to open)
     * @param head Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;. (optional)
     * @param base Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;. (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (optional, default to created)
     * @param direction The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PullRequestSimple&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests">List pull requests Documentation</a>
     */
    public ApiResponse<List<PullRequestSimple>> pullsListWithHttpInfo(String owner, String repo, String state, String head, String base, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListValidateBeforeCall(owner, repo, state, head, base, sort, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<PullRequestSimple>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pull requests (asynchronously)
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud.
     * @param owner  (required)
     * @param repo  (required)
     * @param state Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60; to filter by state. (optional, default to open)
     * @param head Filter pulls by head user or head organization and branch name in the format of &#x60;user:ref-name&#x60; or &#x60;organization:ref-name&#x60;. For example: &#x60;github:new-script-format&#x60; or &#x60;octocat:test-branch&#x60;. (optional)
     * @param base Filter pulls by base branch name. Example: &#x60;gh-pages&#x60;. (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;popularity&#x60; (comment count) or &#x60;long-running&#x60; (age, filtering by pulls updated in the last month). (optional, default to created)
     * @param direction The direction of the sort. Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Default: &#x60;desc&#x60; when sort is &#x60;created&#x60; or sort is not specified, otherwise &#x60;asc&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests">List pull requests Documentation</a>
     */
    public okhttp3.Call pullsListAsync(String owner, String repo, String state, String head, String base, String sort, String direction, Integer perPage, Integer page, final ApiCallback<List<PullRequestSimple>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListValidateBeforeCall(owner, repo, state, head, base, sort, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<PullRequestSimple>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsListCommentsForReview
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-comments-for-a-pull-request-review">List comments for a pull request review Documentation</a>
     */
    public okhttp3.Call pullsListCommentsForReviewCall(String owner, String repo, Integer pullNumber, Integer reviewId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()))
            .replace("{" + "review_id" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListCommentsForReviewValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer reviewId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsListCommentsForReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsListCommentsForReview(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsListCommentsForReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling pullsListCommentsForReview(Async)");
        }

        return pullsListCommentsForReviewCall(owner, repo, pullNumber, reviewId, perPage, page, _callback);

    }

    /**
     * List comments for a pull request review
     * List comments for a specific pull request review.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;ReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-comments-for-a-pull-request-review">List comments for a pull request review Documentation</a>
     */
    public List<ReviewComment> pullsListCommentsForReview(String owner, String repo, Integer pullNumber, Integer reviewId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<ReviewComment>> localVarResp = pullsListCommentsForReviewWithHttpInfo(owner, repo, pullNumber, reviewId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List comments for a pull request review
     * List comments for a specific pull request review.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;ReviewComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-comments-for-a-pull-request-review">List comments for a pull request review Documentation</a>
     */
    public ApiResponse<List<ReviewComment>> pullsListCommentsForReviewWithHttpInfo(String owner, String repo, Integer pullNumber, Integer reviewId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListCommentsForReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<ReviewComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List comments for a pull request review (asynchronously)
     * List comments for a specific pull request review.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-comments-for-a-pull-request-review">List comments for a pull request review Documentation</a>
     */
    public okhttp3.Call pullsListCommentsForReviewAsync(String owner, String repo, Integer pullNumber, Integer reviewId, Integer perPage, Integer page, final ApiCallback<List<ReviewComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListCommentsForReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<ReviewComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsListCommits
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-commits-on-a-pull-request">List commits on a pull request Documentation</a>
     */
    public okhttp3.Call pullsListCommitsCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/commits"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListCommitsValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsListCommits(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsListCommits(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsListCommits(Async)");
        }

        return pullsListCommitsCall(owner, repo, pullNumber, perPage, page, _callback);

    }

    /**
     * List commits on a pull request
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#list-commits) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Commit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-commits-on-a-pull-request">List commits on a pull request Documentation</a>
     */
    public List<Commit> pullsListCommits(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Commit>> localVarResp = pullsListCommitsWithHttpInfo(owner, repo, pullNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List commits on a pull request
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#list-commits) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Commit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-commits-on-a-pull-request">List commits on a pull request Documentation</a>
     */
    public ApiResponse<List<Commit>> pullsListCommitsWithHttpInfo(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListCommitsValidateBeforeCall(owner, repo, pullNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List commits on a pull request (asynchronously)
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@2.20/rest/reference/repos#list-commits) endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-commits-on-a-pull-request">List commits on a pull request Documentation</a>
     */
    public okhttp3.Call pullsListCommitsAsync(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback<List<Commit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListCommitsValidateBeforeCall(owner, repo, pullNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Commit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsListFiles
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests-files">List pull requests files Documentation</a>
     */
    public okhttp3.Call pullsListFilesCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/files"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListFilesValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsListFiles(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsListFiles(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsListFiles(Async)");
        }

        return pullsListFilesCall(owner, repo, pullNumber, perPage, page, _callback);

    }

    /**
     * List pull requests files
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;DiffEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests-files">List pull requests files Documentation</a>
     */
    public List<DiffEntry> pullsListFiles(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<DiffEntry>> localVarResp = pullsListFilesWithHttpInfo(owner, repo, pullNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List pull requests files
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;DiffEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests-files">List pull requests files Documentation</a>
     */
    public ApiResponse<List<DiffEntry>> pullsListFilesWithHttpInfo(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListFilesValidateBeforeCall(owner, repo, pullNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<DiffEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pull requests files (asynchronously)
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-pull-requests-files">List pull requests files Documentation</a>
     */
    public okhttp3.Call pullsListFilesAsync(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback<List<DiffEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListFilesValidateBeforeCall(owner, repo, pullNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<DiffEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsListRequestedReviewers
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-requested-reviewers-for-a-pull-request">List requested reviewers for a pull request Documentation</a>
     */
    public okhttp3.Call pullsListRequestedReviewersCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListRequestedReviewersValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsListRequestedReviewers(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsListRequestedReviewers(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsListRequestedReviewers(Async)");
        }

        return pullsListRequestedReviewersCall(owner, repo, pullNumber, perPage, page, _callback);

    }

    /**
     * List requested reviewers for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return PullRequestReviewRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-requested-reviewers-for-a-pull-request">List requested reviewers for a pull request Documentation</a>
     */
    public PullRequestReviewRequest pullsListRequestedReviewers(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<PullRequestReviewRequest> localVarResp = pullsListRequestedReviewersWithHttpInfo(owner, repo, pullNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List requested reviewers for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;PullRequestReviewRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-requested-reviewers-for-a-pull-request">List requested reviewers for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReviewRequest> pullsListRequestedReviewersWithHttpInfo(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListRequestedReviewersValidateBeforeCall(owner, repo, pullNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<PullRequestReviewRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List requested reviewers for a pull request (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-requested-reviewers-for-a-pull-request">List requested reviewers for a pull request Documentation</a>
     */
    public okhttp3.Call pullsListRequestedReviewersAsync(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback<PullRequestReviewRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListRequestedReviewersValidateBeforeCall(owner, repo, pullNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReviewRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsListReviewComments
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-on-a-pull-request">List review comments on a pull request Documentation</a>
     */
    public okhttp3.Call pullsListReviewCommentsCall(String owner, String repo, Integer pullNumber, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListReviewCommentsValidateBeforeCall(String owner, String repo, Integer pullNumber, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsListReviewComments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsListReviewComments(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsListReviewComments(Async)");
        }

        return pullsListReviewCommentsCall(owner, repo, pullNumber, sort, direction, since, perPage, page, _callback);

    }

    /**
     * List review comments on a pull request
     * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;PullRequestReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-on-a-pull-request">List review comments on a pull request Documentation</a>
     */
    public List<PullRequestReviewComment> pullsListReviewComments(String owner, String repo, Integer pullNumber, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<PullRequestReviewComment>> localVarResp = pullsListReviewCommentsWithHttpInfo(owner, repo, pullNumber, sort, direction, since, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List review comments on a pull request
     * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PullRequestReviewComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-on-a-pull-request">List review comments on a pull request Documentation</a>
     */
    public ApiResponse<List<PullRequestReviewComment>> pullsListReviewCommentsWithHttpInfo(String owner, String repo, Integer pullNumber, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListReviewCommentsValidateBeforeCall(owner, repo, pullNumber, sort, direction, since, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<PullRequestReviewComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List review comments on a pull request (asynchronously)
     * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-on-a-pull-request">List review comments on a pull request Documentation</a>
     */
    public okhttp3.Call pullsListReviewCommentsAsync(String owner, String repo, Integer pullNumber, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback<List<PullRequestReviewComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListReviewCommentsValidateBeforeCall(owner, repo, pullNumber, sort, direction, since, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<PullRequestReviewComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsListReviewCommentsForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param sort  (optional)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-in-a-repository">List review comments in a repository Documentation</a>
     */
    public okhttp3.Call pullsListReviewCommentsForRepoCall(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListReviewCommentsForRepoValidateBeforeCall(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsListReviewCommentsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsListReviewCommentsForRepo(Async)");
        }

        return pullsListReviewCommentsForRepoCall(owner, repo, sort, direction, since, perPage, page, _callback);

    }

    /**
     * List review comments in a repository
     * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param sort  (optional)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;PullRequestReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-in-a-repository">List review comments in a repository Documentation</a>
     */
    public List<PullRequestReviewComment> pullsListReviewCommentsForRepo(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<PullRequestReviewComment>> localVarResp = pullsListReviewCommentsForRepoWithHttpInfo(owner, repo, sort, direction, since, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List review comments in a repository
     * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param sort  (optional)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PullRequestReviewComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-in-a-repository">List review comments in a repository Documentation</a>
     */
    public ApiResponse<List<PullRequestReviewComment>> pullsListReviewCommentsForRepoWithHttpInfo(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListReviewCommentsForRepoValidateBeforeCall(owner, repo, sort, direction, since, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<PullRequestReviewComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List review comments in a repository (asynchronously)
     * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param sort  (optional)
     * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-review-comments-in-a-repository">List review comments in a repository Documentation</a>
     */
    public okhttp3.Call pullsListReviewCommentsForRepoAsync(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback<List<PullRequestReviewComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListReviewCommentsForRepoValidateBeforeCall(owner, repo, sort, direction, since, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<PullRequestReviewComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsListReviews
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of reviews returns in chronological order. </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-reviews-for-a-pull-request">List reviews for a pull request Documentation</a>
     */
    public okhttp3.Call pullsListReviewsCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsListReviewsValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsListReviews(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsListReviews(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsListReviews(Async)");
        }

        return pullsListReviewsCall(owner, repo, pullNumber, perPage, page, _callback);

    }

    /**
     * List reviews for a pull request
     * The list of reviews returns in chronological order.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;PullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of reviews returns in chronological order. </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-reviews-for-a-pull-request">List reviews for a pull request Documentation</a>
     */
    public List<PullRequestReview> pullsListReviews(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<PullRequestReview>> localVarResp = pullsListReviewsWithHttpInfo(owner, repo, pullNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reviews for a pull request
     * The list of reviews returns in chronological order.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;PullRequestReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of reviews returns in chronological order. </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-reviews-for-a-pull-request">List reviews for a pull request Documentation</a>
     */
    public ApiResponse<List<PullRequestReview>> pullsListReviewsWithHttpInfo(String owner, String repo, Integer pullNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = pullsListReviewsValidateBeforeCall(owner, repo, pullNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<PullRequestReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reviews for a pull request (asynchronously)
     * The list of reviews returns in chronological order.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of reviews returns in chronological order. </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#list-reviews-for-a-pull-request">List reviews for a pull request Documentation</a>
     */
    public okhttp3.Call pullsListReviewsAsync(String owner, String repo, Integer pullNumber, Integer perPage, Integer page, final ApiCallback<List<PullRequestReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsListReviewsValidateBeforeCall(owner, repo, pullNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<PullRequestReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsMerge
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsMergeRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if merge was successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed if merge cannot be performed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict if sha was provided and pull request head did not match </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#merge-a-pull-request">Merge a pull request Documentation</a>
     */
    public okhttp3.Call pullsMergeCall(String owner, String repo, Integer pullNumber, PullsMergeRequest pullsMergeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsMergeRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/merge"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsMergeValidateBeforeCall(String owner, String repo, Integer pullNumber, PullsMergeRequest pullsMergeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsMerge(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsMerge(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsMerge(Async)");
        }

        return pullsMergeCall(owner, repo, pullNumber, pullsMergeRequest, _callback);

    }

    /**
     * Merge a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsMergeRequest  (optional)
     * @return PullRequestMergeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if merge was successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed if merge cannot be performed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict if sha was provided and pull request head did not match </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#merge-a-pull-request">Merge a pull request Documentation</a>
     */
    public PullRequestMergeResult pullsMerge(String owner, String repo, Integer pullNumber, PullsMergeRequest pullsMergeRequest) throws ApiException {
        ApiResponse<PullRequestMergeResult> localVarResp = pullsMergeWithHttpInfo(owner, repo, pullNumber, pullsMergeRequest);
        return localVarResp.getData();
    }

    /**
     * Merge a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsMergeRequest  (optional)
     * @return ApiResponse&lt;PullRequestMergeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if merge was successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed if merge cannot be performed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict if sha was provided and pull request head did not match </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#merge-a-pull-request">Merge a pull request Documentation</a>
     */
    public ApiResponse<PullRequestMergeResult> pullsMergeWithHttpInfo(String owner, String repo, Integer pullNumber, PullsMergeRequest pullsMergeRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsMergeValidateBeforeCall(owner, repo, pullNumber, pullsMergeRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestMergeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merge a pull request (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsMergeRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if merge was successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed if merge cannot be performed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict if sha was provided and pull request head did not match </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#merge-a-pull-request">Merge a pull request Documentation</a>
     */
    public okhttp3.Call pullsMergeAsync(String owner, String repo, Integer pullNumber, PullsMergeRequest pullsMergeRequest, final ApiCallback<PullRequestMergeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsMergeValidateBeforeCall(owner, repo, pullNumber, pullsMergeRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestMergeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsRemoveRequestedReviewers
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRemoveRequestedReviewersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request">Remove requested reviewers from a pull request Documentation</a>
     */
    public okhttp3.Call pullsRemoveRequestedReviewersCall(String owner, String repo, Integer pullNumber, PullsRemoveRequestedReviewersRequest pullsRemoveRequestedReviewersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsRemoveRequestedReviewersRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsRemoveRequestedReviewersValidateBeforeCall(String owner, String repo, Integer pullNumber, PullsRemoveRequestedReviewersRequest pullsRemoveRequestedReviewersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsRemoveRequestedReviewers(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsRemoveRequestedReviewers(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsRemoveRequestedReviewers(Async)");
        }

        // verify the required parameter 'pullsRemoveRequestedReviewersRequest' is set
        if (pullsRemoveRequestedReviewersRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsRemoveRequestedReviewersRequest' when calling pullsRemoveRequestedReviewers(Async)");
        }

        return pullsRemoveRequestedReviewersCall(owner, repo, pullNumber, pullsRemoveRequestedReviewersRequest, _callback);

    }

    /**
     * Remove requested reviewers from a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRemoveRequestedReviewersRequest  (required)
     * @return PullRequestSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request">Remove requested reviewers from a pull request Documentation</a>
     */
    public PullRequestSimple pullsRemoveRequestedReviewers(String owner, String repo, Integer pullNumber, PullsRemoveRequestedReviewersRequest pullsRemoveRequestedReviewersRequest) throws ApiException {
        ApiResponse<PullRequestSimple> localVarResp = pullsRemoveRequestedReviewersWithHttpInfo(owner, repo, pullNumber, pullsRemoveRequestedReviewersRequest);
        return localVarResp.getData();
    }

    /**
     * Remove requested reviewers from a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRemoveRequestedReviewersRequest  (required)
     * @return ApiResponse&lt;PullRequestSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request">Remove requested reviewers from a pull request Documentation</a>
     */
    public ApiResponse<PullRequestSimple> pullsRemoveRequestedReviewersWithHttpInfo(String owner, String repo, Integer pullNumber, PullsRemoveRequestedReviewersRequest pullsRemoveRequestedReviewersRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsRemoveRequestedReviewersValidateBeforeCall(owner, repo, pullNumber, pullsRemoveRequestedReviewersRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove requested reviewers from a pull request (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRemoveRequestedReviewersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request">Remove requested reviewers from a pull request Documentation</a>
     */
    public okhttp3.Call pullsRemoveRequestedReviewersAsync(String owner, String repo, Integer pullNumber, PullsRemoveRequestedReviewersRequest pullsRemoveRequestedReviewersRequest, final ApiCallback<PullRequestSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsRemoveRequestedReviewersValidateBeforeCall(owner, repo, pullNumber, pullsRemoveRequestedReviewersRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsRequestReviewers
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRequestReviewersRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#request-reviewers-for-a-pull-request">Request reviewers for a pull request Documentation</a>
     */
    public okhttp3.Call pullsRequestReviewersCall(String owner, String repo, Integer pullNumber, PullsRequestReviewersRequest pullsRequestReviewersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsRequestReviewersRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsRequestReviewersValidateBeforeCall(String owner, String repo, Integer pullNumber, PullsRequestReviewersRequest pullsRequestReviewersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsRequestReviewers(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsRequestReviewers(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsRequestReviewers(Async)");
        }

        return pullsRequestReviewersCall(owner, repo, pullNumber, pullsRequestReviewersRequest, _callback);

    }

    /**
     * Request reviewers for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRequestReviewersRequest  (optional)
     * @return PullRequestSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#request-reviewers-for-a-pull-request">Request reviewers for a pull request Documentation</a>
     */
    public PullRequestSimple pullsRequestReviewers(String owner, String repo, Integer pullNumber, PullsRequestReviewersRequest pullsRequestReviewersRequest) throws ApiException {
        ApiResponse<PullRequestSimple> localVarResp = pullsRequestReviewersWithHttpInfo(owner, repo, pullNumber, pullsRequestReviewersRequest);
        return localVarResp.getData();
    }

    /**
     * Request reviewers for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRequestReviewersRequest  (optional)
     * @return ApiResponse&lt;PullRequestSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#request-reviewers-for-a-pull-request">Request reviewers for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestSimple> pullsRequestReviewersWithHttpInfo(String owner, String repo, Integer pullNumber, PullsRequestReviewersRequest pullsRequestReviewersRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsRequestReviewersValidateBeforeCall(owner, repo, pullNumber, pullsRequestReviewersRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request reviewers for a pull request (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsRequestReviewersRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity if user is not a collaborator </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#request-reviewers-for-a-pull-request">Request reviewers for a pull request Documentation</a>
     */
    public okhttp3.Call pullsRequestReviewersAsync(String owner, String repo, Integer pullNumber, PullsRequestReviewersRequest pullsRequestReviewersRequest, final ApiCallback<PullRequestSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsRequestReviewersValidateBeforeCall(owner, repo, pullNumber, pullsRequestReviewersRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsSubmitReview
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsSubmitReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#submit-a-review-for-a-pull-request">Submit a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsSubmitReviewCall(String owner, String repo, Integer pullNumber, Integer reviewId, PullsSubmitReviewRequest pullsSubmitReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsSubmitReviewRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()))
            .replace("{" + "review_id" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsSubmitReviewValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer reviewId, PullsSubmitReviewRequest pullsSubmitReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsSubmitReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsSubmitReview(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsSubmitReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling pullsSubmitReview(Async)");
        }

        // verify the required parameter 'pullsSubmitReviewRequest' is set
        if (pullsSubmitReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsSubmitReviewRequest' when calling pullsSubmitReview(Async)");
        }

        return pullsSubmitReviewCall(owner, repo, pullNumber, reviewId, pullsSubmitReviewRequest, _callback);

    }

    /**
     * Submit a review for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsSubmitReviewRequest  (required)
     * @return PullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#submit-a-review-for-a-pull-request">Submit a review for a pull request Documentation</a>
     */
    public PullRequestReview pullsSubmitReview(String owner, String repo, Integer pullNumber, Integer reviewId, PullsSubmitReviewRequest pullsSubmitReviewRequest) throws ApiException {
        ApiResponse<PullRequestReview> localVarResp = pullsSubmitReviewWithHttpInfo(owner, repo, pullNumber, reviewId, pullsSubmitReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Submit a review for a pull request
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsSubmitReviewRequest  (required)
     * @return ApiResponse&lt;PullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#submit-a-review-for-a-pull-request">Submit a review for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReview> pullsSubmitReviewWithHttpInfo(String owner, String repo, Integer pullNumber, Integer reviewId, PullsSubmitReviewRequest pullsSubmitReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsSubmitReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, pullsSubmitReviewRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a review for a pull request (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsSubmitReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#submit-a-review-for-a-pull-request">Submit a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsSubmitReviewAsync(String owner, String repo, Integer pullNumber, Integer reviewId, PullsSubmitReviewRequest pullsSubmitReviewRequest, final ApiCallback<PullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsSubmitReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, pullsSubmitReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsUpdate
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls/#update-a-pull-request">Update a pull request Documentation</a>
     */
    public okhttp3.Call pullsUpdateCall(String owner, String repo, Integer pullNumber, PullsUpdateRequest pullsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsUpdateRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsUpdateValidateBeforeCall(String owner, String repo, Integer pullNumber, PullsUpdateRequest pullsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsUpdate(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsUpdate(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsUpdate(Async)");
        }

        return pullsUpdateCall(owner, repo, pullNumber, pullsUpdateRequest, _callback);

    }

    /**
     * Update a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateRequest  (optional)
     * @return PullRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls/#update-a-pull-request">Update a pull request Documentation</a>
     */
    public PullRequest pullsUpdate(String owner, String repo, Integer pullNumber, PullsUpdateRequest pullsUpdateRequest) throws ApiException {
        ApiResponse<PullRequest> localVarResp = pullsUpdateWithHttpInfo(owner, repo, pullNumber, pullsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a pull request
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateRequest  (optional)
     * @return ApiResponse&lt;PullRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls/#update-a-pull-request">Update a pull request Documentation</a>
     */
    public ApiResponse<PullRequest> pullsUpdateWithHttpInfo(String owner, String repo, Integer pullNumber, PullsUpdateRequest pullsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsUpdateValidateBeforeCall(owner, repo, pullNumber, pullsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a pull request (asynchronously)
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team, GitHub Enterprise Server 2.17+, and GitHub Enterprise Cloud.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls/#update-a-pull-request">Update a pull request Documentation</a>
     */
    public okhttp3.Call pullsUpdateAsync(String owner, String repo, Integer pullNumber, PullsUpdateRequest pullsUpdateRequest, final ApiCallback<PullRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsUpdateValidateBeforeCall(owner, repo, pullNumber, pullsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsUpdateBranch
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateBranchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-pull-request-branch">Update a pull request branch Documentation</a>
     */
    public okhttp3.Call pullsUpdateBranchCall(String owner, String repo, Integer pullNumber, PullsUpdateBranchRequest pullsUpdateBranchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsUpdateBranchRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsUpdateBranchValidateBeforeCall(String owner, String repo, Integer pullNumber, PullsUpdateBranchRequest pullsUpdateBranchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsUpdateBranch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsUpdateBranch(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsUpdateBranch(Async)");
        }

        return pullsUpdateBranchCall(owner, repo, pullNumber, pullsUpdateBranchRequest, _callback);

    }

    /**
     * Update a pull request branch
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateBranchRequest  (optional)
     * @return EnterpriseAdminUpdateOrgName202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-pull-request-branch">Update a pull request branch Documentation</a>
     */
    public EnterpriseAdminUpdateOrgName202Response pullsUpdateBranch(String owner, String repo, Integer pullNumber, PullsUpdateBranchRequest pullsUpdateBranchRequest) throws ApiException {
        ApiResponse<EnterpriseAdminUpdateOrgName202Response> localVarResp = pullsUpdateBranchWithHttpInfo(owner, repo, pullNumber, pullsUpdateBranchRequest);
        return localVarResp.getData();
    }

    /**
     * Update a pull request branch
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateBranchRequest  (optional)
     * @return ApiResponse&lt;EnterpriseAdminUpdateOrgName202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-pull-request-branch">Update a pull request branch Documentation</a>
     */
    public ApiResponse<EnterpriseAdminUpdateOrgName202Response> pullsUpdateBranchWithHttpInfo(String owner, String repo, Integer pullNumber, PullsUpdateBranchRequest pullsUpdateBranchRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsUpdateBranchValidateBeforeCall(owner, repo, pullNumber, pullsUpdateBranchRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a pull request branch (asynchronously)
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param pullsUpdateBranchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Preview header missing </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-pull-request-branch">Update a pull request branch Documentation</a>
     */
    public okhttp3.Call pullsUpdateBranchAsync(String owner, String repo, Integer pullNumber, PullsUpdateBranchRequest pullsUpdateBranchRequest, final ApiCallback<EnterpriseAdminUpdateOrgName202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsUpdateBranchValidateBeforeCall(owner, repo, pullNumber, pullsUpdateBranchRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsUpdateReview
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsUpdateReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-for-a-pull-request">Update a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsUpdateReviewCall(String owner, String repo, Integer pullNumber, Integer reviewId, PullsUpdateReviewRequest pullsUpdateReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsUpdateReviewRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pull_number" + "}", localVarApiClient.escapeString(pullNumber.toString()))
            .replace("{" + "review_id" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsUpdateReviewValidateBeforeCall(String owner, String repo, Integer pullNumber, Integer reviewId, PullsUpdateReviewRequest pullsUpdateReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsUpdateReview(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsUpdateReview(Async)");
        }

        // verify the required parameter 'pullNumber' is set
        if (pullNumber == null) {
            throw new ApiException("Missing the required parameter 'pullNumber' when calling pullsUpdateReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling pullsUpdateReview(Async)");
        }

        // verify the required parameter 'pullsUpdateReviewRequest' is set
        if (pullsUpdateReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsUpdateReviewRequest' when calling pullsUpdateReview(Async)");
        }

        return pullsUpdateReviewCall(owner, repo, pullNumber, reviewId, pullsUpdateReviewRequest, _callback);

    }

    /**
     * Update a review for a pull request
     * Update the review summary comment with new text.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsUpdateReviewRequest  (required)
     * @return PullRequestReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-for-a-pull-request">Update a review for a pull request Documentation</a>
     */
    public PullRequestReview pullsUpdateReview(String owner, String repo, Integer pullNumber, Integer reviewId, PullsUpdateReviewRequest pullsUpdateReviewRequest) throws ApiException {
        ApiResponse<PullRequestReview> localVarResp = pullsUpdateReviewWithHttpInfo(owner, repo, pullNumber, reviewId, pullsUpdateReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Update a review for a pull request
     * Update the review summary comment with new text.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsUpdateReviewRequest  (required)
     * @return ApiResponse&lt;PullRequestReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-for-a-pull-request">Update a review for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReview> pullsUpdateReviewWithHttpInfo(String owner, String repo, Integer pullNumber, Integer reviewId, PullsUpdateReviewRequest pullsUpdateReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsUpdateReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, pullsUpdateReviewRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a review for a pull request (asynchronously)
     * Update the review summary comment with new text.
     * @param owner  (required)
     * @param repo  (required)
     * @param pullNumber  (required)
     * @param reviewId review_id parameter (required)
     * @param pullsUpdateReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-for-a-pull-request">Update a review for a pull request Documentation</a>
     */
    public okhttp3.Call pullsUpdateReviewAsync(String owner, String repo, Integer pullNumber, Integer reviewId, PullsUpdateReviewRequest pullsUpdateReviewRequest, final ApiCallback<PullRequestReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsUpdateReviewValidateBeforeCall(owner, repo, pullNumber, reviewId, pullsUpdateReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pullsUpdateReviewComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsUpdateReviewCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-comment-for-a-pull-request">Update a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsUpdateReviewCommentCall(String owner, String repo, Integer commentId, PullsUpdateReviewCommentRequest pullsUpdateReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pullsUpdateReviewCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pullsUpdateReviewCommentValidateBeforeCall(String owner, String repo, Integer commentId, PullsUpdateReviewCommentRequest pullsUpdateReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling pullsUpdateReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling pullsUpdateReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling pullsUpdateReviewComment(Async)");
        }

        // verify the required parameter 'pullsUpdateReviewCommentRequest' is set
        if (pullsUpdateReviewCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'pullsUpdateReviewCommentRequest' when calling pullsUpdateReviewComment(Async)");
        }

        return pullsUpdateReviewCommentCall(owner, repo, commentId, pullsUpdateReviewCommentRequest, _callback);

    }

    /**
     * Update a review comment for a pull request
     * Enables you to edit a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsUpdateReviewCommentRequest  (required)
     * @return PullRequestReviewComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-comment-for-a-pull-request">Update a review comment for a pull request Documentation</a>
     */
    public PullRequestReviewComment pullsUpdateReviewComment(String owner, String repo, Integer commentId, PullsUpdateReviewCommentRequest pullsUpdateReviewCommentRequest) throws ApiException {
        ApiResponse<PullRequestReviewComment> localVarResp = pullsUpdateReviewCommentWithHttpInfo(owner, repo, commentId, pullsUpdateReviewCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Update a review comment for a pull request
     * Enables you to edit a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsUpdateReviewCommentRequest  (required)
     * @return ApiResponse&lt;PullRequestReviewComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-comment-for-a-pull-request">Update a review comment for a pull request Documentation</a>
     */
    public ApiResponse<PullRequestReviewComment> pullsUpdateReviewCommentWithHttpInfo(String owner, String repo, Integer commentId, PullsUpdateReviewCommentRequest pullsUpdateReviewCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = pullsUpdateReviewCommentValidateBeforeCall(owner, repo, commentId, pullsUpdateReviewCommentRequest, null);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a review comment for a pull request (asynchronously)
     * Enables you to edit a review comment.
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param pullsUpdateReviewCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/pulls#update-a-review-comment-for-a-pull-request">Update a review comment for a pull request Documentation</a>
     */
    public okhttp3.Call pullsUpdateReviewCommentAsync(String owner, String repo, Integer commentId, PullsUpdateReviewCommentRequest pullsUpdateReviewCommentRequest, final ApiCallback<PullRequestReviewComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = pullsUpdateReviewCommentValidateBeforeCall(owner, repo, commentId, pullsUpdateReviewCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<PullRequestReviewComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
