/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Authorization;
import org.openapitools.client.model.ConfigurationStatus;
import org.openapitools.client.model.EnterpriseAdminCreateGlobalWebhookRequest;
import org.openapitools.client.model.EnterpriseAdminCreateImpersonationOAuthTokenRequest;
import org.openapitools.client.model.EnterpriseAdminCreateOrgRequest;
import org.openapitools.client.model.EnterpriseAdminCreatePreReceiveEnvironmentRequest;
import org.openapitools.client.model.EnterpriseAdminCreatePreReceiveHookRequest;
import org.openapitools.client.model.EnterpriseAdminCreateUserRequest;
import org.openapitools.client.model.EnterpriseAdminDeletePreReceiveEnvironment422Response;
import org.openapitools.client.model.EnterpriseAdminSuspendUserRequest;
import org.openapitools.client.model.EnterpriseAdminSyncLdapMappingForTeam201Response;
import org.openapitools.client.model.EnterpriseAdminUnsuspendUserRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateGlobalWebhookRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateLdapMappingForTeamRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgName202Response;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgNameRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveEnvironmentRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateUsernameForUserRequest;
import org.openapitools.client.model.EnterpriseCommentOverview;
import org.openapitools.client.model.EnterpriseGistOverview;
import org.openapitools.client.model.EnterpriseHookOverview;
import org.openapitools.client.model.EnterpriseIssueOverview;
import org.openapitools.client.model.EnterpriseMilestoneOverview;
import org.openapitools.client.model.EnterpriseOrganizationOverview;
import org.openapitools.client.model.EnterpriseOverview;
import org.openapitools.client.model.EnterprisePageOverview;
import org.openapitools.client.model.EnterprisePullRequestOverview;
import org.openapitools.client.model.EnterpriseRepositoryOverview;
import org.openapitools.client.model.EnterpriseSettings;
import org.openapitools.client.model.EnterpriseUserOverview;
import org.openapitools.client.model.GlobalHook;
import org.openapitools.client.model.GlobalHook2;
import org.openapitools.client.model.LdapMappingTeam;
import org.openapitools.client.model.LdapMappingUser;
import org.openapitools.client.model.LicenseInfo;
import org.openapitools.client.model.MaintenanceStatus;
import org.openapitools.client.model.OrgPreReceiveHook;
import org.openapitools.client.model.OrganizationSimple;
import org.openapitools.client.model.PreReceiveEnvironment;
import org.openapitools.client.model.PreReceiveEnvironmentDownloadStatus;
import org.openapitools.client.model.PreReceiveHook;
import org.openapitools.client.model.PublicKeyFull;
import org.openapitools.client.model.RepositoryPreReceiveHook;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.SshKey;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnterpriseAdminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnterpriseAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnterpriseAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enterpriseAdminAddAuthorizedSshKey
     * @param authorizedKey The public SSH key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddAuthorizedSshKeyCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings/authorized-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorizedKey != null) {
            localVarFormParams.put("authorized_key", authorizedKey);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminAddAuthorizedSshKeyValidateBeforeCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizedKey' is set
        if (authorizedKey == null) {
            throw new ApiException("Missing the required parameter 'authorizedKey' when calling enterpriseAdminAddAuthorizedSshKey(Async)");
        }

        return enterpriseAdminAddAuthorizedSshKeyCall(authorizedKey, _callback);

    }

    /**
     * Add an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return List&lt;SshKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public List<SshKey> enterpriseAdminAddAuthorizedSshKey(String authorizedKey) throws ApiException {
        ApiResponse<List<SshKey>> localVarResp = enterpriseAdminAddAuthorizedSshKeyWithHttpInfo(authorizedKey);
        return localVarResp.getData();
    }

    /**
     * Add an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return ApiResponse&lt;List&lt;SshKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public ApiResponse<List<SshKey>> enterpriseAdminAddAuthorizedSshKeyWithHttpInfo(String authorizedKey) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminAddAuthorizedSshKeyValidateBeforeCall(authorizedKey, null);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an authorized SSH key (asynchronously)
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddAuthorizedSshKeyAsync(String authorizedKey, final ApiCallback<List<SshKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminAddAuthorizedSshKeyValidateBeforeCall(authorizedKey, _callback);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateEnterpriseServerLicense
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateEnterpriseServerLicenseCall(String license, String password, String settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (license != null) {
            localVarFormParams.put("license", license);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (settings != null) {
            localVarFormParams.put("settings", settings);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateEnterpriseServerLicenseValidateBeforeCall(String license, String password, String settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'license' is set
        if (license == null) {
            throw new ApiException("Missing the required parameter 'license' when calling enterpriseAdminCreateEnterpriseServerLicense(Async)");
        }

        return enterpriseAdminCreateEnterpriseServerLicenseCall(license, password, settings, _callback);

    }

    /**
     * Create a GitHub license
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to &#x60;POST&#x60; to [&#x60;/setup/api/configure&#x60;](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you&#39;re working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public void enterpriseAdminCreateEnterpriseServerLicense(String license, String password, String settings) throws ApiException {
        enterpriseAdminCreateEnterpriseServerLicenseWithHttpInfo(license, password, settings);
    }

    /**
     * Create a GitHub license
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to &#x60;POST&#x60; to [&#x60;/setup/api/configure&#x60;](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you&#39;re working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminCreateEnterpriseServerLicenseWithHttpInfo(String license, String password, String settings) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateEnterpriseServerLicenseValidateBeforeCall(license, password, settings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a GitHub license (asynchronously)
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to &#x60;POST&#x60; to [&#x60;/setup/api/configure&#x60;](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you&#39;re working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateEnterpriseServerLicenseAsync(String license, String password, String settings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateEnterpriseServerLicenseValidateBeforeCall(license, password, settings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateGlobalWebhook
     * @param accept This API is under preview and subject to change. (required)
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateGlobalWebhookCall(String accept, EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateGlobalWebhookRequest;

        // create path and map variables
        String localVarPath = "/admin/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateGlobalWebhookValidateBeforeCall(String accept, EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling enterpriseAdminCreateGlobalWebhook(Async)");
        }

        // verify the required parameter 'enterpriseAdminCreateGlobalWebhookRequest' is set
        if (enterpriseAdminCreateGlobalWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreateGlobalWebhookRequest' when calling enterpriseAdminCreateGlobalWebhook(Async)");
        }

        return enterpriseAdminCreateGlobalWebhookCall(accept, enterpriseAdminCreateGlobalWebhookRequest, _callback);

    }

    /**
     * Create a global webhook
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @return GlobalHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public GlobalHook enterpriseAdminCreateGlobalWebhook(String accept, EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest) throws ApiException {
        ApiResponse<GlobalHook> localVarResp = enterpriseAdminCreateGlobalWebhookWithHttpInfo(accept, enterpriseAdminCreateGlobalWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Create a global webhook
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @return ApiResponse&lt;GlobalHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public ApiResponse<GlobalHook> enterpriseAdminCreateGlobalWebhookWithHttpInfo(String accept, EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateGlobalWebhookValidateBeforeCall(accept, enterpriseAdminCreateGlobalWebhookRequest, null);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a global webhook (asynchronously)
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateGlobalWebhookAsync(String accept, EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest, final ApiCallback<GlobalHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateGlobalWebhookValidateBeforeCall(accept, enterpriseAdminCreateGlobalWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateImpersonationOAuthToken
     * @param username  (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateImpersonationOAuthTokenCall(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateImpersonationOAuthTokenRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{username}/authorizations"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateImpersonationOAuthTokenValidateBeforeCall(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminCreateImpersonationOAuthToken(Async)");
        }

        return enterpriseAdminCreateImpersonationOAuthTokenCall(username, enterpriseAdminCreateImpersonationOAuthTokenRequest, _callback);

    }

    /**
     * Create an impersonation OAuth token
     * 
     * @param username  (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (optional)
     * @return Authorization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public Authorization enterpriseAdminCreateImpersonationOAuthToken(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest) throws ApiException {
        ApiResponse<Authorization> localVarResp = enterpriseAdminCreateImpersonationOAuthTokenWithHttpInfo(username, enterpriseAdminCreateImpersonationOAuthTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Create an impersonation OAuth token
     * 
     * @param username  (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (optional)
     * @return ApiResponse&lt;Authorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public ApiResponse<Authorization> enterpriseAdminCreateImpersonationOAuthTokenWithHttpInfo(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateImpersonationOAuthTokenValidateBeforeCall(username, enterpriseAdminCreateImpersonationOAuthTokenRequest, null);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an impersonation OAuth token (asynchronously)
     * 
     * @param username  (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateImpersonationOAuthTokenAsync(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest, final ApiCallback<Authorization> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateImpersonationOAuthTokenValidateBeforeCall(username, enterpriseAdminCreateImpersonationOAuthTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateOrg
     * @param enterpriseAdminCreateOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateOrgCall(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateOrgRequest;

        // create path and map variables
        String localVarPath = "/admin/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateOrgValidateBeforeCall(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminCreateOrgCall(enterpriseAdminCreateOrgRequest, _callback);

    }

    /**
     * Create an organization
     * 
     * @param enterpriseAdminCreateOrgRequest  (optional)
     * @return OrganizationSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public OrganizationSimple enterpriseAdminCreateOrg(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest) throws ApiException {
        ApiResponse<OrganizationSimple> localVarResp = enterpriseAdminCreateOrgWithHttpInfo(enterpriseAdminCreateOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create an organization
     * 
     * @param enterpriseAdminCreateOrgRequest  (optional)
     * @return ApiResponse&lt;OrganizationSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public ApiResponse<OrganizationSimple> enterpriseAdminCreateOrgWithHttpInfo(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateOrgValidateBeforeCall(enterpriseAdminCreateOrgRequest, null);
        Type localVarReturnType = new TypeToken<OrganizationSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organization (asynchronously)
     * 
     * @param enterpriseAdminCreateOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateOrgAsync(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest, final ApiCallback<OrganizationSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateOrgValidateBeforeCall(enterpriseAdminCreateOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<OrganizationSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreatePreReceiveEnvironment
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveEnvironmentCall(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreatePreReceiveEnvironmentRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreatePreReceiveEnvironmentValidateBeforeCall(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreatePreReceiveEnvironmentRequest' is set
        if (enterpriseAdminCreatePreReceiveEnvironmentRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreatePreReceiveEnvironmentRequest' when calling enterpriseAdminCreatePreReceiveEnvironment(Async)");
        }

        return enterpriseAdminCreatePreReceiveEnvironmentCall(enterpriseAdminCreatePreReceiveEnvironmentRequest, _callback);

    }

    /**
     * Create a pre-receive environment
     * 
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @return PreReceiveEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironment enterpriseAdminCreatePreReceiveEnvironment(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest) throws ApiException {
        ApiResponse<PreReceiveEnvironment> localVarResp = enterpriseAdminCreatePreReceiveEnvironmentWithHttpInfo(enterpriseAdminCreatePreReceiveEnvironmentRequest);
        return localVarResp.getData();
    }

    /**
     * Create a pre-receive environment
     * 
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @return ApiResponse&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironment> enterpriseAdminCreatePreReceiveEnvironmentWithHttpInfo(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveEnvironmentValidateBeforeCall(enterpriseAdminCreatePreReceiveEnvironmentRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a pre-receive environment (asynchronously)
     * 
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveEnvironmentAsync(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest, final ApiCallback<PreReceiveEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveEnvironmentValidateBeforeCall(enterpriseAdminCreatePreReceiveEnvironmentRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreatePreReceiveHook
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveHookCall(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreatePreReceiveHookRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreatePreReceiveHookValidateBeforeCall(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreatePreReceiveHookRequest' is set
        if (enterpriseAdminCreatePreReceiveHookRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreatePreReceiveHookRequest' when calling enterpriseAdminCreatePreReceiveHook(Async)");
        }

        return enterpriseAdminCreatePreReceiveHookCall(enterpriseAdminCreatePreReceiveHookRequest, _callback);

    }

    /**
     * Create a pre-receive hook
     * 
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @return PreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public PreReceiveHook enterpriseAdminCreatePreReceiveHook(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest) throws ApiException {
        ApiResponse<PreReceiveHook> localVarResp = enterpriseAdminCreatePreReceiveHookWithHttpInfo(enterpriseAdminCreatePreReceiveHookRequest);
        return localVarResp.getData();
    }

    /**
     * Create a pre-receive hook
     * 
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @return ApiResponse&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public ApiResponse<PreReceiveHook> enterpriseAdminCreatePreReceiveHookWithHttpInfo(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveHookValidateBeforeCall(enterpriseAdminCreatePreReceiveHookRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a pre-receive hook (asynchronously)
     * 
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveHookAsync(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest, final ApiCallback<PreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveHookValidateBeforeCall(enterpriseAdminCreatePreReceiveHookRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateUser
     * @param enterpriseAdminCreateUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateUserCall(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateUserValidateBeforeCall(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreateUserRequest' is set
        if (enterpriseAdminCreateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreateUserRequest' when calling enterpriseAdminCreateUser(Async)");
        }

        return enterpriseAdminCreateUserCall(enterpriseAdminCreateUserRequest, _callback);

    }

    /**
     * Create a user
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send &#x60;\&quot;octo_cat\&quot;&#x60; as the login, a user named &#x60;\&quot;octo-cat\&quot;&#x60; will be created.  If the login name or email address is already associated with an account, the server will return a &#x60;422&#x60; response.
     * @param enterpriseAdminCreateUserRequest  (required)
     * @return SimpleUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public SimpleUser enterpriseAdminCreateUser(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest) throws ApiException {
        ApiResponse<SimpleUser> localVarResp = enterpriseAdminCreateUserWithHttpInfo(enterpriseAdminCreateUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a user
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send &#x60;\&quot;octo_cat\&quot;&#x60; as the login, a user named &#x60;\&quot;octo-cat\&quot;&#x60; will be created.  If the login name or email address is already associated with an account, the server will return a &#x60;422&#x60; response.
     * @param enterpriseAdminCreateUserRequest  (required)
     * @return ApiResponse&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public ApiResponse<SimpleUser> enterpriseAdminCreateUserWithHttpInfo(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateUserValidateBeforeCall(enterpriseAdminCreateUserRequest, null);
        Type localVarReturnType = new TypeToken<SimpleUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a user (asynchronously)
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send &#x60;\&quot;octo_cat\&quot;&#x60; as the login, a user named &#x60;\&quot;octo-cat\&quot;&#x60; will be created.  If the login name or email address is already associated with an account, the server will return a &#x60;422&#x60; response.
     * @param enterpriseAdminCreateUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateUserAsync(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest, final ApiCallback<SimpleUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateUserValidateBeforeCall(enterpriseAdminCreateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<SimpleUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteGlobalWebhook
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteGlobalWebhookCall(String accept, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteGlobalWebhookValidateBeforeCall(String accept, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling enterpriseAdminDeleteGlobalWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminDeleteGlobalWebhook(Async)");
        }

        return enterpriseAdminDeleteGlobalWebhookCall(accept, hookId, _callback);

    }

    /**
     * Delete a global webhook
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public void enterpriseAdminDeleteGlobalWebhook(String accept, Integer hookId) throws ApiException {
        enterpriseAdminDeleteGlobalWebhookWithHttpInfo(accept, hookId);
    }

    /**
     * Delete a global webhook
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteGlobalWebhookWithHttpInfo(String accept, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteGlobalWebhookValidateBeforeCall(accept, hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a global webhook (asynchronously)
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteGlobalWebhookAsync(String accept, Integer hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteGlobalWebhookValidateBeforeCall(accept, hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteImpersonationOAuthToken
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteImpersonationOAuthTokenCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{username}/authorizations"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteImpersonationOAuthTokenValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminDeleteImpersonationOAuthToken(Async)");
        }

        return enterpriseAdminDeleteImpersonationOAuthTokenCall(username, _callback);

    }

    /**
     * Delete an impersonation OAuth token
     * 
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public void enterpriseAdminDeleteImpersonationOAuthToken(String username) throws ApiException {
        enterpriseAdminDeleteImpersonationOAuthTokenWithHttpInfo(username);
    }

    /**
     * Delete an impersonation OAuth token
     * 
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteImpersonationOAuthTokenWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteImpersonationOAuthTokenValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an impersonation OAuth token (asynchronously)
     * 
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteImpersonationOAuthTokenAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteImpersonationOAuthTokenValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePersonalAccessToken
     * @param tokenId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePersonalAccessTokenCall(Integer tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/tokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePersonalAccessTokenValidateBeforeCall(Integer tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling enterpriseAdminDeletePersonalAccessToken(Async)");
        }

        return enterpriseAdminDeletePersonalAccessTokenCall(tokenId, _callback);

    }

    /**
     * Delete a personal access token
     * Deletes a personal access token. Returns a &#x60;403 - Forbidden&#x60; status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * @param tokenId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public void enterpriseAdminDeletePersonalAccessToken(Integer tokenId) throws ApiException {
        enterpriseAdminDeletePersonalAccessTokenWithHttpInfo(tokenId);
    }

    /**
     * Delete a personal access token
     * Deletes a personal access token. Returns a &#x60;403 - Forbidden&#x60; status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * @param tokenId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePersonalAccessTokenWithHttpInfo(Integer tokenId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePersonalAccessTokenValidateBeforeCall(tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a personal access token (asynchronously)
     * Deletes a personal access token. Returns a &#x60;403 - Forbidden&#x60; status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * @param tokenId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePersonalAccessTokenAsync(Integer tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePersonalAccessTokenValidateBeforeCall(tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePreReceiveEnvironment
     * @param preReceiveEnvironmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminDeletePreReceiveEnvironment(Async)");
        }

        return enterpriseAdminDeletePreReceiveEnvironmentCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Delete a pre-receive environment
     * If you attempt to delete an environment that cannot be deleted, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     * @param preReceiveEnvironmentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public void enterpriseAdminDeletePreReceiveEnvironment(Integer preReceiveEnvironmentId) throws ApiException {
        enterpriseAdminDeletePreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId);
    }

    /**
     * Delete a pre-receive environment
     * If you attempt to delete an environment that cannot be deleted, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     * @param preReceiveEnvironmentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a pre-receive environment (asynchronously)
     * If you attempt to delete an environment that cannot be deleted, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     * @param preReceiveEnvironmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePreReceiveHook
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveHookCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePreReceiveHookValidateBeforeCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminDeletePreReceiveHook(Async)");
        }

        return enterpriseAdminDeletePreReceiveHookCall(preReceiveHookId, _callback);

    }

    /**
     * Delete a pre-receive hook
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public void enterpriseAdminDeletePreReceiveHook(Integer preReceiveHookId) throws ApiException {
        enterpriseAdminDeletePreReceiveHookWithHttpInfo(preReceiveHookId);
    }

    /**
     * Delete a pre-receive hook
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePreReceiveHookWithHttpInfo(Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveHookValidateBeforeCall(preReceiveHookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a pre-receive hook (asynchronously)
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveHookAsync(Integer preReceiveHookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveHookValidateBeforeCall(preReceiveHookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePublicKey
     * @param keyIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePublicKeyCall(String keyIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/keys/{key_ids}"
            .replace("{" + "key_ids" + "}", localVarApiClient.escapeString(keyIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePublicKeyValidateBeforeCall(String keyIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyIds' is set
        if (keyIds == null) {
            throw new ApiException("Missing the required parameter 'keyIds' when calling enterpriseAdminDeletePublicKey(Async)");
        }

        return enterpriseAdminDeletePublicKeyCall(keyIds, _callback);

    }

    /**
     * Delete a public key
     * 
     * @param keyIds  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public void enterpriseAdminDeletePublicKey(String keyIds) throws ApiException {
        enterpriseAdminDeletePublicKeyWithHttpInfo(keyIds);
    }

    /**
     * Delete a public key
     * 
     * @param keyIds  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePublicKeyWithHttpInfo(String keyIds) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePublicKeyValidateBeforeCall(keyIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a public key (asynchronously)
     * 
     * @param keyIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePublicKeyAsync(String keyIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePublicKeyValidateBeforeCall(keyIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteUser
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminDeleteUser(Async)");
        }

        return enterpriseAdminDeleteUserCall(username, _callback);

    }

    /**
     * Delete a user
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public void enterpriseAdminDeleteUser(String username) throws ApiException {
        enterpriseAdminDeleteUserWithHttpInfo(username);
    }

    /**
     * Delete a user
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteUserValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user (asynchronously)
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteUserAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteUserValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDemoteSiteAdministrator
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDemoteSiteAdministratorCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/site_admin"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDemoteSiteAdministratorValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminDemoteSiteAdministrator(Async)");
        }

        return enterpriseAdminDemoteSiteAdministratorCall(username, _callback);

    }

    /**
     * Demote a site administrator
     * You can demote any user account except your own.
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public void enterpriseAdminDemoteSiteAdministrator(String username) throws ApiException {
        enterpriseAdminDemoteSiteAdministratorWithHttpInfo(username);
    }

    /**
     * Demote a site administrator
     * You can demote any user account except your own.
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDemoteSiteAdministratorWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDemoteSiteAdministratorValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Demote a site administrator (asynchronously)
     * You can demote any user account except your own.
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDemoteSiteAdministratorAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDemoteSiteAdministratorValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminEnableOrDisableMaintenanceMode
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public okhttp3.Call enterpriseAdminEnableOrDisableMaintenanceModeCall(String maintenance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/maintenance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maintenance != null) {
            localVarFormParams.put("maintenance", maintenance);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminEnableOrDisableMaintenanceModeValidateBeforeCall(String maintenance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'maintenance' is set
        if (maintenance == null) {
            throw new ApiException("Missing the required parameter 'maintenance' when calling enterpriseAdminEnableOrDisableMaintenanceMode(Async)");
        }

        return enterpriseAdminEnableOrDisableMaintenanceModeCall(maintenance, _callback);

    }

    /**
     * Enable or disable maintenance mode
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @return MaintenanceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public MaintenanceStatus enterpriseAdminEnableOrDisableMaintenanceMode(String maintenance) throws ApiException {
        ApiResponse<MaintenanceStatus> localVarResp = enterpriseAdminEnableOrDisableMaintenanceModeWithHttpInfo(maintenance);
        return localVarResp.getData();
    }

    /**
     * Enable or disable maintenance mode
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @return ApiResponse&lt;MaintenanceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public ApiResponse<MaintenanceStatus> enterpriseAdminEnableOrDisableMaintenanceModeWithHttpInfo(String maintenance) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminEnableOrDisableMaintenanceModeValidateBeforeCall(maintenance, null);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable or disable maintenance mode (asynchronously)
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public okhttp3.Call enterpriseAdminEnableOrDisableMaintenanceModeAsync(String maintenance, final ApiCallback<MaintenanceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminEnableOrDisableMaintenanceModeValidateBeforeCall(maintenance, _callback);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetAllAuthorizedSshKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllAuthorizedSshKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings/authorized-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetAllAuthorizedSshKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetAllAuthorizedSshKeysCall(_callback);

    }

    /**
     * Get all authorized SSH keys
     * 
     * @return List&lt;SshKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public List<SshKey> enterpriseAdminGetAllAuthorizedSshKeys() throws ApiException {
        ApiResponse<List<SshKey>> localVarResp = enterpriseAdminGetAllAuthorizedSshKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all authorized SSH keys
     * 
     * @return ApiResponse&lt;List&lt;SshKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public ApiResponse<List<SshKey>> enterpriseAdminGetAllAuthorizedSshKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetAllAuthorizedSshKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all authorized SSH keys (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllAuthorizedSshKeysAsync(final ApiCallback<List<SshKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetAllAuthorizedSshKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetAllStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetAllStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetAllStatsCall(_callback);

    }

    /**
     * Get all statistics
     * 
     * @return EnterpriseOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public EnterpriseOverview enterpriseAdminGetAllStats() throws ApiException {
        ApiResponse<EnterpriseOverview> localVarResp = enterpriseAdminGetAllStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all statistics
     * 
     * @return ApiResponse&lt;EnterpriseOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public ApiResponse<EnterpriseOverview> enterpriseAdminGetAllStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetAllStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllStatsAsync(final ApiCallback<EnterpriseOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetAllStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetCommentStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetCommentStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetCommentStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetCommentStatsCall(_callback);

    }

    /**
     * Get comment statistics
     * 
     * @return EnterpriseCommentOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public EnterpriseCommentOverview enterpriseAdminGetCommentStats() throws ApiException {
        ApiResponse<EnterpriseCommentOverview> localVarResp = enterpriseAdminGetCommentStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get comment statistics
     * 
     * @return ApiResponse&lt;EnterpriseCommentOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public ApiResponse<EnterpriseCommentOverview> enterpriseAdminGetCommentStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetCommentStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseCommentOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get comment statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetCommentStatsAsync(final ApiCallback<EnterpriseCommentOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetCommentStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseCommentOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetConfigurationStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetConfigurationStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/configcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetConfigurationStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetConfigurationStatusCall(_callback);

    }

    /**
     * Get the configuration status
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | &#x60;PENDING&#x60;     | The job has not started yet       | | &#x60;CONFIGURING&#x60; | The job is running                | | &#x60;DONE&#x60;        | The job has finished correctly    | | &#x60;FAILED&#x60;      | The job has finished unexpectedly |
     * @return ConfigurationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public ConfigurationStatus enterpriseAdminGetConfigurationStatus() throws ApiException {
        ApiResponse<ConfigurationStatus> localVarResp = enterpriseAdminGetConfigurationStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the configuration status
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | &#x60;PENDING&#x60;     | The job has not started yet       | | &#x60;CONFIGURING&#x60; | The job is running                | | &#x60;DONE&#x60;        | The job has finished correctly    | | &#x60;FAILED&#x60;      | The job has finished unexpectedly |
     * @return ApiResponse&lt;ConfigurationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public ApiResponse<ConfigurationStatus> enterpriseAdminGetConfigurationStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetConfigurationStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConfigurationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the configuration status (asynchronously)
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | &#x60;PENDING&#x60;     | The job has not started yet       | | &#x60;CONFIGURING&#x60; | The job is running                | | &#x60;DONE&#x60;        | The job has finished correctly    | | &#x60;FAILED&#x60;      | The job has finished unexpectedly |
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetConfigurationStatusAsync(final ApiCallback<ConfigurationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetConfigurationStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConfigurationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetDownloadStatusForPreReceiveEnvironment
     * @param preReceiveEnvironmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(Async)");
        }

        return enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Get the download status for a pre-receive environment
     * In addition to seeing the download status at the \&quot;[Get a pre-receive environment](#get-a-pre-receive-environment)\&quot; endpoint, there is also this separate endpoint for just the download status.
     * @param preReceiveEnvironmentId  (required)
     * @return PreReceiveEnvironmentDownloadStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironmentDownloadStatus enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(Integer preReceiveEnvironmentId) throws ApiException {
        ApiResponse<PreReceiveEnvironmentDownloadStatus> localVarResp = enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Get the download status for a pre-receive environment
     * In addition to seeing the download status at the \&quot;[Get a pre-receive environment](#get-a-pre-receive-environment)\&quot; endpoint, there is also this separate endpoint for just the download status.
     * @param preReceiveEnvironmentId  (required)
     * @return ApiResponse&lt;PreReceiveEnvironmentDownloadStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironmentDownloadStatus> enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the download status for a pre-receive environment (asynchronously)
     * In addition to seeing the download status at the \&quot;[Get a pre-receive environment](#get-a-pre-receive-environment)\&quot; endpoint, there is also this separate endpoint for just the download status.
     * @param preReceiveEnvironmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, final ApiCallback<PreReceiveEnvironmentDownloadStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetGlobalWebhook
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGlobalWebhookCall(String accept, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetGlobalWebhookValidateBeforeCall(String accept, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling enterpriseAdminGetGlobalWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminGetGlobalWebhook(Async)");
        }

        return enterpriseAdminGetGlobalWebhookCall(accept, hookId, _callback);

    }

    /**
     * Get a global webhook
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @return GlobalHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public GlobalHook enterpriseAdminGetGlobalWebhook(String accept, Integer hookId) throws ApiException {
        ApiResponse<GlobalHook> localVarResp = enterpriseAdminGetGlobalWebhookWithHttpInfo(accept, hookId);
        return localVarResp.getData();
    }

    /**
     * Get a global webhook
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @return ApiResponse&lt;GlobalHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public ApiResponse<GlobalHook> enterpriseAdminGetGlobalWebhookWithHttpInfo(String accept, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetGlobalWebhookValidateBeforeCall(accept, hookId, null);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a global webhook (asynchronously)
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGlobalWebhookAsync(String accept, Integer hookId, final ApiCallback<GlobalHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetGlobalWebhookValidateBeforeCall(accept, hookId, _callback);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetHooksStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetHooksStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetHooksStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetHooksStatsCall(_callback);

    }

    /**
     * Get hooks statistics
     * 
     * @return EnterpriseHookOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public EnterpriseHookOverview enterpriseAdminGetHooksStats() throws ApiException {
        ApiResponse<EnterpriseHookOverview> localVarResp = enterpriseAdminGetHooksStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get hooks statistics
     * 
     * @return ApiResponse&lt;EnterpriseHookOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public ApiResponse<EnterpriseHookOverview> enterpriseAdminGetHooksStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetHooksStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseHookOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get hooks statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetHooksStatsAsync(final ApiCallback<EnterpriseHookOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetHooksStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseHookOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetIssueStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetIssueStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetIssueStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetIssueStatsCall(_callback);

    }

    /**
     * Get issue statistics
     * 
     * @return EnterpriseIssueOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public EnterpriseIssueOverview enterpriseAdminGetIssueStats() throws ApiException {
        ApiResponse<EnterpriseIssueOverview> localVarResp = enterpriseAdminGetIssueStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get issue statistics
     * 
     * @return ApiResponse&lt;EnterpriseIssueOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public ApiResponse<EnterpriseIssueOverview> enterpriseAdminGetIssueStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetIssueStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseIssueOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issue statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetIssueStatsAsync(final ApiCallback<EnterpriseIssueOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetIssueStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseIssueOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetLicenseInformation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetLicenseInformationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/settings/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetLicenseInformationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetLicenseInformationCall(_callback);

    }

    /**
     * Get license information
     * 
     * @return LicenseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public LicenseInfo enterpriseAdminGetLicenseInformation() throws ApiException {
        ApiResponse<LicenseInfo> localVarResp = enterpriseAdminGetLicenseInformationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get license information
     * 
     * @return ApiResponse&lt;LicenseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public ApiResponse<LicenseInfo> enterpriseAdminGetLicenseInformationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetLicenseInformationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LicenseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get license information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetLicenseInformationAsync(final ApiCallback<LicenseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetLicenseInformationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LicenseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetMaintenanceStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMaintenanceStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/maintenance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetMaintenanceStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetMaintenanceStatusCall(_callback);

    }

    /**
     * Get the maintenance status
     * Check your installation&#39;s maintenance status:
     * @return MaintenanceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public MaintenanceStatus enterpriseAdminGetMaintenanceStatus() throws ApiException {
        ApiResponse<MaintenanceStatus> localVarResp = enterpriseAdminGetMaintenanceStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the maintenance status
     * Check your installation&#39;s maintenance status:
     * @return ApiResponse&lt;MaintenanceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public ApiResponse<MaintenanceStatus> enterpriseAdminGetMaintenanceStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetMaintenanceStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the maintenance status (asynchronously)
     * Check your installation&#39;s maintenance status:
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMaintenanceStatusAsync(final ApiCallback<MaintenanceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetMaintenanceStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetMilestoneStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMilestoneStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/milestones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetMilestoneStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetMilestoneStatsCall(_callback);

    }

    /**
     * Get milestone statistics
     * 
     * @return EnterpriseMilestoneOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public EnterpriseMilestoneOverview enterpriseAdminGetMilestoneStats() throws ApiException {
        ApiResponse<EnterpriseMilestoneOverview> localVarResp = enterpriseAdminGetMilestoneStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get milestone statistics
     * 
     * @return ApiResponse&lt;EnterpriseMilestoneOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public ApiResponse<EnterpriseMilestoneOverview> enterpriseAdminGetMilestoneStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetMilestoneStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseMilestoneOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get milestone statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMilestoneStatsAsync(final ApiCallback<EnterpriseMilestoneOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetMilestoneStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseMilestoneOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetOrgStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetOrgStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetOrgStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetOrgStatsCall(_callback);

    }

    /**
     * Get organization statistics
     * 
     * @return EnterpriseOrganizationOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public EnterpriseOrganizationOverview enterpriseAdminGetOrgStats() throws ApiException {
        ApiResponse<EnterpriseOrganizationOverview> localVarResp = enterpriseAdminGetOrgStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get organization statistics
     * 
     * @return ApiResponse&lt;EnterpriseOrganizationOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public ApiResponse<EnterpriseOrganizationOverview> enterpriseAdminGetOrgStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetOrgStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseOrganizationOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetOrgStatsAsync(final ApiCallback<EnterpriseOrganizationOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetOrgStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseOrganizationOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPagesStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPagesStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPagesStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetPagesStatsCall(_callback);

    }

    /**
     * Get pages statistics
     * 
     * @return EnterprisePageOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public EnterprisePageOverview enterpriseAdminGetPagesStats() throws ApiException {
        ApiResponse<EnterprisePageOverview> localVarResp = enterpriseAdminGetPagesStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get pages statistics
     * 
     * @return ApiResponse&lt;EnterprisePageOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public ApiResponse<EnterprisePageOverview> enterpriseAdminGetPagesStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPagesStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterprisePageOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pages statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPagesStatsAsync(final ApiCallback<EnterprisePageOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPagesStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterprisePageOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveEnvironment
     * @param preReceiveEnvironmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminGetPreReceiveEnvironment(Async)");
        }

        return enterpriseAdminGetPreReceiveEnvironmentCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Get a pre-receive environment
     * 
     * @param preReceiveEnvironmentId  (required)
     * @return PreReceiveEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironment enterpriseAdminGetPreReceiveEnvironment(Integer preReceiveEnvironmentId) throws ApiException {
        ApiResponse<PreReceiveEnvironment> localVarResp = enterpriseAdminGetPreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive environment
     * 
     * @param preReceiveEnvironmentId  (required)
     * @return ApiResponse&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironment> enterpriseAdminGetPreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive environment (asynchronously)
     * 
     * @param preReceiveEnvironmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, final ApiCallback<PreReceiveEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveHook
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveHookValidateBeforeCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHook(Async)");
        }

        return enterpriseAdminGetPreReceiveHookCall(preReceiveHookId, _callback);

    }

    /**
     * Get a pre-receive hook
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return PreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public PreReceiveHook enterpriseAdminGetPreReceiveHook(Integer preReceiveHookId) throws ApiException {
        ApiResponse<PreReceiveHook> localVarResp = enterpriseAdminGetPreReceiveHookWithHttpInfo(preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive hook
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return ApiResponse&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public ApiResponse<PreReceiveHook> enterpriseAdminGetPreReceiveHookWithHttpInfo(Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookValidateBeforeCall(preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive hook (asynchronously)
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookAsync(Integer preReceiveHookId, final ApiCallback<PreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookValidateBeforeCall(preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveHookForOrg
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForOrgCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveHookForOrgValidateBeforeCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminGetPreReceiveHookForOrg(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHookForOrg(Async)");
        }

        return enterpriseAdminGetPreReceiveHookForOrgCall(org, preReceiveHookId, _callback);

    }

    /**
     * Get a pre-receive hook for an organization
     * 
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return OrgPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public OrgPreReceiveHook enterpriseAdminGetPreReceiveHookForOrg(String org, Integer preReceiveHookId) throws ApiException {
        ApiResponse<OrgPreReceiveHook> localVarResp = enterpriseAdminGetPreReceiveHookForOrgWithHttpInfo(org, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive hook for an organization
     * 
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return ApiResponse&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public ApiResponse<OrgPreReceiveHook> enterpriseAdminGetPreReceiveHookForOrgWithHttpInfo(String org, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForOrgValidateBeforeCall(org, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive hook for an organization (asynchronously)
     * 
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForOrgAsync(String org, Integer preReceiveHookId, final ApiCallback<OrgPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForOrgValidateBeforeCall(org, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveHookForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForRepoCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveHookForRepoValidateBeforeCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminGetPreReceiveHookForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminGetPreReceiveHookForRepo(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHookForRepo(Async)");
        }

        return enterpriseAdminGetPreReceiveHookForRepoCall(owner, repo, preReceiveHookId, _callback);

    }

    /**
     * Get a pre-receive hook for a repository
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return RepositoryPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public RepositoryPreReceiveHook enterpriseAdminGetPreReceiveHookForRepo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        ApiResponse<RepositoryPreReceiveHook> localVarResp = enterpriseAdminGetPreReceiveHookForRepoWithHttpInfo(owner, repo, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive hook for a repository
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return ApiResponse&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public ApiResponse<RepositoryPreReceiveHook> enterpriseAdminGetPreReceiveHookForRepoWithHttpInfo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForRepoValidateBeforeCall(owner, repo, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive hook for a repository (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForRepoAsync(String owner, String repo, Integer preReceiveHookId, final ApiCallback<RepositoryPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForRepoValidateBeforeCall(owner, repo, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPullRequestStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPullRequestStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/pulls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPullRequestStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetPullRequestStatsCall(_callback);

    }

    /**
     * Get pull request statistics
     * 
     * @return EnterprisePullRequestOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public EnterprisePullRequestOverview enterpriseAdminGetPullRequestStats() throws ApiException {
        ApiResponse<EnterprisePullRequestOverview> localVarResp = enterpriseAdminGetPullRequestStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get pull request statistics
     * 
     * @return ApiResponse&lt;EnterprisePullRequestOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public ApiResponse<EnterprisePullRequestOverview> enterpriseAdminGetPullRequestStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPullRequestStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterprisePullRequestOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pull request statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPullRequestStatsAsync(final ApiCallback<EnterprisePullRequestOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPullRequestStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterprisePullRequestOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetRepoStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetRepoStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/repos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetRepoStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetRepoStatsCall(_callback);

    }

    /**
     * Get repository statistics
     * 
     * @return EnterpriseRepositoryOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public EnterpriseRepositoryOverview enterpriseAdminGetRepoStats() throws ApiException {
        ApiResponse<EnterpriseRepositoryOverview> localVarResp = enterpriseAdminGetRepoStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get repository statistics
     * 
     * @return ApiResponse&lt;EnterpriseRepositoryOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public ApiResponse<EnterpriseRepositoryOverview> enterpriseAdminGetRepoStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetRepoStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseRepositoryOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetRepoStatsAsync(final ApiCallback<EnterpriseRepositoryOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetRepoStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseRepositoryOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetSettingsCall(_callback);

    }

    /**
     * Get settings
     * 
     * @return EnterpriseSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public EnterpriseSettings enterpriseAdminGetSettings() throws ApiException {
        ApiResponse<EnterpriseSettings> localVarResp = enterpriseAdminGetSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get settings
     * 
     * @return ApiResponse&lt;EnterpriseSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public ApiResponse<EnterpriseSettings> enterpriseAdminGetSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get settings (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSettingsAsync(final ApiCallback<EnterpriseSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetUserStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetUserStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetUserStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetUserStatsCall(_callback);

    }

    /**
     * Get users statistics
     * 
     * @return EnterpriseUserOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public EnterpriseUserOverview enterpriseAdminGetUserStats() throws ApiException {
        ApiResponse<EnterpriseUserOverview> localVarResp = enterpriseAdminGetUserStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get users statistics
     * 
     * @return ApiResponse&lt;EnterpriseUserOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public ApiResponse<EnterpriseUserOverview> enterpriseAdminGetUserStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetUserStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseUserOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetUserStatsAsync(final ApiCallback<EnterpriseUserOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetUserStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseUserOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListGlobalWebhooks
     * @param accept This API is under preview and subject to change. (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListGlobalWebhooksCall(String accept, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListGlobalWebhooksValidateBeforeCall(String accept, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling enterpriseAdminListGlobalWebhooks(Async)");
        }

        return enterpriseAdminListGlobalWebhooksCall(accept, perPage, page, _callback);

    }

    /**
     * List global webhooks
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;GlobalHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public List<GlobalHook> enterpriseAdminListGlobalWebhooks(String accept, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<GlobalHook>> localVarResp = enterpriseAdminListGlobalWebhooksWithHttpInfo(accept, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List global webhooks
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;GlobalHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public ApiResponse<List<GlobalHook>> enterpriseAdminListGlobalWebhooksWithHttpInfo(String accept, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListGlobalWebhooksValidateBeforeCall(accept, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<GlobalHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List global webhooks (asynchronously)
     * 
     * @param accept This API is under preview and subject to change. (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListGlobalWebhooksAsync(String accept, Integer perPage, Integer page, final ApiCallback<List<GlobalHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListGlobalWebhooksValidateBeforeCall(accept, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<GlobalHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPersonalAccessTokens
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPersonalAccessTokensCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPersonalAccessTokensValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPersonalAccessTokensCall(perPage, page, _callback);

    }

    /**
     * List personal access tokens
     * Lists personal access tokens for all users, including admin users.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Authorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public List<Authorization> enterpriseAdminListPersonalAccessTokens(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Authorization>> localVarResp = enterpriseAdminListPersonalAccessTokensWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List personal access tokens
     * Lists personal access tokens for all users, including admin users.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Authorization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public ApiResponse<List<Authorization>> enterpriseAdminListPersonalAccessTokensWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPersonalAccessTokensValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Authorization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List personal access tokens (asynchronously)
     * Lists personal access tokens for all users, including admin users.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPersonalAccessTokensAsync(Integer perPage, Integer page, final ApiCallback<List<Authorization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPersonalAccessTokensValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Authorization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveEnvironments
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveEnvironmentsCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveEnvironmentsValidateBeforeCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPreReceiveEnvironmentsCall(perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive environments
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return List&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public List<PreReceiveEnvironment> enterpriseAdminListPreReceiveEnvironments(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<PreReceiveEnvironment>> localVarResp = enterpriseAdminListPreReceiveEnvironmentsWithHttpInfo(perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive environments
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return ApiResponse&lt;List&lt;PreReceiveEnvironment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public ApiResponse<List<PreReceiveEnvironment>> enterpriseAdminListPreReceiveEnvironmentsWithHttpInfo(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveEnvironmentsValidateBeforeCall(perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<PreReceiveEnvironment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive environments (asynchronously)
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveEnvironmentsAsync(Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<PreReceiveEnvironment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveEnvironmentsValidateBeforeCall(perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<PreReceiveEnvironment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveHooks
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to) or &#x60;name&#x60;. (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveHooksValidateBeforeCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPreReceiveHooksCall(perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive hooks
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to) or &#x60;name&#x60;. (optional, default to created)
     * @return List&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public List<PreReceiveHook> enterpriseAdminListPreReceiveHooks(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<PreReceiveHook>> localVarResp = enterpriseAdminListPreReceiveHooksWithHttpInfo(perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive hooks
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to) or &#x60;name&#x60;. (optional, default to created)
     * @return ApiResponse&lt;List&lt;PreReceiveHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public ApiResponse<List<PreReceiveHook>> enterpriseAdminListPreReceiveHooksWithHttpInfo(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksValidateBeforeCall(perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<PreReceiveHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive hooks (asynchronously)
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to) or &#x60;name&#x60;. (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksAsync(Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<PreReceiveHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksValidateBeforeCall(perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<PreReceiveHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveHooksForOrg
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForOrgCall(String org, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveHooksForOrgValidateBeforeCall(String org, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminListPreReceiveHooksForOrg(Async)");
        }

        return enterpriseAdminListPreReceiveHooksForOrgCall(org, perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive hooks for an organization
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @return List&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public List<OrgPreReceiveHook> enterpriseAdminListPreReceiveHooksForOrg(String org, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<OrgPreReceiveHook>> localVarResp = enterpriseAdminListPreReceiveHooksForOrgWithHttpInfo(org, perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive hooks for an organization
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @return ApiResponse&lt;List&lt;OrgPreReceiveHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public ApiResponse<List<OrgPreReceiveHook>> enterpriseAdminListPreReceiveHooksForOrgWithHttpInfo(String org, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForOrgValidateBeforeCall(org, perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<OrgPreReceiveHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive hooks for an organization (asynchronously)
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForOrgAsync(String org, Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<OrgPreReceiveHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForOrgValidateBeforeCall(org, perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OrgPreReceiveHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveHooksForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForRepoCall(String owner, String repo, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveHooksForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminListPreReceiveHooksForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminListPreReceiveHooksForRepo(Async)");
        }

        return enterpriseAdminListPreReceiveHooksForRepoCall(owner, repo, perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive hooks for a repository
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return List&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public List<RepositoryPreReceiveHook> enterpriseAdminListPreReceiveHooksForRepo(String owner, String repo, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<RepositoryPreReceiveHook>> localVarResp = enterpriseAdminListPreReceiveHooksForRepoWithHttpInfo(owner, repo, perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive hooks for a repository
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return ApiResponse&lt;List&lt;RepositoryPreReceiveHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public ApiResponse<List<RepositoryPreReceiveHook>> enterpriseAdminListPreReceiveHooksForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForRepoValidateBeforeCall(owner, repo, perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<RepositoryPreReceiveHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive hooks for a repository (asynchronously)
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForRepoAsync(String owner, String repo, Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<RepositoryPreReceiveHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForRepoValidateBeforeCall(owner, repo, perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoryPreReceiveHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPublicKeys
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPublicKeysCall(Integer perPage, Integer page, String direction, String sort, String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPublicKeysValidateBeforeCall(Integer perPage, Integer page, String direction, String sort, String since, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPublicKeysCall(perPage, page, direction, sort, since, _callback);

    }

    /**
     * List public keys
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @return List&lt;PublicKeyFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public List<PublicKeyFull> enterpriseAdminListPublicKeys(Integer perPage, Integer page, String direction, String sort, String since) throws ApiException {
        ApiResponse<List<PublicKeyFull>> localVarResp = enterpriseAdminListPublicKeysWithHttpInfo(perPage, page, direction, sort, since);
        return localVarResp.getData();
    }

    /**
     * List public keys
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @return ApiResponse&lt;List&lt;PublicKeyFull&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public ApiResponse<List<PublicKeyFull>> enterpriseAdminListPublicKeysWithHttpInfo(Integer perPage, Integer page, String direction, String sort, String since) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPublicKeysValidateBeforeCall(perPage, page, direction, sort, since, null);
        Type localVarReturnType = new TypeToken<List<PublicKeyFull>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public keys (asynchronously)
     * 
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPublicKeysAsync(Integer perPage, Integer page, String direction, String sort, String since, final ApiCallback<List<PublicKeyFull>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPublicKeysValidateBeforeCall(perPage, page, direction, sort, since, _callback);
        Type localVarReturnType = new TypeToken<List<PublicKeyFull>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminPingGlobalWebhook
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPingGlobalWebhookCall(String accept, Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}/pings"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminPingGlobalWebhookValidateBeforeCall(String accept, Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling enterpriseAdminPingGlobalWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminPingGlobalWebhook(Async)");
        }

        return enterpriseAdminPingGlobalWebhookCall(accept, hookId, _callback);

    }

    /**
     * Ping a global webhook
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.20/webhooks/#ping-event) to be sent to the webhook.
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public void enterpriseAdminPingGlobalWebhook(String accept, Integer hookId) throws ApiException {
        enterpriseAdminPingGlobalWebhookWithHttpInfo(accept, hookId);
    }

    /**
     * Ping a global webhook
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.20/webhooks/#ping-event) to be sent to the webhook.
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminPingGlobalWebhookWithHttpInfo(String accept, Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminPingGlobalWebhookValidateBeforeCall(accept, hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Ping a global webhook (asynchronously)
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.20/webhooks/#ping-event) to be sent to the webhook.
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPingGlobalWebhookAsync(String accept, Integer hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminPingGlobalWebhookValidateBeforeCall(accept, hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminPromoteUserToBeSiteAdministrator
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPromoteUserToBeSiteAdministratorCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/site_admin"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminPromoteUserToBeSiteAdministratorValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminPromoteUserToBeSiteAdministrator(Async)");
        }

        return enterpriseAdminPromoteUserToBeSiteAdministratorCall(username, _callback);

    }

    /**
     * Promote a user to be a site administrator
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public void enterpriseAdminPromoteUserToBeSiteAdministrator(String username) throws ApiException {
        enterpriseAdminPromoteUserToBeSiteAdministratorWithHttpInfo(username);
    }

    /**
     * Promote a user to be a site administrator
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminPromoteUserToBeSiteAdministratorWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminPromoteUserToBeSiteAdministratorValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Promote a user to be a site administrator (asynchronously)
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPromoteUserToBeSiteAdministratorAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminPromoteUserToBeSiteAdministratorValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemoveAuthorizedSshKey
     * @param authorizedKey The public SSH key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAuthorizedSshKeyCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings/authorized-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorizedKey != null) {
            localVarFormParams.put("authorized_key", authorizedKey);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemoveAuthorizedSshKeyValidateBeforeCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizedKey' is set
        if (authorizedKey == null) {
            throw new ApiException("Missing the required parameter 'authorizedKey' when calling enterpriseAdminRemoveAuthorizedSshKey(Async)");
        }

        return enterpriseAdminRemoveAuthorizedSshKeyCall(authorizedKey, _callback);

    }

    /**
     * Remove an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return List&lt;SshKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public List<SshKey> enterpriseAdminRemoveAuthorizedSshKey(String authorizedKey) throws ApiException {
        ApiResponse<List<SshKey>> localVarResp = enterpriseAdminRemoveAuthorizedSshKeyWithHttpInfo(authorizedKey);
        return localVarResp.getData();
    }

    /**
     * Remove an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return ApiResponse&lt;List&lt;SshKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public ApiResponse<List<SshKey>> enterpriseAdminRemoveAuthorizedSshKeyWithHttpInfo(String authorizedKey) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemoveAuthorizedSshKeyValidateBeforeCall(authorizedKey, null);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an authorized SSH key (asynchronously)
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAuthorizedSshKeyAsync(String authorizedKey, final ApiCallback<List<SshKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemoveAuthorizedSshKeyValidateBeforeCall(authorizedKey, _callback);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemovePreReceiveHookEnforcementForOrg
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForOrgCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForOrgValidateBeforeCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminRemovePreReceiveHookEnforcementForOrg(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminRemovePreReceiveHookEnforcementForOrg(Async)");
        }

        return enterpriseAdminRemovePreReceiveHookEnforcementForOrgCall(org, preReceiveHookId, _callback);

    }

    /**
     * Remove pre-receive hook enforcement for an organization
     * Removes any overrides for this hook at the org level for this org.
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return OrgPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public OrgPreReceiveHook enterpriseAdminRemovePreReceiveHookEnforcementForOrg(String org, Integer preReceiveHookId) throws ApiException {
        ApiResponse<OrgPreReceiveHook> localVarResp = enterpriseAdminRemovePreReceiveHookEnforcementForOrgWithHttpInfo(org, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Remove pre-receive hook enforcement for an organization
     * Removes any overrides for this hook at the org level for this org.
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return ApiResponse&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public ApiResponse<OrgPreReceiveHook> enterpriseAdminRemovePreReceiveHookEnforcementForOrgWithHttpInfo(String org, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove pre-receive hook enforcement for an organization (asynchronously)
     * Removes any overrides for this hook at the org level for this org.
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForOrgAsync(String org, Integer preReceiveHookId, final ApiCallback<OrgPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemovePreReceiveHookEnforcementForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForRepoCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForRepoValidateBeforeCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo(Async)");
        }

        return enterpriseAdminRemovePreReceiveHookEnforcementForRepoCall(owner, repo, preReceiveHookId, _callback);

    }

    /**
     * Remove pre-receive hook enforcement for a repository
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return RepositoryPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public RepositoryPreReceiveHook enterpriseAdminRemovePreReceiveHookEnforcementForRepo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        ApiResponse<RepositoryPreReceiveHook> localVarResp = enterpriseAdminRemovePreReceiveHookEnforcementForRepoWithHttpInfo(owner, repo, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Remove pre-receive hook enforcement for a repository
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @return ApiResponse&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public ApiResponse<RepositoryPreReceiveHook> enterpriseAdminRemovePreReceiveHookEnforcementForRepoWithHttpInfo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove pre-receive hook enforcement for a repository (asynchronously)
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForRepoAsync(String owner, String repo, Integer preReceiveHookId, final ApiCallback<RepositoryPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetSettings
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSettingsCall(String settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (settings != null) {
            localVarFormParams.put("settings", settings);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetSettingsValidateBeforeCall(String settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling enterpriseAdminSetSettings(Async)");
        }

        return enterpriseAdminSetSettingsCall(settings, _callback);

    }

    /**
     * Set settings
     * For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings).  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public void enterpriseAdminSetSettings(String settings) throws ApiException {
        enterpriseAdminSetSettingsWithHttpInfo(settings);
    }

    /**
     * Set settings
     * For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings).  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSetSettingsWithHttpInfo(String settings) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetSettingsValidateBeforeCall(settings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set settings (asynchronously)
     * For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings).  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-settings). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSettingsAsync(String settings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetSettingsValidateBeforeCall(settings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminStartConfigurationProcess
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartConfigurationProcessCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/configure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminStartConfigurationProcessValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminStartConfigurationProcessCall(_callback);

    }

    /**
     * Start a configuration process
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public void enterpriseAdminStartConfigurationProcess() throws ApiException {
        enterpriseAdminStartConfigurationProcessWithHttpInfo();
    }

    /**
     * Start a configuration process
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminStartConfigurationProcessWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminStartConfigurationProcessValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start a configuration process (asynchronously)
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartConfigurationProcessAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminStartConfigurationProcessValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminStartPreReceiveEnvironmentDownload
     * @param preReceiveEnvironmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartPreReceiveEnvironmentDownloadCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminStartPreReceiveEnvironmentDownloadValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminStartPreReceiveEnvironmentDownload(Async)");
        }

        return enterpriseAdminStartPreReceiveEnvironmentDownloadCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Start a pre-receive environment download
     * Triggers a new download of the environment tarball from the environment&#39;s &#x60;image_url&#x60;. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     * @param preReceiveEnvironmentId  (required)
     * @return PreReceiveEnvironmentDownloadStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public PreReceiveEnvironmentDownloadStatus enterpriseAdminStartPreReceiveEnvironmentDownload(Integer preReceiveEnvironmentId) throws ApiException {
        ApiResponse<PreReceiveEnvironmentDownloadStatus> localVarResp = enterpriseAdminStartPreReceiveEnvironmentDownloadWithHttpInfo(preReceiveEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Start a pre-receive environment download
     * Triggers a new download of the environment tarball from the environment&#39;s &#x60;image_url&#x60;. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     * @param preReceiveEnvironmentId  (required)
     * @return ApiResponse&lt;PreReceiveEnvironmentDownloadStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironmentDownloadStatus> enterpriseAdminStartPreReceiveEnvironmentDownloadWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminStartPreReceiveEnvironmentDownloadValidateBeforeCall(preReceiveEnvironmentId, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a pre-receive environment download (asynchronously)
     * Triggers a new download of the environment tarball from the environment&#39;s &#x60;image_url&#x60;. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     * @param preReceiveEnvironmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartPreReceiveEnvironmentDownloadAsync(Integer preReceiveEnvironmentId, final ApiCallback<PreReceiveEnvironmentDownloadStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminStartPreReceiveEnvironmentDownloadValidateBeforeCall(preReceiveEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSuspendUser
     * @param username  (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSuspendUserCall(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSuspendUserRequest;

        // create path and map variables
        String localVarPath = "/users/{username}/suspended"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSuspendUserValidateBeforeCall(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminSuspendUser(Async)");
        }

        return enterpriseAdminSuspendUserCall(username, enterpriseAdminSuspendUserRequest, _callback);

    }

    /**
     * Suspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a &#x60;403&#x60; response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username  (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public void enterpriseAdminSuspendUser(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest) throws ApiException {
        enterpriseAdminSuspendUserWithHttpInfo(username, enterpriseAdminSuspendUserRequest);
    }

    /**
     * Suspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a &#x60;403&#x60; response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username  (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSuspendUserWithHttpInfo(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSuspendUserValidateBeforeCall(username, enterpriseAdminSuspendUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suspend a user (asynchronously)
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a &#x60;403&#x60; response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username  (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSuspendUserAsync(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSuspendUserValidateBeforeCall(username, enterpriseAdminSuspendUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSyncLdapMappingForTeam
     * @param teamId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForTeamCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/ldap/teams/{team_id}/sync"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSyncLdapMappingForTeamValidateBeforeCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling enterpriseAdminSyncLdapMappingForTeam(Async)");
        }

        return enterpriseAdminSyncLdapMappingForTeamCall(teamId, _callback);

    }

    /**
     * Sync LDAP mapping for a team
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param teamId  (required)
     * @return EnterpriseAdminSyncLdapMappingForTeam201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public EnterpriseAdminSyncLdapMappingForTeam201Response enterpriseAdminSyncLdapMappingForTeam(Integer teamId) throws ApiException {
        ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> localVarResp = enterpriseAdminSyncLdapMappingForTeamWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Sync LDAP mapping for a team
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param teamId  (required)
     * @return ApiResponse&lt;EnterpriseAdminSyncLdapMappingForTeam201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> enterpriseAdminSyncLdapMappingForTeamWithHttpInfo(Integer teamId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForTeamValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync LDAP mapping for a team (asynchronously)
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param teamId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForTeamAsync(Integer teamId, final ApiCallback<EnterpriseAdminSyncLdapMappingForTeam201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForTeamValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSyncLdapMappingForUser
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/ldap/users/{username}/sync"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSyncLdapMappingForUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminSyncLdapMappingForUser(Async)");
        }

        return enterpriseAdminSyncLdapMappingForUserCall(username, _callback);

    }

    /**
     * Sync LDAP mapping for a user
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param username  (required)
     * @return EnterpriseAdminSyncLdapMappingForTeam201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public EnterpriseAdminSyncLdapMappingForTeam201Response enterpriseAdminSyncLdapMappingForUser(String username) throws ApiException {
        ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> localVarResp = enterpriseAdminSyncLdapMappingForUserWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Sync LDAP mapping for a user
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param username  (required)
     * @return ApiResponse&lt;EnterpriseAdminSyncLdapMappingForTeam201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> enterpriseAdminSyncLdapMappingForUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForUserValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync LDAP mapping for a user (asynchronously)
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForUserAsync(String username, final ApiCallback<EnterpriseAdminSyncLdapMappingForTeam201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForUserValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUnsuspendUser
     * @param username  (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUnsuspendUserCall(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUnsuspendUserRequest;

        // create path and map variables
        String localVarPath = "/users/{username}/suspended"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUnsuspendUserValidateBeforeCall(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminUnsuspendUser(Async)");
        }

        return enterpriseAdminUnsuspendUserCall(username, enterpriseAdminUnsuspendUserRequest, _callback);

    }

    /**
     * Unsuspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a &#x60;403&#x60; response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * @param username  (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public void enterpriseAdminUnsuspendUser(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest) throws ApiException {
        enterpriseAdminUnsuspendUserWithHttpInfo(username, enterpriseAdminUnsuspendUserRequest);
    }

    /**
     * Unsuspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a &#x60;403&#x60; response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * @param username  (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminUnsuspendUserWithHttpInfo(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUnsuspendUserValidateBeforeCall(username, enterpriseAdminUnsuspendUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unsuspend a user (asynchronously)
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a &#x60;403&#x60; response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * @param username  (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUnsuspendUserAsync(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUnsuspendUserValidateBeforeCall(username, enterpriseAdminUnsuspendUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateGlobalWebhook
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateGlobalWebhookCall(String accept, Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateGlobalWebhookRequest;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateGlobalWebhookValidateBeforeCall(String accept, Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling enterpriseAdminUpdateGlobalWebhook(Async)");
        }

        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminUpdateGlobalWebhook(Async)");
        }

        return enterpriseAdminUpdateGlobalWebhookCall(accept, hookId, enterpriseAdminUpdateGlobalWebhookRequest, _callback);

    }

    /**
     * Update a global webhook
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (optional)
     * @return GlobalHook2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public GlobalHook2 enterpriseAdminUpdateGlobalWebhook(String accept, Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest) throws ApiException {
        ApiResponse<GlobalHook2> localVarResp = enterpriseAdminUpdateGlobalWebhookWithHttpInfo(accept, hookId, enterpriseAdminUpdateGlobalWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Update a global webhook
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (optional)
     * @return ApiResponse&lt;GlobalHook2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public ApiResponse<GlobalHook2> enterpriseAdminUpdateGlobalWebhookWithHttpInfo(String accept, Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateGlobalWebhookValidateBeforeCall(accept, hookId, enterpriseAdminUpdateGlobalWebhookRequest, null);
        Type localVarReturnType = new TypeToken<GlobalHook2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a global webhook (asynchronously)
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * @param accept This API is under preview and subject to change. (required)
     * @param hookId  (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateGlobalWebhookAsync(String accept, Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest, final ApiCallback<GlobalHook2> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateGlobalWebhookValidateBeforeCall(accept, hookId, enterpriseAdminUpdateGlobalWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<GlobalHook2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateLdapMappingForTeam
     * @param teamId  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForTeamCall(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateLdapMappingForTeamRequest;

        // create path and map variables
        String localVarPath = "/admin/ldap/teams/{team_id}/mapping"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateLdapMappingForTeamValidateBeforeCall(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling enterpriseAdminUpdateLdapMappingForTeam(Async)");
        }

        return enterpriseAdminUpdateLdapMappingForTeamCall(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);

    }

    /**
     * Update LDAP mapping for a team
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.  You can also update the LDAP mapping of a child team.
     * @param teamId  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @return LdapMappingTeam
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public LdapMappingTeam enterpriseAdminUpdateLdapMappingForTeam(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        ApiResponse<LdapMappingTeam> localVarResp = enterpriseAdminUpdateLdapMappingForTeamWithHttpInfo(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest);
        return localVarResp.getData();
    }

    /**
     * Update LDAP mapping for a team
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.  You can also update the LDAP mapping of a child team.
     * @param teamId  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @return ApiResponse&lt;LdapMappingTeam&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public ApiResponse<LdapMappingTeam> enterpriseAdminUpdateLdapMappingForTeamWithHttpInfo(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForTeamValidateBeforeCall(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest, null);
        Type localVarReturnType = new TypeToken<LdapMappingTeam>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update LDAP mapping for a team (asynchronously)
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@2.20/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.  You can also update the LDAP mapping of a child team.
     * @param teamId  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForTeamAsync(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback<LdapMappingTeam> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForTeamValidateBeforeCall(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<LdapMappingTeam>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateLdapMappingForUser
     * @param username  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForUserCall(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateLdapMappingForTeamRequest;

        // create path and map variables
        String localVarPath = "/admin/ldap/users/{username}/mapping"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateLdapMappingForUserValidateBeforeCall(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminUpdateLdapMappingForUser(Async)");
        }

        return enterpriseAdminUpdateLdapMappingForUserCall(username, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);

    }

    /**
     * Update LDAP mapping for a user
     * 
     * @param username  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @return LdapMappingUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public LdapMappingUser enterpriseAdminUpdateLdapMappingForUser(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        ApiResponse<LdapMappingUser> localVarResp = enterpriseAdminUpdateLdapMappingForUserWithHttpInfo(username, enterpriseAdminUpdateLdapMappingForTeamRequest);
        return localVarResp.getData();
    }

    /**
     * Update LDAP mapping for a user
     * 
     * @param username  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @return ApiResponse&lt;LdapMappingUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public ApiResponse<LdapMappingUser> enterpriseAdminUpdateLdapMappingForUserWithHttpInfo(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForUserValidateBeforeCall(username, enterpriseAdminUpdateLdapMappingForTeamRequest, null);
        Type localVarReturnType = new TypeToken<LdapMappingUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update LDAP mapping for a user (asynchronously)
     * 
     * @param username  (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForUserAsync(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback<LdapMappingUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForUserValidateBeforeCall(username, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<LdapMappingUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateOrgName
     * @param org  (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateOrgNameCall(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateOrgNameRequest;

        // create path and map variables
        String localVarPath = "/admin/organizations/{org}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateOrgNameValidateBeforeCall(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminUpdateOrgName(Async)");
        }

        // verify the required parameter 'enterpriseAdminUpdateOrgNameRequest' is set
        if (enterpriseAdminUpdateOrgNameRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminUpdateOrgNameRequest' when calling enterpriseAdminUpdateOrgName(Async)");
        }

        return enterpriseAdminUpdateOrgNameCall(org, enterpriseAdminUpdateOrgNameRequest, _callback);

    }

    /**
     * Update an organization name
     * 
     * @param org  (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @return EnterpriseAdminUpdateOrgName202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public EnterpriseAdminUpdateOrgName202Response enterpriseAdminUpdateOrgName(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest) throws ApiException {
        ApiResponse<EnterpriseAdminUpdateOrgName202Response> localVarResp = enterpriseAdminUpdateOrgNameWithHttpInfo(org, enterpriseAdminUpdateOrgNameRequest);
        return localVarResp.getData();
    }

    /**
     * Update an organization name
     * 
     * @param org  (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @return ApiResponse&lt;EnterpriseAdminUpdateOrgName202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public ApiResponse<EnterpriseAdminUpdateOrgName202Response> enterpriseAdminUpdateOrgNameWithHttpInfo(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateOrgNameValidateBeforeCall(org, enterpriseAdminUpdateOrgNameRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an organization name (asynchronously)
     * 
     * @param org  (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateOrgNameAsync(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest, final ApiCallback<EnterpriseAdminUpdateOrgName202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateOrgNameValidateBeforeCall(org, enterpriseAdminUpdateOrgNameRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveEnvironment
     * @param preReceiveEnvironmentId  (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveEnvironmentRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminUpdatePreReceiveEnvironment(Async)");
        }

        return enterpriseAdminUpdatePreReceiveEnvironmentCall(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest, _callback);

    }

    /**
     * Update a pre-receive environment
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a &#x60;422 Unprocessable Entity&#x60; response.
     * @param preReceiveEnvironmentId  (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @return PreReceiveEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironment enterpriseAdminUpdatePreReceiveEnvironment(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest) throws ApiException {
        ApiResponse<PreReceiveEnvironment> localVarResp = enterpriseAdminUpdatePreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest);
        return localVarResp.getData();
    }

    /**
     * Update a pre-receive environment
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a &#x60;422 Unprocessable Entity&#x60; response.
     * @param preReceiveEnvironmentId  (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @return ApiResponse&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironment> enterpriseAdminUpdatePreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a pre-receive environment (asynchronously)
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a &#x60;422 Unprocessable Entity&#x60; response.
     * @param preReceiveEnvironmentId  (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest, final ApiCallback<PreReceiveEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveHook
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookCall(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveHookRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveHookValidateBeforeCall(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHook(Async)");
        }

        return enterpriseAdminUpdatePreReceiveHookCall(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest, _callback);

    }

    /**
     * Update a pre-receive hook
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @return PreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public PreReceiveHook enterpriseAdminUpdatePreReceiveHook(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest) throws ApiException {
        ApiResponse<PreReceiveHook> localVarResp = enterpriseAdminUpdatePreReceiveHookWithHttpInfo(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest);
        return localVarResp.getData();
    }

    /**
     * Update a pre-receive hook
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @return ApiResponse&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public ApiResponse<PreReceiveHook> enterpriseAdminUpdatePreReceiveHookWithHttpInfo(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookValidateBeforeCall(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a pre-receive hook (asynchronously)
     * 
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookAsync(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest, final ApiCallback<PreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookValidateBeforeCall(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveHookEnforcementForOrg
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForOrgCall(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForOrgValidateBeforeCall(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(Async)");
        }

        return enterpriseAdminUpdatePreReceiveHookEnforcementForOrgCall(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, _callback);

    }

    /**
     * Update pre-receive hook enforcement for an organization
     * For pre-receive hooks which are allowed to be configured at the org level, you can set &#x60;enforcement&#x60; and &#x60;allow_downstream_configuration&#x60;
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @return OrgPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public OrgPreReceiveHook enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest) throws ApiException {
        ApiResponse<OrgPreReceiveHook> localVarResp = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgWithHttpInfo(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update pre-receive hook enforcement for an organization
     * For pre-receive hooks which are allowed to be configured at the org level, you can set &#x60;enforcement&#x60; and &#x60;allow_downstream_configuration&#x60;
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @return ApiResponse&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public ApiResponse<OrgPreReceiveHook> enterpriseAdminUpdatePreReceiveHookEnforcementForOrgWithHttpInfo(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, null);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pre-receive hook enforcement for an organization (asynchronously)
     * For pre-receive hooks which are allowed to be configured at the org level, you can set &#x60;enforcement&#x60; and &#x60;allow_downstream_configuration&#x60;
     * @param org  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForOrgAsync(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, final ApiCallback<OrgPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveHookEnforcementForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForRepoCall(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForRepoValidateBeforeCall(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(Async)");
        }

        return enterpriseAdminUpdatePreReceiveHookEnforcementForRepoCall(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, _callback);

    }

    /**
     * Update pre-receive hook enforcement for a repository
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set &#x60;enforcement&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @return RepositoryPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public RepositoryPreReceiveHook enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest) throws ApiException {
        ApiResponse<RepositoryPreReceiveHook> localVarResp = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoWithHttpInfo(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest);
        return localVarResp.getData();
    }

    /**
     * Update pre-receive hook enforcement for a repository
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set &#x60;enforcement&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @return ApiResponse&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public ApiResponse<RepositoryPreReceiveHook> enterpriseAdminUpdatePreReceiveHookEnforcementForRepoWithHttpInfo(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, null);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pre-receive hook enforcement for a repository (asynchronously)
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set &#x60;enforcement&#x60;
     * @param owner  (required)
     * @param repo  (required)
     * @param preReceiveHookId pre_receive_hook_id parameter (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForRepoAsync(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, final ApiCallback<RepositoryPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, _callback);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateUsernameForUser
     * @param username  (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateUsernameForUserCall(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateUsernameForUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateUsernameForUserValidateBeforeCall(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminUpdateUsernameForUser(Async)");
        }

        // verify the required parameter 'enterpriseAdminUpdateUsernameForUserRequest' is set
        if (enterpriseAdminUpdateUsernameForUserRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminUpdateUsernameForUserRequest' when calling enterpriseAdminUpdateUsernameForUser(Async)");
        }

        return enterpriseAdminUpdateUsernameForUserCall(username, enterpriseAdminUpdateUsernameForUserRequest, _callback);

    }

    /**
     * Update the username for a user
     * 
     * @param username  (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @return EnterpriseAdminUpdateOrgName202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public EnterpriseAdminUpdateOrgName202Response enterpriseAdminUpdateUsernameForUser(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest) throws ApiException {
        ApiResponse<EnterpriseAdminUpdateOrgName202Response> localVarResp = enterpriseAdminUpdateUsernameForUserWithHttpInfo(username, enterpriseAdminUpdateUsernameForUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update the username for a user
     * 
     * @param username  (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @return ApiResponse&lt;EnterpriseAdminUpdateOrgName202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public ApiResponse<EnterpriseAdminUpdateOrgName202Response> enterpriseAdminUpdateUsernameForUserWithHttpInfo(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateUsernameForUserValidateBeforeCall(username, enterpriseAdminUpdateUsernameForUserRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the username for a user (asynchronously)
     * 
     * @param username  (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateUsernameForUserAsync(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest, final ApiCallback<EnterpriseAdminUpdateOrgName202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateUsernameForUserValidateBeforeCall(username, enterpriseAdminUpdateUsernameForUserRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpgradeLicense
     * @param license The content of your new _.ghl_ license file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpgradeLicenseCall(String license, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/upgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (license != null) {
            localVarFormParams.put("license", license);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpgradeLicenseValidateBeforeCall(String license, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminUpgradeLicenseCall(license, _callback);

    }

    /**
     * Upgrade a license
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param license The content of your new _.ghl_ license file. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public void enterpriseAdminUpgradeLicense(String license) throws ApiException {
        enterpriseAdminUpgradeLicenseWithHttpInfo(license);
    }

    /**
     * Upgrade a license
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param license The content of your new _.ghl_ license file. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminUpgradeLicenseWithHttpInfo(String license) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpgradeLicenseValidateBeforeCall(license, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upgrade a license (asynchronously)
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param license The content of your new _.ghl_ license file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpgradeLicenseAsync(String license, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpgradeLicenseValidateBeforeCall(license, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseStatsGistsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public okhttp3.Call enterpriseStatsGistsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/gists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseStatsGistsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseStatsGistsGetCall(_callback);

    }

    /**
     * Get gist statistics
     * 
     * @return EnterpriseGistOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public EnterpriseGistOverview enterpriseStatsGistsGet() throws ApiException {
        ApiResponse<EnterpriseGistOverview> localVarResp = enterpriseStatsGistsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get gist statistics
     * 
     * @return ApiResponse&lt;EnterpriseGistOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public ApiResponse<EnterpriseGistOverview> enterpriseStatsGistsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseStatsGistsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseGistOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get gist statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.20/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public okhttp3.Call enterpriseStatsGistsGetAsync(final ApiCallback<EnterpriseGistOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseStatsGistsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseGistOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
