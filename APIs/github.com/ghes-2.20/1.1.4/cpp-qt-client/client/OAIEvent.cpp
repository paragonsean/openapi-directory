/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_org.isSet()) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_repo.isSet()) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIActor OAIEvent::getActor() const {
    return m_actor;
}
void OAIEvent::setActor(const OAIActor &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIEvent::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIEvent::is_actor_Valid() const{
    return m_actor_isValid;
}

QDateTime OAIEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

OAIActor OAIEvent::getOrg() const {
    return m_org;
}
void OAIEvent::setOrg(const OAIActor &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIEvent::is_org_Set() const{
    return m_org_isSet;
}

bool OAIEvent::is_org_Valid() const{
    return m_org_isValid;
}

OAIEvent_payload OAIEvent::getPayload() const {
    return m_payload;
}
void OAIEvent::setPayload(const OAIEvent_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIEvent::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIEvent::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIEvent::isRPublic() const {
    return m_r_public;
}
void OAIEvent::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIEvent::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIEvent::is_r_public_Valid() const{
    return m_r_public_isValid;
}

OAIEvent_repo OAIEvent::getRepo() const {
    return m_repo;
}
void OAIEvent::setRepo(const OAIEvent_repo &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIEvent::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIEvent::is_repo_Valid() const{
    return m_repo_isValid;
}

QString OAIEvent::getType() const {
    return m_type;
}
void OAIEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actor_isValid && m_created_at_isValid && m_id_isValid && m_payload_isValid && m_r_public_isValid && m_repo_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
