/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssuesApi_H
#define OAI_OAIIssuesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity_list_public_events_503_response.h"
#include "OAIBasic_error.h"
#include "OAIIssue.h"
#include "OAIIssue_comment.h"
#include "OAIIssue_event.h"
#include "OAIIssue_event_for_issue.h"
#include "OAIIssue_simple.h"
#include "OAIIssues_add_assignees_request.h"
#include "OAIIssues_create_label_request.h"
#include "OAIIssues_create_milestone_request.h"
#include "OAIIssues_create_request.h"
#include "OAIIssues_lock_request.h"
#include "OAIIssues_remove_assignees_request.h"
#include "OAIIssues_set_labels_request.h"
#include "OAIIssues_update_comment_request.h"
#include "OAIIssues_update_label_request.h"
#include "OAIIssues_update_milestone_request.h"
#include "OAIIssues_update_request.h"
#include "OAILabel.h"
#include "OAIMilestone.h"
#include "OAISimple_user.h"
#include "OAITimeline_issue_events.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssuesApi : public QObject {
    Q_OBJECT

public:
    OAIIssuesApi(const int timeOut = 0);
    ~OAIIssuesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_issues_add_assignees_request OAIIssues_add_assignees_request [optional]
    */
    virtual void issues_addAssignees(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<OAIIssues_add_assignees_request> &oai_issues_add_assignees_request = ::OpenAPI::OptionalParam<OAIIssues_add_assignees_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_issues_set_labels_request OAIIssues_set_labels_request [optional]
    */
    virtual void issues_addLabels(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<OAIIssues_set_labels_request> &oai_issues_set_labels_request = ::OpenAPI::OptionalParam<OAIIssues_set_labels_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  assignee QString [required]
    */
    virtual void issues_checkUserCanBeAssigned(const QString &owner, const QString &repo, const QString &assignee);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_issues_create_request OAIIssues_create_request [required]
    */
    virtual void issues_create(const QString &owner, const QString &repo, const OAIIssues_create_request &oai_issues_create_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_issues_update_comment_request OAIIssues_update_comment_request [required]
    */
    virtual void issues_createComment(const QString &owner, const QString &repo, const qint32 &issue_number, const OAIIssues_update_comment_request &oai_issues_update_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_issues_create_label_request OAIIssues_create_label_request [required]
    */
    virtual void issues_createLabel(const QString &owner, const QString &repo, const OAIIssues_create_label_request &oai_issues_create_label_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_issues_create_milestone_request OAIIssues_create_milestone_request [required]
    */
    virtual void issues_createMilestone(const QString &owner, const QString &repo, const OAIIssues_create_milestone_request &oai_issues_create_milestone_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void issues_deleteComment(const QString &owner, const QString &repo, const qint32 &comment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    */
    virtual void issues_deleteLabel(const QString &owner, const QString &repo, const QString &name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  milestone_number qint32 [required]
    */
    virtual void issues_deleteMilestone(const QString &owner, const QString &repo, const qint32 &milestone_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    */
    virtual void issues_get(const QString &owner, const QString &repo, const qint32 &issue_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void issues_getComment(const QString &owner, const QString &repo, const qint32 &comment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  event_id qint32 [required]
    */
    virtual void issues_getEvent(const QString &owner, const QString &repo, const qint32 &event_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    */
    virtual void issues_getLabel(const QString &owner, const QString &repo, const QString &name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  milestone_number qint32 [required]
    */
    virtual void issues_getMilestone(const QString &owner, const QString &repo, const qint32 &milestone_number);

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  collab bool [optional]
    * @param[in]  orgs bool [optional]
    * @param[in]  owned bool [optional]
    * @param[in]  pulls bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_list(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &collab = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &orgs = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &owned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pulls = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listAssignees(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listComments(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listCommentsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listEvents(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listEventsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listEventsForTimeline(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listForAuthenticatedUser(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listForOrg(const QString &org, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  milestone QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  assignee QString [optional]
    * @param[in]  creator QString [optional]
    * @param[in]  mentioned QString [optional]
    * @param[in]  labels QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &milestone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &creator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mentioned = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  milestone_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listLabelsForMilestone(const QString &owner, const QString &repo, const qint32 &milestone_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listLabelsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listLabelsOnIssue(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void issues_listMilestones(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_issues_lock_request OAIIssues_lock_request [optional]
    */
    virtual void issues_lock(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<OAIIssues_lock_request> &oai_issues_lock_request = ::OpenAPI::OptionalParam<OAIIssues_lock_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    */
    virtual void issues_removeAllLabels(const QString &owner, const QString &repo, const qint32 &issue_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_issues_remove_assignees_request OAIIssues_remove_assignees_request [optional]
    */
    virtual void issues_removeAssignees(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<OAIIssues_remove_assignees_request> &oai_issues_remove_assignees_request = ::OpenAPI::OptionalParam<OAIIssues_remove_assignees_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  name QString [required]
    */
    virtual void issues_removeLabel(const QString &owner, const QString &repo, const qint32 &issue_number, const QString &name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_issues_set_labels_request OAIIssues_set_labels_request [optional]
    */
    virtual void issues_setLabels(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<OAIIssues_set_labels_request> &oai_issues_set_labels_request = ::OpenAPI::OptionalParam<OAIIssues_set_labels_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    */
    virtual void issues_unlock(const QString &owner, const QString &repo, const qint32 &issue_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_issues_update_request OAIIssues_update_request [optional]
    */
    virtual void issues_update(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<OAIIssues_update_request> &oai_issues_update_request = ::OpenAPI::OptionalParam<OAIIssues_update_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_issues_update_comment_request OAIIssues_update_comment_request [required]
    */
    virtual void issues_updateComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIIssues_update_comment_request &oai_issues_update_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_issues_update_label_request OAIIssues_update_label_request [optional]
    */
    virtual void issues_updateLabel(const QString &owner, const QString &repo, const QString &name, const ::OpenAPI::OptionalParam<OAIIssues_update_label_request> &oai_issues_update_label_request = ::OpenAPI::OptionalParam<OAIIssues_update_label_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  milestone_number qint32 [required]
    * @param[in]  oai_issues_update_milestone_request OAIIssues_update_milestone_request [optional]
    */
    virtual void issues_updateMilestone(const QString &owner, const QString &repo, const qint32 &milestone_number, const ::OpenAPI::OptionalParam<OAIIssues_update_milestone_request> &oai_issues_update_milestone_request = ::OpenAPI::OptionalParam<OAIIssues_update_milestone_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void issues_addAssigneesCallback(OAIHttpRequestWorker *worker);
    void issues_addLabelsCallback(OAIHttpRequestWorker *worker);
    void issues_checkUserCanBeAssignedCallback(OAIHttpRequestWorker *worker);
    void issues_createCallback(OAIHttpRequestWorker *worker);
    void issues_createCommentCallback(OAIHttpRequestWorker *worker);
    void issues_createLabelCallback(OAIHttpRequestWorker *worker);
    void issues_createMilestoneCallback(OAIHttpRequestWorker *worker);
    void issues_deleteCommentCallback(OAIHttpRequestWorker *worker);
    void issues_deleteLabelCallback(OAIHttpRequestWorker *worker);
    void issues_deleteMilestoneCallback(OAIHttpRequestWorker *worker);
    void issues_getCallback(OAIHttpRequestWorker *worker);
    void issues_getCommentCallback(OAIHttpRequestWorker *worker);
    void issues_getEventCallback(OAIHttpRequestWorker *worker);
    void issues_getLabelCallback(OAIHttpRequestWorker *worker);
    void issues_getMilestoneCallback(OAIHttpRequestWorker *worker);
    void issues_listCallback(OAIHttpRequestWorker *worker);
    void issues_listAssigneesCallback(OAIHttpRequestWorker *worker);
    void issues_listCommentsCallback(OAIHttpRequestWorker *worker);
    void issues_listCommentsForRepoCallback(OAIHttpRequestWorker *worker);
    void issues_listEventsCallback(OAIHttpRequestWorker *worker);
    void issues_listEventsForRepoCallback(OAIHttpRequestWorker *worker);
    void issues_listEventsForTimelineCallback(OAIHttpRequestWorker *worker);
    void issues_listForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void issues_listForOrgCallback(OAIHttpRequestWorker *worker);
    void issues_listForRepoCallback(OAIHttpRequestWorker *worker);
    void issues_listLabelsForMilestoneCallback(OAIHttpRequestWorker *worker);
    void issues_listLabelsForRepoCallback(OAIHttpRequestWorker *worker);
    void issues_listLabelsOnIssueCallback(OAIHttpRequestWorker *worker);
    void issues_listMilestonesCallback(OAIHttpRequestWorker *worker);
    void issues_lockCallback(OAIHttpRequestWorker *worker);
    void issues_removeAllLabelsCallback(OAIHttpRequestWorker *worker);
    void issues_removeAssigneesCallback(OAIHttpRequestWorker *worker);
    void issues_removeLabelCallback(OAIHttpRequestWorker *worker);
    void issues_setLabelsCallback(OAIHttpRequestWorker *worker);
    void issues_unlockCallback(OAIHttpRequestWorker *worker);
    void issues_updateCallback(OAIHttpRequestWorker *worker);
    void issues_updateCommentCallback(OAIHttpRequestWorker *worker);
    void issues_updateLabelCallback(OAIHttpRequestWorker *worker);
    void issues_updateMilestoneCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void issues_addAssigneesSignal(OAIIssue_simple summary);
    void issues_addLabelsSignal(QList<OAILabel> summary);
    void issues_checkUserCanBeAssignedSignal();
    void issues_createSignal(OAIIssue summary);
    void issues_createCommentSignal(OAIIssue_comment summary);
    void issues_createLabelSignal(OAILabel summary);
    void issues_createMilestoneSignal(OAIMilestone summary);
    void issues_deleteCommentSignal();
    void issues_deleteLabelSignal();
    void issues_deleteMilestoneSignal();
    void issues_getSignal(OAIIssue summary);
    void issues_getCommentSignal(OAIIssue_comment summary);
    void issues_getEventSignal(OAIIssue_event summary);
    void issues_getLabelSignal(OAILabel summary);
    void issues_getMilestoneSignal(OAIMilestone summary);
    void issues_listSignal(QList<OAIIssue> summary);
    void issues_listAssigneesSignal(QList<OAISimple_user> summary);
    void issues_listCommentsSignal(QList<OAIIssue_comment> summary);
    void issues_listCommentsForRepoSignal(QList<OAIIssue_comment> summary);
    void issues_listEventsSignal(QList<OAIIssue_event_for_issue> summary);
    void issues_listEventsForRepoSignal(QList<OAIIssue_event> summary);
    void issues_listEventsForTimelineSignal(QList<OAITimeline_issue_events> summary);
    void issues_listForAuthenticatedUserSignal(QList<OAIIssue> summary);
    void issues_listForOrgSignal(QList<OAIIssue> summary);
    void issues_listForRepoSignal(QList<OAIIssue_simple> summary);
    void issues_listLabelsForMilestoneSignal(QList<OAILabel> summary);
    void issues_listLabelsForRepoSignal(QList<OAILabel> summary);
    void issues_listLabelsOnIssueSignal(QList<OAILabel> summary);
    void issues_listMilestonesSignal(QList<OAIMilestone> summary);
    void issues_lockSignal();
    void issues_removeAllLabelsSignal();
    void issues_removeAssigneesSignal(OAIIssue_simple summary);
    void issues_removeLabelSignal(QList<OAILabel> summary);
    void issues_setLabelsSignal(QList<OAILabel> summary);
    void issues_unlockSignal();
    void issues_updateSignal(OAIIssue summary);
    void issues_updateCommentSignal(OAIIssue_comment summary);
    void issues_updateLabelSignal(OAILabel summary);
    void issues_updateMilestoneSignal(OAIMilestone summary);


    void issues_addAssigneesSignalFull(OAIHttpRequestWorker *worker, OAIIssue_simple summary);
    void issues_addLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issues_checkUserCanBeAssignedSignalFull(OAIHttpRequestWorker *worker);
    void issues_createSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issues_createCommentSignalFull(OAIHttpRequestWorker *worker, OAIIssue_comment summary);
    void issues_createLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void issues_createMilestoneSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void issues_deleteCommentSignalFull(OAIHttpRequestWorker *worker);
    void issues_deleteLabelSignalFull(OAIHttpRequestWorker *worker);
    void issues_deleteMilestoneSignalFull(OAIHttpRequestWorker *worker);
    void issues_getSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issues_getCommentSignalFull(OAIHttpRequestWorker *worker, OAIIssue_comment summary);
    void issues_getEventSignalFull(OAIHttpRequestWorker *worker, OAIIssue_event summary);
    void issues_getLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void issues_getMilestoneSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void issues_listSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue> summary);
    void issues_listAssigneesSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void issues_listCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue_comment> summary);
    void issues_listCommentsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue_comment> summary);
    void issues_listEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue_event_for_issue> summary);
    void issues_listEventsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue_event> summary);
    void issues_listEventsForTimelineSignalFull(OAIHttpRequestWorker *worker, QList<OAITimeline_issue_events> summary);
    void issues_listForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue> summary);
    void issues_listForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue> summary);
    void issues_listForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAIIssue_simple> summary);
    void issues_listLabelsForMilestoneSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issues_listLabelsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issues_listLabelsOnIssueSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issues_listMilestonesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMilestone> summary);
    void issues_lockSignalFull(OAIHttpRequestWorker *worker);
    void issues_removeAllLabelsSignalFull(OAIHttpRequestWorker *worker);
    void issues_removeAssigneesSignalFull(OAIHttpRequestWorker *worker, OAIIssue_simple summary);
    void issues_removeLabelSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issues_setLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void issues_unlockSignalFull(OAIHttpRequestWorker *worker);
    void issues_updateSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void issues_updateCommentSignalFull(OAIHttpRequestWorker *worker, OAIIssue_comment summary);
    void issues_updateLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void issues_updateMilestoneSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);

    Q_DECL_DEPRECATED_X("Use issues_addAssigneesSignalError() instead")
    void issues_addAssigneesSignalE(OAIIssue_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_addAssigneesSignalError(OAIIssue_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_addLabelsSignalError() instead")
    void issues_addLabelsSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_addLabelsSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_checkUserCanBeAssignedSignalError() instead")
    void issues_checkUserCanBeAssignedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issues_checkUserCanBeAssignedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createSignalError() instead")
    void issues_createSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createCommentSignalError() instead")
    void issues_createCommentSignalE(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createCommentSignalError(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createLabelSignalError() instead")
    void issues_createLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createMilestoneSignalError() instead")
    void issues_createMilestoneSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createMilestoneSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_deleteCommentSignalError() instead")
    void issues_deleteCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issues_deleteCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_deleteLabelSignalError() instead")
    void issues_deleteLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issues_deleteLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_deleteMilestoneSignalError() instead")
    void issues_deleteMilestoneSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issues_deleteMilestoneSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getSignalError() instead")
    void issues_getSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getCommentSignalError() instead")
    void issues_getCommentSignalE(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getCommentSignalError(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getEventSignalError() instead")
    void issues_getEventSignalE(OAIIssue_event summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getEventSignalError(OAIIssue_event summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getLabelSignalError() instead")
    void issues_getLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getMilestoneSignalError() instead")
    void issues_getMilestoneSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getMilestoneSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listSignalError() instead")
    void issues_listSignalE(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listSignalError(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listAssigneesSignalError() instead")
    void issues_listAssigneesSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listAssigneesSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listCommentsSignalError() instead")
    void issues_listCommentsSignalE(QList<OAIIssue_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listCommentsSignalError(QList<OAIIssue_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listCommentsForRepoSignalError() instead")
    void issues_listCommentsForRepoSignalE(QList<OAIIssue_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listCommentsForRepoSignalError(QList<OAIIssue_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listEventsSignalError() instead")
    void issues_listEventsSignalE(QList<OAIIssue_event_for_issue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listEventsSignalError(QList<OAIIssue_event_for_issue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listEventsForRepoSignalError() instead")
    void issues_listEventsForRepoSignalE(QList<OAIIssue_event> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listEventsForRepoSignalError(QList<OAIIssue_event> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listEventsForTimelineSignalError() instead")
    void issues_listEventsForTimelineSignalE(QList<OAITimeline_issue_events> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listEventsForTimelineSignalError(QList<OAITimeline_issue_events> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listForAuthenticatedUserSignalError() instead")
    void issues_listForAuthenticatedUserSignalE(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listForAuthenticatedUserSignalError(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listForOrgSignalError() instead")
    void issues_listForOrgSignalE(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listForOrgSignalError(QList<OAIIssue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listForRepoSignalError() instead")
    void issues_listForRepoSignalE(QList<OAIIssue_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listForRepoSignalError(QList<OAIIssue_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listLabelsForMilestoneSignalError() instead")
    void issues_listLabelsForMilestoneSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listLabelsForMilestoneSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listLabelsForRepoSignalError() instead")
    void issues_listLabelsForRepoSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listLabelsForRepoSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listLabelsOnIssueSignalError() instead")
    void issues_listLabelsOnIssueSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listLabelsOnIssueSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listMilestonesSignalError() instead")
    void issues_listMilestonesSignalE(QList<OAIMilestone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listMilestonesSignalError(QList<OAIMilestone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_lockSignalError() instead")
    void issues_lockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issues_lockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_removeAllLabelsSignalError() instead")
    void issues_removeAllLabelsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issues_removeAllLabelsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_removeAssigneesSignalError() instead")
    void issues_removeAssigneesSignalE(OAIIssue_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_removeAssigneesSignalError(OAIIssue_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_removeLabelSignalError() instead")
    void issues_removeLabelSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_removeLabelSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_setLabelsSignalError() instead")
    void issues_setLabelsSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_setLabelsSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_unlockSignalError() instead")
    void issues_unlockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void issues_unlockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateSignalError() instead")
    void issues_updateSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateCommentSignalError() instead")
    void issues_updateCommentSignalE(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateCommentSignalError(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateLabelSignalError() instead")
    void issues_updateLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateMilestoneSignalError() instead")
    void issues_updateMilestoneSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateMilestoneSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use issues_addAssigneesSignalErrorFull() instead")
    void issues_addAssigneesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_addAssigneesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_addLabelsSignalErrorFull() instead")
    void issues_addLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_addLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_checkUserCanBeAssignedSignalErrorFull() instead")
    void issues_checkUserCanBeAssignedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_checkUserCanBeAssignedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createSignalErrorFull() instead")
    void issues_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createCommentSignalErrorFull() instead")
    void issues_createCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createLabelSignalErrorFull() instead")
    void issues_createLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_createMilestoneSignalErrorFull() instead")
    void issues_createMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_createMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_deleteCommentSignalErrorFull() instead")
    void issues_deleteCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_deleteCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_deleteLabelSignalErrorFull() instead")
    void issues_deleteLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_deleteLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_deleteMilestoneSignalErrorFull() instead")
    void issues_deleteMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_deleteMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getSignalErrorFull() instead")
    void issues_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getCommentSignalErrorFull() instead")
    void issues_getCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getEventSignalErrorFull() instead")
    void issues_getEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getLabelSignalErrorFull() instead")
    void issues_getLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_getMilestoneSignalErrorFull() instead")
    void issues_getMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_getMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listSignalErrorFull() instead")
    void issues_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listAssigneesSignalErrorFull() instead")
    void issues_listAssigneesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listAssigneesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listCommentsSignalErrorFull() instead")
    void issues_listCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listCommentsForRepoSignalErrorFull() instead")
    void issues_listCommentsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listCommentsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listEventsSignalErrorFull() instead")
    void issues_listEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listEventsForRepoSignalErrorFull() instead")
    void issues_listEventsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listEventsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listEventsForTimelineSignalErrorFull() instead")
    void issues_listEventsForTimelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listEventsForTimelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listForAuthenticatedUserSignalErrorFull() instead")
    void issues_listForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listForOrgSignalErrorFull() instead")
    void issues_listForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listForRepoSignalErrorFull() instead")
    void issues_listForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listLabelsForMilestoneSignalErrorFull() instead")
    void issues_listLabelsForMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listLabelsForMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listLabelsForRepoSignalErrorFull() instead")
    void issues_listLabelsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listLabelsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listLabelsOnIssueSignalErrorFull() instead")
    void issues_listLabelsOnIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listLabelsOnIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_listMilestonesSignalErrorFull() instead")
    void issues_listMilestonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_listMilestonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_lockSignalErrorFull() instead")
    void issues_lockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_lockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_removeAllLabelsSignalErrorFull() instead")
    void issues_removeAllLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_removeAllLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_removeAssigneesSignalErrorFull() instead")
    void issues_removeAssigneesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_removeAssigneesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_removeLabelSignalErrorFull() instead")
    void issues_removeLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_removeLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_setLabelsSignalErrorFull() instead")
    void issues_setLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_setLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_unlockSignalErrorFull() instead")
    void issues_unlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_unlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateSignalErrorFull() instead")
    void issues_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateCommentSignalErrorFull() instead")
    void issues_updateCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateLabelSignalErrorFull() instead")
    void issues_updateLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issues_updateMilestoneSignalErrorFull() instead")
    void issues_updateMilestoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issues_updateMilestoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
