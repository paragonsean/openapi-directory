/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPullsApi_H
#define OAI_OAIPullsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApps_get_installation_415_response.h"
#include "OAIBasic_error.h"
#include "OAICommit.h"
#include "OAIDiff_entry.h"
#include "OAIEnterprise_admin_update_org_name_202_response.h"
#include "OAIOrgs_remove_outside_collaborator_422_response.h"
#include "OAIPull_request.h"
#include "OAIPull_request_merge_result.h"
#include "OAIPull_request_review.h"
#include "OAIPull_request_review_comment.h"
#include "OAIPull_request_review_request.h"
#include "OAIPull_request_simple.h"
#include "OAIPulls_create_reply_for_review_comment_request.h"
#include "OAIPulls_create_request.h"
#include "OAIPulls_create_review_comment_request.h"
#include "OAIPulls_create_review_request.h"
#include "OAIPulls_dismiss_review_request.h"
#include "OAIPulls_merge_request.h"
#include "OAIPulls_remove_requested_reviewers_request.h"
#include "OAIPulls_request_reviewers_request.h"
#include "OAIPulls_submit_review_request.h"
#include "OAIPulls_update_branch_request.h"
#include "OAIPulls_update_request.h"
#include "OAIPulls_update_review_comment_request.h"
#include "OAIPulls_update_review_request.h"
#include "OAIReview_comment.h"
#include "OAIValidation_error.h"
#include "OAIValidation_error_simple.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPullsApi : public QObject {
    Q_OBJECT

public:
    OAIPullsApi(const int timeOut = 0);
    ~OAIPullsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    */
    virtual void pulls_checkIfMerged(const QString &owner, const QString &repo, const qint32 &pull_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_pulls_create_request OAIPulls_create_request [required]
    */
    virtual void pulls_create(const QString &owner, const QString &repo, const OAIPulls_create_request &oai_pulls_create_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_pulls_create_reply_for_review_comment_request OAIPulls_create_reply_for_review_comment_request [required]
    */
    virtual void pulls_createReplyForReviewComment(const QString &owner, const QString &repo, const qint32 &pull_number, const qint32 &comment_id, const OAIPulls_create_reply_for_review_comment_request &oai_pulls_create_reply_for_review_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  oai_pulls_create_review_request OAIPulls_create_review_request [optional]
    */
    virtual void pulls_createReview(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<OAIPulls_create_review_request> &oai_pulls_create_review_request = ::OpenAPI::OptionalParam<OAIPulls_create_review_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  oai_pulls_create_review_comment_request OAIPulls_create_review_comment_request [required]
    */
    virtual void pulls_createReviewComment(const QString &owner, const QString &repo, const qint32 &pull_number, const OAIPulls_create_review_comment_request &oai_pulls_create_review_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  review_id qint32 [required]
    */
    virtual void pulls_deletePendingReview(const QString &owner, const QString &repo, const qint32 &pull_number, const qint32 &review_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void pulls_deleteReviewComment(const QString &owner, const QString &repo, const qint32 &comment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  review_id qint32 [required]
    * @param[in]  oai_pulls_dismiss_review_request OAIPulls_dismiss_review_request [required]
    */
    virtual void pulls_dismissReview(const QString &owner, const QString &repo, const qint32 &pull_number, const qint32 &review_id, const OAIPulls_dismiss_review_request &oai_pulls_dismiss_review_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    */
    virtual void pulls_get(const QString &owner, const QString &repo, const qint32 &pull_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  review_id qint32 [required]
    */
    virtual void pulls_getReview(const QString &owner, const QString &repo, const qint32 &pull_number, const qint32 &review_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void pulls_getReviewComment(const QString &owner, const QString &repo, const qint32 &comment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  head QString [optional]
    * @param[in]  base QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_list(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &head = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  review_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_listCommentsForReview(const QString &owner, const QString &repo, const qint32 &pull_number, const qint32 &review_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_listCommits(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_listFiles(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_listRequestedReviewers(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_listReviewComments(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_listReviewCommentsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void pulls_listReviews(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  oai_pulls_merge_request OAIPulls_merge_request [optional]
    */
    virtual void pulls_merge(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<OAIPulls_merge_request> &oai_pulls_merge_request = ::OpenAPI::OptionalParam<OAIPulls_merge_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  oai_pulls_remove_requested_reviewers_request OAIPulls_remove_requested_reviewers_request [required]
    */
    virtual void pulls_removeRequestedReviewers(const QString &owner, const QString &repo, const qint32 &pull_number, const OAIPulls_remove_requested_reviewers_request &oai_pulls_remove_requested_reviewers_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  oai_pulls_request_reviewers_request OAIPulls_request_reviewers_request [optional]
    */
    virtual void pulls_requestReviewers(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<OAIPulls_request_reviewers_request> &oai_pulls_request_reviewers_request = ::OpenAPI::OptionalParam<OAIPulls_request_reviewers_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  review_id qint32 [required]
    * @param[in]  oai_pulls_submit_review_request OAIPulls_submit_review_request [required]
    */
    virtual void pulls_submitReview(const QString &owner, const QString &repo, const qint32 &pull_number, const qint32 &review_id, const OAIPulls_submit_review_request &oai_pulls_submit_review_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  oai_pulls_update_request OAIPulls_update_request [optional]
    */
    virtual void pulls_update(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<OAIPulls_update_request> &oai_pulls_update_request = ::OpenAPI::OptionalParam<OAIPulls_update_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  oai_pulls_update_branch_request OAIPulls_update_branch_request [optional]
    */
    virtual void pulls_updateBranch(const QString &owner, const QString &repo, const qint32 &pull_number, const ::OpenAPI::OptionalParam<OAIPulls_update_branch_request> &oai_pulls_update_branch_request = ::OpenAPI::OptionalParam<OAIPulls_update_branch_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  pull_number qint32 [required]
    * @param[in]  review_id qint32 [required]
    * @param[in]  oai_pulls_update_review_request OAIPulls_update_review_request [required]
    */
    virtual void pulls_updateReview(const QString &owner, const QString &repo, const qint32 &pull_number, const qint32 &review_id, const OAIPulls_update_review_request &oai_pulls_update_review_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_pulls_update_review_comment_request OAIPulls_update_review_comment_request [required]
    */
    virtual void pulls_updateReviewComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIPulls_update_review_comment_request &oai_pulls_update_review_comment_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void pulls_checkIfMergedCallback(OAIHttpRequestWorker *worker);
    void pulls_createCallback(OAIHttpRequestWorker *worker);
    void pulls_createReplyForReviewCommentCallback(OAIHttpRequestWorker *worker);
    void pulls_createReviewCallback(OAIHttpRequestWorker *worker);
    void pulls_createReviewCommentCallback(OAIHttpRequestWorker *worker);
    void pulls_deletePendingReviewCallback(OAIHttpRequestWorker *worker);
    void pulls_deleteReviewCommentCallback(OAIHttpRequestWorker *worker);
    void pulls_dismissReviewCallback(OAIHttpRequestWorker *worker);
    void pulls_getCallback(OAIHttpRequestWorker *worker);
    void pulls_getReviewCallback(OAIHttpRequestWorker *worker);
    void pulls_getReviewCommentCallback(OAIHttpRequestWorker *worker);
    void pulls_listCallback(OAIHttpRequestWorker *worker);
    void pulls_listCommentsForReviewCallback(OAIHttpRequestWorker *worker);
    void pulls_listCommitsCallback(OAIHttpRequestWorker *worker);
    void pulls_listFilesCallback(OAIHttpRequestWorker *worker);
    void pulls_listRequestedReviewersCallback(OAIHttpRequestWorker *worker);
    void pulls_listReviewCommentsCallback(OAIHttpRequestWorker *worker);
    void pulls_listReviewCommentsForRepoCallback(OAIHttpRequestWorker *worker);
    void pulls_listReviewsCallback(OAIHttpRequestWorker *worker);
    void pulls_mergeCallback(OAIHttpRequestWorker *worker);
    void pulls_removeRequestedReviewersCallback(OAIHttpRequestWorker *worker);
    void pulls_requestReviewersCallback(OAIHttpRequestWorker *worker);
    void pulls_submitReviewCallback(OAIHttpRequestWorker *worker);
    void pulls_updateCallback(OAIHttpRequestWorker *worker);
    void pulls_updateBranchCallback(OAIHttpRequestWorker *worker);
    void pulls_updateReviewCallback(OAIHttpRequestWorker *worker);
    void pulls_updateReviewCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void pulls_checkIfMergedSignal();
    void pulls_createSignal(OAIPull_request summary);
    void pulls_createReplyForReviewCommentSignal(OAIPull_request_review_comment summary);
    void pulls_createReviewSignal(OAIPull_request_review summary);
    void pulls_createReviewCommentSignal(OAIPull_request_review_comment summary);
    void pulls_deletePendingReviewSignal(OAIPull_request_review summary);
    void pulls_deleteReviewCommentSignal();
    void pulls_dismissReviewSignal(OAIPull_request_review summary);
    void pulls_getSignal(OAIPull_request summary);
    void pulls_getReviewSignal(OAIPull_request_review summary);
    void pulls_getReviewCommentSignal(OAIPull_request_review_comment summary);
    void pulls_listSignal(QList<OAIPull_request_simple> summary);
    void pulls_listCommentsForReviewSignal(QList<OAIReview_comment> summary);
    void pulls_listCommitsSignal(QList<OAICommit> summary);
    void pulls_listFilesSignal(QList<OAIDiff_entry> summary);
    void pulls_listRequestedReviewersSignal(OAIPull_request_review_request summary);
    void pulls_listReviewCommentsSignal(QList<OAIPull_request_review_comment> summary);
    void pulls_listReviewCommentsForRepoSignal(QList<OAIPull_request_review_comment> summary);
    void pulls_listReviewsSignal(QList<OAIPull_request_review> summary);
    void pulls_mergeSignal(OAIPull_request_merge_result summary);
    void pulls_removeRequestedReviewersSignal(OAIPull_request_simple summary);
    void pulls_requestReviewersSignal(OAIPull_request_simple summary);
    void pulls_submitReviewSignal(OAIPull_request_review summary);
    void pulls_updateSignal(OAIPull_request summary);
    void pulls_updateBranchSignal(OAIEnterprise_admin_update_org_name_202_response summary);
    void pulls_updateReviewSignal(OAIPull_request_review summary);
    void pulls_updateReviewCommentSignal(OAIPull_request_review_comment summary);


    void pulls_checkIfMergedSignalFull(OAIHttpRequestWorker *worker);
    void pulls_createSignalFull(OAIHttpRequestWorker *worker, OAIPull_request summary);
    void pulls_createReplyForReviewCommentSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review_comment summary);
    void pulls_createReviewSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review summary);
    void pulls_createReviewCommentSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review_comment summary);
    void pulls_deletePendingReviewSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review summary);
    void pulls_deleteReviewCommentSignalFull(OAIHttpRequestWorker *worker);
    void pulls_dismissReviewSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review summary);
    void pulls_getSignalFull(OAIHttpRequestWorker *worker, OAIPull_request summary);
    void pulls_getReviewSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review summary);
    void pulls_getReviewCommentSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review_comment summary);
    void pulls_listSignalFull(OAIHttpRequestWorker *worker, QList<OAIPull_request_simple> summary);
    void pulls_listCommentsForReviewSignalFull(OAIHttpRequestWorker *worker, QList<OAIReview_comment> summary);
    void pulls_listCommitsSignalFull(OAIHttpRequestWorker *worker, QList<OAICommit> summary);
    void pulls_listFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDiff_entry> summary);
    void pulls_listRequestedReviewersSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review_request summary);
    void pulls_listReviewCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPull_request_review_comment> summary);
    void pulls_listReviewCommentsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAIPull_request_review_comment> summary);
    void pulls_listReviewsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPull_request_review> summary);
    void pulls_mergeSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_merge_result summary);
    void pulls_removeRequestedReviewersSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_simple summary);
    void pulls_requestReviewersSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_simple summary);
    void pulls_submitReviewSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review summary);
    void pulls_updateSignalFull(OAIHttpRequestWorker *worker, OAIPull_request summary);
    void pulls_updateBranchSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_update_org_name_202_response summary);
    void pulls_updateReviewSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review summary);
    void pulls_updateReviewCommentSignalFull(OAIHttpRequestWorker *worker, OAIPull_request_review_comment summary);

    Q_DECL_DEPRECATED_X("Use pulls_checkIfMergedSignalError() instead")
    void pulls_checkIfMergedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_checkIfMergedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createSignalError() instead")
    void pulls_createSignalE(OAIPull_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createSignalError(OAIPull_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createReplyForReviewCommentSignalError() instead")
    void pulls_createReplyForReviewCommentSignalE(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createReplyForReviewCommentSignalError(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createReviewSignalError() instead")
    void pulls_createReviewSignalE(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createReviewSignalError(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createReviewCommentSignalError() instead")
    void pulls_createReviewCommentSignalE(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createReviewCommentSignalError(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_deletePendingReviewSignalError() instead")
    void pulls_deletePendingReviewSignalE(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_deletePendingReviewSignalError(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_deleteReviewCommentSignalError() instead")
    void pulls_deleteReviewCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_deleteReviewCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_dismissReviewSignalError() instead")
    void pulls_dismissReviewSignalE(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_dismissReviewSignalError(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_getSignalError() instead")
    void pulls_getSignalE(OAIPull_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_getSignalError(OAIPull_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_getReviewSignalError() instead")
    void pulls_getReviewSignalE(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_getReviewSignalError(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_getReviewCommentSignalError() instead")
    void pulls_getReviewCommentSignalE(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_getReviewCommentSignalError(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listSignalError() instead")
    void pulls_listSignalE(QList<OAIPull_request_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listSignalError(QList<OAIPull_request_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listCommentsForReviewSignalError() instead")
    void pulls_listCommentsForReviewSignalE(QList<OAIReview_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listCommentsForReviewSignalError(QList<OAIReview_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listCommitsSignalError() instead")
    void pulls_listCommitsSignalE(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listCommitsSignalError(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listFilesSignalError() instead")
    void pulls_listFilesSignalE(QList<OAIDiff_entry> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listFilesSignalError(QList<OAIDiff_entry> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listRequestedReviewersSignalError() instead")
    void pulls_listRequestedReviewersSignalE(OAIPull_request_review_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listRequestedReviewersSignalError(OAIPull_request_review_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listReviewCommentsSignalError() instead")
    void pulls_listReviewCommentsSignalE(QList<OAIPull_request_review_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listReviewCommentsSignalError(QList<OAIPull_request_review_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listReviewCommentsForRepoSignalError() instead")
    void pulls_listReviewCommentsForRepoSignalE(QList<OAIPull_request_review_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listReviewCommentsForRepoSignalError(QList<OAIPull_request_review_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listReviewsSignalError() instead")
    void pulls_listReviewsSignalE(QList<OAIPull_request_review> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listReviewsSignalError(QList<OAIPull_request_review> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_mergeSignalError() instead")
    void pulls_mergeSignalE(OAIPull_request_merge_result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_mergeSignalError(OAIPull_request_merge_result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_removeRequestedReviewersSignalError() instead")
    void pulls_removeRequestedReviewersSignalE(OAIPull_request_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_removeRequestedReviewersSignalError(OAIPull_request_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_requestReviewersSignalError() instead")
    void pulls_requestReviewersSignalE(OAIPull_request_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_requestReviewersSignalError(OAIPull_request_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_submitReviewSignalError() instead")
    void pulls_submitReviewSignalE(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_submitReviewSignalError(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateSignalError() instead")
    void pulls_updateSignalE(OAIPull_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateSignalError(OAIPull_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateBranchSignalError() instead")
    void pulls_updateBranchSignalE(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateBranchSignalError(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateReviewSignalError() instead")
    void pulls_updateReviewSignalE(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateReviewSignalError(OAIPull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateReviewCommentSignalError() instead")
    void pulls_updateReviewCommentSignalE(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateReviewCommentSignalError(OAIPull_request_review_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use pulls_checkIfMergedSignalErrorFull() instead")
    void pulls_checkIfMergedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_checkIfMergedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createSignalErrorFull() instead")
    void pulls_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createReplyForReviewCommentSignalErrorFull() instead")
    void pulls_createReplyForReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createReplyForReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createReviewSignalErrorFull() instead")
    void pulls_createReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_createReviewCommentSignalErrorFull() instead")
    void pulls_createReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_createReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_deletePendingReviewSignalErrorFull() instead")
    void pulls_deletePendingReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_deletePendingReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_deleteReviewCommentSignalErrorFull() instead")
    void pulls_deleteReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_deleteReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_dismissReviewSignalErrorFull() instead")
    void pulls_dismissReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_dismissReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_getSignalErrorFull() instead")
    void pulls_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_getReviewSignalErrorFull() instead")
    void pulls_getReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_getReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_getReviewCommentSignalErrorFull() instead")
    void pulls_getReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_getReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listSignalErrorFull() instead")
    void pulls_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listCommentsForReviewSignalErrorFull() instead")
    void pulls_listCommentsForReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listCommentsForReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listCommitsSignalErrorFull() instead")
    void pulls_listCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listFilesSignalErrorFull() instead")
    void pulls_listFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listRequestedReviewersSignalErrorFull() instead")
    void pulls_listRequestedReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listRequestedReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listReviewCommentsSignalErrorFull() instead")
    void pulls_listReviewCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listReviewCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listReviewCommentsForRepoSignalErrorFull() instead")
    void pulls_listReviewCommentsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listReviewCommentsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_listReviewsSignalErrorFull() instead")
    void pulls_listReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_listReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_mergeSignalErrorFull() instead")
    void pulls_mergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_mergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_removeRequestedReviewersSignalErrorFull() instead")
    void pulls_removeRequestedReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_removeRequestedReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_requestReviewersSignalErrorFull() instead")
    void pulls_requestReviewersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_requestReviewersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_submitReviewSignalErrorFull() instead")
    void pulls_submitReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_submitReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateSignalErrorFull() instead")
    void pulls_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateBranchSignalErrorFull() instead")
    void pulls_updateBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateReviewSignalErrorFull() instead")
    void pulls_updateReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pulls_updateReviewCommentSignalErrorFull() instead")
    void pulls_updateReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pulls_updateReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
