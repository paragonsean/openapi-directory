/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommit_comparison.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommit_comparison::OAICommit_comparison(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommit_comparison::OAICommit_comparison() {
    this->initializeModel();
}

OAICommit_comparison::~OAICommit_comparison() {}

void OAICommit_comparison::initializeModel() {

    m_ahead_by_isSet = false;
    m_ahead_by_isValid = false;

    m_base_commit_isSet = false;
    m_base_commit_isValid = false;

    m_behind_by_isSet = false;
    m_behind_by_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_diff_url_isSet = false;
    m_diff_url_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_merge_base_commit_isSet = false;
    m_merge_base_commit_isValid = false;

    m_patch_url_isSet = false;
    m_patch_url_isValid = false;

    m_permalink_url_isSet = false;
    m_permalink_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_commits_isSet = false;
    m_total_commits_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICommit_comparison::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommit_comparison::fromJsonObject(QJsonObject json) {

    m_ahead_by_isValid = ::OpenAPI::fromJsonValue(m_ahead_by, json[QString("ahead_by")]);
    m_ahead_by_isSet = !json[QString("ahead_by")].isNull() && m_ahead_by_isValid;

    m_base_commit_isValid = ::OpenAPI::fromJsonValue(m_base_commit, json[QString("base_commit")]);
    m_base_commit_isSet = !json[QString("base_commit")].isNull() && m_base_commit_isValid;

    m_behind_by_isValid = ::OpenAPI::fromJsonValue(m_behind_by, json[QString("behind_by")]);
    m_behind_by_isSet = !json[QString("behind_by")].isNull() && m_behind_by_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_diff_url_isValid = ::OpenAPI::fromJsonValue(m_diff_url, json[QString("diff_url")]);
    m_diff_url_isSet = !json[QString("diff_url")].isNull() && m_diff_url_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_merge_base_commit_isValid = ::OpenAPI::fromJsonValue(m_merge_base_commit, json[QString("merge_base_commit")]);
    m_merge_base_commit_isSet = !json[QString("merge_base_commit")].isNull() && m_merge_base_commit_isValid;

    m_patch_url_isValid = ::OpenAPI::fromJsonValue(m_patch_url, json[QString("patch_url")]);
    m_patch_url_isSet = !json[QString("patch_url")].isNull() && m_patch_url_isValid;

    m_permalink_url_isValid = ::OpenAPI::fromJsonValue(m_permalink_url, json[QString("permalink_url")]);
    m_permalink_url_isSet = !json[QString("permalink_url")].isNull() && m_permalink_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_commits_isValid = ::OpenAPI::fromJsonValue(m_total_commits, json[QString("total_commits")]);
    m_total_commits_isSet = !json[QString("total_commits")].isNull() && m_total_commits_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICommit_comparison::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommit_comparison::asJsonObject() const {
    QJsonObject obj;
    if (m_ahead_by_isSet) {
        obj.insert(QString("ahead_by"), ::OpenAPI::toJsonValue(m_ahead_by));
    }
    if (m_base_commit.isSet()) {
        obj.insert(QString("base_commit"), ::OpenAPI::toJsonValue(m_base_commit));
    }
    if (m_behind_by_isSet) {
        obj.insert(QString("behind_by"), ::OpenAPI::toJsonValue(m_behind_by));
    }
    if (m_commits.size() > 0) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_diff_url_isSet) {
        obj.insert(QString("diff_url"), ::OpenAPI::toJsonValue(m_diff_url));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_merge_base_commit.isSet()) {
        obj.insert(QString("merge_base_commit"), ::OpenAPI::toJsonValue(m_merge_base_commit));
    }
    if (m_patch_url_isSet) {
        obj.insert(QString("patch_url"), ::OpenAPI::toJsonValue(m_patch_url));
    }
    if (m_permalink_url_isSet) {
        obj.insert(QString("permalink_url"), ::OpenAPI::toJsonValue(m_permalink_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_commits_isSet) {
        obj.insert(QString("total_commits"), ::OpenAPI::toJsonValue(m_total_commits));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAICommit_comparison::getAheadBy() const {
    return m_ahead_by;
}
void OAICommit_comparison::setAheadBy(const qint32 &ahead_by) {
    m_ahead_by = ahead_by;
    m_ahead_by_isSet = true;
}

bool OAICommit_comparison::is_ahead_by_Set() const{
    return m_ahead_by_isSet;
}

bool OAICommit_comparison::is_ahead_by_Valid() const{
    return m_ahead_by_isValid;
}

OAICommit OAICommit_comparison::getBaseCommit() const {
    return m_base_commit;
}
void OAICommit_comparison::setBaseCommit(const OAICommit &base_commit) {
    m_base_commit = base_commit;
    m_base_commit_isSet = true;
}

bool OAICommit_comparison::is_base_commit_Set() const{
    return m_base_commit_isSet;
}

bool OAICommit_comparison::is_base_commit_Valid() const{
    return m_base_commit_isValid;
}

qint32 OAICommit_comparison::getBehindBy() const {
    return m_behind_by;
}
void OAICommit_comparison::setBehindBy(const qint32 &behind_by) {
    m_behind_by = behind_by;
    m_behind_by_isSet = true;
}

bool OAICommit_comparison::is_behind_by_Set() const{
    return m_behind_by_isSet;
}

bool OAICommit_comparison::is_behind_by_Valid() const{
    return m_behind_by_isValid;
}

QList<OAICommit> OAICommit_comparison::getCommits() const {
    return m_commits;
}
void OAICommit_comparison::setCommits(const QList<OAICommit> &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAICommit_comparison::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAICommit_comparison::is_commits_Valid() const{
    return m_commits_isValid;
}

QString OAICommit_comparison::getDiffUrl() const {
    return m_diff_url;
}
void OAICommit_comparison::setDiffUrl(const QString &diff_url) {
    m_diff_url = diff_url;
    m_diff_url_isSet = true;
}

bool OAICommit_comparison::is_diff_url_Set() const{
    return m_diff_url_isSet;
}

bool OAICommit_comparison::is_diff_url_Valid() const{
    return m_diff_url_isValid;
}

QList<OAIDiff_entry> OAICommit_comparison::getFiles() const {
    return m_files;
}
void OAICommit_comparison::setFiles(const QList<OAIDiff_entry> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAICommit_comparison::is_files_Set() const{
    return m_files_isSet;
}

bool OAICommit_comparison::is_files_Valid() const{
    return m_files_isValid;
}

QString OAICommit_comparison::getHtmlUrl() const {
    return m_html_url;
}
void OAICommit_comparison::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICommit_comparison::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICommit_comparison::is_html_url_Valid() const{
    return m_html_url_isValid;
}

OAICommit OAICommit_comparison::getMergeBaseCommit() const {
    return m_merge_base_commit;
}
void OAICommit_comparison::setMergeBaseCommit(const OAICommit &merge_base_commit) {
    m_merge_base_commit = merge_base_commit;
    m_merge_base_commit_isSet = true;
}

bool OAICommit_comparison::is_merge_base_commit_Set() const{
    return m_merge_base_commit_isSet;
}

bool OAICommit_comparison::is_merge_base_commit_Valid() const{
    return m_merge_base_commit_isValid;
}

QString OAICommit_comparison::getPatchUrl() const {
    return m_patch_url;
}
void OAICommit_comparison::setPatchUrl(const QString &patch_url) {
    m_patch_url = patch_url;
    m_patch_url_isSet = true;
}

bool OAICommit_comparison::is_patch_url_Set() const{
    return m_patch_url_isSet;
}

bool OAICommit_comparison::is_patch_url_Valid() const{
    return m_patch_url_isValid;
}

QString OAICommit_comparison::getPermalinkUrl() const {
    return m_permalink_url;
}
void OAICommit_comparison::setPermalinkUrl(const QString &permalink_url) {
    m_permalink_url = permalink_url;
    m_permalink_url_isSet = true;
}

bool OAICommit_comparison::is_permalink_url_Set() const{
    return m_permalink_url_isSet;
}

bool OAICommit_comparison::is_permalink_url_Valid() const{
    return m_permalink_url_isValid;
}

QString OAICommit_comparison::getStatus() const {
    return m_status;
}
void OAICommit_comparison::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICommit_comparison::is_status_Set() const{
    return m_status_isSet;
}

bool OAICommit_comparison::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAICommit_comparison::getTotalCommits() const {
    return m_total_commits;
}
void OAICommit_comparison::setTotalCommits(const qint32 &total_commits) {
    m_total_commits = total_commits;
    m_total_commits_isSet = true;
}

bool OAICommit_comparison::is_total_commits_Set() const{
    return m_total_commits_isSet;
}

bool OAICommit_comparison::is_total_commits_Valid() const{
    return m_total_commits_isValid;
}

QString OAICommit_comparison::getUrl() const {
    return m_url;
}
void OAICommit_comparison::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICommit_comparison::is_url_Set() const{
    return m_url_isSet;
}

bool OAICommit_comparison::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICommit_comparison::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ahead_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_behind_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_base_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permalink_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_commits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommit_comparison::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ahead_by_isValid && m_base_commit_isValid && m_behind_by_isValid && m_commits_isValid && m_diff_url_isValid && m_html_url_isValid && m_merge_base_commit_isValid && m_patch_url_isValid && m_permalink_url_isValid && m_status_isValid && m_total_commits_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
