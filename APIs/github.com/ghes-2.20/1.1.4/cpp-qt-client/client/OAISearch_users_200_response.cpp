/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_users_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_users_200_response::OAISearch_users_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_users_200_response::OAISearch_users_200_response() {
    this->initializeModel();
}

OAISearch_users_200_response::~OAISearch_users_200_response() {}

void OAISearch_users_200_response::initializeModel() {

    m_incomplete_results_isSet = false;
    m_incomplete_results_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAISearch_users_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_users_200_response::fromJsonObject(QJsonObject json) {

    m_incomplete_results_isValid = ::OpenAPI::fromJsonValue(m_incomplete_results, json[QString("incomplete_results")]);
    m_incomplete_results_isSet = !json[QString("incomplete_results")].isNull() && m_incomplete_results_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAISearch_users_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_users_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_incomplete_results_isSet) {
        obj.insert(QString("incomplete_results"), ::OpenAPI::toJsonValue(m_incomplete_results));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

bool OAISearch_users_200_response::isIncompleteResults() const {
    return m_incomplete_results;
}
void OAISearch_users_200_response::setIncompleteResults(const bool &incomplete_results) {
    m_incomplete_results = incomplete_results;
    m_incomplete_results_isSet = true;
}

bool OAISearch_users_200_response::is_incomplete_results_Set() const{
    return m_incomplete_results_isSet;
}

bool OAISearch_users_200_response::is_incomplete_results_Valid() const{
    return m_incomplete_results_isValid;
}

QList<OAIUser_search_result_item> OAISearch_users_200_response::getItems() const {
    return m_items;
}
void OAISearch_users_200_response::setItems(const QList<OAIUser_search_result_item> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISearch_users_200_response::is_items_Set() const{
    return m_items_isSet;
}

bool OAISearch_users_200_response::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAISearch_users_200_response::getTotalCount() const {
    return m_total_count;
}
void OAISearch_users_200_response::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAISearch_users_200_response::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAISearch_users_200_response::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAISearch_users_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_incomplete_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_users_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_incomplete_results_isValid && m_items_isValid && m_total_count_isValid && true;
}

} // namespace OpenAPI
