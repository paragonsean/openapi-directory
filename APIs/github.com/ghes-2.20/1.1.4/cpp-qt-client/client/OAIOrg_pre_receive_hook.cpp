/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrg_pre_receive_hook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrg_pre_receive_hook::OAIOrg_pre_receive_hook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrg_pre_receive_hook::OAIOrg_pre_receive_hook() {
    this->initializeModel();
}

OAIOrg_pre_receive_hook::~OAIOrg_pre_receive_hook() {}

void OAIOrg_pre_receive_hook::initializeModel() {

    m_allow_downstream_configuration_isSet = false;
    m_allow_downstream_configuration_isValid = false;

    m_configuration_url_isSet = false;
    m_configuration_url_isValid = false;

    m_enforcement_isSet = false;
    m_enforcement_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIOrg_pre_receive_hook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrg_pre_receive_hook::fromJsonObject(QJsonObject json) {

    m_allow_downstream_configuration_isValid = ::OpenAPI::fromJsonValue(m_allow_downstream_configuration, json[QString("allow_downstream_configuration")]);
    m_allow_downstream_configuration_isSet = !json[QString("allow_downstream_configuration")].isNull() && m_allow_downstream_configuration_isValid;

    m_configuration_url_isValid = ::OpenAPI::fromJsonValue(m_configuration_url, json[QString("configuration_url")]);
    m_configuration_url_isSet = !json[QString("configuration_url")].isNull() && m_configuration_url_isValid;

    m_enforcement_isValid = ::OpenAPI::fromJsonValue(m_enforcement, json[QString("enforcement")]);
    m_enforcement_isSet = !json[QString("enforcement")].isNull() && m_enforcement_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIOrg_pre_receive_hook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrg_pre_receive_hook::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_downstream_configuration_isSet) {
        obj.insert(QString("allow_downstream_configuration"), ::OpenAPI::toJsonValue(m_allow_downstream_configuration));
    }
    if (m_configuration_url_isSet) {
        obj.insert(QString("configuration_url"), ::OpenAPI::toJsonValue(m_configuration_url));
    }
    if (m_enforcement_isSet) {
        obj.insert(QString("enforcement"), ::OpenAPI::toJsonValue(m_enforcement));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAIOrg_pre_receive_hook::isAllowDownstreamConfiguration() const {
    return m_allow_downstream_configuration;
}
void OAIOrg_pre_receive_hook::setAllowDownstreamConfiguration(const bool &allow_downstream_configuration) {
    m_allow_downstream_configuration = allow_downstream_configuration;
    m_allow_downstream_configuration_isSet = true;
}

bool OAIOrg_pre_receive_hook::is_allow_downstream_configuration_Set() const{
    return m_allow_downstream_configuration_isSet;
}

bool OAIOrg_pre_receive_hook::is_allow_downstream_configuration_Valid() const{
    return m_allow_downstream_configuration_isValid;
}

QString OAIOrg_pre_receive_hook::getConfigurationUrl() const {
    return m_configuration_url;
}
void OAIOrg_pre_receive_hook::setConfigurationUrl(const QString &configuration_url) {
    m_configuration_url = configuration_url;
    m_configuration_url_isSet = true;
}

bool OAIOrg_pre_receive_hook::is_configuration_url_Set() const{
    return m_configuration_url_isSet;
}

bool OAIOrg_pre_receive_hook::is_configuration_url_Valid() const{
    return m_configuration_url_isValid;
}

QString OAIOrg_pre_receive_hook::getEnforcement() const {
    return m_enforcement;
}
void OAIOrg_pre_receive_hook::setEnforcement(const QString &enforcement) {
    m_enforcement = enforcement;
    m_enforcement_isSet = true;
}

bool OAIOrg_pre_receive_hook::is_enforcement_Set() const{
    return m_enforcement_isSet;
}

bool OAIOrg_pre_receive_hook::is_enforcement_Valid() const{
    return m_enforcement_isValid;
}

qint32 OAIOrg_pre_receive_hook::getId() const {
    return m_id;
}
void OAIOrg_pre_receive_hook::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrg_pre_receive_hook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrg_pre_receive_hook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrg_pre_receive_hook::getName() const {
    return m_name;
}
void OAIOrg_pre_receive_hook::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrg_pre_receive_hook::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrg_pre_receive_hook::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIOrg_pre_receive_hook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_downstream_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrg_pre_receive_hook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
