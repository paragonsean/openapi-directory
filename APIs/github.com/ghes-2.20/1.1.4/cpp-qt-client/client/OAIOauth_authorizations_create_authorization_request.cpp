/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOauth_authorizations_create_authorization_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOauth_authorizations_create_authorization_request::OAIOauth_authorizations_create_authorization_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOauth_authorizations_create_authorization_request::OAIOauth_authorizations_create_authorization_request() {
    this->initializeModel();
}

OAIOauth_authorizations_create_authorization_request::~OAIOauth_authorizations_create_authorization_request() {}

void OAIOauth_authorizations_create_authorization_request::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_note_url_isSet = false;
    m_note_url_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIOauth_authorizations_create_authorization_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOauth_authorizations_create_authorization_request::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_note_url_isValid = ::OpenAPI::fromJsonValue(m_note_url, json[QString("note_url")]);
    m_note_url_isSet = !json[QString("note_url")].isNull() && m_note_url_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIOauth_authorizations_create_authorization_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOauth_authorizations_create_authorization_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_note_url_isSet) {
        obj.insert(QString("note_url"), ::OpenAPI::toJsonValue(m_note_url));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIOauth_authorizations_create_authorization_request::getClientId() const {
    return m_client_id;
}
void OAIOauth_authorizations_create_authorization_request::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOauth_authorizations_create_authorization_request::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOauth_authorizations_create_authorization_request::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOauth_authorizations_create_authorization_request::getClientSecret() const {
    return m_client_secret;
}
void OAIOauth_authorizations_create_authorization_request::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIOauth_authorizations_create_authorization_request::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIOauth_authorizations_create_authorization_request::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIOauth_authorizations_create_authorization_request::getFingerprint() const {
    return m_fingerprint;
}
void OAIOauth_authorizations_create_authorization_request::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIOauth_authorizations_create_authorization_request::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIOauth_authorizations_create_authorization_request::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIOauth_authorizations_create_authorization_request::getNote() const {
    return m_note;
}
void OAIOauth_authorizations_create_authorization_request::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIOauth_authorizations_create_authorization_request::is_note_Set() const{
    return m_note_isSet;
}

bool OAIOauth_authorizations_create_authorization_request::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIOauth_authorizations_create_authorization_request::getNoteUrl() const {
    return m_note_url;
}
void OAIOauth_authorizations_create_authorization_request::setNoteUrl(const QString &note_url) {
    m_note_url = note_url;
    m_note_url_isSet = true;
}

bool OAIOauth_authorizations_create_authorization_request::is_note_url_Set() const{
    return m_note_url_isSet;
}

bool OAIOauth_authorizations_create_authorization_request::is_note_url_Valid() const{
    return m_note_url_isValid;
}

QList<QString> OAIOauth_authorizations_create_authorization_request::getScopes() const {
    return m_scopes;
}
void OAIOauth_authorizations_create_authorization_request::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIOauth_authorizations_create_authorization_request::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIOauth_authorizations_create_authorization_request::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIOauth_authorizations_create_authorization_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOauth_authorizations_create_authorization_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
