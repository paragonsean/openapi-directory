/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepos_create_in_org_request.h
 *
 * 
 */

#ifndef OAIRepos_create_in_org_request_H
#define OAIRepos_create_in_org_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRepos_create_in_org_request : public OAIObject {
public:
    OAIRepos_create_in_org_request();
    OAIRepos_create_in_org_request(QString json);
    ~OAIRepos_create_in_org_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowMergeCommit() const;
    void setAllowMergeCommit(const bool &allow_merge_commit);
    bool is_allow_merge_commit_Set() const;
    bool is_allow_merge_commit_Valid() const;

    bool isAllowRebaseMerge() const;
    void setAllowRebaseMerge(const bool &allow_rebase_merge);
    bool is_allow_rebase_merge_Set() const;
    bool is_allow_rebase_merge_Valid() const;

    bool isAllowSquashMerge() const;
    void setAllowSquashMerge(const bool &allow_squash_merge);
    bool is_allow_squash_merge_Set() const;
    bool is_allow_squash_merge_Valid() const;

    bool isAutoInit() const;
    void setAutoInit(const bool &auto_init);
    bool is_auto_init_Set() const;
    bool is_auto_init_Valid() const;

    bool isDeleteBranchOnMerge() const;
    void setDeleteBranchOnMerge(const bool &delete_branch_on_merge);
    bool is_delete_branch_on_merge_Set() const;
    bool is_delete_branch_on_merge_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getGitignoreTemplate() const;
    void setGitignoreTemplate(const QString &gitignore_template);
    bool is_gitignore_template_Set() const;
    bool is_gitignore_template_Valid() const;

    bool isHasIssues() const;
    void setHasIssues(const bool &has_issues);
    bool is_has_issues_Set() const;
    bool is_has_issues_Valid() const;

    bool isHasProjects() const;
    void setHasProjects(const bool &has_projects);
    bool is_has_projects_Set() const;
    bool is_has_projects_Valid() const;

    bool isHasWiki() const;
    void setHasWiki(const bool &has_wiki);
    bool is_has_wiki_Set() const;
    bool is_has_wiki_Valid() const;

    QString getHomepage() const;
    void setHomepage(const QString &homepage);
    bool is_homepage_Set() const;
    bool is_homepage_Valid() const;

    bool isIsTemplate() const;
    void setIsTemplate(const bool &is_template);
    bool is_is_template_Set() const;
    bool is_is_template_Valid() const;

    QString getLicenseTemplate() const;
    void setLicenseTemplate(const QString &license_template);
    bool is_license_template_Set() const;
    bool is_license_template_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isRPrivate() const;
    void setRPrivate(const bool &r_private);
    bool is_r_private_Set() const;
    bool is_r_private_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_merge_commit;
    bool m_allow_merge_commit_isSet;
    bool m_allow_merge_commit_isValid;

    bool m_allow_rebase_merge;
    bool m_allow_rebase_merge_isSet;
    bool m_allow_rebase_merge_isValid;

    bool m_allow_squash_merge;
    bool m_allow_squash_merge_isSet;
    bool m_allow_squash_merge_isValid;

    bool m_auto_init;
    bool m_auto_init_isSet;
    bool m_auto_init_isValid;

    bool m_delete_branch_on_merge;
    bool m_delete_branch_on_merge_isSet;
    bool m_delete_branch_on_merge_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_gitignore_template;
    bool m_gitignore_template_isSet;
    bool m_gitignore_template_isValid;

    bool m_has_issues;
    bool m_has_issues_isSet;
    bool m_has_issues_isValid;

    bool m_has_projects;
    bool m_has_projects_isSet;
    bool m_has_projects_isValid;

    bool m_has_wiki;
    bool m_has_wiki_isSet;
    bool m_has_wiki_isValid;

    QString m_homepage;
    bool m_homepage_isSet;
    bool m_homepage_isValid;

    bool m_is_template;
    bool m_is_template_isSet;
    bool m_is_template_isValid;

    QString m_license_template;
    bool m_license_template_isSet;
    bool m_license_template_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_r_private;
    bool m_r_private_isSet;
    bool m_r_private_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepos_create_in_org_request)

#endif // OAIRepos_create_in_org_request_H
