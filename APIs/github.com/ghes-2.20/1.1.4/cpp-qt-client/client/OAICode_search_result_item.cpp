/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_search_result_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_search_result_item::OAICode_search_result_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_search_result_item::OAICode_search_result_item() {
    this->initializeModel();
}

OAICode_search_result_item::~OAICode_search_result_item() {}

void OAICode_search_result_item::initializeModel() {

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_git_url_isSet = false;
    m_git_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_modified_at_isSet = false;
    m_last_modified_at_isValid = false;

    m_line_numbers_isSet = false;
    m_line_numbers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_text_matches_isSet = false;
    m_text_matches_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICode_search_result_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_search_result_item::fromJsonObject(QJsonObject json) {

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_git_url_isValid = ::OpenAPI::fromJsonValue(m_git_url, json[QString("git_url")]);
    m_git_url_isSet = !json[QString("git_url")].isNull() && m_git_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_modified_at_isValid = ::OpenAPI::fromJsonValue(m_last_modified_at, json[QString("last_modified_at")]);
    m_last_modified_at_isSet = !json[QString("last_modified_at")].isNull() && m_last_modified_at_isValid;

    m_line_numbers_isValid = ::OpenAPI::fromJsonValue(m_line_numbers, json[QString("line_numbers")]);
    m_line_numbers_isSet = !json[QString("line_numbers")].isNull() && m_line_numbers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_text_matches_isValid = ::OpenAPI::fromJsonValue(m_text_matches, json[QString("text_matches")]);
    m_text_matches_isSet = !json[QString("text_matches")].isNull() && m_text_matches_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICode_search_result_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_search_result_item::asJsonObject() const {
    QJsonObject obj;
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_git_url_isSet) {
        obj.insert(QString("git_url"), ::OpenAPI::toJsonValue(m_git_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_modified_at_isSet) {
        obj.insert(QString("last_modified_at"), ::OpenAPI::toJsonValue(m_last_modified_at));
    }
    if (m_line_numbers.size() > 0) {
        obj.insert(QString("line_numbers"), ::OpenAPI::toJsonValue(m_line_numbers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_text_matches.size() > 0) {
        obj.insert(QString("text_matches"), ::OpenAPI::toJsonValue(m_text_matches));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAICode_search_result_item::getFileSize() const {
    return m_file_size;
}
void OAICode_search_result_item::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAICode_search_result_item::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAICode_search_result_item::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAICode_search_result_item::getGitUrl() const {
    return m_git_url;
}
void OAICode_search_result_item::setGitUrl(const QString &git_url) {
    m_git_url = git_url;
    m_git_url_isSet = true;
}

bool OAICode_search_result_item::is_git_url_Set() const{
    return m_git_url_isSet;
}

bool OAICode_search_result_item::is_git_url_Valid() const{
    return m_git_url_isValid;
}

QString OAICode_search_result_item::getHtmlUrl() const {
    return m_html_url;
}
void OAICode_search_result_item::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICode_search_result_item::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICode_search_result_item::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAICode_search_result_item::getLanguage() const {
    return m_language;
}
void OAICode_search_result_item::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAICode_search_result_item::is_language_Set() const{
    return m_language_isSet;
}

bool OAICode_search_result_item::is_language_Valid() const{
    return m_language_isValid;
}

QDateTime OAICode_search_result_item::getLastModifiedAt() const {
    return m_last_modified_at;
}
void OAICode_search_result_item::setLastModifiedAt(const QDateTime &last_modified_at) {
    m_last_modified_at = last_modified_at;
    m_last_modified_at_isSet = true;
}

bool OAICode_search_result_item::is_last_modified_at_Set() const{
    return m_last_modified_at_isSet;
}

bool OAICode_search_result_item::is_last_modified_at_Valid() const{
    return m_last_modified_at_isValid;
}

QList<QString> OAICode_search_result_item::getLineNumbers() const {
    return m_line_numbers;
}
void OAICode_search_result_item::setLineNumbers(const QList<QString> &line_numbers) {
    m_line_numbers = line_numbers;
    m_line_numbers_isSet = true;
}

bool OAICode_search_result_item::is_line_numbers_Set() const{
    return m_line_numbers_isSet;
}

bool OAICode_search_result_item::is_line_numbers_Valid() const{
    return m_line_numbers_isValid;
}

QString OAICode_search_result_item::getName() const {
    return m_name;
}
void OAICode_search_result_item::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICode_search_result_item::is_name_Set() const{
    return m_name_isSet;
}

bool OAICode_search_result_item::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICode_search_result_item::getPath() const {
    return m_path;
}
void OAICode_search_result_item::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICode_search_result_item::is_path_Set() const{
    return m_path_isSet;
}

bool OAICode_search_result_item::is_path_Valid() const{
    return m_path_isValid;
}

OAIMinimal_repository OAICode_search_result_item::getRepository() const {
    return m_repository;
}
void OAICode_search_result_item::setRepository(const OAIMinimal_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICode_search_result_item::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICode_search_result_item::is_repository_Valid() const{
    return m_repository_isValid;
}

double OAICode_search_result_item::getScore() const {
    return m_score;
}
void OAICode_search_result_item::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAICode_search_result_item::is_score_Set() const{
    return m_score_isSet;
}

bool OAICode_search_result_item::is_score_Valid() const{
    return m_score_isValid;
}

QString OAICode_search_result_item::getSha() const {
    return m_sha;
}
void OAICode_search_result_item::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAICode_search_result_item::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAICode_search_result_item::is_sha_Valid() const{
    return m_sha_isValid;
}

QList<OAISearch_result_text_matches_inner> OAICode_search_result_item::getTextMatches() const {
    return m_text_matches;
}
void OAICode_search_result_item::setTextMatches(const QList<OAISearch_result_text_matches_inner> &text_matches) {
    m_text_matches = text_matches;
    m_text_matches_isSet = true;
}

bool OAICode_search_result_item::is_text_matches_Set() const{
    return m_text_matches_isSet;
}

bool OAICode_search_result_item::is_text_matches_Valid() const{
    return m_text_matches_isValid;
}

QString OAICode_search_result_item::getUrl() const {
    return m_url;
}
void OAICode_search_result_item::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICode_search_result_item::is_url_Set() const{
    return m_url_isSet;
}

bool OAICode_search_result_item::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICode_search_result_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_search_result_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_git_url_isValid && m_html_url_isValid && m_name_isValid && m_path_isValid && m_repository_isValid && m_score_isValid && m_sha_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
