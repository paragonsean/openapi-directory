/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeline_cross_referenced_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeline_cross_referenced_event::OAITimeline_cross_referenced_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeline_cross_referenced_event::OAITimeline_cross_referenced_event() {
    this->initializeModel();
}

OAITimeline_cross_referenced_event::~OAITimeline_cross_referenced_event() {}

void OAITimeline_cross_referenced_event::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITimeline_cross_referenced_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeline_cross_referenced_event::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITimeline_cross_referenced_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeline_cross_referenced_event::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAISimple_user OAITimeline_cross_referenced_event::getActor() const {
    return m_actor;
}
void OAITimeline_cross_referenced_event::setActor(const OAISimple_user &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAITimeline_cross_referenced_event::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAITimeline_cross_referenced_event::is_actor_Valid() const{
    return m_actor_isValid;
}

QDateTime OAITimeline_cross_referenced_event::getCreatedAt() const {
    return m_created_at;
}
void OAITimeline_cross_referenced_event::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITimeline_cross_referenced_event::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITimeline_cross_referenced_event::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITimeline_cross_referenced_event::getEvent() const {
    return m_event;
}
void OAITimeline_cross_referenced_event::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAITimeline_cross_referenced_event::is_event_Set() const{
    return m_event_isSet;
}

bool OAITimeline_cross_referenced_event::is_event_Valid() const{
    return m_event_isValid;
}

OAITimeline_cross_referenced_event_source OAITimeline_cross_referenced_event::getSource() const {
    return m_source;
}
void OAITimeline_cross_referenced_event::setSource(const OAITimeline_cross_referenced_event_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITimeline_cross_referenced_event::is_source_Set() const{
    return m_source_isSet;
}

bool OAITimeline_cross_referenced_event::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAITimeline_cross_referenced_event::getUpdatedAt() const {
    return m_updated_at;
}
void OAITimeline_cross_referenced_event::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITimeline_cross_referenced_event::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITimeline_cross_referenced_event::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITimeline_cross_referenced_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeline_cross_referenced_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_event_isValid && m_source_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
