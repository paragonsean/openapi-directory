/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository_collaborator_permission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository_collaborator_permission::OAIRepository_collaborator_permission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository_collaborator_permission::OAIRepository_collaborator_permission() {
    this->initializeModel();
}

OAIRepository_collaborator_permission::~OAIRepository_collaborator_permission() {}

void OAIRepository_collaborator_permission::initializeModel() {

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRepository_collaborator_permission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository_collaborator_permission::fromJsonObject(QJsonObject json) {

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRepository_collaborator_permission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository_collaborator_permission::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIRepository_collaborator_permission::getPermission() const {
    return m_permission;
}
void OAIRepository_collaborator_permission::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIRepository_collaborator_permission::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIRepository_collaborator_permission::is_permission_Valid() const{
    return m_permission_isValid;
}

OAINullable_simple_user OAIRepository_collaborator_permission::getUser() const {
    return m_user;
}
void OAIRepository_collaborator_permission::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRepository_collaborator_permission::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRepository_collaborator_permission::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRepository_collaborator_permission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository_collaborator_permission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_permission_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
