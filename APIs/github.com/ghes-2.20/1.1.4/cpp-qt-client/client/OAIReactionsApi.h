/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReactionsApi_H
#define OAI_OAIReactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApps_get_installation_415_response.h"
#include "OAIBasic_error.h"
#include "OAIReaction.h"
#include "OAIReactions_create_for_commit_comment_request.h"
#include "OAIReactions_create_for_issue_comment_request.h"
#include "OAIReactions_create_for_issue_request.h"
#include "OAIReactions_create_for_pull_request_review_comment_request.h"
#include "OAIReactions_create_for_team_discussion_comment_request.h"
#include "OAIReactions_create_for_team_discussion_request.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReactionsApi : public QObject {
    Q_OBJECT

public:
    OAIReactionsApi(const int timeOut = 0);
    ~OAIReactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_reactions_create_for_commit_comment_request OAIReactions_create_for_commit_comment_request [required]
    */
    virtual void reactions_createForCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIReactions_create_for_commit_comment_request &oai_reactions_create_for_commit_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_reactions_create_for_issue_request OAIReactions_create_for_issue_request [required]
    */
    virtual void reactions_createForIssue(const QString &owner, const QString &repo, const qint32 &issue_number, const OAIReactions_create_for_issue_request &oai_reactions_create_for_issue_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_reactions_create_for_issue_comment_request OAIReactions_create_for_issue_comment_request [required]
    */
    virtual void reactions_createForIssueComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIReactions_create_for_issue_comment_request &oai_reactions_create_for_issue_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_reactions_create_for_pull_request_review_comment_request OAIReactions_create_for_pull_request_review_comment_request [required]
    */
    virtual void reactions_createForPullRequestReviewComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIReactions_create_for_pull_request_review_comment_request &oai_reactions_create_for_pull_request_review_comment_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_reactions_create_for_team_discussion_request OAIReactions_create_for_team_discussion_request [required]
    */
    virtual void reactions_createForTeamDiscussion(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const OAIReactions_create_for_team_discussion_request &oai_reactions_create_for_team_discussion_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  oai_reactions_create_for_team_discussion_comment_request OAIReactions_create_for_team_discussion_comment_request [required]
    */
    virtual void reactions_createForTeamDiscussionComment(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number, const OAIReactions_create_for_team_discussion_comment_request &oai_reactions_create_for_team_discussion_comment_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_delete(const QString &accept, const qint32 &reaction_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForIssue(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForIssueComment(const QString &owner, const QString &repo, const qint32 &comment_id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForPullRequestReviewComment(const QString &owner, const QString &repo, const qint32 &comment_id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForTeamDiscussion(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForTeamDiscussionComment(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reactions_createForCommitCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_createForIssueCallback(OAIHttpRequestWorker *worker);
    void reactions_createForIssueCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_createForPullRequestReviewCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_createForTeamDiscussionCallback(OAIHttpRequestWorker *worker);
    void reactions_createForTeamDiscussionCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteCallback(OAIHttpRequestWorker *worker);
    void reactions_listForCommitCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_listForIssueCallback(OAIHttpRequestWorker *worker);
    void reactions_listForIssueCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_listForPullRequestReviewCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_listForTeamDiscussionCallback(OAIHttpRequestWorker *worker);
    void reactions_listForTeamDiscussionCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reactions_createForCommitCommentSignal(OAIReaction summary);
    void reactions_createForIssueSignal(OAIReaction summary);
    void reactions_createForIssueCommentSignal(OAIReaction summary);
    void reactions_createForPullRequestReviewCommentSignal(OAIReaction summary);
    void reactions_createForTeamDiscussionSignal(OAIReaction summary);
    void reactions_createForTeamDiscussionCommentSignal(OAIReaction summary);
    void reactions_deleteSignal();
    void reactions_listForCommitCommentSignal(QList<OAIReaction> summary);
    void reactions_listForIssueSignal(QList<OAIReaction> summary);
    void reactions_listForIssueCommentSignal(QList<OAIReaction> summary);
    void reactions_listForPullRequestReviewCommentSignal(QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionSignal(QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionCommentSignal(QList<OAIReaction> summary);


    void reactions_createForCommitCommentSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForIssueSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForIssueCommentSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForPullRequestReviewCommentSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForTeamDiscussionSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForTeamDiscussionCommentSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_deleteSignalFull(OAIHttpRequestWorker *worker);
    void reactions_listForCommitCommentSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForIssueSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForIssueCommentSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForPullRequestReviewCommentSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionCommentSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);

    Q_DECL_DEPRECATED_X("Use reactions_createForCommitCommentSignalError() instead")
    void reactions_createForCommitCommentSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForCommitCommentSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueSignalError() instead")
    void reactions_createForIssueSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueCommentSignalError() instead")
    void reactions_createForIssueCommentSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueCommentSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForPullRequestReviewCommentSignalError() instead")
    void reactions_createForPullRequestReviewCommentSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForPullRequestReviewCommentSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionSignalError() instead")
    void reactions_createForTeamDiscussionSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionCommentSignalError() instead")
    void reactions_createForTeamDiscussionCommentSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionCommentSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteSignalError() instead")
    void reactions_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForCommitCommentSignalError() instead")
    void reactions_listForCommitCommentSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForCommitCommentSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueSignalError() instead")
    void reactions_listForIssueSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueCommentSignalError() instead")
    void reactions_listForIssueCommentSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueCommentSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForPullRequestReviewCommentSignalError() instead")
    void reactions_listForPullRequestReviewCommentSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForPullRequestReviewCommentSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionSignalError() instead")
    void reactions_listForTeamDiscussionSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionCommentSignalError() instead")
    void reactions_listForTeamDiscussionCommentSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionCommentSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reactions_createForCommitCommentSignalErrorFull() instead")
    void reactions_createForCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueSignalErrorFull() instead")
    void reactions_createForIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueCommentSignalErrorFull() instead")
    void reactions_createForIssueCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForPullRequestReviewCommentSignalErrorFull() instead")
    void reactions_createForPullRequestReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForPullRequestReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionSignalErrorFull() instead")
    void reactions_createForTeamDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionCommentSignalErrorFull() instead")
    void reactions_createForTeamDiscussionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteSignalErrorFull() instead")
    void reactions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForCommitCommentSignalErrorFull() instead")
    void reactions_listForCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueSignalErrorFull() instead")
    void reactions_listForIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueCommentSignalErrorFull() instead")
    void reactions_listForIssueCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForPullRequestReviewCommentSignalErrorFull() instead")
    void reactions_listForPullRequestReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForPullRequestReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionSignalErrorFull() instead")
    void reactions_listForTeamDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionCommentSignalErrorFull() instead")
    void reactions_listForTeamDiscussionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
