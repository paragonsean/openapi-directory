/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobal_hook_config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobal_hook_config::OAIGlobal_hook_config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobal_hook_config::OAIGlobal_hook_config() {
    this->initializeModel();
}

OAIGlobal_hook_config::~OAIGlobal_hook_config() {}

void OAIGlobal_hook_config::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_insecure_ssl_isSet = false;
    m_insecure_ssl_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGlobal_hook_config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobal_hook_config::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_insecure_ssl_isValid = ::OpenAPI::fromJsonValue(m_insecure_ssl, json[QString("insecure_ssl")]);
    m_insecure_ssl_isSet = !json[QString("insecure_ssl")].isNull() && m_insecure_ssl_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGlobal_hook_config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobal_hook_config::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_insecure_ssl_isSet) {
        obj.insert(QString("insecure_ssl"), ::OpenAPI::toJsonValue(m_insecure_ssl));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGlobal_hook_config::getContentType() const {
    return m_content_type;
}
void OAIGlobal_hook_config::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIGlobal_hook_config::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIGlobal_hook_config::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIGlobal_hook_config::getInsecureSsl() const {
    return m_insecure_ssl;
}
void OAIGlobal_hook_config::setInsecureSsl(const QString &insecure_ssl) {
    m_insecure_ssl = insecure_ssl;
    m_insecure_ssl_isSet = true;
}

bool OAIGlobal_hook_config::is_insecure_ssl_Set() const{
    return m_insecure_ssl_isSet;
}

bool OAIGlobal_hook_config::is_insecure_ssl_Valid() const{
    return m_insecure_ssl_isValid;
}

QString OAIGlobal_hook_config::getSecret() const {
    return m_secret;
}
void OAIGlobal_hook_config::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIGlobal_hook_config::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIGlobal_hook_config::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIGlobal_hook_config::getUrl() const {
    return m_url;
}
void OAIGlobal_hook_config::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGlobal_hook_config::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGlobal_hook_config::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGlobal_hook_config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insecure_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobal_hook_config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
