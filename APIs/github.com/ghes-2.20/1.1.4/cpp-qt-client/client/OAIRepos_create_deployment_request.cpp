/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepos_create_deployment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepos_create_deployment_request::OAIRepos_create_deployment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepos_create_deployment_request::OAIRepos_create_deployment_request() {
    this->initializeModel();
}

OAIRepos_create_deployment_request::~OAIRepos_create_deployment_request() {}

void OAIRepos_create_deployment_request::initializeModel() {

    m_auto_merge_isSet = false;
    m_auto_merge_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_production_environment_isSet = false;
    m_production_environment_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_required_contexts_isSet = false;
    m_required_contexts_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_transient_environment_isSet = false;
    m_transient_environment_isValid = false;
}

void OAIRepos_create_deployment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepos_create_deployment_request::fromJsonObject(QJsonObject json) {

    m_auto_merge_isValid = ::OpenAPI::fromJsonValue(m_auto_merge, json[QString("auto_merge")]);
    m_auto_merge_isSet = !json[QString("auto_merge")].isNull() && m_auto_merge_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_production_environment_isValid = ::OpenAPI::fromJsonValue(m_production_environment, json[QString("production_environment")]);
    m_production_environment_isSet = !json[QString("production_environment")].isNull() && m_production_environment_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_required_contexts_isValid = ::OpenAPI::fromJsonValue(m_required_contexts, json[QString("required_contexts")]);
    m_required_contexts_isSet = !json[QString("required_contexts")].isNull() && m_required_contexts_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;

    m_transient_environment_isValid = ::OpenAPI::fromJsonValue(m_transient_environment, json[QString("transient_environment")]);
    m_transient_environment_isSet = !json[QString("transient_environment")].isNull() && m_transient_environment_isValid;
}

QString OAIRepos_create_deployment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepos_create_deployment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_merge_isSet) {
        obj.insert(QString("auto_merge"), ::OpenAPI::toJsonValue(m_auto_merge));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_production_environment_isSet) {
        obj.insert(QString("production_environment"), ::OpenAPI::toJsonValue(m_production_environment));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_required_contexts.size() > 0) {
        obj.insert(QString("required_contexts"), ::OpenAPI::toJsonValue(m_required_contexts));
    }
    if (m_task_isSet) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_transient_environment_isSet) {
        obj.insert(QString("transient_environment"), ::OpenAPI::toJsonValue(m_transient_environment));
    }
    return obj;
}

bool OAIRepos_create_deployment_request::isAutoMerge() const {
    return m_auto_merge;
}
void OAIRepos_create_deployment_request::setAutoMerge(const bool &auto_merge) {
    m_auto_merge = auto_merge;
    m_auto_merge_isSet = true;
}

bool OAIRepos_create_deployment_request::is_auto_merge_Set() const{
    return m_auto_merge_isSet;
}

bool OAIRepos_create_deployment_request::is_auto_merge_Valid() const{
    return m_auto_merge_isValid;
}

QString OAIRepos_create_deployment_request::getDescription() const {
    return m_description;
}
void OAIRepos_create_deployment_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepos_create_deployment_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepos_create_deployment_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRepos_create_deployment_request::getEnvironment() const {
    return m_environment;
}
void OAIRepos_create_deployment_request::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIRepos_create_deployment_request::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIRepos_create_deployment_request::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIRepos_create_deployment_request_payload OAIRepos_create_deployment_request::getPayload() const {
    return m_payload;
}
void OAIRepos_create_deployment_request::setPayload(const OAIRepos_create_deployment_request_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIRepos_create_deployment_request::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIRepos_create_deployment_request::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIRepos_create_deployment_request::isProductionEnvironment() const {
    return m_production_environment;
}
void OAIRepos_create_deployment_request::setProductionEnvironment(const bool &production_environment) {
    m_production_environment = production_environment;
    m_production_environment_isSet = true;
}

bool OAIRepos_create_deployment_request::is_production_environment_Set() const{
    return m_production_environment_isSet;
}

bool OAIRepos_create_deployment_request::is_production_environment_Valid() const{
    return m_production_environment_isValid;
}

QString OAIRepos_create_deployment_request::getRef() const {
    return m_ref;
}
void OAIRepos_create_deployment_request::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIRepos_create_deployment_request::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIRepos_create_deployment_request::is_ref_Valid() const{
    return m_ref_isValid;
}

QList<QString> OAIRepos_create_deployment_request::getRequiredContexts() const {
    return m_required_contexts;
}
void OAIRepos_create_deployment_request::setRequiredContexts(const QList<QString> &required_contexts) {
    m_required_contexts = required_contexts;
    m_required_contexts_isSet = true;
}

bool OAIRepos_create_deployment_request::is_required_contexts_Set() const{
    return m_required_contexts_isSet;
}

bool OAIRepos_create_deployment_request::is_required_contexts_Valid() const{
    return m_required_contexts_isValid;
}

QString OAIRepos_create_deployment_request::getTask() const {
    return m_task;
}
void OAIRepos_create_deployment_request::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIRepos_create_deployment_request::is_task_Set() const{
    return m_task_isSet;
}

bool OAIRepos_create_deployment_request::is_task_Valid() const{
    return m_task_isValid;
}

bool OAIRepos_create_deployment_request::isTransientEnvironment() const {
    return m_transient_environment;
}
void OAIRepos_create_deployment_request::setTransientEnvironment(const bool &transient_environment) {
    m_transient_environment = transient_environment;
    m_transient_environment_isSet = true;
}

bool OAIRepos_create_deployment_request::is_transient_environment_Set() const{
    return m_transient_environment_isSet;
}

bool OAIRepos_create_deployment_request::is_transient_environment_Valid() const{
    return m_transient_environment_isValid;
}

bool OAIRepos_create_deployment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transient_environment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepos_create_deployment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ref_isValid && true;
}

} // namespace OpenAPI
