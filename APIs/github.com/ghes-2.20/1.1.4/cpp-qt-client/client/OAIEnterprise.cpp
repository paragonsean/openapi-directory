/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise::OAIEnterprise(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise::OAIEnterprise() {
    this->initializeModel();
}

OAIEnterprise::~OAIEnterprise() {}

void OAIEnterprise::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIEnterprise::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;
}

QString OAIEnterprise::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIEnterprise::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIEnterprise::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIEnterprise::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIEnterprise::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QDateTime OAIEnterprise::getCreatedAt() const {
    return m_created_at;
}
void OAIEnterprise::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEnterprise::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEnterprise::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEnterprise::getDescription() const {
    return m_description;
}
void OAIEnterprise::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnterprise::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnterprise::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEnterprise::getHtmlUrl() const {
    return m_html_url;
}
void OAIEnterprise::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIEnterprise::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIEnterprise::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIEnterprise::getId() const {
    return m_id;
}
void OAIEnterprise::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnterprise::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnterprise::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEnterprise::getName() const {
    return m_name;
}
void OAIEnterprise::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnterprise::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnterprise::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnterprise::getNodeId() const {
    return m_node_id;
}
void OAIEnterprise::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIEnterprise::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIEnterprise::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIEnterprise::getSlug() const {
    return m_slug;
}
void OAIEnterprise::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIEnterprise::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIEnterprise::is_slug_Valid() const{
    return m_slug_isValid;
}

QDateTime OAIEnterprise::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEnterprise::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEnterprise::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEnterprise::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIEnterprise::getWebsiteUrl() const {
    return m_website_url;
}
void OAIEnterprise::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIEnterprise::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIEnterprise::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIEnterprise::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_url_isValid && m_created_at_isValid && m_html_url_isValid && m_id_isValid && m_name_isValid && m_node_id_isValid && m_slug_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
