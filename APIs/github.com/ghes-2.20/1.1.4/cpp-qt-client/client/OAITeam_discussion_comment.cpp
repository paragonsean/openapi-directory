/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_discussion_comment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_discussion_comment::OAITeam_discussion_comment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_discussion_comment::OAITeam_discussion_comment() {
    this->initializeModel();
}

OAITeam_discussion_comment::~OAITeam_discussion_comment() {}

void OAITeam_discussion_comment::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_html_isSet = false;
    m_body_html_isValid = false;

    m_body_version_isSet = false;
    m_body_version_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_discussion_url_isSet = false;
    m_discussion_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_last_edited_at_isSet = false;
    m_last_edited_at_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITeam_discussion_comment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_discussion_comment::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_html_isValid = ::OpenAPI::fromJsonValue(m_body_html, json[QString("body_html")]);
    m_body_html_isSet = !json[QString("body_html")].isNull() && m_body_html_isValid;

    m_body_version_isValid = ::OpenAPI::fromJsonValue(m_body_version, json[QString("body_version")]);
    m_body_version_isSet = !json[QString("body_version")].isNull() && m_body_version_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_discussion_url_isValid = ::OpenAPI::fromJsonValue(m_discussion_url, json[QString("discussion_url")]);
    m_discussion_url_isSet = !json[QString("discussion_url")].isNull() && m_discussion_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_last_edited_at_isValid = ::OpenAPI::fromJsonValue(m_last_edited_at, json[QString("last_edited_at")]);
    m_last_edited_at_isSet = !json[QString("last_edited_at")].isNull() && m_last_edited_at_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITeam_discussion_comment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_discussion_comment::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_html_isSet) {
        obj.insert(QString("body_html"), ::OpenAPI::toJsonValue(m_body_html));
    }
    if (m_body_version_isSet) {
        obj.insert(QString("body_version"), ::OpenAPI::toJsonValue(m_body_version));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_discussion_url_isSet) {
        obj.insert(QString("discussion_url"), ::OpenAPI::toJsonValue(m_discussion_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_last_edited_at_isSet) {
        obj.insert(QString("last_edited_at"), ::OpenAPI::toJsonValue(m_last_edited_at));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_reactions.isSet()) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAINullable_simple_user OAITeam_discussion_comment::getAuthor() const {
    return m_author;
}
void OAITeam_discussion_comment::setAuthor(const OAINullable_simple_user &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAITeam_discussion_comment::is_author_Set() const{
    return m_author_isSet;
}

bool OAITeam_discussion_comment::is_author_Valid() const{
    return m_author_isValid;
}

QString OAITeam_discussion_comment::getBody() const {
    return m_body;
}
void OAITeam_discussion_comment::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITeam_discussion_comment::is_body_Set() const{
    return m_body_isSet;
}

bool OAITeam_discussion_comment::is_body_Valid() const{
    return m_body_isValid;
}

QString OAITeam_discussion_comment::getBodyHtml() const {
    return m_body_html;
}
void OAITeam_discussion_comment::setBodyHtml(const QString &body_html) {
    m_body_html = body_html;
    m_body_html_isSet = true;
}

bool OAITeam_discussion_comment::is_body_html_Set() const{
    return m_body_html_isSet;
}

bool OAITeam_discussion_comment::is_body_html_Valid() const{
    return m_body_html_isValid;
}

QString OAITeam_discussion_comment::getBodyVersion() const {
    return m_body_version;
}
void OAITeam_discussion_comment::setBodyVersion(const QString &body_version) {
    m_body_version = body_version;
    m_body_version_isSet = true;
}

bool OAITeam_discussion_comment::is_body_version_Set() const{
    return m_body_version_isSet;
}

bool OAITeam_discussion_comment::is_body_version_Valid() const{
    return m_body_version_isValid;
}

QDateTime OAITeam_discussion_comment::getCreatedAt() const {
    return m_created_at;
}
void OAITeam_discussion_comment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITeam_discussion_comment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITeam_discussion_comment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITeam_discussion_comment::getDiscussionUrl() const {
    return m_discussion_url;
}
void OAITeam_discussion_comment::setDiscussionUrl(const QString &discussion_url) {
    m_discussion_url = discussion_url;
    m_discussion_url_isSet = true;
}

bool OAITeam_discussion_comment::is_discussion_url_Set() const{
    return m_discussion_url_isSet;
}

bool OAITeam_discussion_comment::is_discussion_url_Valid() const{
    return m_discussion_url_isValid;
}

QString OAITeam_discussion_comment::getHtmlUrl() const {
    return m_html_url;
}
void OAITeam_discussion_comment::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAITeam_discussion_comment::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAITeam_discussion_comment::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QDateTime OAITeam_discussion_comment::getLastEditedAt() const {
    return m_last_edited_at;
}
void OAITeam_discussion_comment::setLastEditedAt(const QDateTime &last_edited_at) {
    m_last_edited_at = last_edited_at;
    m_last_edited_at_isSet = true;
}

bool OAITeam_discussion_comment::is_last_edited_at_Set() const{
    return m_last_edited_at_isSet;
}

bool OAITeam_discussion_comment::is_last_edited_at_Valid() const{
    return m_last_edited_at_isValid;
}

QString OAITeam_discussion_comment::getNodeId() const {
    return m_node_id;
}
void OAITeam_discussion_comment::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAITeam_discussion_comment::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAITeam_discussion_comment::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAITeam_discussion_comment::getNumber() const {
    return m_number;
}
void OAITeam_discussion_comment::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITeam_discussion_comment::is_number_Set() const{
    return m_number_isSet;
}

bool OAITeam_discussion_comment::is_number_Valid() const{
    return m_number_isValid;
}

OAIReaction_rollup OAITeam_discussion_comment::getReactions() const {
    return m_reactions;
}
void OAITeam_discussion_comment::setReactions(const OAIReaction_rollup &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAITeam_discussion_comment::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAITeam_discussion_comment::is_reactions_Valid() const{
    return m_reactions_isValid;
}

QDateTime OAITeam_discussion_comment::getUpdatedAt() const {
    return m_updated_at;
}
void OAITeam_discussion_comment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITeam_discussion_comment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITeam_discussion_comment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAITeam_discussion_comment::getUrl() const {
    return m_url;
}
void OAITeam_discussion_comment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITeam_discussion_comment::is_url_Set() const{
    return m_url_isSet;
}

bool OAITeam_discussion_comment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITeam_discussion_comment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discussion_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_edited_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_discussion_comment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_author_isValid && m_body_isValid && m_body_html_isValid && m_body_version_isValid && m_created_at_isValid && m_discussion_url_isValid && m_html_url_isValid && m_last_edited_at_isValid && m_node_id_isValid && m_number_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
