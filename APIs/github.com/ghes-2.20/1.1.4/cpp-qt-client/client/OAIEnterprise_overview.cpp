/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_overview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_overview::OAIEnterprise_overview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_overview::OAIEnterprise_overview() {
    this->initializeModel();
}

OAIEnterprise_overview::~OAIEnterprise_overview() {}

void OAIEnterprise_overview::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_gists_isSet = false;
    m_gists_isValid = false;

    m_hooks_isSet = false;
    m_hooks_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_milestones_isSet = false;
    m_milestones_isValid = false;

    m_orgs_isSet = false;
    m_orgs_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_pulls_isSet = false;
    m_pulls_isValid = false;

    m_repos_isSet = false;
    m_repos_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIEnterprise_overview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_overview::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_gists_isValid = ::OpenAPI::fromJsonValue(m_gists, json[QString("gists")]);
    m_gists_isSet = !json[QString("gists")].isNull() && m_gists_isValid;

    m_hooks_isValid = ::OpenAPI::fromJsonValue(m_hooks, json[QString("hooks")]);
    m_hooks_isSet = !json[QString("hooks")].isNull() && m_hooks_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_milestones_isValid = ::OpenAPI::fromJsonValue(m_milestones, json[QString("milestones")]);
    m_milestones_isSet = !json[QString("milestones")].isNull() && m_milestones_isValid;

    m_orgs_isValid = ::OpenAPI::fromJsonValue(m_orgs, json[QString("orgs")]);
    m_orgs_isSet = !json[QString("orgs")].isNull() && m_orgs_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_pulls_isValid = ::OpenAPI::fromJsonValue(m_pulls, json[QString("pulls")]);
    m_pulls_isSet = !json[QString("pulls")].isNull() && m_pulls_isValid;

    m_repos_isValid = ::OpenAPI::fromJsonValue(m_repos, json[QString("repos")]);
    m_repos_isSet = !json[QString("repos")].isNull() && m_repos_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIEnterprise_overview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_overview::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_gists.isSet()) {
        obj.insert(QString("gists"), ::OpenAPI::toJsonValue(m_gists));
    }
    if (m_hooks.isSet()) {
        obj.insert(QString("hooks"), ::OpenAPI::toJsonValue(m_hooks));
    }
    if (m_issues.isSet()) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_milestones.isSet()) {
        obj.insert(QString("milestones"), ::OpenAPI::toJsonValue(m_milestones));
    }
    if (m_orgs.isSet()) {
        obj.insert(QString("orgs"), ::OpenAPI::toJsonValue(m_orgs));
    }
    if (m_pages.isSet()) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_pulls.isSet()) {
        obj.insert(QString("pulls"), ::OpenAPI::toJsonValue(m_pulls));
    }
    if (m_repos.isSet()) {
        obj.insert(QString("repos"), ::OpenAPI::toJsonValue(m_repos));
    }
    if (m_users.isSet()) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

OAIEnterprise_comment_overview OAIEnterprise_overview::getComments() const {
    return m_comments;
}
void OAIEnterprise_overview::setComments(const OAIEnterprise_comment_overview &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIEnterprise_overview::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIEnterprise_overview::is_comments_Valid() const{
    return m_comments_isValid;
}

OAIEnterprise_gist_overview OAIEnterprise_overview::getGists() const {
    return m_gists;
}
void OAIEnterprise_overview::setGists(const OAIEnterprise_gist_overview &gists) {
    m_gists = gists;
    m_gists_isSet = true;
}

bool OAIEnterprise_overview::is_gists_Set() const{
    return m_gists_isSet;
}

bool OAIEnterprise_overview::is_gists_Valid() const{
    return m_gists_isValid;
}

OAIEnterprise_hook_overview OAIEnterprise_overview::getHooks() const {
    return m_hooks;
}
void OAIEnterprise_overview::setHooks(const OAIEnterprise_hook_overview &hooks) {
    m_hooks = hooks;
    m_hooks_isSet = true;
}

bool OAIEnterprise_overview::is_hooks_Set() const{
    return m_hooks_isSet;
}

bool OAIEnterprise_overview::is_hooks_Valid() const{
    return m_hooks_isValid;
}

OAIEnterprise_issue_overview OAIEnterprise_overview::getIssues() const {
    return m_issues;
}
void OAIEnterprise_overview::setIssues(const OAIEnterprise_issue_overview &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIEnterprise_overview::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIEnterprise_overview::is_issues_Valid() const{
    return m_issues_isValid;
}

OAIEnterprise_milestone_overview OAIEnterprise_overview::getMilestones() const {
    return m_milestones;
}
void OAIEnterprise_overview::setMilestones(const OAIEnterprise_milestone_overview &milestones) {
    m_milestones = milestones;
    m_milestones_isSet = true;
}

bool OAIEnterprise_overview::is_milestones_Set() const{
    return m_milestones_isSet;
}

bool OAIEnterprise_overview::is_milestones_Valid() const{
    return m_milestones_isValid;
}

OAIEnterprise_organization_overview OAIEnterprise_overview::getOrgs() const {
    return m_orgs;
}
void OAIEnterprise_overview::setOrgs(const OAIEnterprise_organization_overview &orgs) {
    m_orgs = orgs;
    m_orgs_isSet = true;
}

bool OAIEnterprise_overview::is_orgs_Set() const{
    return m_orgs_isSet;
}

bool OAIEnterprise_overview::is_orgs_Valid() const{
    return m_orgs_isValid;
}

OAIEnterprise_page_overview OAIEnterprise_overview::getPages() const {
    return m_pages;
}
void OAIEnterprise_overview::setPages(const OAIEnterprise_page_overview &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIEnterprise_overview::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIEnterprise_overview::is_pages_Valid() const{
    return m_pages_isValid;
}

OAIEnterprise_pull_request_overview OAIEnterprise_overview::getPulls() const {
    return m_pulls;
}
void OAIEnterprise_overview::setPulls(const OAIEnterprise_pull_request_overview &pulls) {
    m_pulls = pulls;
    m_pulls_isSet = true;
}

bool OAIEnterprise_overview::is_pulls_Set() const{
    return m_pulls_isSet;
}

bool OAIEnterprise_overview::is_pulls_Valid() const{
    return m_pulls_isValid;
}

OAIEnterprise_repository_overview OAIEnterprise_overview::getRepos() const {
    return m_repos;
}
void OAIEnterprise_overview::setRepos(const OAIEnterprise_repository_overview &repos) {
    m_repos = repos;
    m_repos_isSet = true;
}

bool OAIEnterprise_overview::is_repos_Set() const{
    return m_repos_isSet;
}

bool OAIEnterprise_overview::is_repos_Valid() const{
    return m_repos_isValid;
}

OAIEnterprise_user_overview OAIEnterprise_overview::getUsers() const {
    return m_users;
}
void OAIEnterprise_overview::setUsers(const OAIEnterprise_user_overview &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIEnterprise_overview::is_users_Set() const{
    return m_users_isSet;
}

bool OAIEnterprise_overview::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIEnterprise_overview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gists.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orgs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_overview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
