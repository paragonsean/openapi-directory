# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgsUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_email: str=None, blog: str=None, company: str=None, default_repository_permission: str='read', description: str=None, email: str=None, has_organization_projects: bool=None, has_repository_projects: bool=None, location: str=None, members_allowed_repository_creation_type: str=None, members_can_create_internal_repositories: bool=None, members_can_create_private_repositories: bool=None, members_can_create_public_repositories: bool=None, members_can_create_repositories: bool=True, name: str=None, twitter_username: str=None):
        """OrgsUpdateRequest - a model defined in OpenAPI

        :param billing_email: The billing_email of this OrgsUpdateRequest.
        :param blog: The blog of this OrgsUpdateRequest.
        :param company: The company of this OrgsUpdateRequest.
        :param default_repository_permission: The default_repository_permission of this OrgsUpdateRequest.
        :param description: The description of this OrgsUpdateRequest.
        :param email: The email of this OrgsUpdateRequest.
        :param has_organization_projects: The has_organization_projects of this OrgsUpdateRequest.
        :param has_repository_projects: The has_repository_projects of this OrgsUpdateRequest.
        :param location: The location of this OrgsUpdateRequest.
        :param members_allowed_repository_creation_type: The members_allowed_repository_creation_type of this OrgsUpdateRequest.
        :param members_can_create_internal_repositories: The members_can_create_internal_repositories of this OrgsUpdateRequest.
        :param members_can_create_private_repositories: The members_can_create_private_repositories of this OrgsUpdateRequest.
        :param members_can_create_public_repositories: The members_can_create_public_repositories of this OrgsUpdateRequest.
        :param members_can_create_repositories: The members_can_create_repositories of this OrgsUpdateRequest.
        :param name: The name of this OrgsUpdateRequest.
        :param twitter_username: The twitter_username of this OrgsUpdateRequest.
        """
        self.openapi_types = {
            'billing_email': str,
            'blog': str,
            'company': str,
            'default_repository_permission': str,
            'description': str,
            'email': str,
            'has_organization_projects': bool,
            'has_repository_projects': bool,
            'location': str,
            'members_allowed_repository_creation_type': str,
            'members_can_create_internal_repositories': bool,
            'members_can_create_private_repositories': bool,
            'members_can_create_public_repositories': bool,
            'members_can_create_repositories': bool,
            'name': str,
            'twitter_username': str
        }

        self.attribute_map = {
            'billing_email': 'billing_email',
            'blog': 'blog',
            'company': 'company',
            'default_repository_permission': 'default_repository_permission',
            'description': 'description',
            'email': 'email',
            'has_organization_projects': 'has_organization_projects',
            'has_repository_projects': 'has_repository_projects',
            'location': 'location',
            'members_allowed_repository_creation_type': 'members_allowed_repository_creation_type',
            'members_can_create_internal_repositories': 'members_can_create_internal_repositories',
            'members_can_create_private_repositories': 'members_can_create_private_repositories',
            'members_can_create_public_repositories': 'members_can_create_public_repositories',
            'members_can_create_repositories': 'members_can_create_repositories',
            'name': 'name',
            'twitter_username': 'twitter_username'
        }

        self._billing_email = billing_email
        self._blog = blog
        self._company = company
        self._default_repository_permission = default_repository_permission
        self._description = description
        self._email = email
        self._has_organization_projects = has_organization_projects
        self._has_repository_projects = has_repository_projects
        self._location = location
        self._members_allowed_repository_creation_type = members_allowed_repository_creation_type
        self._members_can_create_internal_repositories = members_can_create_internal_repositories
        self._members_can_create_private_repositories = members_can_create_private_repositories
        self._members_can_create_public_repositories = members_can_create_public_repositories
        self._members_can_create_repositories = members_can_create_repositories
        self._name = name
        self._twitter_username = twitter_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgsUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orgs_update_request of this OrgsUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_email(self):
        """Gets the billing_email of this OrgsUpdateRequest.

        Billing email address. This address is not publicized.

        :return: The billing_email of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """Sets the billing_email of this OrgsUpdateRequest.

        Billing email address. This address is not publicized.

        :param billing_email: The billing_email of this OrgsUpdateRequest.
        :type billing_email: str
        """

        self._billing_email = billing_email

    @property
    def blog(self):
        """Gets the blog of this OrgsUpdateRequest.


        :return: The blog of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this OrgsUpdateRequest.


        :param blog: The blog of this OrgsUpdateRequest.
        :type blog: str
        """

        self._blog = blog

    @property
    def company(self):
        """Gets the company of this OrgsUpdateRequest.

        The company name.

        :return: The company of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this OrgsUpdateRequest.

        The company name.

        :param company: The company of this OrgsUpdateRequest.
        :type company: str
        """

        self._company = company

    @property
    def default_repository_permission(self):
        """Gets the default_repository_permission of this OrgsUpdateRequest.

        Default permission level members have for organization repositories:   \\* `read` - can pull, but not push to or administer this repository.   \\* `write` - can pull and push, but not administer this repository.   \\* `admin` - can pull, push, and administer this repository.   \\* `none` - no permissions granted by default.

        :return: The default_repository_permission of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._default_repository_permission

    @default_repository_permission.setter
    def default_repository_permission(self, default_repository_permission):
        """Sets the default_repository_permission of this OrgsUpdateRequest.

        Default permission level members have for organization repositories:   \\* `read` - can pull, but not push to or administer this repository.   \\* `write` - can pull and push, but not administer this repository.   \\* `admin` - can pull, push, and administer this repository.   \\* `none` - no permissions granted by default.

        :param default_repository_permission: The default_repository_permission of this OrgsUpdateRequest.
        :type default_repository_permission: str
        """
        allowed_values = ["read", "write", "admin", "none"]  # noqa: E501
        if default_repository_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `default_repository_permission` ({0}), must be one of {1}"
                .format(default_repository_permission, allowed_values)
            )

        self._default_repository_permission = default_repository_permission

    @property
    def description(self):
        """Gets the description of this OrgsUpdateRequest.

        The description of the company.

        :return: The description of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrgsUpdateRequest.

        The description of the company.

        :param description: The description of this OrgsUpdateRequest.
        :type description: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this OrgsUpdateRequest.

        The publicly visible email address.

        :return: The email of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrgsUpdateRequest.

        The publicly visible email address.

        :param email: The email of this OrgsUpdateRequest.
        :type email: str
        """

        self._email = email

    @property
    def has_organization_projects(self):
        """Gets the has_organization_projects of this OrgsUpdateRequest.

        Toggles whether an organization can use organization projects.

        :return: The has_organization_projects of this OrgsUpdateRequest.
        :rtype: bool
        """
        return self._has_organization_projects

    @has_organization_projects.setter
    def has_organization_projects(self, has_organization_projects):
        """Sets the has_organization_projects of this OrgsUpdateRequest.

        Toggles whether an organization can use organization projects.

        :param has_organization_projects: The has_organization_projects of this OrgsUpdateRequest.
        :type has_organization_projects: bool
        """

        self._has_organization_projects = has_organization_projects

    @property
    def has_repository_projects(self):
        """Gets the has_repository_projects of this OrgsUpdateRequest.

        Toggles whether repositories that belong to the organization can use repository projects.

        :return: The has_repository_projects of this OrgsUpdateRequest.
        :rtype: bool
        """
        return self._has_repository_projects

    @has_repository_projects.setter
    def has_repository_projects(self, has_repository_projects):
        """Sets the has_repository_projects of this OrgsUpdateRequest.

        Toggles whether repositories that belong to the organization can use repository projects.

        :param has_repository_projects: The has_repository_projects of this OrgsUpdateRequest.
        :type has_repository_projects: bool
        """

        self._has_repository_projects = has_repository_projects

    @property
    def location(self):
        """Gets the location of this OrgsUpdateRequest.

        The location.

        :return: The location of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this OrgsUpdateRequest.

        The location.

        :param location: The location of this OrgsUpdateRequest.
        :type location: str
        """

        self._location = location

    @property
    def members_allowed_repository_creation_type(self):
        """Gets the members_allowed_repository_creation_type of this OrgsUpdateRequest.

        Specifies which types of repositories non-admin organization members can create. Can be one of:   \\* `all` - all organization members can create public and private repositories.   \\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.   \\* `none` - only admin members can create repositories.   **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.

        :return: The members_allowed_repository_creation_type of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._members_allowed_repository_creation_type

    @members_allowed_repository_creation_type.setter
    def members_allowed_repository_creation_type(self, members_allowed_repository_creation_type):
        """Sets the members_allowed_repository_creation_type of this OrgsUpdateRequest.

        Specifies which types of repositories non-admin organization members can create. Can be one of:   \\* `all` - all organization members can create public and private repositories.   \\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.   \\* `none` - only admin members can create repositories.   **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.

        :param members_allowed_repository_creation_type: The members_allowed_repository_creation_type of this OrgsUpdateRequest.
        :type members_allowed_repository_creation_type: str
        """
        allowed_values = ["all", "private", "none"]  # noqa: E501
        if members_allowed_repository_creation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `members_allowed_repository_creation_type` ({0}), must be one of {1}"
                .format(members_allowed_repository_creation_type, allowed_values)
            )

        self._members_allowed_repository_creation_type = members_allowed_repository_creation_type

    @property
    def members_can_create_internal_repositories(self):
        """Gets the members_can_create_internal_repositories of this OrgsUpdateRequest.

        Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:   \\* `true` - all organization members can create internal repositories.   \\* `false` - only organization owners can create internal repositories.   Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.

        :return: The members_can_create_internal_repositories of this OrgsUpdateRequest.
        :rtype: bool
        """
        return self._members_can_create_internal_repositories

    @members_can_create_internal_repositories.setter
    def members_can_create_internal_repositories(self, members_can_create_internal_repositories):
        """Sets the members_can_create_internal_repositories of this OrgsUpdateRequest.

        Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:   \\* `true` - all organization members can create internal repositories.   \\* `false` - only organization owners can create internal repositories.   Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.

        :param members_can_create_internal_repositories: The members_can_create_internal_repositories of this OrgsUpdateRequest.
        :type members_can_create_internal_repositories: bool
        """

        self._members_can_create_internal_repositories = members_can_create_internal_repositories

    @property
    def members_can_create_private_repositories(self):
        """Gets the members_can_create_private_repositories of this OrgsUpdateRequest.

        Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:   \\* `true` - all organization members can create private repositories.   \\* `false` - only organization owners can create private repositories.   Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.

        :return: The members_can_create_private_repositories of this OrgsUpdateRequest.
        :rtype: bool
        """
        return self._members_can_create_private_repositories

    @members_can_create_private_repositories.setter
    def members_can_create_private_repositories(self, members_can_create_private_repositories):
        """Sets the members_can_create_private_repositories of this OrgsUpdateRequest.

        Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:   \\* `true` - all organization members can create private repositories.   \\* `false` - only organization owners can create private repositories.   Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.

        :param members_can_create_private_repositories: The members_can_create_private_repositories of this OrgsUpdateRequest.
        :type members_can_create_private_repositories: bool
        """

        self._members_can_create_private_repositories = members_can_create_private_repositories

    @property
    def members_can_create_public_repositories(self):
        """Gets the members_can_create_public_repositories of this OrgsUpdateRequest.

        Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:   \\* `true` - all organization members can create public repositories.   \\* `false` - only organization owners can create public repositories.   Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.

        :return: The members_can_create_public_repositories of this OrgsUpdateRequest.
        :rtype: bool
        """
        return self._members_can_create_public_repositories

    @members_can_create_public_repositories.setter
    def members_can_create_public_repositories(self, members_can_create_public_repositories):
        """Sets the members_can_create_public_repositories of this OrgsUpdateRequest.

        Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:   \\* `true` - all organization members can create public repositories.   \\* `false` - only organization owners can create public repositories.   Default: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.

        :param members_can_create_public_repositories: The members_can_create_public_repositories of this OrgsUpdateRequest.
        :type members_can_create_public_repositories: bool
        """

        self._members_can_create_public_repositories = members_can_create_public_repositories

    @property
    def members_can_create_repositories(self):
        """Gets the members_can_create_repositories of this OrgsUpdateRequest.

        Toggles the ability of non-admin organization members to create repositories. Can be one of:   \\* `true` - all organization members can create repositories.   \\* `false` - only organization owners can create repositories.   Default: `true`   **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.

        :return: The members_can_create_repositories of this OrgsUpdateRequest.
        :rtype: bool
        """
        return self._members_can_create_repositories

    @members_can_create_repositories.setter
    def members_can_create_repositories(self, members_can_create_repositories):
        """Sets the members_can_create_repositories of this OrgsUpdateRequest.

        Toggles the ability of non-admin organization members to create repositories. Can be one of:   \\* `true` - all organization members can create repositories.   \\* `false` - only organization owners can create repositories.   Default: `true`   **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.

        :param members_can_create_repositories: The members_can_create_repositories of this OrgsUpdateRequest.
        :type members_can_create_repositories: bool
        """

        self._members_can_create_repositories = members_can_create_repositories

    @property
    def name(self):
        """Gets the name of this OrgsUpdateRequest.

        The shorthand name of the company.

        :return: The name of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrgsUpdateRequest.

        The shorthand name of the company.

        :param name: The name of this OrgsUpdateRequest.
        :type name: str
        """

        self._name = name

    @property
    def twitter_username(self):
        """Gets the twitter_username of this OrgsUpdateRequest.

        The Twitter username of the company.

        :return: The twitter_username of this OrgsUpdateRequest.
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this OrgsUpdateRequest.

        The Twitter username of the company.

        :param twitter_username: The twitter_username of this OrgsUpdateRequest.
        :type twitter_username: str
        """

        self._twitter_username = twitter_username
