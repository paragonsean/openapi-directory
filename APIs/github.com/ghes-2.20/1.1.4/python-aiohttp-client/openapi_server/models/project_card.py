# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class ProjectCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, column_name: str=None, column_url: str=None, content_url: str=None, created_at: datetime=None, creator: NullableSimpleUser=None, id: int=None, node_id: str=None, note: str=None, project_id: str=None, project_url: str=None, updated_at: datetime=None, url: str=None):
        """ProjectCard - a model defined in OpenAPI

        :param archived: The archived of this ProjectCard.
        :param column_name: The column_name of this ProjectCard.
        :param column_url: The column_url of this ProjectCard.
        :param content_url: The content_url of this ProjectCard.
        :param created_at: The created_at of this ProjectCard.
        :param creator: The creator of this ProjectCard.
        :param id: The id of this ProjectCard.
        :param node_id: The node_id of this ProjectCard.
        :param note: The note of this ProjectCard.
        :param project_id: The project_id of this ProjectCard.
        :param project_url: The project_url of this ProjectCard.
        :param updated_at: The updated_at of this ProjectCard.
        :param url: The url of this ProjectCard.
        """
        self.openapi_types = {
            'archived': bool,
            'column_name': str,
            'column_url': str,
            'content_url': str,
            'created_at': datetime,
            'creator': NullableSimpleUser,
            'id': int,
            'node_id': str,
            'note': str,
            'project_id': str,
            'project_url': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'column_name': 'column_name',
            'column_url': 'column_url',
            'content_url': 'content_url',
            'created_at': 'created_at',
            'creator': 'creator',
            'id': 'id',
            'node_id': 'node_id',
            'note': 'note',
            'project_id': 'project_id',
            'project_url': 'project_url',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._archived = archived
        self._column_name = column_name
        self._column_url = column_url
        self._content_url = content_url
        self._created_at = created_at
        self._creator = creator
        self._id = id
        self._node_id = node_id
        self._note = note
        self._project_id = project_id
        self._project_url = project_url
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The project-card of this ProjectCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this ProjectCard.

        Whether or not the card is archived

        :return: The archived of this ProjectCard.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ProjectCard.

        Whether or not the card is archived

        :param archived: The archived of this ProjectCard.
        :type archived: bool
        """

        self._archived = archived

    @property
    def column_name(self):
        """Gets the column_name of this ProjectCard.


        :return: The column_name of this ProjectCard.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this ProjectCard.


        :param column_name: The column_name of this ProjectCard.
        :type column_name: str
        """

        self._column_name = column_name

    @property
    def column_url(self):
        """Gets the column_url of this ProjectCard.


        :return: The column_url of this ProjectCard.
        :rtype: str
        """
        return self._column_url

    @column_url.setter
    def column_url(self, column_url):
        """Sets the column_url of this ProjectCard.


        :param column_url: The column_url of this ProjectCard.
        :type column_url: str
        """
        if column_url is None:
            raise ValueError("Invalid value for `column_url`, must not be `None`")

        self._column_url = column_url

    @property
    def content_url(self):
        """Gets the content_url of this ProjectCard.


        :return: The content_url of this ProjectCard.
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this ProjectCard.


        :param content_url: The content_url of this ProjectCard.
        :type content_url: str
        """

        self._content_url = content_url

    @property
    def created_at(self):
        """Gets the created_at of this ProjectCard.


        :return: The created_at of this ProjectCard.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProjectCard.


        :param created_at: The created_at of this ProjectCard.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this ProjectCard.


        :return: The creator of this ProjectCard.
        :rtype: NullableSimpleUser
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ProjectCard.


        :param creator: The creator of this ProjectCard.
        :type creator: NullableSimpleUser
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def id(self):
        """Gets the id of this ProjectCard.

        The project card's ID

        :return: The id of this ProjectCard.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectCard.

        The project card's ID

        :param id: The id of this ProjectCard.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this ProjectCard.


        :return: The node_id of this ProjectCard.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ProjectCard.


        :param node_id: The node_id of this ProjectCard.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def note(self):
        """Gets the note of this ProjectCard.


        :return: The note of this ProjectCard.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ProjectCard.


        :param note: The note of this ProjectCard.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def project_id(self):
        """Gets the project_id of this ProjectCard.


        :return: The project_id of this ProjectCard.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectCard.


        :param project_id: The project_id of this ProjectCard.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_url(self):
        """Gets the project_url of this ProjectCard.


        :return: The project_url of this ProjectCard.
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this ProjectCard.


        :param project_url: The project_url of this ProjectCard.
        :type project_url: str
        """
        if project_url is None:
            raise ValueError("Invalid value for `project_url`, must not be `None`")

        self._project_url = project_url

    @property
    def updated_at(self):
        """Gets the updated_at of this ProjectCard.


        :return: The updated_at of this ProjectCard.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProjectCard.


        :param updated_at: The updated_at of this ProjectCard.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this ProjectCard.


        :return: The url of this ProjectCard.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProjectCard.


        :param url: The url of this ProjectCard.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
