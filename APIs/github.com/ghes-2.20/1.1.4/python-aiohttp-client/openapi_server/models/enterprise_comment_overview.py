# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseCommentOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_commit_comments: int=None, total_gist_comments: int=None, total_issue_comments: int=None, total_pull_request_comments: int=None):
        """EnterpriseCommentOverview - a model defined in OpenAPI

        :param total_commit_comments: The total_commit_comments of this EnterpriseCommentOverview.
        :param total_gist_comments: The total_gist_comments of this EnterpriseCommentOverview.
        :param total_issue_comments: The total_issue_comments of this EnterpriseCommentOverview.
        :param total_pull_request_comments: The total_pull_request_comments of this EnterpriseCommentOverview.
        """
        self.openapi_types = {
            'total_commit_comments': int,
            'total_gist_comments': int,
            'total_issue_comments': int,
            'total_pull_request_comments': int
        }

        self.attribute_map = {
            'total_commit_comments': 'total_commit_comments',
            'total_gist_comments': 'total_gist_comments',
            'total_issue_comments': 'total_issue_comments',
            'total_pull_request_comments': 'total_pull_request_comments'
        }

        self._total_commit_comments = total_commit_comments
        self._total_gist_comments = total_gist_comments
        self._total_issue_comments = total_issue_comments
        self._total_pull_request_comments = total_pull_request_comments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseCommentOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-comment-overview of this EnterpriseCommentOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_commit_comments(self):
        """Gets the total_commit_comments of this EnterpriseCommentOverview.


        :return: The total_commit_comments of this EnterpriseCommentOverview.
        :rtype: int
        """
        return self._total_commit_comments

    @total_commit_comments.setter
    def total_commit_comments(self, total_commit_comments):
        """Sets the total_commit_comments of this EnterpriseCommentOverview.


        :param total_commit_comments: The total_commit_comments of this EnterpriseCommentOverview.
        :type total_commit_comments: int
        """
        if total_commit_comments is None:
            raise ValueError("Invalid value for `total_commit_comments`, must not be `None`")

        self._total_commit_comments = total_commit_comments

    @property
    def total_gist_comments(self):
        """Gets the total_gist_comments of this EnterpriseCommentOverview.


        :return: The total_gist_comments of this EnterpriseCommentOverview.
        :rtype: int
        """
        return self._total_gist_comments

    @total_gist_comments.setter
    def total_gist_comments(self, total_gist_comments):
        """Sets the total_gist_comments of this EnterpriseCommentOverview.


        :param total_gist_comments: The total_gist_comments of this EnterpriseCommentOverview.
        :type total_gist_comments: int
        """
        if total_gist_comments is None:
            raise ValueError("Invalid value for `total_gist_comments`, must not be `None`")

        self._total_gist_comments = total_gist_comments

    @property
    def total_issue_comments(self):
        """Gets the total_issue_comments of this EnterpriseCommentOverview.


        :return: The total_issue_comments of this EnterpriseCommentOverview.
        :rtype: int
        """
        return self._total_issue_comments

    @total_issue_comments.setter
    def total_issue_comments(self, total_issue_comments):
        """Sets the total_issue_comments of this EnterpriseCommentOverview.


        :param total_issue_comments: The total_issue_comments of this EnterpriseCommentOverview.
        :type total_issue_comments: int
        """
        if total_issue_comments is None:
            raise ValueError("Invalid value for `total_issue_comments`, must not be `None`")

        self._total_issue_comments = total_issue_comments

    @property
    def total_pull_request_comments(self):
        """Gets the total_pull_request_comments of this EnterpriseCommentOverview.


        :return: The total_pull_request_comments of this EnterpriseCommentOverview.
        :rtype: int
        """
        return self._total_pull_request_comments

    @total_pull_request_comments.setter
    def total_pull_request_comments(self, total_pull_request_comments):
        """Sets the total_pull_request_comments of this EnterpriseCommentOverview.


        :param total_pull_request_comments: The total_pull_request_comments of this EnterpriseCommentOverview.
        :type total_pull_request_comments: int
        """
        if total_pull_request_comments is None:
            raise ValueError("Invalid value for `total_pull_request_comments`, must not be `None`")

        self._total_pull_request_comments = total_pull_request_comments
