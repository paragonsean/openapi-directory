# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgsSetMembershipForUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role: str='member'):
        """OrgsSetMembershipForUserRequest - a model defined in OpenAPI

        :param role: The role of this OrgsSetMembershipForUserRequest.
        """
        self.openapi_types = {
            'role': str
        }

        self.attribute_map = {
            'role': 'role'
        }

        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgsSetMembershipForUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orgs_set_membership_for_user_request of this OrgsSetMembershipForUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self):
        """Gets the role of this OrgsSetMembershipForUserRequest.

        The role to give the user in the organization. Can be one of:   \\* `admin` - The user will become an owner of the organization.   \\* `member` - The user will become a non-owner member of the organization.

        :return: The role of this OrgsSetMembershipForUserRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrgsSetMembershipForUserRequest.

        The role to give the user in the organization. Can be one of:   \\* `admin` - The user will become an owner of the organization.   \\* `member` - The user will become a non-owner member of the organization.

        :param role: The role of this OrgsSetMembershipForUserRequest.
        :type role: str
        """
        allowed_values = ["admin", "member"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
