# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_team_simple import NullableTeamSimple
from openapi_server.models.organization_full import OrganizationFull
from openapi_server import util


class TeamFull(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, html_url: str=None, id: int=None, ldap_dn: str=None, members_count: int=None, members_url: str=None, name: str=None, node_id: str=None, organization: OrganizationFull=None, parent: NullableTeamSimple=None, permission: str=None, privacy: str=None, repos_count: int=None, repositories_url: str=None, slug: str=None, updated_at: datetime=None, url: str=None):
        """TeamFull - a model defined in OpenAPI

        :param created_at: The created_at of this TeamFull.
        :param description: The description of this TeamFull.
        :param html_url: The html_url of this TeamFull.
        :param id: The id of this TeamFull.
        :param ldap_dn: The ldap_dn of this TeamFull.
        :param members_count: The members_count of this TeamFull.
        :param members_url: The members_url of this TeamFull.
        :param name: The name of this TeamFull.
        :param node_id: The node_id of this TeamFull.
        :param organization: The organization of this TeamFull.
        :param parent: The parent of this TeamFull.
        :param permission: The permission of this TeamFull.
        :param privacy: The privacy of this TeamFull.
        :param repos_count: The repos_count of this TeamFull.
        :param repositories_url: The repositories_url of this TeamFull.
        :param slug: The slug of this TeamFull.
        :param updated_at: The updated_at of this TeamFull.
        :param url: The url of this TeamFull.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'html_url': str,
            'id': int,
            'ldap_dn': str,
            'members_count': int,
            'members_url': str,
            'name': str,
            'node_id': str,
            'organization': OrganizationFull,
            'parent': NullableTeamSimple,
            'permission': str,
            'privacy': str,
            'repos_count': int,
            'repositories_url': str,
            'slug': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'html_url': 'html_url',
            'id': 'id',
            'ldap_dn': 'ldap_dn',
            'members_count': 'members_count',
            'members_url': 'members_url',
            'name': 'name',
            'node_id': 'node_id',
            'organization': 'organization',
            'parent': 'parent',
            'permission': 'permission',
            'privacy': 'privacy',
            'repos_count': 'repos_count',
            'repositories_url': 'repositories_url',
            'slug': 'slug',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._created_at = created_at
        self._description = description
        self._html_url = html_url
        self._id = id
        self._ldap_dn = ldap_dn
        self._members_count = members_count
        self._members_url = members_url
        self._name = name
        self._node_id = node_id
        self._organization = organization
        self._parent = parent
        self._permission = permission
        self._privacy = privacy
        self._repos_count = repos_count
        self._repositories_url = repositories_url
        self._slug = slug
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team-full of this TeamFull.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this TeamFull.


        :return: The created_at of this TeamFull.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamFull.


        :param created_at: The created_at of this TeamFull.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this TeamFull.


        :return: The description of this TeamFull.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TeamFull.


        :param description: The description of this TeamFull.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def html_url(self):
        """Gets the html_url of this TeamFull.


        :return: The html_url of this TeamFull.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TeamFull.


        :param html_url: The html_url of this TeamFull.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this TeamFull.

        Unique identifier of the team

        :return: The id of this TeamFull.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamFull.

        Unique identifier of the team

        :param id: The id of this TeamFull.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ldap_dn(self):
        """Gets the ldap_dn of this TeamFull.

        Distinguished Name (DN) that team maps to within LDAP environment

        :return: The ldap_dn of this TeamFull.
        :rtype: str
        """
        return self._ldap_dn

    @ldap_dn.setter
    def ldap_dn(self, ldap_dn):
        """Sets the ldap_dn of this TeamFull.

        Distinguished Name (DN) that team maps to within LDAP environment

        :param ldap_dn: The ldap_dn of this TeamFull.
        :type ldap_dn: str
        """

        self._ldap_dn = ldap_dn

    @property
    def members_count(self):
        """Gets the members_count of this TeamFull.


        :return: The members_count of this TeamFull.
        :rtype: int
        """
        return self._members_count

    @members_count.setter
    def members_count(self, members_count):
        """Sets the members_count of this TeamFull.


        :param members_count: The members_count of this TeamFull.
        :type members_count: int
        """
        if members_count is None:
            raise ValueError("Invalid value for `members_count`, must not be `None`")

        self._members_count = members_count

    @property
    def members_url(self):
        """Gets the members_url of this TeamFull.


        :return: The members_url of this TeamFull.
        :rtype: str
        """
        return self._members_url

    @members_url.setter
    def members_url(self, members_url):
        """Sets the members_url of this TeamFull.


        :param members_url: The members_url of this TeamFull.
        :type members_url: str
        """
        if members_url is None:
            raise ValueError("Invalid value for `members_url`, must not be `None`")

        self._members_url = members_url

    @property
    def name(self):
        """Gets the name of this TeamFull.

        Name of the team

        :return: The name of this TeamFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamFull.

        Name of the team

        :param name: The name of this TeamFull.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this TeamFull.


        :return: The node_id of this TeamFull.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TeamFull.


        :param node_id: The node_id of this TeamFull.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def organization(self):
        """Gets the organization of this TeamFull.


        :return: The organization of this TeamFull.
        :rtype: OrganizationFull
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this TeamFull.


        :param organization: The organization of this TeamFull.
        :type organization: OrganizationFull
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")

        self._organization = organization

    @property
    def parent(self):
        """Gets the parent of this TeamFull.


        :return: The parent of this TeamFull.
        :rtype: NullableTeamSimple
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TeamFull.


        :param parent: The parent of this TeamFull.
        :type parent: NullableTeamSimple
        """

        self._parent = parent

    @property
    def permission(self):
        """Gets the permission of this TeamFull.

        Permission that the team will have for its repositories

        :return: The permission of this TeamFull.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this TeamFull.

        Permission that the team will have for its repositories

        :param permission: The permission of this TeamFull.
        :type permission: str
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission

    @property
    def privacy(self):
        """Gets the privacy of this TeamFull.

        The level of privacy this team should have

        :return: The privacy of this TeamFull.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this TeamFull.

        The level of privacy this team should have

        :param privacy: The privacy of this TeamFull.
        :type privacy: str
        """
        allowed_values = ["closed", "secret"]  # noqa: E501
        if privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy` ({0}), must be one of {1}"
                .format(privacy, allowed_values)
            )

        self._privacy = privacy

    @property
    def repos_count(self):
        """Gets the repos_count of this TeamFull.


        :return: The repos_count of this TeamFull.
        :rtype: int
        """
        return self._repos_count

    @repos_count.setter
    def repos_count(self, repos_count):
        """Sets the repos_count of this TeamFull.


        :param repos_count: The repos_count of this TeamFull.
        :type repos_count: int
        """
        if repos_count is None:
            raise ValueError("Invalid value for `repos_count`, must not be `None`")

        self._repos_count = repos_count

    @property
    def repositories_url(self):
        """Gets the repositories_url of this TeamFull.


        :return: The repositories_url of this TeamFull.
        :rtype: str
        """
        return self._repositories_url

    @repositories_url.setter
    def repositories_url(self, repositories_url):
        """Sets the repositories_url of this TeamFull.


        :param repositories_url: The repositories_url of this TeamFull.
        :type repositories_url: str
        """
        if repositories_url is None:
            raise ValueError("Invalid value for `repositories_url`, must not be `None`")

        self._repositories_url = repositories_url

    @property
    def slug(self):
        """Gets the slug of this TeamFull.


        :return: The slug of this TeamFull.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this TeamFull.


        :param slug: The slug of this TeamFull.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def updated_at(self):
        """Gets the updated_at of this TeamFull.


        :return: The updated_at of this TeamFull.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TeamFull.


        :param updated_at: The updated_at of this TeamFull.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this TeamFull.

        URL for the team

        :return: The url of this TeamFull.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TeamFull.

        URL for the team

        :param url: The url of this TeamFull.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
