# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullsRemoveRequestedReviewersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reviewers: List[str]=None, team_reviewers: List[str]=None):
        """PullsRemoveRequestedReviewersRequest - a model defined in OpenAPI

        :param reviewers: The reviewers of this PullsRemoveRequestedReviewersRequest.
        :param team_reviewers: The team_reviewers of this PullsRemoveRequestedReviewersRequest.
        """
        self.openapi_types = {
            'reviewers': List[str],
            'team_reviewers': List[str]
        }

        self.attribute_map = {
            'reviewers': 'reviewers',
            'team_reviewers': 'team_reviewers'
        }

        self._reviewers = reviewers
        self._team_reviewers = team_reviewers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullsRemoveRequestedReviewersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pulls_remove_requested_reviewers_request of this PullsRemoveRequestedReviewersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reviewers(self):
        """Gets the reviewers of this PullsRemoveRequestedReviewersRequest.

        An array of user `login`s that will be removed.

        :return: The reviewers of this PullsRemoveRequestedReviewersRequest.
        :rtype: List[str]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this PullsRemoveRequestedReviewersRequest.

        An array of user `login`s that will be removed.

        :param reviewers: The reviewers of this PullsRemoveRequestedReviewersRequest.
        :type reviewers: List[str]
        """
        if reviewers is None:
            raise ValueError("Invalid value for `reviewers`, must not be `None`")

        self._reviewers = reviewers

    @property
    def team_reviewers(self):
        """Gets the team_reviewers of this PullsRemoveRequestedReviewersRequest.

        An array of team `slug`s that will be removed.

        :return: The team_reviewers of this PullsRemoveRequestedReviewersRequest.
        :rtype: List[str]
        """
        return self._team_reviewers

    @team_reviewers.setter
    def team_reviewers(self, team_reviewers):
        """Sets the team_reviewers of this PullsRemoveRequestedReviewersRequest.

        An array of team `slug`s that will be removed.

        :param team_reviewers: The team_reviewers of this PullsRemoveRequestedReviewersRequest.
        :type team_reviewers: List[str]
        """

        self._team_reviewers = team_reviewers
