# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.checks_create_request_output_annotations_inner import ChecksCreateRequestOutputAnnotationsInner
from openapi_server.models.checks_create_request_output_images_inner import ChecksCreateRequestOutputImagesInner
from openapi_server import util


class ChecksUpdateRequestOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: List[ChecksCreateRequestOutputAnnotationsInner]=None, images: List[ChecksCreateRequestOutputImagesInner]=None, summary: str=None, text: str=None, title: str=None):
        """ChecksUpdateRequestOutput - a model defined in OpenAPI

        :param annotations: The annotations of this ChecksUpdateRequestOutput.
        :param images: The images of this ChecksUpdateRequestOutput.
        :param summary: The summary of this ChecksUpdateRequestOutput.
        :param text: The text of this ChecksUpdateRequestOutput.
        :param title: The title of this ChecksUpdateRequestOutput.
        """
        self.openapi_types = {
            'annotations': List[ChecksCreateRequestOutputAnnotationsInner],
            'images': List[ChecksCreateRequestOutputImagesInner],
            'summary': str,
            'text': str,
            'title': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'images': 'images',
            'summary': 'summary',
            'text': 'text',
            'title': 'title'
        }

        self._annotations = annotations
        self._images = images
        self._summary = summary
        self._text = text
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChecksUpdateRequestOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The checks_update_request_output of this ChecksUpdateRequestOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this ChecksUpdateRequestOutput.

        Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@2.20/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://docs.github.com/enterprise-server@2.20/rest/reference/checks#annotations-object-1) description for details.

        :return: The annotations of this ChecksUpdateRequestOutput.
        :rtype: List[ChecksCreateRequestOutputAnnotationsInner]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ChecksUpdateRequestOutput.

        Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@2.20/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://docs.github.com/enterprise-server@2.20/rest/reference/checks#annotations-object-1) description for details.

        :param annotations: The annotations of this ChecksUpdateRequestOutput.
        :type annotations: List[ChecksCreateRequestOutputAnnotationsInner]
        """
        if annotations is not None and len(annotations) > 50:
            raise ValueError("Invalid value for `annotations`, number of items must be less than or equal to `50`")

        self._annotations = annotations

    @property
    def images(self):
        """Gets the images of this ChecksUpdateRequestOutput.

        Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@2.20/rest/reference/checks#annotations-object-1) description for details.

        :return: The images of this ChecksUpdateRequestOutput.
        :rtype: List[ChecksCreateRequestOutputImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ChecksUpdateRequestOutput.

        Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@2.20/rest/reference/checks#annotations-object-1) description for details.

        :param images: The images of this ChecksUpdateRequestOutput.
        :type images: List[ChecksCreateRequestOutputImagesInner]
        """

        self._images = images

    @property
    def summary(self):
        """Gets the summary of this ChecksUpdateRequestOutput.

        Can contain Markdown.

        :return: The summary of this ChecksUpdateRequestOutput.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ChecksUpdateRequestOutput.

        Can contain Markdown.

        :param summary: The summary of this ChecksUpdateRequestOutput.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")
        if summary is not None and len(summary) > 65535:
            raise ValueError("Invalid value for `summary`, length must be less than or equal to `65535`")

        self._summary = summary

    @property
    def text(self):
        """Gets the text of this ChecksUpdateRequestOutput.

        Can contain Markdown.

        :return: The text of this ChecksUpdateRequestOutput.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ChecksUpdateRequestOutput.

        Can contain Markdown.

        :param text: The text of this ChecksUpdateRequestOutput.
        :type text: str
        """
        if text is not None and len(text) > 65535:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `65535`")

        self._text = text

    @property
    def title(self):
        """Gets the title of this ChecksUpdateRequestOutput.

        **Required**.

        :return: The title of this ChecksUpdateRequestOutput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChecksUpdateRequestOutput.

        **Required**.

        :param title: The title of this ChecksUpdateRequestOutput.
        :type title: str
        """

        self._title = title
