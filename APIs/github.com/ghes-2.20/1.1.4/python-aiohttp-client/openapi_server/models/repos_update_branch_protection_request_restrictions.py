# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposUpdateBranchProtectionRequestRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apps: List[str]=None, teams: List[str]=None, users: List[str]=None):
        """ReposUpdateBranchProtectionRequestRestrictions - a model defined in OpenAPI

        :param apps: The apps of this ReposUpdateBranchProtectionRequestRestrictions.
        :param teams: The teams of this ReposUpdateBranchProtectionRequestRestrictions.
        :param users: The users of this ReposUpdateBranchProtectionRequestRestrictions.
        """
        self.openapi_types = {
            'apps': List[str],
            'teams': List[str],
            'users': List[str]
        }

        self.attribute_map = {
            'apps': 'apps',
            'teams': 'teams',
            'users': 'users'
        }

        self._apps = apps
        self._teams = teams
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateBranchProtectionRequestRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_branch_protection_request_restrictions of this ReposUpdateBranchProtectionRequestRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apps(self):
        """Gets the apps of this ReposUpdateBranchProtectionRequestRestrictions.

        The list of app `slug`s with push access

        :return: The apps of this ReposUpdateBranchProtectionRequestRestrictions.
        :rtype: List[str]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this ReposUpdateBranchProtectionRequestRestrictions.

        The list of app `slug`s with push access

        :param apps: The apps of this ReposUpdateBranchProtectionRequestRestrictions.
        :type apps: List[str]
        """

        self._apps = apps

    @property
    def teams(self):
        """Gets the teams of this ReposUpdateBranchProtectionRequestRestrictions.

        The list of team `slug`s with push access

        :return: The teams of this ReposUpdateBranchProtectionRequestRestrictions.
        :rtype: List[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ReposUpdateBranchProtectionRequestRestrictions.

        The list of team `slug`s with push access

        :param teams: The teams of this ReposUpdateBranchProtectionRequestRestrictions.
        :type teams: List[str]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")

        self._teams = teams

    @property
    def users(self):
        """Gets the users of this ReposUpdateBranchProtectionRequestRestrictions.

        The list of user `login`s with push access

        :return: The users of this ReposUpdateBranchProtectionRequestRestrictions.
        :rtype: List[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ReposUpdateBranchProtectionRequestRestrictions.

        The list of user `login`s with push access

        :param users: The users of this ReposUpdateBranchProtectionRequestRestrictions.
        :type users: List[str]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
