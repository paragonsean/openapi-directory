# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server.models.thread_subject import ThreadSubject
from openapi_server import util


class Thread(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, last_read_at: str=None, reason: str=None, repository: MinimalRepository=None, subject: ThreadSubject=None, subscription_url: str=None, unread: bool=None, updated_at: str=None, url: str=None):
        """Thread - a model defined in OpenAPI

        :param id: The id of this Thread.
        :param last_read_at: The last_read_at of this Thread.
        :param reason: The reason of this Thread.
        :param repository: The repository of this Thread.
        :param subject: The subject of this Thread.
        :param subscription_url: The subscription_url of this Thread.
        :param unread: The unread of this Thread.
        :param updated_at: The updated_at of this Thread.
        :param url: The url of this Thread.
        """
        self.openapi_types = {
            'id': str,
            'last_read_at': str,
            'reason': str,
            'repository': MinimalRepository,
            'subject': ThreadSubject,
            'subscription_url': str,
            'unread': bool,
            'updated_at': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'last_read_at': 'last_read_at',
            'reason': 'reason',
            'repository': 'repository',
            'subject': 'subject',
            'subscription_url': 'subscription_url',
            'unread': 'unread',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._id = id
        self._last_read_at = last_read_at
        self._reason = reason
        self._repository = repository
        self._subject = subject
        self._subscription_url = subscription_url
        self._unread = unread
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Thread':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The thread of this Thread.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Thread.


        :return: The id of this Thread.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Thread.


        :param id: The id of this Thread.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_read_at(self):
        """Gets the last_read_at of this Thread.


        :return: The last_read_at of this Thread.
        :rtype: str
        """
        return self._last_read_at

    @last_read_at.setter
    def last_read_at(self, last_read_at):
        """Sets the last_read_at of this Thread.


        :param last_read_at: The last_read_at of this Thread.
        :type last_read_at: str
        """
        if last_read_at is None:
            raise ValueError("Invalid value for `last_read_at`, must not be `None`")

        self._last_read_at = last_read_at

    @property
    def reason(self):
        """Gets the reason of this Thread.


        :return: The reason of this Thread.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Thread.


        :param reason: The reason of this Thread.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def repository(self):
        """Gets the repository of this Thread.


        :return: The repository of this Thread.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Thread.


        :param repository: The repository of this Thread.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def subject(self):
        """Gets the subject of this Thread.


        :return: The subject of this Thread.
        :rtype: ThreadSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Thread.


        :param subject: The subject of this Thread.
        :type subject: ThreadSubject
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def subscription_url(self):
        """Gets the subscription_url of this Thread.


        :return: The subscription_url of this Thread.
        :rtype: str
        """
        return self._subscription_url

    @subscription_url.setter
    def subscription_url(self, subscription_url):
        """Sets the subscription_url of this Thread.


        :param subscription_url: The subscription_url of this Thread.
        :type subscription_url: str
        """
        if subscription_url is None:
            raise ValueError("Invalid value for `subscription_url`, must not be `None`")

        self._subscription_url = subscription_url

    @property
    def unread(self):
        """Gets the unread of this Thread.


        :return: The unread of this Thread.
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Thread.


        :param unread: The unread of this Thread.
        :type unread: bool
        """
        if unread is None:
            raise ValueError("Invalid value for `unread`, must not be `None`")

        self._unread = unread

    @property
    def updated_at(self):
        """Gets the updated_at of this Thread.


        :return: The updated_at of this Thread.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Thread.


        :param updated_at: The updated_at of this Thread.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Thread.


        :return: The url of this Thread.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Thread.


        :param url: The url of this Thread.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
