# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseUserOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_users: int=None, suspended_users: int=None, total_users: int=None):
        """EnterpriseUserOverview - a model defined in OpenAPI

        :param admin_users: The admin_users of this EnterpriseUserOverview.
        :param suspended_users: The suspended_users of this EnterpriseUserOverview.
        :param total_users: The total_users of this EnterpriseUserOverview.
        """
        self.openapi_types = {
            'admin_users': int,
            'suspended_users': int,
            'total_users': int
        }

        self.attribute_map = {
            'admin_users': 'admin_users',
            'suspended_users': 'suspended_users',
            'total_users': 'total_users'
        }

        self._admin_users = admin_users
        self._suspended_users = suspended_users
        self._total_users = total_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseUserOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-user-overview of this EnterpriseUserOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_users(self):
        """Gets the admin_users of this EnterpriseUserOverview.


        :return: The admin_users of this EnterpriseUserOverview.
        :rtype: int
        """
        return self._admin_users

    @admin_users.setter
    def admin_users(self, admin_users):
        """Sets the admin_users of this EnterpriseUserOverview.


        :param admin_users: The admin_users of this EnterpriseUserOverview.
        :type admin_users: int
        """
        if admin_users is None:
            raise ValueError("Invalid value for `admin_users`, must not be `None`")

        self._admin_users = admin_users

    @property
    def suspended_users(self):
        """Gets the suspended_users of this EnterpriseUserOverview.


        :return: The suspended_users of this EnterpriseUserOverview.
        :rtype: int
        """
        return self._suspended_users

    @suspended_users.setter
    def suspended_users(self, suspended_users):
        """Sets the suspended_users of this EnterpriseUserOverview.


        :param suspended_users: The suspended_users of this EnterpriseUserOverview.
        :type suspended_users: int
        """
        if suspended_users is None:
            raise ValueError("Invalid value for `suspended_users`, must not be `None`")

        self._suspended_users = suspended_users

    @property
    def total_users(self):
        """Gets the total_users of this EnterpriseUserOverview.


        :return: The total_users of this EnterpriseUserOverview.
        :rtype: int
        """
        return self._total_users

    @total_users.setter
    def total_users(self, total_users):
        """Sets the total_users of this EnterpriseUserOverview.


        :param total_users: The total_users of this EnterpriseUserOverview.
        :type total_users: int
        """
        if total_users is None:
            raise ValueError("Invalid value for `total_users`, must not be `None`")

        self._total_users = total_users
