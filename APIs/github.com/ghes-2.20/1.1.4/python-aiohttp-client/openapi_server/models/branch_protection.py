# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branch_protection_allow_deletions import BranchProtectionAllowDeletions
from openapi_server.models.branch_protection_required_signatures import BranchProtectionRequiredSignatures
from openapi_server.models.branch_protection_required_status_checks import BranchProtectionRequiredStatusChecks
from openapi_server.models.branch_restriction_policy import BranchRestrictionPolicy
from openapi_server.models.protected_branch_admin_enforced import ProtectedBranchAdminEnforced
from openapi_server.models.protected_branch_pull_request_review import ProtectedBranchPullRequestReview
from openapi_server import util


class BranchProtection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_deletions: BranchProtectionAllowDeletions=None, allow_force_pushes: BranchProtectionAllowDeletions=None, enabled: bool=None, enforce_admins: ProtectedBranchAdminEnforced=None, name: str=None, protection_url: str=None, required_conversation_resolution: BranchProtectionAllowDeletions=None, required_linear_history: BranchProtectionAllowDeletions=None, required_pull_request_reviews: ProtectedBranchPullRequestReview=None, required_signatures: BranchProtectionRequiredSignatures=None, required_status_checks: BranchProtectionRequiredStatusChecks=None, restrictions: BranchRestrictionPolicy=None, url: str=None):
        """BranchProtection - a model defined in OpenAPI

        :param allow_deletions: The allow_deletions of this BranchProtection.
        :param allow_force_pushes: The allow_force_pushes of this BranchProtection.
        :param enabled: The enabled of this BranchProtection.
        :param enforce_admins: The enforce_admins of this BranchProtection.
        :param name: The name of this BranchProtection.
        :param protection_url: The protection_url of this BranchProtection.
        :param required_conversation_resolution: The required_conversation_resolution of this BranchProtection.
        :param required_linear_history: The required_linear_history of this BranchProtection.
        :param required_pull_request_reviews: The required_pull_request_reviews of this BranchProtection.
        :param required_signatures: The required_signatures of this BranchProtection.
        :param required_status_checks: The required_status_checks of this BranchProtection.
        :param restrictions: The restrictions of this BranchProtection.
        :param url: The url of this BranchProtection.
        """
        self.openapi_types = {
            'allow_deletions': BranchProtectionAllowDeletions,
            'allow_force_pushes': BranchProtectionAllowDeletions,
            'enabled': bool,
            'enforce_admins': ProtectedBranchAdminEnforced,
            'name': str,
            'protection_url': str,
            'required_conversation_resolution': BranchProtectionAllowDeletions,
            'required_linear_history': BranchProtectionAllowDeletions,
            'required_pull_request_reviews': ProtectedBranchPullRequestReview,
            'required_signatures': BranchProtectionRequiredSignatures,
            'required_status_checks': BranchProtectionRequiredStatusChecks,
            'restrictions': BranchRestrictionPolicy,
            'url': str
        }

        self.attribute_map = {
            'allow_deletions': 'allow_deletions',
            'allow_force_pushes': 'allow_force_pushes',
            'enabled': 'enabled',
            'enforce_admins': 'enforce_admins',
            'name': 'name',
            'protection_url': 'protection_url',
            'required_conversation_resolution': 'required_conversation_resolution',
            'required_linear_history': 'required_linear_history',
            'required_pull_request_reviews': 'required_pull_request_reviews',
            'required_signatures': 'required_signatures',
            'required_status_checks': 'required_status_checks',
            'restrictions': 'restrictions',
            'url': 'url'
        }

        self._allow_deletions = allow_deletions
        self._allow_force_pushes = allow_force_pushes
        self._enabled = enabled
        self._enforce_admins = enforce_admins
        self._name = name
        self._protection_url = protection_url
        self._required_conversation_resolution = required_conversation_resolution
        self._required_linear_history = required_linear_history
        self._required_pull_request_reviews = required_pull_request_reviews
        self._required_signatures = required_signatures
        self._required_status_checks = required_status_checks
        self._restrictions = restrictions
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BranchProtection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The branch-protection of this BranchProtection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_deletions(self):
        """Gets the allow_deletions of this BranchProtection.


        :return: The allow_deletions of this BranchProtection.
        :rtype: BranchProtectionAllowDeletions
        """
        return self._allow_deletions

    @allow_deletions.setter
    def allow_deletions(self, allow_deletions):
        """Sets the allow_deletions of this BranchProtection.


        :param allow_deletions: The allow_deletions of this BranchProtection.
        :type allow_deletions: BranchProtectionAllowDeletions
        """

        self._allow_deletions = allow_deletions

    @property
    def allow_force_pushes(self):
        """Gets the allow_force_pushes of this BranchProtection.


        :return: The allow_force_pushes of this BranchProtection.
        :rtype: BranchProtectionAllowDeletions
        """
        return self._allow_force_pushes

    @allow_force_pushes.setter
    def allow_force_pushes(self, allow_force_pushes):
        """Sets the allow_force_pushes of this BranchProtection.


        :param allow_force_pushes: The allow_force_pushes of this BranchProtection.
        :type allow_force_pushes: BranchProtectionAllowDeletions
        """

        self._allow_force_pushes = allow_force_pushes

    @property
    def enabled(self):
        """Gets the enabled of this BranchProtection.


        :return: The enabled of this BranchProtection.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BranchProtection.


        :param enabled: The enabled of this BranchProtection.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def enforce_admins(self):
        """Gets the enforce_admins of this BranchProtection.


        :return: The enforce_admins of this BranchProtection.
        :rtype: ProtectedBranchAdminEnforced
        """
        return self._enforce_admins

    @enforce_admins.setter
    def enforce_admins(self, enforce_admins):
        """Sets the enforce_admins of this BranchProtection.


        :param enforce_admins: The enforce_admins of this BranchProtection.
        :type enforce_admins: ProtectedBranchAdminEnforced
        """

        self._enforce_admins = enforce_admins

    @property
    def name(self):
        """Gets the name of this BranchProtection.


        :return: The name of this BranchProtection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BranchProtection.


        :param name: The name of this BranchProtection.
        :type name: str
        """

        self._name = name

    @property
    def protection_url(self):
        """Gets the protection_url of this BranchProtection.


        :return: The protection_url of this BranchProtection.
        :rtype: str
        """
        return self._protection_url

    @protection_url.setter
    def protection_url(self, protection_url):
        """Sets the protection_url of this BranchProtection.


        :param protection_url: The protection_url of this BranchProtection.
        :type protection_url: str
        """

        self._protection_url = protection_url

    @property
    def required_conversation_resolution(self):
        """Gets the required_conversation_resolution of this BranchProtection.


        :return: The required_conversation_resolution of this BranchProtection.
        :rtype: BranchProtectionAllowDeletions
        """
        return self._required_conversation_resolution

    @required_conversation_resolution.setter
    def required_conversation_resolution(self, required_conversation_resolution):
        """Sets the required_conversation_resolution of this BranchProtection.


        :param required_conversation_resolution: The required_conversation_resolution of this BranchProtection.
        :type required_conversation_resolution: BranchProtectionAllowDeletions
        """

        self._required_conversation_resolution = required_conversation_resolution

    @property
    def required_linear_history(self):
        """Gets the required_linear_history of this BranchProtection.


        :return: The required_linear_history of this BranchProtection.
        :rtype: BranchProtectionAllowDeletions
        """
        return self._required_linear_history

    @required_linear_history.setter
    def required_linear_history(self, required_linear_history):
        """Sets the required_linear_history of this BranchProtection.


        :param required_linear_history: The required_linear_history of this BranchProtection.
        :type required_linear_history: BranchProtectionAllowDeletions
        """

        self._required_linear_history = required_linear_history

    @property
    def required_pull_request_reviews(self):
        """Gets the required_pull_request_reviews of this BranchProtection.


        :return: The required_pull_request_reviews of this BranchProtection.
        :rtype: ProtectedBranchPullRequestReview
        """
        return self._required_pull_request_reviews

    @required_pull_request_reviews.setter
    def required_pull_request_reviews(self, required_pull_request_reviews):
        """Sets the required_pull_request_reviews of this BranchProtection.


        :param required_pull_request_reviews: The required_pull_request_reviews of this BranchProtection.
        :type required_pull_request_reviews: ProtectedBranchPullRequestReview
        """

        self._required_pull_request_reviews = required_pull_request_reviews

    @property
    def required_signatures(self):
        """Gets the required_signatures of this BranchProtection.


        :return: The required_signatures of this BranchProtection.
        :rtype: BranchProtectionRequiredSignatures
        """
        return self._required_signatures

    @required_signatures.setter
    def required_signatures(self, required_signatures):
        """Sets the required_signatures of this BranchProtection.


        :param required_signatures: The required_signatures of this BranchProtection.
        :type required_signatures: BranchProtectionRequiredSignatures
        """

        self._required_signatures = required_signatures

    @property
    def required_status_checks(self):
        """Gets the required_status_checks of this BranchProtection.


        :return: The required_status_checks of this BranchProtection.
        :rtype: BranchProtectionRequiredStatusChecks
        """
        return self._required_status_checks

    @required_status_checks.setter
    def required_status_checks(self, required_status_checks):
        """Sets the required_status_checks of this BranchProtection.


        :param required_status_checks: The required_status_checks of this BranchProtection.
        :type required_status_checks: BranchProtectionRequiredStatusChecks
        """

        self._required_status_checks = required_status_checks

    @property
    def restrictions(self):
        """Gets the restrictions of this BranchProtection.


        :return: The restrictions of this BranchProtection.
        :rtype: BranchRestrictionPolicy
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this BranchProtection.


        :param restrictions: The restrictions of this BranchProtection.
        :type restrictions: BranchRestrictionPolicy
        """

        self._restrictions = restrictions

    @property
    def url(self):
        """Gets the url of this BranchProtection.


        :return: The url of this BranchProtection.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BranchProtection.


        :param url: The url of this BranchProtection.
        :type url: str
        """

        self._url = url
