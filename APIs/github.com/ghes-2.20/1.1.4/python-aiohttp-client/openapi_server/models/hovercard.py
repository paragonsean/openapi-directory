# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hovercard_contexts_inner import HovercardContextsInner
from openapi_server import util


class Hovercard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts: List[HovercardContextsInner]=None):
        """Hovercard - a model defined in OpenAPI

        :param contexts: The contexts of this Hovercard.
        """
        self.openapi_types = {
            'contexts': List[HovercardContextsInner]
        }

        self.attribute_map = {
            'contexts': 'contexts'
        }

        self._contexts = contexts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hovercard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hovercard of this Hovercard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this Hovercard.


        :return: The contexts of this Hovercard.
        :rtype: List[HovercardContextsInner]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this Hovercard.


        :param contexts: The contexts of this Hovercard.
        :type contexts: List[HovercardContextsInner]
        """
        if contexts is None:
            raise ValueError("Invalid value for `contexts`, must not be `None`")

        self._contexts = contexts
