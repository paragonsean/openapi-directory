# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_config_insecure_ssl import WebhookConfigInsecureSsl
from openapi_server import util


class ReposUpdateWebhookRequestConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, content_type: str=None, insecure_ssl: WebhookConfigInsecureSsl=None, room: str=None, secret: str=None, url: str=None):
        """ReposUpdateWebhookRequestConfig - a model defined in OpenAPI

        :param address: The address of this ReposUpdateWebhookRequestConfig.
        :param content_type: The content_type of this ReposUpdateWebhookRequestConfig.
        :param insecure_ssl: The insecure_ssl of this ReposUpdateWebhookRequestConfig.
        :param room: The room of this ReposUpdateWebhookRequestConfig.
        :param secret: The secret of this ReposUpdateWebhookRequestConfig.
        :param url: The url of this ReposUpdateWebhookRequestConfig.
        """
        self.openapi_types = {
            'address': str,
            'content_type': str,
            'insecure_ssl': WebhookConfigInsecureSsl,
            'room': str,
            'secret': str,
            'url': str
        }

        self.attribute_map = {
            'address': 'address',
            'content_type': 'content_type',
            'insecure_ssl': 'insecure_ssl',
            'room': 'room',
            'secret': 'secret',
            'url': 'url'
        }

        self._address = address
        self._content_type = content_type
        self._insecure_ssl = insecure_ssl
        self._room = room
        self._secret = secret
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateWebhookRequestConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_webhook_request_config of this ReposUpdateWebhookRequestConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ReposUpdateWebhookRequestConfig.


        :return: The address of this ReposUpdateWebhookRequestConfig.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ReposUpdateWebhookRequestConfig.


        :param address: The address of this ReposUpdateWebhookRequestConfig.
        :type address: str
        """

        self._address = address

    @property
    def content_type(self):
        """Gets the content_type of this ReposUpdateWebhookRequestConfig.

        The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.

        :return: The content_type of this ReposUpdateWebhookRequestConfig.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ReposUpdateWebhookRequestConfig.

        The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.

        :param content_type: The content_type of this ReposUpdateWebhookRequestConfig.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def insecure_ssl(self):
        """Gets the insecure_ssl of this ReposUpdateWebhookRequestConfig.


        :return: The insecure_ssl of this ReposUpdateWebhookRequestConfig.
        :rtype: WebhookConfigInsecureSsl
        """
        return self._insecure_ssl

    @insecure_ssl.setter
    def insecure_ssl(self, insecure_ssl):
        """Sets the insecure_ssl of this ReposUpdateWebhookRequestConfig.


        :param insecure_ssl: The insecure_ssl of this ReposUpdateWebhookRequestConfig.
        :type insecure_ssl: WebhookConfigInsecureSsl
        """

        self._insecure_ssl = insecure_ssl

    @property
    def room(self):
        """Gets the room of this ReposUpdateWebhookRequestConfig.


        :return: The room of this ReposUpdateWebhookRequestConfig.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this ReposUpdateWebhookRequestConfig.


        :param room: The room of this ReposUpdateWebhookRequestConfig.
        :type room: str
        """

        self._room = room

    @property
    def secret(self):
        """Gets the secret of this ReposUpdateWebhookRequestConfig.

        If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@2.20/webhooks/event-payloads/#delivery-headers).

        :return: The secret of this ReposUpdateWebhookRequestConfig.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ReposUpdateWebhookRequestConfig.

        If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@2.20/webhooks/event-payloads/#delivery-headers).

        :param secret: The secret of this ReposUpdateWebhookRequestConfig.
        :type secret: str
        """

        self._secret = secret

    @property
    def url(self):
        """Gets the url of this ReposUpdateWebhookRequestConfig.

        The URL to which the payloads will be delivered.

        :return: The url of this ReposUpdateWebhookRequestConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReposUpdateWebhookRequestConfig.

        The URL to which the payloads will be delivered.

        :param url: The url of this ReposUpdateWebhookRequestConfig.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
