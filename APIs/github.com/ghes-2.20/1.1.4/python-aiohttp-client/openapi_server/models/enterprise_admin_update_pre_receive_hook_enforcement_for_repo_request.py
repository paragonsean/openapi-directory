# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enforcement: str=None):
        """EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest - a model defined in OpenAPI

        :param enforcement: The enforcement of this EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest.
        """
        self.openapi_types = {
            'enforcement': str
        }

        self.attribute_map = {
            'enforcement': 'enforcement'
        }

        self._enforcement = enforcement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_admin_update_pre_receive_hook_enforcement_for_repo_request of this EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enforcement(self):
        """Gets the enforcement of this EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest.

        The state of enforcement for the hook on this repository.

        :return: The enforcement of this EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest.
        :rtype: str
        """
        return self._enforcement

    @enforcement.setter
    def enforcement(self, enforcement):
        """Sets the enforcement of this EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest.

        The state of enforcement for the hook on this repository.

        :param enforcement: The enforcement of this EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest.
        :type enforcement: str
        """
        allowed_values = ["enabled", "disabled", "testing"]  # noqa: E501
        if enforcement not in allowed_values:
            raise ValueError(
                "Invalid value for `enforcement` ({0}), must be one of {1}"
                .format(enforcement, allowed_values)
            )

        self._enforcement = enforcement
