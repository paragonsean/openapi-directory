# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_commit_commit import FileCommitCommit
from openapi_server.models.file_commit_content import FileCommitContent
from openapi_server import util


class FileCommit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: FileCommitCommit=None, content: FileCommitContent=None):
        """FileCommit - a model defined in OpenAPI

        :param commit: The commit of this FileCommit.
        :param content: The content of this FileCommit.
        """
        self.openapi_types = {
            'commit': FileCommitCommit,
            'content': FileCommitContent
        }

        self.attribute_map = {
            'commit': 'commit',
            'content': 'content'
        }

        self._commit = commit
        self._content = content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileCommit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The file-commit of this FileCommit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this FileCommit.


        :return: The commit of this FileCommit.
        :rtype: FileCommitCommit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this FileCommit.


        :param commit: The commit of this FileCommit.
        :type commit: FileCommitCommit
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def content(self):
        """Gets the content of this FileCommit.


        :return: The content of this FileCommit.
        :rtype: FileCommitContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this FileCommit.


        :param content: The content of this FileCommit.
        :type content: FileCommitContent
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content
