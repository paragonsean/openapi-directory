# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseRepositoryOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fork_repos: int=None, org_repos: int=None, root_repos: int=None, total_pushes: int=None, total_repos: int=None, total_wikis: int=None):
        """EnterpriseRepositoryOverview - a model defined in OpenAPI

        :param fork_repos: The fork_repos of this EnterpriseRepositoryOverview.
        :param org_repos: The org_repos of this EnterpriseRepositoryOverview.
        :param root_repos: The root_repos of this EnterpriseRepositoryOverview.
        :param total_pushes: The total_pushes of this EnterpriseRepositoryOverview.
        :param total_repos: The total_repos of this EnterpriseRepositoryOverview.
        :param total_wikis: The total_wikis of this EnterpriseRepositoryOverview.
        """
        self.openapi_types = {
            'fork_repos': int,
            'org_repos': int,
            'root_repos': int,
            'total_pushes': int,
            'total_repos': int,
            'total_wikis': int
        }

        self.attribute_map = {
            'fork_repos': 'fork_repos',
            'org_repos': 'org_repos',
            'root_repos': 'root_repos',
            'total_pushes': 'total_pushes',
            'total_repos': 'total_repos',
            'total_wikis': 'total_wikis'
        }

        self._fork_repos = fork_repos
        self._org_repos = org_repos
        self._root_repos = root_repos
        self._total_pushes = total_pushes
        self._total_repos = total_repos
        self._total_wikis = total_wikis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseRepositoryOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-repository-overview of this EnterpriseRepositoryOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fork_repos(self):
        """Gets the fork_repos of this EnterpriseRepositoryOverview.


        :return: The fork_repos of this EnterpriseRepositoryOverview.
        :rtype: int
        """
        return self._fork_repos

    @fork_repos.setter
    def fork_repos(self, fork_repos):
        """Sets the fork_repos of this EnterpriseRepositoryOverview.


        :param fork_repos: The fork_repos of this EnterpriseRepositoryOverview.
        :type fork_repos: int
        """
        if fork_repos is None:
            raise ValueError("Invalid value for `fork_repos`, must not be `None`")

        self._fork_repos = fork_repos

    @property
    def org_repos(self):
        """Gets the org_repos of this EnterpriseRepositoryOverview.


        :return: The org_repos of this EnterpriseRepositoryOverview.
        :rtype: int
        """
        return self._org_repos

    @org_repos.setter
    def org_repos(self, org_repos):
        """Sets the org_repos of this EnterpriseRepositoryOverview.


        :param org_repos: The org_repos of this EnterpriseRepositoryOverview.
        :type org_repos: int
        """
        if org_repos is None:
            raise ValueError("Invalid value for `org_repos`, must not be `None`")

        self._org_repos = org_repos

    @property
    def root_repos(self):
        """Gets the root_repos of this EnterpriseRepositoryOverview.


        :return: The root_repos of this EnterpriseRepositoryOverview.
        :rtype: int
        """
        return self._root_repos

    @root_repos.setter
    def root_repos(self, root_repos):
        """Sets the root_repos of this EnterpriseRepositoryOverview.


        :param root_repos: The root_repos of this EnterpriseRepositoryOverview.
        :type root_repos: int
        """
        if root_repos is None:
            raise ValueError("Invalid value for `root_repos`, must not be `None`")

        self._root_repos = root_repos

    @property
    def total_pushes(self):
        """Gets the total_pushes of this EnterpriseRepositoryOverview.


        :return: The total_pushes of this EnterpriseRepositoryOverview.
        :rtype: int
        """
        return self._total_pushes

    @total_pushes.setter
    def total_pushes(self, total_pushes):
        """Sets the total_pushes of this EnterpriseRepositoryOverview.


        :param total_pushes: The total_pushes of this EnterpriseRepositoryOverview.
        :type total_pushes: int
        """
        if total_pushes is None:
            raise ValueError("Invalid value for `total_pushes`, must not be `None`")

        self._total_pushes = total_pushes

    @property
    def total_repos(self):
        """Gets the total_repos of this EnterpriseRepositoryOverview.


        :return: The total_repos of this EnterpriseRepositoryOverview.
        :rtype: int
        """
        return self._total_repos

    @total_repos.setter
    def total_repos(self, total_repos):
        """Sets the total_repos of this EnterpriseRepositoryOverview.


        :param total_repos: The total_repos of this EnterpriseRepositoryOverview.
        :type total_repos: int
        """
        if total_repos is None:
            raise ValueError("Invalid value for `total_repos`, must not be `None`")

        self._total_repos = total_repos

    @property
    def total_wikis(self):
        """Gets the total_wikis of this EnterpriseRepositoryOverview.


        :return: The total_wikis of this EnterpriseRepositoryOverview.
        :rtype: int
        """
        return self._total_wikis

    @total_wikis.setter
    def total_wikis(self, total_wikis):
        """Sets the total_wikis of this EnterpriseRepositoryOverview.


        :param total_wikis: The total_wikis of this EnterpriseRepositoryOverview.
        :type total_wikis: int
        """
        if total_wikis is None:
            raise ValueError("Invalid value for `total_wikis`, must not be `None`")

        self._total_wikis = total_wikis
