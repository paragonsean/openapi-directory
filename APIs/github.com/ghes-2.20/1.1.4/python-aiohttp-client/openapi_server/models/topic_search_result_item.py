# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_result_text_matches_inner import SearchResultTextMatchesInner
from openapi_server.models.topic_search_result_item_aliases_inner import TopicSearchResultItemAliasesInner
from openapi_server import util


class TopicSearchResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aliases: List[TopicSearchResultItemAliasesInner]=None, created_at: datetime=None, created_by: str=None, curated: bool=None, description: str=None, display_name: str=None, featured: bool=None, logo_url: str=None, name: str=None, related: List[TopicSearchResultItemAliasesInner]=None, released: str=None, repository_count: int=None, score: float=None, short_description: str=None, text_matches: List[SearchResultTextMatchesInner]=None, updated_at: datetime=None):
        """TopicSearchResultItem - a model defined in OpenAPI

        :param aliases: The aliases of this TopicSearchResultItem.
        :param created_at: The created_at of this TopicSearchResultItem.
        :param created_by: The created_by of this TopicSearchResultItem.
        :param curated: The curated of this TopicSearchResultItem.
        :param description: The description of this TopicSearchResultItem.
        :param display_name: The display_name of this TopicSearchResultItem.
        :param featured: The featured of this TopicSearchResultItem.
        :param logo_url: The logo_url of this TopicSearchResultItem.
        :param name: The name of this TopicSearchResultItem.
        :param related: The related of this TopicSearchResultItem.
        :param released: The released of this TopicSearchResultItem.
        :param repository_count: The repository_count of this TopicSearchResultItem.
        :param score: The score of this TopicSearchResultItem.
        :param short_description: The short_description of this TopicSearchResultItem.
        :param text_matches: The text_matches of this TopicSearchResultItem.
        :param updated_at: The updated_at of this TopicSearchResultItem.
        """
        self.openapi_types = {
            'aliases': List[TopicSearchResultItemAliasesInner],
            'created_at': datetime,
            'created_by': str,
            'curated': bool,
            'description': str,
            'display_name': str,
            'featured': bool,
            'logo_url': str,
            'name': str,
            'related': List[TopicSearchResultItemAliasesInner],
            'released': str,
            'repository_count': int,
            'score': float,
            'short_description': str,
            'text_matches': List[SearchResultTextMatchesInner],
            'updated_at': datetime
        }

        self.attribute_map = {
            'aliases': 'aliases',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'curated': 'curated',
            'description': 'description',
            'display_name': 'display_name',
            'featured': 'featured',
            'logo_url': 'logo_url',
            'name': 'name',
            'related': 'related',
            'released': 'released',
            'repository_count': 'repository_count',
            'score': 'score',
            'short_description': 'short_description',
            'text_matches': 'text_matches',
            'updated_at': 'updated_at'
        }

        self._aliases = aliases
        self._created_at = created_at
        self._created_by = created_by
        self._curated = curated
        self._description = description
        self._display_name = display_name
        self._featured = featured
        self._logo_url = logo_url
        self._name = name
        self._related = related
        self._released = released
        self._repository_count = repository_count
        self._score = score
        self._short_description = short_description
        self._text_matches = text_matches
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicSearchResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The topic-search-result-item of this TopicSearchResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aliases(self):
        """Gets the aliases of this TopicSearchResultItem.


        :return: The aliases of this TopicSearchResultItem.
        :rtype: List[TopicSearchResultItemAliasesInner]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this TopicSearchResultItem.


        :param aliases: The aliases of this TopicSearchResultItem.
        :type aliases: List[TopicSearchResultItemAliasesInner]
        """

        self._aliases = aliases

    @property
    def created_at(self):
        """Gets the created_at of this TopicSearchResultItem.


        :return: The created_at of this TopicSearchResultItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TopicSearchResultItem.


        :param created_at: The created_at of this TopicSearchResultItem.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this TopicSearchResultItem.


        :return: The created_by of this TopicSearchResultItem.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TopicSearchResultItem.


        :param created_by: The created_by of this TopicSearchResultItem.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def curated(self):
        """Gets the curated of this TopicSearchResultItem.


        :return: The curated of this TopicSearchResultItem.
        :rtype: bool
        """
        return self._curated

    @curated.setter
    def curated(self, curated):
        """Sets the curated of this TopicSearchResultItem.


        :param curated: The curated of this TopicSearchResultItem.
        :type curated: bool
        """
        if curated is None:
            raise ValueError("Invalid value for `curated`, must not be `None`")

        self._curated = curated

    @property
    def description(self):
        """Gets the description of this TopicSearchResultItem.


        :return: The description of this TopicSearchResultItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TopicSearchResultItem.


        :param description: The description of this TopicSearchResultItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this TopicSearchResultItem.


        :return: The display_name of this TopicSearchResultItem.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TopicSearchResultItem.


        :param display_name: The display_name of this TopicSearchResultItem.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def featured(self):
        """Gets the featured of this TopicSearchResultItem.


        :return: The featured of this TopicSearchResultItem.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this TopicSearchResultItem.


        :param featured: The featured of this TopicSearchResultItem.
        :type featured: bool
        """
        if featured is None:
            raise ValueError("Invalid value for `featured`, must not be `None`")

        self._featured = featured

    @property
    def logo_url(self):
        """Gets the logo_url of this TopicSearchResultItem.


        :return: The logo_url of this TopicSearchResultItem.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this TopicSearchResultItem.


        :param logo_url: The logo_url of this TopicSearchResultItem.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this TopicSearchResultItem.


        :return: The name of this TopicSearchResultItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TopicSearchResultItem.


        :param name: The name of this TopicSearchResultItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def related(self):
        """Gets the related of this TopicSearchResultItem.


        :return: The related of this TopicSearchResultItem.
        :rtype: List[TopicSearchResultItemAliasesInner]
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this TopicSearchResultItem.


        :param related: The related of this TopicSearchResultItem.
        :type related: List[TopicSearchResultItemAliasesInner]
        """

        self._related = related

    @property
    def released(self):
        """Gets the released of this TopicSearchResultItem.


        :return: The released of this TopicSearchResultItem.
        :rtype: str
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this TopicSearchResultItem.


        :param released: The released of this TopicSearchResultItem.
        :type released: str
        """
        if released is None:
            raise ValueError("Invalid value for `released`, must not be `None`")

        self._released = released

    @property
    def repository_count(self):
        """Gets the repository_count of this TopicSearchResultItem.


        :return: The repository_count of this TopicSearchResultItem.
        :rtype: int
        """
        return self._repository_count

    @repository_count.setter
    def repository_count(self, repository_count):
        """Sets the repository_count of this TopicSearchResultItem.


        :param repository_count: The repository_count of this TopicSearchResultItem.
        :type repository_count: int
        """

        self._repository_count = repository_count

    @property
    def score(self):
        """Gets the score of this TopicSearchResultItem.


        :return: The score of this TopicSearchResultItem.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TopicSearchResultItem.


        :param score: The score of this TopicSearchResultItem.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def short_description(self):
        """Gets the short_description of this TopicSearchResultItem.


        :return: The short_description of this TopicSearchResultItem.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this TopicSearchResultItem.


        :param short_description: The short_description of this TopicSearchResultItem.
        :type short_description: str
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")

        self._short_description = short_description

    @property
    def text_matches(self):
        """Gets the text_matches of this TopicSearchResultItem.


        :return: The text_matches of this TopicSearchResultItem.
        :rtype: List[SearchResultTextMatchesInner]
        """
        return self._text_matches

    @text_matches.setter
    def text_matches(self, text_matches):
        """Sets the text_matches of this TopicSearchResultItem.


        :param text_matches: The text_matches of this TopicSearchResultItem.
        :type text_matches: List[SearchResultTextMatchesInner]
        """

        self._text_matches = text_matches

    @property
    def updated_at(self):
        """Gets the updated_at of this TopicSearchResultItem.


        :return: The updated_at of this TopicSearchResultItem.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TopicSearchResultItem.


        :param updated_at: The updated_at of this TopicSearchResultItem.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
