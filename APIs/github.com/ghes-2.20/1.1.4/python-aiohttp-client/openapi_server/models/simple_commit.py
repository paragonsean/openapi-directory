# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_commit_author import SimpleCommitAuthor
from openapi_server import util


class SimpleCommit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: SimpleCommitAuthor=None, committer: SimpleCommitAuthor=None, id: str=None, message: str=None, timestamp: datetime=None, tree_id: str=None):
        """SimpleCommit - a model defined in OpenAPI

        :param author: The author of this SimpleCommit.
        :param committer: The committer of this SimpleCommit.
        :param id: The id of this SimpleCommit.
        :param message: The message of this SimpleCommit.
        :param timestamp: The timestamp of this SimpleCommit.
        :param tree_id: The tree_id of this SimpleCommit.
        """
        self.openapi_types = {
            'author': SimpleCommitAuthor,
            'committer': SimpleCommitAuthor,
            'id': str,
            'message': str,
            'timestamp': datetime,
            'tree_id': str
        }

        self.attribute_map = {
            'author': 'author',
            'committer': 'committer',
            'id': 'id',
            'message': 'message',
            'timestamp': 'timestamp',
            'tree_id': 'tree_id'
        }

        self._author = author
        self._committer = committer
        self._id = id
        self._message = message
        self._timestamp = timestamp
        self._tree_id = tree_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimpleCommit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The simple-commit of this SimpleCommit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this SimpleCommit.


        :return: The author of this SimpleCommit.
        :rtype: SimpleCommitAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this SimpleCommit.


        :param author: The author of this SimpleCommit.
        :type author: SimpleCommitAuthor
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this SimpleCommit.


        :return: The committer of this SimpleCommit.
        :rtype: SimpleCommitAuthor
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this SimpleCommit.


        :param committer: The committer of this SimpleCommit.
        :type committer: SimpleCommitAuthor
        """
        if committer is None:
            raise ValueError("Invalid value for `committer`, must not be `None`")

        self._committer = committer

    @property
    def id(self):
        """Gets the id of this SimpleCommit.


        :return: The id of this SimpleCommit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimpleCommit.


        :param id: The id of this SimpleCommit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this SimpleCommit.


        :return: The message of this SimpleCommit.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SimpleCommit.


        :param message: The message of this SimpleCommit.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this SimpleCommit.


        :return: The timestamp of this SimpleCommit.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SimpleCommit.


        :param timestamp: The timestamp of this SimpleCommit.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def tree_id(self):
        """Gets the tree_id of this SimpleCommit.


        :return: The tree_id of this SimpleCommit.
        :rtype: str
        """
        return self._tree_id

    @tree_id.setter
    def tree_id(self, tree_id):
        """Sets the tree_id of this SimpleCommit.


        :param tree_id: The tree_id of this SimpleCommit.
        :type tree_id: str
        """
        if tree_id is None:
            raise ValueError("Invalid value for `tree_id`, must not be `None`")

        self._tree_id = tree_id
