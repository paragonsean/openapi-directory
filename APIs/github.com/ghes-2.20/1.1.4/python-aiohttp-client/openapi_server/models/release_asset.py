# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class ReleaseAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, browser_download_url: str=None, content_type: str=None, created_at: datetime=None, download_count: int=None, id: int=None, label: str=None, name: str=None, node_id: str=None, size: int=None, state: str=None, updated_at: datetime=None, uploader: NullableSimpleUser=None, url: str=None):
        """ReleaseAsset - a model defined in OpenAPI

        :param browser_download_url: The browser_download_url of this ReleaseAsset.
        :param content_type: The content_type of this ReleaseAsset.
        :param created_at: The created_at of this ReleaseAsset.
        :param download_count: The download_count of this ReleaseAsset.
        :param id: The id of this ReleaseAsset.
        :param label: The label of this ReleaseAsset.
        :param name: The name of this ReleaseAsset.
        :param node_id: The node_id of this ReleaseAsset.
        :param size: The size of this ReleaseAsset.
        :param state: The state of this ReleaseAsset.
        :param updated_at: The updated_at of this ReleaseAsset.
        :param uploader: The uploader of this ReleaseAsset.
        :param url: The url of this ReleaseAsset.
        """
        self.openapi_types = {
            'browser_download_url': str,
            'content_type': str,
            'created_at': datetime,
            'download_count': int,
            'id': int,
            'label': str,
            'name': str,
            'node_id': str,
            'size': int,
            'state': str,
            'updated_at': datetime,
            'uploader': NullableSimpleUser,
            'url': str
        }

        self.attribute_map = {
            'browser_download_url': 'browser_download_url',
            'content_type': 'content_type',
            'created_at': 'created_at',
            'download_count': 'download_count',
            'id': 'id',
            'label': 'label',
            'name': 'name',
            'node_id': 'node_id',
            'size': 'size',
            'state': 'state',
            'updated_at': 'updated_at',
            'uploader': 'uploader',
            'url': 'url'
        }

        self._browser_download_url = browser_download_url
        self._content_type = content_type
        self._created_at = created_at
        self._download_count = download_count
        self._id = id
        self._label = label
        self._name = name
        self._node_id = node_id
        self._size = size
        self._state = state
        self._updated_at = updated_at
        self._uploader = uploader
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The release-asset of this ReleaseAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def browser_download_url(self):
        """Gets the browser_download_url of this ReleaseAsset.


        :return: The browser_download_url of this ReleaseAsset.
        :rtype: str
        """
        return self._browser_download_url

    @browser_download_url.setter
    def browser_download_url(self, browser_download_url):
        """Sets the browser_download_url of this ReleaseAsset.


        :param browser_download_url: The browser_download_url of this ReleaseAsset.
        :type browser_download_url: str
        """
        if browser_download_url is None:
            raise ValueError("Invalid value for `browser_download_url`, must not be `None`")

        self._browser_download_url = browser_download_url

    @property
    def content_type(self):
        """Gets the content_type of this ReleaseAsset.


        :return: The content_type of this ReleaseAsset.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ReleaseAsset.


        :param content_type: The content_type of this ReleaseAsset.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def created_at(self):
        """Gets the created_at of this ReleaseAsset.


        :return: The created_at of this ReleaseAsset.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReleaseAsset.


        :param created_at: The created_at of this ReleaseAsset.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def download_count(self):
        """Gets the download_count of this ReleaseAsset.


        :return: The download_count of this ReleaseAsset.
        :rtype: int
        """
        return self._download_count

    @download_count.setter
    def download_count(self, download_count):
        """Sets the download_count of this ReleaseAsset.


        :param download_count: The download_count of this ReleaseAsset.
        :type download_count: int
        """
        if download_count is None:
            raise ValueError("Invalid value for `download_count`, must not be `None`")

        self._download_count = download_count

    @property
    def id(self):
        """Gets the id of this ReleaseAsset.


        :return: The id of this ReleaseAsset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseAsset.


        :param id: The id of this ReleaseAsset.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this ReleaseAsset.


        :return: The label of this ReleaseAsset.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ReleaseAsset.


        :param label: The label of this ReleaseAsset.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def name(self):
        """Gets the name of this ReleaseAsset.

        The file name of the asset.

        :return: The name of this ReleaseAsset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseAsset.

        The file name of the asset.

        :param name: The name of this ReleaseAsset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this ReleaseAsset.


        :return: The node_id of this ReleaseAsset.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ReleaseAsset.


        :param node_id: The node_id of this ReleaseAsset.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def size(self):
        """Gets the size of this ReleaseAsset.


        :return: The size of this ReleaseAsset.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ReleaseAsset.


        :param size: The size of this ReleaseAsset.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def state(self):
        """Gets the state of this ReleaseAsset.

        State of the release asset.

        :return: The state of this ReleaseAsset.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReleaseAsset.

        State of the release asset.

        :param state: The state of this ReleaseAsset.
        :type state: str
        """
        allowed_values = ["uploaded", "open"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this ReleaseAsset.


        :return: The updated_at of this ReleaseAsset.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReleaseAsset.


        :param updated_at: The updated_at of this ReleaseAsset.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def uploader(self):
        """Gets the uploader of this ReleaseAsset.


        :return: The uploader of this ReleaseAsset.
        :rtype: NullableSimpleUser
        """
        return self._uploader

    @uploader.setter
    def uploader(self, uploader):
        """Sets the uploader of this ReleaseAsset.


        :param uploader: The uploader of this ReleaseAsset.
        :type uploader: NullableSimpleUser
        """
        if uploader is None:
            raise ValueError("Invalid value for `uploader`, must not be `None`")

        self._uploader = uploader

    @property
    def url(self):
        """Gets the url of this ReleaseAsset.


        :return: The url of this ReleaseAsset.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReleaseAsset.


        :param url: The url of this ReleaseAsset.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
