# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesCreateLabelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, description: str=None, name: str=None):
        """IssuesCreateLabelRequest - a model defined in OpenAPI

        :param color: The color of this IssuesCreateLabelRequest.
        :param description: The description of this IssuesCreateLabelRequest.
        :param name: The name of this IssuesCreateLabelRequest.
        """
        self.openapi_types = {
            'color': str,
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'color': 'color',
            'description': 'description',
            'name': 'name'
        }

        self._color = color
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesCreateLabelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issues_create_label_request of this IssuesCreateLabelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this IssuesCreateLabelRequest.

        The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.

        :return: The color of this IssuesCreateLabelRequest.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this IssuesCreateLabelRequest.

        The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.

        :param color: The color of this IssuesCreateLabelRequest.
        :type color: str
        """

        self._color = color

    @property
    def description(self):
        """Gets the description of this IssuesCreateLabelRequest.

        A short description of the label.

        :return: The description of this IssuesCreateLabelRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssuesCreateLabelRequest.

        A short description of the label.

        :param description: The description of this IssuesCreateLabelRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this IssuesCreateLabelRequest.

        The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\"

        :return: The name of this IssuesCreateLabelRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssuesCreateLabelRequest.

        The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\"

        :param name: The name of this IssuesCreateLabelRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
