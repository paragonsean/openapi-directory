# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Label(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, default: bool=None, description: str=None, id: int=None, name: str=None, node_id: str=None, url: str=None):
        """Label - a model defined in OpenAPI

        :param color: The color of this Label.
        :param default: The default of this Label.
        :param description: The description of this Label.
        :param id: The id of this Label.
        :param name: The name of this Label.
        :param node_id: The node_id of this Label.
        :param url: The url of this Label.
        """
        self.openapi_types = {
            'color': str,
            'default': bool,
            'description': str,
            'id': int,
            'name': str,
            'node_id': str,
            'url': str
        }

        self.attribute_map = {
            'color': 'color',
            'default': 'default',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'url': 'url'
        }

        self._color = color
        self._default = default
        self._description = description
        self._id = id
        self._name = name
        self._node_id = node_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Label':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The label of this Label.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Label.

        6-character hex code, without the leading #, identifying the color

        :return: The color of this Label.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Label.

        6-character hex code, without the leading #, identifying the color

        :param color: The color of this Label.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def default(self):
        """Gets the default of this Label.


        :return: The default of this Label.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Label.


        :param default: The default of this Label.
        :type default: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")

        self._default = default

    @property
    def description(self):
        """Gets the description of this Label.


        :return: The description of this Label.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Label.


        :param description: The description of this Label.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Label.


        :return: The id of this Label.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Label.


        :param id: The id of this Label.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Label.

        The name of the label.

        :return: The name of this Label.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Label.

        The name of the label.

        :param name: The name of this Label.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this Label.


        :return: The node_id of this Label.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Label.


        :param node_id: The node_id of this Label.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def url(self):
        """Gets the url of this Label.

        URL for the label

        :return: The url of this Label.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Label.

        URL for the label

        :param url: The url of this Label.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
