# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetaRoot200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorizations_url: str=None, code_search_url: str=None, commit_search_url: str=None, current_user_authorizations_html_url: str=None, current_user_repositories_url: str=None, current_user_url: str=None, emails_url: str=None, emojis_url: str=None, events_url: str=None, feeds_url: str=None, followers_url: str=None, following_url: str=None, gists_url: str=None, hub_url: str=None, issue_search_url: str=None, issues_url: str=None, keys_url: str=None, label_search_url: str=None, notifications_url: str=None, organization_repositories_url: str=None, organization_teams_url: str=None, organization_url: str=None, public_gists_url: str=None, rate_limit_url: str=None, repository_search_url: str=None, repository_url: str=None, starred_gists_url: str=None, starred_url: str=None, topic_search_url: str=None, user_organizations_url: str=None, user_repositories_url: str=None, user_search_url: str=None, user_url: str=None):
        """MetaRoot200Response - a model defined in OpenAPI

        :param authorizations_url: The authorizations_url of this MetaRoot200Response.
        :param code_search_url: The code_search_url of this MetaRoot200Response.
        :param commit_search_url: The commit_search_url of this MetaRoot200Response.
        :param current_user_authorizations_html_url: The current_user_authorizations_html_url of this MetaRoot200Response.
        :param current_user_repositories_url: The current_user_repositories_url of this MetaRoot200Response.
        :param current_user_url: The current_user_url of this MetaRoot200Response.
        :param emails_url: The emails_url of this MetaRoot200Response.
        :param emojis_url: The emojis_url of this MetaRoot200Response.
        :param events_url: The events_url of this MetaRoot200Response.
        :param feeds_url: The feeds_url of this MetaRoot200Response.
        :param followers_url: The followers_url of this MetaRoot200Response.
        :param following_url: The following_url of this MetaRoot200Response.
        :param gists_url: The gists_url of this MetaRoot200Response.
        :param hub_url: The hub_url of this MetaRoot200Response.
        :param issue_search_url: The issue_search_url of this MetaRoot200Response.
        :param issues_url: The issues_url of this MetaRoot200Response.
        :param keys_url: The keys_url of this MetaRoot200Response.
        :param label_search_url: The label_search_url of this MetaRoot200Response.
        :param notifications_url: The notifications_url of this MetaRoot200Response.
        :param organization_repositories_url: The organization_repositories_url of this MetaRoot200Response.
        :param organization_teams_url: The organization_teams_url of this MetaRoot200Response.
        :param organization_url: The organization_url of this MetaRoot200Response.
        :param public_gists_url: The public_gists_url of this MetaRoot200Response.
        :param rate_limit_url: The rate_limit_url of this MetaRoot200Response.
        :param repository_search_url: The repository_search_url of this MetaRoot200Response.
        :param repository_url: The repository_url of this MetaRoot200Response.
        :param starred_gists_url: The starred_gists_url of this MetaRoot200Response.
        :param starred_url: The starred_url of this MetaRoot200Response.
        :param topic_search_url: The topic_search_url of this MetaRoot200Response.
        :param user_organizations_url: The user_organizations_url of this MetaRoot200Response.
        :param user_repositories_url: The user_repositories_url of this MetaRoot200Response.
        :param user_search_url: The user_search_url of this MetaRoot200Response.
        :param user_url: The user_url of this MetaRoot200Response.
        """
        self.openapi_types = {
            'authorizations_url': str,
            'code_search_url': str,
            'commit_search_url': str,
            'current_user_authorizations_html_url': str,
            'current_user_repositories_url': str,
            'current_user_url': str,
            'emails_url': str,
            'emojis_url': str,
            'events_url': str,
            'feeds_url': str,
            'followers_url': str,
            'following_url': str,
            'gists_url': str,
            'hub_url': str,
            'issue_search_url': str,
            'issues_url': str,
            'keys_url': str,
            'label_search_url': str,
            'notifications_url': str,
            'organization_repositories_url': str,
            'organization_teams_url': str,
            'organization_url': str,
            'public_gists_url': str,
            'rate_limit_url': str,
            'repository_search_url': str,
            'repository_url': str,
            'starred_gists_url': str,
            'starred_url': str,
            'topic_search_url': str,
            'user_organizations_url': str,
            'user_repositories_url': str,
            'user_search_url': str,
            'user_url': str
        }

        self.attribute_map = {
            'authorizations_url': 'authorizations_url',
            'code_search_url': 'code_search_url',
            'commit_search_url': 'commit_search_url',
            'current_user_authorizations_html_url': 'current_user_authorizations_html_url',
            'current_user_repositories_url': 'current_user_repositories_url',
            'current_user_url': 'current_user_url',
            'emails_url': 'emails_url',
            'emojis_url': 'emojis_url',
            'events_url': 'events_url',
            'feeds_url': 'feeds_url',
            'followers_url': 'followers_url',
            'following_url': 'following_url',
            'gists_url': 'gists_url',
            'hub_url': 'hub_url',
            'issue_search_url': 'issue_search_url',
            'issues_url': 'issues_url',
            'keys_url': 'keys_url',
            'label_search_url': 'label_search_url',
            'notifications_url': 'notifications_url',
            'organization_repositories_url': 'organization_repositories_url',
            'organization_teams_url': 'organization_teams_url',
            'organization_url': 'organization_url',
            'public_gists_url': 'public_gists_url',
            'rate_limit_url': 'rate_limit_url',
            'repository_search_url': 'repository_search_url',
            'repository_url': 'repository_url',
            'starred_gists_url': 'starred_gists_url',
            'starred_url': 'starred_url',
            'topic_search_url': 'topic_search_url',
            'user_organizations_url': 'user_organizations_url',
            'user_repositories_url': 'user_repositories_url',
            'user_search_url': 'user_search_url',
            'user_url': 'user_url'
        }

        self._authorizations_url = authorizations_url
        self._code_search_url = code_search_url
        self._commit_search_url = commit_search_url
        self._current_user_authorizations_html_url = current_user_authorizations_html_url
        self._current_user_repositories_url = current_user_repositories_url
        self._current_user_url = current_user_url
        self._emails_url = emails_url
        self._emojis_url = emojis_url
        self._events_url = events_url
        self._feeds_url = feeds_url
        self._followers_url = followers_url
        self._following_url = following_url
        self._gists_url = gists_url
        self._hub_url = hub_url
        self._issue_search_url = issue_search_url
        self._issues_url = issues_url
        self._keys_url = keys_url
        self._label_search_url = label_search_url
        self._notifications_url = notifications_url
        self._organization_repositories_url = organization_repositories_url
        self._organization_teams_url = organization_teams_url
        self._organization_url = organization_url
        self._public_gists_url = public_gists_url
        self._rate_limit_url = rate_limit_url
        self._repository_search_url = repository_search_url
        self._repository_url = repository_url
        self._starred_gists_url = starred_gists_url
        self._starred_url = starred_url
        self._topic_search_url = topic_search_url
        self._user_organizations_url = user_organizations_url
        self._user_repositories_url = user_repositories_url
        self._user_search_url = user_search_url
        self._user_url = user_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetaRoot200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The meta_root_200_response of this MetaRoot200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorizations_url(self):
        """Gets the authorizations_url of this MetaRoot200Response.


        :return: The authorizations_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._authorizations_url

    @authorizations_url.setter
    def authorizations_url(self, authorizations_url):
        """Sets the authorizations_url of this MetaRoot200Response.


        :param authorizations_url: The authorizations_url of this MetaRoot200Response.
        :type authorizations_url: str
        """
        if authorizations_url is None:
            raise ValueError("Invalid value for `authorizations_url`, must not be `None`")

        self._authorizations_url = authorizations_url

    @property
    def code_search_url(self):
        """Gets the code_search_url of this MetaRoot200Response.


        :return: The code_search_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._code_search_url

    @code_search_url.setter
    def code_search_url(self, code_search_url):
        """Sets the code_search_url of this MetaRoot200Response.


        :param code_search_url: The code_search_url of this MetaRoot200Response.
        :type code_search_url: str
        """
        if code_search_url is None:
            raise ValueError("Invalid value for `code_search_url`, must not be `None`")

        self._code_search_url = code_search_url

    @property
    def commit_search_url(self):
        """Gets the commit_search_url of this MetaRoot200Response.


        :return: The commit_search_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._commit_search_url

    @commit_search_url.setter
    def commit_search_url(self, commit_search_url):
        """Sets the commit_search_url of this MetaRoot200Response.


        :param commit_search_url: The commit_search_url of this MetaRoot200Response.
        :type commit_search_url: str
        """
        if commit_search_url is None:
            raise ValueError("Invalid value for `commit_search_url`, must not be `None`")

        self._commit_search_url = commit_search_url

    @property
    def current_user_authorizations_html_url(self):
        """Gets the current_user_authorizations_html_url of this MetaRoot200Response.


        :return: The current_user_authorizations_html_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._current_user_authorizations_html_url

    @current_user_authorizations_html_url.setter
    def current_user_authorizations_html_url(self, current_user_authorizations_html_url):
        """Sets the current_user_authorizations_html_url of this MetaRoot200Response.


        :param current_user_authorizations_html_url: The current_user_authorizations_html_url of this MetaRoot200Response.
        :type current_user_authorizations_html_url: str
        """
        if current_user_authorizations_html_url is None:
            raise ValueError("Invalid value for `current_user_authorizations_html_url`, must not be `None`")

        self._current_user_authorizations_html_url = current_user_authorizations_html_url

    @property
    def current_user_repositories_url(self):
        """Gets the current_user_repositories_url of this MetaRoot200Response.


        :return: The current_user_repositories_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._current_user_repositories_url

    @current_user_repositories_url.setter
    def current_user_repositories_url(self, current_user_repositories_url):
        """Sets the current_user_repositories_url of this MetaRoot200Response.


        :param current_user_repositories_url: The current_user_repositories_url of this MetaRoot200Response.
        :type current_user_repositories_url: str
        """
        if current_user_repositories_url is None:
            raise ValueError("Invalid value for `current_user_repositories_url`, must not be `None`")

        self._current_user_repositories_url = current_user_repositories_url

    @property
    def current_user_url(self):
        """Gets the current_user_url of this MetaRoot200Response.


        :return: The current_user_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._current_user_url

    @current_user_url.setter
    def current_user_url(self, current_user_url):
        """Sets the current_user_url of this MetaRoot200Response.


        :param current_user_url: The current_user_url of this MetaRoot200Response.
        :type current_user_url: str
        """
        if current_user_url is None:
            raise ValueError("Invalid value for `current_user_url`, must not be `None`")

        self._current_user_url = current_user_url

    @property
    def emails_url(self):
        """Gets the emails_url of this MetaRoot200Response.


        :return: The emails_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._emails_url

    @emails_url.setter
    def emails_url(self, emails_url):
        """Sets the emails_url of this MetaRoot200Response.


        :param emails_url: The emails_url of this MetaRoot200Response.
        :type emails_url: str
        """
        if emails_url is None:
            raise ValueError("Invalid value for `emails_url`, must not be `None`")

        self._emails_url = emails_url

    @property
    def emojis_url(self):
        """Gets the emojis_url of this MetaRoot200Response.


        :return: The emojis_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._emojis_url

    @emojis_url.setter
    def emojis_url(self, emojis_url):
        """Sets the emojis_url of this MetaRoot200Response.


        :param emojis_url: The emojis_url of this MetaRoot200Response.
        :type emojis_url: str
        """
        if emojis_url is None:
            raise ValueError("Invalid value for `emojis_url`, must not be `None`")

        self._emojis_url = emojis_url

    @property
    def events_url(self):
        """Gets the events_url of this MetaRoot200Response.


        :return: The events_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this MetaRoot200Response.


        :param events_url: The events_url of this MetaRoot200Response.
        :type events_url: str
        """
        if events_url is None:
            raise ValueError("Invalid value for `events_url`, must not be `None`")

        self._events_url = events_url

    @property
    def feeds_url(self):
        """Gets the feeds_url of this MetaRoot200Response.


        :return: The feeds_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._feeds_url

    @feeds_url.setter
    def feeds_url(self, feeds_url):
        """Sets the feeds_url of this MetaRoot200Response.


        :param feeds_url: The feeds_url of this MetaRoot200Response.
        :type feeds_url: str
        """
        if feeds_url is None:
            raise ValueError("Invalid value for `feeds_url`, must not be `None`")

        self._feeds_url = feeds_url

    @property
    def followers_url(self):
        """Gets the followers_url of this MetaRoot200Response.


        :return: The followers_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._followers_url

    @followers_url.setter
    def followers_url(self, followers_url):
        """Sets the followers_url of this MetaRoot200Response.


        :param followers_url: The followers_url of this MetaRoot200Response.
        :type followers_url: str
        """
        if followers_url is None:
            raise ValueError("Invalid value for `followers_url`, must not be `None`")

        self._followers_url = followers_url

    @property
    def following_url(self):
        """Gets the following_url of this MetaRoot200Response.


        :return: The following_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._following_url

    @following_url.setter
    def following_url(self, following_url):
        """Sets the following_url of this MetaRoot200Response.


        :param following_url: The following_url of this MetaRoot200Response.
        :type following_url: str
        """
        if following_url is None:
            raise ValueError("Invalid value for `following_url`, must not be `None`")

        self._following_url = following_url

    @property
    def gists_url(self):
        """Gets the gists_url of this MetaRoot200Response.


        :return: The gists_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._gists_url

    @gists_url.setter
    def gists_url(self, gists_url):
        """Sets the gists_url of this MetaRoot200Response.


        :param gists_url: The gists_url of this MetaRoot200Response.
        :type gists_url: str
        """
        if gists_url is None:
            raise ValueError("Invalid value for `gists_url`, must not be `None`")

        self._gists_url = gists_url

    @property
    def hub_url(self):
        """Gets the hub_url of this MetaRoot200Response.


        :return: The hub_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._hub_url

    @hub_url.setter
    def hub_url(self, hub_url):
        """Sets the hub_url of this MetaRoot200Response.


        :param hub_url: The hub_url of this MetaRoot200Response.
        :type hub_url: str
        """
        if hub_url is None:
            raise ValueError("Invalid value for `hub_url`, must not be `None`")

        self._hub_url = hub_url

    @property
    def issue_search_url(self):
        """Gets the issue_search_url of this MetaRoot200Response.


        :return: The issue_search_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._issue_search_url

    @issue_search_url.setter
    def issue_search_url(self, issue_search_url):
        """Sets the issue_search_url of this MetaRoot200Response.


        :param issue_search_url: The issue_search_url of this MetaRoot200Response.
        :type issue_search_url: str
        """
        if issue_search_url is None:
            raise ValueError("Invalid value for `issue_search_url`, must not be `None`")

        self._issue_search_url = issue_search_url

    @property
    def issues_url(self):
        """Gets the issues_url of this MetaRoot200Response.


        :return: The issues_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._issues_url

    @issues_url.setter
    def issues_url(self, issues_url):
        """Sets the issues_url of this MetaRoot200Response.


        :param issues_url: The issues_url of this MetaRoot200Response.
        :type issues_url: str
        """
        if issues_url is None:
            raise ValueError("Invalid value for `issues_url`, must not be `None`")

        self._issues_url = issues_url

    @property
    def keys_url(self):
        """Gets the keys_url of this MetaRoot200Response.


        :return: The keys_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._keys_url

    @keys_url.setter
    def keys_url(self, keys_url):
        """Sets the keys_url of this MetaRoot200Response.


        :param keys_url: The keys_url of this MetaRoot200Response.
        :type keys_url: str
        """
        if keys_url is None:
            raise ValueError("Invalid value for `keys_url`, must not be `None`")

        self._keys_url = keys_url

    @property
    def label_search_url(self):
        """Gets the label_search_url of this MetaRoot200Response.


        :return: The label_search_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._label_search_url

    @label_search_url.setter
    def label_search_url(self, label_search_url):
        """Sets the label_search_url of this MetaRoot200Response.


        :param label_search_url: The label_search_url of this MetaRoot200Response.
        :type label_search_url: str
        """
        if label_search_url is None:
            raise ValueError("Invalid value for `label_search_url`, must not be `None`")

        self._label_search_url = label_search_url

    @property
    def notifications_url(self):
        """Gets the notifications_url of this MetaRoot200Response.


        :return: The notifications_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._notifications_url

    @notifications_url.setter
    def notifications_url(self, notifications_url):
        """Sets the notifications_url of this MetaRoot200Response.


        :param notifications_url: The notifications_url of this MetaRoot200Response.
        :type notifications_url: str
        """
        if notifications_url is None:
            raise ValueError("Invalid value for `notifications_url`, must not be `None`")

        self._notifications_url = notifications_url

    @property
    def organization_repositories_url(self):
        """Gets the organization_repositories_url of this MetaRoot200Response.


        :return: The organization_repositories_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._organization_repositories_url

    @organization_repositories_url.setter
    def organization_repositories_url(self, organization_repositories_url):
        """Sets the organization_repositories_url of this MetaRoot200Response.


        :param organization_repositories_url: The organization_repositories_url of this MetaRoot200Response.
        :type organization_repositories_url: str
        """
        if organization_repositories_url is None:
            raise ValueError("Invalid value for `organization_repositories_url`, must not be `None`")

        self._organization_repositories_url = organization_repositories_url

    @property
    def organization_teams_url(self):
        """Gets the organization_teams_url of this MetaRoot200Response.


        :return: The organization_teams_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._organization_teams_url

    @organization_teams_url.setter
    def organization_teams_url(self, organization_teams_url):
        """Sets the organization_teams_url of this MetaRoot200Response.


        :param organization_teams_url: The organization_teams_url of this MetaRoot200Response.
        :type organization_teams_url: str
        """
        if organization_teams_url is None:
            raise ValueError("Invalid value for `organization_teams_url`, must not be `None`")

        self._organization_teams_url = organization_teams_url

    @property
    def organization_url(self):
        """Gets the organization_url of this MetaRoot200Response.


        :return: The organization_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._organization_url

    @organization_url.setter
    def organization_url(self, organization_url):
        """Sets the organization_url of this MetaRoot200Response.


        :param organization_url: The organization_url of this MetaRoot200Response.
        :type organization_url: str
        """
        if organization_url is None:
            raise ValueError("Invalid value for `organization_url`, must not be `None`")

        self._organization_url = organization_url

    @property
    def public_gists_url(self):
        """Gets the public_gists_url of this MetaRoot200Response.


        :return: The public_gists_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._public_gists_url

    @public_gists_url.setter
    def public_gists_url(self, public_gists_url):
        """Sets the public_gists_url of this MetaRoot200Response.


        :param public_gists_url: The public_gists_url of this MetaRoot200Response.
        :type public_gists_url: str
        """
        if public_gists_url is None:
            raise ValueError("Invalid value for `public_gists_url`, must not be `None`")

        self._public_gists_url = public_gists_url

    @property
    def rate_limit_url(self):
        """Gets the rate_limit_url of this MetaRoot200Response.


        :return: The rate_limit_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._rate_limit_url

    @rate_limit_url.setter
    def rate_limit_url(self, rate_limit_url):
        """Sets the rate_limit_url of this MetaRoot200Response.


        :param rate_limit_url: The rate_limit_url of this MetaRoot200Response.
        :type rate_limit_url: str
        """
        if rate_limit_url is None:
            raise ValueError("Invalid value for `rate_limit_url`, must not be `None`")

        self._rate_limit_url = rate_limit_url

    @property
    def repository_search_url(self):
        """Gets the repository_search_url of this MetaRoot200Response.


        :return: The repository_search_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._repository_search_url

    @repository_search_url.setter
    def repository_search_url(self, repository_search_url):
        """Sets the repository_search_url of this MetaRoot200Response.


        :param repository_search_url: The repository_search_url of this MetaRoot200Response.
        :type repository_search_url: str
        """
        if repository_search_url is None:
            raise ValueError("Invalid value for `repository_search_url`, must not be `None`")

        self._repository_search_url = repository_search_url

    @property
    def repository_url(self):
        """Gets the repository_url of this MetaRoot200Response.


        :return: The repository_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this MetaRoot200Response.


        :param repository_url: The repository_url of this MetaRoot200Response.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def starred_gists_url(self):
        """Gets the starred_gists_url of this MetaRoot200Response.


        :return: The starred_gists_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._starred_gists_url

    @starred_gists_url.setter
    def starred_gists_url(self, starred_gists_url):
        """Sets the starred_gists_url of this MetaRoot200Response.


        :param starred_gists_url: The starred_gists_url of this MetaRoot200Response.
        :type starred_gists_url: str
        """
        if starred_gists_url is None:
            raise ValueError("Invalid value for `starred_gists_url`, must not be `None`")

        self._starred_gists_url = starred_gists_url

    @property
    def starred_url(self):
        """Gets the starred_url of this MetaRoot200Response.


        :return: The starred_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._starred_url

    @starred_url.setter
    def starred_url(self, starred_url):
        """Sets the starred_url of this MetaRoot200Response.


        :param starred_url: The starred_url of this MetaRoot200Response.
        :type starred_url: str
        """
        if starred_url is None:
            raise ValueError("Invalid value for `starred_url`, must not be `None`")

        self._starred_url = starred_url

    @property
    def topic_search_url(self):
        """Gets the topic_search_url of this MetaRoot200Response.


        :return: The topic_search_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._topic_search_url

    @topic_search_url.setter
    def topic_search_url(self, topic_search_url):
        """Sets the topic_search_url of this MetaRoot200Response.


        :param topic_search_url: The topic_search_url of this MetaRoot200Response.
        :type topic_search_url: str
        """

        self._topic_search_url = topic_search_url

    @property
    def user_organizations_url(self):
        """Gets the user_organizations_url of this MetaRoot200Response.


        :return: The user_organizations_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._user_organizations_url

    @user_organizations_url.setter
    def user_organizations_url(self, user_organizations_url):
        """Sets the user_organizations_url of this MetaRoot200Response.


        :param user_organizations_url: The user_organizations_url of this MetaRoot200Response.
        :type user_organizations_url: str
        """
        if user_organizations_url is None:
            raise ValueError("Invalid value for `user_organizations_url`, must not be `None`")

        self._user_organizations_url = user_organizations_url

    @property
    def user_repositories_url(self):
        """Gets the user_repositories_url of this MetaRoot200Response.


        :return: The user_repositories_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._user_repositories_url

    @user_repositories_url.setter
    def user_repositories_url(self, user_repositories_url):
        """Sets the user_repositories_url of this MetaRoot200Response.


        :param user_repositories_url: The user_repositories_url of this MetaRoot200Response.
        :type user_repositories_url: str
        """
        if user_repositories_url is None:
            raise ValueError("Invalid value for `user_repositories_url`, must not be `None`")

        self._user_repositories_url = user_repositories_url

    @property
    def user_search_url(self):
        """Gets the user_search_url of this MetaRoot200Response.


        :return: The user_search_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._user_search_url

    @user_search_url.setter
    def user_search_url(self, user_search_url):
        """Sets the user_search_url of this MetaRoot200Response.


        :param user_search_url: The user_search_url of this MetaRoot200Response.
        :type user_search_url: str
        """
        if user_search_url is None:
            raise ValueError("Invalid value for `user_search_url`, must not be `None`")

        self._user_search_url = user_search_url

    @property
    def user_url(self):
        """Gets the user_url of this MetaRoot200Response.


        :return: The user_url of this MetaRoot200Response.
        :rtype: str
        """
        return self._user_url

    @user_url.setter
    def user_url(self, user_url):
        """Sets the user_url of this MetaRoot200Response.


        :param user_url: The user_url of this MetaRoot200Response.
        :type user_url: str
        """
        if user_url is None:
            raise ValueError("Invalid value for `user_url`, must not be `None`")

        self._user_url = user_url
