# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.org_membership_permissions import OrgMembershipPermissions
from openapi_server.models.organization_simple import OrganizationSimple
from openapi_server import util


class OrgMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organization: OrganizationSimple=None, organization_url: str=None, permissions: OrgMembershipPermissions=None, role: str=None, state: str=None, url: str=None, user: NullableSimpleUser=None):
        """OrgMembership - a model defined in OpenAPI

        :param organization: The organization of this OrgMembership.
        :param organization_url: The organization_url of this OrgMembership.
        :param permissions: The permissions of this OrgMembership.
        :param role: The role of this OrgMembership.
        :param state: The state of this OrgMembership.
        :param url: The url of this OrgMembership.
        :param user: The user of this OrgMembership.
        """
        self.openapi_types = {
            'organization': OrganizationSimple,
            'organization_url': str,
            'permissions': OrgMembershipPermissions,
            'role': str,
            'state': str,
            'url': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'organization': 'organization',
            'organization_url': 'organization_url',
            'permissions': 'permissions',
            'role': 'role',
            'state': 'state',
            'url': 'url',
            'user': 'user'
        }

        self._organization = organization
        self._organization_url = organization_url
        self._permissions = permissions
        self._role = role
        self._state = state
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The org-membership of this OrgMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization(self):
        """Gets the organization of this OrgMembership.


        :return: The organization of this OrgMembership.
        :rtype: OrganizationSimple
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrgMembership.


        :param organization: The organization of this OrgMembership.
        :type organization: OrganizationSimple
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")

        self._organization = organization

    @property
    def organization_url(self):
        """Gets the organization_url of this OrgMembership.


        :return: The organization_url of this OrgMembership.
        :rtype: str
        """
        return self._organization_url

    @organization_url.setter
    def organization_url(self, organization_url):
        """Sets the organization_url of this OrgMembership.


        :param organization_url: The organization_url of this OrgMembership.
        :type organization_url: str
        """
        if organization_url is None:
            raise ValueError("Invalid value for `organization_url`, must not be `None`")

        self._organization_url = organization_url

    @property
    def permissions(self):
        """Gets the permissions of this OrgMembership.


        :return: The permissions of this OrgMembership.
        :rtype: OrgMembershipPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this OrgMembership.


        :param permissions: The permissions of this OrgMembership.
        :type permissions: OrgMembershipPermissions
        """

        self._permissions = permissions

    @property
    def role(self):
        """Gets the role of this OrgMembership.

        The user's membership type in the organization.

        :return: The role of this OrgMembership.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrgMembership.

        The user's membership type in the organization.

        :param role: The role of this OrgMembership.
        :type role: str
        """
        allowed_values = ["admin", "member", "billing_manager"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def state(self):
        """Gets the state of this OrgMembership.

        The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.

        :return: The state of this OrgMembership.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OrgMembership.

        The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.

        :param state: The state of this OrgMembership.
        :type state: str
        """
        allowed_values = ["active", "pending"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def url(self):
        """Gets the url of this OrgMembership.


        :return: The url of this OrgMembership.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrgMembership.


        :param url: The url of this OrgMembership.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this OrgMembership.


        :return: The user of this OrgMembership.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OrgMembership.


        :param user: The user of this OrgMembership.
        :type user: NullableSimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
