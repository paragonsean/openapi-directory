# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgMembershipPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_create_repository: bool=None):
        """OrgMembershipPermissions - a model defined in OpenAPI

        :param can_create_repository: The can_create_repository of this OrgMembershipPermissions.
        """
        self.openapi_types = {
            'can_create_repository': bool
        }

        self.attribute_map = {
            'can_create_repository': 'can_create_repository'
        }

        self._can_create_repository = can_create_repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgMembershipPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The org_membership_permissions of this OrgMembershipPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_create_repository(self):
        """Gets the can_create_repository of this OrgMembershipPermissions.


        :return: The can_create_repository of this OrgMembershipPermissions.
        :rtype: bool
        """
        return self._can_create_repository

    @can_create_repository.setter
    def can_create_repository(self, can_create_repository):
        """Sets the can_create_repository of this OrgMembershipPermissions.


        :param can_create_repository: The can_create_repository of this OrgMembershipPermissions.
        :type can_create_repository: bool
        """
        if can_create_repository is None:
            raise ValueError("Invalid value for `can_create_repository`, must not be `None`")

        self._can_create_repository = can_create_repository
