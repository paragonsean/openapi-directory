# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_user import SimpleUser
from openapi_server.models.timeline_cross_referenced_event_source import TimelineCrossReferencedEventSource
from openapi_server import util


class TimelineCrossReferencedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: SimpleUser=None, created_at: datetime=None, event: str=None, source: TimelineCrossReferencedEventSource=None, updated_at: datetime=None):
        """TimelineCrossReferencedEvent - a model defined in OpenAPI

        :param actor: The actor of this TimelineCrossReferencedEvent.
        :param created_at: The created_at of this TimelineCrossReferencedEvent.
        :param event: The event of this TimelineCrossReferencedEvent.
        :param source: The source of this TimelineCrossReferencedEvent.
        :param updated_at: The updated_at of this TimelineCrossReferencedEvent.
        """
        self.openapi_types = {
            'actor': SimpleUser,
            'created_at': datetime,
            'event': str,
            'source': TimelineCrossReferencedEventSource,
            'updated_at': datetime
        }

        self.attribute_map = {
            'actor': 'actor',
            'created_at': 'created_at',
            'event': 'event',
            'source': 'source',
            'updated_at': 'updated_at'
        }

        self._actor = actor
        self._created_at = created_at
        self._event = event
        self._source = source
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineCrossReferencedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The timeline-cross-referenced-event of this TimelineCrossReferencedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this TimelineCrossReferencedEvent.


        :return: The actor of this TimelineCrossReferencedEvent.
        :rtype: SimpleUser
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this TimelineCrossReferencedEvent.


        :param actor: The actor of this TimelineCrossReferencedEvent.
        :type actor: SimpleUser
        """

        self._actor = actor

    @property
    def created_at(self):
        """Gets the created_at of this TimelineCrossReferencedEvent.


        :return: The created_at of this TimelineCrossReferencedEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TimelineCrossReferencedEvent.


        :param created_at: The created_at of this TimelineCrossReferencedEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this TimelineCrossReferencedEvent.


        :return: The event of this TimelineCrossReferencedEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TimelineCrossReferencedEvent.


        :param event: The event of this TimelineCrossReferencedEvent.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def source(self):
        """Gets the source of this TimelineCrossReferencedEvent.


        :return: The source of this TimelineCrossReferencedEvent.
        :rtype: TimelineCrossReferencedEventSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TimelineCrossReferencedEvent.


        :param source: The source of this TimelineCrossReferencedEvent.
        :type source: TimelineCrossReferencedEventSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def updated_at(self):
        """Gets the updated_at of this TimelineCrossReferencedEvent.


        :return: The updated_at of this TimelineCrossReferencedEvent.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TimelineCrossReferencedEvent.


        :param updated_at: The updated_at of this TimelineCrossReferencedEvent.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
