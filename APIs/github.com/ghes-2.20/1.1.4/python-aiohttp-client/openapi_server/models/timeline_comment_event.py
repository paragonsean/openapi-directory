# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author_association import AuthorAssociation
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.reaction_rollup import ReactionRollup
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class TimelineCommentEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: SimpleUser=None, author_association: AuthorAssociation=None, body: str=None, body_html: str=None, body_text: str=None, created_at: datetime=None, event: str=None, html_url: str=None, id: int=None, issue_url: str=None, node_id: str=None, performed_via_github_app: NullableIntegration=None, reactions: ReactionRollup=None, updated_at: datetime=None, url: str=None, user: SimpleUser=None):
        """TimelineCommentEvent - a model defined in OpenAPI

        :param actor: The actor of this TimelineCommentEvent.
        :param author_association: The author_association of this TimelineCommentEvent.
        :param body: The body of this TimelineCommentEvent.
        :param body_html: The body_html of this TimelineCommentEvent.
        :param body_text: The body_text of this TimelineCommentEvent.
        :param created_at: The created_at of this TimelineCommentEvent.
        :param event: The event of this TimelineCommentEvent.
        :param html_url: The html_url of this TimelineCommentEvent.
        :param id: The id of this TimelineCommentEvent.
        :param issue_url: The issue_url of this TimelineCommentEvent.
        :param node_id: The node_id of this TimelineCommentEvent.
        :param performed_via_github_app: The performed_via_github_app of this TimelineCommentEvent.
        :param reactions: The reactions of this TimelineCommentEvent.
        :param updated_at: The updated_at of this TimelineCommentEvent.
        :param url: The url of this TimelineCommentEvent.
        :param user: The user of this TimelineCommentEvent.
        """
        self.openapi_types = {
            'actor': SimpleUser,
            'author_association': AuthorAssociation,
            'body': str,
            'body_html': str,
            'body_text': str,
            'created_at': datetime,
            'event': str,
            'html_url': str,
            'id': int,
            'issue_url': str,
            'node_id': str,
            'performed_via_github_app': NullableIntegration,
            'reactions': ReactionRollup,
            'updated_at': datetime,
            'url': str,
            'user': SimpleUser
        }

        self.attribute_map = {
            'actor': 'actor',
            'author_association': 'author_association',
            'body': 'body',
            'body_html': 'body_html',
            'body_text': 'body_text',
            'created_at': 'created_at',
            'event': 'event',
            'html_url': 'html_url',
            'id': 'id',
            'issue_url': 'issue_url',
            'node_id': 'node_id',
            'performed_via_github_app': 'performed_via_github_app',
            'reactions': 'reactions',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._actor = actor
        self._author_association = author_association
        self._body = body
        self._body_html = body_html
        self._body_text = body_text
        self._created_at = created_at
        self._event = event
        self._html_url = html_url
        self._id = id
        self._issue_url = issue_url
        self._node_id = node_id
        self._performed_via_github_app = performed_via_github_app
        self._reactions = reactions
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineCommentEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The timeline-comment-event of this TimelineCommentEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this TimelineCommentEvent.


        :return: The actor of this TimelineCommentEvent.
        :rtype: SimpleUser
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this TimelineCommentEvent.


        :param actor: The actor of this TimelineCommentEvent.
        :type actor: SimpleUser
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")

        self._actor = actor

    @property
    def author_association(self):
        """Gets the author_association of this TimelineCommentEvent.


        :return: The author_association of this TimelineCommentEvent.
        :rtype: AuthorAssociation
        """
        return self._author_association

    @author_association.setter
    def author_association(self, author_association):
        """Sets the author_association of this TimelineCommentEvent.


        :param author_association: The author_association of this TimelineCommentEvent.
        :type author_association: AuthorAssociation
        """
        if author_association is None:
            raise ValueError("Invalid value for `author_association`, must not be `None`")

        self._author_association = author_association

    @property
    def body(self):
        """Gets the body of this TimelineCommentEvent.

        Contents of the issue comment

        :return: The body of this TimelineCommentEvent.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TimelineCommentEvent.

        Contents of the issue comment

        :param body: The body of this TimelineCommentEvent.
        :type body: str
        """

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this TimelineCommentEvent.


        :return: The body_html of this TimelineCommentEvent.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this TimelineCommentEvent.


        :param body_html: The body_html of this TimelineCommentEvent.
        :type body_html: str
        """

        self._body_html = body_html

    @property
    def body_text(self):
        """Gets the body_text of this TimelineCommentEvent.


        :return: The body_text of this TimelineCommentEvent.
        :rtype: str
        """
        return self._body_text

    @body_text.setter
    def body_text(self, body_text):
        """Sets the body_text of this TimelineCommentEvent.


        :param body_text: The body_text of this TimelineCommentEvent.
        :type body_text: str
        """

        self._body_text = body_text

    @property
    def created_at(self):
        """Gets the created_at of this TimelineCommentEvent.


        :return: The created_at of this TimelineCommentEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TimelineCommentEvent.


        :param created_at: The created_at of this TimelineCommentEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this TimelineCommentEvent.


        :return: The event of this TimelineCommentEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TimelineCommentEvent.


        :param event: The event of this TimelineCommentEvent.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def html_url(self):
        """Gets the html_url of this TimelineCommentEvent.


        :return: The html_url of this TimelineCommentEvent.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TimelineCommentEvent.


        :param html_url: The html_url of this TimelineCommentEvent.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this TimelineCommentEvent.

        Unique identifier of the issue comment

        :return: The id of this TimelineCommentEvent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimelineCommentEvent.

        Unique identifier of the issue comment

        :param id: The id of this TimelineCommentEvent.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def issue_url(self):
        """Gets the issue_url of this TimelineCommentEvent.


        :return: The issue_url of this TimelineCommentEvent.
        :rtype: str
        """
        return self._issue_url

    @issue_url.setter
    def issue_url(self, issue_url):
        """Sets the issue_url of this TimelineCommentEvent.


        :param issue_url: The issue_url of this TimelineCommentEvent.
        :type issue_url: str
        """
        if issue_url is None:
            raise ValueError("Invalid value for `issue_url`, must not be `None`")

        self._issue_url = issue_url

    @property
    def node_id(self):
        """Gets the node_id of this TimelineCommentEvent.


        :return: The node_id of this TimelineCommentEvent.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TimelineCommentEvent.


        :param node_id: The node_id of this TimelineCommentEvent.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def performed_via_github_app(self):
        """Gets the performed_via_github_app of this TimelineCommentEvent.


        :return: The performed_via_github_app of this TimelineCommentEvent.
        :rtype: NullableIntegration
        """
        return self._performed_via_github_app

    @performed_via_github_app.setter
    def performed_via_github_app(self, performed_via_github_app):
        """Sets the performed_via_github_app of this TimelineCommentEvent.


        :param performed_via_github_app: The performed_via_github_app of this TimelineCommentEvent.
        :type performed_via_github_app: NullableIntegration
        """

        self._performed_via_github_app = performed_via_github_app

    @property
    def reactions(self):
        """Gets the reactions of this TimelineCommentEvent.


        :return: The reactions of this TimelineCommentEvent.
        :rtype: ReactionRollup
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this TimelineCommentEvent.


        :param reactions: The reactions of this TimelineCommentEvent.
        :type reactions: ReactionRollup
        """

        self._reactions = reactions

    @property
    def updated_at(self):
        """Gets the updated_at of this TimelineCommentEvent.


        :return: The updated_at of this TimelineCommentEvent.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TimelineCommentEvent.


        :param updated_at: The updated_at of this TimelineCommentEvent.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this TimelineCommentEvent.

        URL for the issue comment

        :return: The url of this TimelineCommentEvent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TimelineCommentEvent.

        URL for the issue comment

        :param url: The url of this TimelineCommentEvent.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this TimelineCommentEvent.


        :return: The user of this TimelineCommentEvent.
        :rtype: SimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TimelineCommentEvent.


        :param user: The user of this TimelineCommentEvent.
        :type user: SimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
