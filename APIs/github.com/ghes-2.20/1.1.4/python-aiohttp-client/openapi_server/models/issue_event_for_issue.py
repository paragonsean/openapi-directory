# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.added_to_project_issue_event import AddedToProjectIssueEvent
from openapi_server.models.added_to_project_issue_event_project_card import AddedToProjectIssueEventProjectCard
from openapi_server.models.assigned_issue_event import AssignedIssueEvent
from openapi_server.models.converted_note_to_issue_issue_event import ConvertedNoteToIssueIssueEvent
from openapi_server.models.demilestoned_issue_event import DemilestonedIssueEvent
from openapi_server.models.demilestoned_issue_event_milestone import DemilestonedIssueEventMilestone
from openapi_server.models.integration import Integration
from openapi_server.models.labeled_issue_event import LabeledIssueEvent
from openapi_server.models.labeled_issue_event_label import LabeledIssueEventLabel
from openapi_server.models.locked_issue_event import LockedIssueEvent
from openapi_server.models.milestoned_issue_event import MilestonedIssueEvent
from openapi_server.models.moved_column_in_project_issue_event import MovedColumnInProjectIssueEvent
from openapi_server.models.removed_from_project_issue_event import RemovedFromProjectIssueEvent
from openapi_server.models.renamed_issue_event import RenamedIssueEvent
from openapi_server.models.renamed_issue_event_rename import RenamedIssueEventRename
from openapi_server.models.review_dismissed_issue_event import ReviewDismissedIssueEvent
from openapi_server.models.review_dismissed_issue_event_dismissed_review import ReviewDismissedIssueEventDismissedReview
from openapi_server.models.review_request_removed_issue_event import ReviewRequestRemovedIssueEvent
from openapi_server.models.review_requested_issue_event import ReviewRequestedIssueEvent
from openapi_server.models.simple_user import SimpleUser
from openapi_server.models.team import Team
from openapi_server.models.unassigned_issue_event import UnassignedIssueEvent
from openapi_server.models.unlabeled_issue_event import UnlabeledIssueEvent
from openapi_server import util


class IssueEventForIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: SimpleUser=None, commit_id: str=None, commit_url: str=None, created_at: str=None, event: str=None, id: int=None, label: LabeledIssueEventLabel=None, node_id: str=None, performed_via_github_app: Integration=None, url: str=None, assignee: SimpleUser=None, assigner: SimpleUser=None, milestone: DemilestonedIssueEventMilestone=None, rename: RenamedIssueEventRename=None, requested_reviewer: SimpleUser=None, requested_team: Team=None, review_requester: SimpleUser=None, dismissed_review: ReviewDismissedIssueEventDismissedReview=None, lock_reason: str=None, project_card: AddedToProjectIssueEventProjectCard=None):
        """IssueEventForIssue - a model defined in OpenAPI

        :param actor: The actor of this IssueEventForIssue.
        :param commit_id: The commit_id of this IssueEventForIssue.
        :param commit_url: The commit_url of this IssueEventForIssue.
        :param created_at: The created_at of this IssueEventForIssue.
        :param event: The event of this IssueEventForIssue.
        :param id: The id of this IssueEventForIssue.
        :param label: The label of this IssueEventForIssue.
        :param node_id: The node_id of this IssueEventForIssue.
        :param performed_via_github_app: The performed_via_github_app of this IssueEventForIssue.
        :param url: The url of this IssueEventForIssue.
        :param assignee: The assignee of this IssueEventForIssue.
        :param assigner: The assigner of this IssueEventForIssue.
        :param milestone: The milestone of this IssueEventForIssue.
        :param rename: The rename of this IssueEventForIssue.
        :param requested_reviewer: The requested_reviewer of this IssueEventForIssue.
        :param requested_team: The requested_team of this IssueEventForIssue.
        :param review_requester: The review_requester of this IssueEventForIssue.
        :param dismissed_review: The dismissed_review of this IssueEventForIssue.
        :param lock_reason: The lock_reason of this IssueEventForIssue.
        :param project_card: The project_card of this IssueEventForIssue.
        """
        self.openapi_types = {
            'actor': SimpleUser,
            'commit_id': str,
            'commit_url': str,
            'created_at': str,
            'event': str,
            'id': int,
            'label': LabeledIssueEventLabel,
            'node_id': str,
            'performed_via_github_app': Integration,
            'url': str,
            'assignee': SimpleUser,
            'assigner': SimpleUser,
            'milestone': DemilestonedIssueEventMilestone,
            'rename': RenamedIssueEventRename,
            'requested_reviewer': SimpleUser,
            'requested_team': Team,
            'review_requester': SimpleUser,
            'dismissed_review': ReviewDismissedIssueEventDismissedReview,
            'lock_reason': str,
            'project_card': AddedToProjectIssueEventProjectCard
        }

        self.attribute_map = {
            'actor': 'actor',
            'commit_id': 'commit_id',
            'commit_url': 'commit_url',
            'created_at': 'created_at',
            'event': 'event',
            'id': 'id',
            'label': 'label',
            'node_id': 'node_id',
            'performed_via_github_app': 'performed_via_github_app',
            'url': 'url',
            'assignee': 'assignee',
            'assigner': 'assigner',
            'milestone': 'milestone',
            'rename': 'rename',
            'requested_reviewer': 'requested_reviewer',
            'requested_team': 'requested_team',
            'review_requester': 'review_requester',
            'dismissed_review': 'dismissed_review',
            'lock_reason': 'lock_reason',
            'project_card': 'project_card'
        }

        self._actor = actor
        self._commit_id = commit_id
        self._commit_url = commit_url
        self._created_at = created_at
        self._event = event
        self._id = id
        self._label = label
        self._node_id = node_id
        self._performed_via_github_app = performed_via_github_app
        self._url = url
        self._assignee = assignee
        self._assigner = assigner
        self._milestone = milestone
        self._rename = rename
        self._requested_reviewer = requested_reviewer
        self._requested_team = requested_team
        self._review_requester = review_requester
        self._dismissed_review = dismissed_review
        self._lock_reason = lock_reason
        self._project_card = project_card

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueEventForIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issue-event-for-issue of this IssueEventForIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this IssueEventForIssue.


        :return: The actor of this IssueEventForIssue.
        :rtype: SimpleUser
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this IssueEventForIssue.


        :param actor: The actor of this IssueEventForIssue.
        :type actor: SimpleUser
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")

        self._actor = actor

    @property
    def commit_id(self):
        """Gets the commit_id of this IssueEventForIssue.


        :return: The commit_id of this IssueEventForIssue.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this IssueEventForIssue.


        :param commit_id: The commit_id of this IssueEventForIssue.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id

    @property
    def commit_url(self):
        """Gets the commit_url of this IssueEventForIssue.


        :return: The commit_url of this IssueEventForIssue.
        :rtype: str
        """
        return self._commit_url

    @commit_url.setter
    def commit_url(self, commit_url):
        """Sets the commit_url of this IssueEventForIssue.


        :param commit_url: The commit_url of this IssueEventForIssue.
        :type commit_url: str
        """
        if commit_url is None:
            raise ValueError("Invalid value for `commit_url`, must not be `None`")

        self._commit_url = commit_url

    @property
    def created_at(self):
        """Gets the created_at of this IssueEventForIssue.


        :return: The created_at of this IssueEventForIssue.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IssueEventForIssue.


        :param created_at: The created_at of this IssueEventForIssue.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this IssueEventForIssue.


        :return: The event of this IssueEventForIssue.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this IssueEventForIssue.


        :param event: The event of this IssueEventForIssue.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def id(self):
        """Gets the id of this IssueEventForIssue.


        :return: The id of this IssueEventForIssue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueEventForIssue.


        :param id: The id of this IssueEventForIssue.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this IssueEventForIssue.


        :return: The label of this IssueEventForIssue.
        :rtype: LabeledIssueEventLabel
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this IssueEventForIssue.


        :param label: The label of this IssueEventForIssue.
        :type label: LabeledIssueEventLabel
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def node_id(self):
        """Gets the node_id of this IssueEventForIssue.


        :return: The node_id of this IssueEventForIssue.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this IssueEventForIssue.


        :param node_id: The node_id of this IssueEventForIssue.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def performed_via_github_app(self):
        """Gets the performed_via_github_app of this IssueEventForIssue.


        :return: The performed_via_github_app of this IssueEventForIssue.
        :rtype: Integration
        """
        return self._performed_via_github_app

    @performed_via_github_app.setter
    def performed_via_github_app(self, performed_via_github_app):
        """Sets the performed_via_github_app of this IssueEventForIssue.


        :param performed_via_github_app: The performed_via_github_app of this IssueEventForIssue.
        :type performed_via_github_app: Integration
        """
        if performed_via_github_app is None:
            raise ValueError("Invalid value for `performed_via_github_app`, must not be `None`")

        self._performed_via_github_app = performed_via_github_app

    @property
    def url(self):
        """Gets the url of this IssueEventForIssue.


        :return: The url of this IssueEventForIssue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssueEventForIssue.


        :param url: The url of this IssueEventForIssue.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def assignee(self):
        """Gets the assignee of this IssueEventForIssue.


        :return: The assignee of this IssueEventForIssue.
        :rtype: SimpleUser
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this IssueEventForIssue.


        :param assignee: The assignee of this IssueEventForIssue.
        :type assignee: SimpleUser
        """
        if assignee is None:
            raise ValueError("Invalid value for `assignee`, must not be `None`")

        self._assignee = assignee

    @property
    def assigner(self):
        """Gets the assigner of this IssueEventForIssue.


        :return: The assigner of this IssueEventForIssue.
        :rtype: SimpleUser
        """
        return self._assigner

    @assigner.setter
    def assigner(self, assigner):
        """Sets the assigner of this IssueEventForIssue.


        :param assigner: The assigner of this IssueEventForIssue.
        :type assigner: SimpleUser
        """
        if assigner is None:
            raise ValueError("Invalid value for `assigner`, must not be `None`")

        self._assigner = assigner

    @property
    def milestone(self):
        """Gets the milestone of this IssueEventForIssue.


        :return: The milestone of this IssueEventForIssue.
        :rtype: DemilestonedIssueEventMilestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this IssueEventForIssue.


        :param milestone: The milestone of this IssueEventForIssue.
        :type milestone: DemilestonedIssueEventMilestone
        """
        if milestone is None:
            raise ValueError("Invalid value for `milestone`, must not be `None`")

        self._milestone = milestone

    @property
    def rename(self):
        """Gets the rename of this IssueEventForIssue.


        :return: The rename of this IssueEventForIssue.
        :rtype: RenamedIssueEventRename
        """
        return self._rename

    @rename.setter
    def rename(self, rename):
        """Sets the rename of this IssueEventForIssue.


        :param rename: The rename of this IssueEventForIssue.
        :type rename: RenamedIssueEventRename
        """
        if rename is None:
            raise ValueError("Invalid value for `rename`, must not be `None`")

        self._rename = rename

    @property
    def requested_reviewer(self):
        """Gets the requested_reviewer of this IssueEventForIssue.


        :return: The requested_reviewer of this IssueEventForIssue.
        :rtype: SimpleUser
        """
        return self._requested_reviewer

    @requested_reviewer.setter
    def requested_reviewer(self, requested_reviewer):
        """Sets the requested_reviewer of this IssueEventForIssue.


        :param requested_reviewer: The requested_reviewer of this IssueEventForIssue.
        :type requested_reviewer: SimpleUser
        """

        self._requested_reviewer = requested_reviewer

    @property
    def requested_team(self):
        """Gets the requested_team of this IssueEventForIssue.


        :return: The requested_team of this IssueEventForIssue.
        :rtype: Team
        """
        return self._requested_team

    @requested_team.setter
    def requested_team(self, requested_team):
        """Sets the requested_team of this IssueEventForIssue.


        :param requested_team: The requested_team of this IssueEventForIssue.
        :type requested_team: Team
        """

        self._requested_team = requested_team

    @property
    def review_requester(self):
        """Gets the review_requester of this IssueEventForIssue.


        :return: The review_requester of this IssueEventForIssue.
        :rtype: SimpleUser
        """
        return self._review_requester

    @review_requester.setter
    def review_requester(self, review_requester):
        """Sets the review_requester of this IssueEventForIssue.


        :param review_requester: The review_requester of this IssueEventForIssue.
        :type review_requester: SimpleUser
        """
        if review_requester is None:
            raise ValueError("Invalid value for `review_requester`, must not be `None`")

        self._review_requester = review_requester

    @property
    def dismissed_review(self):
        """Gets the dismissed_review of this IssueEventForIssue.


        :return: The dismissed_review of this IssueEventForIssue.
        :rtype: ReviewDismissedIssueEventDismissedReview
        """
        return self._dismissed_review

    @dismissed_review.setter
    def dismissed_review(self, dismissed_review):
        """Sets the dismissed_review of this IssueEventForIssue.


        :param dismissed_review: The dismissed_review of this IssueEventForIssue.
        :type dismissed_review: ReviewDismissedIssueEventDismissedReview
        """
        if dismissed_review is None:
            raise ValueError("Invalid value for `dismissed_review`, must not be `None`")

        self._dismissed_review = dismissed_review

    @property
    def lock_reason(self):
        """Gets the lock_reason of this IssueEventForIssue.


        :return: The lock_reason of this IssueEventForIssue.
        :rtype: str
        """
        return self._lock_reason

    @lock_reason.setter
    def lock_reason(self, lock_reason):
        """Sets the lock_reason of this IssueEventForIssue.


        :param lock_reason: The lock_reason of this IssueEventForIssue.
        :type lock_reason: str
        """
        if lock_reason is None:
            raise ValueError("Invalid value for `lock_reason`, must not be `None`")

        self._lock_reason = lock_reason

    @property
    def project_card(self):
        """Gets the project_card of this IssueEventForIssue.


        :return: The project_card of this IssueEventForIssue.
        :rtype: AddedToProjectIssueEventProjectCard
        """
        return self._project_card

    @project_card.setter
    def project_card(self, project_card):
        """Sets the project_card of this IssueEventForIssue.


        :param project_card: The project_card of this IssueEventForIssue.
        :type project_card: AddedToProjectIssueEventProjectCard
        """

        self._project_card = project_card
