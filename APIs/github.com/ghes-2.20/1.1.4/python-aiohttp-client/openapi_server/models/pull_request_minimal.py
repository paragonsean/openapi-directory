# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pull_request_minimal_base import PullRequestMinimalBase
from openapi_server import util


class PullRequestMinimal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: PullRequestMinimalBase=None, head: PullRequestMinimalBase=None, id: int=None, number: int=None, url: str=None):
        """PullRequestMinimal - a model defined in OpenAPI

        :param base: The base of this PullRequestMinimal.
        :param head: The head of this PullRequestMinimal.
        :param id: The id of this PullRequestMinimal.
        :param number: The number of this PullRequestMinimal.
        :param url: The url of this PullRequestMinimal.
        """
        self.openapi_types = {
            'base': PullRequestMinimalBase,
            'head': PullRequestMinimalBase,
            'id': int,
            'number': int,
            'url': str
        }

        self.attribute_map = {
            'base': 'base',
            'head': 'head',
            'id': 'id',
            'number': 'number',
            'url': 'url'
        }

        self._base = base
        self._head = head
        self._id = id
        self._number = number
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullRequestMinimal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pull-request-minimal of this PullRequestMinimal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this PullRequestMinimal.


        :return: The base of this PullRequestMinimal.
        :rtype: PullRequestMinimalBase
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this PullRequestMinimal.


        :param base: The base of this PullRequestMinimal.
        :type base: PullRequestMinimalBase
        """
        if base is None:
            raise ValueError("Invalid value for `base`, must not be `None`")

        self._base = base

    @property
    def head(self):
        """Gets the head of this PullRequestMinimal.


        :return: The head of this PullRequestMinimal.
        :rtype: PullRequestMinimalBase
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this PullRequestMinimal.


        :param head: The head of this PullRequestMinimal.
        :type head: PullRequestMinimalBase
        """
        if head is None:
            raise ValueError("Invalid value for `head`, must not be `None`")

        self._head = head

    @property
    def id(self):
        """Gets the id of this PullRequestMinimal.


        :return: The id of this PullRequestMinimal.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PullRequestMinimal.


        :param id: The id of this PullRequestMinimal.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def number(self):
        """Gets the number of this PullRequestMinimal.


        :return: The number of this PullRequestMinimal.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PullRequestMinimal.


        :param number: The number of this PullRequestMinimal.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def url(self):
        """Gets the url of this PullRequestMinimal.


        :return: The url of this PullRequestMinimal.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PullRequestMinimal.


        :param url: The url of this PullRequestMinimal.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
