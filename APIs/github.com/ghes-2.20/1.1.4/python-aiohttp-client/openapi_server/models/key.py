# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: int=None, key: str=None, read_only: bool=None, title: str=None, url: str=None, verified: bool=None):
        """Key - a model defined in OpenAPI

        :param created_at: The created_at of this Key.
        :param id: The id of this Key.
        :param key: The key of this Key.
        :param read_only: The read_only of this Key.
        :param title: The title of this Key.
        :param url: The url of this Key.
        :param verified: The verified of this Key.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': int,
            'key': str,
            'read_only': bool,
            'title': str,
            'url': str,
            'verified': bool
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'key': 'key',
            'read_only': 'read_only',
            'title': 'title',
            'url': 'url',
            'verified': 'verified'
        }

        self._created_at = created_at
        self._id = id
        self._key = key
        self._read_only = read_only
        self._title = title
        self._url = url
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The key of this Key.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Key.


        :return: The created_at of this Key.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Key.


        :param created_at: The created_at of this Key.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Key.


        :return: The id of this Key.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Key.


        :param id: The id of this Key.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def key(self):
        """Gets the key of this Key.


        :return: The key of this Key.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Key.


        :param key: The key of this Key.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def read_only(self):
        """Gets the read_only of this Key.


        :return: The read_only of this Key.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Key.


        :param read_only: The read_only of this Key.
        :type read_only: bool
        """
        if read_only is None:
            raise ValueError("Invalid value for `read_only`, must not be `None`")

        self._read_only = read_only

    @property
    def title(self):
        """Gets the title of this Key.


        :return: The title of this Key.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Key.


        :param title: The title of this Key.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this Key.


        :return: The url of this Key.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Key.


        :param url: The url of this Key.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def verified(self):
        """Gets the verified of this Key.


        :return: The verified of this Key.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Key.


        :param verified: The verified of this Key.
        :type verified: bool
        """
        if verified is None:
            raise ValueError("Invalid value for `verified`, must not be `None`")

        self._verified = verified
