/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobal_hook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobal_hook::OAIGlobal_hook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobal_hook::OAIGlobal_hook() {
    this->initializeModel();
}

OAIGlobal_hook::~OAIGlobal_hook() {}

void OAIGlobal_hook::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ping_url_isSet = false;
    m_ping_url_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGlobal_hook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobal_hook::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ping_url_isValid = ::OpenAPI::fromJsonValue(m_ping_url, json[QString("ping_url")]);
    m_ping_url_isSet = !json[QString("ping_url")].isNull() && m_ping_url_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGlobal_hook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobal_hook::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ping_url_isSet) {
        obj.insert(QString("ping_url"), ::OpenAPI::toJsonValue(m_ping_url));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIGlobal_hook::isActive() const {
    return m_active;
}
void OAIGlobal_hook::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIGlobal_hook::is_active_Set() const{
    return m_active_isSet;
}

bool OAIGlobal_hook::is_active_Valid() const{
    return m_active_isValid;
}

OAIGlobal_hook_config OAIGlobal_hook::getConfig() const {
    return m_config;
}
void OAIGlobal_hook::setConfig(const OAIGlobal_hook_config &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGlobal_hook::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGlobal_hook::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIGlobal_hook::getCreatedAt() const {
    return m_created_at;
}
void OAIGlobal_hook::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGlobal_hook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGlobal_hook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIGlobal_hook::getEvents() const {
    return m_events;
}
void OAIGlobal_hook::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGlobal_hook::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGlobal_hook::is_events_Valid() const{
    return m_events_isValid;
}

qint32 OAIGlobal_hook::getId() const {
    return m_id;
}
void OAIGlobal_hook::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGlobal_hook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGlobal_hook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGlobal_hook::getName() const {
    return m_name;
}
void OAIGlobal_hook::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGlobal_hook::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGlobal_hook::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGlobal_hook::getPingUrl() const {
    return m_ping_url;
}
void OAIGlobal_hook::setPingUrl(const QString &ping_url) {
    m_ping_url = ping_url;
    m_ping_url_isSet = true;
}

bool OAIGlobal_hook::is_ping_url_Set() const{
    return m_ping_url_isSet;
}

bool OAIGlobal_hook::is_ping_url_Valid() const{
    return m_ping_url_isValid;
}

QString OAIGlobal_hook::getType() const {
    return m_type;
}
void OAIGlobal_hook::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGlobal_hook::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGlobal_hook::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGlobal_hook::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGlobal_hook::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGlobal_hook::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGlobal_hook::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIGlobal_hook::getUrl() const {
    return m_url;
}
void OAIGlobal_hook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGlobal_hook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGlobal_hook::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGlobal_hook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobal_hook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
