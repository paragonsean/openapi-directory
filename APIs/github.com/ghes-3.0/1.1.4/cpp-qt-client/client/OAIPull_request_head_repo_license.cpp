/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPull_request_head_repo_license.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPull_request_head_repo_license::OAIPull_request_head_repo_license(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPull_request_head_repo_license::OAIPull_request_head_repo_license() {
    this->initializeModel();
}

OAIPull_request_head_repo_license::~OAIPull_request_head_repo_license() {}

void OAIPull_request_head_repo_license::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_spdx_id_isSet = false;
    m_spdx_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPull_request_head_repo_license::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPull_request_head_repo_license::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_spdx_id_isValid = ::OpenAPI::fromJsonValue(m_spdx_id, json[QString("spdx_id")]);
    m_spdx_id_isSet = !json[QString("spdx_id")].isNull() && m_spdx_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPull_request_head_repo_license::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPull_request_head_repo_license::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_spdx_id_isSet) {
        obj.insert(QString("spdx_id"), ::OpenAPI::toJsonValue(m_spdx_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPull_request_head_repo_license::getKey() const {
    return m_key;
}
void OAIPull_request_head_repo_license::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPull_request_head_repo_license::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPull_request_head_repo_license::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPull_request_head_repo_license::getName() const {
    return m_name;
}
void OAIPull_request_head_repo_license::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPull_request_head_repo_license::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPull_request_head_repo_license::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPull_request_head_repo_license::getNodeId() const {
    return m_node_id;
}
void OAIPull_request_head_repo_license::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIPull_request_head_repo_license::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIPull_request_head_repo_license::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIPull_request_head_repo_license::getSpdxId() const {
    return m_spdx_id;
}
void OAIPull_request_head_repo_license::setSpdxId(const QString &spdx_id) {
    m_spdx_id = spdx_id;
    m_spdx_id_isSet = true;
}

bool OAIPull_request_head_repo_license::is_spdx_id_Set() const{
    return m_spdx_id_isSet;
}

bool OAIPull_request_head_repo_license::is_spdx_id_Valid() const{
    return m_spdx_id_isValid;
}

QString OAIPull_request_head_repo_license::getUrl() const {
    return m_url;
}
void OAIPull_request_head_repo_license::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPull_request_head_repo_license::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPull_request_head_repo_license::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPull_request_head_repo_license::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPull_request_head_repo_license::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_name_isValid && m_node_id_isValid && m_spdx_id_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
