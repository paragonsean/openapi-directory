/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnouncement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnouncement::OAIAnnouncement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnouncement::OAIAnnouncement() {
    this->initializeModel();
}

OAIAnnouncement::~OAIAnnouncement() {}

void OAIAnnouncement::initializeModel() {

    m_announcement_isSet = false;
    m_announcement_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;
}

void OAIAnnouncement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnouncement::fromJsonObject(QJsonObject json) {

    m_announcement_isValid = ::OpenAPI::fromJsonValue(m_announcement, json[QString("announcement")]);
    m_announcement_isSet = !json[QString("announcement")].isNull() && m_announcement_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;
}

QString OAIAnnouncement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnouncement::asJsonObject() const {
    QJsonObject obj;
    if (m_announcement_isSet) {
        obj.insert(QString("announcement"), ::OpenAPI::toJsonValue(m_announcement));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    return obj;
}

QString OAIAnnouncement::getAnnouncement() const {
    return m_announcement;
}
void OAIAnnouncement::setAnnouncement(const QString &announcement) {
    m_announcement = announcement;
    m_announcement_isSet = true;
}

bool OAIAnnouncement::is_announcement_Set() const{
    return m_announcement_isSet;
}

bool OAIAnnouncement::is_announcement_Valid() const{
    return m_announcement_isValid;
}

QDateTime OAIAnnouncement::getExpiresAt() const {
    return m_expires_at;
}
void OAIAnnouncement::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIAnnouncement::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIAnnouncement::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIAnnouncement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_announcement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnouncement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_announcement_isValid && true;
}

} // namespace OpenAPI
