/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_alert_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_alert_location::OAICode_scanning_alert_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_alert_location::OAICode_scanning_alert_location() {
    this->initializeModel();
}

OAICode_scanning_alert_location::~OAICode_scanning_alert_location() {}

void OAICode_scanning_alert_location::initializeModel() {

    m_end_column_isSet = false;
    m_end_column_isValid = false;

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_start_column_isSet = false;
    m_start_column_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;
}

void OAICode_scanning_alert_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_alert_location::fromJsonObject(QJsonObject json) {

    m_end_column_isValid = ::OpenAPI::fromJsonValue(m_end_column, json[QString("end_column")]);
    m_end_column_isSet = !json[QString("end_column")].isNull() && m_end_column_isValid;

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("end_line")]);
    m_end_line_isSet = !json[QString("end_line")].isNull() && m_end_line_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_start_column_isValid = ::OpenAPI::fromJsonValue(m_start_column, json[QString("start_column")]);
    m_start_column_isSet = !json[QString("start_column")].isNull() && m_start_column_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("start_line")]);
    m_start_line_isSet = !json[QString("start_line")].isNull() && m_start_line_isValid;
}

QString OAICode_scanning_alert_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_alert_location::asJsonObject() const {
    QJsonObject obj;
    if (m_end_column_isSet) {
        obj.insert(QString("end_column"), ::OpenAPI::toJsonValue(m_end_column));
    }
    if (m_end_line_isSet) {
        obj.insert(QString("end_line"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_start_column_isSet) {
        obj.insert(QString("start_column"), ::OpenAPI::toJsonValue(m_start_column));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("start_line"), ::OpenAPI::toJsonValue(m_start_line));
    }
    return obj;
}

qint32 OAICode_scanning_alert_location::getEndColumn() const {
    return m_end_column;
}
void OAICode_scanning_alert_location::setEndColumn(const qint32 &end_column) {
    m_end_column = end_column;
    m_end_column_isSet = true;
}

bool OAICode_scanning_alert_location::is_end_column_Set() const{
    return m_end_column_isSet;
}

bool OAICode_scanning_alert_location::is_end_column_Valid() const{
    return m_end_column_isValid;
}

qint32 OAICode_scanning_alert_location::getEndLine() const {
    return m_end_line;
}
void OAICode_scanning_alert_location::setEndLine(const qint32 &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAICode_scanning_alert_location::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAICode_scanning_alert_location::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAICode_scanning_alert_location::getPath() const {
    return m_path;
}
void OAICode_scanning_alert_location::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICode_scanning_alert_location::is_path_Set() const{
    return m_path_isSet;
}

bool OAICode_scanning_alert_location::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAICode_scanning_alert_location::getStartColumn() const {
    return m_start_column;
}
void OAICode_scanning_alert_location::setStartColumn(const qint32 &start_column) {
    m_start_column = start_column;
    m_start_column_isSet = true;
}

bool OAICode_scanning_alert_location::is_start_column_Set() const{
    return m_start_column_isSet;
}

bool OAICode_scanning_alert_location::is_start_column_Valid() const{
    return m_start_column_isValid;
}

qint32 OAICode_scanning_alert_location::getStartLine() const {
    return m_start_line;
}
void OAICode_scanning_alert_location::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAICode_scanning_alert_location::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAICode_scanning_alert_location::is_start_line_Valid() const{
    return m_start_line_isValid;
}

bool OAICode_scanning_alert_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_alert_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
