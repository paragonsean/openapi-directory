/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_search_result_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_search_result_item::OAIIssue_search_result_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_search_result_item::OAIIssue_search_result_item() {
    this->initializeModel();
}

OAIIssue_search_result_item::~OAIIssue_search_result_item() {}

void OAIIssue_search_result_item::initializeModel() {

    m_active_lock_reason_isSet = false;
    m_active_lock_reason_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignees_isSet = false;
    m_assignees_isValid = false;

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_html_isSet = false;
    m_body_html_isValid = false;

    m_body_text_isSet = false;
    m_body_text_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_comments_url_isSet = false;
    m_comments_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_events_url_isSet = false;
    m_events_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_labels_url_isSet = false;
    m_labels_url_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_performed_via_github_app_isSet = false;
    m_performed_via_github_app_isValid = false;

    m_pull_request_isSet = false;
    m_pull_request_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_text_matches_isSet = false;
    m_text_matches_isValid = false;

    m_timeline_url_isSet = false;
    m_timeline_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIIssue_search_result_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_search_result_item::fromJsonObject(QJsonObject json) {

    m_active_lock_reason_isValid = ::OpenAPI::fromJsonValue(m_active_lock_reason, json[QString("active_lock_reason")]);
    m_active_lock_reason_isSet = !json[QString("active_lock_reason")].isNull() && m_active_lock_reason_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignees_isValid = ::OpenAPI::fromJsonValue(m_assignees, json[QString("assignees")]);
    m_assignees_isSet = !json[QString("assignees")].isNull() && m_assignees_isValid;

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_html_isValid = ::OpenAPI::fromJsonValue(m_body_html, json[QString("body_html")]);
    m_body_html_isSet = !json[QString("body_html")].isNull() && m_body_html_isValid;

    m_body_text_isValid = ::OpenAPI::fromJsonValue(m_body_text, json[QString("body_text")]);
    m_body_text_isSet = !json[QString("body_text")].isNull() && m_body_text_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_comments_url_isValid = ::OpenAPI::fromJsonValue(m_comments_url, json[QString("comments_url")]);
    m_comments_url_isSet = !json[QString("comments_url")].isNull() && m_comments_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_events_url_isValid = ::OpenAPI::fromJsonValue(m_events_url, json[QString("events_url")]);
    m_events_url_isSet = !json[QString("events_url")].isNull() && m_events_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_labels_url_isValid = ::OpenAPI::fromJsonValue(m_labels_url, json[QString("labels_url")]);
    m_labels_url_isSet = !json[QString("labels_url")].isNull() && m_labels_url_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_performed_via_github_app_isValid = ::OpenAPI::fromJsonValue(m_performed_via_github_app, json[QString("performed_via_github_app")]);
    m_performed_via_github_app_isSet = !json[QString("performed_via_github_app")].isNull() && m_performed_via_github_app_isValid;

    m_pull_request_isValid = ::OpenAPI::fromJsonValue(m_pull_request, json[QString("pull_request")]);
    m_pull_request_isSet = !json[QString("pull_request")].isNull() && m_pull_request_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repository_url")]);
    m_repository_url_isSet = !json[QString("repository_url")].isNull() && m_repository_url_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_text_matches_isValid = ::OpenAPI::fromJsonValue(m_text_matches, json[QString("text_matches")]);
    m_text_matches_isSet = !json[QString("text_matches")].isNull() && m_text_matches_isValid;

    m_timeline_url_isValid = ::OpenAPI::fromJsonValue(m_timeline_url, json[QString("timeline_url")]);
    m_timeline_url_isSet = !json[QString("timeline_url")].isNull() && m_timeline_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIIssue_search_result_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_search_result_item::asJsonObject() const {
    QJsonObject obj;
    if (m_active_lock_reason_isSet) {
        obj.insert(QString("active_lock_reason"), ::OpenAPI::toJsonValue(m_active_lock_reason));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignees.size() > 0) {
        obj.insert(QString("assignees"), ::OpenAPI::toJsonValue(m_assignees));
    }
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_html_isSet) {
        obj.insert(QString("body_html"), ::OpenAPI::toJsonValue(m_body_html));
    }
    if (m_body_text_isSet) {
        obj.insert(QString("body_text"), ::OpenAPI::toJsonValue(m_body_text));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_comments_url_isSet) {
        obj.insert(QString("comments_url"), ::OpenAPI::toJsonValue(m_comments_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_events_url_isSet) {
        obj.insert(QString("events_url"), ::OpenAPI::toJsonValue(m_events_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_labels_url_isSet) {
        obj.insert(QString("labels_url"), ::OpenAPI::toJsonValue(m_labels_url));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_performed_via_github_app.isSet()) {
        obj.insert(QString("performed_via_github_app"), ::OpenAPI::toJsonValue(m_performed_via_github_app));
    }
    if (m_pull_request.isSet()) {
        obj.insert(QString("pull_request"), ::OpenAPI::toJsonValue(m_pull_request));
    }
    if (m_reactions.isSet()) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repository_url"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_text_matches.size() > 0) {
        obj.insert(QString("text_matches"), ::OpenAPI::toJsonValue(m_text_matches));
    }
    if (m_timeline_url_isSet) {
        obj.insert(QString("timeline_url"), ::OpenAPI::toJsonValue(m_timeline_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIIssue_search_result_item::getActiveLockReason() const {
    return m_active_lock_reason;
}
void OAIIssue_search_result_item::setActiveLockReason(const QString &active_lock_reason) {
    m_active_lock_reason = active_lock_reason;
    m_active_lock_reason_isSet = true;
}

bool OAIIssue_search_result_item::is_active_lock_reason_Set() const{
    return m_active_lock_reason_isSet;
}

bool OAIIssue_search_result_item::is_active_lock_reason_Valid() const{
    return m_active_lock_reason_isValid;
}

OAINullable_simple_user OAIIssue_search_result_item::getAssignee() const {
    return m_assignee;
}
void OAIIssue_search_result_item::setAssignee(const OAINullable_simple_user &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIIssue_search_result_item::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIIssue_search_result_item::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<OAISimple_user> OAIIssue_search_result_item::getAssignees() const {
    return m_assignees;
}
void OAIIssue_search_result_item::setAssignees(const QList<OAISimple_user> &assignees) {
    m_assignees = assignees;
    m_assignees_isSet = true;
}

bool OAIIssue_search_result_item::is_assignees_Set() const{
    return m_assignees_isSet;
}

bool OAIIssue_search_result_item::is_assignees_Valid() const{
    return m_assignees_isValid;
}

OAIAuthor_association OAIIssue_search_result_item::getAuthorAssociation() const {
    return m_author_association;
}
void OAIIssue_search_result_item::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAIIssue_search_result_item::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAIIssue_search_result_item::is_author_association_Valid() const{
    return m_author_association_isValid;
}

QString OAIIssue_search_result_item::getBody() const {
    return m_body;
}
void OAIIssue_search_result_item::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIIssue_search_result_item::is_body_Set() const{
    return m_body_isSet;
}

bool OAIIssue_search_result_item::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIIssue_search_result_item::getBodyHtml() const {
    return m_body_html;
}
void OAIIssue_search_result_item::setBodyHtml(const QString &body_html) {
    m_body_html = body_html;
    m_body_html_isSet = true;
}

bool OAIIssue_search_result_item::is_body_html_Set() const{
    return m_body_html_isSet;
}

bool OAIIssue_search_result_item::is_body_html_Valid() const{
    return m_body_html_isValid;
}

QString OAIIssue_search_result_item::getBodyText() const {
    return m_body_text;
}
void OAIIssue_search_result_item::setBodyText(const QString &body_text) {
    m_body_text = body_text;
    m_body_text_isSet = true;
}

bool OAIIssue_search_result_item::is_body_text_Set() const{
    return m_body_text_isSet;
}

bool OAIIssue_search_result_item::is_body_text_Valid() const{
    return m_body_text_isValid;
}

QDateTime OAIIssue_search_result_item::getClosedAt() const {
    return m_closed_at;
}
void OAIIssue_search_result_item::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIIssue_search_result_item::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIIssue_search_result_item::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

qint32 OAIIssue_search_result_item::getComments() const {
    return m_comments;
}
void OAIIssue_search_result_item::setComments(const qint32 &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIIssue_search_result_item::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIIssue_search_result_item::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIIssue_search_result_item::getCommentsUrl() const {
    return m_comments_url;
}
void OAIIssue_search_result_item::setCommentsUrl(const QString &comments_url) {
    m_comments_url = comments_url;
    m_comments_url_isSet = true;
}

bool OAIIssue_search_result_item::is_comments_url_Set() const{
    return m_comments_url_isSet;
}

bool OAIIssue_search_result_item::is_comments_url_Valid() const{
    return m_comments_url_isValid;
}

QDateTime OAIIssue_search_result_item::getCreatedAt() const {
    return m_created_at;
}
void OAIIssue_search_result_item::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIIssue_search_result_item::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIIssue_search_result_item::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIIssue_search_result_item::isDraft() const {
    return m_draft;
}
void OAIIssue_search_result_item::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIIssue_search_result_item::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIIssue_search_result_item::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAIIssue_search_result_item::getEventsUrl() const {
    return m_events_url;
}
void OAIIssue_search_result_item::setEventsUrl(const QString &events_url) {
    m_events_url = events_url;
    m_events_url_isSet = true;
}

bool OAIIssue_search_result_item::is_events_url_Set() const{
    return m_events_url_isSet;
}

bool OAIIssue_search_result_item::is_events_url_Valid() const{
    return m_events_url_isValid;
}

QString OAIIssue_search_result_item::getHtmlUrl() const {
    return m_html_url;
}
void OAIIssue_search_result_item::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIIssue_search_result_item::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIIssue_search_result_item::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIIssue_search_result_item::getId() const {
    return m_id;
}
void OAIIssue_search_result_item::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssue_search_result_item::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssue_search_result_item::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIIssue_search_result_item_labels_inner> OAIIssue_search_result_item::getLabels() const {
    return m_labels;
}
void OAIIssue_search_result_item::setLabels(const QList<OAIIssue_search_result_item_labels_inner> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIIssue_search_result_item::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIIssue_search_result_item::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIIssue_search_result_item::getLabelsUrl() const {
    return m_labels_url;
}
void OAIIssue_search_result_item::setLabelsUrl(const QString &labels_url) {
    m_labels_url = labels_url;
    m_labels_url_isSet = true;
}

bool OAIIssue_search_result_item::is_labels_url_Set() const{
    return m_labels_url_isSet;
}

bool OAIIssue_search_result_item::is_labels_url_Valid() const{
    return m_labels_url_isValid;
}

bool OAIIssue_search_result_item::isLocked() const {
    return m_locked;
}
void OAIIssue_search_result_item::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIIssue_search_result_item::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIIssue_search_result_item::is_locked_Valid() const{
    return m_locked_isValid;
}

OAINullable_milestone OAIIssue_search_result_item::getMilestone() const {
    return m_milestone;
}
void OAIIssue_search_result_item::setMilestone(const OAINullable_milestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIIssue_search_result_item::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIIssue_search_result_item::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAIIssue_search_result_item::getNodeId() const {
    return m_node_id;
}
void OAIIssue_search_result_item::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIIssue_search_result_item::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIIssue_search_result_item::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAIIssue_search_result_item::getNumber() const {
    return m_number;
}
void OAIIssue_search_result_item::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIIssue_search_result_item::is_number_Set() const{
    return m_number_isSet;
}

bool OAIIssue_search_result_item::is_number_Valid() const{
    return m_number_isValid;
}

OAINullable_integration OAIIssue_search_result_item::getPerformedViaGithubApp() const {
    return m_performed_via_github_app;
}
void OAIIssue_search_result_item::setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app) {
    m_performed_via_github_app = performed_via_github_app;
    m_performed_via_github_app_isSet = true;
}

bool OAIIssue_search_result_item::is_performed_via_github_app_Set() const{
    return m_performed_via_github_app_isSet;
}

bool OAIIssue_search_result_item::is_performed_via_github_app_Valid() const{
    return m_performed_via_github_app_isValid;
}

OAIIssue_pull_request OAIIssue_search_result_item::getPullRequest() const {
    return m_pull_request;
}
void OAIIssue_search_result_item::setPullRequest(const OAIIssue_pull_request &pull_request) {
    m_pull_request = pull_request;
    m_pull_request_isSet = true;
}

bool OAIIssue_search_result_item::is_pull_request_Set() const{
    return m_pull_request_isSet;
}

bool OAIIssue_search_result_item::is_pull_request_Valid() const{
    return m_pull_request_isValid;
}

OAIReaction_rollup OAIIssue_search_result_item::getReactions() const {
    return m_reactions;
}
void OAIIssue_search_result_item::setReactions(const OAIReaction_rollup &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIIssue_search_result_item::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIIssue_search_result_item::is_reactions_Valid() const{
    return m_reactions_isValid;
}

OAIRepository OAIIssue_search_result_item::getRepository() const {
    return m_repository;
}
void OAIIssue_search_result_item::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIIssue_search_result_item::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIIssue_search_result_item::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIIssue_search_result_item::getRepositoryUrl() const {
    return m_repository_url;
}
void OAIIssue_search_result_item::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAIIssue_search_result_item::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAIIssue_search_result_item::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

double OAIIssue_search_result_item::getScore() const {
    return m_score;
}
void OAIIssue_search_result_item::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIIssue_search_result_item::is_score_Set() const{
    return m_score_isSet;
}

bool OAIIssue_search_result_item::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIIssue_search_result_item::getState() const {
    return m_state;
}
void OAIIssue_search_result_item::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIssue_search_result_item::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIssue_search_result_item::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAISearch_result_text_matches_inner> OAIIssue_search_result_item::getTextMatches() const {
    return m_text_matches;
}
void OAIIssue_search_result_item::setTextMatches(const QList<OAISearch_result_text_matches_inner> &text_matches) {
    m_text_matches = text_matches;
    m_text_matches_isSet = true;
}

bool OAIIssue_search_result_item::is_text_matches_Set() const{
    return m_text_matches_isSet;
}

bool OAIIssue_search_result_item::is_text_matches_Valid() const{
    return m_text_matches_isValid;
}

QString OAIIssue_search_result_item::getTimelineUrl() const {
    return m_timeline_url;
}
void OAIIssue_search_result_item::setTimelineUrl(const QString &timeline_url) {
    m_timeline_url = timeline_url;
    m_timeline_url_isSet = true;
}

bool OAIIssue_search_result_item::is_timeline_url_Set() const{
    return m_timeline_url_isSet;
}

bool OAIIssue_search_result_item::is_timeline_url_Valid() const{
    return m_timeline_url_isValid;
}

QString OAIIssue_search_result_item::getTitle() const {
    return m_title;
}
void OAIIssue_search_result_item::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIssue_search_result_item::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIssue_search_result_item::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIIssue_search_result_item::getUpdatedAt() const {
    return m_updated_at;
}
void OAIIssue_search_result_item::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIIssue_search_result_item::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIIssue_search_result_item::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIIssue_search_result_item::getUrl() const {
    return m_url;
}
void OAIIssue_search_result_item::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIssue_search_result_item::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIssue_search_result_item::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIIssue_search_result_item::getUser() const {
    return m_user;
}
void OAIIssue_search_result_item::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIIssue_search_result_item::is_user_Set() const{
    return m_user_isSet;
}

bool OAIIssue_search_result_item::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIIssue_search_result_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_lock_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performed_via_github_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_search_result_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assignee_isValid && m_author_association_isValid && m_closed_at_isValid && m_comments_isValid && m_comments_url_isValid && m_created_at_isValid && m_events_url_isValid && m_html_url_isValid && m_id_isValid && m_labels_isValid && m_labels_url_isValid && m_locked_isValid && m_milestone_isValid && m_node_id_isValid && m_number_isValid && m_repository_url_isValid && m_score_isValid && m_state_isValid && m_title_isValid && m_updated_at_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
