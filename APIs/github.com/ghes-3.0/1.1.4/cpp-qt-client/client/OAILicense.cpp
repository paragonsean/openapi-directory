/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicense::OAILicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicense::OAILicense() {
    this->initializeModel();
}

OAILicense::~OAILicense() {}

void OAILicense::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_featured_isSet = false;
    m_featured_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_implementation_isSet = false;
    m_implementation_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_limitations_isSet = false;
    m_limitations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_spdx_id_isSet = false;
    m_spdx_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicense::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_featured_isValid = ::OpenAPI::fromJsonValue(m_featured, json[QString("featured")]);
    m_featured_isSet = !json[QString("featured")].isNull() && m_featured_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_implementation_isValid = ::OpenAPI::fromJsonValue(m_implementation, json[QString("implementation")]);
    m_implementation_isSet = !json[QString("implementation")].isNull() && m_implementation_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_limitations_isValid = ::OpenAPI::fromJsonValue(m_limitations, json[QString("limitations")]);
    m_limitations_isSet = !json[QString("limitations")].isNull() && m_limitations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_spdx_id_isValid = ::OpenAPI::fromJsonValue(m_spdx_id, json[QString("spdx_id")]);
    m_spdx_id_isSet = !json[QString("spdx_id")].isNull() && m_spdx_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicense::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_featured_isSet) {
        obj.insert(QString("featured"), ::OpenAPI::toJsonValue(m_featured));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_implementation_isSet) {
        obj.insert(QString("implementation"), ::OpenAPI::toJsonValue(m_implementation));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_limitations.size() > 0) {
        obj.insert(QString("limitations"), ::OpenAPI::toJsonValue(m_limitations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_spdx_id_isSet) {
        obj.insert(QString("spdx_id"), ::OpenAPI::toJsonValue(m_spdx_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAILicense::getBody() const {
    return m_body;
}
void OAILicense::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAILicense::is_body_Set() const{
    return m_body_isSet;
}

bool OAILicense::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAILicense::getConditions() const {
    return m_conditions;
}
void OAILicense::setConditions(const QList<QString> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAILicense::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAILicense::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAILicense::getDescription() const {
    return m_description;
}
void OAILicense::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILicense::is_description_Set() const{
    return m_description_isSet;
}

bool OAILicense::is_description_Valid() const{
    return m_description_isValid;
}

bool OAILicense::isFeatured() const {
    return m_featured;
}
void OAILicense::setFeatured(const bool &featured) {
    m_featured = featured;
    m_featured_isSet = true;
}

bool OAILicense::is_featured_Set() const{
    return m_featured_isSet;
}

bool OAILicense::is_featured_Valid() const{
    return m_featured_isValid;
}

QString OAILicense::getHtmlUrl() const {
    return m_html_url;
}
void OAILicense::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAILicense::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAILicense::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAILicense::getImplementation() const {
    return m_implementation;
}
void OAILicense::setImplementation(const QString &implementation) {
    m_implementation = implementation;
    m_implementation_isSet = true;
}

bool OAILicense::is_implementation_Set() const{
    return m_implementation_isSet;
}

bool OAILicense::is_implementation_Valid() const{
    return m_implementation_isValid;
}

QString OAILicense::getKey() const {
    return m_key;
}
void OAILicense::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAILicense::is_key_Set() const{
    return m_key_isSet;
}

bool OAILicense::is_key_Valid() const{
    return m_key_isValid;
}

QList<QString> OAILicense::getLimitations() const {
    return m_limitations;
}
void OAILicense::setLimitations(const QList<QString> &limitations) {
    m_limitations = limitations;
    m_limitations_isSet = true;
}

bool OAILicense::is_limitations_Set() const{
    return m_limitations_isSet;
}

bool OAILicense::is_limitations_Valid() const{
    return m_limitations_isValid;
}

QString OAILicense::getName() const {
    return m_name;
}
void OAILicense::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILicense::is_name_Set() const{
    return m_name_isSet;
}

bool OAILicense::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILicense::getNodeId() const {
    return m_node_id;
}
void OAILicense::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAILicense::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAILicense::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QList<QString> OAILicense::getPermissions() const {
    return m_permissions;
}
void OAILicense::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAILicense::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAILicense::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAILicense::getSpdxId() const {
    return m_spdx_id;
}
void OAILicense::setSpdxId(const QString &spdx_id) {
    m_spdx_id = spdx_id;
    m_spdx_id_isSet = true;
}

bool OAILicense::is_spdx_id_Set() const{
    return m_spdx_id_isSet;
}

bool OAILicense::is_spdx_id_Valid() const{
    return m_spdx_id_isValid;
}

QString OAILicense::getUrl() const {
    return m_url;
}
void OAILicense::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILicense::is_url_Set() const{
    return m_url_isSet;
}

bool OAILicense::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limitations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spdx_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && m_conditions_isValid && m_description_isValid && m_featured_isValid && m_html_url_isValid && m_implementation_isValid && m_key_isValid && m_limitations_isValid && m_name_isValid && m_node_id_isValid && m_permissions_isValid && m_spdx_id_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
