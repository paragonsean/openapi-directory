/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_check_run_url_isSet = false;
    m_check_run_url_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_conclusion_isSet = false;
    m_conclusion_isValid = false;

    m_head_sha_isSet = false;
    m_head_sha_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_run_attempt_isSet = false;
    m_run_attempt_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_run_url_isSet = false;
    m_run_url_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_check_run_url_isValid = ::OpenAPI::fromJsonValue(m_check_run_url, json[QString("check_run_url")]);
    m_check_run_url_isSet = !json[QString("check_run_url")].isNull() && m_check_run_url_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_conclusion_isValid = ::OpenAPI::fromJsonValue(m_conclusion, json[QString("conclusion")]);
    m_conclusion_isSet = !json[QString("conclusion")].isNull() && m_conclusion_isValid;

    m_head_sha_isValid = ::OpenAPI::fromJsonValue(m_head_sha, json[QString("head_sha")]);
    m_head_sha_isSet = !json[QString("head_sha")].isNull() && m_head_sha_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_run_attempt_isValid = ::OpenAPI::fromJsonValue(m_run_attempt, json[QString("run_attempt")]);
    m_run_attempt_isSet = !json[QString("run_attempt")].isNull() && m_run_attempt_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("run_id")]);
    m_run_id_isSet = !json[QString("run_id")].isNull() && m_run_id_isValid;

    m_run_url_isValid = ::OpenAPI::fromJsonValue(m_run_url, json[QString("run_url")]);
    m_run_url_isSet = !json[QString("run_url")].isNull() && m_run_url_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_check_run_url_isSet) {
        obj.insert(QString("check_run_url"), ::OpenAPI::toJsonValue(m_check_run_url));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_conclusion_isSet) {
        obj.insert(QString("conclusion"), ::OpenAPI::toJsonValue(m_conclusion));
    }
    if (m_head_sha_isSet) {
        obj.insert(QString("head_sha"), ::OpenAPI::toJsonValue(m_head_sha));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_run_attempt_isSet) {
        obj.insert(QString("run_attempt"), ::OpenAPI::toJsonValue(m_run_attempt));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("run_id"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_run_url_isSet) {
        obj.insert(QString("run_url"), ::OpenAPI::toJsonValue(m_run_url));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIJob::getCheckRunUrl() const {
    return m_check_run_url;
}
void OAIJob::setCheckRunUrl(const QString &check_run_url) {
    m_check_run_url = check_run_url;
    m_check_run_url_isSet = true;
}

bool OAIJob::is_check_run_url_Set() const{
    return m_check_run_url_isSet;
}

bool OAIJob::is_check_run_url_Valid() const{
    return m_check_run_url_isValid;
}

QDateTime OAIJob::getCompletedAt() const {
    return m_completed_at;
}
void OAIJob::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIJob::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIJob::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QString OAIJob::getConclusion() const {
    return m_conclusion;
}
void OAIJob::setConclusion(const QString &conclusion) {
    m_conclusion = conclusion;
    m_conclusion_isSet = true;
}

bool OAIJob::is_conclusion_Set() const{
    return m_conclusion_isSet;
}

bool OAIJob::is_conclusion_Valid() const{
    return m_conclusion_isValid;
}

QString OAIJob::getHeadSha() const {
    return m_head_sha;
}
void OAIJob::setHeadSha(const QString &head_sha) {
    m_head_sha = head_sha;
    m_head_sha_isSet = true;
}

bool OAIJob::is_head_sha_Set() const{
    return m_head_sha_isSet;
}

bool OAIJob::is_head_sha_Valid() const{
    return m_head_sha_isValid;
}

QString OAIJob::getHtmlUrl() const {
    return m_html_url;
}
void OAIJob::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIJob::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIJob::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIJob::getId() const {
    return m_id;
}
void OAIJob::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJob::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJob::getName() const {
    return m_name;
}
void OAIJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJob::getNodeId() const {
    return m_node_id;
}
void OAIJob::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIJob::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIJob::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAIJob::getRunAttempt() const {
    return m_run_attempt;
}
void OAIJob::setRunAttempt(const qint32 &run_attempt) {
    m_run_attempt = run_attempt;
    m_run_attempt_isSet = true;
}

bool OAIJob::is_run_attempt_Set() const{
    return m_run_attempt_isSet;
}

bool OAIJob::is_run_attempt_Valid() const{
    return m_run_attempt_isValid;
}

qint32 OAIJob::getRunId() const {
    return m_run_id;
}
void OAIJob::setRunId(const qint32 &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIJob::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIJob::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QString OAIJob::getRunUrl() const {
    return m_run_url;
}
void OAIJob::setRunUrl(const QString &run_url) {
    m_run_url = run_url;
    m_run_url_isSet = true;
}

bool OAIJob::is_run_url_Set() const{
    return m_run_url_isSet;
}

bool OAIJob::is_run_url_Valid() const{
    return m_run_url_isValid;
}

QDateTime OAIJob::getStartedAt() const {
    return m_started_at;
}
void OAIJob::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIJob::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIJob::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIJob::getStatus() const {
    return m_status;
}
void OAIJob::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJob::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIJob_steps_inner> OAIJob::getSteps() const {
    return m_steps;
}
void OAIJob::setSteps(const QList<OAIJob_steps_inner> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIJob::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIJob::is_steps_Valid() const{
    return m_steps_isValid;
}

QString OAIJob::getUrl() const {
    return m_url;
}
void OAIJob::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIJob::is_url_Set() const{
    return m_url_isSet;
}

bool OAIJob::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_run_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_check_run_url_isValid && m_completed_at_isValid && m_conclusion_isValid && m_head_sha_isValid && m_html_url_isValid && m_id_isValid && m_name_isValid && m_node_id_isValid && m_run_id_isValid && m_run_url_isValid && m_started_at_isValid && m_status_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
