/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepos_create_using_template_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepos_create_using_template_request::OAIRepos_create_using_template_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepos_create_using_template_request::OAIRepos_create_using_template_request() {
    this->initializeModel();
}

OAIRepos_create_using_template_request::~OAIRepos_create_using_template_request() {}

void OAIRepos_create_using_template_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_include_all_branches_isSet = false;
    m_include_all_branches_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;
}

void OAIRepos_create_using_template_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepos_create_using_template_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_include_all_branches_isValid = ::OpenAPI::fromJsonValue(m_include_all_branches, json[QString("include_all_branches")]);
    m_include_all_branches_isSet = !json[QString("include_all_branches")].isNull() && m_include_all_branches_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;
}

QString OAIRepos_create_using_template_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepos_create_using_template_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_include_all_branches_isSet) {
        obj.insert(QString("include_all_branches"), ::OpenAPI::toJsonValue(m_include_all_branches));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    return obj;
}

QString OAIRepos_create_using_template_request::getDescription() const {
    return m_description;
}
void OAIRepos_create_using_template_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepos_create_using_template_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepos_create_using_template_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRepos_create_using_template_request::isIncludeAllBranches() const {
    return m_include_all_branches;
}
void OAIRepos_create_using_template_request::setIncludeAllBranches(const bool &include_all_branches) {
    m_include_all_branches = include_all_branches;
    m_include_all_branches_isSet = true;
}

bool OAIRepos_create_using_template_request::is_include_all_branches_Set() const{
    return m_include_all_branches_isSet;
}

bool OAIRepos_create_using_template_request::is_include_all_branches_Valid() const{
    return m_include_all_branches_isValid;
}

QString OAIRepos_create_using_template_request::getName() const {
    return m_name;
}
void OAIRepos_create_using_template_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepos_create_using_template_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepos_create_using_template_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRepos_create_using_template_request::getOwner() const {
    return m_owner;
}
void OAIRepos_create_using_template_request::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIRepos_create_using_template_request::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIRepos_create_using_template_request::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIRepos_create_using_template_request::isRPrivate() const {
    return m_r_private;
}
void OAIRepos_create_using_template_request::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIRepos_create_using_template_request::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIRepos_create_using_template_request::is_r_private_Valid() const{
    return m_r_private_isValid;
}

bool OAIRepos_create_using_template_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_all_branches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepos_create_using_template_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
