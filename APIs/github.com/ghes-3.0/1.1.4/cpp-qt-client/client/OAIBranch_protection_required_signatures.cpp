/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranch_protection_required_signatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranch_protection_required_signatures::OAIBranch_protection_required_signatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranch_protection_required_signatures::OAIBranch_protection_required_signatures() {
    this->initializeModel();
}

OAIBranch_protection_required_signatures::~OAIBranch_protection_required_signatures() {}

void OAIBranch_protection_required_signatures::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIBranch_protection_required_signatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranch_protection_required_signatures::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIBranch_protection_required_signatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranch_protection_required_signatures::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIBranch_protection_required_signatures::isEnabled() const {
    return m_enabled;
}
void OAIBranch_protection_required_signatures::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIBranch_protection_required_signatures::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIBranch_protection_required_signatures::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIBranch_protection_required_signatures::getUrl() const {
    return m_url;
}
void OAIBranch_protection_required_signatures::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBranch_protection_required_signatures::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBranch_protection_required_signatures::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIBranch_protection_required_signatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranch_protection_required_signatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
