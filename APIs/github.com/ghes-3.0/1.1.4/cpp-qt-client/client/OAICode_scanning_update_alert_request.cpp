/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_update_alert_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_update_alert_request::OAICode_scanning_update_alert_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_update_alert_request::OAICode_scanning_update_alert_request() {
    this->initializeModel();
}

OAICode_scanning_update_alert_request::~OAICode_scanning_update_alert_request() {}

void OAICode_scanning_update_alert_request::initializeModel() {

    m_dismissed_reason_isSet = false;
    m_dismissed_reason_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICode_scanning_update_alert_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_update_alert_request::fromJsonObject(QJsonObject json) {

    m_dismissed_reason_isValid = ::OpenAPI::fromJsonValue(m_dismissed_reason, json[QString("dismissed_reason")]);
    m_dismissed_reason_isSet = !json[QString("dismissed_reason")].isNull() && m_dismissed_reason_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICode_scanning_update_alert_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_update_alert_request::asJsonObject() const {
    QJsonObject obj;
    if (m_dismissed_reason.isSet()) {
        obj.insert(QString("dismissed_reason"), ::OpenAPI::toJsonValue(m_dismissed_reason));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAICode_scanning_alert_dismissed_reason OAICode_scanning_update_alert_request::getDismissedReason() const {
    return m_dismissed_reason;
}
void OAICode_scanning_update_alert_request::setDismissedReason(const OAICode_scanning_alert_dismissed_reason &dismissed_reason) {
    m_dismissed_reason = dismissed_reason;
    m_dismissed_reason_isSet = true;
}

bool OAICode_scanning_update_alert_request::is_dismissed_reason_Set() const{
    return m_dismissed_reason_isSet;
}

bool OAICode_scanning_update_alert_request::is_dismissed_reason_Valid() const{
    return m_dismissed_reason_isValid;
}

OAICode_scanning_alert_set_state OAICode_scanning_update_alert_request::getState() const {
    return m_state;
}
void OAICode_scanning_update_alert_request::setState(const OAICode_scanning_alert_set_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICode_scanning_update_alert_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAICode_scanning_update_alert_request::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICode_scanning_update_alert_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dismissed_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_update_alert_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
