/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrganization_full.h
 *
 * Organization Full
 */

#ifndef OAIOrganization_full_H
#define OAIOrganization_full_H

#include <QJsonObject>

#include "OAIOrganization_full_plan.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOrganization_full_plan;

class OAIOrganization_full : public OAIObject {
public:
    OAIOrganization_full();
    OAIOrganization_full(QString json);
    ~OAIOrganization_full() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    QString getBillingEmail() const;
    void setBillingEmail(const QString &billing_email);
    bool is_billing_email_Set() const;
    bool is_billing_email_Valid() const;

    QString getBlog() const;
    void setBlog(const QString &blog);
    bool is_blog_Set() const;
    bool is_blog_Valid() const;

    qint32 getCollaborators() const;
    void setCollaborators(const qint32 &collaborators);
    bool is_collaborators_Set() const;
    bool is_collaborators_Valid() const;

    QString getCompany() const;
    void setCompany(const QString &company);
    bool is_company_Set() const;
    bool is_company_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDefaultRepositoryPermission() const;
    void setDefaultRepositoryPermission(const QString &default_repository_permission);
    bool is_default_repository_permission_Set() const;
    bool is_default_repository_permission_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getDiskUsage() const;
    void setDiskUsage(const qint32 &disk_usage);
    bool is_disk_usage_Set() const;
    bool is_disk_usage_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getEventsUrl() const;
    void setEventsUrl(const QString &events_url);
    bool is_events_url_Set() const;
    bool is_events_url_Valid() const;

    qint32 getFollowers() const;
    void setFollowers(const qint32 &followers);
    bool is_followers_Set() const;
    bool is_followers_Valid() const;

    qint32 getFollowing() const;
    void setFollowing(const qint32 &following);
    bool is_following_Set() const;
    bool is_following_Valid() const;

    bool isHasOrganizationProjects() const;
    void setHasOrganizationProjects(const bool &has_organization_projects);
    bool is_has_organization_projects_Set() const;
    bool is_has_organization_projects_Valid() const;

    bool isHasRepositoryProjects() const;
    void setHasRepositoryProjects(const bool &has_repository_projects);
    bool is_has_repository_projects_Set() const;
    bool is_has_repository_projects_Valid() const;

    QString getHooksUrl() const;
    void setHooksUrl(const QString &hooks_url);
    bool is_hooks_url_Set() const;
    bool is_hooks_url_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsVerified() const;
    void setIsVerified(const bool &is_verified);
    bool is_is_verified_Set() const;
    bool is_is_verified_Valid() const;

    QString getIssuesUrl() const;
    void setIssuesUrl(const QString &issues_url);
    bool is_issues_url_Set() const;
    bool is_issues_url_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getLogin() const;
    void setLogin(const QString &login);
    bool is_login_Set() const;
    bool is_login_Valid() const;

    QString getMembersAllowedRepositoryCreationType() const;
    void setMembersAllowedRepositoryCreationType(const QString &members_allowed_repository_creation_type);
    bool is_members_allowed_repository_creation_type_Set() const;
    bool is_members_allowed_repository_creation_type_Valid() const;

    bool isMembersCanCreateInternalRepositories() const;
    void setMembersCanCreateInternalRepositories(const bool &members_can_create_internal_repositories);
    bool is_members_can_create_internal_repositories_Set() const;
    bool is_members_can_create_internal_repositories_Valid() const;

    bool isMembersCanCreatePages() const;
    void setMembersCanCreatePages(const bool &members_can_create_pages);
    bool is_members_can_create_pages_Set() const;
    bool is_members_can_create_pages_Valid() const;

    bool isMembersCanCreatePrivatePages() const;
    void setMembersCanCreatePrivatePages(const bool &members_can_create_private_pages);
    bool is_members_can_create_private_pages_Set() const;
    bool is_members_can_create_private_pages_Valid() const;

    bool isMembersCanCreatePrivateRepositories() const;
    void setMembersCanCreatePrivateRepositories(const bool &members_can_create_private_repositories);
    bool is_members_can_create_private_repositories_Set() const;
    bool is_members_can_create_private_repositories_Valid() const;

    bool isMembersCanCreatePublicPages() const;
    void setMembersCanCreatePublicPages(const bool &members_can_create_public_pages);
    bool is_members_can_create_public_pages_Set() const;
    bool is_members_can_create_public_pages_Valid() const;

    bool isMembersCanCreatePublicRepositories() const;
    void setMembersCanCreatePublicRepositories(const bool &members_can_create_public_repositories);
    bool is_members_can_create_public_repositories_Set() const;
    bool is_members_can_create_public_repositories_Valid() const;

    bool isMembersCanCreateRepositories() const;
    void setMembersCanCreateRepositories(const bool &members_can_create_repositories);
    bool is_members_can_create_repositories_Set() const;
    bool is_members_can_create_repositories_Valid() const;

    bool isMembersCanForkPrivateRepositories() const;
    void setMembersCanForkPrivateRepositories(const bool &members_can_fork_private_repositories);
    bool is_members_can_fork_private_repositories_Set() const;
    bool is_members_can_fork_private_repositories_Valid() const;

    QString getMembersUrl() const;
    void setMembersUrl(const QString &members_url);
    bool is_members_url_Set() const;
    bool is_members_url_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    qint32 getOwnedPrivateRepos() const;
    void setOwnedPrivateRepos(const qint32 &owned_private_repos);
    bool is_owned_private_repos_Set() const;
    bool is_owned_private_repos_Valid() const;

    OAIOrganization_full_plan getPlan() const;
    void setPlan(const OAIOrganization_full_plan &plan);
    bool is_plan_Set() const;
    bool is_plan_Valid() const;

    qint32 getPrivateGists() const;
    void setPrivateGists(const qint32 &private_gists);
    bool is_private_gists_Set() const;
    bool is_private_gists_Valid() const;

    qint32 getPublicGists() const;
    void setPublicGists(const qint32 &public_gists);
    bool is_public_gists_Set() const;
    bool is_public_gists_Valid() const;

    QString getPublicMembersUrl() const;
    void setPublicMembersUrl(const QString &public_members_url);
    bool is_public_members_url_Set() const;
    bool is_public_members_url_Valid() const;

    qint32 getPublicRepos() const;
    void setPublicRepos(const qint32 &public_repos);
    bool is_public_repos_Set() const;
    bool is_public_repos_Valid() const;

    QString getReposUrl() const;
    void setReposUrl(const QString &repos_url);
    bool is_repos_url_Set() const;
    bool is_repos_url_Valid() const;

    qint32 getTotalPrivateRepos() const;
    void setTotalPrivateRepos(const qint32 &total_private_repos);
    bool is_total_private_repos_Set() const;
    bool is_total_private_repos_Valid() const;

    QString getTwitterUsername() const;
    void setTwitterUsername(const QString &twitter_username);
    bool is_twitter_username_Set() const;
    bool is_twitter_username_Valid() const;

    bool isTwoFactorRequirementEnabled() const;
    void setTwoFactorRequirementEnabled(const bool &two_factor_requirement_enabled);
    bool is_two_factor_requirement_enabled_Set() const;
    bool is_two_factor_requirement_enabled_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    QString m_billing_email;
    bool m_billing_email_isSet;
    bool m_billing_email_isValid;

    QString m_blog;
    bool m_blog_isSet;
    bool m_blog_isValid;

    qint32 m_collaborators;
    bool m_collaborators_isSet;
    bool m_collaborators_isValid;

    QString m_company;
    bool m_company_isSet;
    bool m_company_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_default_repository_permission;
    bool m_default_repository_permission_isSet;
    bool m_default_repository_permission_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_disk_usage;
    bool m_disk_usage_isSet;
    bool m_disk_usage_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_events_url;
    bool m_events_url_isSet;
    bool m_events_url_isValid;

    qint32 m_followers;
    bool m_followers_isSet;
    bool m_followers_isValid;

    qint32 m_following;
    bool m_following_isSet;
    bool m_following_isValid;

    bool m_has_organization_projects;
    bool m_has_organization_projects_isSet;
    bool m_has_organization_projects_isValid;

    bool m_has_repository_projects;
    bool m_has_repository_projects_isSet;
    bool m_has_repository_projects_isValid;

    QString m_hooks_url;
    bool m_hooks_url_isSet;
    bool m_hooks_url_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_verified;
    bool m_is_verified_isSet;
    bool m_is_verified_isValid;

    QString m_issues_url;
    bool m_issues_url_isSet;
    bool m_issues_url_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_login;
    bool m_login_isSet;
    bool m_login_isValid;

    QString m_members_allowed_repository_creation_type;
    bool m_members_allowed_repository_creation_type_isSet;
    bool m_members_allowed_repository_creation_type_isValid;

    bool m_members_can_create_internal_repositories;
    bool m_members_can_create_internal_repositories_isSet;
    bool m_members_can_create_internal_repositories_isValid;

    bool m_members_can_create_pages;
    bool m_members_can_create_pages_isSet;
    bool m_members_can_create_pages_isValid;

    bool m_members_can_create_private_pages;
    bool m_members_can_create_private_pages_isSet;
    bool m_members_can_create_private_pages_isValid;

    bool m_members_can_create_private_repositories;
    bool m_members_can_create_private_repositories_isSet;
    bool m_members_can_create_private_repositories_isValid;

    bool m_members_can_create_public_pages;
    bool m_members_can_create_public_pages_isSet;
    bool m_members_can_create_public_pages_isValid;

    bool m_members_can_create_public_repositories;
    bool m_members_can_create_public_repositories_isSet;
    bool m_members_can_create_public_repositories_isValid;

    bool m_members_can_create_repositories;
    bool m_members_can_create_repositories_isSet;
    bool m_members_can_create_repositories_isValid;

    bool m_members_can_fork_private_repositories;
    bool m_members_can_fork_private_repositories_isSet;
    bool m_members_can_fork_private_repositories_isValid;

    QString m_members_url;
    bool m_members_url_isSet;
    bool m_members_url_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    qint32 m_owned_private_repos;
    bool m_owned_private_repos_isSet;
    bool m_owned_private_repos_isValid;

    OAIOrganization_full_plan m_plan;
    bool m_plan_isSet;
    bool m_plan_isValid;

    qint32 m_private_gists;
    bool m_private_gists_isSet;
    bool m_private_gists_isValid;

    qint32 m_public_gists;
    bool m_public_gists_isSet;
    bool m_public_gists_isValid;

    QString m_public_members_url;
    bool m_public_members_url_isSet;
    bool m_public_members_url_isValid;

    qint32 m_public_repos;
    bool m_public_repos_isSet;
    bool m_public_repos_isValid;

    QString m_repos_url;
    bool m_repos_url_isSet;
    bool m_repos_url_isValid;

    qint32 m_total_private_repos;
    bool m_total_private_repos_isSet;
    bool m_total_private_repos_isValid;

    QString m_twitter_username;
    bool m_twitter_username_isSet;
    bool m_twitter_username_isValid;

    bool m_two_factor_requirement_enabled;
    bool m_two_factor_requirement_enabled_isSet;
    bool m_two_factor_requirement_enabled_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrganization_full)

#endif // OAIOrganization_full_H
