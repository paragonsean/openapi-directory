/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidation_error_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidation_error_errors_inner::OAIValidation_error_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidation_error_errors_inner::OAIValidation_error_errors_inner() {
    this->initializeModel();
}

OAIValidation_error_errors_inner::~OAIValidation_error_errors_inner() {}

void OAIValidation_error_errors_inner::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIValidation_error_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidation_error_errors_inner::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIValidation_error_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidation_error_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIValidation_error_errors_inner::getCode() const {
    return m_code;
}
void OAIValidation_error_errors_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIValidation_error_errors_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIValidation_error_errors_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIValidation_error_errors_inner::getField() const {
    return m_field;
}
void OAIValidation_error_errors_inner::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIValidation_error_errors_inner::is_field_Set() const{
    return m_field_isSet;
}

bool OAIValidation_error_errors_inner::is_field_Valid() const{
    return m_field_isValid;
}

qint32 OAIValidation_error_errors_inner::getIndex() const {
    return m_index;
}
void OAIValidation_error_errors_inner::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIValidation_error_errors_inner::is_index_Set() const{
    return m_index_isSet;
}

bool OAIValidation_error_errors_inner::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIValidation_error_errors_inner::getMessage() const {
    return m_message;
}
void OAIValidation_error_errors_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIValidation_error_errors_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAIValidation_error_errors_inner::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIValidation_error_errors_inner::getResource() const {
    return m_resource;
}
void OAIValidation_error_errors_inner::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIValidation_error_errors_inner::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIValidation_error_errors_inner::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIValidation_error_errors_inner_value OAIValidation_error_errors_inner::getValue() const {
    return m_value;
}
void OAIValidation_error_errors_inner::setValue(const OAIValidation_error_errors_inner_value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIValidation_error_errors_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIValidation_error_errors_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIValidation_error_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidation_error_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
