/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGist_history.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGist_history::OAIGist_history(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGist_history::OAIGist_history() {
    this->initializeModel();
}

OAIGist_history::~OAIGist_history() {}

void OAIGist_history::initializeModel() {

    m_change_status_isSet = false;
    m_change_status_isValid = false;

    m_committed_at_isSet = false;
    m_committed_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGist_history::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGist_history::fromJsonObject(QJsonObject json) {

    m_change_status_isValid = ::OpenAPI::fromJsonValue(m_change_status, json[QString("change_status")]);
    m_change_status_isSet = !json[QString("change_status")].isNull() && m_change_status_isValid;

    m_committed_at_isValid = ::OpenAPI::fromJsonValue(m_committed_at, json[QString("committed_at")]);
    m_committed_at_isSet = !json[QString("committed_at")].isNull() && m_committed_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGist_history::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGist_history::asJsonObject() const {
    QJsonObject obj;
    if (m_change_status.isSet()) {
        obj.insert(QString("change_status"), ::OpenAPI::toJsonValue(m_change_status));
    }
    if (m_committed_at_isSet) {
        obj.insert(QString("committed_at"), ::OpenAPI::toJsonValue(m_committed_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAICommit_stats OAIGist_history::getChangeStatus() const {
    return m_change_status;
}
void OAIGist_history::setChangeStatus(const OAICommit_stats &change_status) {
    m_change_status = change_status;
    m_change_status_isSet = true;
}

bool OAIGist_history::is_change_status_Set() const{
    return m_change_status_isSet;
}

bool OAIGist_history::is_change_status_Valid() const{
    return m_change_status_isValid;
}

QDateTime OAIGist_history::getCommittedAt() const {
    return m_committed_at;
}
void OAIGist_history::setCommittedAt(const QDateTime &committed_at) {
    m_committed_at = committed_at;
    m_committed_at_isSet = true;
}

bool OAIGist_history::is_committed_at_Set() const{
    return m_committed_at_isSet;
}

bool OAIGist_history::is_committed_at_Valid() const{
    return m_committed_at_isValid;
}

QString OAIGist_history::getUrl() const {
    return m_url;
}
void OAIGist_history::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGist_history::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGist_history::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIGist_history::getUser() const {
    return m_user;
}
void OAIGist_history::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGist_history::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGist_history::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIGist_history::getVersion() const {
    return m_version;
}
void OAIGist_history::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGist_history::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGist_history::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGist_history::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGist_history::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
