/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeta_root_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeta_root_200_response::OAIMeta_root_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeta_root_200_response::OAIMeta_root_200_response() {
    this->initializeModel();
}

OAIMeta_root_200_response::~OAIMeta_root_200_response() {}

void OAIMeta_root_200_response::initializeModel() {

    m_authorizations_url_isSet = false;
    m_authorizations_url_isValid = false;

    m_code_search_url_isSet = false;
    m_code_search_url_isValid = false;

    m_commit_search_url_isSet = false;
    m_commit_search_url_isValid = false;

    m_current_user_authorizations_html_url_isSet = false;
    m_current_user_authorizations_html_url_isValid = false;

    m_current_user_repositories_url_isSet = false;
    m_current_user_repositories_url_isValid = false;

    m_current_user_url_isSet = false;
    m_current_user_url_isValid = false;

    m_emails_url_isSet = false;
    m_emails_url_isValid = false;

    m_emojis_url_isSet = false;
    m_emojis_url_isValid = false;

    m_events_url_isSet = false;
    m_events_url_isValid = false;

    m_feeds_url_isSet = false;
    m_feeds_url_isValid = false;

    m_followers_url_isSet = false;
    m_followers_url_isValid = false;

    m_following_url_isSet = false;
    m_following_url_isValid = false;

    m_gists_url_isSet = false;
    m_gists_url_isValid = false;

    m_hub_url_isSet = false;
    m_hub_url_isValid = false;

    m_issue_search_url_isSet = false;
    m_issue_search_url_isValid = false;

    m_issues_url_isSet = false;
    m_issues_url_isValid = false;

    m_keys_url_isSet = false;
    m_keys_url_isValid = false;

    m_label_search_url_isSet = false;
    m_label_search_url_isValid = false;

    m_notifications_url_isSet = false;
    m_notifications_url_isValid = false;

    m_organization_repositories_url_isSet = false;
    m_organization_repositories_url_isValid = false;

    m_organization_teams_url_isSet = false;
    m_organization_teams_url_isValid = false;

    m_organization_url_isSet = false;
    m_organization_url_isValid = false;

    m_public_gists_url_isSet = false;
    m_public_gists_url_isValid = false;

    m_rate_limit_url_isSet = false;
    m_rate_limit_url_isValid = false;

    m_repository_search_url_isSet = false;
    m_repository_search_url_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_starred_gists_url_isSet = false;
    m_starred_gists_url_isValid = false;

    m_starred_url_isSet = false;
    m_starred_url_isValid = false;

    m_topic_search_url_isSet = false;
    m_topic_search_url_isValid = false;

    m_user_organizations_url_isSet = false;
    m_user_organizations_url_isValid = false;

    m_user_repositories_url_isSet = false;
    m_user_repositories_url_isValid = false;

    m_user_search_url_isSet = false;
    m_user_search_url_isValid = false;

    m_user_url_isSet = false;
    m_user_url_isValid = false;
}

void OAIMeta_root_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeta_root_200_response::fromJsonObject(QJsonObject json) {

    m_authorizations_url_isValid = ::OpenAPI::fromJsonValue(m_authorizations_url, json[QString("authorizations_url")]);
    m_authorizations_url_isSet = !json[QString("authorizations_url")].isNull() && m_authorizations_url_isValid;

    m_code_search_url_isValid = ::OpenAPI::fromJsonValue(m_code_search_url, json[QString("code_search_url")]);
    m_code_search_url_isSet = !json[QString("code_search_url")].isNull() && m_code_search_url_isValid;

    m_commit_search_url_isValid = ::OpenAPI::fromJsonValue(m_commit_search_url, json[QString("commit_search_url")]);
    m_commit_search_url_isSet = !json[QString("commit_search_url")].isNull() && m_commit_search_url_isValid;

    m_current_user_authorizations_html_url_isValid = ::OpenAPI::fromJsonValue(m_current_user_authorizations_html_url, json[QString("current_user_authorizations_html_url")]);
    m_current_user_authorizations_html_url_isSet = !json[QString("current_user_authorizations_html_url")].isNull() && m_current_user_authorizations_html_url_isValid;

    m_current_user_repositories_url_isValid = ::OpenAPI::fromJsonValue(m_current_user_repositories_url, json[QString("current_user_repositories_url")]);
    m_current_user_repositories_url_isSet = !json[QString("current_user_repositories_url")].isNull() && m_current_user_repositories_url_isValid;

    m_current_user_url_isValid = ::OpenAPI::fromJsonValue(m_current_user_url, json[QString("current_user_url")]);
    m_current_user_url_isSet = !json[QString("current_user_url")].isNull() && m_current_user_url_isValid;

    m_emails_url_isValid = ::OpenAPI::fromJsonValue(m_emails_url, json[QString("emails_url")]);
    m_emails_url_isSet = !json[QString("emails_url")].isNull() && m_emails_url_isValid;

    m_emojis_url_isValid = ::OpenAPI::fromJsonValue(m_emojis_url, json[QString("emojis_url")]);
    m_emojis_url_isSet = !json[QString("emojis_url")].isNull() && m_emojis_url_isValid;

    m_events_url_isValid = ::OpenAPI::fromJsonValue(m_events_url, json[QString("events_url")]);
    m_events_url_isSet = !json[QString("events_url")].isNull() && m_events_url_isValid;

    m_feeds_url_isValid = ::OpenAPI::fromJsonValue(m_feeds_url, json[QString("feeds_url")]);
    m_feeds_url_isSet = !json[QString("feeds_url")].isNull() && m_feeds_url_isValid;

    m_followers_url_isValid = ::OpenAPI::fromJsonValue(m_followers_url, json[QString("followers_url")]);
    m_followers_url_isSet = !json[QString("followers_url")].isNull() && m_followers_url_isValid;

    m_following_url_isValid = ::OpenAPI::fromJsonValue(m_following_url, json[QString("following_url")]);
    m_following_url_isSet = !json[QString("following_url")].isNull() && m_following_url_isValid;

    m_gists_url_isValid = ::OpenAPI::fromJsonValue(m_gists_url, json[QString("gists_url")]);
    m_gists_url_isSet = !json[QString("gists_url")].isNull() && m_gists_url_isValid;

    m_hub_url_isValid = ::OpenAPI::fromJsonValue(m_hub_url, json[QString("hub_url")]);
    m_hub_url_isSet = !json[QString("hub_url")].isNull() && m_hub_url_isValid;

    m_issue_search_url_isValid = ::OpenAPI::fromJsonValue(m_issue_search_url, json[QString("issue_search_url")]);
    m_issue_search_url_isSet = !json[QString("issue_search_url")].isNull() && m_issue_search_url_isValid;

    m_issues_url_isValid = ::OpenAPI::fromJsonValue(m_issues_url, json[QString("issues_url")]);
    m_issues_url_isSet = !json[QString("issues_url")].isNull() && m_issues_url_isValid;

    m_keys_url_isValid = ::OpenAPI::fromJsonValue(m_keys_url, json[QString("keys_url")]);
    m_keys_url_isSet = !json[QString("keys_url")].isNull() && m_keys_url_isValid;

    m_label_search_url_isValid = ::OpenAPI::fromJsonValue(m_label_search_url, json[QString("label_search_url")]);
    m_label_search_url_isSet = !json[QString("label_search_url")].isNull() && m_label_search_url_isValid;

    m_notifications_url_isValid = ::OpenAPI::fromJsonValue(m_notifications_url, json[QString("notifications_url")]);
    m_notifications_url_isSet = !json[QString("notifications_url")].isNull() && m_notifications_url_isValid;

    m_organization_repositories_url_isValid = ::OpenAPI::fromJsonValue(m_organization_repositories_url, json[QString("organization_repositories_url")]);
    m_organization_repositories_url_isSet = !json[QString("organization_repositories_url")].isNull() && m_organization_repositories_url_isValid;

    m_organization_teams_url_isValid = ::OpenAPI::fromJsonValue(m_organization_teams_url, json[QString("organization_teams_url")]);
    m_organization_teams_url_isSet = !json[QString("organization_teams_url")].isNull() && m_organization_teams_url_isValid;

    m_organization_url_isValid = ::OpenAPI::fromJsonValue(m_organization_url, json[QString("organization_url")]);
    m_organization_url_isSet = !json[QString("organization_url")].isNull() && m_organization_url_isValid;

    m_public_gists_url_isValid = ::OpenAPI::fromJsonValue(m_public_gists_url, json[QString("public_gists_url")]);
    m_public_gists_url_isSet = !json[QString("public_gists_url")].isNull() && m_public_gists_url_isValid;

    m_rate_limit_url_isValid = ::OpenAPI::fromJsonValue(m_rate_limit_url, json[QString("rate_limit_url")]);
    m_rate_limit_url_isSet = !json[QString("rate_limit_url")].isNull() && m_rate_limit_url_isValid;

    m_repository_search_url_isValid = ::OpenAPI::fromJsonValue(m_repository_search_url, json[QString("repository_search_url")]);
    m_repository_search_url_isSet = !json[QString("repository_search_url")].isNull() && m_repository_search_url_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repository_url")]);
    m_repository_url_isSet = !json[QString("repository_url")].isNull() && m_repository_url_isValid;

    m_starred_gists_url_isValid = ::OpenAPI::fromJsonValue(m_starred_gists_url, json[QString("starred_gists_url")]);
    m_starred_gists_url_isSet = !json[QString("starred_gists_url")].isNull() && m_starred_gists_url_isValid;

    m_starred_url_isValid = ::OpenAPI::fromJsonValue(m_starred_url, json[QString("starred_url")]);
    m_starred_url_isSet = !json[QString("starred_url")].isNull() && m_starred_url_isValid;

    m_topic_search_url_isValid = ::OpenAPI::fromJsonValue(m_topic_search_url, json[QString("topic_search_url")]);
    m_topic_search_url_isSet = !json[QString("topic_search_url")].isNull() && m_topic_search_url_isValid;

    m_user_organizations_url_isValid = ::OpenAPI::fromJsonValue(m_user_organizations_url, json[QString("user_organizations_url")]);
    m_user_organizations_url_isSet = !json[QString("user_organizations_url")].isNull() && m_user_organizations_url_isValid;

    m_user_repositories_url_isValid = ::OpenAPI::fromJsonValue(m_user_repositories_url, json[QString("user_repositories_url")]);
    m_user_repositories_url_isSet = !json[QString("user_repositories_url")].isNull() && m_user_repositories_url_isValid;

    m_user_search_url_isValid = ::OpenAPI::fromJsonValue(m_user_search_url, json[QString("user_search_url")]);
    m_user_search_url_isSet = !json[QString("user_search_url")].isNull() && m_user_search_url_isValid;

    m_user_url_isValid = ::OpenAPI::fromJsonValue(m_user_url, json[QString("user_url")]);
    m_user_url_isSet = !json[QString("user_url")].isNull() && m_user_url_isValid;
}

QString OAIMeta_root_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeta_root_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_authorizations_url_isSet) {
        obj.insert(QString("authorizations_url"), ::OpenAPI::toJsonValue(m_authorizations_url));
    }
    if (m_code_search_url_isSet) {
        obj.insert(QString("code_search_url"), ::OpenAPI::toJsonValue(m_code_search_url));
    }
    if (m_commit_search_url_isSet) {
        obj.insert(QString("commit_search_url"), ::OpenAPI::toJsonValue(m_commit_search_url));
    }
    if (m_current_user_authorizations_html_url_isSet) {
        obj.insert(QString("current_user_authorizations_html_url"), ::OpenAPI::toJsonValue(m_current_user_authorizations_html_url));
    }
    if (m_current_user_repositories_url_isSet) {
        obj.insert(QString("current_user_repositories_url"), ::OpenAPI::toJsonValue(m_current_user_repositories_url));
    }
    if (m_current_user_url_isSet) {
        obj.insert(QString("current_user_url"), ::OpenAPI::toJsonValue(m_current_user_url));
    }
    if (m_emails_url_isSet) {
        obj.insert(QString("emails_url"), ::OpenAPI::toJsonValue(m_emails_url));
    }
    if (m_emojis_url_isSet) {
        obj.insert(QString("emojis_url"), ::OpenAPI::toJsonValue(m_emojis_url));
    }
    if (m_events_url_isSet) {
        obj.insert(QString("events_url"), ::OpenAPI::toJsonValue(m_events_url));
    }
    if (m_feeds_url_isSet) {
        obj.insert(QString("feeds_url"), ::OpenAPI::toJsonValue(m_feeds_url));
    }
    if (m_followers_url_isSet) {
        obj.insert(QString("followers_url"), ::OpenAPI::toJsonValue(m_followers_url));
    }
    if (m_following_url_isSet) {
        obj.insert(QString("following_url"), ::OpenAPI::toJsonValue(m_following_url));
    }
    if (m_gists_url_isSet) {
        obj.insert(QString("gists_url"), ::OpenAPI::toJsonValue(m_gists_url));
    }
    if (m_hub_url_isSet) {
        obj.insert(QString("hub_url"), ::OpenAPI::toJsonValue(m_hub_url));
    }
    if (m_issue_search_url_isSet) {
        obj.insert(QString("issue_search_url"), ::OpenAPI::toJsonValue(m_issue_search_url));
    }
    if (m_issues_url_isSet) {
        obj.insert(QString("issues_url"), ::OpenAPI::toJsonValue(m_issues_url));
    }
    if (m_keys_url_isSet) {
        obj.insert(QString("keys_url"), ::OpenAPI::toJsonValue(m_keys_url));
    }
    if (m_label_search_url_isSet) {
        obj.insert(QString("label_search_url"), ::OpenAPI::toJsonValue(m_label_search_url));
    }
    if (m_notifications_url_isSet) {
        obj.insert(QString("notifications_url"), ::OpenAPI::toJsonValue(m_notifications_url));
    }
    if (m_organization_repositories_url_isSet) {
        obj.insert(QString("organization_repositories_url"), ::OpenAPI::toJsonValue(m_organization_repositories_url));
    }
    if (m_organization_teams_url_isSet) {
        obj.insert(QString("organization_teams_url"), ::OpenAPI::toJsonValue(m_organization_teams_url));
    }
    if (m_organization_url_isSet) {
        obj.insert(QString("organization_url"), ::OpenAPI::toJsonValue(m_organization_url));
    }
    if (m_public_gists_url_isSet) {
        obj.insert(QString("public_gists_url"), ::OpenAPI::toJsonValue(m_public_gists_url));
    }
    if (m_rate_limit_url_isSet) {
        obj.insert(QString("rate_limit_url"), ::OpenAPI::toJsonValue(m_rate_limit_url));
    }
    if (m_repository_search_url_isSet) {
        obj.insert(QString("repository_search_url"), ::OpenAPI::toJsonValue(m_repository_search_url));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repository_url"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_starred_gists_url_isSet) {
        obj.insert(QString("starred_gists_url"), ::OpenAPI::toJsonValue(m_starred_gists_url));
    }
    if (m_starred_url_isSet) {
        obj.insert(QString("starred_url"), ::OpenAPI::toJsonValue(m_starred_url));
    }
    if (m_topic_search_url_isSet) {
        obj.insert(QString("topic_search_url"), ::OpenAPI::toJsonValue(m_topic_search_url));
    }
    if (m_user_organizations_url_isSet) {
        obj.insert(QString("user_organizations_url"), ::OpenAPI::toJsonValue(m_user_organizations_url));
    }
    if (m_user_repositories_url_isSet) {
        obj.insert(QString("user_repositories_url"), ::OpenAPI::toJsonValue(m_user_repositories_url));
    }
    if (m_user_search_url_isSet) {
        obj.insert(QString("user_search_url"), ::OpenAPI::toJsonValue(m_user_search_url));
    }
    if (m_user_url_isSet) {
        obj.insert(QString("user_url"), ::OpenAPI::toJsonValue(m_user_url));
    }
    return obj;
}

QString OAIMeta_root_200_response::getAuthorizationsUrl() const {
    return m_authorizations_url;
}
void OAIMeta_root_200_response::setAuthorizationsUrl(const QString &authorizations_url) {
    m_authorizations_url = authorizations_url;
    m_authorizations_url_isSet = true;
}

bool OAIMeta_root_200_response::is_authorizations_url_Set() const{
    return m_authorizations_url_isSet;
}

bool OAIMeta_root_200_response::is_authorizations_url_Valid() const{
    return m_authorizations_url_isValid;
}

QString OAIMeta_root_200_response::getCodeSearchUrl() const {
    return m_code_search_url;
}
void OAIMeta_root_200_response::setCodeSearchUrl(const QString &code_search_url) {
    m_code_search_url = code_search_url;
    m_code_search_url_isSet = true;
}

bool OAIMeta_root_200_response::is_code_search_url_Set() const{
    return m_code_search_url_isSet;
}

bool OAIMeta_root_200_response::is_code_search_url_Valid() const{
    return m_code_search_url_isValid;
}

QString OAIMeta_root_200_response::getCommitSearchUrl() const {
    return m_commit_search_url;
}
void OAIMeta_root_200_response::setCommitSearchUrl(const QString &commit_search_url) {
    m_commit_search_url = commit_search_url;
    m_commit_search_url_isSet = true;
}

bool OAIMeta_root_200_response::is_commit_search_url_Set() const{
    return m_commit_search_url_isSet;
}

bool OAIMeta_root_200_response::is_commit_search_url_Valid() const{
    return m_commit_search_url_isValid;
}

QString OAIMeta_root_200_response::getCurrentUserAuthorizationsHtmlUrl() const {
    return m_current_user_authorizations_html_url;
}
void OAIMeta_root_200_response::setCurrentUserAuthorizationsHtmlUrl(const QString &current_user_authorizations_html_url) {
    m_current_user_authorizations_html_url = current_user_authorizations_html_url;
    m_current_user_authorizations_html_url_isSet = true;
}

bool OAIMeta_root_200_response::is_current_user_authorizations_html_url_Set() const{
    return m_current_user_authorizations_html_url_isSet;
}

bool OAIMeta_root_200_response::is_current_user_authorizations_html_url_Valid() const{
    return m_current_user_authorizations_html_url_isValid;
}

QString OAIMeta_root_200_response::getCurrentUserRepositoriesUrl() const {
    return m_current_user_repositories_url;
}
void OAIMeta_root_200_response::setCurrentUserRepositoriesUrl(const QString &current_user_repositories_url) {
    m_current_user_repositories_url = current_user_repositories_url;
    m_current_user_repositories_url_isSet = true;
}

bool OAIMeta_root_200_response::is_current_user_repositories_url_Set() const{
    return m_current_user_repositories_url_isSet;
}

bool OAIMeta_root_200_response::is_current_user_repositories_url_Valid() const{
    return m_current_user_repositories_url_isValid;
}

QString OAIMeta_root_200_response::getCurrentUserUrl() const {
    return m_current_user_url;
}
void OAIMeta_root_200_response::setCurrentUserUrl(const QString &current_user_url) {
    m_current_user_url = current_user_url;
    m_current_user_url_isSet = true;
}

bool OAIMeta_root_200_response::is_current_user_url_Set() const{
    return m_current_user_url_isSet;
}

bool OAIMeta_root_200_response::is_current_user_url_Valid() const{
    return m_current_user_url_isValid;
}

QString OAIMeta_root_200_response::getEmailsUrl() const {
    return m_emails_url;
}
void OAIMeta_root_200_response::setEmailsUrl(const QString &emails_url) {
    m_emails_url = emails_url;
    m_emails_url_isSet = true;
}

bool OAIMeta_root_200_response::is_emails_url_Set() const{
    return m_emails_url_isSet;
}

bool OAIMeta_root_200_response::is_emails_url_Valid() const{
    return m_emails_url_isValid;
}

QString OAIMeta_root_200_response::getEmojisUrl() const {
    return m_emojis_url;
}
void OAIMeta_root_200_response::setEmojisUrl(const QString &emojis_url) {
    m_emojis_url = emojis_url;
    m_emojis_url_isSet = true;
}

bool OAIMeta_root_200_response::is_emojis_url_Set() const{
    return m_emojis_url_isSet;
}

bool OAIMeta_root_200_response::is_emojis_url_Valid() const{
    return m_emojis_url_isValid;
}

QString OAIMeta_root_200_response::getEventsUrl() const {
    return m_events_url;
}
void OAIMeta_root_200_response::setEventsUrl(const QString &events_url) {
    m_events_url = events_url;
    m_events_url_isSet = true;
}

bool OAIMeta_root_200_response::is_events_url_Set() const{
    return m_events_url_isSet;
}

bool OAIMeta_root_200_response::is_events_url_Valid() const{
    return m_events_url_isValid;
}

QString OAIMeta_root_200_response::getFeedsUrl() const {
    return m_feeds_url;
}
void OAIMeta_root_200_response::setFeedsUrl(const QString &feeds_url) {
    m_feeds_url = feeds_url;
    m_feeds_url_isSet = true;
}

bool OAIMeta_root_200_response::is_feeds_url_Set() const{
    return m_feeds_url_isSet;
}

bool OAIMeta_root_200_response::is_feeds_url_Valid() const{
    return m_feeds_url_isValid;
}

QString OAIMeta_root_200_response::getFollowersUrl() const {
    return m_followers_url;
}
void OAIMeta_root_200_response::setFollowersUrl(const QString &followers_url) {
    m_followers_url = followers_url;
    m_followers_url_isSet = true;
}

bool OAIMeta_root_200_response::is_followers_url_Set() const{
    return m_followers_url_isSet;
}

bool OAIMeta_root_200_response::is_followers_url_Valid() const{
    return m_followers_url_isValid;
}

QString OAIMeta_root_200_response::getFollowingUrl() const {
    return m_following_url;
}
void OAIMeta_root_200_response::setFollowingUrl(const QString &following_url) {
    m_following_url = following_url;
    m_following_url_isSet = true;
}

bool OAIMeta_root_200_response::is_following_url_Set() const{
    return m_following_url_isSet;
}

bool OAIMeta_root_200_response::is_following_url_Valid() const{
    return m_following_url_isValid;
}

QString OAIMeta_root_200_response::getGistsUrl() const {
    return m_gists_url;
}
void OAIMeta_root_200_response::setGistsUrl(const QString &gists_url) {
    m_gists_url = gists_url;
    m_gists_url_isSet = true;
}

bool OAIMeta_root_200_response::is_gists_url_Set() const{
    return m_gists_url_isSet;
}

bool OAIMeta_root_200_response::is_gists_url_Valid() const{
    return m_gists_url_isValid;
}

QString OAIMeta_root_200_response::getHubUrl() const {
    return m_hub_url;
}
void OAIMeta_root_200_response::setHubUrl(const QString &hub_url) {
    m_hub_url = hub_url;
    m_hub_url_isSet = true;
}

bool OAIMeta_root_200_response::is_hub_url_Set() const{
    return m_hub_url_isSet;
}

bool OAIMeta_root_200_response::is_hub_url_Valid() const{
    return m_hub_url_isValid;
}

QString OAIMeta_root_200_response::getIssueSearchUrl() const {
    return m_issue_search_url;
}
void OAIMeta_root_200_response::setIssueSearchUrl(const QString &issue_search_url) {
    m_issue_search_url = issue_search_url;
    m_issue_search_url_isSet = true;
}

bool OAIMeta_root_200_response::is_issue_search_url_Set() const{
    return m_issue_search_url_isSet;
}

bool OAIMeta_root_200_response::is_issue_search_url_Valid() const{
    return m_issue_search_url_isValid;
}

QString OAIMeta_root_200_response::getIssuesUrl() const {
    return m_issues_url;
}
void OAIMeta_root_200_response::setIssuesUrl(const QString &issues_url) {
    m_issues_url = issues_url;
    m_issues_url_isSet = true;
}

bool OAIMeta_root_200_response::is_issues_url_Set() const{
    return m_issues_url_isSet;
}

bool OAIMeta_root_200_response::is_issues_url_Valid() const{
    return m_issues_url_isValid;
}

QString OAIMeta_root_200_response::getKeysUrl() const {
    return m_keys_url;
}
void OAIMeta_root_200_response::setKeysUrl(const QString &keys_url) {
    m_keys_url = keys_url;
    m_keys_url_isSet = true;
}

bool OAIMeta_root_200_response::is_keys_url_Set() const{
    return m_keys_url_isSet;
}

bool OAIMeta_root_200_response::is_keys_url_Valid() const{
    return m_keys_url_isValid;
}

QString OAIMeta_root_200_response::getLabelSearchUrl() const {
    return m_label_search_url;
}
void OAIMeta_root_200_response::setLabelSearchUrl(const QString &label_search_url) {
    m_label_search_url = label_search_url;
    m_label_search_url_isSet = true;
}

bool OAIMeta_root_200_response::is_label_search_url_Set() const{
    return m_label_search_url_isSet;
}

bool OAIMeta_root_200_response::is_label_search_url_Valid() const{
    return m_label_search_url_isValid;
}

QString OAIMeta_root_200_response::getNotificationsUrl() const {
    return m_notifications_url;
}
void OAIMeta_root_200_response::setNotificationsUrl(const QString &notifications_url) {
    m_notifications_url = notifications_url;
    m_notifications_url_isSet = true;
}

bool OAIMeta_root_200_response::is_notifications_url_Set() const{
    return m_notifications_url_isSet;
}

bool OAIMeta_root_200_response::is_notifications_url_Valid() const{
    return m_notifications_url_isValid;
}

QString OAIMeta_root_200_response::getOrganizationRepositoriesUrl() const {
    return m_organization_repositories_url;
}
void OAIMeta_root_200_response::setOrganizationRepositoriesUrl(const QString &organization_repositories_url) {
    m_organization_repositories_url = organization_repositories_url;
    m_organization_repositories_url_isSet = true;
}

bool OAIMeta_root_200_response::is_organization_repositories_url_Set() const{
    return m_organization_repositories_url_isSet;
}

bool OAIMeta_root_200_response::is_organization_repositories_url_Valid() const{
    return m_organization_repositories_url_isValid;
}

QString OAIMeta_root_200_response::getOrganizationTeamsUrl() const {
    return m_organization_teams_url;
}
void OAIMeta_root_200_response::setOrganizationTeamsUrl(const QString &organization_teams_url) {
    m_organization_teams_url = organization_teams_url;
    m_organization_teams_url_isSet = true;
}

bool OAIMeta_root_200_response::is_organization_teams_url_Set() const{
    return m_organization_teams_url_isSet;
}

bool OAIMeta_root_200_response::is_organization_teams_url_Valid() const{
    return m_organization_teams_url_isValid;
}

QString OAIMeta_root_200_response::getOrganizationUrl() const {
    return m_organization_url;
}
void OAIMeta_root_200_response::setOrganizationUrl(const QString &organization_url) {
    m_organization_url = organization_url;
    m_organization_url_isSet = true;
}

bool OAIMeta_root_200_response::is_organization_url_Set() const{
    return m_organization_url_isSet;
}

bool OAIMeta_root_200_response::is_organization_url_Valid() const{
    return m_organization_url_isValid;
}

QString OAIMeta_root_200_response::getPublicGistsUrl() const {
    return m_public_gists_url;
}
void OAIMeta_root_200_response::setPublicGistsUrl(const QString &public_gists_url) {
    m_public_gists_url = public_gists_url;
    m_public_gists_url_isSet = true;
}

bool OAIMeta_root_200_response::is_public_gists_url_Set() const{
    return m_public_gists_url_isSet;
}

bool OAIMeta_root_200_response::is_public_gists_url_Valid() const{
    return m_public_gists_url_isValid;
}

QString OAIMeta_root_200_response::getRateLimitUrl() const {
    return m_rate_limit_url;
}
void OAIMeta_root_200_response::setRateLimitUrl(const QString &rate_limit_url) {
    m_rate_limit_url = rate_limit_url;
    m_rate_limit_url_isSet = true;
}

bool OAIMeta_root_200_response::is_rate_limit_url_Set() const{
    return m_rate_limit_url_isSet;
}

bool OAIMeta_root_200_response::is_rate_limit_url_Valid() const{
    return m_rate_limit_url_isValid;
}

QString OAIMeta_root_200_response::getRepositorySearchUrl() const {
    return m_repository_search_url;
}
void OAIMeta_root_200_response::setRepositorySearchUrl(const QString &repository_search_url) {
    m_repository_search_url = repository_search_url;
    m_repository_search_url_isSet = true;
}

bool OAIMeta_root_200_response::is_repository_search_url_Set() const{
    return m_repository_search_url_isSet;
}

bool OAIMeta_root_200_response::is_repository_search_url_Valid() const{
    return m_repository_search_url_isValid;
}

QString OAIMeta_root_200_response::getRepositoryUrl() const {
    return m_repository_url;
}
void OAIMeta_root_200_response::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAIMeta_root_200_response::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAIMeta_root_200_response::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

QString OAIMeta_root_200_response::getStarredGistsUrl() const {
    return m_starred_gists_url;
}
void OAIMeta_root_200_response::setStarredGistsUrl(const QString &starred_gists_url) {
    m_starred_gists_url = starred_gists_url;
    m_starred_gists_url_isSet = true;
}

bool OAIMeta_root_200_response::is_starred_gists_url_Set() const{
    return m_starred_gists_url_isSet;
}

bool OAIMeta_root_200_response::is_starred_gists_url_Valid() const{
    return m_starred_gists_url_isValid;
}

QString OAIMeta_root_200_response::getStarredUrl() const {
    return m_starred_url;
}
void OAIMeta_root_200_response::setStarredUrl(const QString &starred_url) {
    m_starred_url = starred_url;
    m_starred_url_isSet = true;
}

bool OAIMeta_root_200_response::is_starred_url_Set() const{
    return m_starred_url_isSet;
}

bool OAIMeta_root_200_response::is_starred_url_Valid() const{
    return m_starred_url_isValid;
}

QString OAIMeta_root_200_response::getTopicSearchUrl() const {
    return m_topic_search_url;
}
void OAIMeta_root_200_response::setTopicSearchUrl(const QString &topic_search_url) {
    m_topic_search_url = topic_search_url;
    m_topic_search_url_isSet = true;
}

bool OAIMeta_root_200_response::is_topic_search_url_Set() const{
    return m_topic_search_url_isSet;
}

bool OAIMeta_root_200_response::is_topic_search_url_Valid() const{
    return m_topic_search_url_isValid;
}

QString OAIMeta_root_200_response::getUserOrganizationsUrl() const {
    return m_user_organizations_url;
}
void OAIMeta_root_200_response::setUserOrganizationsUrl(const QString &user_organizations_url) {
    m_user_organizations_url = user_organizations_url;
    m_user_organizations_url_isSet = true;
}

bool OAIMeta_root_200_response::is_user_organizations_url_Set() const{
    return m_user_organizations_url_isSet;
}

bool OAIMeta_root_200_response::is_user_organizations_url_Valid() const{
    return m_user_organizations_url_isValid;
}

QString OAIMeta_root_200_response::getUserRepositoriesUrl() const {
    return m_user_repositories_url;
}
void OAIMeta_root_200_response::setUserRepositoriesUrl(const QString &user_repositories_url) {
    m_user_repositories_url = user_repositories_url;
    m_user_repositories_url_isSet = true;
}

bool OAIMeta_root_200_response::is_user_repositories_url_Set() const{
    return m_user_repositories_url_isSet;
}

bool OAIMeta_root_200_response::is_user_repositories_url_Valid() const{
    return m_user_repositories_url_isValid;
}

QString OAIMeta_root_200_response::getUserSearchUrl() const {
    return m_user_search_url;
}
void OAIMeta_root_200_response::setUserSearchUrl(const QString &user_search_url) {
    m_user_search_url = user_search_url;
    m_user_search_url_isSet = true;
}

bool OAIMeta_root_200_response::is_user_search_url_Set() const{
    return m_user_search_url_isSet;
}

bool OAIMeta_root_200_response::is_user_search_url_Valid() const{
    return m_user_search_url_isValid;
}

QString OAIMeta_root_200_response::getUserUrl() const {
    return m_user_url;
}
void OAIMeta_root_200_response::setUserUrl(const QString &user_url) {
    m_user_url = user_url;
    m_user_url_isSet = true;
}

bool OAIMeta_root_200_response::is_user_url_Set() const{
    return m_user_url_isSet;
}

bool OAIMeta_root_200_response::is_user_url_Valid() const{
    return m_user_url_isValid;
}

bool OAIMeta_root_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorizations_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_authorizations_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_repositories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_user_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emojis_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feeds_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gists_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_repositories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_teams_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_gists_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_gists_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_organizations_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_repositories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeta_root_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorizations_url_isValid && m_code_search_url_isValid && m_commit_search_url_isValid && m_current_user_authorizations_html_url_isValid && m_current_user_repositories_url_isValid && m_current_user_url_isValid && m_emails_url_isValid && m_emojis_url_isValid && m_events_url_isValid && m_feeds_url_isValid && m_followers_url_isValid && m_following_url_isValid && m_gists_url_isValid && m_hub_url_isValid && m_issue_search_url_isValid && m_issues_url_isValid && m_keys_url_isValid && m_label_search_url_isValid && m_notifications_url_isValid && m_organization_repositories_url_isValid && m_organization_teams_url_isValid && m_organization_url_isValid && m_public_gists_url_isValid && m_rate_limit_url_isValid && m_repository_search_url_isValid && m_repository_url_isValid && m_starred_gists_url_isValid && m_starred_url_isValid && m_user_organizations_url_isValid && m_user_repositories_url_isValid && m_user_search_url_isValid && m_user_url_isValid && true;
}

} // namespace OpenAPI
