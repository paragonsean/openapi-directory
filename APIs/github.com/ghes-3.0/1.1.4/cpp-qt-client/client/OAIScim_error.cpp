/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScim_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScim_error::OAIScim_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScim_error::OAIScim_error() {
    this->initializeModel();
}

OAIScim_error::~OAIScim_error() {}

void OAIScim_error::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_scim_type_isSet = false;
    m_scim_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIScim_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScim_error::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentation_url")]);
    m_documentation_url_isSet = !json[QString("documentation_url")].isNull() && m_documentation_url_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_scim_type_isValid = ::OpenAPI::fromJsonValue(m_scim_type, json[QString("scimType")]);
    m_scim_type_isSet = !json[QString("scimType")].isNull() && m_scim_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIScim_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScim_error::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentation_url"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    if (m_scim_type_isSet) {
        obj.insert(QString("scimType"), ::OpenAPI::toJsonValue(m_scim_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIScim_error::getDetail() const {
    return m_detail;
}
void OAIScim_error::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIScim_error::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIScim_error::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIScim_error::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIScim_error::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIScim_error::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIScim_error::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

QString OAIScim_error::getMessage() const {
    return m_message;
}
void OAIScim_error::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIScim_error::is_message_Set() const{
    return m_message_isSet;
}

bool OAIScim_error::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIScim_error::getSchemas() const {
    return m_schemas;
}
void OAIScim_error::setSchemas(const QList<QString> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIScim_error::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIScim_error::is_schemas_Valid() const{
    return m_schemas_isValid;
}

QString OAIScim_error::getScimType() const {
    return m_scim_type;
}
void OAIScim_error::setScimType(const QString &scim_type) {
    m_scim_type = scim_type;
    m_scim_type_isSet = true;
}

bool OAIScim_error::is_scim_type_Set() const{
    return m_scim_type_isSet;
}

bool OAIScim_error::is_scim_type_Valid() const{
    return m_scim_type_isValid;
}

qint32 OAIScim_error::getStatus() const {
    return m_status;
}
void OAIScim_error::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScim_error::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScim_error::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIScim_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scim_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScim_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
