/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepo_search_result_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepo_search_result_item::OAIRepo_search_result_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepo_search_result_item::OAIRepo_search_result_item() {
    this->initializeModel();
}

OAIRepo_search_result_item::~OAIRepo_search_result_item() {}

void OAIRepo_search_result_item::initializeModel() {

    m_allow_forking_isSet = false;
    m_allow_forking_isValid = false;

    m_allow_merge_commit_isSet = false;
    m_allow_merge_commit_isValid = false;

    m_allow_rebase_merge_isSet = false;
    m_allow_rebase_merge_isValid = false;

    m_allow_squash_merge_isSet = false;
    m_allow_squash_merge_isValid = false;

    m_archive_url_isSet = false;
    m_archive_url_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_assignees_url_isSet = false;
    m_assignees_url_isValid = false;

    m_blobs_url_isSet = false;
    m_blobs_url_isValid = false;

    m_branches_url_isSet = false;
    m_branches_url_isValid = false;

    m_clone_url_isSet = false;
    m_clone_url_isValid = false;

    m_collaborators_url_isSet = false;
    m_collaborators_url_isValid = false;

    m_comments_url_isSet = false;
    m_comments_url_isValid = false;

    m_commits_url_isSet = false;
    m_commits_url_isValid = false;

    m_compare_url_isSet = false;
    m_compare_url_isValid = false;

    m_contents_url_isSet = false;
    m_contents_url_isValid = false;

    m_contributors_url_isSet = false;
    m_contributors_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_delete_branch_on_merge_isSet = false;
    m_delete_branch_on_merge_isValid = false;

    m_deployments_url_isSet = false;
    m_deployments_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_downloads_url_isSet = false;
    m_downloads_url_isValid = false;

    m_events_url_isSet = false;
    m_events_url_isValid = false;

    m_fork_isSet = false;
    m_fork_isValid = false;

    m_forks_isSet = false;
    m_forks_isValid = false;

    m_forks_count_isSet = false;
    m_forks_count_isValid = false;

    m_forks_url_isSet = false;
    m_forks_url_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_git_commits_url_isSet = false;
    m_git_commits_url_isValid = false;

    m_git_refs_url_isSet = false;
    m_git_refs_url_isValid = false;

    m_git_tags_url_isSet = false;
    m_git_tags_url_isValid = false;

    m_git_url_isSet = false;
    m_git_url_isValid = false;

    m_has_downloads_isSet = false;
    m_has_downloads_isValid = false;

    m_has_issues_isSet = false;
    m_has_issues_isValid = false;

    m_has_pages_isSet = false;
    m_has_pages_isValid = false;

    m_has_projects_isSet = false;
    m_has_projects_isValid = false;

    m_has_wiki_isSet = false;
    m_has_wiki_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_hooks_url_isSet = false;
    m_hooks_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_template_isSet = false;
    m_is_template_isValid = false;

    m_issue_comment_url_isSet = false;
    m_issue_comment_url_isValid = false;

    m_issue_events_url_isSet = false;
    m_issue_events_url_isValid = false;

    m_issues_url_isSet = false;
    m_issues_url_isValid = false;

    m_keys_url_isSet = false;
    m_keys_url_isValid = false;

    m_labels_url_isSet = false;
    m_labels_url_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_languages_url_isSet = false;
    m_languages_url_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_master_branch_isSet = false;
    m_master_branch_isValid = false;

    m_merges_url_isSet = false;
    m_merges_url_isValid = false;

    m_milestones_url_isSet = false;
    m_milestones_url_isValid = false;

    m_mirror_url_isSet = false;
    m_mirror_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_notifications_url_isSet = false;
    m_notifications_url_isValid = false;

    m_open_issues_isSet = false;
    m_open_issues_isValid = false;

    m_open_issues_count_isSet = false;
    m_open_issues_count_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_pulls_url_isSet = false;
    m_pulls_url_isValid = false;

    m_pushed_at_isSet = false;
    m_pushed_at_isValid = false;

    m_releases_url_isSet = false;
    m_releases_url_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ssh_url_isSet = false;
    m_ssh_url_isValid = false;

    m_stargazers_count_isSet = false;
    m_stargazers_count_isValid = false;

    m_stargazers_url_isSet = false;
    m_stargazers_url_isValid = false;

    m_statuses_url_isSet = false;
    m_statuses_url_isValid = false;

    m_subscribers_url_isSet = false;
    m_subscribers_url_isValid = false;

    m_subscription_url_isSet = false;
    m_subscription_url_isValid = false;

    m_svn_url_isSet = false;
    m_svn_url_isValid = false;

    m_tags_url_isSet = false;
    m_tags_url_isValid = false;

    m_teams_url_isSet = false;
    m_teams_url_isValid = false;

    m_temp_clone_token_isSet = false;
    m_temp_clone_token_isValid = false;

    m_text_matches_isSet = false;
    m_text_matches_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;

    m_trees_url_isSet = false;
    m_trees_url_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_watchers_isSet = false;
    m_watchers_isValid = false;

    m_watchers_count_isSet = false;
    m_watchers_count_isValid = false;
}

void OAIRepo_search_result_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepo_search_result_item::fromJsonObject(QJsonObject json) {

    m_allow_forking_isValid = ::OpenAPI::fromJsonValue(m_allow_forking, json[QString("allow_forking")]);
    m_allow_forking_isSet = !json[QString("allow_forking")].isNull() && m_allow_forking_isValid;

    m_allow_merge_commit_isValid = ::OpenAPI::fromJsonValue(m_allow_merge_commit, json[QString("allow_merge_commit")]);
    m_allow_merge_commit_isSet = !json[QString("allow_merge_commit")].isNull() && m_allow_merge_commit_isValid;

    m_allow_rebase_merge_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase_merge, json[QString("allow_rebase_merge")]);
    m_allow_rebase_merge_isSet = !json[QString("allow_rebase_merge")].isNull() && m_allow_rebase_merge_isValid;

    m_allow_squash_merge_isValid = ::OpenAPI::fromJsonValue(m_allow_squash_merge, json[QString("allow_squash_merge")]);
    m_allow_squash_merge_isSet = !json[QString("allow_squash_merge")].isNull() && m_allow_squash_merge_isValid;

    m_archive_url_isValid = ::OpenAPI::fromJsonValue(m_archive_url, json[QString("archive_url")]);
    m_archive_url_isSet = !json[QString("archive_url")].isNull() && m_archive_url_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_assignees_url_isValid = ::OpenAPI::fromJsonValue(m_assignees_url, json[QString("assignees_url")]);
    m_assignees_url_isSet = !json[QString("assignees_url")].isNull() && m_assignees_url_isValid;

    m_blobs_url_isValid = ::OpenAPI::fromJsonValue(m_blobs_url, json[QString("blobs_url")]);
    m_blobs_url_isSet = !json[QString("blobs_url")].isNull() && m_blobs_url_isValid;

    m_branches_url_isValid = ::OpenAPI::fromJsonValue(m_branches_url, json[QString("branches_url")]);
    m_branches_url_isSet = !json[QString("branches_url")].isNull() && m_branches_url_isValid;

    m_clone_url_isValid = ::OpenAPI::fromJsonValue(m_clone_url, json[QString("clone_url")]);
    m_clone_url_isSet = !json[QString("clone_url")].isNull() && m_clone_url_isValid;

    m_collaborators_url_isValid = ::OpenAPI::fromJsonValue(m_collaborators_url, json[QString("collaborators_url")]);
    m_collaborators_url_isSet = !json[QString("collaborators_url")].isNull() && m_collaborators_url_isValid;

    m_comments_url_isValid = ::OpenAPI::fromJsonValue(m_comments_url, json[QString("comments_url")]);
    m_comments_url_isSet = !json[QString("comments_url")].isNull() && m_comments_url_isValid;

    m_commits_url_isValid = ::OpenAPI::fromJsonValue(m_commits_url, json[QString("commits_url")]);
    m_commits_url_isSet = !json[QString("commits_url")].isNull() && m_commits_url_isValid;

    m_compare_url_isValid = ::OpenAPI::fromJsonValue(m_compare_url, json[QString("compare_url")]);
    m_compare_url_isSet = !json[QString("compare_url")].isNull() && m_compare_url_isValid;

    m_contents_url_isValid = ::OpenAPI::fromJsonValue(m_contents_url, json[QString("contents_url")]);
    m_contents_url_isSet = !json[QString("contents_url")].isNull() && m_contents_url_isValid;

    m_contributors_url_isValid = ::OpenAPI::fromJsonValue(m_contributors_url, json[QString("contributors_url")]);
    m_contributors_url_isSet = !json[QString("contributors_url")].isNull() && m_contributors_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_delete_branch_on_merge_isValid = ::OpenAPI::fromJsonValue(m_delete_branch_on_merge, json[QString("delete_branch_on_merge")]);
    m_delete_branch_on_merge_isSet = !json[QString("delete_branch_on_merge")].isNull() && m_delete_branch_on_merge_isValid;

    m_deployments_url_isValid = ::OpenAPI::fromJsonValue(m_deployments_url, json[QString("deployments_url")]);
    m_deployments_url_isSet = !json[QString("deployments_url")].isNull() && m_deployments_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_downloads_url_isValid = ::OpenAPI::fromJsonValue(m_downloads_url, json[QString("downloads_url")]);
    m_downloads_url_isSet = !json[QString("downloads_url")].isNull() && m_downloads_url_isValid;

    m_events_url_isValid = ::OpenAPI::fromJsonValue(m_events_url, json[QString("events_url")]);
    m_events_url_isSet = !json[QString("events_url")].isNull() && m_events_url_isValid;

    m_fork_isValid = ::OpenAPI::fromJsonValue(m_fork, json[QString("fork")]);
    m_fork_isSet = !json[QString("fork")].isNull() && m_fork_isValid;

    m_forks_isValid = ::OpenAPI::fromJsonValue(m_forks, json[QString("forks")]);
    m_forks_isSet = !json[QString("forks")].isNull() && m_forks_isValid;

    m_forks_count_isValid = ::OpenAPI::fromJsonValue(m_forks_count, json[QString("forks_count")]);
    m_forks_count_isSet = !json[QString("forks_count")].isNull() && m_forks_count_isValid;

    m_forks_url_isValid = ::OpenAPI::fromJsonValue(m_forks_url, json[QString("forks_url")]);
    m_forks_url_isSet = !json[QString("forks_url")].isNull() && m_forks_url_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_git_commits_url_isValid = ::OpenAPI::fromJsonValue(m_git_commits_url, json[QString("git_commits_url")]);
    m_git_commits_url_isSet = !json[QString("git_commits_url")].isNull() && m_git_commits_url_isValid;

    m_git_refs_url_isValid = ::OpenAPI::fromJsonValue(m_git_refs_url, json[QString("git_refs_url")]);
    m_git_refs_url_isSet = !json[QString("git_refs_url")].isNull() && m_git_refs_url_isValid;

    m_git_tags_url_isValid = ::OpenAPI::fromJsonValue(m_git_tags_url, json[QString("git_tags_url")]);
    m_git_tags_url_isSet = !json[QString("git_tags_url")].isNull() && m_git_tags_url_isValid;

    m_git_url_isValid = ::OpenAPI::fromJsonValue(m_git_url, json[QString("git_url")]);
    m_git_url_isSet = !json[QString("git_url")].isNull() && m_git_url_isValid;

    m_has_downloads_isValid = ::OpenAPI::fromJsonValue(m_has_downloads, json[QString("has_downloads")]);
    m_has_downloads_isSet = !json[QString("has_downloads")].isNull() && m_has_downloads_isValid;

    m_has_issues_isValid = ::OpenAPI::fromJsonValue(m_has_issues, json[QString("has_issues")]);
    m_has_issues_isSet = !json[QString("has_issues")].isNull() && m_has_issues_isValid;

    m_has_pages_isValid = ::OpenAPI::fromJsonValue(m_has_pages, json[QString("has_pages")]);
    m_has_pages_isSet = !json[QString("has_pages")].isNull() && m_has_pages_isValid;

    m_has_projects_isValid = ::OpenAPI::fromJsonValue(m_has_projects, json[QString("has_projects")]);
    m_has_projects_isSet = !json[QString("has_projects")].isNull() && m_has_projects_isValid;

    m_has_wiki_isValid = ::OpenAPI::fromJsonValue(m_has_wiki, json[QString("has_wiki")]);
    m_has_wiki_isSet = !json[QString("has_wiki")].isNull() && m_has_wiki_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_hooks_url_isValid = ::OpenAPI::fromJsonValue(m_hooks_url, json[QString("hooks_url")]);
    m_hooks_url_isSet = !json[QString("hooks_url")].isNull() && m_hooks_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_template_isValid = ::OpenAPI::fromJsonValue(m_is_template, json[QString("is_template")]);
    m_is_template_isSet = !json[QString("is_template")].isNull() && m_is_template_isValid;

    m_issue_comment_url_isValid = ::OpenAPI::fromJsonValue(m_issue_comment_url, json[QString("issue_comment_url")]);
    m_issue_comment_url_isSet = !json[QString("issue_comment_url")].isNull() && m_issue_comment_url_isValid;

    m_issue_events_url_isValid = ::OpenAPI::fromJsonValue(m_issue_events_url, json[QString("issue_events_url")]);
    m_issue_events_url_isSet = !json[QString("issue_events_url")].isNull() && m_issue_events_url_isValid;

    m_issues_url_isValid = ::OpenAPI::fromJsonValue(m_issues_url, json[QString("issues_url")]);
    m_issues_url_isSet = !json[QString("issues_url")].isNull() && m_issues_url_isValid;

    m_keys_url_isValid = ::OpenAPI::fromJsonValue(m_keys_url, json[QString("keys_url")]);
    m_keys_url_isSet = !json[QString("keys_url")].isNull() && m_keys_url_isValid;

    m_labels_url_isValid = ::OpenAPI::fromJsonValue(m_labels_url, json[QString("labels_url")]);
    m_labels_url_isSet = !json[QString("labels_url")].isNull() && m_labels_url_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_languages_url_isValid = ::OpenAPI::fromJsonValue(m_languages_url, json[QString("languages_url")]);
    m_languages_url_isSet = !json[QString("languages_url")].isNull() && m_languages_url_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_master_branch_isValid = ::OpenAPI::fromJsonValue(m_master_branch, json[QString("master_branch")]);
    m_master_branch_isSet = !json[QString("master_branch")].isNull() && m_master_branch_isValid;

    m_merges_url_isValid = ::OpenAPI::fromJsonValue(m_merges_url, json[QString("merges_url")]);
    m_merges_url_isSet = !json[QString("merges_url")].isNull() && m_merges_url_isValid;

    m_milestones_url_isValid = ::OpenAPI::fromJsonValue(m_milestones_url, json[QString("milestones_url")]);
    m_milestones_url_isSet = !json[QString("milestones_url")].isNull() && m_milestones_url_isValid;

    m_mirror_url_isValid = ::OpenAPI::fromJsonValue(m_mirror_url, json[QString("mirror_url")]);
    m_mirror_url_isSet = !json[QString("mirror_url")].isNull() && m_mirror_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_notifications_url_isValid = ::OpenAPI::fromJsonValue(m_notifications_url, json[QString("notifications_url")]);
    m_notifications_url_isSet = !json[QString("notifications_url")].isNull() && m_notifications_url_isValid;

    m_open_issues_isValid = ::OpenAPI::fromJsonValue(m_open_issues, json[QString("open_issues")]);
    m_open_issues_isSet = !json[QString("open_issues")].isNull() && m_open_issues_isValid;

    m_open_issues_count_isValid = ::OpenAPI::fromJsonValue(m_open_issues_count, json[QString("open_issues_count")]);
    m_open_issues_count_isSet = !json[QString("open_issues_count")].isNull() && m_open_issues_count_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_pulls_url_isValid = ::OpenAPI::fromJsonValue(m_pulls_url, json[QString("pulls_url")]);
    m_pulls_url_isSet = !json[QString("pulls_url")].isNull() && m_pulls_url_isValid;

    m_pushed_at_isValid = ::OpenAPI::fromJsonValue(m_pushed_at, json[QString("pushed_at")]);
    m_pushed_at_isSet = !json[QString("pushed_at")].isNull() && m_pushed_at_isValid;

    m_releases_url_isValid = ::OpenAPI::fromJsonValue(m_releases_url, json[QString("releases_url")]);
    m_releases_url_isSet = !json[QString("releases_url")].isNull() && m_releases_url_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ssh_url_isValid = ::OpenAPI::fromJsonValue(m_ssh_url, json[QString("ssh_url")]);
    m_ssh_url_isSet = !json[QString("ssh_url")].isNull() && m_ssh_url_isValid;

    m_stargazers_count_isValid = ::OpenAPI::fromJsonValue(m_stargazers_count, json[QString("stargazers_count")]);
    m_stargazers_count_isSet = !json[QString("stargazers_count")].isNull() && m_stargazers_count_isValid;

    m_stargazers_url_isValid = ::OpenAPI::fromJsonValue(m_stargazers_url, json[QString("stargazers_url")]);
    m_stargazers_url_isSet = !json[QString("stargazers_url")].isNull() && m_stargazers_url_isValid;

    m_statuses_url_isValid = ::OpenAPI::fromJsonValue(m_statuses_url, json[QString("statuses_url")]);
    m_statuses_url_isSet = !json[QString("statuses_url")].isNull() && m_statuses_url_isValid;

    m_subscribers_url_isValid = ::OpenAPI::fromJsonValue(m_subscribers_url, json[QString("subscribers_url")]);
    m_subscribers_url_isSet = !json[QString("subscribers_url")].isNull() && m_subscribers_url_isValid;

    m_subscription_url_isValid = ::OpenAPI::fromJsonValue(m_subscription_url, json[QString("subscription_url")]);
    m_subscription_url_isSet = !json[QString("subscription_url")].isNull() && m_subscription_url_isValid;

    m_svn_url_isValid = ::OpenAPI::fromJsonValue(m_svn_url, json[QString("svn_url")]);
    m_svn_url_isSet = !json[QString("svn_url")].isNull() && m_svn_url_isValid;

    m_tags_url_isValid = ::OpenAPI::fromJsonValue(m_tags_url, json[QString("tags_url")]);
    m_tags_url_isSet = !json[QString("tags_url")].isNull() && m_tags_url_isValid;

    m_teams_url_isValid = ::OpenAPI::fromJsonValue(m_teams_url, json[QString("teams_url")]);
    m_teams_url_isSet = !json[QString("teams_url")].isNull() && m_teams_url_isValid;

    m_temp_clone_token_isValid = ::OpenAPI::fromJsonValue(m_temp_clone_token, json[QString("temp_clone_token")]);
    m_temp_clone_token_isSet = !json[QString("temp_clone_token")].isNull() && m_temp_clone_token_isValid;

    m_text_matches_isValid = ::OpenAPI::fromJsonValue(m_text_matches, json[QString("text_matches")]);
    m_text_matches_isSet = !json[QString("text_matches")].isNull() && m_text_matches_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;

    m_trees_url_isValid = ::OpenAPI::fromJsonValue(m_trees_url, json[QString("trees_url")]);
    m_trees_url_isSet = !json[QString("trees_url")].isNull() && m_trees_url_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_watchers_isValid = ::OpenAPI::fromJsonValue(m_watchers, json[QString("watchers")]);
    m_watchers_isSet = !json[QString("watchers")].isNull() && m_watchers_isValid;

    m_watchers_count_isValid = ::OpenAPI::fromJsonValue(m_watchers_count, json[QString("watchers_count")]);
    m_watchers_count_isSet = !json[QString("watchers_count")].isNull() && m_watchers_count_isValid;
}

QString OAIRepo_search_result_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepo_search_result_item::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_forking_isSet) {
        obj.insert(QString("allow_forking"), ::OpenAPI::toJsonValue(m_allow_forking));
    }
    if (m_allow_merge_commit_isSet) {
        obj.insert(QString("allow_merge_commit"), ::OpenAPI::toJsonValue(m_allow_merge_commit));
    }
    if (m_allow_rebase_merge_isSet) {
        obj.insert(QString("allow_rebase_merge"), ::OpenAPI::toJsonValue(m_allow_rebase_merge));
    }
    if (m_allow_squash_merge_isSet) {
        obj.insert(QString("allow_squash_merge"), ::OpenAPI::toJsonValue(m_allow_squash_merge));
    }
    if (m_archive_url_isSet) {
        obj.insert(QString("archive_url"), ::OpenAPI::toJsonValue(m_archive_url));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_assignees_url_isSet) {
        obj.insert(QString("assignees_url"), ::OpenAPI::toJsonValue(m_assignees_url));
    }
    if (m_blobs_url_isSet) {
        obj.insert(QString("blobs_url"), ::OpenAPI::toJsonValue(m_blobs_url));
    }
    if (m_branches_url_isSet) {
        obj.insert(QString("branches_url"), ::OpenAPI::toJsonValue(m_branches_url));
    }
    if (m_clone_url_isSet) {
        obj.insert(QString("clone_url"), ::OpenAPI::toJsonValue(m_clone_url));
    }
    if (m_collaborators_url_isSet) {
        obj.insert(QString("collaborators_url"), ::OpenAPI::toJsonValue(m_collaborators_url));
    }
    if (m_comments_url_isSet) {
        obj.insert(QString("comments_url"), ::OpenAPI::toJsonValue(m_comments_url));
    }
    if (m_commits_url_isSet) {
        obj.insert(QString("commits_url"), ::OpenAPI::toJsonValue(m_commits_url));
    }
    if (m_compare_url_isSet) {
        obj.insert(QString("compare_url"), ::OpenAPI::toJsonValue(m_compare_url));
    }
    if (m_contents_url_isSet) {
        obj.insert(QString("contents_url"), ::OpenAPI::toJsonValue(m_contents_url));
    }
    if (m_contributors_url_isSet) {
        obj.insert(QString("contributors_url"), ::OpenAPI::toJsonValue(m_contributors_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_delete_branch_on_merge_isSet) {
        obj.insert(QString("delete_branch_on_merge"), ::OpenAPI::toJsonValue(m_delete_branch_on_merge));
    }
    if (m_deployments_url_isSet) {
        obj.insert(QString("deployments_url"), ::OpenAPI::toJsonValue(m_deployments_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_downloads_url_isSet) {
        obj.insert(QString("downloads_url"), ::OpenAPI::toJsonValue(m_downloads_url));
    }
    if (m_events_url_isSet) {
        obj.insert(QString("events_url"), ::OpenAPI::toJsonValue(m_events_url));
    }
    if (m_fork_isSet) {
        obj.insert(QString("fork"), ::OpenAPI::toJsonValue(m_fork));
    }
    if (m_forks_isSet) {
        obj.insert(QString("forks"), ::OpenAPI::toJsonValue(m_forks));
    }
    if (m_forks_count_isSet) {
        obj.insert(QString("forks_count"), ::OpenAPI::toJsonValue(m_forks_count));
    }
    if (m_forks_url_isSet) {
        obj.insert(QString("forks_url"), ::OpenAPI::toJsonValue(m_forks_url));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_git_commits_url_isSet) {
        obj.insert(QString("git_commits_url"), ::OpenAPI::toJsonValue(m_git_commits_url));
    }
    if (m_git_refs_url_isSet) {
        obj.insert(QString("git_refs_url"), ::OpenAPI::toJsonValue(m_git_refs_url));
    }
    if (m_git_tags_url_isSet) {
        obj.insert(QString("git_tags_url"), ::OpenAPI::toJsonValue(m_git_tags_url));
    }
    if (m_git_url_isSet) {
        obj.insert(QString("git_url"), ::OpenAPI::toJsonValue(m_git_url));
    }
    if (m_has_downloads_isSet) {
        obj.insert(QString("has_downloads"), ::OpenAPI::toJsonValue(m_has_downloads));
    }
    if (m_has_issues_isSet) {
        obj.insert(QString("has_issues"), ::OpenAPI::toJsonValue(m_has_issues));
    }
    if (m_has_pages_isSet) {
        obj.insert(QString("has_pages"), ::OpenAPI::toJsonValue(m_has_pages));
    }
    if (m_has_projects_isSet) {
        obj.insert(QString("has_projects"), ::OpenAPI::toJsonValue(m_has_projects));
    }
    if (m_has_wiki_isSet) {
        obj.insert(QString("has_wiki"), ::OpenAPI::toJsonValue(m_has_wiki));
    }
    if (m_homepage_isSet) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_hooks_url_isSet) {
        obj.insert(QString("hooks_url"), ::OpenAPI::toJsonValue(m_hooks_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_template_isSet) {
        obj.insert(QString("is_template"), ::OpenAPI::toJsonValue(m_is_template));
    }
    if (m_issue_comment_url_isSet) {
        obj.insert(QString("issue_comment_url"), ::OpenAPI::toJsonValue(m_issue_comment_url));
    }
    if (m_issue_events_url_isSet) {
        obj.insert(QString("issue_events_url"), ::OpenAPI::toJsonValue(m_issue_events_url));
    }
    if (m_issues_url_isSet) {
        obj.insert(QString("issues_url"), ::OpenAPI::toJsonValue(m_issues_url));
    }
    if (m_keys_url_isSet) {
        obj.insert(QString("keys_url"), ::OpenAPI::toJsonValue(m_keys_url));
    }
    if (m_labels_url_isSet) {
        obj.insert(QString("labels_url"), ::OpenAPI::toJsonValue(m_labels_url));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_languages_url_isSet) {
        obj.insert(QString("languages_url"), ::OpenAPI::toJsonValue(m_languages_url));
    }
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_master_branch_isSet) {
        obj.insert(QString("master_branch"), ::OpenAPI::toJsonValue(m_master_branch));
    }
    if (m_merges_url_isSet) {
        obj.insert(QString("merges_url"), ::OpenAPI::toJsonValue(m_merges_url));
    }
    if (m_milestones_url_isSet) {
        obj.insert(QString("milestones_url"), ::OpenAPI::toJsonValue(m_milestones_url));
    }
    if (m_mirror_url_isSet) {
        obj.insert(QString("mirror_url"), ::OpenAPI::toJsonValue(m_mirror_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_notifications_url_isSet) {
        obj.insert(QString("notifications_url"), ::OpenAPI::toJsonValue(m_notifications_url));
    }
    if (m_open_issues_isSet) {
        obj.insert(QString("open_issues"), ::OpenAPI::toJsonValue(m_open_issues));
    }
    if (m_open_issues_count_isSet) {
        obj.insert(QString("open_issues_count"), ::OpenAPI::toJsonValue(m_open_issues_count));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_pulls_url_isSet) {
        obj.insert(QString("pulls_url"), ::OpenAPI::toJsonValue(m_pulls_url));
    }
    if (m_pushed_at_isSet) {
        obj.insert(QString("pushed_at"), ::OpenAPI::toJsonValue(m_pushed_at));
    }
    if (m_releases_url_isSet) {
        obj.insert(QString("releases_url"), ::OpenAPI::toJsonValue(m_releases_url));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ssh_url_isSet) {
        obj.insert(QString("ssh_url"), ::OpenAPI::toJsonValue(m_ssh_url));
    }
    if (m_stargazers_count_isSet) {
        obj.insert(QString("stargazers_count"), ::OpenAPI::toJsonValue(m_stargazers_count));
    }
    if (m_stargazers_url_isSet) {
        obj.insert(QString("stargazers_url"), ::OpenAPI::toJsonValue(m_stargazers_url));
    }
    if (m_statuses_url_isSet) {
        obj.insert(QString("statuses_url"), ::OpenAPI::toJsonValue(m_statuses_url));
    }
    if (m_subscribers_url_isSet) {
        obj.insert(QString("subscribers_url"), ::OpenAPI::toJsonValue(m_subscribers_url));
    }
    if (m_subscription_url_isSet) {
        obj.insert(QString("subscription_url"), ::OpenAPI::toJsonValue(m_subscription_url));
    }
    if (m_svn_url_isSet) {
        obj.insert(QString("svn_url"), ::OpenAPI::toJsonValue(m_svn_url));
    }
    if (m_tags_url_isSet) {
        obj.insert(QString("tags_url"), ::OpenAPI::toJsonValue(m_tags_url));
    }
    if (m_teams_url_isSet) {
        obj.insert(QString("teams_url"), ::OpenAPI::toJsonValue(m_teams_url));
    }
    if (m_temp_clone_token_isSet) {
        obj.insert(QString("temp_clone_token"), ::OpenAPI::toJsonValue(m_temp_clone_token));
    }
    if (m_text_matches.size() > 0) {
        obj.insert(QString("text_matches"), ::OpenAPI::toJsonValue(m_text_matches));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    if (m_trees_url_isSet) {
        obj.insert(QString("trees_url"), ::OpenAPI::toJsonValue(m_trees_url));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_watchers_isSet) {
        obj.insert(QString("watchers"), ::OpenAPI::toJsonValue(m_watchers));
    }
    if (m_watchers_count_isSet) {
        obj.insert(QString("watchers_count"), ::OpenAPI::toJsonValue(m_watchers_count));
    }
    return obj;
}

bool OAIRepo_search_result_item::isAllowForking() const {
    return m_allow_forking;
}
void OAIRepo_search_result_item::setAllowForking(const bool &allow_forking) {
    m_allow_forking = allow_forking;
    m_allow_forking_isSet = true;
}

bool OAIRepo_search_result_item::is_allow_forking_Set() const{
    return m_allow_forking_isSet;
}

bool OAIRepo_search_result_item::is_allow_forking_Valid() const{
    return m_allow_forking_isValid;
}

bool OAIRepo_search_result_item::isAllowMergeCommit() const {
    return m_allow_merge_commit;
}
void OAIRepo_search_result_item::setAllowMergeCommit(const bool &allow_merge_commit) {
    m_allow_merge_commit = allow_merge_commit;
    m_allow_merge_commit_isSet = true;
}

bool OAIRepo_search_result_item::is_allow_merge_commit_Set() const{
    return m_allow_merge_commit_isSet;
}

bool OAIRepo_search_result_item::is_allow_merge_commit_Valid() const{
    return m_allow_merge_commit_isValid;
}

bool OAIRepo_search_result_item::isAllowRebaseMerge() const {
    return m_allow_rebase_merge;
}
void OAIRepo_search_result_item::setAllowRebaseMerge(const bool &allow_rebase_merge) {
    m_allow_rebase_merge = allow_rebase_merge;
    m_allow_rebase_merge_isSet = true;
}

bool OAIRepo_search_result_item::is_allow_rebase_merge_Set() const{
    return m_allow_rebase_merge_isSet;
}

bool OAIRepo_search_result_item::is_allow_rebase_merge_Valid() const{
    return m_allow_rebase_merge_isValid;
}

bool OAIRepo_search_result_item::isAllowSquashMerge() const {
    return m_allow_squash_merge;
}
void OAIRepo_search_result_item::setAllowSquashMerge(const bool &allow_squash_merge) {
    m_allow_squash_merge = allow_squash_merge;
    m_allow_squash_merge_isSet = true;
}

bool OAIRepo_search_result_item::is_allow_squash_merge_Set() const{
    return m_allow_squash_merge_isSet;
}

bool OAIRepo_search_result_item::is_allow_squash_merge_Valid() const{
    return m_allow_squash_merge_isValid;
}

QString OAIRepo_search_result_item::getArchiveUrl() const {
    return m_archive_url;
}
void OAIRepo_search_result_item::setArchiveUrl(const QString &archive_url) {
    m_archive_url = archive_url;
    m_archive_url_isSet = true;
}

bool OAIRepo_search_result_item::is_archive_url_Set() const{
    return m_archive_url_isSet;
}

bool OAIRepo_search_result_item::is_archive_url_Valid() const{
    return m_archive_url_isValid;
}

bool OAIRepo_search_result_item::isArchived() const {
    return m_archived;
}
void OAIRepo_search_result_item::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIRepo_search_result_item::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIRepo_search_result_item::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIRepo_search_result_item::getAssigneesUrl() const {
    return m_assignees_url;
}
void OAIRepo_search_result_item::setAssigneesUrl(const QString &assignees_url) {
    m_assignees_url = assignees_url;
    m_assignees_url_isSet = true;
}

bool OAIRepo_search_result_item::is_assignees_url_Set() const{
    return m_assignees_url_isSet;
}

bool OAIRepo_search_result_item::is_assignees_url_Valid() const{
    return m_assignees_url_isValid;
}

QString OAIRepo_search_result_item::getBlobsUrl() const {
    return m_blobs_url;
}
void OAIRepo_search_result_item::setBlobsUrl(const QString &blobs_url) {
    m_blobs_url = blobs_url;
    m_blobs_url_isSet = true;
}

bool OAIRepo_search_result_item::is_blobs_url_Set() const{
    return m_blobs_url_isSet;
}

bool OAIRepo_search_result_item::is_blobs_url_Valid() const{
    return m_blobs_url_isValid;
}

QString OAIRepo_search_result_item::getBranchesUrl() const {
    return m_branches_url;
}
void OAIRepo_search_result_item::setBranchesUrl(const QString &branches_url) {
    m_branches_url = branches_url;
    m_branches_url_isSet = true;
}

bool OAIRepo_search_result_item::is_branches_url_Set() const{
    return m_branches_url_isSet;
}

bool OAIRepo_search_result_item::is_branches_url_Valid() const{
    return m_branches_url_isValid;
}

QString OAIRepo_search_result_item::getCloneUrl() const {
    return m_clone_url;
}
void OAIRepo_search_result_item::setCloneUrl(const QString &clone_url) {
    m_clone_url = clone_url;
    m_clone_url_isSet = true;
}

bool OAIRepo_search_result_item::is_clone_url_Set() const{
    return m_clone_url_isSet;
}

bool OAIRepo_search_result_item::is_clone_url_Valid() const{
    return m_clone_url_isValid;
}

QString OAIRepo_search_result_item::getCollaboratorsUrl() const {
    return m_collaborators_url;
}
void OAIRepo_search_result_item::setCollaboratorsUrl(const QString &collaborators_url) {
    m_collaborators_url = collaborators_url;
    m_collaborators_url_isSet = true;
}

bool OAIRepo_search_result_item::is_collaborators_url_Set() const{
    return m_collaborators_url_isSet;
}

bool OAIRepo_search_result_item::is_collaborators_url_Valid() const{
    return m_collaborators_url_isValid;
}

QString OAIRepo_search_result_item::getCommentsUrl() const {
    return m_comments_url;
}
void OAIRepo_search_result_item::setCommentsUrl(const QString &comments_url) {
    m_comments_url = comments_url;
    m_comments_url_isSet = true;
}

bool OAIRepo_search_result_item::is_comments_url_Set() const{
    return m_comments_url_isSet;
}

bool OAIRepo_search_result_item::is_comments_url_Valid() const{
    return m_comments_url_isValid;
}

QString OAIRepo_search_result_item::getCommitsUrl() const {
    return m_commits_url;
}
void OAIRepo_search_result_item::setCommitsUrl(const QString &commits_url) {
    m_commits_url = commits_url;
    m_commits_url_isSet = true;
}

bool OAIRepo_search_result_item::is_commits_url_Set() const{
    return m_commits_url_isSet;
}

bool OAIRepo_search_result_item::is_commits_url_Valid() const{
    return m_commits_url_isValid;
}

QString OAIRepo_search_result_item::getCompareUrl() const {
    return m_compare_url;
}
void OAIRepo_search_result_item::setCompareUrl(const QString &compare_url) {
    m_compare_url = compare_url;
    m_compare_url_isSet = true;
}

bool OAIRepo_search_result_item::is_compare_url_Set() const{
    return m_compare_url_isSet;
}

bool OAIRepo_search_result_item::is_compare_url_Valid() const{
    return m_compare_url_isValid;
}

QString OAIRepo_search_result_item::getContentsUrl() const {
    return m_contents_url;
}
void OAIRepo_search_result_item::setContentsUrl(const QString &contents_url) {
    m_contents_url = contents_url;
    m_contents_url_isSet = true;
}

bool OAIRepo_search_result_item::is_contents_url_Set() const{
    return m_contents_url_isSet;
}

bool OAIRepo_search_result_item::is_contents_url_Valid() const{
    return m_contents_url_isValid;
}

QString OAIRepo_search_result_item::getContributorsUrl() const {
    return m_contributors_url;
}
void OAIRepo_search_result_item::setContributorsUrl(const QString &contributors_url) {
    m_contributors_url = contributors_url;
    m_contributors_url_isSet = true;
}

bool OAIRepo_search_result_item::is_contributors_url_Set() const{
    return m_contributors_url_isSet;
}

bool OAIRepo_search_result_item::is_contributors_url_Valid() const{
    return m_contributors_url_isValid;
}

QDateTime OAIRepo_search_result_item::getCreatedAt() const {
    return m_created_at;
}
void OAIRepo_search_result_item::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRepo_search_result_item::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRepo_search_result_item::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIRepo_search_result_item::getDefaultBranch() const {
    return m_default_branch;
}
void OAIRepo_search_result_item::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIRepo_search_result_item::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIRepo_search_result_item::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

bool OAIRepo_search_result_item::isDeleteBranchOnMerge() const {
    return m_delete_branch_on_merge;
}
void OAIRepo_search_result_item::setDeleteBranchOnMerge(const bool &delete_branch_on_merge) {
    m_delete_branch_on_merge = delete_branch_on_merge;
    m_delete_branch_on_merge_isSet = true;
}

bool OAIRepo_search_result_item::is_delete_branch_on_merge_Set() const{
    return m_delete_branch_on_merge_isSet;
}

bool OAIRepo_search_result_item::is_delete_branch_on_merge_Valid() const{
    return m_delete_branch_on_merge_isValid;
}

QString OAIRepo_search_result_item::getDeploymentsUrl() const {
    return m_deployments_url;
}
void OAIRepo_search_result_item::setDeploymentsUrl(const QString &deployments_url) {
    m_deployments_url = deployments_url;
    m_deployments_url_isSet = true;
}

bool OAIRepo_search_result_item::is_deployments_url_Set() const{
    return m_deployments_url_isSet;
}

bool OAIRepo_search_result_item::is_deployments_url_Valid() const{
    return m_deployments_url_isValid;
}

QString OAIRepo_search_result_item::getDescription() const {
    return m_description;
}
void OAIRepo_search_result_item::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepo_search_result_item::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepo_search_result_item::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRepo_search_result_item::isDisabled() const {
    return m_disabled;
}
void OAIRepo_search_result_item::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIRepo_search_result_item::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIRepo_search_result_item::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIRepo_search_result_item::getDownloadsUrl() const {
    return m_downloads_url;
}
void OAIRepo_search_result_item::setDownloadsUrl(const QString &downloads_url) {
    m_downloads_url = downloads_url;
    m_downloads_url_isSet = true;
}

bool OAIRepo_search_result_item::is_downloads_url_Set() const{
    return m_downloads_url_isSet;
}

bool OAIRepo_search_result_item::is_downloads_url_Valid() const{
    return m_downloads_url_isValid;
}

QString OAIRepo_search_result_item::getEventsUrl() const {
    return m_events_url;
}
void OAIRepo_search_result_item::setEventsUrl(const QString &events_url) {
    m_events_url = events_url;
    m_events_url_isSet = true;
}

bool OAIRepo_search_result_item::is_events_url_Set() const{
    return m_events_url_isSet;
}

bool OAIRepo_search_result_item::is_events_url_Valid() const{
    return m_events_url_isValid;
}

bool OAIRepo_search_result_item::isFork() const {
    return m_fork;
}
void OAIRepo_search_result_item::setFork(const bool &fork) {
    m_fork = fork;
    m_fork_isSet = true;
}

bool OAIRepo_search_result_item::is_fork_Set() const{
    return m_fork_isSet;
}

bool OAIRepo_search_result_item::is_fork_Valid() const{
    return m_fork_isValid;
}

qint32 OAIRepo_search_result_item::getForks() const {
    return m_forks;
}
void OAIRepo_search_result_item::setForks(const qint32 &forks) {
    m_forks = forks;
    m_forks_isSet = true;
}

bool OAIRepo_search_result_item::is_forks_Set() const{
    return m_forks_isSet;
}

bool OAIRepo_search_result_item::is_forks_Valid() const{
    return m_forks_isValid;
}

qint32 OAIRepo_search_result_item::getForksCount() const {
    return m_forks_count;
}
void OAIRepo_search_result_item::setForksCount(const qint32 &forks_count) {
    m_forks_count = forks_count;
    m_forks_count_isSet = true;
}

bool OAIRepo_search_result_item::is_forks_count_Set() const{
    return m_forks_count_isSet;
}

bool OAIRepo_search_result_item::is_forks_count_Valid() const{
    return m_forks_count_isValid;
}

QString OAIRepo_search_result_item::getForksUrl() const {
    return m_forks_url;
}
void OAIRepo_search_result_item::setForksUrl(const QString &forks_url) {
    m_forks_url = forks_url;
    m_forks_url_isSet = true;
}

bool OAIRepo_search_result_item::is_forks_url_Set() const{
    return m_forks_url_isSet;
}

bool OAIRepo_search_result_item::is_forks_url_Valid() const{
    return m_forks_url_isValid;
}

QString OAIRepo_search_result_item::getFullName() const {
    return m_full_name;
}
void OAIRepo_search_result_item::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIRepo_search_result_item::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIRepo_search_result_item::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIRepo_search_result_item::getGitCommitsUrl() const {
    return m_git_commits_url;
}
void OAIRepo_search_result_item::setGitCommitsUrl(const QString &git_commits_url) {
    m_git_commits_url = git_commits_url;
    m_git_commits_url_isSet = true;
}

bool OAIRepo_search_result_item::is_git_commits_url_Set() const{
    return m_git_commits_url_isSet;
}

bool OAIRepo_search_result_item::is_git_commits_url_Valid() const{
    return m_git_commits_url_isValid;
}

QString OAIRepo_search_result_item::getGitRefsUrl() const {
    return m_git_refs_url;
}
void OAIRepo_search_result_item::setGitRefsUrl(const QString &git_refs_url) {
    m_git_refs_url = git_refs_url;
    m_git_refs_url_isSet = true;
}

bool OAIRepo_search_result_item::is_git_refs_url_Set() const{
    return m_git_refs_url_isSet;
}

bool OAIRepo_search_result_item::is_git_refs_url_Valid() const{
    return m_git_refs_url_isValid;
}

QString OAIRepo_search_result_item::getGitTagsUrl() const {
    return m_git_tags_url;
}
void OAIRepo_search_result_item::setGitTagsUrl(const QString &git_tags_url) {
    m_git_tags_url = git_tags_url;
    m_git_tags_url_isSet = true;
}

bool OAIRepo_search_result_item::is_git_tags_url_Set() const{
    return m_git_tags_url_isSet;
}

bool OAIRepo_search_result_item::is_git_tags_url_Valid() const{
    return m_git_tags_url_isValid;
}

QString OAIRepo_search_result_item::getGitUrl() const {
    return m_git_url;
}
void OAIRepo_search_result_item::setGitUrl(const QString &git_url) {
    m_git_url = git_url;
    m_git_url_isSet = true;
}

bool OAIRepo_search_result_item::is_git_url_Set() const{
    return m_git_url_isSet;
}

bool OAIRepo_search_result_item::is_git_url_Valid() const{
    return m_git_url_isValid;
}

bool OAIRepo_search_result_item::isHasDownloads() const {
    return m_has_downloads;
}
void OAIRepo_search_result_item::setHasDownloads(const bool &has_downloads) {
    m_has_downloads = has_downloads;
    m_has_downloads_isSet = true;
}

bool OAIRepo_search_result_item::is_has_downloads_Set() const{
    return m_has_downloads_isSet;
}

bool OAIRepo_search_result_item::is_has_downloads_Valid() const{
    return m_has_downloads_isValid;
}

bool OAIRepo_search_result_item::isHasIssues() const {
    return m_has_issues;
}
void OAIRepo_search_result_item::setHasIssues(const bool &has_issues) {
    m_has_issues = has_issues;
    m_has_issues_isSet = true;
}

bool OAIRepo_search_result_item::is_has_issues_Set() const{
    return m_has_issues_isSet;
}

bool OAIRepo_search_result_item::is_has_issues_Valid() const{
    return m_has_issues_isValid;
}

bool OAIRepo_search_result_item::isHasPages() const {
    return m_has_pages;
}
void OAIRepo_search_result_item::setHasPages(const bool &has_pages) {
    m_has_pages = has_pages;
    m_has_pages_isSet = true;
}

bool OAIRepo_search_result_item::is_has_pages_Set() const{
    return m_has_pages_isSet;
}

bool OAIRepo_search_result_item::is_has_pages_Valid() const{
    return m_has_pages_isValid;
}

bool OAIRepo_search_result_item::isHasProjects() const {
    return m_has_projects;
}
void OAIRepo_search_result_item::setHasProjects(const bool &has_projects) {
    m_has_projects = has_projects;
    m_has_projects_isSet = true;
}

bool OAIRepo_search_result_item::is_has_projects_Set() const{
    return m_has_projects_isSet;
}

bool OAIRepo_search_result_item::is_has_projects_Valid() const{
    return m_has_projects_isValid;
}

bool OAIRepo_search_result_item::isHasWiki() const {
    return m_has_wiki;
}
void OAIRepo_search_result_item::setHasWiki(const bool &has_wiki) {
    m_has_wiki = has_wiki;
    m_has_wiki_isSet = true;
}

bool OAIRepo_search_result_item::is_has_wiki_Set() const{
    return m_has_wiki_isSet;
}

bool OAIRepo_search_result_item::is_has_wiki_Valid() const{
    return m_has_wiki_isValid;
}

QString OAIRepo_search_result_item::getHomepage() const {
    return m_homepage;
}
void OAIRepo_search_result_item::setHomepage(const QString &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIRepo_search_result_item::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIRepo_search_result_item::is_homepage_Valid() const{
    return m_homepage_isValid;
}

QString OAIRepo_search_result_item::getHooksUrl() const {
    return m_hooks_url;
}
void OAIRepo_search_result_item::setHooksUrl(const QString &hooks_url) {
    m_hooks_url = hooks_url;
    m_hooks_url_isSet = true;
}

bool OAIRepo_search_result_item::is_hooks_url_Set() const{
    return m_hooks_url_isSet;
}

bool OAIRepo_search_result_item::is_hooks_url_Valid() const{
    return m_hooks_url_isValid;
}

QString OAIRepo_search_result_item::getHtmlUrl() const {
    return m_html_url;
}
void OAIRepo_search_result_item::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIRepo_search_result_item::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIRepo_search_result_item::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIRepo_search_result_item::getId() const {
    return m_id;
}
void OAIRepo_search_result_item::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepo_search_result_item::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepo_search_result_item::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRepo_search_result_item::isIsTemplate() const {
    return m_is_template;
}
void OAIRepo_search_result_item::setIsTemplate(const bool &is_template) {
    m_is_template = is_template;
    m_is_template_isSet = true;
}

bool OAIRepo_search_result_item::is_is_template_Set() const{
    return m_is_template_isSet;
}

bool OAIRepo_search_result_item::is_is_template_Valid() const{
    return m_is_template_isValid;
}

QString OAIRepo_search_result_item::getIssueCommentUrl() const {
    return m_issue_comment_url;
}
void OAIRepo_search_result_item::setIssueCommentUrl(const QString &issue_comment_url) {
    m_issue_comment_url = issue_comment_url;
    m_issue_comment_url_isSet = true;
}

bool OAIRepo_search_result_item::is_issue_comment_url_Set() const{
    return m_issue_comment_url_isSet;
}

bool OAIRepo_search_result_item::is_issue_comment_url_Valid() const{
    return m_issue_comment_url_isValid;
}

QString OAIRepo_search_result_item::getIssueEventsUrl() const {
    return m_issue_events_url;
}
void OAIRepo_search_result_item::setIssueEventsUrl(const QString &issue_events_url) {
    m_issue_events_url = issue_events_url;
    m_issue_events_url_isSet = true;
}

bool OAIRepo_search_result_item::is_issue_events_url_Set() const{
    return m_issue_events_url_isSet;
}

bool OAIRepo_search_result_item::is_issue_events_url_Valid() const{
    return m_issue_events_url_isValid;
}

QString OAIRepo_search_result_item::getIssuesUrl() const {
    return m_issues_url;
}
void OAIRepo_search_result_item::setIssuesUrl(const QString &issues_url) {
    m_issues_url = issues_url;
    m_issues_url_isSet = true;
}

bool OAIRepo_search_result_item::is_issues_url_Set() const{
    return m_issues_url_isSet;
}

bool OAIRepo_search_result_item::is_issues_url_Valid() const{
    return m_issues_url_isValid;
}

QString OAIRepo_search_result_item::getKeysUrl() const {
    return m_keys_url;
}
void OAIRepo_search_result_item::setKeysUrl(const QString &keys_url) {
    m_keys_url = keys_url;
    m_keys_url_isSet = true;
}

bool OAIRepo_search_result_item::is_keys_url_Set() const{
    return m_keys_url_isSet;
}

bool OAIRepo_search_result_item::is_keys_url_Valid() const{
    return m_keys_url_isValid;
}

QString OAIRepo_search_result_item::getLabelsUrl() const {
    return m_labels_url;
}
void OAIRepo_search_result_item::setLabelsUrl(const QString &labels_url) {
    m_labels_url = labels_url;
    m_labels_url_isSet = true;
}

bool OAIRepo_search_result_item::is_labels_url_Set() const{
    return m_labels_url_isSet;
}

bool OAIRepo_search_result_item::is_labels_url_Valid() const{
    return m_labels_url_isValid;
}

QString OAIRepo_search_result_item::getLanguage() const {
    return m_language;
}
void OAIRepo_search_result_item::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRepo_search_result_item::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRepo_search_result_item::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIRepo_search_result_item::getLanguagesUrl() const {
    return m_languages_url;
}
void OAIRepo_search_result_item::setLanguagesUrl(const QString &languages_url) {
    m_languages_url = languages_url;
    m_languages_url_isSet = true;
}

bool OAIRepo_search_result_item::is_languages_url_Set() const{
    return m_languages_url_isSet;
}

bool OAIRepo_search_result_item::is_languages_url_Valid() const{
    return m_languages_url_isValid;
}

OAINullable_license_simple OAIRepo_search_result_item::getLicense() const {
    return m_license;
}
void OAIRepo_search_result_item::setLicense(const OAINullable_license_simple &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIRepo_search_result_item::is_license_Set() const{
    return m_license_isSet;
}

bool OAIRepo_search_result_item::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIRepo_search_result_item::getMasterBranch() const {
    return m_master_branch;
}
void OAIRepo_search_result_item::setMasterBranch(const QString &master_branch) {
    m_master_branch = master_branch;
    m_master_branch_isSet = true;
}

bool OAIRepo_search_result_item::is_master_branch_Set() const{
    return m_master_branch_isSet;
}

bool OAIRepo_search_result_item::is_master_branch_Valid() const{
    return m_master_branch_isValid;
}

QString OAIRepo_search_result_item::getMergesUrl() const {
    return m_merges_url;
}
void OAIRepo_search_result_item::setMergesUrl(const QString &merges_url) {
    m_merges_url = merges_url;
    m_merges_url_isSet = true;
}

bool OAIRepo_search_result_item::is_merges_url_Set() const{
    return m_merges_url_isSet;
}

bool OAIRepo_search_result_item::is_merges_url_Valid() const{
    return m_merges_url_isValid;
}

QString OAIRepo_search_result_item::getMilestonesUrl() const {
    return m_milestones_url;
}
void OAIRepo_search_result_item::setMilestonesUrl(const QString &milestones_url) {
    m_milestones_url = milestones_url;
    m_milestones_url_isSet = true;
}

bool OAIRepo_search_result_item::is_milestones_url_Set() const{
    return m_milestones_url_isSet;
}

bool OAIRepo_search_result_item::is_milestones_url_Valid() const{
    return m_milestones_url_isValid;
}

QString OAIRepo_search_result_item::getMirrorUrl() const {
    return m_mirror_url;
}
void OAIRepo_search_result_item::setMirrorUrl(const QString &mirror_url) {
    m_mirror_url = mirror_url;
    m_mirror_url_isSet = true;
}

bool OAIRepo_search_result_item::is_mirror_url_Set() const{
    return m_mirror_url_isSet;
}

bool OAIRepo_search_result_item::is_mirror_url_Valid() const{
    return m_mirror_url_isValid;
}

QString OAIRepo_search_result_item::getName() const {
    return m_name;
}
void OAIRepo_search_result_item::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepo_search_result_item::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepo_search_result_item::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRepo_search_result_item::getNodeId() const {
    return m_node_id;
}
void OAIRepo_search_result_item::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIRepo_search_result_item::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIRepo_search_result_item::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIRepo_search_result_item::getNotificationsUrl() const {
    return m_notifications_url;
}
void OAIRepo_search_result_item::setNotificationsUrl(const QString &notifications_url) {
    m_notifications_url = notifications_url;
    m_notifications_url_isSet = true;
}

bool OAIRepo_search_result_item::is_notifications_url_Set() const{
    return m_notifications_url_isSet;
}

bool OAIRepo_search_result_item::is_notifications_url_Valid() const{
    return m_notifications_url_isValid;
}

qint32 OAIRepo_search_result_item::getOpenIssues() const {
    return m_open_issues;
}
void OAIRepo_search_result_item::setOpenIssues(const qint32 &open_issues) {
    m_open_issues = open_issues;
    m_open_issues_isSet = true;
}

bool OAIRepo_search_result_item::is_open_issues_Set() const{
    return m_open_issues_isSet;
}

bool OAIRepo_search_result_item::is_open_issues_Valid() const{
    return m_open_issues_isValid;
}

qint32 OAIRepo_search_result_item::getOpenIssuesCount() const {
    return m_open_issues_count;
}
void OAIRepo_search_result_item::setOpenIssuesCount(const qint32 &open_issues_count) {
    m_open_issues_count = open_issues_count;
    m_open_issues_count_isSet = true;
}

bool OAIRepo_search_result_item::is_open_issues_count_Set() const{
    return m_open_issues_count_isSet;
}

bool OAIRepo_search_result_item::is_open_issues_count_Valid() const{
    return m_open_issues_count_isValid;
}

OAINullable_simple_user OAIRepo_search_result_item::getOwner() const {
    return m_owner;
}
void OAIRepo_search_result_item::setOwner(const OAINullable_simple_user &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIRepo_search_result_item::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIRepo_search_result_item::is_owner_Valid() const{
    return m_owner_isValid;
}

OAICollaborator_permissions OAIRepo_search_result_item::getPermissions() const {
    return m_permissions;
}
void OAIRepo_search_result_item::setPermissions(const OAICollaborator_permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIRepo_search_result_item::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIRepo_search_result_item::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIRepo_search_result_item::isRPrivate() const {
    return m_r_private;
}
void OAIRepo_search_result_item::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIRepo_search_result_item::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIRepo_search_result_item::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QString OAIRepo_search_result_item::getPullsUrl() const {
    return m_pulls_url;
}
void OAIRepo_search_result_item::setPullsUrl(const QString &pulls_url) {
    m_pulls_url = pulls_url;
    m_pulls_url_isSet = true;
}

bool OAIRepo_search_result_item::is_pulls_url_Set() const{
    return m_pulls_url_isSet;
}

bool OAIRepo_search_result_item::is_pulls_url_Valid() const{
    return m_pulls_url_isValid;
}

QDateTime OAIRepo_search_result_item::getPushedAt() const {
    return m_pushed_at;
}
void OAIRepo_search_result_item::setPushedAt(const QDateTime &pushed_at) {
    m_pushed_at = pushed_at;
    m_pushed_at_isSet = true;
}

bool OAIRepo_search_result_item::is_pushed_at_Set() const{
    return m_pushed_at_isSet;
}

bool OAIRepo_search_result_item::is_pushed_at_Valid() const{
    return m_pushed_at_isValid;
}

QString OAIRepo_search_result_item::getReleasesUrl() const {
    return m_releases_url;
}
void OAIRepo_search_result_item::setReleasesUrl(const QString &releases_url) {
    m_releases_url = releases_url;
    m_releases_url_isSet = true;
}

bool OAIRepo_search_result_item::is_releases_url_Set() const{
    return m_releases_url_isSet;
}

bool OAIRepo_search_result_item::is_releases_url_Valid() const{
    return m_releases_url_isValid;
}

double OAIRepo_search_result_item::getScore() const {
    return m_score;
}
void OAIRepo_search_result_item::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIRepo_search_result_item::is_score_Set() const{
    return m_score_isSet;
}

bool OAIRepo_search_result_item::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIRepo_search_result_item::getSize() const {
    return m_size;
}
void OAIRepo_search_result_item::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRepo_search_result_item::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRepo_search_result_item::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIRepo_search_result_item::getSshUrl() const {
    return m_ssh_url;
}
void OAIRepo_search_result_item::setSshUrl(const QString &ssh_url) {
    m_ssh_url = ssh_url;
    m_ssh_url_isSet = true;
}

bool OAIRepo_search_result_item::is_ssh_url_Set() const{
    return m_ssh_url_isSet;
}

bool OAIRepo_search_result_item::is_ssh_url_Valid() const{
    return m_ssh_url_isValid;
}

qint32 OAIRepo_search_result_item::getStargazersCount() const {
    return m_stargazers_count;
}
void OAIRepo_search_result_item::setStargazersCount(const qint32 &stargazers_count) {
    m_stargazers_count = stargazers_count;
    m_stargazers_count_isSet = true;
}

bool OAIRepo_search_result_item::is_stargazers_count_Set() const{
    return m_stargazers_count_isSet;
}

bool OAIRepo_search_result_item::is_stargazers_count_Valid() const{
    return m_stargazers_count_isValid;
}

QString OAIRepo_search_result_item::getStargazersUrl() const {
    return m_stargazers_url;
}
void OAIRepo_search_result_item::setStargazersUrl(const QString &stargazers_url) {
    m_stargazers_url = stargazers_url;
    m_stargazers_url_isSet = true;
}

bool OAIRepo_search_result_item::is_stargazers_url_Set() const{
    return m_stargazers_url_isSet;
}

bool OAIRepo_search_result_item::is_stargazers_url_Valid() const{
    return m_stargazers_url_isValid;
}

QString OAIRepo_search_result_item::getStatusesUrl() const {
    return m_statuses_url;
}
void OAIRepo_search_result_item::setStatusesUrl(const QString &statuses_url) {
    m_statuses_url = statuses_url;
    m_statuses_url_isSet = true;
}

bool OAIRepo_search_result_item::is_statuses_url_Set() const{
    return m_statuses_url_isSet;
}

bool OAIRepo_search_result_item::is_statuses_url_Valid() const{
    return m_statuses_url_isValid;
}

QString OAIRepo_search_result_item::getSubscribersUrl() const {
    return m_subscribers_url;
}
void OAIRepo_search_result_item::setSubscribersUrl(const QString &subscribers_url) {
    m_subscribers_url = subscribers_url;
    m_subscribers_url_isSet = true;
}

bool OAIRepo_search_result_item::is_subscribers_url_Set() const{
    return m_subscribers_url_isSet;
}

bool OAIRepo_search_result_item::is_subscribers_url_Valid() const{
    return m_subscribers_url_isValid;
}

QString OAIRepo_search_result_item::getSubscriptionUrl() const {
    return m_subscription_url;
}
void OAIRepo_search_result_item::setSubscriptionUrl(const QString &subscription_url) {
    m_subscription_url = subscription_url;
    m_subscription_url_isSet = true;
}

bool OAIRepo_search_result_item::is_subscription_url_Set() const{
    return m_subscription_url_isSet;
}

bool OAIRepo_search_result_item::is_subscription_url_Valid() const{
    return m_subscription_url_isValid;
}

QString OAIRepo_search_result_item::getSvnUrl() const {
    return m_svn_url;
}
void OAIRepo_search_result_item::setSvnUrl(const QString &svn_url) {
    m_svn_url = svn_url;
    m_svn_url_isSet = true;
}

bool OAIRepo_search_result_item::is_svn_url_Set() const{
    return m_svn_url_isSet;
}

bool OAIRepo_search_result_item::is_svn_url_Valid() const{
    return m_svn_url_isValid;
}

QString OAIRepo_search_result_item::getTagsUrl() const {
    return m_tags_url;
}
void OAIRepo_search_result_item::setTagsUrl(const QString &tags_url) {
    m_tags_url = tags_url;
    m_tags_url_isSet = true;
}

bool OAIRepo_search_result_item::is_tags_url_Set() const{
    return m_tags_url_isSet;
}

bool OAIRepo_search_result_item::is_tags_url_Valid() const{
    return m_tags_url_isValid;
}

QString OAIRepo_search_result_item::getTeamsUrl() const {
    return m_teams_url;
}
void OAIRepo_search_result_item::setTeamsUrl(const QString &teams_url) {
    m_teams_url = teams_url;
    m_teams_url_isSet = true;
}

bool OAIRepo_search_result_item::is_teams_url_Set() const{
    return m_teams_url_isSet;
}

bool OAIRepo_search_result_item::is_teams_url_Valid() const{
    return m_teams_url_isValid;
}

QString OAIRepo_search_result_item::getTempCloneToken() const {
    return m_temp_clone_token;
}
void OAIRepo_search_result_item::setTempCloneToken(const QString &temp_clone_token) {
    m_temp_clone_token = temp_clone_token;
    m_temp_clone_token_isSet = true;
}

bool OAIRepo_search_result_item::is_temp_clone_token_Set() const{
    return m_temp_clone_token_isSet;
}

bool OAIRepo_search_result_item::is_temp_clone_token_Valid() const{
    return m_temp_clone_token_isValid;
}

QList<OAISearch_result_text_matches_inner> OAIRepo_search_result_item::getTextMatches() const {
    return m_text_matches;
}
void OAIRepo_search_result_item::setTextMatches(const QList<OAISearch_result_text_matches_inner> &text_matches) {
    m_text_matches = text_matches;
    m_text_matches_isSet = true;
}

bool OAIRepo_search_result_item::is_text_matches_Set() const{
    return m_text_matches_isSet;
}

bool OAIRepo_search_result_item::is_text_matches_Valid() const{
    return m_text_matches_isValid;
}

QList<QString> OAIRepo_search_result_item::getTopics() const {
    return m_topics;
}
void OAIRepo_search_result_item::setTopics(const QList<QString> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIRepo_search_result_item::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIRepo_search_result_item::is_topics_Valid() const{
    return m_topics_isValid;
}

QString OAIRepo_search_result_item::getTreesUrl() const {
    return m_trees_url;
}
void OAIRepo_search_result_item::setTreesUrl(const QString &trees_url) {
    m_trees_url = trees_url;
    m_trees_url_isSet = true;
}

bool OAIRepo_search_result_item::is_trees_url_Set() const{
    return m_trees_url_isSet;
}

bool OAIRepo_search_result_item::is_trees_url_Valid() const{
    return m_trees_url_isValid;
}

QDateTime OAIRepo_search_result_item::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRepo_search_result_item::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRepo_search_result_item::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRepo_search_result_item::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIRepo_search_result_item::getUrl() const {
    return m_url;
}
void OAIRepo_search_result_item::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRepo_search_result_item::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRepo_search_result_item::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIRepo_search_result_item::getVisibility() const {
    return m_visibility;
}
void OAIRepo_search_result_item::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIRepo_search_result_item::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIRepo_search_result_item::is_visibility_Valid() const{
    return m_visibility_isValid;
}

qint32 OAIRepo_search_result_item::getWatchers() const {
    return m_watchers;
}
void OAIRepo_search_result_item::setWatchers(const qint32 &watchers) {
    m_watchers = watchers;
    m_watchers_isSet = true;
}

bool OAIRepo_search_result_item::is_watchers_Set() const{
    return m_watchers_isSet;
}

bool OAIRepo_search_result_item::is_watchers_Valid() const{
    return m_watchers_isValid;
}

qint32 OAIRepo_search_result_item::getWatchersCount() const {
    return m_watchers_count;
}
void OAIRepo_search_result_item::setWatchersCount(const qint32 &watchers_count) {
    m_watchers_count = watchers_count;
    m_watchers_count_isSet = true;
}

bool OAIRepo_search_result_item::is_watchers_count_Set() const{
    return m_watchers_count_isSet;
}

bool OAIRepo_search_result_item::is_watchers_count_Valid() const{
    return m_watchers_count_isValid;
}

bool OAIRepo_search_result_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_forking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_merge_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_squash_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blobs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_branch_on_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloads_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commits_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_refs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_tags_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_comment_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merges_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestones_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_issues_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulls_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pushed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_releases_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stargazers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stargazers_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribers_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svn_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_clone_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trees_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepo_search_result_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_archive_url_isValid && m_archived_isValid && m_assignees_url_isValid && m_blobs_url_isValid && m_branches_url_isValid && m_clone_url_isValid && m_collaborators_url_isValid && m_comments_url_isValid && m_commits_url_isValid && m_compare_url_isValid && m_contents_url_isValid && m_contributors_url_isValid && m_created_at_isValid && m_default_branch_isValid && m_deployments_url_isValid && m_description_isValid && m_disabled_isValid && m_downloads_url_isValid && m_events_url_isValid && m_fork_isValid && m_forks_isValid && m_forks_count_isValid && m_forks_url_isValid && m_full_name_isValid && m_git_commits_url_isValid && m_git_refs_url_isValid && m_git_tags_url_isValid && m_git_url_isValid && m_has_downloads_isValid && m_has_issues_isValid && m_has_pages_isValid && m_has_projects_isValid && m_has_wiki_isValid && m_homepage_isValid && m_hooks_url_isValid && m_html_url_isValid && m_id_isValid && m_issue_comment_url_isValid && m_issue_events_url_isValid && m_issues_url_isValid && m_keys_url_isValid && m_labels_url_isValid && m_language_isValid && m_languages_url_isValid && m_license_isValid && m_merges_url_isValid && m_milestones_url_isValid && m_mirror_url_isValid && m_name_isValid && m_node_id_isValid && m_notifications_url_isValid && m_open_issues_isValid && m_open_issues_count_isValid && m_owner_isValid && m_r_private_isValid && m_pulls_url_isValid && m_pushed_at_isValid && m_releases_url_isValid && m_score_isValid && m_size_isValid && m_ssh_url_isValid && m_stargazers_count_isValid && m_stargazers_url_isValid && m_statuses_url_isValid && m_subscribers_url_isValid && m_subscription_url_isValid && m_svn_url_isValid && m_tags_url_isValid && m_teams_url_isValid && m_trees_url_isValid && m_updated_at_isValid && m_url_isValid && m_watchers_isValid && m_watchers_count_isValid && true;
}

} // namespace OpenAPI
