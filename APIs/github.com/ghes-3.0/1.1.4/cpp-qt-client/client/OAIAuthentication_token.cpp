/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthentication_token.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthentication_token::OAIAuthentication_token(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthentication_token::OAIAuthentication_token() {
    this->initializeModel();
}

OAIAuthentication_token::~OAIAuthentication_token() {}

void OAIAuthentication_token::initializeModel() {

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_repository_selection_isSet = false;
    m_repository_selection_isValid = false;

    m_single_file_isSet = false;
    m_single_file_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIAuthentication_token::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthentication_token::fromJsonObject(QJsonObject json) {

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_repository_selection_isValid = ::OpenAPI::fromJsonValue(m_repository_selection, json[QString("repository_selection")]);
    m_repository_selection_isSet = !json[QString("repository_selection")].isNull() && m_repository_selection_isValid;

    m_single_file_isValid = ::OpenAPI::fromJsonValue(m_single_file, json[QString("single_file")]);
    m_single_file_isSet = !json[QString("single_file")].isNull() && m_single_file_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIAuthentication_token::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthentication_token::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_repository_selection_isSet) {
        obj.insert(QString("repository_selection"), ::OpenAPI::toJsonValue(m_repository_selection));
    }
    if (m_single_file_isSet) {
        obj.insert(QString("single_file"), ::OpenAPI::toJsonValue(m_single_file));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QDateTime OAIAuthentication_token::getExpiresAt() const {
    return m_expires_at;
}
void OAIAuthentication_token::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIAuthentication_token::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIAuthentication_token::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

OAIObject OAIAuthentication_token::getPermissions() const {
    return m_permissions;
}
void OAIAuthentication_token::setPermissions(const OAIObject &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAuthentication_token::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAuthentication_token::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList<OAIRepository> OAIAuthentication_token::getRepositories() const {
    return m_repositories;
}
void OAIAuthentication_token::setRepositories(const QList<OAIRepository> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIAuthentication_token::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIAuthentication_token::is_repositories_Valid() const{
    return m_repositories_isValid;
}

QString OAIAuthentication_token::getRepositorySelection() const {
    return m_repository_selection;
}
void OAIAuthentication_token::setRepositorySelection(const QString &repository_selection) {
    m_repository_selection = repository_selection;
    m_repository_selection_isSet = true;
}

bool OAIAuthentication_token::is_repository_selection_Set() const{
    return m_repository_selection_isSet;
}

bool OAIAuthentication_token::is_repository_selection_Valid() const{
    return m_repository_selection_isValid;
}

QString OAIAuthentication_token::getSingleFile() const {
    return m_single_file;
}
void OAIAuthentication_token::setSingleFile(const QString &single_file) {
    m_single_file = single_file;
    m_single_file_isSet = true;
}

bool OAIAuthentication_token::is_single_file_Set() const{
    return m_single_file_isSet;
}

bool OAIAuthentication_token::is_single_file_Valid() const{
    return m_single_file_isValid;
}

QString OAIAuthentication_token::getToken() const {
    return m_token;
}
void OAIAuthentication_token::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAuthentication_token::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAuthentication_token::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIAuthentication_token::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthentication_token::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expires_at_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
