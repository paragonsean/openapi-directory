/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopic_search_result_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopic_search_result_item::OAITopic_search_result_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopic_search_result_item::OAITopic_search_result_item() {
    this->initializeModel();
}

OAITopic_search_result_item::~OAITopic_search_result_item() {}

void OAITopic_search_result_item::initializeModel() {

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_curated_isSet = false;
    m_curated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_featured_isSet = false;
    m_featured_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_related_isSet = false;
    m_related_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_repository_count_isSet = false;
    m_repository_count_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_text_matches_isSet = false;
    m_text_matches_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITopic_search_result_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopic_search_result_item::fromJsonObject(QJsonObject json) {

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_curated_isValid = ::OpenAPI::fromJsonValue(m_curated, json[QString("curated")]);
    m_curated_isSet = !json[QString("curated")].isNull() && m_curated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_featured_isValid = ::OpenAPI::fromJsonValue(m_featured, json[QString("featured")]);
    m_featured_isSet = !json[QString("featured")].isNull() && m_featured_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_related_isValid = ::OpenAPI::fromJsonValue(m_related, json[QString("related")]);
    m_related_isSet = !json[QString("related")].isNull() && m_related_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_repository_count_isValid = ::OpenAPI::fromJsonValue(m_repository_count, json[QString("repository_count")]);
    m_repository_count_isSet = !json[QString("repository_count")].isNull() && m_repository_count_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("short_description")]);
    m_short_description_isSet = !json[QString("short_description")].isNull() && m_short_description_isValid;

    m_text_matches_isValid = ::OpenAPI::fromJsonValue(m_text_matches, json[QString("text_matches")]);
    m_text_matches_isSet = !json[QString("text_matches")].isNull() && m_text_matches_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITopic_search_result_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopic_search_result_item::asJsonObject() const {
    QJsonObject obj;
    if (m_aliases.size() > 0) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_curated_isSet) {
        obj.insert(QString("curated"), ::OpenAPI::toJsonValue(m_curated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_featured_isSet) {
        obj.insert(QString("featured"), ::OpenAPI::toJsonValue(m_featured));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_related.size() > 0) {
        obj.insert(QString("related"), ::OpenAPI::toJsonValue(m_related));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_repository_count_isSet) {
        obj.insert(QString("repository_count"), ::OpenAPI::toJsonValue(m_repository_count));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("short_description"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_text_matches.size() > 0) {
        obj.insert(QString("text_matches"), ::OpenAPI::toJsonValue(m_text_matches));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAITopic_search_result_item_aliases_inner> OAITopic_search_result_item::getAliases() const {
    return m_aliases;
}
void OAITopic_search_result_item::setAliases(const QList<OAITopic_search_result_item_aliases_inner> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAITopic_search_result_item::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAITopic_search_result_item::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QDateTime OAITopic_search_result_item::getCreatedAt() const {
    return m_created_at;
}
void OAITopic_search_result_item::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITopic_search_result_item::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITopic_search_result_item::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITopic_search_result_item::getCreatedBy() const {
    return m_created_by;
}
void OAITopic_search_result_item::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAITopic_search_result_item::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAITopic_search_result_item::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAITopic_search_result_item::isCurated() const {
    return m_curated;
}
void OAITopic_search_result_item::setCurated(const bool &curated) {
    m_curated = curated;
    m_curated_isSet = true;
}

bool OAITopic_search_result_item::is_curated_Set() const{
    return m_curated_isSet;
}

bool OAITopic_search_result_item::is_curated_Valid() const{
    return m_curated_isValid;
}

QString OAITopic_search_result_item::getDescription() const {
    return m_description;
}
void OAITopic_search_result_item::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITopic_search_result_item::is_description_Set() const{
    return m_description_isSet;
}

bool OAITopic_search_result_item::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITopic_search_result_item::getDisplayName() const {
    return m_display_name;
}
void OAITopic_search_result_item::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITopic_search_result_item::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITopic_search_result_item::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAITopic_search_result_item::isFeatured() const {
    return m_featured;
}
void OAITopic_search_result_item::setFeatured(const bool &featured) {
    m_featured = featured;
    m_featured_isSet = true;
}

bool OAITopic_search_result_item::is_featured_Set() const{
    return m_featured_isSet;
}

bool OAITopic_search_result_item::is_featured_Valid() const{
    return m_featured_isValid;
}

QString OAITopic_search_result_item::getLogoUrl() const {
    return m_logo_url;
}
void OAITopic_search_result_item::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAITopic_search_result_item::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAITopic_search_result_item::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAITopic_search_result_item::getName() const {
    return m_name;
}
void OAITopic_search_result_item::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITopic_search_result_item::is_name_Set() const{
    return m_name_isSet;
}

bool OAITopic_search_result_item::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITopic_search_result_item_aliases_inner> OAITopic_search_result_item::getRelated() const {
    return m_related;
}
void OAITopic_search_result_item::setRelated(const QList<OAITopic_search_result_item_aliases_inner> &related) {
    m_related = related;
    m_related_isSet = true;
}

bool OAITopic_search_result_item::is_related_Set() const{
    return m_related_isSet;
}

bool OAITopic_search_result_item::is_related_Valid() const{
    return m_related_isValid;
}

QString OAITopic_search_result_item::getReleased() const {
    return m_released;
}
void OAITopic_search_result_item::setReleased(const QString &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAITopic_search_result_item::is_released_Set() const{
    return m_released_isSet;
}

bool OAITopic_search_result_item::is_released_Valid() const{
    return m_released_isValid;
}

qint32 OAITopic_search_result_item::getRepositoryCount() const {
    return m_repository_count;
}
void OAITopic_search_result_item::setRepositoryCount(const qint32 &repository_count) {
    m_repository_count = repository_count;
    m_repository_count_isSet = true;
}

bool OAITopic_search_result_item::is_repository_count_Set() const{
    return m_repository_count_isSet;
}

bool OAITopic_search_result_item::is_repository_count_Valid() const{
    return m_repository_count_isValid;
}

double OAITopic_search_result_item::getScore() const {
    return m_score;
}
void OAITopic_search_result_item::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAITopic_search_result_item::is_score_Set() const{
    return m_score_isSet;
}

bool OAITopic_search_result_item::is_score_Valid() const{
    return m_score_isValid;
}

QString OAITopic_search_result_item::getShortDescription() const {
    return m_short_description;
}
void OAITopic_search_result_item::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAITopic_search_result_item::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAITopic_search_result_item::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QList<OAISearch_result_text_matches_inner> OAITopic_search_result_item::getTextMatches() const {
    return m_text_matches;
}
void OAITopic_search_result_item::setTextMatches(const QList<OAISearch_result_text_matches_inner> &text_matches) {
    m_text_matches = text_matches;
    m_text_matches_isSet = true;
}

bool OAITopic_search_result_item::is_text_matches_Set() const{
    return m_text_matches_isSet;
}

bool OAITopic_search_result_item::is_text_matches_Valid() const{
    return m_text_matches_isValid;
}

QDateTime OAITopic_search_result_item::getUpdatedAt() const {
    return m_updated_at;
}
void OAITopic_search_result_item::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITopic_search_result_item::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITopic_search_result_item::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITopic_search_result_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopic_search_result_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_created_by_isValid && m_curated_isValid && m_description_isValid && m_display_name_isValid && m_featured_isValid && m_name_isValid && m_released_isValid && m_score_isValid && m_short_description_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
