/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtected_branch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtected_branch::OAIProtected_branch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtected_branch::OAIProtected_branch() {
    this->initializeModel();
}

OAIProtected_branch::~OAIProtected_branch() {}

void OAIProtected_branch::initializeModel() {

    m_allow_deletions_isSet = false;
    m_allow_deletions_isValid = false;

    m_allow_force_pushes_isSet = false;
    m_allow_force_pushes_isValid = false;

    m_enforce_admins_isSet = false;
    m_enforce_admins_isValid = false;

    m_required_conversation_resolution_isSet = false;
    m_required_conversation_resolution_isValid = false;

    m_required_linear_history_isSet = false;
    m_required_linear_history_isValid = false;

    m_required_pull_request_reviews_isSet = false;
    m_required_pull_request_reviews_isValid = false;

    m_required_signatures_isSet = false;
    m_required_signatures_isValid = false;

    m_required_status_checks_isSet = false;
    m_required_status_checks_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProtected_branch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtected_branch::fromJsonObject(QJsonObject json) {

    m_allow_deletions_isValid = ::OpenAPI::fromJsonValue(m_allow_deletions, json[QString("allow_deletions")]);
    m_allow_deletions_isSet = !json[QString("allow_deletions")].isNull() && m_allow_deletions_isValid;

    m_allow_force_pushes_isValid = ::OpenAPI::fromJsonValue(m_allow_force_pushes, json[QString("allow_force_pushes")]);
    m_allow_force_pushes_isSet = !json[QString("allow_force_pushes")].isNull() && m_allow_force_pushes_isValid;

    m_enforce_admins_isValid = ::OpenAPI::fromJsonValue(m_enforce_admins, json[QString("enforce_admins")]);
    m_enforce_admins_isSet = !json[QString("enforce_admins")].isNull() && m_enforce_admins_isValid;

    m_required_conversation_resolution_isValid = ::OpenAPI::fromJsonValue(m_required_conversation_resolution, json[QString("required_conversation_resolution")]);
    m_required_conversation_resolution_isSet = !json[QString("required_conversation_resolution")].isNull() && m_required_conversation_resolution_isValid;

    m_required_linear_history_isValid = ::OpenAPI::fromJsonValue(m_required_linear_history, json[QString("required_linear_history")]);
    m_required_linear_history_isSet = !json[QString("required_linear_history")].isNull() && m_required_linear_history_isValid;

    m_required_pull_request_reviews_isValid = ::OpenAPI::fromJsonValue(m_required_pull_request_reviews, json[QString("required_pull_request_reviews")]);
    m_required_pull_request_reviews_isSet = !json[QString("required_pull_request_reviews")].isNull() && m_required_pull_request_reviews_isValid;

    m_required_signatures_isValid = ::OpenAPI::fromJsonValue(m_required_signatures, json[QString("required_signatures")]);
    m_required_signatures_isSet = !json[QString("required_signatures")].isNull() && m_required_signatures_isValid;

    m_required_status_checks_isValid = ::OpenAPI::fromJsonValue(m_required_status_checks, json[QString("required_status_checks")]);
    m_required_status_checks_isSet = !json[QString("required_status_checks")].isNull() && m_required_status_checks_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProtected_branch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtected_branch::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_deletions.isSet()) {
        obj.insert(QString("allow_deletions"), ::OpenAPI::toJsonValue(m_allow_deletions));
    }
    if (m_allow_force_pushes.isSet()) {
        obj.insert(QString("allow_force_pushes"), ::OpenAPI::toJsonValue(m_allow_force_pushes));
    }
    if (m_enforce_admins.isSet()) {
        obj.insert(QString("enforce_admins"), ::OpenAPI::toJsonValue(m_enforce_admins));
    }
    if (m_required_conversation_resolution.isSet()) {
        obj.insert(QString("required_conversation_resolution"), ::OpenAPI::toJsonValue(m_required_conversation_resolution));
    }
    if (m_required_linear_history.isSet()) {
        obj.insert(QString("required_linear_history"), ::OpenAPI::toJsonValue(m_required_linear_history));
    }
    if (m_required_pull_request_reviews.isSet()) {
        obj.insert(QString("required_pull_request_reviews"), ::OpenAPI::toJsonValue(m_required_pull_request_reviews));
    }
    if (m_required_signatures.isSet()) {
        obj.insert(QString("required_signatures"), ::OpenAPI::toJsonValue(m_required_signatures));
    }
    if (m_required_status_checks.isSet()) {
        obj.insert(QString("required_status_checks"), ::OpenAPI::toJsonValue(m_required_status_checks));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIProtected_branch_allow_deletions OAIProtected_branch::getAllowDeletions() const {
    return m_allow_deletions;
}
void OAIProtected_branch::setAllowDeletions(const OAIProtected_branch_allow_deletions &allow_deletions) {
    m_allow_deletions = allow_deletions;
    m_allow_deletions_isSet = true;
}

bool OAIProtected_branch::is_allow_deletions_Set() const{
    return m_allow_deletions_isSet;
}

bool OAIProtected_branch::is_allow_deletions_Valid() const{
    return m_allow_deletions_isValid;
}

OAIProtected_branch_allow_deletions OAIProtected_branch::getAllowForcePushes() const {
    return m_allow_force_pushes;
}
void OAIProtected_branch::setAllowForcePushes(const OAIProtected_branch_allow_deletions &allow_force_pushes) {
    m_allow_force_pushes = allow_force_pushes;
    m_allow_force_pushes_isSet = true;
}

bool OAIProtected_branch::is_allow_force_pushes_Set() const{
    return m_allow_force_pushes_isSet;
}

bool OAIProtected_branch::is_allow_force_pushes_Valid() const{
    return m_allow_force_pushes_isValid;
}

OAIProtected_branch_enforce_admins OAIProtected_branch::getEnforceAdmins() const {
    return m_enforce_admins;
}
void OAIProtected_branch::setEnforceAdmins(const OAIProtected_branch_enforce_admins &enforce_admins) {
    m_enforce_admins = enforce_admins;
    m_enforce_admins_isSet = true;
}

bool OAIProtected_branch::is_enforce_admins_Set() const{
    return m_enforce_admins_isSet;
}

bool OAIProtected_branch::is_enforce_admins_Valid() const{
    return m_enforce_admins_isValid;
}

OAIProtected_branch_required_conversation_resolution OAIProtected_branch::getRequiredConversationResolution() const {
    return m_required_conversation_resolution;
}
void OAIProtected_branch::setRequiredConversationResolution(const OAIProtected_branch_required_conversation_resolution &required_conversation_resolution) {
    m_required_conversation_resolution = required_conversation_resolution;
    m_required_conversation_resolution_isSet = true;
}

bool OAIProtected_branch::is_required_conversation_resolution_Set() const{
    return m_required_conversation_resolution_isSet;
}

bool OAIProtected_branch::is_required_conversation_resolution_Valid() const{
    return m_required_conversation_resolution_isValid;
}

OAIProtected_branch_allow_deletions OAIProtected_branch::getRequiredLinearHistory() const {
    return m_required_linear_history;
}
void OAIProtected_branch::setRequiredLinearHistory(const OAIProtected_branch_allow_deletions &required_linear_history) {
    m_required_linear_history = required_linear_history;
    m_required_linear_history_isSet = true;
}

bool OAIProtected_branch::is_required_linear_history_Set() const{
    return m_required_linear_history_isSet;
}

bool OAIProtected_branch::is_required_linear_history_Valid() const{
    return m_required_linear_history_isValid;
}

OAIProtected_branch_required_pull_request_reviews OAIProtected_branch::getRequiredPullRequestReviews() const {
    return m_required_pull_request_reviews;
}
void OAIProtected_branch::setRequiredPullRequestReviews(const OAIProtected_branch_required_pull_request_reviews &required_pull_request_reviews) {
    m_required_pull_request_reviews = required_pull_request_reviews;
    m_required_pull_request_reviews_isSet = true;
}

bool OAIProtected_branch::is_required_pull_request_reviews_Set() const{
    return m_required_pull_request_reviews_isSet;
}

bool OAIProtected_branch::is_required_pull_request_reviews_Valid() const{
    return m_required_pull_request_reviews_isValid;
}

OAIBranch_protection_required_signatures OAIProtected_branch::getRequiredSignatures() const {
    return m_required_signatures;
}
void OAIProtected_branch::setRequiredSignatures(const OAIBranch_protection_required_signatures &required_signatures) {
    m_required_signatures = required_signatures;
    m_required_signatures_isSet = true;
}

bool OAIProtected_branch::is_required_signatures_Set() const{
    return m_required_signatures_isSet;
}

bool OAIProtected_branch::is_required_signatures_Valid() const{
    return m_required_signatures_isValid;
}

OAIStatus_check_policy OAIProtected_branch::getRequiredStatusChecks() const {
    return m_required_status_checks;
}
void OAIProtected_branch::setRequiredStatusChecks(const OAIStatus_check_policy &required_status_checks) {
    m_required_status_checks = required_status_checks;
    m_required_status_checks_isSet = true;
}

bool OAIProtected_branch::is_required_status_checks_Set() const{
    return m_required_status_checks_isSet;
}

bool OAIProtected_branch::is_required_status_checks_Valid() const{
    return m_required_status_checks_isValid;
}

OAIBranch_restriction_policy OAIProtected_branch::getRestrictions() const {
    return m_restrictions;
}
void OAIProtected_branch::setRestrictions(const OAIBranch_restriction_policy &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIProtected_branch::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIProtected_branch::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAIProtected_branch::getUrl() const {
    return m_url;
}
void OAIProtected_branch::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProtected_branch::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProtected_branch::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProtected_branch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_deletions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_force_pushes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_admins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_conversation_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_linear_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_pull_request_reviews.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_signatures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_status_checks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtected_branch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
