/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActionsApi_H
#define OAI_OAIActionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActions_create_or_update_org_secret_request.h"
#include "OAIActions_create_or_update_repo_secret_request.h"
#include "OAIActions_create_self_hosted_runner_group_for_org_request.h"
#include "OAIActions_create_workflow_dispatch_request.h"
#include "OAIActions_get_workflow_workflow_id_parameter.h"
#include "OAIActions_list_artifacts_for_repo_200_response.h"
#include "OAIActions_list_jobs_for_workflow_run_200_response.h"
#include "OAIActions_list_org_secrets_200_response.h"
#include "OAIActions_list_repo_access_to_self_hosted_runner_group_in_org_200_response.h"
#include "OAIActions_list_repo_secrets_200_response.h"
#include "OAIActions_list_repo_workflows_200_response.h"
#include "OAIActions_list_selected_repos_for_org_secret_200_response.h"
#include "OAIActions_list_selected_repositories_enabled_github_actions_organization_200_response.h"
#include "OAIActions_list_self_hosted_runner_groups_for_org_200_response.h"
#include "OAIActions_list_self_hosted_runners_for_org_200_response.h"
#include "OAIActions_list_workflow_runs_for_repo_200_response.h"
#include "OAIActions_organization_permissions.h"
#include "OAIActions_public_key.h"
#include "OAIActions_repository_permissions.h"
#include "OAIActions_secret.h"
#include "OAIActions_set_github_actions_permissions_organization_request.h"
#include "OAIActions_set_github_actions_permissions_repository_request.h"
#include "OAIActions_set_repo_access_to_self_hosted_runner_group_in_org_request.h"
#include "OAIActions_set_selected_repos_for_org_secret_request.h"
#include "OAIActions_set_selected_repositories_enabled_github_actions_organization_request.h"
#include "OAIActions_update_self_hosted_runner_group_for_org_request.h"
#include "OAIArtifact.h"
#include "OAIAuthentication_token.h"
#include "OAIBasic_error.h"
#include "OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response.h"
#include "OAIEnterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request.h"
#include "OAIJob.h"
#include "OAIObject.h"
#include "OAIOrganization_actions_secret.h"
#include "OAIRunner.h"
#include "OAIRunner_application.h"
#include "OAIRunner_groups_org.h"
#include "OAISelected_actions.h"
#include "OAIWorkflow.h"
#include "OAIWorkflow_run.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActionsApi : public QObject {
    Q_OBJECT

public:
    OAIActionsApi(const int timeOut = 0);
    ~OAIActionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void actions_addRepoAccessToSelfHostedRunnerGroupInOrg(const QString &org, const qint32 &runner_group_id, const qint32 &repository_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void actions_addSelectedRepoToOrgSecret(const QString &org, const QString &secret_name, const qint32 &repository_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void actions_addSelfHostedRunnerToGroupForOrg(const QString &org, const qint32 &runner_group_id, const qint32 &runner_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    */
    virtual void actions_cancelWorkflowRun(const QString &owner, const QString &repo, const qint32 &run_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  oai_actions_create_or_update_org_secret_request OAIActions_create_or_update_org_secret_request [required]
    */
    virtual void actions_createOrUpdateOrgSecret(const QString &org, const QString &secret_name, const OAIActions_create_or_update_org_secret_request &oai_actions_create_or_update_org_secret_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  oai_actions_create_or_update_repo_secret_request OAIActions_create_or_update_repo_secret_request [required]
    */
    virtual void actions_createOrUpdateRepoSecret(const QString &owner, const QString &repo, const QString &secret_name, const OAIActions_create_or_update_repo_secret_request &oai_actions_create_or_update_repo_secret_request);

    /**
    * @param[in]  org QString [required]
    */
    virtual void actions_createRegistrationTokenForOrg(const QString &org);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void actions_createRegistrationTokenForRepo(const QString &owner, const QString &repo);

    /**
    * @param[in]  org QString [required]
    */
    virtual void actions_createRemoveTokenForOrg(const QString &org);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void actions_createRemoveTokenForRepo(const QString &owner, const QString &repo);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_actions_create_self_hosted_runner_group_for_org_request OAIActions_create_self_hosted_runner_group_for_org_request [required]
    */
    virtual void actions_createSelfHostedRunnerGroupForOrg(const QString &org, const OAIActions_create_self_hosted_runner_group_for_org_request &oai_actions_create_self_hosted_runner_group_for_org_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  workflow_id OAIActions_get_workflow_workflow_id_parameter [required]
    * @param[in]  oai_actions_create_workflow_dispatch_request OAIActions_create_workflow_dispatch_request [required]
    */
    virtual void actions_createWorkflowDispatch(const QString &owner, const QString &repo, const OAIActions_get_workflow_workflow_id_parameter &workflow_id, const OAIActions_create_workflow_dispatch_request &oai_actions_create_workflow_dispatch_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  artifact_id qint32 [required]
    */
    virtual void actions_deleteArtifact(const QString &owner, const QString &repo, const qint32 &artifact_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void actions_deleteOrgSecret(const QString &org, const QString &secret_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void actions_deleteRepoSecret(const QString &owner, const QString &repo, const QString &secret_name);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void actions_deleteSelfHostedRunnerFromOrg(const QString &org, const qint32 &runner_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void actions_deleteSelfHostedRunnerFromRepo(const QString &owner, const QString &repo, const qint32 &runner_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    */
    virtual void actions_deleteSelfHostedRunnerGroupFromOrg(const QString &org, const qint32 &runner_group_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    */
    virtual void actions_deleteWorkflowRun(const QString &owner, const QString &repo, const qint32 &run_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    */
    virtual void actions_deleteWorkflowRunLogs(const QString &owner, const QString &repo, const qint32 &run_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void actions_disableSelectedRepositoryGithubActionsOrganization(const QString &org, const qint32 &repository_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  workflow_id OAIActions_get_workflow_workflow_id_parameter [required]
    */
    virtual void actions_disableWorkflow(const QString &owner, const QString &repo, const OAIActions_get_workflow_workflow_id_parameter &workflow_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  artifact_id qint32 [required]
    * @param[in]  archive_format QString [required]
    */
    virtual void actions_downloadArtifact(const QString &owner, const QString &repo, const qint32 &artifact_id, const QString &archive_format);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  job_id qint32 [required]
    */
    virtual void actions_downloadJobLogsForWorkflowRun(const QString &owner, const QString &repo, const qint32 &job_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    */
    virtual void actions_downloadWorkflowRunLogs(const QString &owner, const QString &repo, const qint32 &run_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void actions_enableSelectedRepositoryGithubActionsOrganization(const QString &org, const qint32 &repository_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  workflow_id OAIActions_get_workflow_workflow_id_parameter [required]
    */
    virtual void actions_enableWorkflow(const QString &owner, const QString &repo, const OAIActions_get_workflow_workflow_id_parameter &workflow_id);

    /**
    * @param[in]  org QString [required]
    */
    virtual void actions_getAllowedActionsOrganization(const QString &org);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void actions_getAllowedActionsRepository(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  artifact_id qint32 [required]
    */
    virtual void actions_getArtifact(const QString &owner, const QString &repo, const qint32 &artifact_id);

    /**
    * @param[in]  org QString [required]
    */
    virtual void actions_getGithubActionsPermissionsOrganization(const QString &org);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void actions_getGithubActionsPermissionsRepository(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  job_id qint32 [required]
    */
    virtual void actions_getJobForWorkflowRun(const QString &owner, const QString &repo, const qint32 &job_id);

    /**
    * @param[in]  org QString [required]
    */
    virtual void actions_getOrgPublicKey(const QString &org);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void actions_getOrgSecret(const QString &org, const QString &secret_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void actions_getRepoPublicKey(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void actions_getRepoSecret(const QString &owner, const QString &repo, const QString &secret_name);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void actions_getSelfHostedRunnerForOrg(const QString &org, const qint32 &runner_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void actions_getSelfHostedRunnerForRepo(const QString &owner, const QString &repo, const qint32 &runner_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    */
    virtual void actions_getSelfHostedRunnerGroupForOrg(const QString &org, const qint32 &runner_group_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  workflow_id OAIActions_get_workflow_workflow_id_parameter [required]
    */
    virtual void actions_getWorkflow(const QString &owner, const QString &repo, const OAIActions_get_workflow_workflow_id_parameter &workflow_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    * @param[in]  exclude_pull_requests bool [optional]
    */
    virtual void actions_getWorkflowRun(const QString &owner, const QString &repo, const qint32 &run_id, const ::OpenAPI::OptionalParam<bool> &exclude_pull_requests = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listArtifactsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    * @param[in]  filter QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listJobsForWorkflowRun(const QString &owner, const QString &repo, const qint32 &run_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listOrgSecrets(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void actions_listRepoAccessToSelfHostedRunnerGroupInOrg(const QString &org, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listRepoSecrets(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listRepoWorkflows(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    */
    virtual void actions_listRunnerApplicationsForOrg(const QString &org);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void actions_listRunnerApplicationsForRepo(const QString &owner, const QString &repo);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void actions_listSelectedReposForOrgSecret(const QString &org, const QString &secret_name, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listSelectedRepositoriesEnabledGithubActionsOrganization(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listSelfHostedRunnerGroupsForOrg(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listSelfHostedRunnersForOrg(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listSelfHostedRunnersForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listSelfHostedRunnersInGroupForOrg(const QString &org, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void actions_listWorkflowRunArtifacts(const QString &owner, const QString &repo, const qint32 &run_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  workflow_id OAIActions_get_workflow_workflow_id_parameter [required]
    * @param[in]  actor QString [optional]
    * @param[in]  branch QString [optional]
    * @param[in]  event QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  created QDateTime [optional]
    * @param[in]  exclude_pull_requests bool [optional]
    */
    virtual void actions_listWorkflowRuns(const QString &owner, const QString &repo, const OAIActions_get_workflow_workflow_id_parameter &workflow_id, const ::OpenAPI::OptionalParam<QString> &actor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &exclude_pull_requests = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  actor QString [optional]
    * @param[in]  branch QString [optional]
    * @param[in]  event QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  created QDateTime [optional]
    * @param[in]  exclude_pull_requests bool [optional]
    */
    virtual void actions_listWorkflowRunsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &actor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &created = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &exclude_pull_requests = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  run_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void actions_reRunWorkflow(const QString &owner, const QString &repo, const qint32 &run_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void actions_removeRepoAccessToSelfHostedRunnerGroupInOrg(const QString &org, const qint32 &runner_group_id, const qint32 &repository_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void actions_removeSelectedRepoFromOrgSecret(const QString &org, const QString &secret_name, const qint32 &repository_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  runner_id qint32 [required]
    */
    virtual void actions_removeSelfHostedRunnerFromGroupForOrg(const QString &org, const qint32 &runner_group_id, const qint32 &runner_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_selected_actions OAISelected_actions [optional]
    */
    virtual void actions_setAllowedActionsOrganization(const QString &org, const ::OpenAPI::OptionalParam<OAISelected_actions> &oai_selected_actions = ::OpenAPI::OptionalParam<OAISelected_actions>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_selected_actions OAISelected_actions [optional]
    */
    virtual void actions_setAllowedActionsRepository(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAISelected_actions> &oai_selected_actions = ::OpenAPI::OptionalParam<OAISelected_actions>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_actions_set_github_actions_permissions_organization_request OAIActions_set_github_actions_permissions_organization_request [required]
    */
    virtual void actions_setGithubActionsPermissionsOrganization(const QString &org, const OAIActions_set_github_actions_permissions_organization_request &oai_actions_set_github_actions_permissions_organization_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_actions_set_github_actions_permissions_repository_request OAIActions_set_github_actions_permissions_repository_request [required]
    */
    virtual void actions_setGithubActionsPermissionsRepository(const QString &owner, const QString &repo, const OAIActions_set_github_actions_permissions_repository_request &oai_actions_set_github_actions_permissions_repository_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  oai_actions_set_repo_access_to_self_hosted_runner_group_in_org_request OAIActions_set_repo_access_to_self_hosted_runner_group_in_org_request [required]
    */
    virtual void actions_setRepoAccessToSelfHostedRunnerGroupInOrg(const QString &org, const qint32 &runner_group_id, const OAIActions_set_repo_access_to_self_hosted_runner_group_in_org_request &oai_actions_set_repo_access_to_self_hosted_runner_group_in_org_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  oai_actions_set_selected_repos_for_org_secret_request OAIActions_set_selected_repos_for_org_secret_request [required]
    */
    virtual void actions_setSelectedReposForOrgSecret(const QString &org, const QString &secret_name, const OAIActions_set_selected_repos_for_org_secret_request &oai_actions_set_selected_repos_for_org_secret_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_actions_set_selected_repositories_enabled_github_actions_organization_request OAIActions_set_selected_repositories_enabled_github_actions_organization_request [required]
    */
    virtual void actions_setSelectedRepositoriesEnabledGithubActionsOrganization(const QString &org, const OAIActions_set_selected_repositories_enabled_github_actions_organization_request &oai_actions_set_selected_repositories_enabled_github_actions_organization_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  oai_enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request OAIEnterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request [required]
    */
    virtual void actions_setSelfHostedRunnersInGroupForOrg(const QString &org, const qint32 &runner_group_id, const OAIEnterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request &oai_enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  runner_group_id qint32 [required]
    * @param[in]  oai_actions_update_self_hosted_runner_group_for_org_request OAIActions_update_self_hosted_runner_group_for_org_request [required]
    */
    virtual void actions_updateSelfHostedRunnerGroupForOrg(const QString &org, const qint32 &runner_group_id, const OAIActions_update_self_hosted_runner_group_for_org_request &oai_actions_update_self_hosted_runner_group_for_org_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void actions_addRepoAccessToSelfHostedRunnerGroupInOrgCallback(OAIHttpRequestWorker *worker);
    void actions_addSelectedRepoToOrgSecretCallback(OAIHttpRequestWorker *worker);
    void actions_addSelfHostedRunnerToGroupForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_cancelWorkflowRunCallback(OAIHttpRequestWorker *worker);
    void actions_createOrUpdateOrgSecretCallback(OAIHttpRequestWorker *worker);
    void actions_createOrUpdateRepoSecretCallback(OAIHttpRequestWorker *worker);
    void actions_createRegistrationTokenForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_createRegistrationTokenForRepoCallback(OAIHttpRequestWorker *worker);
    void actions_createRemoveTokenForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_createRemoveTokenForRepoCallback(OAIHttpRequestWorker *worker);
    void actions_createSelfHostedRunnerGroupForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_createWorkflowDispatchCallback(OAIHttpRequestWorker *worker);
    void actions_deleteArtifactCallback(OAIHttpRequestWorker *worker);
    void actions_deleteOrgSecretCallback(OAIHttpRequestWorker *worker);
    void actions_deleteRepoSecretCallback(OAIHttpRequestWorker *worker);
    void actions_deleteSelfHostedRunnerFromOrgCallback(OAIHttpRequestWorker *worker);
    void actions_deleteSelfHostedRunnerFromRepoCallback(OAIHttpRequestWorker *worker);
    void actions_deleteSelfHostedRunnerGroupFromOrgCallback(OAIHttpRequestWorker *worker);
    void actions_deleteWorkflowRunCallback(OAIHttpRequestWorker *worker);
    void actions_deleteWorkflowRunLogsCallback(OAIHttpRequestWorker *worker);
    void actions_disableSelectedRepositoryGithubActionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_disableWorkflowCallback(OAIHttpRequestWorker *worker);
    void actions_downloadArtifactCallback(OAIHttpRequestWorker *worker);
    void actions_downloadJobLogsForWorkflowRunCallback(OAIHttpRequestWorker *worker);
    void actions_downloadWorkflowRunLogsCallback(OAIHttpRequestWorker *worker);
    void actions_enableSelectedRepositoryGithubActionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_enableWorkflowCallback(OAIHttpRequestWorker *worker);
    void actions_getAllowedActionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_getAllowedActionsRepositoryCallback(OAIHttpRequestWorker *worker);
    void actions_getArtifactCallback(OAIHttpRequestWorker *worker);
    void actions_getGithubActionsPermissionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_getGithubActionsPermissionsRepositoryCallback(OAIHttpRequestWorker *worker);
    void actions_getJobForWorkflowRunCallback(OAIHttpRequestWorker *worker);
    void actions_getOrgPublicKeyCallback(OAIHttpRequestWorker *worker);
    void actions_getOrgSecretCallback(OAIHttpRequestWorker *worker);
    void actions_getRepoPublicKeyCallback(OAIHttpRequestWorker *worker);
    void actions_getRepoSecretCallback(OAIHttpRequestWorker *worker);
    void actions_getSelfHostedRunnerForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_getSelfHostedRunnerForRepoCallback(OAIHttpRequestWorker *worker);
    void actions_getSelfHostedRunnerGroupForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_getWorkflowCallback(OAIHttpRequestWorker *worker);
    void actions_getWorkflowRunCallback(OAIHttpRequestWorker *worker);
    void actions_listArtifactsForRepoCallback(OAIHttpRequestWorker *worker);
    void actions_listJobsForWorkflowRunCallback(OAIHttpRequestWorker *worker);
    void actions_listOrgSecretsCallback(OAIHttpRequestWorker *worker);
    void actions_listRepoAccessToSelfHostedRunnerGroupInOrgCallback(OAIHttpRequestWorker *worker);
    void actions_listRepoSecretsCallback(OAIHttpRequestWorker *worker);
    void actions_listRepoWorkflowsCallback(OAIHttpRequestWorker *worker);
    void actions_listRunnerApplicationsForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_listRunnerApplicationsForRepoCallback(OAIHttpRequestWorker *worker);
    void actions_listSelectedReposForOrgSecretCallback(OAIHttpRequestWorker *worker);
    void actions_listSelectedRepositoriesEnabledGithubActionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_listSelfHostedRunnerGroupsForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_listSelfHostedRunnersForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_listSelfHostedRunnersForRepoCallback(OAIHttpRequestWorker *worker);
    void actions_listSelfHostedRunnersInGroupForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_listWorkflowRunArtifactsCallback(OAIHttpRequestWorker *worker);
    void actions_listWorkflowRunsCallback(OAIHttpRequestWorker *worker);
    void actions_listWorkflowRunsForRepoCallback(OAIHttpRequestWorker *worker);
    void actions_reRunWorkflowCallback(OAIHttpRequestWorker *worker);
    void actions_removeRepoAccessToSelfHostedRunnerGroupInOrgCallback(OAIHttpRequestWorker *worker);
    void actions_removeSelectedRepoFromOrgSecretCallback(OAIHttpRequestWorker *worker);
    void actions_removeSelfHostedRunnerFromGroupForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_setAllowedActionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_setAllowedActionsRepositoryCallback(OAIHttpRequestWorker *worker);
    void actions_setGithubActionsPermissionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_setGithubActionsPermissionsRepositoryCallback(OAIHttpRequestWorker *worker);
    void actions_setRepoAccessToSelfHostedRunnerGroupInOrgCallback(OAIHttpRequestWorker *worker);
    void actions_setSelectedReposForOrgSecretCallback(OAIHttpRequestWorker *worker);
    void actions_setSelectedRepositoriesEnabledGithubActionsOrganizationCallback(OAIHttpRequestWorker *worker);
    void actions_setSelfHostedRunnersInGroupForOrgCallback(OAIHttpRequestWorker *worker);
    void actions_updateSelfHostedRunnerGroupForOrgCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignal();
    void actions_addSelectedRepoToOrgSecretSignal();
    void actions_addSelfHostedRunnerToGroupForOrgSignal();
    void actions_cancelWorkflowRunSignal(OAIObject summary);
    void actions_createOrUpdateOrgSecretSignal(OAIObject summary);
    void actions_createOrUpdateRepoSecretSignal(OAIObject summary);
    void actions_createRegistrationTokenForOrgSignal(OAIAuthentication_token summary);
    void actions_createRegistrationTokenForRepoSignal(OAIAuthentication_token summary);
    void actions_createRemoveTokenForOrgSignal(OAIAuthentication_token summary);
    void actions_createRemoveTokenForRepoSignal(OAIAuthentication_token summary);
    void actions_createSelfHostedRunnerGroupForOrgSignal(OAIRunner_groups_org summary);
    void actions_createWorkflowDispatchSignal();
    void actions_deleteArtifactSignal();
    void actions_deleteOrgSecretSignal();
    void actions_deleteRepoSecretSignal();
    void actions_deleteSelfHostedRunnerFromOrgSignal();
    void actions_deleteSelfHostedRunnerFromRepoSignal();
    void actions_deleteSelfHostedRunnerGroupFromOrgSignal();
    void actions_deleteWorkflowRunSignal();
    void actions_deleteWorkflowRunLogsSignal();
    void actions_disableSelectedRepositoryGithubActionsOrganizationSignal();
    void actions_disableWorkflowSignal();
    void actions_downloadArtifactSignal();
    void actions_downloadJobLogsForWorkflowRunSignal();
    void actions_downloadWorkflowRunLogsSignal();
    void actions_enableSelectedRepositoryGithubActionsOrganizationSignal();
    void actions_enableWorkflowSignal();
    void actions_getAllowedActionsOrganizationSignal(OAISelected_actions summary);
    void actions_getAllowedActionsRepositorySignal(OAISelected_actions summary);
    void actions_getArtifactSignal(OAIArtifact summary);
    void actions_getGithubActionsPermissionsOrganizationSignal(OAIActions_organization_permissions summary);
    void actions_getGithubActionsPermissionsRepositorySignal(OAIActions_repository_permissions summary);
    void actions_getJobForWorkflowRunSignal(OAIJob summary);
    void actions_getOrgPublicKeySignal(OAIActions_public_key summary);
    void actions_getOrgSecretSignal(OAIOrganization_actions_secret summary);
    void actions_getRepoPublicKeySignal(OAIActions_public_key summary);
    void actions_getRepoSecretSignal(OAIActions_secret summary);
    void actions_getSelfHostedRunnerForOrgSignal(OAIRunner summary);
    void actions_getSelfHostedRunnerForRepoSignal(OAIRunner summary);
    void actions_getSelfHostedRunnerGroupForOrgSignal(OAIRunner_groups_org summary);
    void actions_getWorkflowSignal(OAIWorkflow summary);
    void actions_getWorkflowRunSignal(OAIWorkflow_run summary);
    void actions_listArtifactsForRepoSignal(OAIActions_list_artifacts_for_repo_200_response summary);
    void actions_listJobsForWorkflowRunSignal(OAIActions_list_jobs_for_workflow_run_200_response summary);
    void actions_listOrgSecretsSignal(OAIActions_list_org_secrets_200_response summary);
    void actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignal(OAIActions_list_repo_access_to_self_hosted_runner_group_in_org_200_response summary);
    void actions_listRepoSecretsSignal(OAIActions_list_repo_secrets_200_response summary);
    void actions_listRepoWorkflowsSignal(OAIActions_list_repo_workflows_200_response summary);
    void actions_listRunnerApplicationsForOrgSignal(QList<OAIRunner_application> summary);
    void actions_listRunnerApplicationsForRepoSignal(QList<OAIRunner_application> summary);
    void actions_listSelectedReposForOrgSecretSignal(OAIActions_list_selected_repos_for_org_secret_200_response summary);
    void actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignal(OAIActions_list_selected_repositories_enabled_github_actions_organization_200_response summary);
    void actions_listSelfHostedRunnerGroupsForOrgSignal(OAIActions_list_self_hosted_runner_groups_for_org_200_response summary);
    void actions_listSelfHostedRunnersForOrgSignal(OAIActions_list_self_hosted_runners_for_org_200_response summary);
    void actions_listSelfHostedRunnersForRepoSignal(OAIActions_list_self_hosted_runners_for_org_200_response summary);
    void actions_listSelfHostedRunnersInGroupForOrgSignal(OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary);
    void actions_listWorkflowRunArtifactsSignal(OAIActions_list_artifacts_for_repo_200_response summary);
    void actions_listWorkflowRunsSignal(OAIActions_list_workflow_runs_for_repo_200_response summary);
    void actions_listWorkflowRunsForRepoSignal(OAIActions_list_workflow_runs_for_repo_200_response summary);
    void actions_reRunWorkflowSignal(OAIObject summary);
    void actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignal();
    void actions_removeSelectedRepoFromOrgSecretSignal();
    void actions_removeSelfHostedRunnerFromGroupForOrgSignal();
    void actions_setAllowedActionsOrganizationSignal();
    void actions_setAllowedActionsRepositorySignal();
    void actions_setGithubActionsPermissionsOrganizationSignal();
    void actions_setGithubActionsPermissionsRepositorySignal();
    void actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignal();
    void actions_setSelectedReposForOrgSecretSignal();
    void actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignal();
    void actions_setSelfHostedRunnersInGroupForOrgSignal();
    void actions_updateSelfHostedRunnerGroupForOrgSignal(OAIRunner_groups_org summary);


    void actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_addSelectedRepoToOrgSecretSignalFull(OAIHttpRequestWorker *worker);
    void actions_addSelfHostedRunnerToGroupForOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_cancelWorkflowRunSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void actions_createOrUpdateOrgSecretSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void actions_createOrUpdateRepoSecretSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void actions_createRegistrationTokenForOrgSignalFull(OAIHttpRequestWorker *worker, OAIAuthentication_token summary);
    void actions_createRegistrationTokenForRepoSignalFull(OAIHttpRequestWorker *worker, OAIAuthentication_token summary);
    void actions_createRemoveTokenForOrgSignalFull(OAIHttpRequestWorker *worker, OAIAuthentication_token summary);
    void actions_createRemoveTokenForRepoSignalFull(OAIHttpRequestWorker *worker, OAIAuthentication_token summary);
    void actions_createSelfHostedRunnerGroupForOrgSignalFull(OAIHttpRequestWorker *worker, OAIRunner_groups_org summary);
    void actions_createWorkflowDispatchSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteArtifactSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteOrgSecretSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteRepoSecretSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteSelfHostedRunnerFromOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteSelfHostedRunnerFromRepoSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteSelfHostedRunnerGroupFromOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteWorkflowRunSignalFull(OAIHttpRequestWorker *worker);
    void actions_deleteWorkflowRunLogsSignalFull(OAIHttpRequestWorker *worker);
    void actions_disableSelectedRepositoryGithubActionsOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void actions_disableWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void actions_downloadArtifactSignalFull(OAIHttpRequestWorker *worker);
    void actions_downloadJobLogsForWorkflowRunSignalFull(OAIHttpRequestWorker *worker);
    void actions_downloadWorkflowRunLogsSignalFull(OAIHttpRequestWorker *worker);
    void actions_enableSelectedRepositoryGithubActionsOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void actions_enableWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void actions_getAllowedActionsOrganizationSignalFull(OAIHttpRequestWorker *worker, OAISelected_actions summary);
    void actions_getAllowedActionsRepositorySignalFull(OAIHttpRequestWorker *worker, OAISelected_actions summary);
    void actions_getArtifactSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);
    void actions_getGithubActionsPermissionsOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIActions_organization_permissions summary);
    void actions_getGithubActionsPermissionsRepositorySignalFull(OAIHttpRequestWorker *worker, OAIActions_repository_permissions summary);
    void actions_getJobForWorkflowRunSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void actions_getOrgPublicKeySignalFull(OAIHttpRequestWorker *worker, OAIActions_public_key summary);
    void actions_getOrgSecretSignalFull(OAIHttpRequestWorker *worker, OAIOrganization_actions_secret summary);
    void actions_getRepoPublicKeySignalFull(OAIHttpRequestWorker *worker, OAIActions_public_key summary);
    void actions_getRepoSecretSignalFull(OAIHttpRequestWorker *worker, OAIActions_secret summary);
    void actions_getSelfHostedRunnerForOrgSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void actions_getSelfHostedRunnerForRepoSignalFull(OAIHttpRequestWorker *worker, OAIRunner summary);
    void actions_getSelfHostedRunnerGroupForOrgSignalFull(OAIHttpRequestWorker *worker, OAIRunner_groups_org summary);
    void actions_getWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);
    void actions_getWorkflowRunSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow_run summary);
    void actions_listArtifactsForRepoSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_artifacts_for_repo_200_response summary);
    void actions_listJobsForWorkflowRunSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_jobs_for_workflow_run_200_response summary);
    void actions_listOrgSecretsSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_org_secrets_200_response summary);
    void actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_repo_access_to_self_hosted_runner_group_in_org_200_response summary);
    void actions_listRepoSecretsSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_repo_secrets_200_response summary);
    void actions_listRepoWorkflowsSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_repo_workflows_200_response summary);
    void actions_listRunnerApplicationsForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIRunner_application> summary);
    void actions_listRunnerApplicationsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAIRunner_application> summary);
    void actions_listSelectedReposForOrgSecretSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_selected_repos_for_org_secret_200_response summary);
    void actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_selected_repositories_enabled_github_actions_organization_200_response summary);
    void actions_listSelfHostedRunnerGroupsForOrgSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_self_hosted_runner_groups_for_org_200_response summary);
    void actions_listSelfHostedRunnersForOrgSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_self_hosted_runners_for_org_200_response summary);
    void actions_listSelfHostedRunnersForRepoSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_self_hosted_runners_for_org_200_response summary);
    void actions_listSelfHostedRunnersInGroupForOrgSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary);
    void actions_listWorkflowRunArtifactsSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_artifacts_for_repo_200_response summary);
    void actions_listWorkflowRunsSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_workflow_runs_for_repo_200_response summary);
    void actions_listWorkflowRunsForRepoSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_workflow_runs_for_repo_200_response summary);
    void actions_reRunWorkflowSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_removeSelectedRepoFromOrgSecretSignalFull(OAIHttpRequestWorker *worker);
    void actions_removeSelfHostedRunnerFromGroupForOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_setAllowedActionsOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void actions_setAllowedActionsRepositorySignalFull(OAIHttpRequestWorker *worker);
    void actions_setGithubActionsPermissionsOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void actions_setGithubActionsPermissionsRepositorySignalFull(OAIHttpRequestWorker *worker);
    void actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_setSelectedReposForOrgSecretSignalFull(OAIHttpRequestWorker *worker);
    void actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void actions_setSelfHostedRunnersInGroupForOrgSignalFull(OAIHttpRequestWorker *worker);
    void actions_updateSelfHostedRunnerGroupForOrgSignalFull(OAIHttpRequestWorker *worker, OAIRunner_groups_org summary);

    Q_DECL_DEPRECATED_X("Use actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignalError() instead")
    void actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_addSelectedRepoToOrgSecretSignalError() instead")
    void actions_addSelectedRepoToOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_addSelectedRepoToOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_addSelfHostedRunnerToGroupForOrgSignalError() instead")
    void actions_addSelfHostedRunnerToGroupForOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_addSelfHostedRunnerToGroupForOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_cancelWorkflowRunSignalError() instead")
    void actions_cancelWorkflowRunSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_cancelWorkflowRunSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createOrUpdateOrgSecretSignalError() instead")
    void actions_createOrUpdateOrgSecretSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createOrUpdateOrgSecretSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createOrUpdateRepoSecretSignalError() instead")
    void actions_createOrUpdateRepoSecretSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createOrUpdateRepoSecretSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRegistrationTokenForOrgSignalError() instead")
    void actions_createRegistrationTokenForOrgSignalE(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRegistrationTokenForOrgSignalError(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRegistrationTokenForRepoSignalError() instead")
    void actions_createRegistrationTokenForRepoSignalE(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRegistrationTokenForRepoSignalError(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRemoveTokenForOrgSignalError() instead")
    void actions_createRemoveTokenForOrgSignalE(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRemoveTokenForOrgSignalError(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRemoveTokenForRepoSignalError() instead")
    void actions_createRemoveTokenForRepoSignalE(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRemoveTokenForRepoSignalError(OAIAuthentication_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createSelfHostedRunnerGroupForOrgSignalError() instead")
    void actions_createSelfHostedRunnerGroupForOrgSignalE(OAIRunner_groups_org summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createSelfHostedRunnerGroupForOrgSignalError(OAIRunner_groups_org summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createWorkflowDispatchSignalError() instead")
    void actions_createWorkflowDispatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createWorkflowDispatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteArtifactSignalError() instead")
    void actions_deleteArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteOrgSecretSignalError() instead")
    void actions_deleteOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteRepoSecretSignalError() instead")
    void actions_deleteRepoSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteRepoSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteSelfHostedRunnerFromOrgSignalError() instead")
    void actions_deleteSelfHostedRunnerFromOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteSelfHostedRunnerFromOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteSelfHostedRunnerFromRepoSignalError() instead")
    void actions_deleteSelfHostedRunnerFromRepoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteSelfHostedRunnerFromRepoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteSelfHostedRunnerGroupFromOrgSignalError() instead")
    void actions_deleteSelfHostedRunnerGroupFromOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteSelfHostedRunnerGroupFromOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteWorkflowRunSignalError() instead")
    void actions_deleteWorkflowRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteWorkflowRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteWorkflowRunLogsSignalError() instead")
    void actions_deleteWorkflowRunLogsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteWorkflowRunLogsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_disableSelectedRepositoryGithubActionsOrganizationSignalError() instead")
    void actions_disableSelectedRepositoryGithubActionsOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_disableSelectedRepositoryGithubActionsOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_disableWorkflowSignalError() instead")
    void actions_disableWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_disableWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_downloadArtifactSignalError() instead")
    void actions_downloadArtifactSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_downloadArtifactSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_downloadJobLogsForWorkflowRunSignalError() instead")
    void actions_downloadJobLogsForWorkflowRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_downloadJobLogsForWorkflowRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_downloadWorkflowRunLogsSignalError() instead")
    void actions_downloadWorkflowRunLogsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_downloadWorkflowRunLogsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_enableSelectedRepositoryGithubActionsOrganizationSignalError() instead")
    void actions_enableSelectedRepositoryGithubActionsOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_enableSelectedRepositoryGithubActionsOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_enableWorkflowSignalError() instead")
    void actions_enableWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_enableWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getAllowedActionsOrganizationSignalError() instead")
    void actions_getAllowedActionsOrganizationSignalE(OAISelected_actions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getAllowedActionsOrganizationSignalError(OAISelected_actions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getAllowedActionsRepositorySignalError() instead")
    void actions_getAllowedActionsRepositorySignalE(OAISelected_actions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getAllowedActionsRepositorySignalError(OAISelected_actions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getArtifactSignalError() instead")
    void actions_getArtifactSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getArtifactSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getGithubActionsPermissionsOrganizationSignalError() instead")
    void actions_getGithubActionsPermissionsOrganizationSignalE(OAIActions_organization_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getGithubActionsPermissionsOrganizationSignalError(OAIActions_organization_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getGithubActionsPermissionsRepositorySignalError() instead")
    void actions_getGithubActionsPermissionsRepositorySignalE(OAIActions_repository_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getGithubActionsPermissionsRepositorySignalError(OAIActions_repository_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getJobForWorkflowRunSignalError() instead")
    void actions_getJobForWorkflowRunSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getJobForWorkflowRunSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getOrgPublicKeySignalError() instead")
    void actions_getOrgPublicKeySignalE(OAIActions_public_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getOrgPublicKeySignalError(OAIActions_public_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getOrgSecretSignalError() instead")
    void actions_getOrgSecretSignalE(OAIOrganization_actions_secret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getOrgSecretSignalError(OAIOrganization_actions_secret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getRepoPublicKeySignalError() instead")
    void actions_getRepoPublicKeySignalE(OAIActions_public_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getRepoPublicKeySignalError(OAIActions_public_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getRepoSecretSignalError() instead")
    void actions_getRepoSecretSignalE(OAIActions_secret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getRepoSecretSignalError(OAIActions_secret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getSelfHostedRunnerForOrgSignalError() instead")
    void actions_getSelfHostedRunnerForOrgSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getSelfHostedRunnerForOrgSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getSelfHostedRunnerForRepoSignalError() instead")
    void actions_getSelfHostedRunnerForRepoSignalE(OAIRunner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getSelfHostedRunnerForRepoSignalError(OAIRunner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getSelfHostedRunnerGroupForOrgSignalError() instead")
    void actions_getSelfHostedRunnerGroupForOrgSignalE(OAIRunner_groups_org summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getSelfHostedRunnerGroupForOrgSignalError(OAIRunner_groups_org summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getWorkflowSignalError() instead")
    void actions_getWorkflowSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getWorkflowSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getWorkflowRunSignalError() instead")
    void actions_getWorkflowRunSignalE(OAIWorkflow_run summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getWorkflowRunSignalError(OAIWorkflow_run summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listArtifactsForRepoSignalError() instead")
    void actions_listArtifactsForRepoSignalE(OAIActions_list_artifacts_for_repo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listArtifactsForRepoSignalError(OAIActions_list_artifacts_for_repo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listJobsForWorkflowRunSignalError() instead")
    void actions_listJobsForWorkflowRunSignalE(OAIActions_list_jobs_for_workflow_run_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listJobsForWorkflowRunSignalError(OAIActions_list_jobs_for_workflow_run_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listOrgSecretsSignalError() instead")
    void actions_listOrgSecretsSignalE(OAIActions_list_org_secrets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listOrgSecretsSignalError(OAIActions_list_org_secrets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignalError() instead")
    void actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignalE(OAIActions_list_repo_access_to_self_hosted_runner_group_in_org_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignalError(OAIActions_list_repo_access_to_self_hosted_runner_group_in_org_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRepoSecretsSignalError() instead")
    void actions_listRepoSecretsSignalE(OAIActions_list_repo_secrets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRepoSecretsSignalError(OAIActions_list_repo_secrets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRepoWorkflowsSignalError() instead")
    void actions_listRepoWorkflowsSignalE(OAIActions_list_repo_workflows_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRepoWorkflowsSignalError(OAIActions_list_repo_workflows_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRunnerApplicationsForOrgSignalError() instead")
    void actions_listRunnerApplicationsForOrgSignalE(QList<OAIRunner_application> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRunnerApplicationsForOrgSignalError(QList<OAIRunner_application> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRunnerApplicationsForRepoSignalError() instead")
    void actions_listRunnerApplicationsForRepoSignalE(QList<OAIRunner_application> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRunnerApplicationsForRepoSignalError(QList<OAIRunner_application> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelectedReposForOrgSecretSignalError() instead")
    void actions_listSelectedReposForOrgSecretSignalE(OAIActions_list_selected_repos_for_org_secret_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelectedReposForOrgSecretSignalError(OAIActions_list_selected_repos_for_org_secret_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignalError() instead")
    void actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignalE(OAIActions_list_selected_repositories_enabled_github_actions_organization_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignalError(OAIActions_list_selected_repositories_enabled_github_actions_organization_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnerGroupsForOrgSignalError() instead")
    void actions_listSelfHostedRunnerGroupsForOrgSignalE(OAIActions_list_self_hosted_runner_groups_for_org_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnerGroupsForOrgSignalError(OAIActions_list_self_hosted_runner_groups_for_org_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnersForOrgSignalError() instead")
    void actions_listSelfHostedRunnersForOrgSignalE(OAIActions_list_self_hosted_runners_for_org_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnersForOrgSignalError(OAIActions_list_self_hosted_runners_for_org_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnersForRepoSignalError() instead")
    void actions_listSelfHostedRunnersForRepoSignalE(OAIActions_list_self_hosted_runners_for_org_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnersForRepoSignalError(OAIActions_list_self_hosted_runners_for_org_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnersInGroupForOrgSignalError() instead")
    void actions_listSelfHostedRunnersInGroupForOrgSignalE(OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnersInGroupForOrgSignalError(OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listWorkflowRunArtifactsSignalError() instead")
    void actions_listWorkflowRunArtifactsSignalE(OAIActions_list_artifacts_for_repo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listWorkflowRunArtifactsSignalError(OAIActions_list_artifacts_for_repo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listWorkflowRunsSignalError() instead")
    void actions_listWorkflowRunsSignalE(OAIActions_list_workflow_runs_for_repo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listWorkflowRunsSignalError(OAIActions_list_workflow_runs_for_repo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listWorkflowRunsForRepoSignalError() instead")
    void actions_listWorkflowRunsForRepoSignalE(OAIActions_list_workflow_runs_for_repo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listWorkflowRunsForRepoSignalError(OAIActions_list_workflow_runs_for_repo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_reRunWorkflowSignalError() instead")
    void actions_reRunWorkflowSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_reRunWorkflowSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignalError() instead")
    void actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_removeSelectedRepoFromOrgSecretSignalError() instead")
    void actions_removeSelectedRepoFromOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_removeSelectedRepoFromOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_removeSelfHostedRunnerFromGroupForOrgSignalError() instead")
    void actions_removeSelfHostedRunnerFromGroupForOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_removeSelfHostedRunnerFromGroupForOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setAllowedActionsOrganizationSignalError() instead")
    void actions_setAllowedActionsOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setAllowedActionsOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setAllowedActionsRepositorySignalError() instead")
    void actions_setAllowedActionsRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setAllowedActionsRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setGithubActionsPermissionsOrganizationSignalError() instead")
    void actions_setGithubActionsPermissionsOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setGithubActionsPermissionsOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setGithubActionsPermissionsRepositorySignalError() instead")
    void actions_setGithubActionsPermissionsRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setGithubActionsPermissionsRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignalError() instead")
    void actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setSelectedReposForOrgSecretSignalError() instead")
    void actions_setSelectedReposForOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setSelectedReposForOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignalError() instead")
    void actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setSelfHostedRunnersInGroupForOrgSignalError() instead")
    void actions_setSelfHostedRunnersInGroupForOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setSelfHostedRunnersInGroupForOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_updateSelfHostedRunnerGroupForOrgSignalError() instead")
    void actions_updateSelfHostedRunnerGroupForOrgSignalE(OAIRunner_groups_org summary, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_updateSelfHostedRunnerGroupForOrgSignalError(OAIRunner_groups_org summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull() instead")
    void actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_addRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_addSelectedRepoToOrgSecretSignalErrorFull() instead")
    void actions_addSelectedRepoToOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_addSelectedRepoToOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_addSelfHostedRunnerToGroupForOrgSignalErrorFull() instead")
    void actions_addSelfHostedRunnerToGroupForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_addSelfHostedRunnerToGroupForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_cancelWorkflowRunSignalErrorFull() instead")
    void actions_cancelWorkflowRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_cancelWorkflowRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createOrUpdateOrgSecretSignalErrorFull() instead")
    void actions_createOrUpdateOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createOrUpdateOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createOrUpdateRepoSecretSignalErrorFull() instead")
    void actions_createOrUpdateRepoSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createOrUpdateRepoSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRegistrationTokenForOrgSignalErrorFull() instead")
    void actions_createRegistrationTokenForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRegistrationTokenForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRegistrationTokenForRepoSignalErrorFull() instead")
    void actions_createRegistrationTokenForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRegistrationTokenForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRemoveTokenForOrgSignalErrorFull() instead")
    void actions_createRemoveTokenForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRemoveTokenForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createRemoveTokenForRepoSignalErrorFull() instead")
    void actions_createRemoveTokenForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createRemoveTokenForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createSelfHostedRunnerGroupForOrgSignalErrorFull() instead")
    void actions_createSelfHostedRunnerGroupForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createSelfHostedRunnerGroupForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_createWorkflowDispatchSignalErrorFull() instead")
    void actions_createWorkflowDispatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_createWorkflowDispatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteArtifactSignalErrorFull() instead")
    void actions_deleteArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteOrgSecretSignalErrorFull() instead")
    void actions_deleteOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteRepoSecretSignalErrorFull() instead")
    void actions_deleteRepoSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteRepoSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteSelfHostedRunnerFromOrgSignalErrorFull() instead")
    void actions_deleteSelfHostedRunnerFromOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteSelfHostedRunnerFromOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteSelfHostedRunnerFromRepoSignalErrorFull() instead")
    void actions_deleteSelfHostedRunnerFromRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteSelfHostedRunnerFromRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteSelfHostedRunnerGroupFromOrgSignalErrorFull() instead")
    void actions_deleteSelfHostedRunnerGroupFromOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteSelfHostedRunnerGroupFromOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteWorkflowRunSignalErrorFull() instead")
    void actions_deleteWorkflowRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteWorkflowRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_deleteWorkflowRunLogsSignalErrorFull() instead")
    void actions_deleteWorkflowRunLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_deleteWorkflowRunLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_disableSelectedRepositoryGithubActionsOrganizationSignalErrorFull() instead")
    void actions_disableSelectedRepositoryGithubActionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_disableSelectedRepositoryGithubActionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_disableWorkflowSignalErrorFull() instead")
    void actions_disableWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_disableWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_downloadArtifactSignalErrorFull() instead")
    void actions_downloadArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_downloadArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_downloadJobLogsForWorkflowRunSignalErrorFull() instead")
    void actions_downloadJobLogsForWorkflowRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_downloadJobLogsForWorkflowRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_downloadWorkflowRunLogsSignalErrorFull() instead")
    void actions_downloadWorkflowRunLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_downloadWorkflowRunLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_enableSelectedRepositoryGithubActionsOrganizationSignalErrorFull() instead")
    void actions_enableSelectedRepositoryGithubActionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_enableSelectedRepositoryGithubActionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_enableWorkflowSignalErrorFull() instead")
    void actions_enableWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_enableWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getAllowedActionsOrganizationSignalErrorFull() instead")
    void actions_getAllowedActionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getAllowedActionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getAllowedActionsRepositorySignalErrorFull() instead")
    void actions_getAllowedActionsRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getAllowedActionsRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getArtifactSignalErrorFull() instead")
    void actions_getArtifactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getArtifactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getGithubActionsPermissionsOrganizationSignalErrorFull() instead")
    void actions_getGithubActionsPermissionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getGithubActionsPermissionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getGithubActionsPermissionsRepositorySignalErrorFull() instead")
    void actions_getGithubActionsPermissionsRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getGithubActionsPermissionsRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getJobForWorkflowRunSignalErrorFull() instead")
    void actions_getJobForWorkflowRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getJobForWorkflowRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getOrgPublicKeySignalErrorFull() instead")
    void actions_getOrgPublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getOrgPublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getOrgSecretSignalErrorFull() instead")
    void actions_getOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getRepoPublicKeySignalErrorFull() instead")
    void actions_getRepoPublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getRepoPublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getRepoSecretSignalErrorFull() instead")
    void actions_getRepoSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getRepoSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getSelfHostedRunnerForOrgSignalErrorFull() instead")
    void actions_getSelfHostedRunnerForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getSelfHostedRunnerForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getSelfHostedRunnerForRepoSignalErrorFull() instead")
    void actions_getSelfHostedRunnerForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getSelfHostedRunnerForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getSelfHostedRunnerGroupForOrgSignalErrorFull() instead")
    void actions_getSelfHostedRunnerGroupForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getSelfHostedRunnerGroupForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getWorkflowSignalErrorFull() instead")
    void actions_getWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_getWorkflowRunSignalErrorFull() instead")
    void actions_getWorkflowRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_getWorkflowRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listArtifactsForRepoSignalErrorFull() instead")
    void actions_listArtifactsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listArtifactsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listJobsForWorkflowRunSignalErrorFull() instead")
    void actions_listJobsForWorkflowRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listJobsForWorkflowRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listOrgSecretsSignalErrorFull() instead")
    void actions_listOrgSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listOrgSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull() instead")
    void actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRepoSecretsSignalErrorFull() instead")
    void actions_listRepoSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRepoSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRepoWorkflowsSignalErrorFull() instead")
    void actions_listRepoWorkflowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRepoWorkflowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRunnerApplicationsForOrgSignalErrorFull() instead")
    void actions_listRunnerApplicationsForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRunnerApplicationsForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listRunnerApplicationsForRepoSignalErrorFull() instead")
    void actions_listRunnerApplicationsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listRunnerApplicationsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelectedReposForOrgSecretSignalErrorFull() instead")
    void actions_listSelectedReposForOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelectedReposForOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignalErrorFull() instead")
    void actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelectedRepositoriesEnabledGithubActionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnerGroupsForOrgSignalErrorFull() instead")
    void actions_listSelfHostedRunnerGroupsForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnerGroupsForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnersForOrgSignalErrorFull() instead")
    void actions_listSelfHostedRunnersForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnersForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnersForRepoSignalErrorFull() instead")
    void actions_listSelfHostedRunnersForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnersForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listSelfHostedRunnersInGroupForOrgSignalErrorFull() instead")
    void actions_listSelfHostedRunnersInGroupForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listSelfHostedRunnersInGroupForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listWorkflowRunArtifactsSignalErrorFull() instead")
    void actions_listWorkflowRunArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listWorkflowRunArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listWorkflowRunsSignalErrorFull() instead")
    void actions_listWorkflowRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listWorkflowRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_listWorkflowRunsForRepoSignalErrorFull() instead")
    void actions_listWorkflowRunsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_listWorkflowRunsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_reRunWorkflowSignalErrorFull() instead")
    void actions_reRunWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_reRunWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull() instead")
    void actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_removeRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_removeSelectedRepoFromOrgSecretSignalErrorFull() instead")
    void actions_removeSelectedRepoFromOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_removeSelectedRepoFromOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_removeSelfHostedRunnerFromGroupForOrgSignalErrorFull() instead")
    void actions_removeSelfHostedRunnerFromGroupForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_removeSelfHostedRunnerFromGroupForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setAllowedActionsOrganizationSignalErrorFull() instead")
    void actions_setAllowedActionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setAllowedActionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setAllowedActionsRepositorySignalErrorFull() instead")
    void actions_setAllowedActionsRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setAllowedActionsRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setGithubActionsPermissionsOrganizationSignalErrorFull() instead")
    void actions_setGithubActionsPermissionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setGithubActionsPermissionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setGithubActionsPermissionsRepositorySignalErrorFull() instead")
    void actions_setGithubActionsPermissionsRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setGithubActionsPermissionsRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull() instead")
    void actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setRepoAccessToSelfHostedRunnerGroupInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setSelectedReposForOrgSecretSignalErrorFull() instead")
    void actions_setSelectedReposForOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setSelectedReposForOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignalErrorFull() instead")
    void actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setSelectedRepositoriesEnabledGithubActionsOrganizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_setSelfHostedRunnersInGroupForOrgSignalErrorFull() instead")
    void actions_setSelfHostedRunnersInGroupForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_setSelfHostedRunnersInGroupForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use actions_updateSelfHostedRunnerGroupForOrgSignalErrorFull() instead")
    void actions_updateSelfHostedRunnerGroupForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void actions_updateSelfHostedRunnerGroupForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
