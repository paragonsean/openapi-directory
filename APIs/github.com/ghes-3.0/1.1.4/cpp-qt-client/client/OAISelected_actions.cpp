/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelected_actions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelected_actions::OAISelected_actions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelected_actions::OAISelected_actions() {
    this->initializeModel();
}

OAISelected_actions::~OAISelected_actions() {}

void OAISelected_actions::initializeModel() {

    m_github_owned_allowed_isSet = false;
    m_github_owned_allowed_isValid = false;

    m_patterns_allowed_isSet = false;
    m_patterns_allowed_isValid = false;
}

void OAISelected_actions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelected_actions::fromJsonObject(QJsonObject json) {

    m_github_owned_allowed_isValid = ::OpenAPI::fromJsonValue(m_github_owned_allowed, json[QString("github_owned_allowed")]);
    m_github_owned_allowed_isSet = !json[QString("github_owned_allowed")].isNull() && m_github_owned_allowed_isValid;

    m_patterns_allowed_isValid = ::OpenAPI::fromJsonValue(m_patterns_allowed, json[QString("patterns_allowed")]);
    m_patterns_allowed_isSet = !json[QString("patterns_allowed")].isNull() && m_patterns_allowed_isValid;
}

QString OAISelected_actions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelected_actions::asJsonObject() const {
    QJsonObject obj;
    if (m_github_owned_allowed_isSet) {
        obj.insert(QString("github_owned_allowed"), ::OpenAPI::toJsonValue(m_github_owned_allowed));
    }
    if (m_patterns_allowed.size() > 0) {
        obj.insert(QString("patterns_allowed"), ::OpenAPI::toJsonValue(m_patterns_allowed));
    }
    return obj;
}

bool OAISelected_actions::isGithubOwnedAllowed() const {
    return m_github_owned_allowed;
}
void OAISelected_actions::setGithubOwnedAllowed(const bool &github_owned_allowed) {
    m_github_owned_allowed = github_owned_allowed;
    m_github_owned_allowed_isSet = true;
}

bool OAISelected_actions::is_github_owned_allowed_Set() const{
    return m_github_owned_allowed_isSet;
}

bool OAISelected_actions::is_github_owned_allowed_Valid() const{
    return m_github_owned_allowed_isValid;
}

QList<QString> OAISelected_actions::getPatternsAllowed() const {
    return m_patterns_allowed;
}
void OAISelected_actions::setPatternsAllowed(const QList<QString> &patterns_allowed) {
    m_patterns_allowed = patterns_allowed;
    m_patterns_allowed_isSet = true;
}

bool OAISelected_actions::is_patterns_allowed_Set() const{
    return m_patterns_allowed_isSet;
}

bool OAISelected_actions::is_patterns_allowed_Valid() const{
    return m_patterns_allowed_isValid;
}

bool OAISelected_actions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_github_owned_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patterns_allowed.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelected_actions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_github_owned_allowed_isValid && m_patterns_allowed_isValid && true;
}

} // namespace OpenAPI
