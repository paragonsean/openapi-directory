/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeline_line_commented_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeline_line_commented_event::OAITimeline_line_commented_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeline_line_commented_event::OAITimeline_line_commented_event() {
    this->initializeModel();
}

OAITimeline_line_commented_event::~OAITimeline_line_commented_event() {}

void OAITimeline_line_commented_event::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;
}

void OAITimeline_line_commented_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeline_line_commented_event::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;
}

QString OAITimeline_line_commented_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeline_line_commented_event::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    return obj;
}

QList<OAIPull_request_review_comment> OAITimeline_line_commented_event::getComments() const {
    return m_comments;
}
void OAITimeline_line_commented_event::setComments(const QList<OAIPull_request_review_comment> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAITimeline_line_commented_event::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAITimeline_line_commented_event::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAITimeline_line_commented_event::getEvent() const {
    return m_event;
}
void OAITimeline_line_commented_event::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAITimeline_line_commented_event::is_event_Set() const{
    return m_event_isSet;
}

bool OAITimeline_line_commented_event::is_event_Valid() const{
    return m_event_isValid;
}

QString OAITimeline_line_commented_event::getNodeId() const {
    return m_node_id;
}
void OAITimeline_line_commented_event::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAITimeline_line_commented_event::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAITimeline_line_commented_event::is_node_id_Valid() const{
    return m_node_id_isValid;
}

bool OAITimeline_line_commented_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeline_line_commented_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
