/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActions_repository_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActions_repository_permissions::OAIActions_repository_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActions_repository_permissions::OAIActions_repository_permissions() {
    this->initializeModel();
}

OAIActions_repository_permissions::~OAIActions_repository_permissions() {}

void OAIActions_repository_permissions::initializeModel() {

    m_allowed_actions_isSet = false;
    m_allowed_actions_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_selected_actions_url_isSet = false;
    m_selected_actions_url_isValid = false;
}

void OAIActions_repository_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActions_repository_permissions::fromJsonObject(QJsonObject json) {

    m_allowed_actions_isValid = ::OpenAPI::fromJsonValue(m_allowed_actions, json[QString("allowed_actions")]);
    m_allowed_actions_isSet = !json[QString("allowed_actions")].isNull() && m_allowed_actions_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_selected_actions_url_isValid = ::OpenAPI::fromJsonValue(m_selected_actions_url, json[QString("selected_actions_url")]);
    m_selected_actions_url_isSet = !json[QString("selected_actions_url")].isNull() && m_selected_actions_url_isValid;
}

QString OAIActions_repository_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActions_repository_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_actions.isSet()) {
        obj.insert(QString("allowed_actions"), ::OpenAPI::toJsonValue(m_allowed_actions));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_selected_actions_url_isSet) {
        obj.insert(QString("selected_actions_url"), ::OpenAPI::toJsonValue(m_selected_actions_url));
    }
    return obj;
}

OAIAllowed_actions OAIActions_repository_permissions::getAllowedActions() const {
    return m_allowed_actions;
}
void OAIActions_repository_permissions::setAllowedActions(const OAIAllowed_actions &allowed_actions) {
    m_allowed_actions = allowed_actions;
    m_allowed_actions_isSet = true;
}

bool OAIActions_repository_permissions::is_allowed_actions_Set() const{
    return m_allowed_actions_isSet;
}

bool OAIActions_repository_permissions::is_allowed_actions_Valid() const{
    return m_allowed_actions_isValid;
}

bool OAIActions_repository_permissions::isEnabled() const {
    return m_enabled;
}
void OAIActions_repository_permissions::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIActions_repository_permissions::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIActions_repository_permissions::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIActions_repository_permissions::getSelectedActionsUrl() const {
    return m_selected_actions_url;
}
void OAIActions_repository_permissions::setSelectedActionsUrl(const QString &selected_actions_url) {
    m_selected_actions_url = selected_actions_url;
    m_selected_actions_url_isSet = true;
}

bool OAIActions_repository_permissions::is_selected_actions_url_Set() const{
    return m_selected_actions_url_isSet;
}

bool OAIActions_repository_permissions::is_selected_actions_url_Valid() const{
    return m_selected_actions_url_isValid;
}

bool OAIActions_repository_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_actions_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActions_repository_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
