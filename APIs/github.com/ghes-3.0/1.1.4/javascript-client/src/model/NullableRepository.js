/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CollaboratorPermissions from './CollaboratorPermissions';
import NullableLicenseSimple from './NullableLicenseSimple';
import NullableRepositoryTemplateRepository from './NullableRepositoryTemplateRepository';
import NullableSimpleUser from './NullableSimpleUser';
import SimpleUser from './SimpleUser';

/**
 * The NullableRepository model module.
 * @module model/NullableRepository
 * @version 1.1.4
 */
class NullableRepository {
    /**
     * Constructs a new <code>NullableRepository</code>.
     * A git repository
     * @alias module:model/NullableRepository
     * @param archiveUrl {String} 
     * @param archived {Boolean} Whether the repository is archived.
     * @param assigneesUrl {String} 
     * @param blobsUrl {String} 
     * @param branchesUrl {String} 
     * @param cloneUrl {String} 
     * @param collaboratorsUrl {String} 
     * @param commentsUrl {String} 
     * @param commitsUrl {String} 
     * @param compareUrl {String} 
     * @param contentsUrl {String} 
     * @param contributorsUrl {String} 
     * @param createdAt {Date} 
     * @param defaultBranch {String} The default branch of the repository.
     * @param deploymentsUrl {String} 
     * @param description {String} 
     * @param disabled {Boolean} Returns whether or not this repository disabled.
     * @param downloadsUrl {String} 
     * @param eventsUrl {String} 
     * @param fork {Boolean} 
     * @param forks {Number} 
     * @param forksCount {Number} 
     * @param forksUrl {String} 
     * @param fullName {String} 
     * @param gitCommitsUrl {String} 
     * @param gitRefsUrl {String} 
     * @param gitTagsUrl {String} 
     * @param gitUrl {String} 
     * @param hasDownloads {Boolean} Whether downloads are enabled.
     * @param hasIssues {Boolean} Whether issues are enabled.
     * @param hasPages {Boolean} 
     * @param hasProjects {Boolean} Whether projects are enabled.
     * @param hasWiki {Boolean} Whether the wiki is enabled.
     * @param homepage {String} 
     * @param hooksUrl {String} 
     * @param htmlUrl {String} 
     * @param id {Number} Unique identifier of the repository
     * @param issueCommentUrl {String} 
     * @param issueEventsUrl {String} 
     * @param issuesUrl {String} 
     * @param keysUrl {String} 
     * @param labelsUrl {String} 
     * @param language {String} 
     * @param languagesUrl {String} 
     * @param license {module:model/NullableLicenseSimple} 
     * @param mergesUrl {String} 
     * @param milestonesUrl {String} 
     * @param mirrorUrl {String} 
     * @param name {String} The name of the repository.
     * @param nodeId {String} 
     * @param notificationsUrl {String} 
     * @param openIssues {Number} 
     * @param openIssuesCount {Number} 
     * @param owner {module:model/SimpleUser} 
     * @param _private {Boolean} Whether the repository is private or public.
     * @param pullsUrl {String} 
     * @param pushedAt {Date} 
     * @param releasesUrl {String} 
     * @param size {Number} 
     * @param sshUrl {String} 
     * @param stargazersCount {Number} 
     * @param stargazersUrl {String} 
     * @param statusesUrl {String} 
     * @param subscribersUrl {String} 
     * @param subscriptionUrl {String} 
     * @param svnUrl {String} 
     * @param tagsUrl {String} 
     * @param teamsUrl {String} 
     * @param treesUrl {String} 
     * @param updatedAt {Date} 
     * @param url {String} 
     * @param watchers {Number} 
     * @param watchersCount {Number} 
     */
    constructor(archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description, disabled, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, _private, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, treesUrl, updatedAt, url, watchers, watchersCount) { 
        
        NullableRepository.initialize(this, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description, disabled, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, _private, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, treesUrl, updatedAt, url, watchers, watchersCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description, disabled, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, _private, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, treesUrl, updatedAt, url, watchers, watchersCount) { 
        obj['allow_merge_commit'] = true;
        obj['allow_rebase_merge'] = true;
        obj['allow_squash_merge'] = true;
        obj['archive_url'] = archiveUrl;
        obj['archived'] = archived || false;
        obj['assignees_url'] = assigneesUrl;
        obj['blobs_url'] = blobsUrl;
        obj['branches_url'] = branchesUrl;
        obj['clone_url'] = cloneUrl;
        obj['collaborators_url'] = collaboratorsUrl;
        obj['comments_url'] = commentsUrl;
        obj['commits_url'] = commitsUrl;
        obj['compare_url'] = compareUrl;
        obj['contents_url'] = contentsUrl;
        obj['contributors_url'] = contributorsUrl;
        obj['created_at'] = createdAt;
        obj['default_branch'] = defaultBranch;
        obj['delete_branch_on_merge'] = false;
        obj['deployments_url'] = deploymentsUrl;
        obj['description'] = description;
        obj['disabled'] = disabled;
        obj['downloads_url'] = downloadsUrl;
        obj['events_url'] = eventsUrl;
        obj['fork'] = fork;
        obj['forks'] = forks;
        obj['forks_count'] = forksCount;
        obj['forks_url'] = forksUrl;
        obj['full_name'] = fullName;
        obj['git_commits_url'] = gitCommitsUrl;
        obj['git_refs_url'] = gitRefsUrl;
        obj['git_tags_url'] = gitTagsUrl;
        obj['git_url'] = gitUrl;
        obj['has_downloads'] = hasDownloads || true;
        obj['has_issues'] = hasIssues || true;
        obj['has_pages'] = hasPages;
        obj['has_projects'] = hasProjects || true;
        obj['has_wiki'] = hasWiki || true;
        obj['homepage'] = homepage;
        obj['hooks_url'] = hooksUrl;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['is_template'] = false;
        obj['issue_comment_url'] = issueCommentUrl;
        obj['issue_events_url'] = issueEventsUrl;
        obj['issues_url'] = issuesUrl;
        obj['keys_url'] = keysUrl;
        obj['labels_url'] = labelsUrl;
        obj['language'] = language;
        obj['languages_url'] = languagesUrl;
        obj['license'] = license;
        obj['merges_url'] = mergesUrl;
        obj['milestones_url'] = milestonesUrl;
        obj['mirror_url'] = mirrorUrl;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['notifications_url'] = notificationsUrl;
        obj['open_issues'] = openIssues;
        obj['open_issues_count'] = openIssuesCount;
        obj['owner'] = owner;
        obj['private'] = _private || false;
        obj['pulls_url'] = pullsUrl;
        obj['pushed_at'] = pushedAt;
        obj['releases_url'] = releasesUrl;
        obj['size'] = size;
        obj['ssh_url'] = sshUrl;
        obj['stargazers_count'] = stargazersCount;
        obj['stargazers_url'] = stargazersUrl;
        obj['statuses_url'] = statusesUrl;
        obj['subscribers_url'] = subscribersUrl;
        obj['subscription_url'] = subscriptionUrl;
        obj['svn_url'] = svnUrl;
        obj['tags_url'] = tagsUrl;
        obj['teams_url'] = teamsUrl;
        obj['trees_url'] = treesUrl;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
        obj['visibility'] = 'public';
        obj['watchers'] = watchers;
        obj['watchers_count'] = watchersCount;
    }

    /**
     * Constructs a <code>NullableRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NullableRepository} obj Optional instance to populate.
     * @return {module:model/NullableRepository} The populated <code>NullableRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NullableRepository();

            if (data.hasOwnProperty('allow_forking')) {
                obj['allow_forking'] = ApiClient.convertToType(data['allow_forking'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_merge_commit')) {
                obj['allow_merge_commit'] = ApiClient.convertToType(data['allow_merge_commit'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_merge')) {
                obj['allow_rebase_merge'] = ApiClient.convertToType(data['allow_rebase_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_squash_merge')) {
                obj['allow_squash_merge'] = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('archive_url')) {
                obj['archive_url'] = ApiClient.convertToType(data['archive_url'], 'String');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('assignees_url')) {
                obj['assignees_url'] = ApiClient.convertToType(data['assignees_url'], 'String');
            }
            if (data.hasOwnProperty('blobs_url')) {
                obj['blobs_url'] = ApiClient.convertToType(data['blobs_url'], 'String');
            }
            if (data.hasOwnProperty('branches_url')) {
                obj['branches_url'] = ApiClient.convertToType(data['branches_url'], 'String');
            }
            if (data.hasOwnProperty('clone_url')) {
                obj['clone_url'] = ApiClient.convertToType(data['clone_url'], 'String');
            }
            if (data.hasOwnProperty('collaborators_url')) {
                obj['collaborators_url'] = ApiClient.convertToType(data['collaborators_url'], 'String');
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('commits_url')) {
                obj['commits_url'] = ApiClient.convertToType(data['commits_url'], 'String');
            }
            if (data.hasOwnProperty('compare_url')) {
                obj['compare_url'] = ApiClient.convertToType(data['compare_url'], 'String');
            }
            if (data.hasOwnProperty('contents_url')) {
                obj['contents_url'] = ApiClient.convertToType(data['contents_url'], 'String');
            }
            if (data.hasOwnProperty('contributors_url')) {
                obj['contributors_url'] = ApiClient.convertToType(data['contributors_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('delete_branch_on_merge')) {
                obj['delete_branch_on_merge'] = ApiClient.convertToType(data['delete_branch_on_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('deployments_url')) {
                obj['deployments_url'] = ApiClient.convertToType(data['deployments_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('downloads_url')) {
                obj['downloads_url'] = ApiClient.convertToType(data['downloads_url'], 'String');
            }
            if (data.hasOwnProperty('events_url')) {
                obj['events_url'] = ApiClient.convertToType(data['events_url'], 'String');
            }
            if (data.hasOwnProperty('fork')) {
                obj['fork'] = ApiClient.convertToType(data['fork'], 'Boolean');
            }
            if (data.hasOwnProperty('forks')) {
                obj['forks'] = ApiClient.convertToType(data['forks'], 'Number');
            }
            if (data.hasOwnProperty('forks_count')) {
                obj['forks_count'] = ApiClient.convertToType(data['forks_count'], 'Number');
            }
            if (data.hasOwnProperty('forks_url')) {
                obj['forks_url'] = ApiClient.convertToType(data['forks_url'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('git_commits_url')) {
                obj['git_commits_url'] = ApiClient.convertToType(data['git_commits_url'], 'String');
            }
            if (data.hasOwnProperty('git_refs_url')) {
                obj['git_refs_url'] = ApiClient.convertToType(data['git_refs_url'], 'String');
            }
            if (data.hasOwnProperty('git_tags_url')) {
                obj['git_tags_url'] = ApiClient.convertToType(data['git_tags_url'], 'String');
            }
            if (data.hasOwnProperty('git_url')) {
                obj['git_url'] = ApiClient.convertToType(data['git_url'], 'String');
            }
            if (data.hasOwnProperty('has_downloads')) {
                obj['has_downloads'] = ApiClient.convertToType(data['has_downloads'], 'Boolean');
            }
            if (data.hasOwnProperty('has_issues')) {
                obj['has_issues'] = ApiClient.convertToType(data['has_issues'], 'Boolean');
            }
            if (data.hasOwnProperty('has_pages')) {
                obj['has_pages'] = ApiClient.convertToType(data['has_pages'], 'Boolean');
            }
            if (data.hasOwnProperty('has_projects')) {
                obj['has_projects'] = ApiClient.convertToType(data['has_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_wiki')) {
                obj['has_wiki'] = ApiClient.convertToType(data['has_wiki'], 'Boolean');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('hooks_url')) {
                obj['hooks_url'] = ApiClient.convertToType(data['hooks_url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_template')) {
                obj['is_template'] = ApiClient.convertToType(data['is_template'], 'Boolean');
            }
            if (data.hasOwnProperty('issue_comment_url')) {
                obj['issue_comment_url'] = ApiClient.convertToType(data['issue_comment_url'], 'String');
            }
            if (data.hasOwnProperty('issue_events_url')) {
                obj['issue_events_url'] = ApiClient.convertToType(data['issue_events_url'], 'String');
            }
            if (data.hasOwnProperty('issues_url')) {
                obj['issues_url'] = ApiClient.convertToType(data['issues_url'], 'String');
            }
            if (data.hasOwnProperty('keys_url')) {
                obj['keys_url'] = ApiClient.convertToType(data['keys_url'], 'String');
            }
            if (data.hasOwnProperty('labels_url')) {
                obj['labels_url'] = ApiClient.convertToType(data['labels_url'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('languages_url')) {
                obj['languages_url'] = ApiClient.convertToType(data['languages_url'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = NullableLicenseSimple.constructFromObject(data['license']);
            }
            if (data.hasOwnProperty('master_branch')) {
                obj['master_branch'] = ApiClient.convertToType(data['master_branch'], 'String');
            }
            if (data.hasOwnProperty('merges_url')) {
                obj['merges_url'] = ApiClient.convertToType(data['merges_url'], 'String');
            }
            if (data.hasOwnProperty('milestones_url')) {
                obj['milestones_url'] = ApiClient.convertToType(data['milestones_url'], 'String');
            }
            if (data.hasOwnProperty('mirror_url')) {
                obj['mirror_url'] = ApiClient.convertToType(data['mirror_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network_count')) {
                obj['network_count'] = ApiClient.convertToType(data['network_count'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('notifications_url')) {
                obj['notifications_url'] = ApiClient.convertToType(data['notifications_url'], 'String');
            }
            if (data.hasOwnProperty('open_issues')) {
                obj['open_issues'] = ApiClient.convertToType(data['open_issues'], 'Number');
            }
            if (data.hasOwnProperty('open_issues_count')) {
                obj['open_issues_count'] = ApiClient.convertToType(data['open_issues_count'], 'Number');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = NullableSimpleUser.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = SimpleUser.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = CollaboratorPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('pulls_url')) {
                obj['pulls_url'] = ApiClient.convertToType(data['pulls_url'], 'String');
            }
            if (data.hasOwnProperty('pushed_at')) {
                obj['pushed_at'] = ApiClient.convertToType(data['pushed_at'], 'Date');
            }
            if (data.hasOwnProperty('releases_url')) {
                obj['releases_url'] = ApiClient.convertToType(data['releases_url'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('ssh_url')) {
                obj['ssh_url'] = ApiClient.convertToType(data['ssh_url'], 'String');
            }
            if (data.hasOwnProperty('stargazers_count')) {
                obj['stargazers_count'] = ApiClient.convertToType(data['stargazers_count'], 'Number');
            }
            if (data.hasOwnProperty('stargazers_url')) {
                obj['stargazers_url'] = ApiClient.convertToType(data['stargazers_url'], 'String');
            }
            if (data.hasOwnProperty('starred_at')) {
                obj['starred_at'] = ApiClient.convertToType(data['starred_at'], 'String');
            }
            if (data.hasOwnProperty('statuses_url')) {
                obj['statuses_url'] = ApiClient.convertToType(data['statuses_url'], 'String');
            }
            if (data.hasOwnProperty('subscribers_count')) {
                obj['subscribers_count'] = ApiClient.convertToType(data['subscribers_count'], 'Number');
            }
            if (data.hasOwnProperty('subscribers_url')) {
                obj['subscribers_url'] = ApiClient.convertToType(data['subscribers_url'], 'String');
            }
            if (data.hasOwnProperty('subscription_url')) {
                obj['subscription_url'] = ApiClient.convertToType(data['subscription_url'], 'String');
            }
            if (data.hasOwnProperty('svn_url')) {
                obj['svn_url'] = ApiClient.convertToType(data['svn_url'], 'String');
            }
            if (data.hasOwnProperty('tags_url')) {
                obj['tags_url'] = ApiClient.convertToType(data['tags_url'], 'String');
            }
            if (data.hasOwnProperty('teams_url')) {
                obj['teams_url'] = ApiClient.convertToType(data['teams_url'], 'String');
            }
            if (data.hasOwnProperty('temp_clone_token')) {
                obj['temp_clone_token'] = ApiClient.convertToType(data['temp_clone_token'], 'String');
            }
            if (data.hasOwnProperty('template_repository')) {
                obj['template_repository'] = NullableRepositoryTemplateRepository.constructFromObject(data['template_repository']);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], ['String']);
            }
            if (data.hasOwnProperty('trees_url')) {
                obj['trees_url'] = ApiClient.convertToType(data['trees_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('watchers')) {
                obj['watchers'] = ApiClient.convertToType(data['watchers'], 'Number');
            }
            if (data.hasOwnProperty('watchers_count')) {
                obj['watchers_count'] = ApiClient.convertToType(data['watchers_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NullableRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NullableRepository</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NullableRepository.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['archive_url'] && !(typeof data['archive_url'] === 'string' || data['archive_url'] instanceof String)) {
            throw new Error("Expected the field `archive_url` to be a primitive type in the JSON string but got " + data['archive_url']);
        }
        // ensure the json data is a string
        if (data['assignees_url'] && !(typeof data['assignees_url'] === 'string' || data['assignees_url'] instanceof String)) {
            throw new Error("Expected the field `assignees_url` to be a primitive type in the JSON string but got " + data['assignees_url']);
        }
        // ensure the json data is a string
        if (data['blobs_url'] && !(typeof data['blobs_url'] === 'string' || data['blobs_url'] instanceof String)) {
            throw new Error("Expected the field `blobs_url` to be a primitive type in the JSON string but got " + data['blobs_url']);
        }
        // ensure the json data is a string
        if (data['branches_url'] && !(typeof data['branches_url'] === 'string' || data['branches_url'] instanceof String)) {
            throw new Error("Expected the field `branches_url` to be a primitive type in the JSON string but got " + data['branches_url']);
        }
        // ensure the json data is a string
        if (data['clone_url'] && !(typeof data['clone_url'] === 'string' || data['clone_url'] instanceof String)) {
            throw new Error("Expected the field `clone_url` to be a primitive type in the JSON string but got " + data['clone_url']);
        }
        // ensure the json data is a string
        if (data['collaborators_url'] && !(typeof data['collaborators_url'] === 'string' || data['collaborators_url'] instanceof String)) {
            throw new Error("Expected the field `collaborators_url` to be a primitive type in the JSON string but got " + data['collaborators_url']);
        }
        // ensure the json data is a string
        if (data['comments_url'] && !(typeof data['comments_url'] === 'string' || data['comments_url'] instanceof String)) {
            throw new Error("Expected the field `comments_url` to be a primitive type in the JSON string but got " + data['comments_url']);
        }
        // ensure the json data is a string
        if (data['commits_url'] && !(typeof data['commits_url'] === 'string' || data['commits_url'] instanceof String)) {
            throw new Error("Expected the field `commits_url` to be a primitive type in the JSON string but got " + data['commits_url']);
        }
        // ensure the json data is a string
        if (data['compare_url'] && !(typeof data['compare_url'] === 'string' || data['compare_url'] instanceof String)) {
            throw new Error("Expected the field `compare_url` to be a primitive type in the JSON string but got " + data['compare_url']);
        }
        // ensure the json data is a string
        if (data['contents_url'] && !(typeof data['contents_url'] === 'string' || data['contents_url'] instanceof String)) {
            throw new Error("Expected the field `contents_url` to be a primitive type in the JSON string but got " + data['contents_url']);
        }
        // ensure the json data is a string
        if (data['contributors_url'] && !(typeof data['contributors_url'] === 'string' || data['contributors_url'] instanceof String)) {
            throw new Error("Expected the field `contributors_url` to be a primitive type in the JSON string but got " + data['contributors_url']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['deployments_url'] && !(typeof data['deployments_url'] === 'string' || data['deployments_url'] instanceof String)) {
            throw new Error("Expected the field `deployments_url` to be a primitive type in the JSON string but got " + data['deployments_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['downloads_url'] && !(typeof data['downloads_url'] === 'string' || data['downloads_url'] instanceof String)) {
            throw new Error("Expected the field `downloads_url` to be a primitive type in the JSON string but got " + data['downloads_url']);
        }
        // ensure the json data is a string
        if (data['events_url'] && !(typeof data['events_url'] === 'string' || data['events_url'] instanceof String)) {
            throw new Error("Expected the field `events_url` to be a primitive type in the JSON string but got " + data['events_url']);
        }
        // ensure the json data is a string
        if (data['forks_url'] && !(typeof data['forks_url'] === 'string' || data['forks_url'] instanceof String)) {
            throw new Error("Expected the field `forks_url` to be a primitive type in the JSON string but got " + data['forks_url']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['git_commits_url'] && !(typeof data['git_commits_url'] === 'string' || data['git_commits_url'] instanceof String)) {
            throw new Error("Expected the field `git_commits_url` to be a primitive type in the JSON string but got " + data['git_commits_url']);
        }
        // ensure the json data is a string
        if (data['git_refs_url'] && !(typeof data['git_refs_url'] === 'string' || data['git_refs_url'] instanceof String)) {
            throw new Error("Expected the field `git_refs_url` to be a primitive type in the JSON string but got " + data['git_refs_url']);
        }
        // ensure the json data is a string
        if (data['git_tags_url'] && !(typeof data['git_tags_url'] === 'string' || data['git_tags_url'] instanceof String)) {
            throw new Error("Expected the field `git_tags_url` to be a primitive type in the JSON string but got " + data['git_tags_url']);
        }
        // ensure the json data is a string
        if (data['git_url'] && !(typeof data['git_url'] === 'string' || data['git_url'] instanceof String)) {
            throw new Error("Expected the field `git_url` to be a primitive type in the JSON string but got " + data['git_url']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is a string
        if (data['hooks_url'] && !(typeof data['hooks_url'] === 'string' || data['hooks_url'] instanceof String)) {
            throw new Error("Expected the field `hooks_url` to be a primitive type in the JSON string but got " + data['hooks_url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['issue_comment_url'] && !(typeof data['issue_comment_url'] === 'string' || data['issue_comment_url'] instanceof String)) {
            throw new Error("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got " + data['issue_comment_url']);
        }
        // ensure the json data is a string
        if (data['issue_events_url'] && !(typeof data['issue_events_url'] === 'string' || data['issue_events_url'] instanceof String)) {
            throw new Error("Expected the field `issue_events_url` to be a primitive type in the JSON string but got " + data['issue_events_url']);
        }
        // ensure the json data is a string
        if (data['issues_url'] && !(typeof data['issues_url'] === 'string' || data['issues_url'] instanceof String)) {
            throw new Error("Expected the field `issues_url` to be a primitive type in the JSON string but got " + data['issues_url']);
        }
        // ensure the json data is a string
        if (data['keys_url'] && !(typeof data['keys_url'] === 'string' || data['keys_url'] instanceof String)) {
            throw new Error("Expected the field `keys_url` to be a primitive type in the JSON string but got " + data['keys_url']);
        }
        // ensure the json data is a string
        if (data['labels_url'] && !(typeof data['labels_url'] === 'string' || data['labels_url'] instanceof String)) {
            throw new Error("Expected the field `labels_url` to be a primitive type in the JSON string but got " + data['labels_url']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['languages_url'] && !(typeof data['languages_url'] === 'string' || data['languages_url'] instanceof String)) {
            throw new Error("Expected the field `languages_url` to be a primitive type in the JSON string but got " + data['languages_url']);
        }
        // validate the optional field `license`
        if (data['license']) { // data not null
          NullableLicenseSimple.validateJSON(data['license']);
        }
        // ensure the json data is a string
        if (data['master_branch'] && !(typeof data['master_branch'] === 'string' || data['master_branch'] instanceof String)) {
            throw new Error("Expected the field `master_branch` to be a primitive type in the JSON string but got " + data['master_branch']);
        }
        // ensure the json data is a string
        if (data['merges_url'] && !(typeof data['merges_url'] === 'string' || data['merges_url'] instanceof String)) {
            throw new Error("Expected the field `merges_url` to be a primitive type in the JSON string but got " + data['merges_url']);
        }
        // ensure the json data is a string
        if (data['milestones_url'] && !(typeof data['milestones_url'] === 'string' || data['milestones_url'] instanceof String)) {
            throw new Error("Expected the field `milestones_url` to be a primitive type in the JSON string but got " + data['milestones_url']);
        }
        // ensure the json data is a string
        if (data['mirror_url'] && !(typeof data['mirror_url'] === 'string' || data['mirror_url'] instanceof String)) {
            throw new Error("Expected the field `mirror_url` to be a primitive type in the JSON string but got " + data['mirror_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['notifications_url'] && !(typeof data['notifications_url'] === 'string' || data['notifications_url'] instanceof String)) {
            throw new Error("Expected the field `notifications_url` to be a primitive type in the JSON string but got " + data['notifications_url']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          NullableSimpleUser.validateJSON(data['organization']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          SimpleUser.validateJSON(data['owner']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          CollaboratorPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['pulls_url'] && !(typeof data['pulls_url'] === 'string' || data['pulls_url'] instanceof String)) {
            throw new Error("Expected the field `pulls_url` to be a primitive type in the JSON string but got " + data['pulls_url']);
        }
        // ensure the json data is a string
        if (data['releases_url'] && !(typeof data['releases_url'] === 'string' || data['releases_url'] instanceof String)) {
            throw new Error("Expected the field `releases_url` to be a primitive type in the JSON string but got " + data['releases_url']);
        }
        // ensure the json data is a string
        if (data['ssh_url'] && !(typeof data['ssh_url'] === 'string' || data['ssh_url'] instanceof String)) {
            throw new Error("Expected the field `ssh_url` to be a primitive type in the JSON string but got " + data['ssh_url']);
        }
        // ensure the json data is a string
        if (data['stargazers_url'] && !(typeof data['stargazers_url'] === 'string' || data['stargazers_url'] instanceof String)) {
            throw new Error("Expected the field `stargazers_url` to be a primitive type in the JSON string but got " + data['stargazers_url']);
        }
        // ensure the json data is a string
        if (data['starred_at'] && !(typeof data['starred_at'] === 'string' || data['starred_at'] instanceof String)) {
            throw new Error("Expected the field `starred_at` to be a primitive type in the JSON string but got " + data['starred_at']);
        }
        // ensure the json data is a string
        if (data['statuses_url'] && !(typeof data['statuses_url'] === 'string' || data['statuses_url'] instanceof String)) {
            throw new Error("Expected the field `statuses_url` to be a primitive type in the JSON string but got " + data['statuses_url']);
        }
        // ensure the json data is a string
        if (data['subscribers_url'] && !(typeof data['subscribers_url'] === 'string' || data['subscribers_url'] instanceof String)) {
            throw new Error("Expected the field `subscribers_url` to be a primitive type in the JSON string but got " + data['subscribers_url']);
        }
        // ensure the json data is a string
        if (data['subscription_url'] && !(typeof data['subscription_url'] === 'string' || data['subscription_url'] instanceof String)) {
            throw new Error("Expected the field `subscription_url` to be a primitive type in the JSON string but got " + data['subscription_url']);
        }
        // ensure the json data is a string
        if (data['svn_url'] && !(typeof data['svn_url'] === 'string' || data['svn_url'] instanceof String)) {
            throw new Error("Expected the field `svn_url` to be a primitive type in the JSON string but got " + data['svn_url']);
        }
        // ensure the json data is a string
        if (data['tags_url'] && !(typeof data['tags_url'] === 'string' || data['tags_url'] instanceof String)) {
            throw new Error("Expected the field `tags_url` to be a primitive type in the JSON string but got " + data['tags_url']);
        }
        // ensure the json data is a string
        if (data['teams_url'] && !(typeof data['teams_url'] === 'string' || data['teams_url'] instanceof String)) {
            throw new Error("Expected the field `teams_url` to be a primitive type in the JSON string but got " + data['teams_url']);
        }
        // ensure the json data is a string
        if (data['temp_clone_token'] && !(typeof data['temp_clone_token'] === 'string' || data['temp_clone_token'] instanceof String)) {
            throw new Error("Expected the field `temp_clone_token` to be a primitive type in the JSON string but got " + data['temp_clone_token']);
        }
        // validate the optional field `template_repository`
        if (data['template_repository']) { // data not null
          NullableRepositoryTemplateRepository.validateJSON(data['template_repository']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['topics'])) {
            throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
        }
        // ensure the json data is a string
        if (data['trees_url'] && !(typeof data['trees_url'] === 'string' || data['trees_url'] instanceof String)) {
            throw new Error("Expected the field `trees_url` to be a primitive type in the JSON string but got " + data['trees_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}

NullableRepository.RequiredProperties = ["archive_url", "archived", "assignees_url", "blobs_url", "branches_url", "clone_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "created_at", "default_branch", "deployments_url", "description", "disabled", "downloads_url", "events_url", "fork", "forks", "forks_count", "forks_url", "full_name", "git_commits_url", "git_refs_url", "git_tags_url", "git_url", "has_downloads", "has_issues", "has_pages", "has_projects", "has_wiki", "homepage", "hooks_url", "html_url", "id", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "language", "languages_url", "license", "merges_url", "milestones_url", "mirror_url", "name", "node_id", "notifications_url", "open_issues", "open_issues_count", "owner", "private", "pulls_url", "pushed_at", "releases_url", "size", "ssh_url", "stargazers_count", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "svn_url", "tags_url", "teams_url", "trees_url", "updated_at", "url", "watchers", "watchers_count"];

/**
 * Whether to allow forking this repo
 * @member {Boolean} allow_forking
 */
NullableRepository.prototype['allow_forking'] = undefined;

/**
 * Whether to allow merge commits for pull requests.
 * @member {Boolean} allow_merge_commit
 * @default true
 */
NullableRepository.prototype['allow_merge_commit'] = true;

/**
 * Whether to allow rebase merges for pull requests.
 * @member {Boolean} allow_rebase_merge
 * @default true
 */
NullableRepository.prototype['allow_rebase_merge'] = true;

/**
 * Whether to allow squash merges for pull requests.
 * @member {Boolean} allow_squash_merge
 * @default true
 */
NullableRepository.prototype['allow_squash_merge'] = true;

/**
 * @member {String} archive_url
 */
NullableRepository.prototype['archive_url'] = undefined;

/**
 * Whether the repository is archived.
 * @member {Boolean} archived
 * @default false
 */
NullableRepository.prototype['archived'] = false;

/**
 * @member {String} assignees_url
 */
NullableRepository.prototype['assignees_url'] = undefined;

/**
 * @member {String} blobs_url
 */
NullableRepository.prototype['blobs_url'] = undefined;

/**
 * @member {String} branches_url
 */
NullableRepository.prototype['branches_url'] = undefined;

/**
 * @member {String} clone_url
 */
NullableRepository.prototype['clone_url'] = undefined;

/**
 * @member {String} collaborators_url
 */
NullableRepository.prototype['collaborators_url'] = undefined;

/**
 * @member {String} comments_url
 */
NullableRepository.prototype['comments_url'] = undefined;

/**
 * @member {String} commits_url
 */
NullableRepository.prototype['commits_url'] = undefined;

/**
 * @member {String} compare_url
 */
NullableRepository.prototype['compare_url'] = undefined;

/**
 * @member {String} contents_url
 */
NullableRepository.prototype['contents_url'] = undefined;

/**
 * @member {String} contributors_url
 */
NullableRepository.prototype['contributors_url'] = undefined;

/**
 * @member {Date} created_at
 */
NullableRepository.prototype['created_at'] = undefined;

/**
 * The default branch of the repository.
 * @member {String} default_branch
 */
NullableRepository.prototype['default_branch'] = undefined;

/**
 * Whether to delete head branches when pull requests are merged
 * @member {Boolean} delete_branch_on_merge
 * @default false
 */
NullableRepository.prototype['delete_branch_on_merge'] = false;

/**
 * @member {String} deployments_url
 */
NullableRepository.prototype['deployments_url'] = undefined;

/**
 * @member {String} description
 */
NullableRepository.prototype['description'] = undefined;

/**
 * Returns whether or not this repository disabled.
 * @member {Boolean} disabled
 */
NullableRepository.prototype['disabled'] = undefined;

/**
 * @member {String} downloads_url
 */
NullableRepository.prototype['downloads_url'] = undefined;

/**
 * @member {String} events_url
 */
NullableRepository.prototype['events_url'] = undefined;

/**
 * @member {Boolean} fork
 */
NullableRepository.prototype['fork'] = undefined;

/**
 * @member {Number} forks
 */
NullableRepository.prototype['forks'] = undefined;

/**
 * @member {Number} forks_count
 */
NullableRepository.prototype['forks_count'] = undefined;

/**
 * @member {String} forks_url
 */
NullableRepository.prototype['forks_url'] = undefined;

/**
 * @member {String} full_name
 */
NullableRepository.prototype['full_name'] = undefined;

/**
 * @member {String} git_commits_url
 */
NullableRepository.prototype['git_commits_url'] = undefined;

/**
 * @member {String} git_refs_url
 */
NullableRepository.prototype['git_refs_url'] = undefined;

/**
 * @member {String} git_tags_url
 */
NullableRepository.prototype['git_tags_url'] = undefined;

/**
 * @member {String} git_url
 */
NullableRepository.prototype['git_url'] = undefined;

/**
 * Whether downloads are enabled.
 * @member {Boolean} has_downloads
 * @default true
 */
NullableRepository.prototype['has_downloads'] = true;

/**
 * Whether issues are enabled.
 * @member {Boolean} has_issues
 * @default true
 */
NullableRepository.prototype['has_issues'] = true;

/**
 * @member {Boolean} has_pages
 */
NullableRepository.prototype['has_pages'] = undefined;

/**
 * Whether projects are enabled.
 * @member {Boolean} has_projects
 * @default true
 */
NullableRepository.prototype['has_projects'] = true;

/**
 * Whether the wiki is enabled.
 * @member {Boolean} has_wiki
 * @default true
 */
NullableRepository.prototype['has_wiki'] = true;

/**
 * @member {String} homepage
 */
NullableRepository.prototype['homepage'] = undefined;

/**
 * @member {String} hooks_url
 */
NullableRepository.prototype['hooks_url'] = undefined;

/**
 * @member {String} html_url
 */
NullableRepository.prototype['html_url'] = undefined;

/**
 * Unique identifier of the repository
 * @member {Number} id
 */
NullableRepository.prototype['id'] = undefined;

/**
 * Whether this repository acts as a template that can be used to generate new repositories.
 * @member {Boolean} is_template
 * @default false
 */
NullableRepository.prototype['is_template'] = false;

/**
 * @member {String} issue_comment_url
 */
NullableRepository.prototype['issue_comment_url'] = undefined;

/**
 * @member {String} issue_events_url
 */
NullableRepository.prototype['issue_events_url'] = undefined;

/**
 * @member {String} issues_url
 */
NullableRepository.prototype['issues_url'] = undefined;

/**
 * @member {String} keys_url
 */
NullableRepository.prototype['keys_url'] = undefined;

/**
 * @member {String} labels_url
 */
NullableRepository.prototype['labels_url'] = undefined;

/**
 * @member {String} language
 */
NullableRepository.prototype['language'] = undefined;

/**
 * @member {String} languages_url
 */
NullableRepository.prototype['languages_url'] = undefined;

/**
 * @member {module:model/NullableLicenseSimple} license
 */
NullableRepository.prototype['license'] = undefined;

/**
 * @member {String} master_branch
 */
NullableRepository.prototype['master_branch'] = undefined;

/**
 * @member {String} merges_url
 */
NullableRepository.prototype['merges_url'] = undefined;

/**
 * @member {String} milestones_url
 */
NullableRepository.prototype['milestones_url'] = undefined;

/**
 * @member {String} mirror_url
 */
NullableRepository.prototype['mirror_url'] = undefined;

/**
 * The name of the repository.
 * @member {String} name
 */
NullableRepository.prototype['name'] = undefined;

/**
 * @member {Number} network_count
 */
NullableRepository.prototype['network_count'] = undefined;

/**
 * @member {String} node_id
 */
NullableRepository.prototype['node_id'] = undefined;

/**
 * @member {String} notifications_url
 */
NullableRepository.prototype['notifications_url'] = undefined;

/**
 * @member {Number} open_issues
 */
NullableRepository.prototype['open_issues'] = undefined;

/**
 * @member {Number} open_issues_count
 */
NullableRepository.prototype['open_issues_count'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} organization
 */
NullableRepository.prototype['organization'] = undefined;

/**
 * @member {module:model/SimpleUser} owner
 */
NullableRepository.prototype['owner'] = undefined;

/**
 * @member {module:model/CollaboratorPermissions} permissions
 */
NullableRepository.prototype['permissions'] = undefined;

/**
 * Whether the repository is private or public.
 * @member {Boolean} private
 * @default false
 */
NullableRepository.prototype['private'] = false;

/**
 * @member {String} pulls_url
 */
NullableRepository.prototype['pulls_url'] = undefined;

/**
 * @member {Date} pushed_at
 */
NullableRepository.prototype['pushed_at'] = undefined;

/**
 * @member {String} releases_url
 */
NullableRepository.prototype['releases_url'] = undefined;

/**
 * @member {Number} size
 */
NullableRepository.prototype['size'] = undefined;

/**
 * @member {String} ssh_url
 */
NullableRepository.prototype['ssh_url'] = undefined;

/**
 * @member {Number} stargazers_count
 */
NullableRepository.prototype['stargazers_count'] = undefined;

/**
 * @member {String} stargazers_url
 */
NullableRepository.prototype['stargazers_url'] = undefined;

/**
 * @member {String} starred_at
 */
NullableRepository.prototype['starred_at'] = undefined;

/**
 * @member {String} statuses_url
 */
NullableRepository.prototype['statuses_url'] = undefined;

/**
 * @member {Number} subscribers_count
 */
NullableRepository.prototype['subscribers_count'] = undefined;

/**
 * @member {String} subscribers_url
 */
NullableRepository.prototype['subscribers_url'] = undefined;

/**
 * @member {String} subscription_url
 */
NullableRepository.prototype['subscription_url'] = undefined;

/**
 * @member {String} svn_url
 */
NullableRepository.prototype['svn_url'] = undefined;

/**
 * @member {String} tags_url
 */
NullableRepository.prototype['tags_url'] = undefined;

/**
 * @member {String} teams_url
 */
NullableRepository.prototype['teams_url'] = undefined;

/**
 * @member {String} temp_clone_token
 */
NullableRepository.prototype['temp_clone_token'] = undefined;

/**
 * @member {module:model/NullableRepositoryTemplateRepository} template_repository
 */
NullableRepository.prototype['template_repository'] = undefined;

/**
 * @member {Array.<String>} topics
 */
NullableRepository.prototype['topics'] = undefined;

/**
 * @member {String} trees_url
 */
NullableRepository.prototype['trees_url'] = undefined;

/**
 * @member {Date} updated_at
 */
NullableRepository.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
NullableRepository.prototype['url'] = undefined;

/**
 * The repository visibility: public, private, or internal.
 * @member {String} visibility
 * @default 'public'
 */
NullableRepository.prototype['visibility'] = 'public';

/**
 * @member {Number} watchers
 */
NullableRepository.prototype['watchers'] = undefined;

/**
 * @member {Number} watchers_count
 */
NullableRepository.prototype['watchers_count'] = undefined;






export default NullableRepository;

