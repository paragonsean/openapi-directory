/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitCommitTree from './CommitCommitTree';
import NullableGitUser from './NullableGitUser';
import Verification from './Verification';

/**
 * The CommitCommit model module.
 * @module model/CommitCommit
 * @version 1.1.4
 */
class CommitCommit {
    /**
     * Constructs a new <code>CommitCommit</code>.
     * @alias module:model/CommitCommit
     * @param author {module:model/NullableGitUser} 
     * @param commentCount {Number} 
     * @param committer {module:model/NullableGitUser} 
     * @param message {String} 
     * @param tree {module:model/CommitCommitTree} 
     * @param url {String} 
     */
    constructor(author, commentCount, committer, message, tree, url) { 
        
        CommitCommit.initialize(this, author, commentCount, committer, message, tree, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, author, commentCount, committer, message, tree, url) { 
        obj['author'] = author;
        obj['comment_count'] = commentCount;
        obj['committer'] = committer;
        obj['message'] = message;
        obj['tree'] = tree;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CommitCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitCommit} obj Optional instance to populate.
     * @return {module:model/CommitCommit} The populated <code>CommitCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitCommit();

            if (data.hasOwnProperty('author')) {
                obj['author'] = NullableGitUser.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('comment_count')) {
                obj['comment_count'] = ApiClient.convertToType(data['comment_count'], 'Number');
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = NullableGitUser.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = CommitCommitTree.constructFromObject(data['tree']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('verification')) {
                obj['verification'] = Verification.constructFromObject(data['verification']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitCommit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitCommit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CommitCommit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          NullableGitUser.validateJSON(data['author']);
        }
        // validate the optional field `committer`
        if (data['committer']) { // data not null
          NullableGitUser.validateJSON(data['committer']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `tree`
        if (data['tree']) { // data not null
          CommitCommitTree.validateJSON(data['tree']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `verification`
        if (data['verification']) { // data not null
          Verification.validateJSON(data['verification']);
        }

        return true;
    }


}

CommitCommit.RequiredProperties = ["author", "comment_count", "committer", "message", "tree", "url"];

/**
 * @member {module:model/NullableGitUser} author
 */
CommitCommit.prototype['author'] = undefined;

/**
 * @member {Number} comment_count
 */
CommitCommit.prototype['comment_count'] = undefined;

/**
 * @member {module:model/NullableGitUser} committer
 */
CommitCommit.prototype['committer'] = undefined;

/**
 * @member {String} message
 */
CommitCommit.prototype['message'] = undefined;

/**
 * @member {module:model/CommitCommitTree} tree
 */
CommitCommit.prototype['tree'] = undefined;

/**
 * @member {String} url
 */
CommitCommit.prototype['url'] = undefined;

/**
 * @member {module:model/Verification} verification
 */
CommitCommit.prototype['verification'] = undefined;






export default CommitCommit;

