/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SearchResultTextMatchesInner from './SearchResultTextMatchesInner';

/**
 * The LabelSearchResultItem model module.
 * @module model/LabelSearchResultItem
 * @version 1.1.4
 */
class LabelSearchResultItem {
    /**
     * Constructs a new <code>LabelSearchResultItem</code>.
     * Label Search Result Item
     * @alias module:model/LabelSearchResultItem
     * @param color {String} 
     * @param _default {Boolean} 
     * @param description {String} 
     * @param id {Number} 
     * @param name {String} 
     * @param nodeId {String} 
     * @param score {Number} 
     * @param url {String} 
     */
    constructor(color, _default, description, id, name, nodeId, score, url) { 
        
        LabelSearchResultItem.initialize(this, color, _default, description, id, name, nodeId, score, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, color, _default, description, id, name, nodeId, score, url) { 
        obj['color'] = color;
        obj['default'] = _default;
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['score'] = score;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>LabelSearchResultItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabelSearchResultItem} obj Optional instance to populate.
     * @return {module:model/LabelSearchResultItem} The populated <code>LabelSearchResultItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabelSearchResultItem();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('text_matches')) {
                obj['text_matches'] = ApiClient.convertToType(data['text_matches'], [SearchResultTextMatchesInner]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabelSearchResultItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabelSearchResultItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LabelSearchResultItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        if (data['text_matches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['text_matches'])) {
                throw new Error("Expected the field `text_matches` to be an array in the JSON data but got " + data['text_matches']);
            }
            // validate the optional field `text_matches` (array)
            for (const item of data['text_matches']) {
                SearchResultTextMatchesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

LabelSearchResultItem.RequiredProperties = ["color", "default", "description", "id", "name", "node_id", "score", "url"];

/**
 * @member {String} color
 */
LabelSearchResultItem.prototype['color'] = undefined;

/**
 * @member {Boolean} default
 */
LabelSearchResultItem.prototype['default'] = undefined;

/**
 * @member {String} description
 */
LabelSearchResultItem.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
LabelSearchResultItem.prototype['id'] = undefined;

/**
 * @member {String} name
 */
LabelSearchResultItem.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
LabelSearchResultItem.prototype['node_id'] = undefined;

/**
 * @member {Number} score
 */
LabelSearchResultItem.prototype['score'] = undefined;

/**
 * @member {Array.<module:model/SearchResultTextMatchesInner>} text_matches
 */
LabelSearchResultItem.prototype['text_matches'] = undefined;

/**
 * @member {String} url
 */
LabelSearchResultItem.prototype['url'] = undefined;






export default LabelSearchResultItem;

