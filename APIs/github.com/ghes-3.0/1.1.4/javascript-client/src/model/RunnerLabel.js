/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RunnerLabel model module.
 * @module model/RunnerLabel
 * @version 1.1.4
 */
class RunnerLabel {
    /**
     * Constructs a new <code>RunnerLabel</code>.
     * A label for a self hosted runner
     * @alias module:model/RunnerLabel
     * @param name {String} Name of the label.
     */
    constructor(name) { 
        
        RunnerLabel.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>RunnerLabel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunnerLabel} obj Optional instance to populate.
     * @return {module:model/RunnerLabel} The populated <code>RunnerLabel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunnerLabel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunnerLabel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunnerLabel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunnerLabel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RunnerLabel.RequiredProperties = ["name"];

/**
 * Unique identifier of the label.
 * @member {Number} id
 */
RunnerLabel.prototype['id'] = undefined;

/**
 * Name of the label.
 * @member {String} name
 */
RunnerLabel.prototype['name'] = undefined;

/**
 * The type of label. Read-only labels are applied automatically when the runner is configured.
 * @member {module:model/RunnerLabel.TypeEnum} type
 */
RunnerLabel.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RunnerLabel['TypeEnum'] = {

    /**
     * value: "read-only"
     * @const
     */
    "read-only": "read-only",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};



export default RunnerLabel;

