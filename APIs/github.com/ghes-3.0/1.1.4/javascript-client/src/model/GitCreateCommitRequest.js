/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitCreateCommitRequestAuthor from './GitCreateCommitRequestAuthor';
import GitCreateCommitRequestCommitter from './GitCreateCommitRequestCommitter';

/**
 * The GitCreateCommitRequest model module.
 * @module model/GitCreateCommitRequest
 * @version 1.1.4
 */
class GitCreateCommitRequest {
    /**
     * Constructs a new <code>GitCreateCommitRequest</code>.
     * @alias module:model/GitCreateCommitRequest
     * @param message {String} The commit message
     * @param tree {String} The SHA of the tree object this commit points to
     */
    constructor(message, tree) { 
        
        GitCreateCommitRequest.initialize(this, message, tree);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, tree) { 
        obj['message'] = message;
        obj['tree'] = tree;
    }

    /**
     * Constructs a <code>GitCreateCommitRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitCreateCommitRequest} obj Optional instance to populate.
     * @return {module:model/GitCreateCommitRequest} The populated <code>GitCreateCommitRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitCreateCommitRequest();

            if (data.hasOwnProperty('author')) {
                obj['author'] = GitCreateCommitRequestAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = GitCreateCommitRequestCommitter.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], ['String']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = ApiClient.convertToType(data['tree'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitCreateCommitRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitCreateCommitRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GitCreateCommitRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          GitCreateCommitRequestAuthor.validateJSON(data['author']);
        }
        // validate the optional field `committer`
        if (data['committer']) { // data not null
          GitCreateCommitRequestCommitter.validateJSON(data['committer']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parents'])) {
            throw new Error("Expected the field `parents` to be an array in the JSON data but got " + data['parents']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['tree'] && !(typeof data['tree'] === 'string' || data['tree'] instanceof String)) {
            throw new Error("Expected the field `tree` to be a primitive type in the JSON string but got " + data['tree']);
        }

        return true;
    }


}

GitCreateCommitRequest.RequiredProperties = ["message", "tree"];

/**
 * @member {module:model/GitCreateCommitRequestAuthor} author
 */
GitCreateCommitRequest.prototype['author'] = undefined;

/**
 * @member {module:model/GitCreateCommitRequestCommitter} committer
 */
GitCreateCommitRequest.prototype['committer'] = undefined;

/**
 * The commit message
 * @member {String} message
 */
GitCreateCommitRequest.prototype['message'] = undefined;

/**
 * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
 * @member {Array.<String>} parents
 */
GitCreateCommitRequest.prototype['parents'] = undefined;

/**
 * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
 * @member {String} signature
 */
GitCreateCommitRequest.prototype['signature'] = undefined;

/**
 * The SHA of the tree object this commit points to
 * @member {String} tree
 */
GitCreateCommitRequest.prototype['tree'] = undefined;






export default GitCreateCommitRequest;

