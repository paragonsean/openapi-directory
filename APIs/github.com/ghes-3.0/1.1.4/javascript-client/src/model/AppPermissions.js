/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppPermissions model module.
 * @module model/AppPermissions
 * @version 1.1.4
 */
class AppPermissions {
    /**
     * Constructs a new <code>AppPermissions</code>.
     * The permissions granted to the user-to-server access token.
     * @alias module:model/AppPermissions
     */
    constructor() { 
        
        AppPermissions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppPermissions} obj Optional instance to populate.
     * @return {module:model/AppPermissions} The populated <code>AppPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppPermissions();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], 'String');
            }
            if (data.hasOwnProperty('administration')) {
                obj['administration'] = ApiClient.convertToType(data['administration'], 'String');
            }
            if (data.hasOwnProperty('checks')) {
                obj['checks'] = ApiClient.convertToType(data['checks'], 'String');
            }
            if (data.hasOwnProperty('content_references')) {
                obj['content_references'] = ApiClient.convertToType(data['content_references'], 'String');
            }
            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], 'String');
            }
            if (data.hasOwnProperty('deployments')) {
                obj['deployments'] = ApiClient.convertToType(data['deployments'], 'String');
            }
            if (data.hasOwnProperty('environments')) {
                obj['environments'] = ApiClient.convertToType(data['environments'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], 'String');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
            if (data.hasOwnProperty('organization_administration')) {
                obj['organization_administration'] = ApiClient.convertToType(data['organization_administration'], 'String');
            }
            if (data.hasOwnProperty('organization_hooks')) {
                obj['organization_hooks'] = ApiClient.convertToType(data['organization_hooks'], 'String');
            }
            if (data.hasOwnProperty('organization_packages')) {
                obj['organization_packages'] = ApiClient.convertToType(data['organization_packages'], 'String');
            }
            if (data.hasOwnProperty('organization_plan')) {
                obj['organization_plan'] = ApiClient.convertToType(data['organization_plan'], 'String');
            }
            if (data.hasOwnProperty('organization_projects')) {
                obj['organization_projects'] = ApiClient.convertToType(data['organization_projects'], 'String');
            }
            if (data.hasOwnProperty('organization_secrets')) {
                obj['organization_secrets'] = ApiClient.convertToType(data['organization_secrets'], 'String');
            }
            if (data.hasOwnProperty('organization_self_hosted_runners')) {
                obj['organization_self_hosted_runners'] = ApiClient.convertToType(data['organization_self_hosted_runners'], 'String');
            }
            if (data.hasOwnProperty('organization_user_blocking')) {
                obj['organization_user_blocking'] = ApiClient.convertToType(data['organization_user_blocking'], 'String');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], 'String');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'String');
            }
            if (data.hasOwnProperty('pull_requests')) {
                obj['pull_requests'] = ApiClient.convertToType(data['pull_requests'], 'String');
            }
            if (data.hasOwnProperty('repository_hooks')) {
                obj['repository_hooks'] = ApiClient.convertToType(data['repository_hooks'], 'String');
            }
            if (data.hasOwnProperty('repository_projects')) {
                obj['repository_projects'] = ApiClient.convertToType(data['repository_projects'], 'String');
            }
            if (data.hasOwnProperty('secret_scanning_alerts')) {
                obj['secret_scanning_alerts'] = ApiClient.convertToType(data['secret_scanning_alerts'], 'String');
            }
            if (data.hasOwnProperty('secrets')) {
                obj['secrets'] = ApiClient.convertToType(data['secrets'], 'String');
            }
            if (data.hasOwnProperty('security_events')) {
                obj['security_events'] = ApiClient.convertToType(data['security_events'], 'String');
            }
            if (data.hasOwnProperty('single_file')) {
                obj['single_file'] = ApiClient.convertToType(data['single_file'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], 'String');
            }
            if (data.hasOwnProperty('team_discussions')) {
                obj['team_discussions'] = ApiClient.convertToType(data['team_discussions'], 'String');
            }
            if (data.hasOwnProperty('vulnerability_alerts')) {
                obj['vulnerability_alerts'] = ApiClient.convertToType(data['vulnerability_alerts'], 'String');
            }
            if (data.hasOwnProperty('workflows')) {
                obj['workflows'] = ApiClient.convertToType(data['workflows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppPermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppPermissions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actions'] && !(typeof data['actions'] === 'string' || data['actions'] instanceof String)) {
            throw new Error("Expected the field `actions` to be a primitive type in the JSON string but got " + data['actions']);
        }
        // ensure the json data is a string
        if (data['administration'] && !(typeof data['administration'] === 'string' || data['administration'] instanceof String)) {
            throw new Error("Expected the field `administration` to be a primitive type in the JSON string but got " + data['administration']);
        }
        // ensure the json data is a string
        if (data['checks'] && !(typeof data['checks'] === 'string' || data['checks'] instanceof String)) {
            throw new Error("Expected the field `checks` to be a primitive type in the JSON string but got " + data['checks']);
        }
        // ensure the json data is a string
        if (data['content_references'] && !(typeof data['content_references'] === 'string' || data['content_references'] instanceof String)) {
            throw new Error("Expected the field `content_references` to be a primitive type in the JSON string but got " + data['content_references']);
        }
        // ensure the json data is a string
        if (data['contents'] && !(typeof data['contents'] === 'string' || data['contents'] instanceof String)) {
            throw new Error("Expected the field `contents` to be a primitive type in the JSON string but got " + data['contents']);
        }
        // ensure the json data is a string
        if (data['deployments'] && !(typeof data['deployments'] === 'string' || data['deployments'] instanceof String)) {
            throw new Error("Expected the field `deployments` to be a primitive type in the JSON string but got " + data['deployments']);
        }
        // ensure the json data is a string
        if (data['environments'] && !(typeof data['environments'] === 'string' || data['environments'] instanceof String)) {
            throw new Error("Expected the field `environments` to be a primitive type in the JSON string but got " + data['environments']);
        }
        // ensure the json data is a string
        if (data['issues'] && !(typeof data['issues'] === 'string' || data['issues'] instanceof String)) {
            throw new Error("Expected the field `issues` to be a primitive type in the JSON string but got " + data['issues']);
        }
        // ensure the json data is a string
        if (data['members'] && !(typeof data['members'] === 'string' || data['members'] instanceof String)) {
            throw new Error("Expected the field `members` to be a primitive type in the JSON string but got " + data['members']);
        }
        // ensure the json data is a string
        if (data['metadata'] && !(typeof data['metadata'] === 'string' || data['metadata'] instanceof String)) {
            throw new Error("Expected the field `metadata` to be a primitive type in the JSON string but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['organization_administration'] && !(typeof data['organization_administration'] === 'string' || data['organization_administration'] instanceof String)) {
            throw new Error("Expected the field `organization_administration` to be a primitive type in the JSON string but got " + data['organization_administration']);
        }
        // ensure the json data is a string
        if (data['organization_hooks'] && !(typeof data['organization_hooks'] === 'string' || data['organization_hooks'] instanceof String)) {
            throw new Error("Expected the field `organization_hooks` to be a primitive type in the JSON string but got " + data['organization_hooks']);
        }
        // ensure the json data is a string
        if (data['organization_packages'] && !(typeof data['organization_packages'] === 'string' || data['organization_packages'] instanceof String)) {
            throw new Error("Expected the field `organization_packages` to be a primitive type in the JSON string but got " + data['organization_packages']);
        }
        // ensure the json data is a string
        if (data['organization_plan'] && !(typeof data['organization_plan'] === 'string' || data['organization_plan'] instanceof String)) {
            throw new Error("Expected the field `organization_plan` to be a primitive type in the JSON string but got " + data['organization_plan']);
        }
        // ensure the json data is a string
        if (data['organization_projects'] && !(typeof data['organization_projects'] === 'string' || data['organization_projects'] instanceof String)) {
            throw new Error("Expected the field `organization_projects` to be a primitive type in the JSON string but got " + data['organization_projects']);
        }
        // ensure the json data is a string
        if (data['organization_secrets'] && !(typeof data['organization_secrets'] === 'string' || data['organization_secrets'] instanceof String)) {
            throw new Error("Expected the field `organization_secrets` to be a primitive type in the JSON string but got " + data['organization_secrets']);
        }
        // ensure the json data is a string
        if (data['organization_self_hosted_runners'] && !(typeof data['organization_self_hosted_runners'] === 'string' || data['organization_self_hosted_runners'] instanceof String)) {
            throw new Error("Expected the field `organization_self_hosted_runners` to be a primitive type in the JSON string but got " + data['organization_self_hosted_runners']);
        }
        // ensure the json data is a string
        if (data['organization_user_blocking'] && !(typeof data['organization_user_blocking'] === 'string' || data['organization_user_blocking'] instanceof String)) {
            throw new Error("Expected the field `organization_user_blocking` to be a primitive type in the JSON string but got " + data['organization_user_blocking']);
        }
        // ensure the json data is a string
        if (data['packages'] && !(typeof data['packages'] === 'string' || data['packages'] instanceof String)) {
            throw new Error("Expected the field `packages` to be a primitive type in the JSON string but got " + data['packages']);
        }
        // ensure the json data is a string
        if (data['pages'] && !(typeof data['pages'] === 'string' || data['pages'] instanceof String)) {
            throw new Error("Expected the field `pages` to be a primitive type in the JSON string but got " + data['pages']);
        }
        // ensure the json data is a string
        if (data['pull_requests'] && !(typeof data['pull_requests'] === 'string' || data['pull_requests'] instanceof String)) {
            throw new Error("Expected the field `pull_requests` to be a primitive type in the JSON string but got " + data['pull_requests']);
        }
        // ensure the json data is a string
        if (data['repository_hooks'] && !(typeof data['repository_hooks'] === 'string' || data['repository_hooks'] instanceof String)) {
            throw new Error("Expected the field `repository_hooks` to be a primitive type in the JSON string but got " + data['repository_hooks']);
        }
        // ensure the json data is a string
        if (data['repository_projects'] && !(typeof data['repository_projects'] === 'string' || data['repository_projects'] instanceof String)) {
            throw new Error("Expected the field `repository_projects` to be a primitive type in the JSON string but got " + data['repository_projects']);
        }
        // ensure the json data is a string
        if (data['secret_scanning_alerts'] && !(typeof data['secret_scanning_alerts'] === 'string' || data['secret_scanning_alerts'] instanceof String)) {
            throw new Error("Expected the field `secret_scanning_alerts` to be a primitive type in the JSON string but got " + data['secret_scanning_alerts']);
        }
        // ensure the json data is a string
        if (data['secrets'] && !(typeof data['secrets'] === 'string' || data['secrets'] instanceof String)) {
            throw new Error("Expected the field `secrets` to be a primitive type in the JSON string but got " + data['secrets']);
        }
        // ensure the json data is a string
        if (data['security_events'] && !(typeof data['security_events'] === 'string' || data['security_events'] instanceof String)) {
            throw new Error("Expected the field `security_events` to be a primitive type in the JSON string but got " + data['security_events']);
        }
        // ensure the json data is a string
        if (data['single_file'] && !(typeof data['single_file'] === 'string' || data['single_file'] instanceof String)) {
            throw new Error("Expected the field `single_file` to be a primitive type in the JSON string but got " + data['single_file']);
        }
        // ensure the json data is a string
        if (data['statuses'] && !(typeof data['statuses'] === 'string' || data['statuses'] instanceof String)) {
            throw new Error("Expected the field `statuses` to be a primitive type in the JSON string but got " + data['statuses']);
        }
        // ensure the json data is a string
        if (data['team_discussions'] && !(typeof data['team_discussions'] === 'string' || data['team_discussions'] instanceof String)) {
            throw new Error("Expected the field `team_discussions` to be a primitive type in the JSON string but got " + data['team_discussions']);
        }
        // ensure the json data is a string
        if (data['vulnerability_alerts'] && !(typeof data['vulnerability_alerts'] === 'string' || data['vulnerability_alerts'] instanceof String)) {
            throw new Error("Expected the field `vulnerability_alerts` to be a primitive type in the JSON string but got " + data['vulnerability_alerts']);
        }
        // ensure the json data is a string
        if (data['workflows'] && !(typeof data['workflows'] === 'string' || data['workflows'] instanceof String)) {
            throw new Error("Expected the field `workflows` to be a primitive type in the JSON string but got " + data['workflows']);
        }

        return true;
    }


}



/**
 * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.ActionsEnum} actions
 */
AppPermissions.prototype['actions'] = undefined;

/**
 * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.AdministrationEnum} administration
 */
AppPermissions.prototype['administration'] = undefined;

/**
 * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.ChecksEnum} checks
 */
AppPermissions.prototype['checks'] = undefined;

/**
 * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.ContentReferencesEnum} content_references
 */
AppPermissions.prototype['content_references'] = undefined;

/**
 * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.ContentsEnum} contents
 */
AppPermissions.prototype['contents'] = undefined;

/**
 * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.DeploymentsEnum} deployments
 */
AppPermissions.prototype['deployments'] = undefined;

/**
 * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.EnvironmentsEnum} environments
 */
AppPermissions.prototype['environments'] = undefined;

/**
 * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.IssuesEnum} issues
 */
AppPermissions.prototype['issues'] = undefined;

/**
 * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.MembersEnum} members
 */
AppPermissions.prototype['members'] = undefined;

/**
 * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.MetadataEnum} metadata
 */
AppPermissions.prototype['metadata'] = undefined;

/**
 * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.OrganizationAdministrationEnum} organization_administration
 */
AppPermissions.prototype['organization_administration'] = undefined;

/**
 * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.OrganizationHooksEnum} organization_hooks
 */
AppPermissions.prototype['organization_hooks'] = undefined;

/**
 * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.OrganizationPackagesEnum} organization_packages
 */
AppPermissions.prototype['organization_packages'] = undefined;

/**
 * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
 * @member {module:model/AppPermissions.OrganizationPlanEnum} organization_plan
 */
AppPermissions.prototype['organization_plan'] = undefined;

/**
 * The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
 * @member {module:model/AppPermissions.OrganizationProjectsEnum} organization_projects
 */
AppPermissions.prototype['organization_projects'] = undefined;

/**
 * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.OrganizationSecretsEnum} organization_secrets
 */
AppPermissions.prototype['organization_secrets'] = undefined;

/**
 * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.OrganizationSelfHostedRunnersEnum} organization_self_hosted_runners
 */
AppPermissions.prototype['organization_self_hosted_runners'] = undefined;

/**
 * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.OrganizationUserBlockingEnum} organization_user_blocking
 */
AppPermissions.prototype['organization_user_blocking'] = undefined;

/**
 * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.PackagesEnum} packages
 */
AppPermissions.prototype['packages'] = undefined;

/**
 * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.PagesEnum} pages
 */
AppPermissions.prototype['pages'] = undefined;

/**
 * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.PullRequestsEnum} pull_requests
 */
AppPermissions.prototype['pull_requests'] = undefined;

/**
 * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.RepositoryHooksEnum} repository_hooks
 */
AppPermissions.prototype['repository_hooks'] = undefined;

/**
 * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
 * @member {module:model/AppPermissions.RepositoryProjectsEnum} repository_projects
 */
AppPermissions.prototype['repository_projects'] = undefined;

/**
 * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.SecretScanningAlertsEnum} secret_scanning_alerts
 */
AppPermissions.prototype['secret_scanning_alerts'] = undefined;

/**
 * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.SecretsEnum} secrets
 */
AppPermissions.prototype['secrets'] = undefined;

/**
 * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.SecurityEventsEnum} security_events
 */
AppPermissions.prototype['security_events'] = undefined;

/**
 * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.SingleFileEnum} single_file
 */
AppPermissions.prototype['single_file'] = undefined;

/**
 * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.StatusesEnum} statuses
 */
AppPermissions.prototype['statuses'] = undefined;

/**
 * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.TeamDiscussionsEnum} team_discussions
 */
AppPermissions.prototype['team_discussions'] = undefined;

/**
 * The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
 * @member {module:model/AppPermissions.VulnerabilityAlertsEnum} vulnerability_alerts
 */
AppPermissions.prototype['vulnerability_alerts'] = undefined;

/**
 * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
 * @member {module:model/AppPermissions.WorkflowsEnum} workflows
 */
AppPermissions.prototype['workflows'] = undefined;





/**
 * Allowed values for the <code>actions</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['ActionsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>administration</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['AdministrationEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>checks</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['ChecksEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>content_references</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['ContentReferencesEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>contents</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['ContentsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>deployments</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['DeploymentsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>environments</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['EnvironmentsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>issues</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['IssuesEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>members</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['MembersEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>metadata</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['MetadataEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>organization_administration</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationAdministrationEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>organization_hooks</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationHooksEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>organization_packages</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationPackagesEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>organization_plan</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationPlanEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read"
};


/**
 * Allowed values for the <code>organization_projects</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationProjectsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin"
};


/**
 * Allowed values for the <code>organization_secrets</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationSecretsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>organization_self_hosted_runners</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationSelfHostedRunnersEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>organization_user_blocking</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['OrganizationUserBlockingEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>packages</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['PackagesEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>pages</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['PagesEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>pull_requests</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['PullRequestsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>repository_hooks</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['RepositoryHooksEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>repository_projects</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['RepositoryProjectsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin"
};


/**
 * Allowed values for the <code>secret_scanning_alerts</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['SecretScanningAlertsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>secrets</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['SecretsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>security_events</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['SecurityEventsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>single_file</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['SingleFileEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>statuses</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['StatusesEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>team_discussions</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['TeamDiscussionsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>vulnerability_alerts</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['VulnerabilityAlertsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};


/**
 * Allowed values for the <code>workflows</code> property.
 * @enum {String}
 * @readonly
 */
AppPermissions['WorkflowsEnum'] = {

    /**
     * value: "write"
     * @const
     */
    "write": "write"
};



export default AppPermissions;

