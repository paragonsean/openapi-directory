/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposTransferRequest model module.
 * @module model/ReposTransferRequest
 * @version 1.1.4
 */
class ReposTransferRequest {
    /**
     * Constructs a new <code>ReposTransferRequest</code>.
     * @alias module:model/ReposTransferRequest
     * @param newOwner {String} The username or organization name the repository will be transferred to.
     */
    constructor(newOwner) { 
        
        ReposTransferRequest.initialize(this, newOwner);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, newOwner) { 
        obj['new_owner'] = newOwner;
    }

    /**
     * Constructs a <code>ReposTransferRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposTransferRequest} obj Optional instance to populate.
     * @return {module:model/ReposTransferRequest} The populated <code>ReposTransferRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposTransferRequest();

            if (data.hasOwnProperty('new_owner')) {
                obj['new_owner'] = ApiClient.convertToType(data['new_owner'], 'String');
            }
            if (data.hasOwnProperty('team_ids')) {
                obj['team_ids'] = ApiClient.convertToType(data['team_ids'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposTransferRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposTransferRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReposTransferRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['new_owner'] && !(typeof data['new_owner'] === 'string' || data['new_owner'] instanceof String)) {
            throw new Error("Expected the field `new_owner` to be a primitive type in the JSON string but got " + data['new_owner']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['team_ids'])) {
            throw new Error("Expected the field `team_ids` to be an array in the JSON data but got " + data['team_ids']);
        }

        return true;
    }


}

ReposTransferRequest.RequiredProperties = ["new_owner"];

/**
 * The username or organization name the repository will be transferred to.
 * @member {String} new_owner
 */
ReposTransferRequest.prototype['new_owner'] = undefined;

/**
 * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
 * @member {Array.<Number>} team_ids
 */
ReposTransferRequest.prototype['team_ids'] = undefined;






export default ReposTransferRequest;

