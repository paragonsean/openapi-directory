/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorAssociation from './AuthorAssociation';
import NullableMilestone from './NullableMilestone';
import NullableSimpleUser from './NullableSimpleUser';
import PullRequestLinks from './PullRequestLinks';
import PullRequestSimpleBase from './PullRequestSimpleBase';
import PullRequestSimpleLabelsInner from './PullRequestSimpleLabelsInner';
import SimpleUser from './SimpleUser';
import Team from './Team';

/**
 * The PullRequestSimple model module.
 * @module model/PullRequestSimple
 * @version 1.1.4
 */
class PullRequestSimple {
    /**
     * Constructs a new <code>PullRequestSimple</code>.
     * Pull Request Simple
     * @alias module:model/PullRequestSimple
     * @param links {module:model/PullRequestLinks} 
     * @param assignee {module:model/NullableSimpleUser} 
     * @param authorAssociation {module:model/AuthorAssociation} 
     * @param base {module:model/PullRequestSimpleBase} 
     * @param body {String} 
     * @param closedAt {Date} 
     * @param commentsUrl {String} 
     * @param commitsUrl {String} 
     * @param createdAt {Date} 
     * @param diffUrl {String} 
     * @param head {module:model/PullRequestSimpleBase} 
     * @param htmlUrl {String} 
     * @param id {Number} 
     * @param issueUrl {String} 
     * @param labels {Array.<module:model/PullRequestSimpleLabelsInner>} 
     * @param locked {Boolean} 
     * @param mergeCommitSha {String} 
     * @param mergedAt {Date} 
     * @param milestone {module:model/NullableMilestone} 
     * @param nodeId {String} 
     * @param number {Number} 
     * @param patchUrl {String} 
     * @param reviewCommentUrl {String} 
     * @param reviewCommentsUrl {String} 
     * @param state {String} 
     * @param statusesUrl {String} 
     * @param title {String} 
     * @param updatedAt {Date} 
     * @param url {String} 
     * @param user {module:model/NullableSimpleUser} 
     */
    constructor(links, assignee, authorAssociation, base, body, closedAt, commentsUrl, commitsUrl, createdAt, diffUrl, head, htmlUrl, id, issueUrl, labels, locked, mergeCommitSha, mergedAt, milestone, nodeId, number, patchUrl, reviewCommentUrl, reviewCommentsUrl, state, statusesUrl, title, updatedAt, url, user) { 
        
        PullRequestSimple.initialize(this, links, assignee, authorAssociation, base, body, closedAt, commentsUrl, commitsUrl, createdAt, diffUrl, head, htmlUrl, id, issueUrl, labels, locked, mergeCommitSha, mergedAt, milestone, nodeId, number, patchUrl, reviewCommentUrl, reviewCommentsUrl, state, statusesUrl, title, updatedAt, url, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, links, assignee, authorAssociation, base, body, closedAt, commentsUrl, commitsUrl, createdAt, diffUrl, head, htmlUrl, id, issueUrl, labels, locked, mergeCommitSha, mergedAt, milestone, nodeId, number, patchUrl, reviewCommentUrl, reviewCommentsUrl, state, statusesUrl, title, updatedAt, url, user) { 
        obj['_links'] = links;
        obj['assignee'] = assignee;
        obj['author_association'] = authorAssociation;
        obj['base'] = base;
        obj['body'] = body;
        obj['closed_at'] = closedAt;
        obj['comments_url'] = commentsUrl;
        obj['commits_url'] = commitsUrl;
        obj['created_at'] = createdAt;
        obj['diff_url'] = diffUrl;
        obj['head'] = head;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['issue_url'] = issueUrl;
        obj['labels'] = labels;
        obj['locked'] = locked;
        obj['merge_commit_sha'] = mergeCommitSha;
        obj['merged_at'] = mergedAt;
        obj['milestone'] = milestone;
        obj['node_id'] = nodeId;
        obj['number'] = number;
        obj['patch_url'] = patchUrl;
        obj['review_comment_url'] = reviewCommentUrl;
        obj['review_comments_url'] = reviewCommentsUrl;
        obj['state'] = state;
        obj['statuses_url'] = statusesUrl;
        obj['title'] = title;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>PullRequestSimple</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullRequestSimple} obj Optional instance to populate.
     * @return {module:model/PullRequestSimple} The populated <code>PullRequestSimple</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullRequestSimple();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = PullRequestLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('active_lock_reason')) {
                obj['active_lock_reason'] = ApiClient.convertToType(data['active_lock_reason'], 'String');
            }
            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = NullableSimpleUser.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('assignees')) {
                obj['assignees'] = ApiClient.convertToType(data['assignees'], [SimpleUser]);
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = AuthorAssociation.constructFromObject(data['author_association']);
            }
            if (data.hasOwnProperty('base')) {
                obj['base'] = PullRequestSimpleBase.constructFromObject(data['base']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('closed_at')) {
                obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'Date');
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('commits_url')) {
                obj['commits_url'] = ApiClient.convertToType(data['commits_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('diff_url')) {
                obj['diff_url'] = ApiClient.convertToType(data['diff_url'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('head')) {
                obj['head'] = PullRequestSimpleBase.constructFromObject(data['head']);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issue_url')) {
                obj['issue_url'] = ApiClient.convertToType(data['issue_url'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [PullRequestSimpleLabelsInner]);
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('merge_commit_sha')) {
                obj['merge_commit_sha'] = ApiClient.convertToType(data['merge_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('merged_at')) {
                obj['merged_at'] = ApiClient.convertToType(data['merged_at'], 'Date');
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = NullableMilestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('patch_url')) {
                obj['patch_url'] = ApiClient.convertToType(data['patch_url'], 'String');
            }
            if (data.hasOwnProperty('requested_reviewers')) {
                obj['requested_reviewers'] = ApiClient.convertToType(data['requested_reviewers'], [SimpleUser]);
            }
            if (data.hasOwnProperty('requested_teams')) {
                obj['requested_teams'] = ApiClient.convertToType(data['requested_teams'], [Team]);
            }
            if (data.hasOwnProperty('review_comment_url')) {
                obj['review_comment_url'] = ApiClient.convertToType(data['review_comment_url'], 'String');
            }
            if (data.hasOwnProperty('review_comments_url')) {
                obj['review_comments_url'] = ApiClient.convertToType(data['review_comments_url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('statuses_url')) {
                obj['statuses_url'] = ApiClient.convertToType(data['statuses_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NullableSimpleUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PullRequestSimple</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PullRequestSimple</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PullRequestSimple.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          PullRequestLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['active_lock_reason'] && !(typeof data['active_lock_reason'] === 'string' || data['active_lock_reason'] instanceof String)) {
            throw new Error("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got " + data['active_lock_reason']);
        }
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          NullableSimpleUser.validateJSON(data['assignee']);
        }
        if (data['assignees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assignees'])) {
                throw new Error("Expected the field `assignees` to be an array in the JSON data but got " + data['assignees']);
            }
            // validate the optional field `assignees` (array)
            for (const item of data['assignees']) {
                SimpleUser.validateJSON(item);
            };
        }
        // validate the optional field `base`
        if (data['base']) { // data not null
          PullRequestSimpleBase.validateJSON(data['base']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['comments_url'] && !(typeof data['comments_url'] === 'string' || data['comments_url'] instanceof String)) {
            throw new Error("Expected the field `comments_url` to be a primitive type in the JSON string but got " + data['comments_url']);
        }
        // ensure the json data is a string
        if (data['commits_url'] && !(typeof data['commits_url'] === 'string' || data['commits_url'] instanceof String)) {
            throw new Error("Expected the field `commits_url` to be a primitive type in the JSON string but got " + data['commits_url']);
        }
        // ensure the json data is a string
        if (data['diff_url'] && !(typeof data['diff_url'] === 'string' || data['diff_url'] instanceof String)) {
            throw new Error("Expected the field `diff_url` to be a primitive type in the JSON string but got " + data['diff_url']);
        }
        // validate the optional field `head`
        if (data['head']) { // data not null
          PullRequestSimpleBase.validateJSON(data['head']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['issue_url'] && !(typeof data['issue_url'] === 'string' || data['issue_url'] instanceof String)) {
            throw new Error("Expected the field `issue_url` to be a primitive type in the JSON string but got " + data['issue_url']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                PullRequestSimpleLabelsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merge_commit_sha'] && !(typeof data['merge_commit_sha'] === 'string' || data['merge_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got " + data['merge_commit_sha']);
        }
        // validate the optional field `milestone`
        if (data['milestone']) { // data not null
          NullableMilestone.validateJSON(data['milestone']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['patch_url'] && !(typeof data['patch_url'] === 'string' || data['patch_url'] instanceof String)) {
            throw new Error("Expected the field `patch_url` to be a primitive type in the JSON string but got " + data['patch_url']);
        }
        if (data['requested_reviewers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requested_reviewers'])) {
                throw new Error("Expected the field `requested_reviewers` to be an array in the JSON data but got " + data['requested_reviewers']);
            }
            // validate the optional field `requested_reviewers` (array)
            for (const item of data['requested_reviewers']) {
                SimpleUser.validateJSON(item);
            };
        }
        if (data['requested_teams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requested_teams'])) {
                throw new Error("Expected the field `requested_teams` to be an array in the JSON data but got " + data['requested_teams']);
            }
            // validate the optional field `requested_teams` (array)
            for (const item of data['requested_teams']) {
                Team.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['review_comment_url'] && !(typeof data['review_comment_url'] === 'string' || data['review_comment_url'] instanceof String)) {
            throw new Error("Expected the field `review_comment_url` to be a primitive type in the JSON string but got " + data['review_comment_url']);
        }
        // ensure the json data is a string
        if (data['review_comments_url'] && !(typeof data['review_comments_url'] === 'string' || data['review_comments_url'] instanceof String)) {
            throw new Error("Expected the field `review_comments_url` to be a primitive type in the JSON string but got " + data['review_comments_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['statuses_url'] && !(typeof data['statuses_url'] === 'string' || data['statuses_url'] instanceof String)) {
            throw new Error("Expected the field `statuses_url` to be a primitive type in the JSON string but got " + data['statuses_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NullableSimpleUser.validateJSON(data['user']);
        }

        return true;
    }


}

PullRequestSimple.RequiredProperties = ["_links", "assignee", "author_association", "base", "body", "closed_at", "comments_url", "commits_url", "created_at", "diff_url", "head", "html_url", "id", "issue_url", "labels", "locked", "merge_commit_sha", "merged_at", "milestone", "node_id", "number", "patch_url", "review_comment_url", "review_comments_url", "state", "statuses_url", "title", "updated_at", "url", "user"];

/**
 * @member {module:model/PullRequestLinks} _links
 */
PullRequestSimple.prototype['_links'] = undefined;

/**
 * @member {String} active_lock_reason
 */
PullRequestSimple.prototype['active_lock_reason'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} assignee
 */
PullRequestSimple.prototype['assignee'] = undefined;

/**
 * @member {Array.<module:model/SimpleUser>} assignees
 */
PullRequestSimple.prototype['assignees'] = undefined;

/**
 * @member {module:model/AuthorAssociation} author_association
 */
PullRequestSimple.prototype['author_association'] = undefined;

/**
 * @member {module:model/PullRequestSimpleBase} base
 */
PullRequestSimple.prototype['base'] = undefined;

/**
 * @member {String} body
 */
PullRequestSimple.prototype['body'] = undefined;

/**
 * @member {Date} closed_at
 */
PullRequestSimple.prototype['closed_at'] = undefined;

/**
 * @member {String} comments_url
 */
PullRequestSimple.prototype['comments_url'] = undefined;

/**
 * @member {String} commits_url
 */
PullRequestSimple.prototype['commits_url'] = undefined;

/**
 * @member {Date} created_at
 */
PullRequestSimple.prototype['created_at'] = undefined;

/**
 * @member {String} diff_url
 */
PullRequestSimple.prototype['diff_url'] = undefined;

/**
 * Indicates whether or not the pull request is a draft.
 * @member {Boolean} draft
 */
PullRequestSimple.prototype['draft'] = undefined;

/**
 * @member {module:model/PullRequestSimpleBase} head
 */
PullRequestSimple.prototype['head'] = undefined;

/**
 * @member {String} html_url
 */
PullRequestSimple.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
PullRequestSimple.prototype['id'] = undefined;

/**
 * @member {String} issue_url
 */
PullRequestSimple.prototype['issue_url'] = undefined;

/**
 * @member {Array.<module:model/PullRequestSimpleLabelsInner>} labels
 */
PullRequestSimple.prototype['labels'] = undefined;

/**
 * @member {Boolean} locked
 */
PullRequestSimple.prototype['locked'] = undefined;

/**
 * @member {String} merge_commit_sha
 */
PullRequestSimple.prototype['merge_commit_sha'] = undefined;

/**
 * @member {Date} merged_at
 */
PullRequestSimple.prototype['merged_at'] = undefined;

/**
 * @member {module:model/NullableMilestone} milestone
 */
PullRequestSimple.prototype['milestone'] = undefined;

/**
 * @member {String} node_id
 */
PullRequestSimple.prototype['node_id'] = undefined;

/**
 * @member {Number} number
 */
PullRequestSimple.prototype['number'] = undefined;

/**
 * @member {String} patch_url
 */
PullRequestSimple.prototype['patch_url'] = undefined;

/**
 * @member {Array.<module:model/SimpleUser>} requested_reviewers
 */
PullRequestSimple.prototype['requested_reviewers'] = undefined;

/**
 * @member {Array.<module:model/Team>} requested_teams
 */
PullRequestSimple.prototype['requested_teams'] = undefined;

/**
 * @member {String} review_comment_url
 */
PullRequestSimple.prototype['review_comment_url'] = undefined;

/**
 * @member {String} review_comments_url
 */
PullRequestSimple.prototype['review_comments_url'] = undefined;

/**
 * @member {String} state
 */
PullRequestSimple.prototype['state'] = undefined;

/**
 * @member {String} statuses_url
 */
PullRequestSimple.prototype['statuses_url'] = undefined;

/**
 * @member {String} title
 */
PullRequestSimple.prototype['title'] = undefined;

/**
 * @member {Date} updated_at
 */
PullRequestSimple.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
PullRequestSimple.prototype['url'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} user
 */
PullRequestSimple.prototype['user'] = undefined;






export default PullRequestSimple;

