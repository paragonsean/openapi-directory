/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.WorkflowRun();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkflowRun', function() {
    it('should create an instance of WorkflowRun', function() {
      // uncomment below and update the code to test WorkflowRun
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be.a(GitHubV3RestApi.WorkflowRun);
    });

    it('should have the property artifactsUrl (base name: "artifacts_url")', function() {
      // uncomment below and update the code to test the property artifactsUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property cancelUrl (base name: "cancel_url")', function() {
      // uncomment below and update the code to test the property cancelUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property checkSuiteId (base name: "check_suite_id")', function() {
      // uncomment below and update the code to test the property checkSuiteId
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property checkSuiteNodeId (base name: "check_suite_node_id")', function() {
      // uncomment below and update the code to test the property checkSuiteNodeId
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property checkSuiteUrl (base name: "check_suite_url")', function() {
      // uncomment below and update the code to test the property checkSuiteUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property conclusion (base name: "conclusion")', function() {
      // uncomment below and update the code to test the property conclusion
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property event (base name: "event")', function() {
      // uncomment below and update the code to test the property event
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property headBranch (base name: "head_branch")', function() {
      // uncomment below and update the code to test the property headBranch
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property headCommit (base name: "head_commit")', function() {
      // uncomment below and update the code to test the property headCommit
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property headRepository (base name: "head_repository")', function() {
      // uncomment below and update the code to test the property headRepository
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property headRepositoryId (base name: "head_repository_id")', function() {
      // uncomment below and update the code to test the property headRepositoryId
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property headSha (base name: "head_sha")', function() {
      // uncomment below and update the code to test the property headSha
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property jobsUrl (base name: "jobs_url")', function() {
      // uncomment below and update the code to test the property jobsUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property logsUrl (base name: "logs_url")', function() {
      // uncomment below and update the code to test the property logsUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property nodeId (base name: "node_id")', function() {
      // uncomment below and update the code to test the property nodeId
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property previousAttemptUrl (base name: "previous_attempt_url")', function() {
      // uncomment below and update the code to test the property previousAttemptUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property pullRequests (base name: "pull_requests")', function() {
      // uncomment below and update the code to test the property pullRequests
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property repository (base name: "repository")', function() {
      // uncomment below and update the code to test the property repository
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property rerunUrl (base name: "rerun_url")', function() {
      // uncomment below and update the code to test the property rerunUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property runAttempt (base name: "run_attempt")', function() {
      // uncomment below and update the code to test the property runAttempt
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property runNumber (base name: "run_number")', function() {
      // uncomment below and update the code to test the property runNumber
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property runStartedAt (base name: "run_started_at")', function() {
      // uncomment below and update the code to test the property runStartedAt
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property workflowId (base name: "workflow_id")', function() {
      // uncomment below and update the code to test the property workflowId
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

    it('should have the property workflowUrl (base name: "workflow_url")', function() {
      // uncomment below and update the code to test the property workflowUrl
      //var instance = new GitHubV3RestApi.WorkflowRun();
      //expect(instance).to.be();
    });

  });

}));
