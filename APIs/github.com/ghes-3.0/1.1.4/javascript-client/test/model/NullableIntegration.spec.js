/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.NullableIntegration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NullableIntegration', function() {
    it('should create an instance of NullableIntegration', function() {
      // uncomment below and update the code to test NullableIntegration
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be.a(GitHubV3RestApi.NullableIntegration);
    });

    it('should have the property clientId (base name: "client_id")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property clientSecret (base name: "client_secret")', function() {
      // uncomment below and update the code to test the property clientSecret
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property externalUrl (base name: "external_url")', function() {
      // uncomment below and update the code to test the property externalUrl
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property installationsCount (base name: "installations_count")', function() {
      // uncomment below and update the code to test the property installationsCount
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property nodeId (base name: "node_id")', function() {
      // uncomment below and update the code to test the property nodeId
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property pem (base name: "pem")', function() {
      // uncomment below and update the code to test the property pem
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

    it('should have the property webhookSecret (base name: "webhook_secret")', function() {
      // uncomment below and update the code to test the property webhookSecret
      //var instance = new GitHubV3RestApi.NullableIntegration();
      //expect(instance).to.be();
    });

  });

}));
