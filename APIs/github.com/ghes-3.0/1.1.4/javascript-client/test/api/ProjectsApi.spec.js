/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('projectsAddCollaborator', function() {
      it('should call projectsAddCollaborator successfully', function(done) {
        //uncomment below and update the code to test projectsAddCollaborator
        //instance.projectsAddCollaborator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsCreateCard', function() {
      it('should call projectsCreateCard successfully', function(done) {
        //uncomment below and update the code to test projectsCreateCard
        //instance.projectsCreateCard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsCreateColumn', function() {
      it('should call projectsCreateColumn successfully', function(done) {
        //uncomment below and update the code to test projectsCreateColumn
        //instance.projectsCreateColumn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsCreateForAuthenticatedUser', function() {
      it('should call projectsCreateForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test projectsCreateForAuthenticatedUser
        //instance.projectsCreateForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsCreateForOrg', function() {
      it('should call projectsCreateForOrg successfully', function(done) {
        //uncomment below and update the code to test projectsCreateForOrg
        //instance.projectsCreateForOrg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsCreateForRepo', function() {
      it('should call projectsCreateForRepo successfully', function(done) {
        //uncomment below and update the code to test projectsCreateForRepo
        //instance.projectsCreateForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsDelete', function() {
      it('should call projectsDelete successfully', function(done) {
        //uncomment below and update the code to test projectsDelete
        //instance.projectsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsDeleteCard', function() {
      it('should call projectsDeleteCard successfully', function(done) {
        //uncomment below and update the code to test projectsDeleteCard
        //instance.projectsDeleteCard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsDeleteColumn', function() {
      it('should call projectsDeleteColumn successfully', function(done) {
        //uncomment below and update the code to test projectsDeleteColumn
        //instance.projectsDeleteColumn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsGet', function() {
      it('should call projectsGet successfully', function(done) {
        //uncomment below and update the code to test projectsGet
        //instance.projectsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsGetCard', function() {
      it('should call projectsGetCard successfully', function(done) {
        //uncomment below and update the code to test projectsGetCard
        //instance.projectsGetCard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsGetColumn', function() {
      it('should call projectsGetColumn successfully', function(done) {
        //uncomment below and update the code to test projectsGetColumn
        //instance.projectsGetColumn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsGetPermissionForUser', function() {
      it('should call projectsGetPermissionForUser successfully', function(done) {
        //uncomment below and update the code to test projectsGetPermissionForUser
        //instance.projectsGetPermissionForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsListCards', function() {
      it('should call projectsListCards successfully', function(done) {
        //uncomment below and update the code to test projectsListCards
        //instance.projectsListCards(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsListCollaborators', function() {
      it('should call projectsListCollaborators successfully', function(done) {
        //uncomment below and update the code to test projectsListCollaborators
        //instance.projectsListCollaborators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsListColumns', function() {
      it('should call projectsListColumns successfully', function(done) {
        //uncomment below and update the code to test projectsListColumns
        //instance.projectsListColumns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsListForOrg', function() {
      it('should call projectsListForOrg successfully', function(done) {
        //uncomment below and update the code to test projectsListForOrg
        //instance.projectsListForOrg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsListForRepo', function() {
      it('should call projectsListForRepo successfully', function(done) {
        //uncomment below and update the code to test projectsListForRepo
        //instance.projectsListForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsListForUser', function() {
      it('should call projectsListForUser successfully', function(done) {
        //uncomment below and update the code to test projectsListForUser
        //instance.projectsListForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsMoveCard', function() {
      it('should call projectsMoveCard successfully', function(done) {
        //uncomment below and update the code to test projectsMoveCard
        //instance.projectsMoveCard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsMoveColumn', function() {
      it('should call projectsMoveColumn successfully', function(done) {
        //uncomment below and update the code to test projectsMoveColumn
        //instance.projectsMoveColumn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsRemoveCollaborator', function() {
      it('should call projectsRemoveCollaborator successfully', function(done) {
        //uncomment below and update the code to test projectsRemoveCollaborator
        //instance.projectsRemoveCollaborator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsUpdate', function() {
      it('should call projectsUpdate successfully', function(done) {
        //uncomment below and update the code to test projectsUpdate
        //instance.projectsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsUpdateCard', function() {
      it('should call projectsUpdateCard successfully', function(done) {
        //uncomment below and update the code to test projectsUpdateCard
        //instance.projectsUpdateCard(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsUpdateColumn', function() {
      it('should call projectsUpdateColumn successfully', function(done) {
        //uncomment below and update the code to test projectsUpdateColumn
        //instance.projectsUpdateColumn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
