/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for OrgsUpdateRequest
 */
public class OrgsUpdateRequestTest {
    private final OrgsUpdateRequest model = new OrgsUpdateRequest();

    /**
     * Model tests for OrgsUpdateRequest
     */
    @Test
    public void testOrgsUpdateRequest() {
        // TODO: test OrgsUpdateRequest
    }

    /**
     * Test the property 'billingEmail'
     */
    @Test
    public void billingEmailTest() {
        // TODO: test billingEmail
    }

    /**
     * Test the property 'blog'
     */
    @Test
    public void blogTest() {
        // TODO: test blog
    }

    /**
     * Test the property 'company'
     */
    @Test
    public void companyTest() {
        // TODO: test company
    }

    /**
     * Test the property 'defaultRepositoryPermission'
     */
    @Test
    public void defaultRepositoryPermissionTest() {
        // TODO: test defaultRepositoryPermission
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'email'
     */
    @Test
    public void emailTest() {
        // TODO: test email
    }

    /**
     * Test the property 'hasOrganizationProjects'
     */
    @Test
    public void hasOrganizationProjectsTest() {
        // TODO: test hasOrganizationProjects
    }

    /**
     * Test the property 'hasRepositoryProjects'
     */
    @Test
    public void hasRepositoryProjectsTest() {
        // TODO: test hasRepositoryProjects
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'membersAllowedRepositoryCreationType'
     */
    @Test
    public void membersAllowedRepositoryCreationTypeTest() {
        // TODO: test membersAllowedRepositoryCreationType
    }

    /**
     * Test the property 'membersCanCreateInternalRepositories'
     */
    @Test
    public void membersCanCreateInternalRepositoriesTest() {
        // TODO: test membersCanCreateInternalRepositories
    }

    /**
     * Test the property 'membersCanCreatePages'
     */
    @Test
    public void membersCanCreatePagesTest() {
        // TODO: test membersCanCreatePages
    }

    /**
     * Test the property 'membersCanCreatePrivateRepositories'
     */
    @Test
    public void membersCanCreatePrivateRepositoriesTest() {
        // TODO: test membersCanCreatePrivateRepositories
    }

    /**
     * Test the property 'membersCanCreatePublicRepositories'
     */
    @Test
    public void membersCanCreatePublicRepositoriesTest() {
        // TODO: test membersCanCreatePublicRepositories
    }

    /**
     * Test the property 'membersCanCreateRepositories'
     */
    @Test
    public void membersCanCreateRepositoriesTest() {
        // TODO: test membersCanCreateRepositories
    }

    /**
     * Test the property 'membersCanForkPrivateRepositories'
     */
    @Test
    public void membersCanForkPrivateRepositoriesTest() {
        // TODO: test membersCanForkPrivateRepositories
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'twitterUsername'
     */
    @Test
    public void twitterUsernameTest() {
        // TODO: test twitterUsername
    }

}
