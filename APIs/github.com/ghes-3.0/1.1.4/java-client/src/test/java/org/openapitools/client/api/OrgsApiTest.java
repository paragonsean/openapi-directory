/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.OrgHook;
import org.openapitools.client.model.OrgMembership;
import org.openapitools.client.model.OrganizationFull;
import org.openapitools.client.model.OrganizationSimple;
import org.openapitools.client.model.OrgsCreateWebhookRequest;
import org.openapitools.client.model.OrgsListAppInstallations200Response;
import org.openapitools.client.model.OrgsRemoveOutsideCollaborator422Response;
import org.openapitools.client.model.OrgsSetMembershipForUserRequest;
import org.openapitools.client.model.OrgsUpdate422Response;
import org.openapitools.client.model.OrgsUpdateMembershipForAuthenticatedUserRequest;
import org.openapitools.client.model.OrgsUpdateRequest;
import org.openapitools.client.model.OrgsUpdateWebhookConfigForOrgRequest;
import org.openapitools.client.model.OrgsUpdateWebhookRequest;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.WebhookConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrgsApi
 */
@Disabled
public class OrgsApiTest {

    private final OrgsApi api = new OrgsApi();

    /**
     * Check organization membership for a user
     *
     * Check if a user is, publicly or privately, a member of the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsCheckMembershipForUserTest() throws ApiException {
        String org = null;
        String username = null;
        api.orgsCheckMembershipForUser(org, username);
        // TODO: test validations
    }

    /**
     * Check public organization membership for a user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsCheckPublicMembershipForUserTest() throws ApiException {
        String org = null;
        String username = null;
        api.orgsCheckPublicMembershipForUser(org, username);
        // TODO: test validations
    }

    /**
     * Convert an organization member to outside collaborator
     *
     * When an organization member is converted to an outside collaborator, they&#39;ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \&quot;[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsConvertMemberToOutsideCollaboratorTest() throws ApiException {
        String org = null;
        String username = null;
        Object response = api.orgsConvertMemberToOutsideCollaborator(org, username);
        // TODO: test validations
    }

    /**
     * Create an organization webhook
     *
     * Here&#39;s how you can create a hook that posts payloads in JSON format:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsCreateWebhookTest() throws ApiException {
        String org = null;
        OrgsCreateWebhookRequest orgsCreateWebhookRequest = null;
        OrgHook response = api.orgsCreateWebhook(org, orgsCreateWebhookRequest);
        // TODO: test validations
    }

    /**
     * Delete an organization webhook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsDeleteWebhookTest() throws ApiException {
        String org = null;
        Integer hookId = null;
        api.orgsDeleteWebhook(org, hookId);
        // TODO: test validations
    }

    /**
     * Get an organization
     *
     * To see many of the organization response values, you need to be an authenticated organization owner with the &#x60;admin:org&#x60; scope. When the value of &#x60;two_factor_requirement_enabled&#x60; is &#x60;true&#x60;, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  GitHub Apps with the &#x60;Organization plan&#x60; permission can use this endpoint to retrieve information about an organization&#39;s GitHub Enterprise Server plan. See \&quot;[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/)\&quot; for details. For an example response, see &#39;Response with GitHub Enterprise Server plan information&#39; below.\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsGetTest() throws ApiException {
        String org = null;
        OrganizationFull response = api.orgsGet(org);
        // TODO: test validations
    }

    /**
     * Get an organization membership for the authenticated user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsGetMembershipForAuthenticatedUserTest() throws ApiException {
        String org = null;
        OrgMembership response = api.orgsGetMembershipForAuthenticatedUser(org);
        // TODO: test validations
    }

    /**
     * Get organization membership for a user
     *
     * In order to get a user&#39;s membership with an organization, the authenticated user must be an organization member. The &#x60;state&#x60; parameter in the response can be used to identify the user&#39;s membership status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsGetMembershipForUserTest() throws ApiException {
        String org = null;
        String username = null;
        OrgMembership response = api.orgsGetMembershipForUser(org, username);
        // TODO: test validations
    }

    /**
     * Get an organization webhook
     *
     * Returns a webhook configured in an organization. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsGetWebhookTest() throws ApiException {
        String org = null;
        Integer hookId = null;
        OrgHook response = api.orgsGetWebhook(org, hookId);
        // TODO: test validations
    }

    /**
     * Get a webhook configuration for an organization
     *
     * Returns the webhook configuration for an organization. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook).\&quot;  Access tokens must have the &#x60;admin:org_hook&#x60; scope, and GitHub Apps must have the &#x60;organization_hooks:read&#x60; permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsGetWebhookConfigForOrgTest() throws ApiException {
        String org = null;
        Integer hookId = null;
        WebhookConfig response = api.orgsGetWebhookConfigForOrg(org, hookId);
        // TODO: test validations
    }

    /**
     * List organizations
     *
     * Lists all organizations, in the order that they were created on GitHub Enterprise Server.  **Note:** Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListTest() throws ApiException {
        Integer since = null;
        Integer perPage = null;
        List<OrganizationSimple> response = api.orgsList(since, perPage);
        // TODO: test validations
    }

    /**
     * List app installations for an organization
     *
     * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with &#x60;admin:read&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListAppInstallationsTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        OrgsListAppInstallations200Response response = api.orgsListAppInstallations(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List organizations for the authenticated user
     *
     * List organizations for the authenticated user.  **OAuth scope requirements**  This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with &#x60;read:org&#x60; scope, you can publicize your organization membership with &#x60;user&#x60; scope, etc.). Therefore, this API requires at least &#x60;user&#x60; or &#x60;read:org&#x60; scope. OAuth requests with insufficient scope receive a &#x60;403 Forbidden&#x60; response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListForAuthenticatedUserTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        List<OrganizationSimple> response = api.orgsListForAuthenticatedUser(perPage, page);
        // TODO: test validations
    }

    /**
     * List organizations for a user
     *
     * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListForUserTest() throws ApiException {
        String username = null;
        Integer perPage = null;
        Integer page = null;
        List<OrganizationSimple> response = api.orgsListForUser(username, perPage, page);
        // TODO: test validations
    }

    /**
     * List organization members
     *
     * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListMembersTest() throws ApiException {
        String org = null;
        String filter = null;
        String role = null;
        Integer perPage = null;
        Integer page = null;
        List<SimpleUser> response = api.orgsListMembers(org, filter, role, perPage, page);
        // TODO: test validations
    }

    /**
     * List organization memberships for the authenticated user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListMembershipsForAuthenticatedUserTest() throws ApiException {
        String state = null;
        Integer perPage = null;
        Integer page = null;
        List<OrgMembership> response = api.orgsListMembershipsForAuthenticatedUser(state, perPage, page);
        // TODO: test validations
    }

    /**
     * List outside collaborators for an organization
     *
     * List all users who are outside collaborators of an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListOutsideCollaboratorsTest() throws ApiException {
        String org = null;
        String filter = null;
        Integer perPage = null;
        Integer page = null;
        List<SimpleUser> response = api.orgsListOutsideCollaborators(org, filter, perPage, page);
        // TODO: test validations
    }

    /**
     * List public organization members
     *
     * Members of an organization can choose to have their membership publicized or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListPublicMembersTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        List<SimpleUser> response = api.orgsListPublicMembers(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List organization webhooks
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsListWebhooksTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        List<OrgHook> response = api.orgsListWebhooks(org, perPage, page);
        // TODO: test validations
    }

    /**
     * Ping an organization webhook
     *
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the hook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsPingWebhookTest() throws ApiException {
        String org = null;
        Integer hookId = null;
        api.orgsPingWebhook(org, hookId);
        // TODO: test validations
    }

    /**
     * Remove an organization member
     *
     * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization&#39;s repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsRemoveMemberTest() throws ApiException {
        String org = null;
        String username = null;
        api.orgsRemoveMember(org, username);
        // TODO: test validations
    }

    /**
     * Remove organization membership for a user
     *
     * In order to remove a user&#39;s membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsRemoveMembershipForUserTest() throws ApiException {
        String org = null;
        String username = null;
        api.orgsRemoveMembershipForUser(org, username);
        // TODO: test validations
    }

    /**
     * Remove outside collaborator from an organization
     *
     * Removing a user from this list will remove them from all the organization&#39;s repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsRemoveOutsideCollaboratorTest() throws ApiException {
        String org = null;
        String username = null;
        api.orgsRemoveOutsideCollaborator(org, username);
        // TODO: test validations
    }

    /**
     * Remove public organization membership for the authenticated user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsRemovePublicMembershipForAuthenticatedUserTest() throws ApiException {
        String org = null;
        String username = null;
        api.orgsRemovePublicMembershipForAuthenticatedUser(org, username);
        // TODO: test validations
    }

    /**
     * Set organization membership for a user
     *
     * Only authenticated organization owners can add a member to the organization or update the member&#39;s role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user&#39;s [membership status](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#get-organization-membership-for-a-user) will be &#x60;pending&#x60; until they accept the invitation.      *   Authenticated users can _update_ a user&#39;s membership by passing the &#x60;role&#x60; parameter. If the authenticated user changes a member&#39;s role to &#x60;admin&#x60;, the affected user will receive an email notifying them that they&#39;ve been made an organization owner. If the authenticated user changes an owner&#39;s role to &#x60;member&#x60;, no email will be sent.  **Rate limits**  To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsSetMembershipForUserTest() throws ApiException {
        String org = null;
        String username = null;
        OrgsSetMembershipForUserRequest orgsSetMembershipForUserRequest = null;
        OrgMembership response = api.orgsSetMembershipForUser(org, username, orgsSetMembershipForUserRequest);
        // TODO: test validations
    }

    /**
     * Set public organization membership for the authenticated user
     *
     * The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsSetPublicMembershipForAuthenticatedUserTest() throws ApiException {
        String org = null;
        String username = null;
        api.orgsSetPublicMembershipForAuthenticatedUser(org, username);
        // TODO: test validations
    }

    /**
     * Update an organization
     *
     * **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue &#x60;members_allowed_repository_creation_type&#x60; in favor of more granular permissions. The new input parameters are &#x60;members_can_create_public_repositories&#x60;, &#x60;members_can_create_private_repositories&#x60; for all organizations and &#x60;members_can_create_internal_repositories&#x60; for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Enables an authenticated organization owner with the &#x60;admin:org&#x60; scope to update the organization&#39;s profile and member privileges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsUpdateTest() throws ApiException {
        String org = null;
        OrgsUpdateRequest orgsUpdateRequest = null;
        OrganizationFull response = api.orgsUpdate(org, orgsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update an organization membership for the authenticated user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsUpdateMembershipForAuthenticatedUserTest() throws ApiException {
        String org = null;
        OrgsUpdateMembershipForAuthenticatedUserRequest orgsUpdateMembershipForAuthenticatedUserRequest = null;
        OrgMembership response = api.orgsUpdateMembershipForAuthenticatedUser(org, orgsUpdateMembershipForAuthenticatedUserRequest);
        // TODO: test validations
    }

    /**
     * Update an organization webhook
     *
     * Updates a webhook configured in an organization. When you update a webhook, the &#x60;secret&#x60; will be overwritten. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsUpdateWebhookTest() throws ApiException {
        String org = null;
        Integer hookId = null;
        OrgsUpdateWebhookRequest orgsUpdateWebhookRequest = null;
        OrgHook response = api.orgsUpdateWebhook(org, hookId, orgsUpdateWebhookRequest);
        // TODO: test validations
    }

    /**
     * Update a webhook configuration for an organization
     *
     * Updates the webhook configuration for an organization. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook).\&quot;  Access tokens must have the &#x60;admin:org_hook&#x60; scope, and GitHub Apps must have the &#x60;organization_hooks:write&#x60; permission.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgsUpdateWebhookConfigForOrgTest() throws ApiException {
        String org = null;
        Integer hookId = null;
        OrgsUpdateWebhookConfigForOrgRequest orgsUpdateWebhookConfigForOrgRequest = null;
        WebhookConfig response = api.orgsUpdateWebhookConfigForOrg(org, hookId, orgsUpdateWebhookConfigForOrgRequest);
        // TODO: test validations
    }

}
