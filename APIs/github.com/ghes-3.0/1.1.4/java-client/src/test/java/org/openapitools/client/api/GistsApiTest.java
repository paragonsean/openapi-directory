/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BaseGist;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.GistComment;
import org.openapitools.client.model.GistCommit;
import org.openapitools.client.model.GistSimple;
import org.openapitools.client.model.GistsCreateCommentRequest;
import org.openapitools.client.model.GistsCreateRequest;
import org.openapitools.client.model.GistsGet403Response;
import org.openapitools.client.model.GistsUpdateRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GistsApi
 */
@Disabled
public class GistsApiTest {

    private final GistsApi api = new GistsApi();

    /**
     * Check if a gist is starred
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsCheckIsStarredTest() throws ApiException {
        String gistId = null;
        api.gistsCheckIsStarred(gistId);
        // TODO: test validations
    }

    /**
     * Create a gist
     *
     * Allows you to add a new gist with one or more files.  **Note:** Don&#39;t name your files \&quot;gistfile\&quot; with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsCreateTest() throws ApiException {
        GistsCreateRequest gistsCreateRequest = null;
        GistSimple response = api.gistsCreate(gistsCreateRequest);
        // TODO: test validations
    }

    /**
     * Create a gist comment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsCreateCommentTest() throws ApiException {
        String gistId = null;
        GistsCreateCommentRequest gistsCreateCommentRequest = null;
        GistComment response = api.gistsCreateComment(gistId, gistsCreateCommentRequest);
        // TODO: test validations
    }

    /**
     * Delete a gist
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsDeleteTest() throws ApiException {
        String gistId = null;
        api.gistsDelete(gistId);
        // TODO: test validations
    }

    /**
     * Delete a gist comment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsDeleteCommentTest() throws ApiException {
        String gistId = null;
        Integer commentId = null;
        api.gistsDeleteComment(gistId, commentId);
        // TODO: test validations
    }

    /**
     * Fork a gist
     *
     * **Note**: This was previously &#x60;/gists/:gist_id/fork&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsForkTest() throws ApiException {
        String gistId = null;
        BaseGist response = api.gistsFork(gistId);
        // TODO: test validations
    }

    /**
     * Get a gist
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsGetTest() throws ApiException {
        String gistId = null;
        GistSimple response = api.gistsGet(gistId);
        // TODO: test validations
    }

    /**
     * Get a gist comment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsGetCommentTest() throws ApiException {
        String gistId = null;
        Integer commentId = null;
        GistComment response = api.gistsGetComment(gistId, commentId);
        // TODO: test validations
    }

    /**
     * Get a gist revision
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsGetRevisionTest() throws ApiException {
        String gistId = null;
        String sha = null;
        GistSimple response = api.gistsGetRevision(gistId, sha);
        // TODO: test validations
    }

    /**
     * List gists for the authenticated user
     *
     * Lists the authenticated user&#39;s gists or if called anonymously, this endpoint returns all public gists:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsListTest() throws ApiException {
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<BaseGist> response = api.gistsList(since, perPage, page);
        // TODO: test validations
    }

    /**
     * List gist comments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsListCommentsTest() throws ApiException {
        String gistId = null;
        Integer perPage = null;
        Integer page = null;
        List<GistComment> response = api.gistsListComments(gistId, perPage, page);
        // TODO: test validations
    }

    /**
     * List gist commits
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsListCommitsTest() throws ApiException {
        String gistId = null;
        Integer perPage = null;
        Integer page = null;
        List<GistCommit> response = api.gistsListCommits(gistId, perPage, page);
        // TODO: test validations
    }

    /**
     * List gists for a user
     *
     * Lists public gists for the specified user:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsListForUserTest() throws ApiException {
        String username = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<BaseGist> response = api.gistsListForUser(username, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List gist forks
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsListForksTest() throws ApiException {
        String gistId = null;
        Integer perPage = null;
        Integer page = null;
        List<GistSimple> response = api.gistsListForks(gistId, perPage, page);
        // TODO: test validations
    }

    /**
     * List public gists
     *
     * List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsListPublicTest() throws ApiException {
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<BaseGist> response = api.gistsListPublic(since, perPage, page);
        // TODO: test validations
    }

    /**
     * List starred gists
     *
     * List the authenticated user&#39;s starred gists:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsListStarredTest() throws ApiException {
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<BaseGist> response = api.gistsListStarred(since, perPage, page);
        // TODO: test validations
    }

    /**
     * Star a gist
     *
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsStarTest() throws ApiException {
        String gistId = null;
        api.gistsStar(gistId);
        // TODO: test validations
    }

    /**
     * Unstar a gist
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsUnstarTest() throws ApiException {
        String gistId = null;
        api.gistsUnstar(gistId);
        // TODO: test validations
    }

    /**
     * Update a gist
     *
     * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren&#39;t explicitly changed during an edit are unchanged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsUpdateTest() throws ApiException {
        String gistId = null;
        GistsUpdateRequest gistsUpdateRequest = null;
        GistSimple response = api.gistsUpdate(gistId, gistsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update a gist comment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gistsUpdateCommentTest() throws ApiException {
        String gistId = null;
        Integer commentId = null;
        GistsCreateCommentRequest gistsCreateCommentRequest = null;
        GistComment response = api.gistsUpdateComment(gistId, commentId, gistsCreateCommentRequest);
        // TODO: test validations
    }

}
