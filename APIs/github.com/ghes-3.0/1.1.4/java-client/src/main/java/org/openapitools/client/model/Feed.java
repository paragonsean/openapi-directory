/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeedLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Feed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:54.189993-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Feed {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private FeedLinks links;

  public static final String SERIALIZED_NAME_CURRENT_USER_ACTOR_URL = "current_user_actor_url";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ACTOR_URL)
  private String currentUserActorUrl;

  public static final String SERIALIZED_NAME_CURRENT_USER_ORGANIZATION_URL = "current_user_organization_url";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ORGANIZATION_URL)
  private String currentUserOrganizationUrl;

  public static final String SERIALIZED_NAME_CURRENT_USER_ORGANIZATION_URLS = "current_user_organization_urls";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ORGANIZATION_URLS)
  private List<URI> currentUserOrganizationUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_USER_PUBLIC_URL = "current_user_public_url";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_PUBLIC_URL)
  private String currentUserPublicUrl;

  public static final String SERIALIZED_NAME_CURRENT_USER_URL = "current_user_url";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_URL)
  private String currentUserUrl;

  public static final String SERIALIZED_NAME_TIMELINE_URL = "timeline_url";
  @SerializedName(SERIALIZED_NAME_TIMELINE_URL)
  private String timelineUrl;

  public static final String SERIALIZED_NAME_USER_URL = "user_url";
  @SerializedName(SERIALIZED_NAME_USER_URL)
  private String userUrl;

  public Feed() {
  }

  public Feed links(FeedLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public FeedLinks getLinks() {
    return links;
  }

  public void setLinks(FeedLinks links) {
    this.links = links;
  }


  public Feed currentUserActorUrl(String currentUserActorUrl) {
    this.currentUserActorUrl = currentUserActorUrl;
    return this;
  }

  /**
   * Get currentUserActorUrl
   * @return currentUserActorUrl
   */
  @javax.annotation.Nullable
  public String getCurrentUserActorUrl() {
    return currentUserActorUrl;
  }

  public void setCurrentUserActorUrl(String currentUserActorUrl) {
    this.currentUserActorUrl = currentUserActorUrl;
  }


  public Feed currentUserOrganizationUrl(String currentUserOrganizationUrl) {
    this.currentUserOrganizationUrl = currentUserOrganizationUrl;
    return this;
  }

  /**
   * Get currentUserOrganizationUrl
   * @return currentUserOrganizationUrl
   */
  @javax.annotation.Nullable
  public String getCurrentUserOrganizationUrl() {
    return currentUserOrganizationUrl;
  }

  public void setCurrentUserOrganizationUrl(String currentUserOrganizationUrl) {
    this.currentUserOrganizationUrl = currentUserOrganizationUrl;
  }


  public Feed currentUserOrganizationUrls(List<URI> currentUserOrganizationUrls) {
    this.currentUserOrganizationUrls = currentUserOrganizationUrls;
    return this;
  }

  public Feed addCurrentUserOrganizationUrlsItem(URI currentUserOrganizationUrlsItem) {
    if (this.currentUserOrganizationUrls == null) {
      this.currentUserOrganizationUrls = new ArrayList<>();
    }
    this.currentUserOrganizationUrls.add(currentUserOrganizationUrlsItem);
    return this;
  }

  /**
   * Get currentUserOrganizationUrls
   * @return currentUserOrganizationUrls
   */
  @javax.annotation.Nullable
  public List<URI> getCurrentUserOrganizationUrls() {
    return currentUserOrganizationUrls;
  }

  public void setCurrentUserOrganizationUrls(List<URI> currentUserOrganizationUrls) {
    this.currentUserOrganizationUrls = currentUserOrganizationUrls;
  }


  public Feed currentUserPublicUrl(String currentUserPublicUrl) {
    this.currentUserPublicUrl = currentUserPublicUrl;
    return this;
  }

  /**
   * Get currentUserPublicUrl
   * @return currentUserPublicUrl
   */
  @javax.annotation.Nullable
  public String getCurrentUserPublicUrl() {
    return currentUserPublicUrl;
  }

  public void setCurrentUserPublicUrl(String currentUserPublicUrl) {
    this.currentUserPublicUrl = currentUserPublicUrl;
  }


  public Feed currentUserUrl(String currentUserUrl) {
    this.currentUserUrl = currentUserUrl;
    return this;
  }

  /**
   * Get currentUserUrl
   * @return currentUserUrl
   */
  @javax.annotation.Nullable
  public String getCurrentUserUrl() {
    return currentUserUrl;
  }

  public void setCurrentUserUrl(String currentUserUrl) {
    this.currentUserUrl = currentUserUrl;
  }


  public Feed timelineUrl(String timelineUrl) {
    this.timelineUrl = timelineUrl;
    return this;
  }

  /**
   * Get timelineUrl
   * @return timelineUrl
   */
  @javax.annotation.Nonnull
  public String getTimelineUrl() {
    return timelineUrl;
  }

  public void setTimelineUrl(String timelineUrl) {
    this.timelineUrl = timelineUrl;
  }


  public Feed userUrl(String userUrl) {
    this.userUrl = userUrl;
    return this;
  }

  /**
   * Get userUrl
   * @return userUrl
   */
  @javax.annotation.Nonnull
  public String getUserUrl() {
    return userUrl;
  }

  public void setUserUrl(String userUrl) {
    this.userUrl = userUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feed feed = (Feed) o;
    return Objects.equals(this.links, feed.links) &&
        Objects.equals(this.currentUserActorUrl, feed.currentUserActorUrl) &&
        Objects.equals(this.currentUserOrganizationUrl, feed.currentUserOrganizationUrl) &&
        Objects.equals(this.currentUserOrganizationUrls, feed.currentUserOrganizationUrls) &&
        Objects.equals(this.currentUserPublicUrl, feed.currentUserPublicUrl) &&
        Objects.equals(this.currentUserUrl, feed.currentUserUrl) &&
        Objects.equals(this.timelineUrl, feed.timelineUrl) &&
        Objects.equals(this.userUrl, feed.userUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, currentUserActorUrl, currentUserOrganizationUrl, currentUserOrganizationUrls, currentUserPublicUrl, currentUserUrl, timelineUrl, userUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feed {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    currentUserActorUrl: ").append(toIndentedString(currentUserActorUrl)).append("\n");
    sb.append("    currentUserOrganizationUrl: ").append(toIndentedString(currentUserOrganizationUrl)).append("\n");
    sb.append("    currentUserOrganizationUrls: ").append(toIndentedString(currentUserOrganizationUrls)).append("\n");
    sb.append("    currentUserPublicUrl: ").append(toIndentedString(currentUserPublicUrl)).append("\n");
    sb.append("    currentUserUrl: ").append(toIndentedString(currentUserUrl)).append("\n");
    sb.append("    timelineUrl: ").append(toIndentedString(timelineUrl)).append("\n");
    sb.append("    userUrl: ").append(toIndentedString(userUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("current_user_actor_url");
    openapiFields.add("current_user_organization_url");
    openapiFields.add("current_user_organization_urls");
    openapiFields.add("current_user_public_url");
    openapiFields.add("current_user_url");
    openapiFields.add("timeline_url");
    openapiFields.add("user_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("timeline_url");
    openapiRequiredFields.add("user_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Feed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Feed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feed is not found in the empty JSON string", Feed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Feed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Feed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `_links`
      FeedLinks.validateJsonElement(jsonObj.get("_links"));
      if ((jsonObj.get("current_user_actor_url") != null && !jsonObj.get("current_user_actor_url").isJsonNull()) && !jsonObj.get("current_user_actor_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_actor_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_actor_url").toString()));
      }
      if ((jsonObj.get("current_user_organization_url") != null && !jsonObj.get("current_user_organization_url").isJsonNull()) && !jsonObj.get("current_user_organization_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_organization_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_organization_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("current_user_organization_urls") != null && !jsonObj.get("current_user_organization_urls").isJsonNull() && !jsonObj.get("current_user_organization_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_organization_urls` to be an array in the JSON string but got `%s`", jsonObj.get("current_user_organization_urls").toString()));
      }
      if ((jsonObj.get("current_user_public_url") != null && !jsonObj.get("current_user_public_url").isJsonNull()) && !jsonObj.get("current_user_public_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_public_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_public_url").toString()));
      }
      if ((jsonObj.get("current_user_url") != null && !jsonObj.get("current_user_url").isJsonNull()) && !jsonObj.get("current_user_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_url").toString()));
      }
      if (!jsonObj.get("timeline_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeline_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeline_url").toString()));
      }
      if (!jsonObj.get("user_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feed.class));

       return (TypeAdapter<T>) new TypeAdapter<Feed>() {
           @Override
           public void write(JsonWriter out, Feed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Feed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Feed
   * @throws IOException if the JSON string is invalid with respect to Feed
   */
  public static Feed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feed.class);
  }

  /**
   * Convert an instance of Feed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

