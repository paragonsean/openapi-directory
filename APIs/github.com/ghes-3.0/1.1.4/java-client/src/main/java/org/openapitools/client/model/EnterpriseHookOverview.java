/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseHookOverview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:54.189993-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseHookOverview {
  public static final String SERIALIZED_NAME_ACTIVE_HOOKS = "active_hooks";
  @SerializedName(SERIALIZED_NAME_ACTIVE_HOOKS)
  private Integer activeHooks;

  public static final String SERIALIZED_NAME_INACTIVE_HOOKS = "inactive_hooks";
  @SerializedName(SERIALIZED_NAME_INACTIVE_HOOKS)
  private Integer inactiveHooks;

  public static final String SERIALIZED_NAME_TOTAL_HOOKS = "total_hooks";
  @SerializedName(SERIALIZED_NAME_TOTAL_HOOKS)
  private Integer totalHooks;

  public EnterpriseHookOverview() {
  }

  public EnterpriseHookOverview activeHooks(Integer activeHooks) {
    this.activeHooks = activeHooks;
    return this;
  }

  /**
   * Get activeHooks
   * @return activeHooks
   */
  @javax.annotation.Nonnull
  public Integer getActiveHooks() {
    return activeHooks;
  }

  public void setActiveHooks(Integer activeHooks) {
    this.activeHooks = activeHooks;
  }


  public EnterpriseHookOverview inactiveHooks(Integer inactiveHooks) {
    this.inactiveHooks = inactiveHooks;
    return this;
  }

  /**
   * Get inactiveHooks
   * @return inactiveHooks
   */
  @javax.annotation.Nonnull
  public Integer getInactiveHooks() {
    return inactiveHooks;
  }

  public void setInactiveHooks(Integer inactiveHooks) {
    this.inactiveHooks = inactiveHooks;
  }


  public EnterpriseHookOverview totalHooks(Integer totalHooks) {
    this.totalHooks = totalHooks;
    return this;
  }

  /**
   * Get totalHooks
   * @return totalHooks
   */
  @javax.annotation.Nonnull
  public Integer getTotalHooks() {
    return totalHooks;
  }

  public void setTotalHooks(Integer totalHooks) {
    this.totalHooks = totalHooks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseHookOverview enterpriseHookOverview = (EnterpriseHookOverview) o;
    return Objects.equals(this.activeHooks, enterpriseHookOverview.activeHooks) &&
        Objects.equals(this.inactiveHooks, enterpriseHookOverview.inactiveHooks) &&
        Objects.equals(this.totalHooks, enterpriseHookOverview.totalHooks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeHooks, inactiveHooks, totalHooks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseHookOverview {\n");
    sb.append("    activeHooks: ").append(toIndentedString(activeHooks)).append("\n");
    sb.append("    inactiveHooks: ").append(toIndentedString(inactiveHooks)).append("\n");
    sb.append("    totalHooks: ").append(toIndentedString(totalHooks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_hooks");
    openapiFields.add("inactive_hooks");
    openapiFields.add("total_hooks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active_hooks");
    openapiRequiredFields.add("inactive_hooks");
    openapiRequiredFields.add("total_hooks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseHookOverview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseHookOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseHookOverview is not found in the empty JSON string", EnterpriseHookOverview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseHookOverview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseHookOverview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnterpriseHookOverview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseHookOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseHookOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseHookOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseHookOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseHookOverview>() {
           @Override
           public void write(JsonWriter out, EnterpriseHookOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseHookOverview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseHookOverview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseHookOverview
   * @throws IOException if the JSON string is invalid with respect to EnterpriseHookOverview
   */
  public static EnterpriseHookOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseHookOverview.class);
  }

  /**
   * Convert an instance of EnterpriseHookOverview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

