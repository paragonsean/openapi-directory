/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Api Overview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:54.189993-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiOverview {
  public static final String SERIALIZED_NAME_DEPENDABOT = "dependabot";
  @SerializedName(SERIALIZED_NAME_DEPENDABOT)
  private List<String> dependabot = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTALLED_VERSION = "installed_version";
  @SerializedName(SERIALIZED_NAME_INSTALLED_VERSION)
  private String installedVersion;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<String> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFIABLE_PASSWORD_AUTHENTICATION = "verifiable_password_authentication";
  @SerializedName(SERIALIZED_NAME_VERIFIABLE_PASSWORD_AUTHENTICATION)
  private Boolean verifiablePasswordAuthentication;

  public ApiOverview() {
  }

  public ApiOverview dependabot(List<String> dependabot) {
    this.dependabot = dependabot;
    return this;
  }

  public ApiOverview addDependabotItem(String dependabotItem) {
    if (this.dependabot == null) {
      this.dependabot = new ArrayList<>();
    }
    this.dependabot.add(dependabotItem);
    return this;
  }

  /**
   * Get dependabot
   * @return dependabot
   */
  @javax.annotation.Nullable
  public List<String> getDependabot() {
    return dependabot;
  }

  public void setDependabot(List<String> dependabot) {
    this.dependabot = dependabot;
  }


  public ApiOverview installedVersion(String installedVersion) {
    this.installedVersion = installedVersion;
    return this;
  }

  /**
   * Get installedVersion
   * @return installedVersion
   */
  @javax.annotation.Nullable
  public String getInstalledVersion() {
    return installedVersion;
  }

  public void setInstalledVersion(String installedVersion) {
    this.installedVersion = installedVersion;
  }


  public ApiOverview packages(List<String> packages) {
    this.packages = packages;
    return this;
  }

  public ApiOverview addPackagesItem(String packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * Get packages
   * @return packages
   */
  @javax.annotation.Nullable
  public List<String> getPackages() {
    return packages;
  }

  public void setPackages(List<String> packages) {
    this.packages = packages;
  }


  public ApiOverview verifiablePasswordAuthentication(Boolean verifiablePasswordAuthentication) {
    this.verifiablePasswordAuthentication = verifiablePasswordAuthentication;
    return this;
  }

  /**
   * Get verifiablePasswordAuthentication
   * @return verifiablePasswordAuthentication
   */
  @javax.annotation.Nonnull
  public Boolean getVerifiablePasswordAuthentication() {
    return verifiablePasswordAuthentication;
  }

  public void setVerifiablePasswordAuthentication(Boolean verifiablePasswordAuthentication) {
    this.verifiablePasswordAuthentication = verifiablePasswordAuthentication;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiOverview apiOverview = (ApiOverview) o;
    return Objects.equals(this.dependabot, apiOverview.dependabot) &&
        Objects.equals(this.installedVersion, apiOverview.installedVersion) &&
        Objects.equals(this.packages, apiOverview.packages) &&
        Objects.equals(this.verifiablePasswordAuthentication, apiOverview.verifiablePasswordAuthentication);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependabot, installedVersion, packages, verifiablePasswordAuthentication);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiOverview {\n");
    sb.append("    dependabot: ").append(toIndentedString(dependabot)).append("\n");
    sb.append("    installedVersion: ").append(toIndentedString(installedVersion)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    verifiablePasswordAuthentication: ").append(toIndentedString(verifiablePasswordAuthentication)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dependabot");
    openapiFields.add("installed_version");
    openapiFields.add("packages");
    openapiFields.add("verifiable_password_authentication");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verifiable_password_authentication");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiOverview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiOverview is not found in the empty JSON string", ApiOverview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiOverview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiOverview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiOverview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dependabot") != null && !jsonObj.get("dependabot").isJsonNull() && !jsonObj.get("dependabot").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependabot` to be an array in the JSON string but got `%s`", jsonObj.get("dependabot").toString()));
      }
      if ((jsonObj.get("installed_version") != null && !jsonObj.get("installed_version").isJsonNull()) && !jsonObj.get("installed_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installed_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installed_version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull() && !jsonObj.get("packages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiOverview>() {
           @Override
           public void write(JsonWriter out, ApiOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiOverview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiOverview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiOverview
   * @throws IOException if the JSON string is invalid with respect to ApiOverview
   */
  public static ApiOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiOverview.class);
  }

  /**
   * Convert an instance of ApiOverview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

