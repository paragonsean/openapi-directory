/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NullableTeamSimple;
import org.openapitools.client.model.OrganizationFull;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:54.189993-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamFull {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LDAP_DN = "ldap_dn";
  @SerializedName(SERIALIZED_NAME_LDAP_DN)
  private String ldapDn;

  public static final String SERIALIZED_NAME_MEMBERS_COUNT = "members_count";
  @SerializedName(SERIALIZED_NAME_MEMBERS_COUNT)
  private Integer membersCount;

  public static final String SERIALIZED_NAME_MEMBERS_URL = "members_url";
  @SerializedName(SERIALIZED_NAME_MEMBERS_URL)
  private String membersUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private OrganizationFull organization;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private NullableTeamSimple parent;

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private String permission;

  /**
   * The level of privacy this team should have
   */
  @JsonAdapter(PrivacyEnum.Adapter.class)
  public enum PrivacyEnum {
    CLOSED("closed"),
    
    SECRET("secret");

    private String value;

    PrivacyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyEnum fromValue(String value) {
      for (PrivacyEnum b : PrivacyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivacyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivacyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private PrivacyEnum privacy;

  public static final String SERIALIZED_NAME_REPOS_COUNT = "repos_count";
  @SerializedName(SERIALIZED_NAME_REPOS_COUNT)
  private Integer reposCount;

  public static final String SERIALIZED_NAME_REPOSITORIES_URL = "repositories_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORIES_URL)
  private URI repositoriesUrl;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public TeamFull() {
  }

  public TeamFull createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TeamFull description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TeamFull htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public TeamFull id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the team
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public TeamFull ldapDn(String ldapDn) {
    this.ldapDn = ldapDn;
    return this;
  }

  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @return ldapDn
   */
  @javax.annotation.Nullable
  public String getLdapDn() {
    return ldapDn;
  }

  public void setLdapDn(String ldapDn) {
    this.ldapDn = ldapDn;
  }


  public TeamFull membersCount(Integer membersCount) {
    this.membersCount = membersCount;
    return this;
  }

  /**
   * Get membersCount
   * @return membersCount
   */
  @javax.annotation.Nonnull
  public Integer getMembersCount() {
    return membersCount;
  }

  public void setMembersCount(Integer membersCount) {
    this.membersCount = membersCount;
  }


  public TeamFull membersUrl(String membersUrl) {
    this.membersUrl = membersUrl;
    return this;
  }

  /**
   * Get membersUrl
   * @return membersUrl
   */
  @javax.annotation.Nonnull
  public String getMembersUrl() {
    return membersUrl;
  }

  public void setMembersUrl(String membersUrl) {
    this.membersUrl = membersUrl;
  }


  public TeamFull name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the team
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TeamFull nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public TeamFull organization(OrganizationFull organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nonnull
  public OrganizationFull getOrganization() {
    return organization;
  }

  public void setOrganization(OrganizationFull organization) {
    this.organization = organization;
  }


  public TeamFull parent(NullableTeamSimple parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public NullableTeamSimple getParent() {
    return parent;
  }

  public void setParent(NullableTeamSimple parent) {
    this.parent = parent;
  }


  public TeamFull permission(String permission) {
    this.permission = permission;
    return this;
  }

  /**
   * Permission that the team will have for its repositories
   * @return permission
   */
  @javax.annotation.Nonnull
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }


  public TeamFull privacy(PrivacyEnum privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * The level of privacy this team should have
   * @return privacy
   */
  @javax.annotation.Nullable
  public PrivacyEnum getPrivacy() {
    return privacy;
  }

  public void setPrivacy(PrivacyEnum privacy) {
    this.privacy = privacy;
  }


  public TeamFull reposCount(Integer reposCount) {
    this.reposCount = reposCount;
    return this;
  }

  /**
   * Get reposCount
   * @return reposCount
   */
  @javax.annotation.Nonnull
  public Integer getReposCount() {
    return reposCount;
  }

  public void setReposCount(Integer reposCount) {
    this.reposCount = reposCount;
  }


  public TeamFull repositoriesUrl(URI repositoriesUrl) {
    this.repositoriesUrl = repositoriesUrl;
    return this;
  }

  /**
   * Get repositoriesUrl
   * @return repositoriesUrl
   */
  @javax.annotation.Nonnull
  public URI getRepositoriesUrl() {
    return repositoriesUrl;
  }

  public void setRepositoriesUrl(URI repositoriesUrl) {
    this.repositoriesUrl = repositoriesUrl;
  }


  public TeamFull slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public TeamFull updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TeamFull url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * URL for the team
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamFull teamFull = (TeamFull) o;
    return Objects.equals(this.createdAt, teamFull.createdAt) &&
        Objects.equals(this.description, teamFull.description) &&
        Objects.equals(this.htmlUrl, teamFull.htmlUrl) &&
        Objects.equals(this.id, teamFull.id) &&
        Objects.equals(this.ldapDn, teamFull.ldapDn) &&
        Objects.equals(this.membersCount, teamFull.membersCount) &&
        Objects.equals(this.membersUrl, teamFull.membersUrl) &&
        Objects.equals(this.name, teamFull.name) &&
        Objects.equals(this.nodeId, teamFull.nodeId) &&
        Objects.equals(this.organization, teamFull.organization) &&
        Objects.equals(this.parent, teamFull.parent) &&
        Objects.equals(this.permission, teamFull.permission) &&
        Objects.equals(this.privacy, teamFull.privacy) &&
        Objects.equals(this.reposCount, teamFull.reposCount) &&
        Objects.equals(this.repositoriesUrl, teamFull.repositoriesUrl) &&
        Objects.equals(this.slug, teamFull.slug) &&
        Objects.equals(this.updatedAt, teamFull.updatedAt) &&
        Objects.equals(this.url, teamFull.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, htmlUrl, id, ldapDn, membersCount, membersUrl, name, nodeId, organization, parent, permission, privacy, reposCount, repositoriesUrl, slug, updatedAt, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamFull {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ldapDn: ").append(toIndentedString(ldapDn)).append("\n");
    sb.append("    membersCount: ").append(toIndentedString(membersCount)).append("\n");
    sb.append("    membersUrl: ").append(toIndentedString(membersUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    reposCount: ").append(toIndentedString(reposCount)).append("\n");
    sb.append("    repositoriesUrl: ").append(toIndentedString(repositoriesUrl)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("ldap_dn");
    openapiFields.add("members_count");
    openapiFields.add("members_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("organization");
    openapiFields.add("parent");
    openapiFields.add("permission");
    openapiFields.add("privacy");
    openapiFields.add("repos_count");
    openapiFields.add("repositories_url");
    openapiFields.add("slug");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("members_count");
    openapiRequiredFields.add("members_url");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("organization");
    openapiRequiredFields.add("permission");
    openapiRequiredFields.add("repos_count");
    openapiRequiredFields.add("repositories_url");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamFull
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamFull.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamFull is not found in the empty JSON string", TeamFull.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamFull.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamFull` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamFull.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("ldap_dn") != null && !jsonObj.get("ldap_dn").isJsonNull()) && !jsonObj.get("ldap_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_dn").toString()));
      }
      if (!jsonObj.get("members_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      // validate the required field `organization`
      OrganizationFull.validateJsonElement(jsonObj.get("organization"));
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        NullableTeamSimple.validateJsonElement(jsonObj.get("parent"));
      }
      if (!jsonObj.get("permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission").toString()));
      }
      if ((jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) && !jsonObj.get("privacy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacy").toString()));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        PrivacyEnum.validateJsonElement(jsonObj.get("privacy"));
      }
      if (!jsonObj.get("repositories_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositories_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositories_url").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamFull.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamFull' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamFull> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamFull.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamFull>() {
           @Override
           public void write(JsonWriter out, TeamFull value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamFull read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamFull given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamFull
   * @throws IOException if the JSON string is invalid with respect to TeamFull
   */
  public static TeamFull fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamFull.class);
  }

  /**
   * Convert an instance of TeamFull to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

