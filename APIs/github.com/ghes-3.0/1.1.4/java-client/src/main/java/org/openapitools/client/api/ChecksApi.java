/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckAnnotation;
import org.openapitools.client.model.CheckRun;
import org.openapitools.client.model.CheckSuite;
import org.openapitools.client.model.CheckSuitePreference;
import org.openapitools.client.model.ChecksCreateRequest;
import org.openapitools.client.model.ChecksCreateSuiteRequest;
import org.openapitools.client.model.ChecksListForSuite200Response;
import org.openapitools.client.model.ChecksListSuitesForRef200Response;
import org.openapitools.client.model.ChecksSetSuitesPreferencesRequest;
import org.openapitools.client.model.ChecksUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChecksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChecksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChecksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checksCreate
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run">Create a check run Documentation</a>
     */
    public okhttp3.Call checksCreateCall(String owner, String repo, ChecksCreateRequest checksCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checksCreateRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksCreateValidateBeforeCall(String owner, String repo, ChecksCreateRequest checksCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksCreate(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksCreate(Async)");
        }

        // verify the required parameter 'checksCreateRequest' is set
        if (checksCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'checksCreateRequest' when calling checksCreate(Async)");
        }

        return checksCreateCall(owner, repo, checksCreateRequest, _callback);

    }

    /**
     * Create a check run
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Creates a new check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check runs.  In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateRequest  (required)
     * @return CheckRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run">Create a check run Documentation</a>
     */
    public CheckRun checksCreate(String owner, String repo, ChecksCreateRequest checksCreateRequest) throws ApiException {
        ApiResponse<CheckRun> localVarResp = checksCreateWithHttpInfo(owner, repo, checksCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a check run
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Creates a new check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check runs.  In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateRequest  (required)
     * @return ApiResponse&lt;CheckRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run">Create a check run Documentation</a>
     */
    public ApiResponse<CheckRun> checksCreateWithHttpInfo(String owner, String repo, ChecksCreateRequest checksCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = checksCreateValidateBeforeCall(owner, repo, checksCreateRequest, null);
        Type localVarReturnType = new TypeToken<CheckRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a check run (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Creates a new check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check runs.  In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run">Create a check run Documentation</a>
     */
    public okhttp3.Call checksCreateAsync(String owner, String repo, ChecksCreateRequest checksCreateRequest, final ApiCallback<CheckRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksCreateValidateBeforeCall(owner, repo, checksCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksCreateSuite
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateSuiteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> when the suite already existed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when the suite was created </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite">Create a check suite Documentation</a>
     */
    public okhttp3.Call checksCreateSuiteCall(String owner, String repo, ChecksCreateSuiteRequest checksCreateSuiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checksCreateSuiteRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-suites"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksCreateSuiteValidateBeforeCall(String owner, String repo, ChecksCreateSuiteRequest checksCreateSuiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksCreateSuite(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksCreateSuite(Async)");
        }

        // verify the required parameter 'checksCreateSuiteRequest' is set
        if (checksCreateSuiteRequest == null) {
            throw new ApiException("Missing the required parameter 'checksCreateSuiteRequest' when calling checksCreateSuite(Async)");
        }

        return checksCreateSuiteCall(owner, repo, checksCreateSuiteRequest, _callback);

    }

    /**
     * Create a check suite
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you&#39;ve disabled automatic creation using \&quot;[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites)\&quot;. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check suites.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateSuiteRequest  (required)
     * @return CheckSuite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> when the suite already existed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when the suite was created </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite">Create a check suite Documentation</a>
     */
    public CheckSuite checksCreateSuite(String owner, String repo, ChecksCreateSuiteRequest checksCreateSuiteRequest) throws ApiException {
        ApiResponse<CheckSuite> localVarResp = checksCreateSuiteWithHttpInfo(owner, repo, checksCreateSuiteRequest);
        return localVarResp.getData();
    }

    /**
     * Create a check suite
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you&#39;ve disabled automatic creation using \&quot;[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites)\&quot;. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check suites.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateSuiteRequest  (required)
     * @return ApiResponse&lt;CheckSuite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> when the suite already existed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when the suite was created </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite">Create a check suite Documentation</a>
     */
    public ApiResponse<CheckSuite> checksCreateSuiteWithHttpInfo(String owner, String repo, ChecksCreateSuiteRequest checksCreateSuiteRequest) throws ApiException {
        okhttp3.Call localVarCall = checksCreateSuiteValidateBeforeCall(owner, repo, checksCreateSuiteRequest, null);
        Type localVarReturnType = new TypeToken<CheckSuite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a check suite (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you&#39;ve disabled automatic creation using \&quot;[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites)\&quot;. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check suites.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksCreateSuiteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> when the suite already existed </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when the suite was created </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite">Create a check suite Documentation</a>
     */
    public okhttp3.Call checksCreateSuiteAsync(String owner, String repo, ChecksCreateSuiteRequest checksCreateSuiteRequest, final ApiCallback<CheckSuite> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksCreateSuiteValidateBeforeCall(owner, repo, checksCreateSuiteRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckSuite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksGet
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-run">Get a check run Documentation</a>
     */
    public okhttp3.Call checksGetCall(String owner, String repo, Integer checkRunId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-runs/{check_run_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "check_run_id" + "}", localVarApiClient.escapeString(checkRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksGetValidateBeforeCall(String owner, String repo, Integer checkRunId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksGet(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksGet(Async)");
        }

        // verify the required parameter 'checkRunId' is set
        if (checkRunId == null) {
            throw new ApiException("Missing the required parameter 'checkRunId' when calling checksGet(Async)");
        }

        return checksGetCall(owner, repo, checkRunId, _callback);

    }

    /**
     * Get a check run
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Gets a single check run using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @return CheckRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-run">Get a check run Documentation</a>
     */
    public CheckRun checksGet(String owner, String repo, Integer checkRunId) throws ApiException {
        ApiResponse<CheckRun> localVarResp = checksGetWithHttpInfo(owner, repo, checkRunId);
        return localVarResp.getData();
    }

    /**
     * Get a check run
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Gets a single check run using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @return ApiResponse&lt;CheckRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-run">Get a check run Documentation</a>
     */
    public ApiResponse<CheckRun> checksGetWithHttpInfo(String owner, String repo, Integer checkRunId) throws ApiException {
        okhttp3.Call localVarCall = checksGetValidateBeforeCall(owner, repo, checkRunId, null);
        Type localVarReturnType = new TypeToken<CheckRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a check run (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Gets a single check run using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-run">Get a check run Documentation</a>
     */
    public okhttp3.Call checksGetAsync(String owner, String repo, Integer checkRunId, final ApiCallback<CheckRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksGetValidateBeforeCall(owner, repo, checkRunId, _callback);
        Type localVarReturnType = new TypeToken<CheckRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksGetSuite
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-suite">Get a check suite Documentation</a>
     */
    public okhttp3.Call checksGetSuiteCall(String owner, String repo, Integer checkSuiteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-suites/{check_suite_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "check_suite_id" + "}", localVarApiClient.escapeString(checkSuiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksGetSuiteValidateBeforeCall(String owner, String repo, Integer checkSuiteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksGetSuite(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksGetSuite(Async)");
        }

        // verify the required parameter 'checkSuiteId' is set
        if (checkSuiteId == null) {
            throw new ApiException("Missing the required parameter 'checkSuiteId' when calling checksGetSuite(Async)");
        }

        return checksGetSuiteCall(owner, repo, checkSuiteId, _callback);

    }

    /**
     * Get a check suite
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Gets a single check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @return CheckSuite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-suite">Get a check suite Documentation</a>
     */
    public CheckSuite checksGetSuite(String owner, String repo, Integer checkSuiteId) throws ApiException {
        ApiResponse<CheckSuite> localVarResp = checksGetSuiteWithHttpInfo(owner, repo, checkSuiteId);
        return localVarResp.getData();
    }

    /**
     * Get a check suite
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Gets a single check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @return ApiResponse&lt;CheckSuite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-suite">Get a check suite Documentation</a>
     */
    public ApiResponse<CheckSuite> checksGetSuiteWithHttpInfo(String owner, String repo, Integer checkSuiteId) throws ApiException {
        okhttp3.Call localVarCall = checksGetSuiteValidateBeforeCall(owner, repo, checkSuiteId, null);
        Type localVarReturnType = new TypeToken<CheckSuite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a check suite (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Gets a single check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#get-a-check-suite">Get a check suite Documentation</a>
     */
    public okhttp3.Call checksGetSuiteAsync(String owner, String repo, Integer checkSuiteId, final ApiCallback<CheckSuite> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksGetSuiteValidateBeforeCall(owner, repo, checkSuiteId, _callback);
        Type localVarReturnType = new TypeToken<CheckSuite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksListAnnotations
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-run-annotations">List check run annotations Documentation</a>
     */
    public okhttp3.Call checksListAnnotationsCall(String owner, String repo, Integer checkRunId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "check_run_id" + "}", localVarApiClient.escapeString(checkRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksListAnnotationsValidateBeforeCall(String owner, String repo, Integer checkRunId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksListAnnotations(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksListAnnotations(Async)");
        }

        // verify the required parameter 'checkRunId' is set
        if (checkRunId == null) {
            throw new ApiException("Missing the required parameter 'checkRunId' when calling checksListAnnotations(Async)");
        }

        return checksListAnnotationsCall(owner, repo, checkRunId, perPage, page, _callback);

    }

    /**
     * List check run annotations
     * Lists annotations for a check run using the annotation &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get annotations for a check run in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;CheckAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-run-annotations">List check run annotations Documentation</a>
     */
    public List<CheckAnnotation> checksListAnnotations(String owner, String repo, Integer checkRunId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<CheckAnnotation>> localVarResp = checksListAnnotationsWithHttpInfo(owner, repo, checkRunId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List check run annotations
     * Lists annotations for a check run using the annotation &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get annotations for a check run in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;CheckAnnotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-run-annotations">List check run annotations Documentation</a>
     */
    public ApiResponse<List<CheckAnnotation>> checksListAnnotationsWithHttpInfo(String owner, String repo, Integer checkRunId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = checksListAnnotationsValidateBeforeCall(owner, repo, checkRunId, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<CheckAnnotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List check run annotations (asynchronously)
     * Lists annotations for a check run using the annotation &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get annotations for a check run in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-run-annotations">List check run annotations Documentation</a>
     */
    public okhttp3.Call checksListAnnotationsAsync(String owner, String repo, Integer checkRunId, Integer perPage, Integer page, final ApiCallback<List<CheckAnnotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksListAnnotationsValidateBeforeCall(owner, repo, checkRunId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<CheckAnnotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksListForRef
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param appId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-for-a-git-reference">List check runs for a Git reference Documentation</a>
     */
    public okhttp3.Call checksListForRefCall(String owner, String repo, String ref, String checkName, String status, String filter, Integer perPage, Integer page, Integer appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{ref}/check-runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_name", checkName));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksListForRefValidateBeforeCall(String owner, String repo, String ref, String checkName, String status, String filter, Integer perPage, Integer page, Integer appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksListForRef(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksListForRef(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling checksListForRef(Async)");
        }

        return checksListForRefCall(owner, repo, ref, checkName, status, filter, perPage, page, appId, _callback);

    }

    /**
     * List check runs for a Git reference
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a commit ref. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param appId  (optional)
     * @return ChecksListForSuite200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-for-a-git-reference">List check runs for a Git reference Documentation</a>
     */
    public ChecksListForSuite200Response checksListForRef(String owner, String repo, String ref, String checkName, String status, String filter, Integer perPage, Integer page, Integer appId) throws ApiException {
        ApiResponse<ChecksListForSuite200Response> localVarResp = checksListForRefWithHttpInfo(owner, repo, ref, checkName, status, filter, perPage, page, appId);
        return localVarResp.getData();
    }

    /**
     * List check runs for a Git reference
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a commit ref. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param appId  (optional)
     * @return ApiResponse&lt;ChecksListForSuite200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-for-a-git-reference">List check runs for a Git reference Documentation</a>
     */
    public ApiResponse<ChecksListForSuite200Response> checksListForRefWithHttpInfo(String owner, String repo, String ref, String checkName, String status, String filter, Integer perPage, Integer page, Integer appId) throws ApiException {
        okhttp3.Call localVarCall = checksListForRefValidateBeforeCall(owner, repo, ref, checkName, status, filter, perPage, page, appId, null);
        Type localVarReturnType = new TypeToken<ChecksListForSuite200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List check runs for a Git reference (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a commit ref. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param appId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-for-a-git-reference">List check runs for a Git reference Documentation</a>
     */
    public okhttp3.Call checksListForRefAsync(String owner, String repo, String ref, String checkName, String status, String filter, Integer perPage, Integer page, Integer appId, final ApiCallback<ChecksListForSuite200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksListForRefValidateBeforeCall(owner, repo, ref, checkName, status, filter, perPage, page, appId, _callback);
        Type localVarReturnType = new TypeToken<ChecksListForSuite200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksListForSuite
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-in-a-check-suite">List check runs in a check suite Documentation</a>
     */
    public okhttp3.Call checksListForSuiteCall(String owner, String repo, Integer checkSuiteId, String checkName, String status, String filter, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "check_suite_id" + "}", localVarApiClient.escapeString(checkSuiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_name", checkName));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksListForSuiteValidateBeforeCall(String owner, String repo, Integer checkSuiteId, String checkName, String status, String filter, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksListForSuite(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksListForSuite(Async)");
        }

        // verify the required parameter 'checkSuiteId' is set
        if (checkSuiteId == null) {
            throw new ApiException("Missing the required parameter 'checkSuiteId' when calling checksListForSuite(Async)");
        }

        return checksListForSuiteCall(owner, repo, checkSuiteId, checkName, status, filter, perPage, page, _callback);

    }

    /**
     * List check runs in a check suite
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ChecksListForSuite200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-in-a-check-suite">List check runs in a check suite Documentation</a>
     */
    public ChecksListForSuite200Response checksListForSuite(String owner, String repo, Integer checkSuiteId, String checkName, String status, String filter, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ChecksListForSuite200Response> localVarResp = checksListForSuiteWithHttpInfo(owner, repo, checkSuiteId, checkName, status, filter, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List check runs in a check suite
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ChecksListForSuite200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-in-a-check-suite">List check runs in a check suite Documentation</a>
     */
    public ApiResponse<ChecksListForSuite200Response> checksListForSuiteWithHttpInfo(String owner, String repo, Integer checkSuiteId, String checkName, String status, String filter, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = checksListForSuiteValidateBeforeCall(owner, repo, checkSuiteId, checkName, status, filter, perPage, page, null);
        Type localVarReturnType = new TypeToken<ChecksListForSuite200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List check runs in a check suite (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param status Returns check runs with the specified &#x60;status&#x60;. Can be one of &#x60;queued&#x60;, &#x60;in_progress&#x60;, or &#x60;completed&#x60;. (optional)
     * @param filter Filters check runs by their &#x60;completed_at&#x60; timestamp. Can be one of &#x60;latest&#x60; (returning the most recent check runs) or &#x60;all&#x60;. (optional, default to latest)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-runs-in-a-check-suite">List check runs in a check suite Documentation</a>
     */
    public okhttp3.Call checksListForSuiteAsync(String owner, String repo, Integer checkSuiteId, String checkName, String status, String filter, Integer perPage, Integer page, final ApiCallback<ChecksListForSuite200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksListForSuiteValidateBeforeCall(owner, repo, checkSuiteId, checkName, status, filter, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ChecksListForSuite200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksListSuitesForRef
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param appId Filters check suites by GitHub App &#x60;id&#x60;. (optional)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-suites-for-a-git-reference">List check suites for a Git reference Documentation</a>
     */
    public okhttp3.Call checksListSuitesForRefCall(String owner, String repo, String ref, Integer appId, String checkName, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/commits/{ref}/check-suites"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "ref" + "}", localVarApiClient.escapeString(ref.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        if (checkName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_name", checkName));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksListSuitesForRefValidateBeforeCall(String owner, String repo, String ref, Integer appId, String checkName, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksListSuitesForRef(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksListSuitesForRef(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling checksListSuitesForRef(Async)");
        }

        return checksListSuitesForRefCall(owner, repo, ref, appId, checkName, perPage, page, _callback);

    }

    /**
     * List check suites for a Git reference
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Lists check suites for a commit &#x60;ref&#x60;. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param appId Filters check suites by GitHub App &#x60;id&#x60;. (optional)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ChecksListSuitesForRef200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-suites-for-a-git-reference">List check suites for a Git reference Documentation</a>
     */
    public ChecksListSuitesForRef200Response checksListSuitesForRef(String owner, String repo, String ref, Integer appId, String checkName, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ChecksListSuitesForRef200Response> localVarResp = checksListSuitesForRefWithHttpInfo(owner, repo, ref, appId, checkName, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List check suites for a Git reference
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Lists check suites for a commit &#x60;ref&#x60;. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param appId Filters check suites by GitHub App &#x60;id&#x60;. (optional)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ChecksListSuitesForRef200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-suites-for-a-git-reference">List check suites for a Git reference Documentation</a>
     */
    public ApiResponse<ChecksListSuitesForRef200Response> checksListSuitesForRefWithHttpInfo(String owner, String repo, String ref, Integer appId, String checkName, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = checksListSuitesForRefValidateBeforeCall(owner, repo, ref, appId, checkName, perPage, page, null);
        Type localVarReturnType = new TypeToken<ChecksListSuitesForRef200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List check suites for a Git reference (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Lists check suites for a commit &#x60;ref&#x60;. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param ref ref parameter (required)
     * @param appId Filters check suites by GitHub App &#x60;id&#x60;. (optional)
     * @param checkName Returns check runs with the specified &#x60;name&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#list-check-suites-for-a-git-reference">List check suites for a Git reference Documentation</a>
     */
    public okhttp3.Call checksListSuitesForRefAsync(String owner, String repo, String ref, Integer appId, String checkName, Integer perPage, Integer page, final ApiCallback<ChecksListSuitesForRef200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksListSuitesForRefValidateBeforeCall(owner, repo, ref, appId, checkName, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ChecksListSuitesForRef200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksRerequestSuite
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#rerequest-a-check-suite">Rerequest a check suite Documentation</a>
     */
    public okhttp3.Call checksRerequestSuiteCall(String owner, String repo, Integer checkSuiteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "check_suite_id" + "}", localVarApiClient.escapeString(checkSuiteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksRerequestSuiteValidateBeforeCall(String owner, String repo, Integer checkSuiteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksRerequestSuite(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksRerequestSuite(Async)");
        }

        // verify the required parameter 'checkSuiteId' is set
        if (checkSuiteId == null) {
            throw new ApiException("Missing the required parameter 'checkSuiteId' when calling checksRerequestSuite(Async)");
        }

        return checksRerequestSuiteCall(owner, repo, checkSuiteId, _callback);

    }

    /**
     * Rerequest a check suite
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_suite&#x60; webhook](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#check_suite) event with the action &#x60;rerequested&#x60;. When a check suite is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check suite, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#rerequest-a-check-suite">Rerequest a check suite Documentation</a>
     */
    public Object checksRerequestSuite(String owner, String repo, Integer checkSuiteId) throws ApiException {
        ApiResponse<Object> localVarResp = checksRerequestSuiteWithHttpInfo(owner, repo, checkSuiteId);
        return localVarResp.getData();
    }

    /**
     * Rerequest a check suite
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_suite&#x60; webhook](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#check_suite) event with the action &#x60;rerequested&#x60;. When a check suite is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check suite, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#rerequest-a-check-suite">Rerequest a check suite Documentation</a>
     */
    public ApiResponse<Object> checksRerequestSuiteWithHttpInfo(String owner, String repo, Integer checkSuiteId) throws ApiException {
        okhttp3.Call localVarCall = checksRerequestSuiteValidateBeforeCall(owner, repo, checkSuiteId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rerequest a check suite (asynchronously)
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_suite&#x60; webhook](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#check_suite) event with the action &#x60;rerequested&#x60;. When a check suite is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check suite, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkSuiteId check_suite_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#rerequest-a-check-suite">Rerequest a check suite Documentation</a>
     */
    public okhttp3.Call checksRerequestSuiteAsync(String owner, String repo, Integer checkSuiteId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksRerequestSuiteValidateBeforeCall(owner, repo, checkSuiteId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksSetSuitesPreferences
     * @param owner  (required)
     * @param repo  (required)
     * @param checksSetSuitesPreferencesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites">Update repository preferences for check suites Documentation</a>
     */
    public okhttp3.Call checksSetSuitesPreferencesCall(String owner, String repo, ChecksSetSuitesPreferencesRequest checksSetSuitesPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checksSetSuitesPreferencesRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-suites/preferences"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksSetSuitesPreferencesValidateBeforeCall(String owner, String repo, ChecksSetSuitesPreferencesRequest checksSetSuitesPreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksSetSuitesPreferences(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksSetSuitesPreferences(Async)");
        }

        // verify the required parameter 'checksSetSuitesPreferencesRequest' is set
        if (checksSetSuitesPreferencesRequest == null) {
            throw new ApiException("Missing the required parameter 'checksSetSuitesPreferencesRequest' when calling checksSetSuitesPreferences(Async)");
        }

        return checksSetSuitesPreferencesCall(owner, repo, checksSetSuitesPreferencesRequest, _callback);

    }

    /**
     * Update repository preferences for check suites
     * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksSetSuitesPreferencesRequest  (required)
     * @return CheckSuitePreference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites">Update repository preferences for check suites Documentation</a>
     */
    public CheckSuitePreference checksSetSuitesPreferences(String owner, String repo, ChecksSetSuitesPreferencesRequest checksSetSuitesPreferencesRequest) throws ApiException {
        ApiResponse<CheckSuitePreference> localVarResp = checksSetSuitesPreferencesWithHttpInfo(owner, repo, checksSetSuitesPreferencesRequest);
        return localVarResp.getData();
    }

    /**
     * Update repository preferences for check suites
     * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksSetSuitesPreferencesRequest  (required)
     * @return ApiResponse&lt;CheckSuitePreference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites">Update repository preferences for check suites Documentation</a>
     */
    public ApiResponse<CheckSuitePreference> checksSetSuitesPreferencesWithHttpInfo(String owner, String repo, ChecksSetSuitesPreferencesRequest checksSetSuitesPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = checksSetSuitesPreferencesValidateBeforeCall(owner, repo, checksSetSuitesPreferencesRequest, null);
        Type localVarReturnType = new TypeToken<CheckSuitePreference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update repository preferences for check suites (asynchronously)
     * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     * @param owner  (required)
     * @param repo  (required)
     * @param checksSetSuitesPreferencesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites">Update repository preferences for check suites Documentation</a>
     */
    public okhttp3.Call checksSetSuitesPreferencesAsync(String owner, String repo, ChecksSetSuitesPreferencesRequest checksSetSuitesPreferencesRequest, final ApiCallback<CheckSuitePreference> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksSetSuitesPreferencesValidateBeforeCall(owner, repo, checksSetSuitesPreferencesRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckSuitePreference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checksUpdate
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param checksUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-a-check-run">Update a check run Documentation</a>
     */
    public okhttp3.Call checksUpdateCall(String owner, String repo, Integer checkRunId, ChecksUpdateRequest checksUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checksUpdateRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/check-runs/{check_run_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "check_run_id" + "}", localVarApiClient.escapeString(checkRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checksUpdateValidateBeforeCall(String owner, String repo, Integer checkRunId, ChecksUpdateRequest checksUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling checksUpdate(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling checksUpdate(Async)");
        }

        // verify the required parameter 'checkRunId' is set
        if (checkRunId == null) {
            throw new ApiException("Missing the required parameter 'checkRunId' when calling checksUpdate(Async)");
        }

        // verify the required parameter 'checksUpdateRequest' is set
        if (checksUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'checksUpdateRequest' when calling checksUpdate(Async)");
        }

        return checksUpdateCall(owner, repo, checkRunId, checksUpdateRequest, _callback);

    }

    /**
     * Update a check run
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Updates a check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to edit check runs.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param checksUpdateRequest  (required)
     * @return CheckRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-a-check-run">Update a check run Documentation</a>
     */
    public CheckRun checksUpdate(String owner, String repo, Integer checkRunId, ChecksUpdateRequest checksUpdateRequest) throws ApiException {
        ApiResponse<CheckRun> localVarResp = checksUpdateWithHttpInfo(owner, repo, checkRunId, checksUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a check run
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Updates a check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to edit check runs.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param checksUpdateRequest  (required)
     * @return ApiResponse&lt;CheckRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-a-check-run">Update a check run Documentation</a>
     */
    public ApiResponse<CheckRun> checksUpdateWithHttpInfo(String owner, String repo, Integer checkRunId, ChecksUpdateRequest checksUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = checksUpdateValidateBeforeCall(owner, repo, checkRunId, checksUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CheckRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a check run (asynchronously)
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Updates a check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to edit check runs.
     * @param owner  (required)
     * @param repo  (required)
     * @param checkRunId check_run_id parameter (required)
     * @param checksUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-a-check-run">Update a check run Documentation</a>
     */
    public okhttp3.Call checksUpdateAsync(String owner, String repo, Integer checkRunId, ChecksUpdateRequest checksUpdateRequest, final ApiCallback<CheckRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = checksUpdateValidateBeforeCall(owner, repo, checkRunId, checksUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
