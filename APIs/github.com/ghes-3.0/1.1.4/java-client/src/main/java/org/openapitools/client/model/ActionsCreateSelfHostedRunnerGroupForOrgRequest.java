/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActionsCreateSelfHostedRunnerGroupForOrgRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:54.189993-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionsCreateSelfHostedRunnerGroupForOrgRequest {
  public static final String SERIALIZED_NAME_ALLOWS_PUBLIC_REPOSITORIES = "allows_public_repositories";
  @SerializedName(SERIALIZED_NAME_ALLOWS_PUBLIC_REPOSITORIES)
  private Boolean allowsPublicRepositories = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNNERS = "runners";
  @SerializedName(SERIALIZED_NAME_RUNNERS)
  private List<Integer> runners = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_REPOSITORY_IDS = "selected_repository_ids";
  @SerializedName(SERIALIZED_NAME_SELECTED_REPOSITORY_IDS)
  private List<Integer> selectedRepositoryIds = new ArrayList<>();

  /**
   * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: &#x60;all&#x60;, &#x60;selected&#x60;, or &#x60;private&#x60;.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    SELECTED("selected"),
    
    ALL("all"),
    
    PRIVATE("private");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility = VisibilityEnum.ALL;

  public ActionsCreateSelfHostedRunnerGroupForOrgRequest() {
  }

  public ActionsCreateSelfHostedRunnerGroupForOrgRequest allowsPublicRepositories(Boolean allowsPublicRepositories) {
    this.allowsPublicRepositories = allowsPublicRepositories;
    return this;
  }

  /**
   * Whether the runner group can be used by &#x60;public&#x60; repositories.
   * @return allowsPublicRepositories
   */
  @javax.annotation.Nullable
  public Boolean getAllowsPublicRepositories() {
    return allowsPublicRepositories;
  }

  public void setAllowsPublicRepositories(Boolean allowsPublicRepositories) {
    this.allowsPublicRepositories = allowsPublicRepositories;
  }


  public ActionsCreateSelfHostedRunnerGroupForOrgRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the runner group.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ActionsCreateSelfHostedRunnerGroupForOrgRequest runners(List<Integer> runners) {
    this.runners = runners;
    return this;
  }

  public ActionsCreateSelfHostedRunnerGroupForOrgRequest addRunnersItem(Integer runnersItem) {
    if (this.runners == null) {
      this.runners = new ArrayList<>();
    }
    this.runners.add(runnersItem);
    return this;
  }

  /**
   * List of runner IDs to add to the runner group.
   * @return runners
   */
  @javax.annotation.Nullable
  public List<Integer> getRunners() {
    return runners;
  }

  public void setRunners(List<Integer> runners) {
    this.runners = runners;
  }


  public ActionsCreateSelfHostedRunnerGroupForOrgRequest selectedRepositoryIds(List<Integer> selectedRepositoryIds) {
    this.selectedRepositoryIds = selectedRepositoryIds;
    return this;
  }

  public ActionsCreateSelfHostedRunnerGroupForOrgRequest addSelectedRepositoryIdsItem(Integer selectedRepositoryIdsItem) {
    if (this.selectedRepositoryIds == null) {
      this.selectedRepositoryIds = new ArrayList<>();
    }
    this.selectedRepositoryIds.add(selectedRepositoryIdsItem);
    return this;
  }

  /**
   * List of repository IDs that can access the runner group.
   * @return selectedRepositoryIds
   */
  @javax.annotation.Nullable
  public List<Integer> getSelectedRepositoryIds() {
    return selectedRepositoryIds;
  }

  public void setSelectedRepositoryIds(List<Integer> selectedRepositoryIds) {
    this.selectedRepositoryIds = selectedRepositoryIds;
  }


  public ActionsCreateSelfHostedRunnerGroupForOrgRequest visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: &#x60;all&#x60;, &#x60;selected&#x60;, or &#x60;private&#x60;.
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionsCreateSelfHostedRunnerGroupForOrgRequest actionsCreateSelfHostedRunnerGroupForOrgRequest = (ActionsCreateSelfHostedRunnerGroupForOrgRequest) o;
    return Objects.equals(this.allowsPublicRepositories, actionsCreateSelfHostedRunnerGroupForOrgRequest.allowsPublicRepositories) &&
        Objects.equals(this.name, actionsCreateSelfHostedRunnerGroupForOrgRequest.name) &&
        Objects.equals(this.runners, actionsCreateSelfHostedRunnerGroupForOrgRequest.runners) &&
        Objects.equals(this.selectedRepositoryIds, actionsCreateSelfHostedRunnerGroupForOrgRequest.selectedRepositoryIds) &&
        Objects.equals(this.visibility, actionsCreateSelfHostedRunnerGroupForOrgRequest.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowsPublicRepositories, name, runners, selectedRepositoryIds, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionsCreateSelfHostedRunnerGroupForOrgRequest {\n");
    sb.append("    allowsPublicRepositories: ").append(toIndentedString(allowsPublicRepositories)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runners: ").append(toIndentedString(runners)).append("\n");
    sb.append("    selectedRepositoryIds: ").append(toIndentedString(selectedRepositoryIds)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allows_public_repositories");
    openapiFields.add("name");
    openapiFields.add("runners");
    openapiFields.add("selected_repository_ids");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionsCreateSelfHostedRunnerGroupForOrgRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionsCreateSelfHostedRunnerGroupForOrgRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionsCreateSelfHostedRunnerGroupForOrgRequest is not found in the empty JSON string", ActionsCreateSelfHostedRunnerGroupForOrgRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionsCreateSelfHostedRunnerGroupForOrgRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionsCreateSelfHostedRunnerGroupForOrgRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActionsCreateSelfHostedRunnerGroupForOrgRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("runners") != null && !jsonObj.get("runners").isJsonNull() && !jsonObj.get("runners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `runners` to be an array in the JSON string but got `%s`", jsonObj.get("runners").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selected_repository_ids") != null && !jsonObj.get("selected_repository_ids").isJsonNull() && !jsonObj.get("selected_repository_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_repository_ids` to be an array in the JSON string but got `%s`", jsonObj.get("selected_repository_ids").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionsCreateSelfHostedRunnerGroupForOrgRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionsCreateSelfHostedRunnerGroupForOrgRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionsCreateSelfHostedRunnerGroupForOrgRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionsCreateSelfHostedRunnerGroupForOrgRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionsCreateSelfHostedRunnerGroupForOrgRequest>() {
           @Override
           public void write(JsonWriter out, ActionsCreateSelfHostedRunnerGroupForOrgRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionsCreateSelfHostedRunnerGroupForOrgRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionsCreateSelfHostedRunnerGroupForOrgRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionsCreateSelfHostedRunnerGroupForOrgRequest
   * @throws IOException if the JSON string is invalid with respect to ActionsCreateSelfHostedRunnerGroupForOrgRequest
   */
  public static ActionsCreateSelfHostedRunnerGroupForOrgRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionsCreateSelfHostedRunnerGroupForOrgRequest.class);
  }

  /**
   * Convert an instance of ActionsCreateSelfHostedRunnerGroupForOrgRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

