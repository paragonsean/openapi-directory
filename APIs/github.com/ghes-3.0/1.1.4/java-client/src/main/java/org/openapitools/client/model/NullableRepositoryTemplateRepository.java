/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BranchRestrictionPolicyUsersInner;
import org.openapitools.client.model.MinimalRepositoryPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NullableRepositoryTemplateRepository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:54.189993-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NullableRepositoryTemplateRepository {
  public static final String SERIALIZED_NAME_ALLOW_MERGE_COMMIT = "allow_merge_commit";
  @SerializedName(SERIALIZED_NAME_ALLOW_MERGE_COMMIT)
  private Boolean allowMergeCommit;

  public static final String SERIALIZED_NAME_ALLOW_REBASE_MERGE = "allow_rebase_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE_MERGE)
  private Boolean allowRebaseMerge;

  public static final String SERIALIZED_NAME_ALLOW_SQUASH_MERGE = "allow_squash_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_SQUASH_MERGE)
  private Boolean allowSquashMerge;

  public static final String SERIALIZED_NAME_ALLOW_UPDATE_BRANCH = "allow_update_branch";
  @SerializedName(SERIALIZED_NAME_ALLOW_UPDATE_BRANCH)
  private Boolean allowUpdateBranch;

  public static final String SERIALIZED_NAME_ARCHIVE_URL = "archive_url";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URL)
  private String archiveUrl;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_ASSIGNEES_URL = "assignees_url";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES_URL)
  private String assigneesUrl;

  public static final String SERIALIZED_NAME_BLOBS_URL = "blobs_url";
  @SerializedName(SERIALIZED_NAME_BLOBS_URL)
  private String blobsUrl;

  public static final String SERIALIZED_NAME_BRANCHES_URL = "branches_url";
  @SerializedName(SERIALIZED_NAME_BRANCHES_URL)
  private String branchesUrl;

  public static final String SERIALIZED_NAME_CLONE_URL = "clone_url";
  @SerializedName(SERIALIZED_NAME_CLONE_URL)
  private String cloneUrl;

  public static final String SERIALIZED_NAME_COLLABORATORS_URL = "collaborators_url";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS_URL)
  private String collaboratorsUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private String commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private String commitsUrl;

  public static final String SERIALIZED_NAME_COMPARE_URL = "compare_url";
  @SerializedName(SERIALIZED_NAME_COMPARE_URL)
  private String compareUrl;

  public static final String SERIALIZED_NAME_CONTENTS_URL = "contents_url";
  @SerializedName(SERIALIZED_NAME_CONTENTS_URL)
  private String contentsUrl;

  public static final String SERIALIZED_NAME_CONTRIBUTORS_URL = "contributors_url";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS_URL)
  private String contributorsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE = "delete_branch_on_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE)
  private Boolean deleteBranchOnMerge;

  public static final String SERIALIZED_NAME_DEPLOYMENTS_URL = "deployments_url";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS_URL)
  private String deploymentsUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DOWNLOADS_URL = "downloads_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_URL)
  private String downloadsUrl;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private String eventsUrl;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_FORKS_COUNT = "forks_count";
  @SerializedName(SERIALIZED_NAME_FORKS_COUNT)
  private Integer forksCount;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private String forksUrl;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIT_COMMITS_URL = "git_commits_url";
  @SerializedName(SERIALIZED_NAME_GIT_COMMITS_URL)
  private String gitCommitsUrl;

  public static final String SERIALIZED_NAME_GIT_REFS_URL = "git_refs_url";
  @SerializedName(SERIALIZED_NAME_GIT_REFS_URL)
  private String gitRefsUrl;

  public static final String SERIALIZED_NAME_GIT_TAGS_URL = "git_tags_url";
  @SerializedName(SERIALIZED_NAME_GIT_TAGS_URL)
  private String gitTagsUrl;

  public static final String SERIALIZED_NAME_GIT_URL = "git_url";
  @SerializedName(SERIALIZED_NAME_GIT_URL)
  private String gitUrl;

  public static final String SERIALIZED_NAME_HAS_DOWNLOADS = "has_downloads";
  @SerializedName(SERIALIZED_NAME_HAS_DOWNLOADS)
  private Boolean hasDownloads;

  public static final String SERIALIZED_NAME_HAS_ISSUES = "has_issues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  private Boolean hasIssues;

  public static final String SERIALIZED_NAME_HAS_PAGES = "has_pages";
  @SerializedName(SERIALIZED_NAME_HAS_PAGES)
  private Boolean hasPages;

  public static final String SERIALIZED_NAME_HAS_PROJECTS = "has_projects";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECTS)
  private Boolean hasProjects;

  public static final String SERIALIZED_NAME_HAS_WIKI = "has_wiki";
  @SerializedName(SERIALIZED_NAME_HAS_WIKI)
  private Boolean hasWiki;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_HOOKS_URL = "hooks_url";
  @SerializedName(SERIALIZED_NAME_HOOKS_URL)
  private String hooksUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_TEMPLATE = "is_template";
  @SerializedName(SERIALIZED_NAME_IS_TEMPLATE)
  private Boolean isTemplate;

  public static final String SERIALIZED_NAME_ISSUE_COMMENT_URL = "issue_comment_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_COMMENT_URL)
  private String issueCommentUrl;

  public static final String SERIALIZED_NAME_ISSUE_EVENTS_URL = "issue_events_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_EVENTS_URL)
  private String issueEventsUrl;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_KEYS_URL = "keys_url";
  @SerializedName(SERIALIZED_NAME_KEYS_URL)
  private String keysUrl;

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private String labelsUrl;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGES_URL = "languages_url";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_URL)
  private String languagesUrl;

  public static final String SERIALIZED_NAME_MERGES_URL = "merges_url";
  @SerializedName(SERIALIZED_NAME_MERGES_URL)
  private String mergesUrl;

  public static final String SERIALIZED_NAME_MILESTONES_URL = "milestones_url";
  @SerializedName(SERIALIZED_NAME_MILESTONES_URL)
  private String milestonesUrl;

  public static final String SERIALIZED_NAME_MIRROR_URL = "mirror_url";
  @SerializedName(SERIALIZED_NAME_MIRROR_URL)
  private String mirrorUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_COUNT = "network_count";
  @SerializedName(SERIALIZED_NAME_NETWORK_COUNT)
  private Integer networkCount;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_URL = "notifications_url";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_URL)
  private String notificationsUrl;

  public static final String SERIALIZED_NAME_OPEN_ISSUES_COUNT = "open_issues_count";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES_COUNT)
  private Integer openIssuesCount;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private BranchRestrictionPolicyUsersInner owner;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private MinimalRepositoryPermissions permissions;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PULLS_URL = "pulls_url";
  @SerializedName(SERIALIZED_NAME_PULLS_URL)
  private String pullsUrl;

  public static final String SERIALIZED_NAME_PUSHED_AT = "pushed_at";
  @SerializedName(SERIALIZED_NAME_PUSHED_AT)
  private String pushedAt;

  public static final String SERIALIZED_NAME_RELEASES_URL = "releases_url";
  @SerializedName(SERIALIZED_NAME_RELEASES_URL)
  private String releasesUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_SSH_URL = "ssh_url";
  @SerializedName(SERIALIZED_NAME_SSH_URL)
  private String sshUrl;

  public static final String SERIALIZED_NAME_STARGAZERS_COUNT = "stargazers_count";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_COUNT)
  private Integer stargazersCount;

  public static final String SERIALIZED_NAME_STARGAZERS_URL = "stargazers_url";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_URL)
  private String stargazersUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private String statusesUrl;

  public static final String SERIALIZED_NAME_SUBSCRIBERS_COUNT = "subscribers_count";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS_COUNT)
  private Integer subscribersCount;

  public static final String SERIALIZED_NAME_SUBSCRIBERS_URL = "subscribers_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS_URL)
  private String subscribersUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_URL = "subscription_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_URL)
  private String subscriptionUrl;

  public static final String SERIALIZED_NAME_SVN_URL = "svn_url";
  @SerializedName(SERIALIZED_NAME_SVN_URL)
  private String svnUrl;

  public static final String SERIALIZED_NAME_TAGS_URL = "tags_url";
  @SerializedName(SERIALIZED_NAME_TAGS_URL)
  private String tagsUrl;

  public static final String SERIALIZED_NAME_TEAMS_URL = "teams_url";
  @SerializedName(SERIALIZED_NAME_TEAMS_URL)
  private String teamsUrl;

  public static final String SERIALIZED_NAME_TEMP_CLONE_TOKEN = "temp_clone_token";
  @SerializedName(SERIALIZED_NAME_TEMP_CLONE_TOKEN)
  private String tempCloneToken;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<String> topics = new ArrayList<>();

  public static final String SERIALIZED_NAME_TREES_URL = "trees_url";
  @SerializedName(SERIALIZED_NAME_TREES_URL)
  private String treesUrl;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public static final String SERIALIZED_NAME_WATCHERS_COUNT = "watchers_count";
  @SerializedName(SERIALIZED_NAME_WATCHERS_COUNT)
  private Integer watchersCount;

  public NullableRepositoryTemplateRepository() {
  }

  public NullableRepositoryTemplateRepository allowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
    return this;
  }

  /**
   * Get allowMergeCommit
   * @return allowMergeCommit
   */
  @javax.annotation.Nullable
  public Boolean getAllowMergeCommit() {
    return allowMergeCommit;
  }

  public void setAllowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
  }


  public NullableRepositoryTemplateRepository allowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
    return this;
  }

  /**
   * Get allowRebaseMerge
   * @return allowRebaseMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowRebaseMerge() {
    return allowRebaseMerge;
  }

  public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
  }


  public NullableRepositoryTemplateRepository allowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
    return this;
  }

  /**
   * Get allowSquashMerge
   * @return allowSquashMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowSquashMerge() {
    return allowSquashMerge;
  }

  public void setAllowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
  }


  public NullableRepositoryTemplateRepository allowUpdateBranch(Boolean allowUpdateBranch) {
    this.allowUpdateBranch = allowUpdateBranch;
    return this;
  }

  /**
   * Get allowUpdateBranch
   * @return allowUpdateBranch
   */
  @javax.annotation.Nullable
  public Boolean getAllowUpdateBranch() {
    return allowUpdateBranch;
  }

  public void setAllowUpdateBranch(Boolean allowUpdateBranch) {
    this.allowUpdateBranch = allowUpdateBranch;
  }


  public NullableRepositoryTemplateRepository archiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
    return this;
  }

  /**
   * Get archiveUrl
   * @return archiveUrl
   */
  @javax.annotation.Nullable
  public String getArchiveUrl() {
    return archiveUrl;
  }

  public void setArchiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
  }


  public NullableRepositoryTemplateRepository archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public NullableRepositoryTemplateRepository assigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
    return this;
  }

  /**
   * Get assigneesUrl
   * @return assigneesUrl
   */
  @javax.annotation.Nullable
  public String getAssigneesUrl() {
    return assigneesUrl;
  }

  public void setAssigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
  }


  public NullableRepositoryTemplateRepository blobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
    return this;
  }

  /**
   * Get blobsUrl
   * @return blobsUrl
   */
  @javax.annotation.Nullable
  public String getBlobsUrl() {
    return blobsUrl;
  }

  public void setBlobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
  }


  public NullableRepositoryTemplateRepository branchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
    return this;
  }

  /**
   * Get branchesUrl
   * @return branchesUrl
   */
  @javax.annotation.Nullable
  public String getBranchesUrl() {
    return branchesUrl;
  }

  public void setBranchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
  }


  public NullableRepositoryTemplateRepository cloneUrl(String cloneUrl) {
    this.cloneUrl = cloneUrl;
    return this;
  }

  /**
   * Get cloneUrl
   * @return cloneUrl
   */
  @javax.annotation.Nullable
  public String getCloneUrl() {
    return cloneUrl;
  }

  public void setCloneUrl(String cloneUrl) {
    this.cloneUrl = cloneUrl;
  }


  public NullableRepositoryTemplateRepository collaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
    return this;
  }

  /**
   * Get collaboratorsUrl
   * @return collaboratorsUrl
   */
  @javax.annotation.Nullable
  public String getCollaboratorsUrl() {
    return collaboratorsUrl;
  }

  public void setCollaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
  }


  public NullableRepositoryTemplateRepository commentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
    return this;
  }

  /**
   * Get commentsUrl
   * @return commentsUrl
   */
  @javax.annotation.Nullable
  public String getCommentsUrl() {
    return commentsUrl;
  }

  public void setCommentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public NullableRepositoryTemplateRepository commitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
    return this;
  }

  /**
   * Get commitsUrl
   * @return commitsUrl
   */
  @javax.annotation.Nullable
  public String getCommitsUrl() {
    return commitsUrl;
  }

  public void setCommitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public NullableRepositoryTemplateRepository compareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
    return this;
  }

  /**
   * Get compareUrl
   * @return compareUrl
   */
  @javax.annotation.Nullable
  public String getCompareUrl() {
    return compareUrl;
  }

  public void setCompareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
  }


  public NullableRepositoryTemplateRepository contentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
    return this;
  }

  /**
   * Get contentsUrl
   * @return contentsUrl
   */
  @javax.annotation.Nullable
  public String getContentsUrl() {
    return contentsUrl;
  }

  public void setContentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
  }


  public NullableRepositoryTemplateRepository contributorsUrl(String contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
    return this;
  }

  /**
   * Get contributorsUrl
   * @return contributorsUrl
   */
  @javax.annotation.Nullable
  public String getContributorsUrl() {
    return contributorsUrl;
  }

  public void setContributorsUrl(String contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
  }


  public NullableRepositoryTemplateRepository createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public NullableRepositoryTemplateRepository defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Get defaultBranch
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public NullableRepositoryTemplateRepository deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
    return this;
  }

  /**
   * Get deleteBranchOnMerge
   * @return deleteBranchOnMerge
   */
  @javax.annotation.Nullable
  public Boolean getDeleteBranchOnMerge() {
    return deleteBranchOnMerge;
  }

  public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
  }


  public NullableRepositoryTemplateRepository deploymentsUrl(String deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
    return this;
  }

  /**
   * Get deploymentsUrl
   * @return deploymentsUrl
   */
  @javax.annotation.Nullable
  public String getDeploymentsUrl() {
    return deploymentsUrl;
  }

  public void setDeploymentsUrl(String deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
  }


  public NullableRepositoryTemplateRepository description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NullableRepositoryTemplateRepository disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public NullableRepositoryTemplateRepository downloadsUrl(String downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
    return this;
  }

  /**
   * Get downloadsUrl
   * @return downloadsUrl
   */
  @javax.annotation.Nullable
  public String getDownloadsUrl() {
    return downloadsUrl;
  }

  public void setDownloadsUrl(String downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
  }


  public NullableRepositoryTemplateRepository eventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
    return this;
  }

  /**
   * Get eventsUrl
   * @return eventsUrl
   */
  @javax.annotation.Nullable
  public String getEventsUrl() {
    return eventsUrl;
  }

  public void setEventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public NullableRepositoryTemplateRepository fork(Boolean fork) {
    this.fork = fork;
    return this;
  }

  /**
   * Get fork
   * @return fork
   */
  @javax.annotation.Nullable
  public Boolean getFork() {
    return fork;
  }

  public void setFork(Boolean fork) {
    this.fork = fork;
  }


  public NullableRepositoryTemplateRepository forksCount(Integer forksCount) {
    this.forksCount = forksCount;
    return this;
  }

  /**
   * Get forksCount
   * @return forksCount
   */
  @javax.annotation.Nullable
  public Integer getForksCount() {
    return forksCount;
  }

  public void setForksCount(Integer forksCount) {
    this.forksCount = forksCount;
  }


  public NullableRepositoryTemplateRepository forksUrl(String forksUrl) {
    this.forksUrl = forksUrl;
    return this;
  }

  /**
   * Get forksUrl
   * @return forksUrl
   */
  @javax.annotation.Nullable
  public String getForksUrl() {
    return forksUrl;
  }

  public void setForksUrl(String forksUrl) {
    this.forksUrl = forksUrl;
  }


  public NullableRepositoryTemplateRepository fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public NullableRepositoryTemplateRepository gitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
    return this;
  }

  /**
   * Get gitCommitsUrl
   * @return gitCommitsUrl
   */
  @javax.annotation.Nullable
  public String getGitCommitsUrl() {
    return gitCommitsUrl;
  }

  public void setGitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
  }


  public NullableRepositoryTemplateRepository gitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
    return this;
  }

  /**
   * Get gitRefsUrl
   * @return gitRefsUrl
   */
  @javax.annotation.Nullable
  public String getGitRefsUrl() {
    return gitRefsUrl;
  }

  public void setGitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
  }


  public NullableRepositoryTemplateRepository gitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
    return this;
  }

  /**
   * Get gitTagsUrl
   * @return gitTagsUrl
   */
  @javax.annotation.Nullable
  public String getGitTagsUrl() {
    return gitTagsUrl;
  }

  public void setGitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
  }


  public NullableRepositoryTemplateRepository gitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
    return this;
  }

  /**
   * Get gitUrl
   * @return gitUrl
   */
  @javax.annotation.Nullable
  public String getGitUrl() {
    return gitUrl;
  }

  public void setGitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
  }


  public NullableRepositoryTemplateRepository hasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
    return this;
  }

  /**
   * Get hasDownloads
   * @return hasDownloads
   */
  @javax.annotation.Nullable
  public Boolean getHasDownloads() {
    return hasDownloads;
  }

  public void setHasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
  }


  public NullableRepositoryTemplateRepository hasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
    return this;
  }

  /**
   * Get hasIssues
   * @return hasIssues
   */
  @javax.annotation.Nullable
  public Boolean getHasIssues() {
    return hasIssues;
  }

  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public NullableRepositoryTemplateRepository hasPages(Boolean hasPages) {
    this.hasPages = hasPages;
    return this;
  }

  /**
   * Get hasPages
   * @return hasPages
   */
  @javax.annotation.Nullable
  public Boolean getHasPages() {
    return hasPages;
  }

  public void setHasPages(Boolean hasPages) {
    this.hasPages = hasPages;
  }


  public NullableRepositoryTemplateRepository hasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
    return this;
  }

  /**
   * Get hasProjects
   * @return hasProjects
   */
  @javax.annotation.Nullable
  public Boolean getHasProjects() {
    return hasProjects;
  }

  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }


  public NullableRepositoryTemplateRepository hasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
    return this;
  }

  /**
   * Get hasWiki
   * @return hasWiki
   */
  @javax.annotation.Nullable
  public Boolean getHasWiki() {
    return hasWiki;
  }

  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }


  public NullableRepositoryTemplateRepository homepage(String homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * Get homepage
   * @return homepage
   */
  @javax.annotation.Nullable
  public String getHomepage() {
    return homepage;
  }

  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public NullableRepositoryTemplateRepository hooksUrl(String hooksUrl) {
    this.hooksUrl = hooksUrl;
    return this;
  }

  /**
   * Get hooksUrl
   * @return hooksUrl
   */
  @javax.annotation.Nullable
  public String getHooksUrl() {
    return hooksUrl;
  }

  public void setHooksUrl(String hooksUrl) {
    this.hooksUrl = hooksUrl;
  }


  public NullableRepositoryTemplateRepository htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public NullableRepositoryTemplateRepository id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public NullableRepositoryTemplateRepository isTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
    return this;
  }

  /**
   * Get isTemplate
   * @return isTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsTemplate() {
    return isTemplate;
  }

  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }


  public NullableRepositoryTemplateRepository issueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
    return this;
  }

  /**
   * Get issueCommentUrl
   * @return issueCommentUrl
   */
  @javax.annotation.Nullable
  public String getIssueCommentUrl() {
    return issueCommentUrl;
  }

  public void setIssueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
  }


  public NullableRepositoryTemplateRepository issueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
    return this;
  }

  /**
   * Get issueEventsUrl
   * @return issueEventsUrl
   */
  @javax.annotation.Nullable
  public String getIssueEventsUrl() {
    return issueEventsUrl;
  }

  public void setIssueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
  }


  public NullableRepositoryTemplateRepository issuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
    return this;
  }

  /**
   * Get issuesUrl
   * @return issuesUrl
   */
  @javax.annotation.Nullable
  public String getIssuesUrl() {
    return issuesUrl;
  }

  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public NullableRepositoryTemplateRepository keysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
    return this;
  }

  /**
   * Get keysUrl
   * @return keysUrl
   */
  @javax.annotation.Nullable
  public String getKeysUrl() {
    return keysUrl;
  }

  public void setKeysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
  }


  public NullableRepositoryTemplateRepository labelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
    return this;
  }

  /**
   * Get labelsUrl
   * @return labelsUrl
   */
  @javax.annotation.Nullable
  public String getLabelsUrl() {
    return labelsUrl;
  }

  public void setLabelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public NullableRepositoryTemplateRepository language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public NullableRepositoryTemplateRepository languagesUrl(String languagesUrl) {
    this.languagesUrl = languagesUrl;
    return this;
  }

  /**
   * Get languagesUrl
   * @return languagesUrl
   */
  @javax.annotation.Nullable
  public String getLanguagesUrl() {
    return languagesUrl;
  }

  public void setLanguagesUrl(String languagesUrl) {
    this.languagesUrl = languagesUrl;
  }


  public NullableRepositoryTemplateRepository mergesUrl(String mergesUrl) {
    this.mergesUrl = mergesUrl;
    return this;
  }

  /**
   * Get mergesUrl
   * @return mergesUrl
   */
  @javax.annotation.Nullable
  public String getMergesUrl() {
    return mergesUrl;
  }

  public void setMergesUrl(String mergesUrl) {
    this.mergesUrl = mergesUrl;
  }


  public NullableRepositoryTemplateRepository milestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
    return this;
  }

  /**
   * Get milestonesUrl
   * @return milestonesUrl
   */
  @javax.annotation.Nullable
  public String getMilestonesUrl() {
    return milestonesUrl;
  }

  public void setMilestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
  }


  public NullableRepositoryTemplateRepository mirrorUrl(String mirrorUrl) {
    this.mirrorUrl = mirrorUrl;
    return this;
  }

  /**
   * Get mirrorUrl
   * @return mirrorUrl
   */
  @javax.annotation.Nullable
  public String getMirrorUrl() {
    return mirrorUrl;
  }

  public void setMirrorUrl(String mirrorUrl) {
    this.mirrorUrl = mirrorUrl;
  }


  public NullableRepositoryTemplateRepository name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NullableRepositoryTemplateRepository networkCount(Integer networkCount) {
    this.networkCount = networkCount;
    return this;
  }

  /**
   * Get networkCount
   * @return networkCount
   */
  @javax.annotation.Nullable
  public Integer getNetworkCount() {
    return networkCount;
  }

  public void setNetworkCount(Integer networkCount) {
    this.networkCount = networkCount;
  }


  public NullableRepositoryTemplateRepository nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public NullableRepositoryTemplateRepository notificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
    return this;
  }

  /**
   * Get notificationsUrl
   * @return notificationsUrl
   */
  @javax.annotation.Nullable
  public String getNotificationsUrl() {
    return notificationsUrl;
  }

  public void setNotificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
  }


  public NullableRepositoryTemplateRepository openIssuesCount(Integer openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
    return this;
  }

  /**
   * Get openIssuesCount
   * @return openIssuesCount
   */
  @javax.annotation.Nullable
  public Integer getOpenIssuesCount() {
    return openIssuesCount;
  }

  public void setOpenIssuesCount(Integer openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
  }


  public NullableRepositoryTemplateRepository owner(BranchRestrictionPolicyUsersInner owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public BranchRestrictionPolicyUsersInner getOwner() {
    return owner;
  }

  public void setOwner(BranchRestrictionPolicyUsersInner owner) {
    this.owner = owner;
  }


  public NullableRepositoryTemplateRepository permissions(MinimalRepositoryPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public MinimalRepositoryPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(MinimalRepositoryPermissions permissions) {
    this.permissions = permissions;
  }


  public NullableRepositoryTemplateRepository _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Get _private
   * @return _private
   */
  @javax.annotation.Nullable
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public NullableRepositoryTemplateRepository pullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
    return this;
  }

  /**
   * Get pullsUrl
   * @return pullsUrl
   */
  @javax.annotation.Nullable
  public String getPullsUrl() {
    return pullsUrl;
  }

  public void setPullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
  }


  public NullableRepositoryTemplateRepository pushedAt(String pushedAt) {
    this.pushedAt = pushedAt;
    return this;
  }

  /**
   * Get pushedAt
   * @return pushedAt
   */
  @javax.annotation.Nullable
  public String getPushedAt() {
    return pushedAt;
  }

  public void setPushedAt(String pushedAt) {
    this.pushedAt = pushedAt;
  }


  public NullableRepositoryTemplateRepository releasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
    return this;
  }

  /**
   * Get releasesUrl
   * @return releasesUrl
   */
  @javax.annotation.Nullable
  public String getReleasesUrl() {
    return releasesUrl;
  }

  public void setReleasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
  }


  public NullableRepositoryTemplateRepository size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public NullableRepositoryTemplateRepository sshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
    return this;
  }

  /**
   * Get sshUrl
   * @return sshUrl
   */
  @javax.annotation.Nullable
  public String getSshUrl() {
    return sshUrl;
  }

  public void setSshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
  }


  public NullableRepositoryTemplateRepository stargazersCount(Integer stargazersCount) {
    this.stargazersCount = stargazersCount;
    return this;
  }

  /**
   * Get stargazersCount
   * @return stargazersCount
   */
  @javax.annotation.Nullable
  public Integer getStargazersCount() {
    return stargazersCount;
  }

  public void setStargazersCount(Integer stargazersCount) {
    this.stargazersCount = stargazersCount;
  }


  public NullableRepositoryTemplateRepository stargazersUrl(String stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
    return this;
  }

  /**
   * Get stargazersUrl
   * @return stargazersUrl
   */
  @javax.annotation.Nullable
  public String getStargazersUrl() {
    return stargazersUrl;
  }

  public void setStargazersUrl(String stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
  }


  public NullableRepositoryTemplateRepository statusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
    return this;
  }

  /**
   * Get statusesUrl
   * @return statusesUrl
   */
  @javax.annotation.Nullable
  public String getStatusesUrl() {
    return statusesUrl;
  }

  public void setStatusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public NullableRepositoryTemplateRepository subscribersCount(Integer subscribersCount) {
    this.subscribersCount = subscribersCount;
    return this;
  }

  /**
   * Get subscribersCount
   * @return subscribersCount
   */
  @javax.annotation.Nullable
  public Integer getSubscribersCount() {
    return subscribersCount;
  }

  public void setSubscribersCount(Integer subscribersCount) {
    this.subscribersCount = subscribersCount;
  }


  public NullableRepositoryTemplateRepository subscribersUrl(String subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
    return this;
  }

  /**
   * Get subscribersUrl
   * @return subscribersUrl
   */
  @javax.annotation.Nullable
  public String getSubscribersUrl() {
    return subscribersUrl;
  }

  public void setSubscribersUrl(String subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
  }


  public NullableRepositoryTemplateRepository subscriptionUrl(String subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
    return this;
  }

  /**
   * Get subscriptionUrl
   * @return subscriptionUrl
   */
  @javax.annotation.Nullable
  public String getSubscriptionUrl() {
    return subscriptionUrl;
  }

  public void setSubscriptionUrl(String subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
  }


  public NullableRepositoryTemplateRepository svnUrl(String svnUrl) {
    this.svnUrl = svnUrl;
    return this;
  }

  /**
   * Get svnUrl
   * @return svnUrl
   */
  @javax.annotation.Nullable
  public String getSvnUrl() {
    return svnUrl;
  }

  public void setSvnUrl(String svnUrl) {
    this.svnUrl = svnUrl;
  }


  public NullableRepositoryTemplateRepository tagsUrl(String tagsUrl) {
    this.tagsUrl = tagsUrl;
    return this;
  }

  /**
   * Get tagsUrl
   * @return tagsUrl
   */
  @javax.annotation.Nullable
  public String getTagsUrl() {
    return tagsUrl;
  }

  public void setTagsUrl(String tagsUrl) {
    this.tagsUrl = tagsUrl;
  }


  public NullableRepositoryTemplateRepository teamsUrl(String teamsUrl) {
    this.teamsUrl = teamsUrl;
    return this;
  }

  /**
   * Get teamsUrl
   * @return teamsUrl
   */
  @javax.annotation.Nullable
  public String getTeamsUrl() {
    return teamsUrl;
  }

  public void setTeamsUrl(String teamsUrl) {
    this.teamsUrl = teamsUrl;
  }


  public NullableRepositoryTemplateRepository tempCloneToken(String tempCloneToken) {
    this.tempCloneToken = tempCloneToken;
    return this;
  }

  /**
   * Get tempCloneToken
   * @return tempCloneToken
   */
  @javax.annotation.Nullable
  public String getTempCloneToken() {
    return tempCloneToken;
  }

  public void setTempCloneToken(String tempCloneToken) {
    this.tempCloneToken = tempCloneToken;
  }


  public NullableRepositoryTemplateRepository topics(List<String> topics) {
    this.topics = topics;
    return this;
  }

  public NullableRepositoryTemplateRepository addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

  /**
   * Get topics
   * @return topics
   */
  @javax.annotation.Nullable
  public List<String> getTopics() {
    return topics;
  }

  public void setTopics(List<String> topics) {
    this.topics = topics;
  }


  public NullableRepositoryTemplateRepository treesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
    return this;
  }

  /**
   * Get treesUrl
   * @return treesUrl
   */
  @javax.annotation.Nullable
  public String getTreesUrl() {
    return treesUrl;
  }

  public void setTreesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
  }


  public NullableRepositoryTemplateRepository updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public NullableRepositoryTemplateRepository url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public NullableRepositoryTemplateRepository visibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public String getVisibility() {
    return visibility;
  }

  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }


  public NullableRepositoryTemplateRepository watchersCount(Integer watchersCount) {
    this.watchersCount = watchersCount;
    return this;
  }

  /**
   * Get watchersCount
   * @return watchersCount
   */
  @javax.annotation.Nullable
  public Integer getWatchersCount() {
    return watchersCount;
  }

  public void setWatchersCount(Integer watchersCount) {
    this.watchersCount = watchersCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NullableRepositoryTemplateRepository nullableRepositoryTemplateRepository = (NullableRepositoryTemplateRepository) o;
    return Objects.equals(this.allowMergeCommit, nullableRepositoryTemplateRepository.allowMergeCommit) &&
        Objects.equals(this.allowRebaseMerge, nullableRepositoryTemplateRepository.allowRebaseMerge) &&
        Objects.equals(this.allowSquashMerge, nullableRepositoryTemplateRepository.allowSquashMerge) &&
        Objects.equals(this.allowUpdateBranch, nullableRepositoryTemplateRepository.allowUpdateBranch) &&
        Objects.equals(this.archiveUrl, nullableRepositoryTemplateRepository.archiveUrl) &&
        Objects.equals(this.archived, nullableRepositoryTemplateRepository.archived) &&
        Objects.equals(this.assigneesUrl, nullableRepositoryTemplateRepository.assigneesUrl) &&
        Objects.equals(this.blobsUrl, nullableRepositoryTemplateRepository.blobsUrl) &&
        Objects.equals(this.branchesUrl, nullableRepositoryTemplateRepository.branchesUrl) &&
        Objects.equals(this.cloneUrl, nullableRepositoryTemplateRepository.cloneUrl) &&
        Objects.equals(this.collaboratorsUrl, nullableRepositoryTemplateRepository.collaboratorsUrl) &&
        Objects.equals(this.commentsUrl, nullableRepositoryTemplateRepository.commentsUrl) &&
        Objects.equals(this.commitsUrl, nullableRepositoryTemplateRepository.commitsUrl) &&
        Objects.equals(this.compareUrl, nullableRepositoryTemplateRepository.compareUrl) &&
        Objects.equals(this.contentsUrl, nullableRepositoryTemplateRepository.contentsUrl) &&
        Objects.equals(this.contributorsUrl, nullableRepositoryTemplateRepository.contributorsUrl) &&
        Objects.equals(this.createdAt, nullableRepositoryTemplateRepository.createdAt) &&
        Objects.equals(this.defaultBranch, nullableRepositoryTemplateRepository.defaultBranch) &&
        Objects.equals(this.deleteBranchOnMerge, nullableRepositoryTemplateRepository.deleteBranchOnMerge) &&
        Objects.equals(this.deploymentsUrl, nullableRepositoryTemplateRepository.deploymentsUrl) &&
        Objects.equals(this.description, nullableRepositoryTemplateRepository.description) &&
        Objects.equals(this.disabled, nullableRepositoryTemplateRepository.disabled) &&
        Objects.equals(this.downloadsUrl, nullableRepositoryTemplateRepository.downloadsUrl) &&
        Objects.equals(this.eventsUrl, nullableRepositoryTemplateRepository.eventsUrl) &&
        Objects.equals(this.fork, nullableRepositoryTemplateRepository.fork) &&
        Objects.equals(this.forksCount, nullableRepositoryTemplateRepository.forksCount) &&
        Objects.equals(this.forksUrl, nullableRepositoryTemplateRepository.forksUrl) &&
        Objects.equals(this.fullName, nullableRepositoryTemplateRepository.fullName) &&
        Objects.equals(this.gitCommitsUrl, nullableRepositoryTemplateRepository.gitCommitsUrl) &&
        Objects.equals(this.gitRefsUrl, nullableRepositoryTemplateRepository.gitRefsUrl) &&
        Objects.equals(this.gitTagsUrl, nullableRepositoryTemplateRepository.gitTagsUrl) &&
        Objects.equals(this.gitUrl, nullableRepositoryTemplateRepository.gitUrl) &&
        Objects.equals(this.hasDownloads, nullableRepositoryTemplateRepository.hasDownloads) &&
        Objects.equals(this.hasIssues, nullableRepositoryTemplateRepository.hasIssues) &&
        Objects.equals(this.hasPages, nullableRepositoryTemplateRepository.hasPages) &&
        Objects.equals(this.hasProjects, nullableRepositoryTemplateRepository.hasProjects) &&
        Objects.equals(this.hasWiki, nullableRepositoryTemplateRepository.hasWiki) &&
        Objects.equals(this.homepage, nullableRepositoryTemplateRepository.homepage) &&
        Objects.equals(this.hooksUrl, nullableRepositoryTemplateRepository.hooksUrl) &&
        Objects.equals(this.htmlUrl, nullableRepositoryTemplateRepository.htmlUrl) &&
        Objects.equals(this.id, nullableRepositoryTemplateRepository.id) &&
        Objects.equals(this.isTemplate, nullableRepositoryTemplateRepository.isTemplate) &&
        Objects.equals(this.issueCommentUrl, nullableRepositoryTemplateRepository.issueCommentUrl) &&
        Objects.equals(this.issueEventsUrl, nullableRepositoryTemplateRepository.issueEventsUrl) &&
        Objects.equals(this.issuesUrl, nullableRepositoryTemplateRepository.issuesUrl) &&
        Objects.equals(this.keysUrl, nullableRepositoryTemplateRepository.keysUrl) &&
        Objects.equals(this.labelsUrl, nullableRepositoryTemplateRepository.labelsUrl) &&
        Objects.equals(this.language, nullableRepositoryTemplateRepository.language) &&
        Objects.equals(this.languagesUrl, nullableRepositoryTemplateRepository.languagesUrl) &&
        Objects.equals(this.mergesUrl, nullableRepositoryTemplateRepository.mergesUrl) &&
        Objects.equals(this.milestonesUrl, nullableRepositoryTemplateRepository.milestonesUrl) &&
        Objects.equals(this.mirrorUrl, nullableRepositoryTemplateRepository.mirrorUrl) &&
        Objects.equals(this.name, nullableRepositoryTemplateRepository.name) &&
        Objects.equals(this.networkCount, nullableRepositoryTemplateRepository.networkCount) &&
        Objects.equals(this.nodeId, nullableRepositoryTemplateRepository.nodeId) &&
        Objects.equals(this.notificationsUrl, nullableRepositoryTemplateRepository.notificationsUrl) &&
        Objects.equals(this.openIssuesCount, nullableRepositoryTemplateRepository.openIssuesCount) &&
        Objects.equals(this.owner, nullableRepositoryTemplateRepository.owner) &&
        Objects.equals(this.permissions, nullableRepositoryTemplateRepository.permissions) &&
        Objects.equals(this._private, nullableRepositoryTemplateRepository._private) &&
        Objects.equals(this.pullsUrl, nullableRepositoryTemplateRepository.pullsUrl) &&
        Objects.equals(this.pushedAt, nullableRepositoryTemplateRepository.pushedAt) &&
        Objects.equals(this.releasesUrl, nullableRepositoryTemplateRepository.releasesUrl) &&
        Objects.equals(this.size, nullableRepositoryTemplateRepository.size) &&
        Objects.equals(this.sshUrl, nullableRepositoryTemplateRepository.sshUrl) &&
        Objects.equals(this.stargazersCount, nullableRepositoryTemplateRepository.stargazersCount) &&
        Objects.equals(this.stargazersUrl, nullableRepositoryTemplateRepository.stargazersUrl) &&
        Objects.equals(this.statusesUrl, nullableRepositoryTemplateRepository.statusesUrl) &&
        Objects.equals(this.subscribersCount, nullableRepositoryTemplateRepository.subscribersCount) &&
        Objects.equals(this.subscribersUrl, nullableRepositoryTemplateRepository.subscribersUrl) &&
        Objects.equals(this.subscriptionUrl, nullableRepositoryTemplateRepository.subscriptionUrl) &&
        Objects.equals(this.svnUrl, nullableRepositoryTemplateRepository.svnUrl) &&
        Objects.equals(this.tagsUrl, nullableRepositoryTemplateRepository.tagsUrl) &&
        Objects.equals(this.teamsUrl, nullableRepositoryTemplateRepository.teamsUrl) &&
        Objects.equals(this.tempCloneToken, nullableRepositoryTemplateRepository.tempCloneToken) &&
        Objects.equals(this.topics, nullableRepositoryTemplateRepository.topics) &&
        Objects.equals(this.treesUrl, nullableRepositoryTemplateRepository.treesUrl) &&
        Objects.equals(this.updatedAt, nullableRepositoryTemplateRepository.updatedAt) &&
        Objects.equals(this.url, nullableRepositoryTemplateRepository.url) &&
        Objects.equals(this.visibility, nullableRepositoryTemplateRepository.visibility) &&
        Objects.equals(this.watchersCount, nullableRepositoryTemplateRepository.watchersCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMergeCommit, allowRebaseMerge, allowSquashMerge, allowUpdateBranch, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deleteBranchOnMerge, deploymentsUrl, description, disabled, downloadsUrl, eventsUrl, fork, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, isTemplate, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, mergesUrl, milestonesUrl, mirrorUrl, name, networkCount, nodeId, notificationsUrl, openIssuesCount, owner, permissions, _private, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersCount, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, tempCloneToken, topics, treesUrl, updatedAt, url, visibility, watchersCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NullableRepositoryTemplateRepository {\n");
    sb.append("    allowMergeCommit: ").append(toIndentedString(allowMergeCommit)).append("\n");
    sb.append("    allowRebaseMerge: ").append(toIndentedString(allowRebaseMerge)).append("\n");
    sb.append("    allowSquashMerge: ").append(toIndentedString(allowSquashMerge)).append("\n");
    sb.append("    allowUpdateBranch: ").append(toIndentedString(allowUpdateBranch)).append("\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    assigneesUrl: ").append(toIndentedString(assigneesUrl)).append("\n");
    sb.append("    blobsUrl: ").append(toIndentedString(blobsUrl)).append("\n");
    sb.append("    branchesUrl: ").append(toIndentedString(branchesUrl)).append("\n");
    sb.append("    cloneUrl: ").append(toIndentedString(cloneUrl)).append("\n");
    sb.append("    collaboratorsUrl: ").append(toIndentedString(collaboratorsUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    compareUrl: ").append(toIndentedString(compareUrl)).append("\n");
    sb.append("    contentsUrl: ").append(toIndentedString(contentsUrl)).append("\n");
    sb.append("    contributorsUrl: ").append(toIndentedString(contributorsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    deleteBranchOnMerge: ").append(toIndentedString(deleteBranchOnMerge)).append("\n");
    sb.append("    deploymentsUrl: ").append(toIndentedString(deploymentsUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    downloadsUrl: ").append(toIndentedString(downloadsUrl)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forksCount: ").append(toIndentedString(forksCount)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    gitCommitsUrl: ").append(toIndentedString(gitCommitsUrl)).append("\n");
    sb.append("    gitRefsUrl: ").append(toIndentedString(gitRefsUrl)).append("\n");
    sb.append("    gitTagsUrl: ").append(toIndentedString(gitTagsUrl)).append("\n");
    sb.append("    gitUrl: ").append(toIndentedString(gitUrl)).append("\n");
    sb.append("    hasDownloads: ").append(toIndentedString(hasDownloads)).append("\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    hasPages: ").append(toIndentedString(hasPages)).append("\n");
    sb.append("    hasProjects: ").append(toIndentedString(hasProjects)).append("\n");
    sb.append("    hasWiki: ").append(toIndentedString(hasWiki)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    hooksUrl: ").append(toIndentedString(hooksUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    issueCommentUrl: ").append(toIndentedString(issueCommentUrl)).append("\n");
    sb.append("    issueEventsUrl: ").append(toIndentedString(issueEventsUrl)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    keysUrl: ").append(toIndentedString(keysUrl)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languagesUrl: ").append(toIndentedString(languagesUrl)).append("\n");
    sb.append("    mergesUrl: ").append(toIndentedString(mergesUrl)).append("\n");
    sb.append("    milestonesUrl: ").append(toIndentedString(milestonesUrl)).append("\n");
    sb.append("    mirrorUrl: ").append(toIndentedString(mirrorUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkCount: ").append(toIndentedString(networkCount)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    notificationsUrl: ").append(toIndentedString(notificationsUrl)).append("\n");
    sb.append("    openIssuesCount: ").append(toIndentedString(openIssuesCount)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    pullsUrl: ").append(toIndentedString(pullsUrl)).append("\n");
    sb.append("    pushedAt: ").append(toIndentedString(pushedAt)).append("\n");
    sb.append("    releasesUrl: ").append(toIndentedString(releasesUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sshUrl: ").append(toIndentedString(sshUrl)).append("\n");
    sb.append("    stargazersCount: ").append(toIndentedString(stargazersCount)).append("\n");
    sb.append("    stargazersUrl: ").append(toIndentedString(stargazersUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    subscribersCount: ").append(toIndentedString(subscribersCount)).append("\n");
    sb.append("    subscribersUrl: ").append(toIndentedString(subscribersUrl)).append("\n");
    sb.append("    subscriptionUrl: ").append(toIndentedString(subscriptionUrl)).append("\n");
    sb.append("    svnUrl: ").append(toIndentedString(svnUrl)).append("\n");
    sb.append("    tagsUrl: ").append(toIndentedString(tagsUrl)).append("\n");
    sb.append("    teamsUrl: ").append(toIndentedString(teamsUrl)).append("\n");
    sb.append("    tempCloneToken: ").append(toIndentedString(tempCloneToken)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    treesUrl: ").append(toIndentedString(treesUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    watchersCount: ").append(toIndentedString(watchersCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_merge_commit");
    openapiFields.add("allow_rebase_merge");
    openapiFields.add("allow_squash_merge");
    openapiFields.add("allow_update_branch");
    openapiFields.add("archive_url");
    openapiFields.add("archived");
    openapiFields.add("assignees_url");
    openapiFields.add("blobs_url");
    openapiFields.add("branches_url");
    openapiFields.add("clone_url");
    openapiFields.add("collaborators_url");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("compare_url");
    openapiFields.add("contents_url");
    openapiFields.add("contributors_url");
    openapiFields.add("created_at");
    openapiFields.add("default_branch");
    openapiFields.add("delete_branch_on_merge");
    openapiFields.add("deployments_url");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("downloads_url");
    openapiFields.add("events_url");
    openapiFields.add("fork");
    openapiFields.add("forks_count");
    openapiFields.add("forks_url");
    openapiFields.add("full_name");
    openapiFields.add("git_commits_url");
    openapiFields.add("git_refs_url");
    openapiFields.add("git_tags_url");
    openapiFields.add("git_url");
    openapiFields.add("has_downloads");
    openapiFields.add("has_issues");
    openapiFields.add("has_pages");
    openapiFields.add("has_projects");
    openapiFields.add("has_wiki");
    openapiFields.add("homepage");
    openapiFields.add("hooks_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("is_template");
    openapiFields.add("issue_comment_url");
    openapiFields.add("issue_events_url");
    openapiFields.add("issues_url");
    openapiFields.add("keys_url");
    openapiFields.add("labels_url");
    openapiFields.add("language");
    openapiFields.add("languages_url");
    openapiFields.add("merges_url");
    openapiFields.add("milestones_url");
    openapiFields.add("mirror_url");
    openapiFields.add("name");
    openapiFields.add("network_count");
    openapiFields.add("node_id");
    openapiFields.add("notifications_url");
    openapiFields.add("open_issues_count");
    openapiFields.add("owner");
    openapiFields.add("permissions");
    openapiFields.add("private");
    openapiFields.add("pulls_url");
    openapiFields.add("pushed_at");
    openapiFields.add("releases_url");
    openapiFields.add("size");
    openapiFields.add("ssh_url");
    openapiFields.add("stargazers_count");
    openapiFields.add("stargazers_url");
    openapiFields.add("statuses_url");
    openapiFields.add("subscribers_count");
    openapiFields.add("subscribers_url");
    openapiFields.add("subscription_url");
    openapiFields.add("svn_url");
    openapiFields.add("tags_url");
    openapiFields.add("teams_url");
    openapiFields.add("temp_clone_token");
    openapiFields.add("topics");
    openapiFields.add("trees_url");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("visibility");
    openapiFields.add("watchers_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NullableRepositoryTemplateRepository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NullableRepositoryTemplateRepository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NullableRepositoryTemplateRepository is not found in the empty JSON string", NullableRepositoryTemplateRepository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NullableRepositoryTemplateRepository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NullableRepositoryTemplateRepository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("archive_url") != null && !jsonObj.get("archive_url").isJsonNull()) && !jsonObj.get("archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_url").toString()));
      }
      if ((jsonObj.get("assignees_url") != null && !jsonObj.get("assignees_url").isJsonNull()) && !jsonObj.get("assignees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignees_url").toString()));
      }
      if ((jsonObj.get("blobs_url") != null && !jsonObj.get("blobs_url").isJsonNull()) && !jsonObj.get("blobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobs_url").toString()));
      }
      if ((jsonObj.get("branches_url") != null && !jsonObj.get("branches_url").isJsonNull()) && !jsonObj.get("branches_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branches_url").toString()));
      }
      if ((jsonObj.get("clone_url") != null && !jsonObj.get("clone_url").isJsonNull()) && !jsonObj.get("clone_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clone_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clone_url").toString()));
      }
      if ((jsonObj.get("collaborators_url") != null && !jsonObj.get("collaborators_url").isJsonNull()) && !jsonObj.get("collaborators_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborators_url").toString()));
      }
      if ((jsonObj.get("comments_url") != null && !jsonObj.get("comments_url").isJsonNull()) && !jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if ((jsonObj.get("commits_url") != null && !jsonObj.get("commits_url").isJsonNull()) && !jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if ((jsonObj.get("compare_url") != null && !jsonObj.get("compare_url").isJsonNull()) && !jsonObj.get("compare_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_url").toString()));
      }
      if ((jsonObj.get("contents_url") != null && !jsonObj.get("contents_url").isJsonNull()) && !jsonObj.get("contents_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_url").toString()));
      }
      if ((jsonObj.get("contributors_url") != null && !jsonObj.get("contributors_url").isJsonNull()) && !jsonObj.get("contributors_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("deployments_url") != null && !jsonObj.get("deployments_url").isJsonNull()) && !jsonObj.get("deployments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments_url").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("downloads_url") != null && !jsonObj.get("downloads_url").isJsonNull()) && !jsonObj.get("downloads_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloads_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloads_url").toString()));
      }
      if ((jsonObj.get("events_url") != null && !jsonObj.get("events_url").isJsonNull()) && !jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if ((jsonObj.get("forks_url") != null && !jsonObj.get("forks_url").isJsonNull()) && !jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("git_commits_url") != null && !jsonObj.get("git_commits_url").isJsonNull()) && !jsonObj.get("git_commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_commits_url").toString()));
      }
      if ((jsonObj.get("git_refs_url") != null && !jsonObj.get("git_refs_url").isJsonNull()) && !jsonObj.get("git_refs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_refs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_refs_url").toString()));
      }
      if ((jsonObj.get("git_tags_url") != null && !jsonObj.get("git_tags_url").isJsonNull()) && !jsonObj.get("git_tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_tags_url").toString()));
      }
      if ((jsonObj.get("git_url") != null && !jsonObj.get("git_url").isJsonNull()) && !jsonObj.get("git_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_url").toString()));
      }
      if ((jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) && !jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      if ((jsonObj.get("hooks_url") != null && !jsonObj.get("hooks_url").isJsonNull()) && !jsonObj.get("hooks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hooks_url").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("issue_comment_url") != null && !jsonObj.get("issue_comment_url").isJsonNull()) && !jsonObj.get("issue_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_comment_url").toString()));
      }
      if ((jsonObj.get("issue_events_url") != null && !jsonObj.get("issue_events_url").isJsonNull()) && !jsonObj.get("issue_events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_events_url").toString()));
      }
      if ((jsonObj.get("issues_url") != null && !jsonObj.get("issues_url").isJsonNull()) && !jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if ((jsonObj.get("keys_url") != null && !jsonObj.get("keys_url").isJsonNull()) && !jsonObj.get("keys_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys_url").toString()));
      }
      if ((jsonObj.get("labels_url") != null && !jsonObj.get("labels_url").isJsonNull()) && !jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("languages_url") != null && !jsonObj.get("languages_url").isJsonNull()) && !jsonObj.get("languages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages_url").toString()));
      }
      if ((jsonObj.get("merges_url") != null && !jsonObj.get("merges_url").isJsonNull()) && !jsonObj.get("merges_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merges_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merges_url").toString()));
      }
      if ((jsonObj.get("milestones_url") != null && !jsonObj.get("milestones_url").isJsonNull()) && !jsonObj.get("milestones_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milestones_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milestones_url").toString()));
      }
      if ((jsonObj.get("mirror_url") != null && !jsonObj.get("mirror_url").isJsonNull()) && !jsonObj.get("mirror_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirror_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirror_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("notifications_url") != null && !jsonObj.get("notifications_url").isJsonNull()) && !jsonObj.get("notifications_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifications_url").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        BranchRestrictionPolicyUsersInner.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        MinimalRepositoryPermissions.validateJsonElement(jsonObj.get("permissions"));
      }
      if ((jsonObj.get("pulls_url") != null && !jsonObj.get("pulls_url").isJsonNull()) && !jsonObj.get("pulls_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulls_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulls_url").toString()));
      }
      if ((jsonObj.get("pushed_at") != null && !jsonObj.get("pushed_at").isJsonNull()) && !jsonObj.get("pushed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pushed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pushed_at").toString()));
      }
      if ((jsonObj.get("releases_url") != null && !jsonObj.get("releases_url").isJsonNull()) && !jsonObj.get("releases_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releases_url").toString()));
      }
      if ((jsonObj.get("ssh_url") != null && !jsonObj.get("ssh_url").isJsonNull()) && !jsonObj.get("ssh_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_url").toString()));
      }
      if ((jsonObj.get("stargazers_url") != null && !jsonObj.get("stargazers_url").isJsonNull()) && !jsonObj.get("stargazers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stargazers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stargazers_url").toString()));
      }
      if ((jsonObj.get("statuses_url") != null && !jsonObj.get("statuses_url").isJsonNull()) && !jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if ((jsonObj.get("subscribers_url") != null && !jsonObj.get("subscribers_url").isJsonNull()) && !jsonObj.get("subscribers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribers_url").toString()));
      }
      if ((jsonObj.get("subscription_url") != null && !jsonObj.get("subscription_url").isJsonNull()) && !jsonObj.get("subscription_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_url").toString()));
      }
      if ((jsonObj.get("svn_url") != null && !jsonObj.get("svn_url").isJsonNull()) && !jsonObj.get("svn_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svn_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svn_url").toString()));
      }
      if ((jsonObj.get("tags_url") != null && !jsonObj.get("tags_url").isJsonNull()) && !jsonObj.get("tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_url").toString()));
      }
      if ((jsonObj.get("teams_url") != null && !jsonObj.get("teams_url").isJsonNull()) && !jsonObj.get("teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams_url").toString()));
      }
      if ((jsonObj.get("temp_clone_token") != null && !jsonObj.get("temp_clone_token").isJsonNull()) && !jsonObj.get("temp_clone_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temp_clone_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temp_clone_token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonNull() && !jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      if ((jsonObj.get("trees_url") != null && !jsonObj.get("trees_url").isJsonNull()) && !jsonObj.get("trees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trees_url").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NullableRepositoryTemplateRepository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NullableRepositoryTemplateRepository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NullableRepositoryTemplateRepository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NullableRepositoryTemplateRepository.class));

       return (TypeAdapter<T>) new TypeAdapter<NullableRepositoryTemplateRepository>() {
           @Override
           public void write(JsonWriter out, NullableRepositoryTemplateRepository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NullableRepositoryTemplateRepository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NullableRepositoryTemplateRepository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NullableRepositoryTemplateRepository
   * @throws IOException if the JSON string is invalid with respect to NullableRepositoryTemplateRepository
   */
  public static NullableRepositoryTemplateRepository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NullableRepositoryTemplateRepository.class);
  }

  /**
   * Convert an instance of NullableRepositoryTemplateRepository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

