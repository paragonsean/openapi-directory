# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_suite_preference_preferences import CheckSuitePreferencePreferences
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server import util


class CheckSuitePreference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preferences: CheckSuitePreferencePreferences=None, repository: MinimalRepository=None):
        """CheckSuitePreference - a model defined in OpenAPI

        :param preferences: The preferences of this CheckSuitePreference.
        :param repository: The repository of this CheckSuitePreference.
        """
        self.openapi_types = {
            'preferences': CheckSuitePreferencePreferences,
            'repository': MinimalRepository
        }

        self.attribute_map = {
            'preferences': 'preferences',
            'repository': 'repository'
        }

        self._preferences = preferences
        self._repository = repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckSuitePreference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check-suite-preference of this CheckSuitePreference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preferences(self):
        """Gets the preferences of this CheckSuitePreference.


        :return: The preferences of this CheckSuitePreference.
        :rtype: CheckSuitePreferencePreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this CheckSuitePreference.


        :param preferences: The preferences of this CheckSuitePreference.
        :type preferences: CheckSuitePreferencePreferences
        """
        if preferences is None:
            raise ValueError("Invalid value for `preferences`, must not be `None`")

        self._preferences = preferences

    @property
    def repository(self):
        """Gets the repository of this CheckSuitePreference.


        :return: The repository of this CheckSuitePreference.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CheckSuitePreference.


        :param repository: The repository of this CheckSuitePreference.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository
