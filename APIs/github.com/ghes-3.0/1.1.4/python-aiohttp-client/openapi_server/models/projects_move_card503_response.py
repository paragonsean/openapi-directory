# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.projects_move_card503_response_errors_inner import ProjectsMoveCard503ResponseErrorsInner
from openapi_server import util


class ProjectsMoveCard503Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, documentation_url: str=None, errors: List[ProjectsMoveCard503ResponseErrorsInner]=None, message: str=None):
        """ProjectsMoveCard503Response - a model defined in OpenAPI

        :param code: The code of this ProjectsMoveCard503Response.
        :param documentation_url: The documentation_url of this ProjectsMoveCard503Response.
        :param errors: The errors of this ProjectsMoveCard503Response.
        :param message: The message of this ProjectsMoveCard503Response.
        """
        self.openapi_types = {
            'code': str,
            'documentation_url': str,
            'errors': List[ProjectsMoveCard503ResponseErrorsInner],
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'documentation_url': 'documentation_url',
            'errors': 'errors',
            'message': 'message'
        }

        self._code = code
        self._documentation_url = documentation_url
        self._errors = errors
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsMoveCard503Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The projects_move_card_503_response of this ProjectsMoveCard503Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ProjectsMoveCard503Response.


        :return: The code of this ProjectsMoveCard503Response.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProjectsMoveCard503Response.


        :param code: The code of this ProjectsMoveCard503Response.
        :type code: str
        """

        self._code = code

    @property
    def documentation_url(self):
        """Gets the documentation_url of this ProjectsMoveCard503Response.


        :return: The documentation_url of this ProjectsMoveCard503Response.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this ProjectsMoveCard503Response.


        :param documentation_url: The documentation_url of this ProjectsMoveCard503Response.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def errors(self):
        """Gets the errors of this ProjectsMoveCard503Response.


        :return: The errors of this ProjectsMoveCard503Response.
        :rtype: List[ProjectsMoveCard503ResponseErrorsInner]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ProjectsMoveCard503Response.


        :param errors: The errors of this ProjectsMoveCard503Response.
        :type errors: List[ProjectsMoveCard503ResponseErrorsInner]
        """

        self._errors = errors

    @property
    def message(self):
        """Gets the message of this ProjectsMoveCard503Response.


        :return: The message of this ProjectsMoveCard503Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProjectsMoveCard503Response.


        :param message: The message of this ProjectsMoveCard503Response.
        :type message: str
        """

        self._message = message
