# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issues_add_labels_request_one_of import IssuesAddLabelsRequestOneOf
from openapi_server.models.issues_set_labels_request_one_of1 import IssuesSetLabelsRequestOneOf1
from openapi_server.models.issues_set_labels_request_one_of1_labels_inner import IssuesSetLabelsRequestOneOf1LabelsInner
from openapi_server import util


class IssuesAddLabelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: List[IssuesSetLabelsRequestOneOf1LabelsInner]=None):
        """IssuesAddLabelsRequest - a model defined in OpenAPI

        :param labels: The labels of this IssuesAddLabelsRequest.
        """
        self.openapi_types = {
            'labels': List[IssuesSetLabelsRequestOneOf1LabelsInner]
        }

        self.attribute_map = {
            'labels': 'labels'
        }

        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesAddLabelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issues_add_labels_request of this IssuesAddLabelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this IssuesAddLabelsRequest.


        :return: The labels of this IssuesAddLabelsRequest.
        :rtype: List[IssuesSetLabelsRequestOneOf1LabelsInner]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IssuesAddLabelsRequest.


        :param labels: The labels of this IssuesAddLabelsRequest.
        :type labels: List[IssuesSetLabelsRequestOneOf1LabelsInner]
        """
        if labels is not None and len(labels) < 1:
            raise ValueError("Invalid value for `labels`, number of items must be greater than or equal to `1`")

        self._labels = labels
