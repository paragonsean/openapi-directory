# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Enterprise(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, created_at: datetime=None, description: str=None, html_url: str=None, id: int=None, name: str=None, node_id: str=None, slug: str=None, updated_at: datetime=None, website_url: str=None):
        """Enterprise - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this Enterprise.
        :param created_at: The created_at of this Enterprise.
        :param description: The description of this Enterprise.
        :param html_url: The html_url of this Enterprise.
        :param id: The id of this Enterprise.
        :param name: The name of this Enterprise.
        :param node_id: The node_id of this Enterprise.
        :param slug: The slug of this Enterprise.
        :param updated_at: The updated_at of this Enterprise.
        :param website_url: The website_url of this Enterprise.
        """
        self.openapi_types = {
            'avatar_url': str,
            'created_at': datetime,
            'description': str,
            'html_url': str,
            'id': int,
            'name': str,
            'node_id': str,
            'slug': str,
            'updated_at': datetime,
            'website_url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'created_at': 'created_at',
            'description': 'description',
            'html_url': 'html_url',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'slug': 'slug',
            'updated_at': 'updated_at',
            'website_url': 'website_url'
        }

        self._avatar_url = avatar_url
        self._created_at = created_at
        self._description = description
        self._html_url = html_url
        self._id = id
        self._name = name
        self._node_id = node_id
        self._slug = slug
        self._updated_at = updated_at
        self._website_url = website_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Enterprise':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise of this Enterprise.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Enterprise.


        :return: The avatar_url of this Enterprise.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Enterprise.


        :param avatar_url: The avatar_url of this Enterprise.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")

        self._avatar_url = avatar_url

    @property
    def created_at(self):
        """Gets the created_at of this Enterprise.


        :return: The created_at of this Enterprise.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Enterprise.


        :param created_at: The created_at of this Enterprise.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Enterprise.

        A short description of the enterprise.

        :return: The description of this Enterprise.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Enterprise.

        A short description of the enterprise.

        :param description: The description of this Enterprise.
        :type description: str
        """

        self._description = description

    @property
    def html_url(self):
        """Gets the html_url of this Enterprise.


        :return: The html_url of this Enterprise.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Enterprise.


        :param html_url: The html_url of this Enterprise.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Enterprise.

        Unique identifier of the enterprise

        :return: The id of this Enterprise.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Enterprise.

        Unique identifier of the enterprise

        :param id: The id of this Enterprise.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Enterprise.

        The name of the enterprise.

        :return: The name of this Enterprise.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Enterprise.

        The name of the enterprise.

        :param name: The name of this Enterprise.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this Enterprise.


        :return: The node_id of this Enterprise.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Enterprise.


        :param node_id: The node_id of this Enterprise.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def slug(self):
        """Gets the slug of this Enterprise.

        The slug url identifier for the enterprise.

        :return: The slug of this Enterprise.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Enterprise.

        The slug url identifier for the enterprise.

        :param slug: The slug of this Enterprise.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def updated_at(self):
        """Gets the updated_at of this Enterprise.


        :return: The updated_at of this Enterprise.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Enterprise.


        :param updated_at: The updated_at of this Enterprise.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def website_url(self):
        """Gets the website_url of this Enterprise.

        The enterprise's website URL.

        :return: The website_url of this Enterprise.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Enterprise.

        The enterprise's website URL.

        :param website_url: The website_url of this Enterprise.
        :type website_url: str
        """

        self._website_url = website_url
