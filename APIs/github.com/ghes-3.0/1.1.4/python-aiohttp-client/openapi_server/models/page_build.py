# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.page_build_error import PageBuildError
from openapi_server import util


class PageBuild(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: str=None, created_at: datetime=None, duration: int=None, error: PageBuildError=None, pusher: NullableSimpleUser=None, status: str=None, updated_at: datetime=None, url: str=None):
        """PageBuild - a model defined in OpenAPI

        :param commit: The commit of this PageBuild.
        :param created_at: The created_at of this PageBuild.
        :param duration: The duration of this PageBuild.
        :param error: The error of this PageBuild.
        :param pusher: The pusher of this PageBuild.
        :param status: The status of this PageBuild.
        :param updated_at: The updated_at of this PageBuild.
        :param url: The url of this PageBuild.
        """
        self.openapi_types = {
            'commit': str,
            'created_at': datetime,
            'duration': int,
            'error': PageBuildError,
            'pusher': NullableSimpleUser,
            'status': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'commit': 'commit',
            'created_at': 'created_at',
            'duration': 'duration',
            'error': 'error',
            'pusher': 'pusher',
            'status': 'status',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._commit = commit
        self._created_at = created_at
        self._duration = duration
        self._error = error
        self._pusher = pusher
        self._status = status
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageBuild':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The page-build of this PageBuild.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this PageBuild.


        :return: The commit of this PageBuild.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this PageBuild.


        :param commit: The commit of this PageBuild.
        :type commit: str
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def created_at(self):
        """Gets the created_at of this PageBuild.


        :return: The created_at of this PageBuild.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PageBuild.


        :param created_at: The created_at of this PageBuild.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this PageBuild.


        :return: The duration of this PageBuild.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PageBuild.


        :param duration: The duration of this PageBuild.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def error(self):
        """Gets the error of this PageBuild.


        :return: The error of this PageBuild.
        :rtype: PageBuildError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PageBuild.


        :param error: The error of this PageBuild.
        :type error: PageBuildError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def pusher(self):
        """Gets the pusher of this PageBuild.


        :return: The pusher of this PageBuild.
        :rtype: NullableSimpleUser
        """
        return self._pusher

    @pusher.setter
    def pusher(self, pusher):
        """Sets the pusher of this PageBuild.


        :param pusher: The pusher of this PageBuild.
        :type pusher: NullableSimpleUser
        """
        if pusher is None:
            raise ValueError("Invalid value for `pusher`, must not be `None`")

        self._pusher = pusher

    @property
    def status(self):
        """Gets the status of this PageBuild.


        :return: The status of this PageBuild.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PageBuild.


        :param status: The status of this PageBuild.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this PageBuild.


        :return: The updated_at of this PageBuild.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PageBuild.


        :param updated_at: The updated_at of this PageBuild.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this PageBuild.


        :return: The url of this PageBuild.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PageBuild.


        :param url: The url of this PageBuild.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
