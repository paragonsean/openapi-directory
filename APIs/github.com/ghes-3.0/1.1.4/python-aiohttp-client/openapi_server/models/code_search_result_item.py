# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server.models.search_result_text_matches_inner import SearchResultTextMatchesInner
from openapi_server import util


class CodeSearchResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_size: int=None, git_url: str=None, html_url: str=None, language: str=None, last_modified_at: datetime=None, line_numbers: List[str]=None, name: str=None, path: str=None, repository: MinimalRepository=None, score: float=None, sha: str=None, text_matches: List[SearchResultTextMatchesInner]=None, url: str=None):
        """CodeSearchResultItem - a model defined in OpenAPI

        :param file_size: The file_size of this CodeSearchResultItem.
        :param git_url: The git_url of this CodeSearchResultItem.
        :param html_url: The html_url of this CodeSearchResultItem.
        :param language: The language of this CodeSearchResultItem.
        :param last_modified_at: The last_modified_at of this CodeSearchResultItem.
        :param line_numbers: The line_numbers of this CodeSearchResultItem.
        :param name: The name of this CodeSearchResultItem.
        :param path: The path of this CodeSearchResultItem.
        :param repository: The repository of this CodeSearchResultItem.
        :param score: The score of this CodeSearchResultItem.
        :param sha: The sha of this CodeSearchResultItem.
        :param text_matches: The text_matches of this CodeSearchResultItem.
        :param url: The url of this CodeSearchResultItem.
        """
        self.openapi_types = {
            'file_size': int,
            'git_url': str,
            'html_url': str,
            'language': str,
            'last_modified_at': datetime,
            'line_numbers': List[str],
            'name': str,
            'path': str,
            'repository': MinimalRepository,
            'score': float,
            'sha': str,
            'text_matches': List[SearchResultTextMatchesInner],
            'url': str
        }

        self.attribute_map = {
            'file_size': 'file_size',
            'git_url': 'git_url',
            'html_url': 'html_url',
            'language': 'language',
            'last_modified_at': 'last_modified_at',
            'line_numbers': 'line_numbers',
            'name': 'name',
            'path': 'path',
            'repository': 'repository',
            'score': 'score',
            'sha': 'sha',
            'text_matches': 'text_matches',
            'url': 'url'
        }

        self._file_size = file_size
        self._git_url = git_url
        self._html_url = html_url
        self._language = language
        self._last_modified_at = last_modified_at
        self._line_numbers = line_numbers
        self._name = name
        self._path = path
        self._repository = repository
        self._score = score
        self._sha = sha
        self._text_matches = text_matches
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeSearchResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-search-result-item of this CodeSearchResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_size(self):
        """Gets the file_size of this CodeSearchResultItem.


        :return: The file_size of this CodeSearchResultItem.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this CodeSearchResultItem.


        :param file_size: The file_size of this CodeSearchResultItem.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def git_url(self):
        """Gets the git_url of this CodeSearchResultItem.


        :return: The git_url of this CodeSearchResultItem.
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this CodeSearchResultItem.


        :param git_url: The git_url of this CodeSearchResultItem.
        :type git_url: str
        """
        if git_url is None:
            raise ValueError("Invalid value for `git_url`, must not be `None`")

        self._git_url = git_url

    @property
    def html_url(self):
        """Gets the html_url of this CodeSearchResultItem.


        :return: The html_url of this CodeSearchResultItem.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this CodeSearchResultItem.


        :param html_url: The html_url of this CodeSearchResultItem.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def language(self):
        """Gets the language of this CodeSearchResultItem.


        :return: The language of this CodeSearchResultItem.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CodeSearchResultItem.


        :param language: The language of this CodeSearchResultItem.
        :type language: str
        """

        self._language = language

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this CodeSearchResultItem.


        :return: The last_modified_at of this CodeSearchResultItem.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this CodeSearchResultItem.


        :param last_modified_at: The last_modified_at of this CodeSearchResultItem.
        :type last_modified_at: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def line_numbers(self):
        """Gets the line_numbers of this CodeSearchResultItem.


        :return: The line_numbers of this CodeSearchResultItem.
        :rtype: List[str]
        """
        return self._line_numbers

    @line_numbers.setter
    def line_numbers(self, line_numbers):
        """Sets the line_numbers of this CodeSearchResultItem.


        :param line_numbers: The line_numbers of this CodeSearchResultItem.
        :type line_numbers: List[str]
        """

        self._line_numbers = line_numbers

    @property
    def name(self):
        """Gets the name of this CodeSearchResultItem.


        :return: The name of this CodeSearchResultItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodeSearchResultItem.


        :param name: The name of this CodeSearchResultItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this CodeSearchResultItem.


        :return: The path of this CodeSearchResultItem.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CodeSearchResultItem.


        :param path: The path of this CodeSearchResultItem.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def repository(self):
        """Gets the repository of this CodeSearchResultItem.


        :return: The repository of this CodeSearchResultItem.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CodeSearchResultItem.


        :param repository: The repository of this CodeSearchResultItem.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def score(self):
        """Gets the score of this CodeSearchResultItem.


        :return: The score of this CodeSearchResultItem.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CodeSearchResultItem.


        :param score: The score of this CodeSearchResultItem.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def sha(self):
        """Gets the sha of this CodeSearchResultItem.


        :return: The sha of this CodeSearchResultItem.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this CodeSearchResultItem.


        :param sha: The sha of this CodeSearchResultItem.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def text_matches(self):
        """Gets the text_matches of this CodeSearchResultItem.


        :return: The text_matches of this CodeSearchResultItem.
        :rtype: List[SearchResultTextMatchesInner]
        """
        return self._text_matches

    @text_matches.setter
    def text_matches(self, text_matches):
        """Sets the text_matches of this CodeSearchResultItem.


        :param text_matches: The text_matches of this CodeSearchResultItem.
        :type text_matches: List[SearchResultTextMatchesInner]
        """

        self._text_matches = text_matches

    @property
    def url(self):
        """Gets the url of this CodeSearchResultItem.


        :return: The url of this CodeSearchResultItem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CodeSearchResultItem.


        :param url: The url of this CodeSearchResultItem.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
