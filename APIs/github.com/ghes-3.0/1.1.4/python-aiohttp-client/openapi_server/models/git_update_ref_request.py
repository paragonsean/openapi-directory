# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GitUpdateRefRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, force: bool=False, sha: str=None):
        """GitUpdateRefRequest - a model defined in OpenAPI

        :param force: The force of this GitUpdateRefRequest.
        :param sha: The sha of this GitUpdateRefRequest.
        """
        self.openapi_types = {
            'force': bool,
            'sha': str
        }

        self.attribute_map = {
            'force': 'force',
            'sha': 'sha'
        }

        self._force = force
        self._sha = sha

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitUpdateRefRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The git_update_ref_request of this GitUpdateRefRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def force(self):
        """Gets the force of this GitUpdateRefRequest.

        Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.

        :return: The force of this GitUpdateRefRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this GitUpdateRefRequest.

        Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.

        :param force: The force of this GitUpdateRefRequest.
        :type force: bool
        """

        self._force = force

    @property
    def sha(self):
        """Gets the sha of this GitUpdateRefRequest.

        The SHA1 value to set this reference to

        :return: The sha of this GitUpdateRefRequest.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this GitUpdateRefRequest.

        The SHA1 value to set this reference to

        :param sha: The sha of this GitUpdateRefRequest.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha
