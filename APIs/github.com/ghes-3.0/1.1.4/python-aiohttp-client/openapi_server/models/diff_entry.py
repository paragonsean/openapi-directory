# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiffEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additions: int=None, blob_url: str=None, changes: int=None, contents_url: str=None, deletions: int=None, filename: str=None, patch: str=None, previous_filename: str=None, raw_url: str=None, sha: str=None, status: str=None):
        """DiffEntry - a model defined in OpenAPI

        :param additions: The additions of this DiffEntry.
        :param blob_url: The blob_url of this DiffEntry.
        :param changes: The changes of this DiffEntry.
        :param contents_url: The contents_url of this DiffEntry.
        :param deletions: The deletions of this DiffEntry.
        :param filename: The filename of this DiffEntry.
        :param patch: The patch of this DiffEntry.
        :param previous_filename: The previous_filename of this DiffEntry.
        :param raw_url: The raw_url of this DiffEntry.
        :param sha: The sha of this DiffEntry.
        :param status: The status of this DiffEntry.
        """
        self.openapi_types = {
            'additions': int,
            'blob_url': str,
            'changes': int,
            'contents_url': str,
            'deletions': int,
            'filename': str,
            'patch': str,
            'previous_filename': str,
            'raw_url': str,
            'sha': str,
            'status': str
        }

        self.attribute_map = {
            'additions': 'additions',
            'blob_url': 'blob_url',
            'changes': 'changes',
            'contents_url': 'contents_url',
            'deletions': 'deletions',
            'filename': 'filename',
            'patch': 'patch',
            'previous_filename': 'previous_filename',
            'raw_url': 'raw_url',
            'sha': 'sha',
            'status': 'status'
        }

        self._additions = additions
        self._blob_url = blob_url
        self._changes = changes
        self._contents_url = contents_url
        self._deletions = deletions
        self._filename = filename
        self._patch = patch
        self._previous_filename = previous_filename
        self._raw_url = raw_url
        self._sha = sha
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiffEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The diff-entry of this DiffEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additions(self):
        """Gets the additions of this DiffEntry.


        :return: The additions of this DiffEntry.
        :rtype: int
        """
        return self._additions

    @additions.setter
    def additions(self, additions):
        """Sets the additions of this DiffEntry.


        :param additions: The additions of this DiffEntry.
        :type additions: int
        """
        if additions is None:
            raise ValueError("Invalid value for `additions`, must not be `None`")

        self._additions = additions

    @property
    def blob_url(self):
        """Gets the blob_url of this DiffEntry.


        :return: The blob_url of this DiffEntry.
        :rtype: str
        """
        return self._blob_url

    @blob_url.setter
    def blob_url(self, blob_url):
        """Sets the blob_url of this DiffEntry.


        :param blob_url: The blob_url of this DiffEntry.
        :type blob_url: str
        """
        if blob_url is None:
            raise ValueError("Invalid value for `blob_url`, must not be `None`")

        self._blob_url = blob_url

    @property
    def changes(self):
        """Gets the changes of this DiffEntry.


        :return: The changes of this DiffEntry.
        :rtype: int
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this DiffEntry.


        :param changes: The changes of this DiffEntry.
        :type changes: int
        """
        if changes is None:
            raise ValueError("Invalid value for `changes`, must not be `None`")

        self._changes = changes

    @property
    def contents_url(self):
        """Gets the contents_url of this DiffEntry.


        :return: The contents_url of this DiffEntry.
        :rtype: str
        """
        return self._contents_url

    @contents_url.setter
    def contents_url(self, contents_url):
        """Sets the contents_url of this DiffEntry.


        :param contents_url: The contents_url of this DiffEntry.
        :type contents_url: str
        """
        if contents_url is None:
            raise ValueError("Invalid value for `contents_url`, must not be `None`")

        self._contents_url = contents_url

    @property
    def deletions(self):
        """Gets the deletions of this DiffEntry.


        :return: The deletions of this DiffEntry.
        :rtype: int
        """
        return self._deletions

    @deletions.setter
    def deletions(self, deletions):
        """Sets the deletions of this DiffEntry.


        :param deletions: The deletions of this DiffEntry.
        :type deletions: int
        """
        if deletions is None:
            raise ValueError("Invalid value for `deletions`, must not be `None`")

        self._deletions = deletions

    @property
    def filename(self):
        """Gets the filename of this DiffEntry.


        :return: The filename of this DiffEntry.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DiffEntry.


        :param filename: The filename of this DiffEntry.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def patch(self):
        """Gets the patch of this DiffEntry.


        :return: The patch of this DiffEntry.
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this DiffEntry.


        :param patch: The patch of this DiffEntry.
        :type patch: str
        """

        self._patch = patch

    @property
    def previous_filename(self):
        """Gets the previous_filename of this DiffEntry.


        :return: The previous_filename of this DiffEntry.
        :rtype: str
        """
        return self._previous_filename

    @previous_filename.setter
    def previous_filename(self, previous_filename):
        """Sets the previous_filename of this DiffEntry.


        :param previous_filename: The previous_filename of this DiffEntry.
        :type previous_filename: str
        """

        self._previous_filename = previous_filename

    @property
    def raw_url(self):
        """Gets the raw_url of this DiffEntry.


        :return: The raw_url of this DiffEntry.
        :rtype: str
        """
        return self._raw_url

    @raw_url.setter
    def raw_url(self, raw_url):
        """Sets the raw_url of this DiffEntry.


        :param raw_url: The raw_url of this DiffEntry.
        :type raw_url: str
        """
        if raw_url is None:
            raise ValueError("Invalid value for `raw_url`, must not be `None`")

        self._raw_url = raw_url

    @property
    def sha(self):
        """Gets the sha of this DiffEntry.


        :return: The sha of this DiffEntry.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this DiffEntry.


        :param sha: The sha of this DiffEntry.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def status(self):
        """Gets the status of this DiffEntry.


        :return: The status of this DiffEntry.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DiffEntry.


        :param status: The status of this DiffEntry.
        :type status: str
        """
        allowed_values = ["added", "removed", "modified", "renamed", "copied", "changed", "unchanged"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
