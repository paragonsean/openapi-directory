# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repos_update_branch_protection_request_required_status_checks_checks_inner import ReposUpdateBranchProtectionRequestRequiredStatusChecksChecksInner
from openapi_server import util


class ReposUpdateBranchProtectionRequestRequiredStatusChecks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checks: List[ReposUpdateBranchProtectionRequestRequiredStatusChecksChecksInner]=None, contexts: List[str]=None, strict: bool=None):
        """ReposUpdateBranchProtectionRequestRequiredStatusChecks - a model defined in OpenAPI

        :param checks: The checks of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :param contexts: The contexts of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :param strict: The strict of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        """
        self.openapi_types = {
            'checks': List[ReposUpdateBranchProtectionRequestRequiredStatusChecksChecksInner],
            'contexts': List[str],
            'strict': bool
        }

        self.attribute_map = {
            'checks': 'checks',
            'contexts': 'contexts',
            'strict': 'strict'
        }

        self._checks = checks
        self._contexts = contexts
        self._strict = strict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateBranchProtectionRequestRequiredStatusChecks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_branch_protection_request_required_status_checks of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checks(self):
        """Gets the checks of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.

        The list of status checks to require in order to merge into this branch.

        :return: The checks of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :rtype: List[ReposUpdateBranchProtectionRequestRequiredStatusChecksChecksInner]
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.

        The list of status checks to require in order to merge into this branch.

        :param checks: The checks of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :type checks: List[ReposUpdateBranchProtectionRequestRequiredStatusChecksChecksInner]
        """

        self._checks = checks

    @property
    def contexts(self):
        """Gets the contexts of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.

        **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control. 

        :return: The contexts of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :rtype: List[str]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.

        **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control. 

        :param contexts: The contexts of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :type contexts: List[str]
        """
        if contexts is None:
            raise ValueError("Invalid value for `contexts`, must not be `None`")

        self._contexts = contexts

    @property
    def strict(self):
        """Gets the strict of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.

        Require branches to be up to date before merging.

        :return: The strict of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :rtype: bool
        """
        return self._strict

    @strict.setter
    def strict(self, strict):
        """Sets the strict of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.

        Require branches to be up to date before merging.

        :param strict: The strict of this ReposUpdateBranchProtectionRequestRequiredStatusChecks.
        :type strict: bool
        """
        if strict is None:
            raise ValueError("Invalid value for `strict`, must not be `None`")

        self._strict = strict
