# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.added_to_project_issue_event import AddedToProjectIssueEvent
from openapi_server.models.added_to_project_issue_event_project_card import AddedToProjectIssueEventProjectCard
from openapi_server.models.author_association import AuthorAssociation
from openapi_server.models.commit_comment import CommitComment
from openapi_server.models.converted_note_to_issue_issue_event import ConvertedNoteToIssueIssueEvent
from openapi_server.models.demilestoned_issue_event import DemilestonedIssueEvent
from openapi_server.models.demilestoned_issue_event_milestone import DemilestonedIssueEventMilestone
from openapi_server.models.git_commit_author import GitCommitAuthor
from openapi_server.models.git_commit_parents_inner import GitCommitParentsInner
from openapi_server.models.git_commit_tree import GitCommitTree
from openapi_server.models.git_commit_verification import GitCommitVerification
from openapi_server.models.labeled_issue_event import LabeledIssueEvent
from openapi_server.models.labeled_issue_event_label import LabeledIssueEventLabel
from openapi_server.models.locked_issue_event import LockedIssueEvent
from openapi_server.models.milestoned_issue_event import MilestonedIssueEvent
from openapi_server.models.moved_column_in_project_issue_event import MovedColumnInProjectIssueEvent
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.pull_request_review_links import PullRequestReviewLinks
from openapi_server.models.reaction_rollup import ReactionRollup
from openapi_server.models.removed_from_project_issue_event import RemovedFromProjectIssueEvent
from openapi_server.models.renamed_issue_event import RenamedIssueEvent
from openapi_server.models.renamed_issue_event_rename import RenamedIssueEventRename
from openapi_server.models.review_dismissed_issue_event import ReviewDismissedIssueEvent
from openapi_server.models.review_dismissed_issue_event_dismissed_review import ReviewDismissedIssueEventDismissedReview
from openapi_server.models.review_request_removed_issue_event import ReviewRequestRemovedIssueEvent
from openapi_server.models.review_requested_issue_event import ReviewRequestedIssueEvent
from openapi_server.models.simple_user import SimpleUser
from openapi_server.models.state_change_issue_event import StateChangeIssueEvent
from openapi_server.models.team import Team
from openapi_server.models.timeline_assigned_issue_event import TimelineAssignedIssueEvent
from openapi_server.models.timeline_comment_event import TimelineCommentEvent
from openapi_server.models.timeline_commit_commented_event import TimelineCommitCommentedEvent
from openapi_server.models.timeline_committed_event import TimelineCommittedEvent
from openapi_server.models.timeline_cross_referenced_event import TimelineCrossReferencedEvent
from openapi_server.models.timeline_cross_referenced_event_source import TimelineCrossReferencedEventSource
from openapi_server.models.timeline_line_commented_event import TimelineLineCommentedEvent
from openapi_server.models.timeline_reviewed_event import TimelineReviewedEvent
from openapi_server.models.timeline_unassigned_issue_event import TimelineUnassignedIssueEvent
from openapi_server.models.unlabeled_issue_event import UnlabeledIssueEvent
from openapi_server import util


class TimelineIssueEvents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: SimpleUser=None, commit_id: str=None, commit_url: str=None, created_at: str=None, event: str=None, id: int=None, label: LabeledIssueEventLabel=None, node_id: str=None, performed_via_github_app: NullableIntegration=None, url: str=None, milestone: DemilestonedIssueEventMilestone=None, rename: RenamedIssueEventRename=None, requested_reviewer: SimpleUser=None, requested_team: Team=None, review_requester: SimpleUser=None, dismissed_review: ReviewDismissedIssueEventDismissedReview=None, lock_reason: str=None, project_card: AddedToProjectIssueEventProjectCard=None, author_association: AuthorAssociation=None, body: str=None, body_html: str=None, body_text: str=None, html_url: str=None, issue_url: str=None, reactions: ReactionRollup=None, updated_at: datetime=None, user: SimpleUser=None, source: TimelineCrossReferencedEventSource=None, author: GitCommitAuthor=None, committer: GitCommitAuthor=None, message: str=None, parents: List[GitCommitParentsInner]=None, sha: str=None, tree: GitCommitTree=None, verification: GitCommitVerification=None, links: PullRequestReviewLinks=None, pull_request_url: str=None, state: str=None, submitted_at: datetime=None, comments: List[CommitComment]=None, assignee: SimpleUser=None):
        """TimelineIssueEvents - a model defined in OpenAPI

        :param actor: The actor of this TimelineIssueEvents.
        :param commit_id: The commit_id of this TimelineIssueEvents.
        :param commit_url: The commit_url of this TimelineIssueEvents.
        :param created_at: The created_at of this TimelineIssueEvents.
        :param event: The event of this TimelineIssueEvents.
        :param id: The id of this TimelineIssueEvents.
        :param label: The label of this TimelineIssueEvents.
        :param node_id: The node_id of this TimelineIssueEvents.
        :param performed_via_github_app: The performed_via_github_app of this TimelineIssueEvents.
        :param url: The url of this TimelineIssueEvents.
        :param milestone: The milestone of this TimelineIssueEvents.
        :param rename: The rename of this TimelineIssueEvents.
        :param requested_reviewer: The requested_reviewer of this TimelineIssueEvents.
        :param requested_team: The requested_team of this TimelineIssueEvents.
        :param review_requester: The review_requester of this TimelineIssueEvents.
        :param dismissed_review: The dismissed_review of this TimelineIssueEvents.
        :param lock_reason: The lock_reason of this TimelineIssueEvents.
        :param project_card: The project_card of this TimelineIssueEvents.
        :param author_association: The author_association of this TimelineIssueEvents.
        :param body: The body of this TimelineIssueEvents.
        :param body_html: The body_html of this TimelineIssueEvents.
        :param body_text: The body_text of this TimelineIssueEvents.
        :param html_url: The html_url of this TimelineIssueEvents.
        :param issue_url: The issue_url of this TimelineIssueEvents.
        :param reactions: The reactions of this TimelineIssueEvents.
        :param updated_at: The updated_at of this TimelineIssueEvents.
        :param user: The user of this TimelineIssueEvents.
        :param source: The source of this TimelineIssueEvents.
        :param author: The author of this TimelineIssueEvents.
        :param committer: The committer of this TimelineIssueEvents.
        :param message: The message of this TimelineIssueEvents.
        :param parents: The parents of this TimelineIssueEvents.
        :param sha: The sha of this TimelineIssueEvents.
        :param tree: The tree of this TimelineIssueEvents.
        :param verification: The verification of this TimelineIssueEvents.
        :param links: The links of this TimelineIssueEvents.
        :param pull_request_url: The pull_request_url of this TimelineIssueEvents.
        :param state: The state of this TimelineIssueEvents.
        :param submitted_at: The submitted_at of this TimelineIssueEvents.
        :param comments: The comments of this TimelineIssueEvents.
        :param assignee: The assignee of this TimelineIssueEvents.
        """
        self.openapi_types = {
            'actor': SimpleUser,
            'commit_id': str,
            'commit_url': str,
            'created_at': str,
            'event': str,
            'id': int,
            'label': LabeledIssueEventLabel,
            'node_id': str,
            'performed_via_github_app': NullableIntegration,
            'url': str,
            'milestone': DemilestonedIssueEventMilestone,
            'rename': RenamedIssueEventRename,
            'requested_reviewer': SimpleUser,
            'requested_team': Team,
            'review_requester': SimpleUser,
            'dismissed_review': ReviewDismissedIssueEventDismissedReview,
            'lock_reason': str,
            'project_card': AddedToProjectIssueEventProjectCard,
            'author_association': AuthorAssociation,
            'body': str,
            'body_html': str,
            'body_text': str,
            'html_url': str,
            'issue_url': str,
            'reactions': ReactionRollup,
            'updated_at': datetime,
            'user': SimpleUser,
            'source': TimelineCrossReferencedEventSource,
            'author': GitCommitAuthor,
            'committer': GitCommitAuthor,
            'message': str,
            'parents': List[GitCommitParentsInner],
            'sha': str,
            'tree': GitCommitTree,
            'verification': GitCommitVerification,
            'links': PullRequestReviewLinks,
            'pull_request_url': str,
            'state': str,
            'submitted_at': datetime,
            'comments': List[CommitComment],
            'assignee': SimpleUser
        }

        self.attribute_map = {
            'actor': 'actor',
            'commit_id': 'commit_id',
            'commit_url': 'commit_url',
            'created_at': 'created_at',
            'event': 'event',
            'id': 'id',
            'label': 'label',
            'node_id': 'node_id',
            'performed_via_github_app': 'performed_via_github_app',
            'url': 'url',
            'milestone': 'milestone',
            'rename': 'rename',
            'requested_reviewer': 'requested_reviewer',
            'requested_team': 'requested_team',
            'review_requester': 'review_requester',
            'dismissed_review': 'dismissed_review',
            'lock_reason': 'lock_reason',
            'project_card': 'project_card',
            'author_association': 'author_association',
            'body': 'body',
            'body_html': 'body_html',
            'body_text': 'body_text',
            'html_url': 'html_url',
            'issue_url': 'issue_url',
            'reactions': 'reactions',
            'updated_at': 'updated_at',
            'user': 'user',
            'source': 'source',
            'author': 'author',
            'committer': 'committer',
            'message': 'message',
            'parents': 'parents',
            'sha': 'sha',
            'tree': 'tree',
            'verification': 'verification',
            'links': '_links',
            'pull_request_url': 'pull_request_url',
            'state': 'state',
            'submitted_at': 'submitted_at',
            'comments': 'comments',
            'assignee': 'assignee'
        }

        self._actor = actor
        self._commit_id = commit_id
        self._commit_url = commit_url
        self._created_at = created_at
        self._event = event
        self._id = id
        self._label = label
        self._node_id = node_id
        self._performed_via_github_app = performed_via_github_app
        self._url = url
        self._milestone = milestone
        self._rename = rename
        self._requested_reviewer = requested_reviewer
        self._requested_team = requested_team
        self._review_requester = review_requester
        self._dismissed_review = dismissed_review
        self._lock_reason = lock_reason
        self._project_card = project_card
        self._author_association = author_association
        self._body = body
        self._body_html = body_html
        self._body_text = body_text
        self._html_url = html_url
        self._issue_url = issue_url
        self._reactions = reactions
        self._updated_at = updated_at
        self._user = user
        self._source = source
        self._author = author
        self._committer = committer
        self._message = message
        self._parents = parents
        self._sha = sha
        self._tree = tree
        self._verification = verification
        self._links = links
        self._pull_request_url = pull_request_url
        self._state = state
        self._submitted_at = submitted_at
        self._comments = comments
        self._assignee = assignee

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineIssueEvents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The timeline-issue-events of this TimelineIssueEvents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this TimelineIssueEvents.


        :return: The actor of this TimelineIssueEvents.
        :rtype: SimpleUser
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this TimelineIssueEvents.


        :param actor: The actor of this TimelineIssueEvents.
        :type actor: SimpleUser
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")

        self._actor = actor

    @property
    def commit_id(self):
        """Gets the commit_id of this TimelineIssueEvents.


        :return: The commit_id of this TimelineIssueEvents.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this TimelineIssueEvents.


        :param commit_id: The commit_id of this TimelineIssueEvents.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id

    @property
    def commit_url(self):
        """Gets the commit_url of this TimelineIssueEvents.


        :return: The commit_url of this TimelineIssueEvents.
        :rtype: str
        """
        return self._commit_url

    @commit_url.setter
    def commit_url(self, commit_url):
        """Sets the commit_url of this TimelineIssueEvents.


        :param commit_url: The commit_url of this TimelineIssueEvents.
        :type commit_url: str
        """
        if commit_url is None:
            raise ValueError("Invalid value for `commit_url`, must not be `None`")

        self._commit_url = commit_url

    @property
    def created_at(self):
        """Gets the created_at of this TimelineIssueEvents.


        :return: The created_at of this TimelineIssueEvents.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TimelineIssueEvents.


        :param created_at: The created_at of this TimelineIssueEvents.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this TimelineIssueEvents.


        :return: The event of this TimelineIssueEvents.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TimelineIssueEvents.


        :param event: The event of this TimelineIssueEvents.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def id(self):
        """Gets the id of this TimelineIssueEvents.


        :return: The id of this TimelineIssueEvents.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimelineIssueEvents.


        :param id: The id of this TimelineIssueEvents.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this TimelineIssueEvents.


        :return: The label of this TimelineIssueEvents.
        :rtype: LabeledIssueEventLabel
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TimelineIssueEvents.


        :param label: The label of this TimelineIssueEvents.
        :type label: LabeledIssueEventLabel
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def node_id(self):
        """Gets the node_id of this TimelineIssueEvents.


        :return: The node_id of this TimelineIssueEvents.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TimelineIssueEvents.


        :param node_id: The node_id of this TimelineIssueEvents.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def performed_via_github_app(self):
        """Gets the performed_via_github_app of this TimelineIssueEvents.


        :return: The performed_via_github_app of this TimelineIssueEvents.
        :rtype: NullableIntegration
        """
        return self._performed_via_github_app

    @performed_via_github_app.setter
    def performed_via_github_app(self, performed_via_github_app):
        """Sets the performed_via_github_app of this TimelineIssueEvents.


        :param performed_via_github_app: The performed_via_github_app of this TimelineIssueEvents.
        :type performed_via_github_app: NullableIntegration
        """
        if performed_via_github_app is None:
            raise ValueError("Invalid value for `performed_via_github_app`, must not be `None`")

        self._performed_via_github_app = performed_via_github_app

    @property
    def url(self):
        """Gets the url of this TimelineIssueEvents.


        :return: The url of this TimelineIssueEvents.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TimelineIssueEvents.


        :param url: The url of this TimelineIssueEvents.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def milestone(self):
        """Gets the milestone of this TimelineIssueEvents.


        :return: The milestone of this TimelineIssueEvents.
        :rtype: DemilestonedIssueEventMilestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this TimelineIssueEvents.


        :param milestone: The milestone of this TimelineIssueEvents.
        :type milestone: DemilestonedIssueEventMilestone
        """
        if milestone is None:
            raise ValueError("Invalid value for `milestone`, must not be `None`")

        self._milestone = milestone

    @property
    def rename(self):
        """Gets the rename of this TimelineIssueEvents.


        :return: The rename of this TimelineIssueEvents.
        :rtype: RenamedIssueEventRename
        """
        return self._rename

    @rename.setter
    def rename(self, rename):
        """Sets the rename of this TimelineIssueEvents.


        :param rename: The rename of this TimelineIssueEvents.
        :type rename: RenamedIssueEventRename
        """
        if rename is None:
            raise ValueError("Invalid value for `rename`, must not be `None`")

        self._rename = rename

    @property
    def requested_reviewer(self):
        """Gets the requested_reviewer of this TimelineIssueEvents.


        :return: The requested_reviewer of this TimelineIssueEvents.
        :rtype: SimpleUser
        """
        return self._requested_reviewer

    @requested_reviewer.setter
    def requested_reviewer(self, requested_reviewer):
        """Sets the requested_reviewer of this TimelineIssueEvents.


        :param requested_reviewer: The requested_reviewer of this TimelineIssueEvents.
        :type requested_reviewer: SimpleUser
        """

        self._requested_reviewer = requested_reviewer

    @property
    def requested_team(self):
        """Gets the requested_team of this TimelineIssueEvents.


        :return: The requested_team of this TimelineIssueEvents.
        :rtype: Team
        """
        return self._requested_team

    @requested_team.setter
    def requested_team(self, requested_team):
        """Sets the requested_team of this TimelineIssueEvents.


        :param requested_team: The requested_team of this TimelineIssueEvents.
        :type requested_team: Team
        """

        self._requested_team = requested_team

    @property
    def review_requester(self):
        """Gets the review_requester of this TimelineIssueEvents.


        :return: The review_requester of this TimelineIssueEvents.
        :rtype: SimpleUser
        """
        return self._review_requester

    @review_requester.setter
    def review_requester(self, review_requester):
        """Sets the review_requester of this TimelineIssueEvents.


        :param review_requester: The review_requester of this TimelineIssueEvents.
        :type review_requester: SimpleUser
        """
        if review_requester is None:
            raise ValueError("Invalid value for `review_requester`, must not be `None`")

        self._review_requester = review_requester

    @property
    def dismissed_review(self):
        """Gets the dismissed_review of this TimelineIssueEvents.


        :return: The dismissed_review of this TimelineIssueEvents.
        :rtype: ReviewDismissedIssueEventDismissedReview
        """
        return self._dismissed_review

    @dismissed_review.setter
    def dismissed_review(self, dismissed_review):
        """Sets the dismissed_review of this TimelineIssueEvents.


        :param dismissed_review: The dismissed_review of this TimelineIssueEvents.
        :type dismissed_review: ReviewDismissedIssueEventDismissedReview
        """
        if dismissed_review is None:
            raise ValueError("Invalid value for `dismissed_review`, must not be `None`")

        self._dismissed_review = dismissed_review

    @property
    def lock_reason(self):
        """Gets the lock_reason of this TimelineIssueEvents.


        :return: The lock_reason of this TimelineIssueEvents.
        :rtype: str
        """
        return self._lock_reason

    @lock_reason.setter
    def lock_reason(self, lock_reason):
        """Sets the lock_reason of this TimelineIssueEvents.


        :param lock_reason: The lock_reason of this TimelineIssueEvents.
        :type lock_reason: str
        """
        if lock_reason is None:
            raise ValueError("Invalid value for `lock_reason`, must not be `None`")

        self._lock_reason = lock_reason

    @property
    def project_card(self):
        """Gets the project_card of this TimelineIssueEvents.


        :return: The project_card of this TimelineIssueEvents.
        :rtype: AddedToProjectIssueEventProjectCard
        """
        return self._project_card

    @project_card.setter
    def project_card(self, project_card):
        """Sets the project_card of this TimelineIssueEvents.


        :param project_card: The project_card of this TimelineIssueEvents.
        :type project_card: AddedToProjectIssueEventProjectCard
        """

        self._project_card = project_card

    @property
    def author_association(self):
        """Gets the author_association of this TimelineIssueEvents.


        :return: The author_association of this TimelineIssueEvents.
        :rtype: AuthorAssociation
        """
        return self._author_association

    @author_association.setter
    def author_association(self, author_association):
        """Sets the author_association of this TimelineIssueEvents.


        :param author_association: The author_association of this TimelineIssueEvents.
        :type author_association: AuthorAssociation
        """
        if author_association is None:
            raise ValueError("Invalid value for `author_association`, must not be `None`")

        self._author_association = author_association

    @property
    def body(self):
        """Gets the body of this TimelineIssueEvents.

        The text of the review.

        :return: The body of this TimelineIssueEvents.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TimelineIssueEvents.

        The text of the review.

        :param body: The body of this TimelineIssueEvents.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this TimelineIssueEvents.


        :return: The body_html of this TimelineIssueEvents.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this TimelineIssueEvents.


        :param body_html: The body_html of this TimelineIssueEvents.
        :type body_html: str
        """

        self._body_html = body_html

    @property
    def body_text(self):
        """Gets the body_text of this TimelineIssueEvents.


        :return: The body_text of this TimelineIssueEvents.
        :rtype: str
        """
        return self._body_text

    @body_text.setter
    def body_text(self, body_text):
        """Sets the body_text of this TimelineIssueEvents.


        :param body_text: The body_text of this TimelineIssueEvents.
        :type body_text: str
        """

        self._body_text = body_text

    @property
    def html_url(self):
        """Gets the html_url of this TimelineIssueEvents.


        :return: The html_url of this TimelineIssueEvents.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TimelineIssueEvents.


        :param html_url: The html_url of this TimelineIssueEvents.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def issue_url(self):
        """Gets the issue_url of this TimelineIssueEvents.


        :return: The issue_url of this TimelineIssueEvents.
        :rtype: str
        """
        return self._issue_url

    @issue_url.setter
    def issue_url(self, issue_url):
        """Sets the issue_url of this TimelineIssueEvents.


        :param issue_url: The issue_url of this TimelineIssueEvents.
        :type issue_url: str
        """
        if issue_url is None:
            raise ValueError("Invalid value for `issue_url`, must not be `None`")

        self._issue_url = issue_url

    @property
    def reactions(self):
        """Gets the reactions of this TimelineIssueEvents.


        :return: The reactions of this TimelineIssueEvents.
        :rtype: ReactionRollup
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this TimelineIssueEvents.


        :param reactions: The reactions of this TimelineIssueEvents.
        :type reactions: ReactionRollup
        """

        self._reactions = reactions

    @property
    def updated_at(self):
        """Gets the updated_at of this TimelineIssueEvents.


        :return: The updated_at of this TimelineIssueEvents.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TimelineIssueEvents.


        :param updated_at: The updated_at of this TimelineIssueEvents.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this TimelineIssueEvents.


        :return: The user of this TimelineIssueEvents.
        :rtype: SimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TimelineIssueEvents.


        :param user: The user of this TimelineIssueEvents.
        :type user: SimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def source(self):
        """Gets the source of this TimelineIssueEvents.


        :return: The source of this TimelineIssueEvents.
        :rtype: TimelineCrossReferencedEventSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TimelineIssueEvents.


        :param source: The source of this TimelineIssueEvents.
        :type source: TimelineCrossReferencedEventSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def author(self):
        """Gets the author of this TimelineIssueEvents.


        :return: The author of this TimelineIssueEvents.
        :rtype: GitCommitAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TimelineIssueEvents.


        :param author: The author of this TimelineIssueEvents.
        :type author: GitCommitAuthor
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this TimelineIssueEvents.


        :return: The committer of this TimelineIssueEvents.
        :rtype: GitCommitAuthor
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this TimelineIssueEvents.


        :param committer: The committer of this TimelineIssueEvents.
        :type committer: GitCommitAuthor
        """
        if committer is None:
            raise ValueError("Invalid value for `committer`, must not be `None`")

        self._committer = committer

    @property
    def message(self):
        """Gets the message of this TimelineIssueEvents.

        Message describing the purpose of the commit

        :return: The message of this TimelineIssueEvents.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TimelineIssueEvents.

        Message describing the purpose of the commit

        :param message: The message of this TimelineIssueEvents.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def parents(self):
        """Gets the parents of this TimelineIssueEvents.


        :return: The parents of this TimelineIssueEvents.
        :rtype: List[GitCommitParentsInner]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this TimelineIssueEvents.


        :param parents: The parents of this TimelineIssueEvents.
        :type parents: List[GitCommitParentsInner]
        """
        if parents is None:
            raise ValueError("Invalid value for `parents`, must not be `None`")

        self._parents = parents

    @property
    def sha(self):
        """Gets the sha of this TimelineIssueEvents.

        SHA for the commit

        :return: The sha of this TimelineIssueEvents.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this TimelineIssueEvents.

        SHA for the commit

        :param sha: The sha of this TimelineIssueEvents.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def tree(self):
        """Gets the tree of this TimelineIssueEvents.


        :return: The tree of this TimelineIssueEvents.
        :rtype: GitCommitTree
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this TimelineIssueEvents.


        :param tree: The tree of this TimelineIssueEvents.
        :type tree: GitCommitTree
        """
        if tree is None:
            raise ValueError("Invalid value for `tree`, must not be `None`")

        self._tree = tree

    @property
    def verification(self):
        """Gets the verification of this TimelineIssueEvents.


        :return: The verification of this TimelineIssueEvents.
        :rtype: GitCommitVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this TimelineIssueEvents.


        :param verification: The verification of this TimelineIssueEvents.
        :type verification: GitCommitVerification
        """
        if verification is None:
            raise ValueError("Invalid value for `verification`, must not be `None`")

        self._verification = verification

    @property
    def links(self):
        """Gets the links of this TimelineIssueEvents.


        :return: The links of this TimelineIssueEvents.
        :rtype: PullRequestReviewLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TimelineIssueEvents.


        :param links: The links of this TimelineIssueEvents.
        :type links: PullRequestReviewLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def pull_request_url(self):
        """Gets the pull_request_url of this TimelineIssueEvents.


        :return: The pull_request_url of this TimelineIssueEvents.
        :rtype: str
        """
        return self._pull_request_url

    @pull_request_url.setter
    def pull_request_url(self, pull_request_url):
        """Sets the pull_request_url of this TimelineIssueEvents.


        :param pull_request_url: The pull_request_url of this TimelineIssueEvents.
        :type pull_request_url: str
        """
        if pull_request_url is None:
            raise ValueError("Invalid value for `pull_request_url`, must not be `None`")

        self._pull_request_url = pull_request_url

    @property
    def state(self):
        """Gets the state of this TimelineIssueEvents.


        :return: The state of this TimelineIssueEvents.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TimelineIssueEvents.


        :param state: The state of this TimelineIssueEvents.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def submitted_at(self):
        """Gets the submitted_at of this TimelineIssueEvents.


        :return: The submitted_at of this TimelineIssueEvents.
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this TimelineIssueEvents.


        :param submitted_at: The submitted_at of this TimelineIssueEvents.
        :type submitted_at: datetime
        """

        self._submitted_at = submitted_at

    @property
    def comments(self):
        """Gets the comments of this TimelineIssueEvents.


        :return: The comments of this TimelineIssueEvents.
        :rtype: List[CommitComment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TimelineIssueEvents.


        :param comments: The comments of this TimelineIssueEvents.
        :type comments: List[CommitComment]
        """

        self._comments = comments

    @property
    def assignee(self):
        """Gets the assignee of this TimelineIssueEvents.


        :return: The assignee of this TimelineIssueEvents.
        :rtype: SimpleUser
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this TimelineIssueEvents.


        :param assignee: The assignee of this TimelineIssueEvents.
        :type assignee: SimpleUser
        """
        if assignee is None:
            raise ValueError("Invalid value for `assignee`, must not be `None`")

        self._assignee = assignee
