# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseSettingsEnterpriseSyslog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, protocol_name: str=None, server: str=None):
        """EnterpriseSettingsEnterpriseSyslog - a model defined in OpenAPI

        :param enabled: The enabled of this EnterpriseSettingsEnterpriseSyslog.
        :param protocol_name: The protocol_name of this EnterpriseSettingsEnterpriseSyslog.
        :param server: The server of this EnterpriseSettingsEnterpriseSyslog.
        """
        self.openapi_types = {
            'enabled': bool,
            'protocol_name': str,
            'server': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'protocol_name': 'protocol_name',
            'server': 'server'
        }

        self._enabled = enabled
        self._protocol_name = protocol_name
        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterpriseSyslog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise_syslog of this EnterpriseSettingsEnterpriseSyslog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this EnterpriseSettingsEnterpriseSyslog.


        :return: The enabled of this EnterpriseSettingsEnterpriseSyslog.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EnterpriseSettingsEnterpriseSyslog.


        :param enabled: The enabled of this EnterpriseSettingsEnterpriseSyslog.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def protocol_name(self):
        """Gets the protocol_name of this EnterpriseSettingsEnterpriseSyslog.


        :return: The protocol_name of this EnterpriseSettingsEnterpriseSyslog.
        :rtype: str
        """
        return self._protocol_name

    @protocol_name.setter
    def protocol_name(self, protocol_name):
        """Sets the protocol_name of this EnterpriseSettingsEnterpriseSyslog.


        :param protocol_name: The protocol_name of this EnterpriseSettingsEnterpriseSyslog.
        :type protocol_name: str
        """

        self._protocol_name = protocol_name

    @property
    def server(self):
        """Gets the server of this EnterpriseSettingsEnterpriseSyslog.


        :return: The server of this EnterpriseSettingsEnterpriseSyslog.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this EnterpriseSettingsEnterpriseSyslog.


        :param server: The server of this EnterpriseSettingsEnterpriseSyslog.
        :type server: str
        """

        self._server = server
