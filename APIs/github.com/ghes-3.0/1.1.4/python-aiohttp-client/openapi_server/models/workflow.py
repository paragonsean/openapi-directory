# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Workflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badge_url: str=None, created_at: datetime=None, deleted_at: datetime=None, html_url: str=None, id: int=None, name: str=None, node_id: str=None, path: str=None, state: str=None, updated_at: datetime=None, url: str=None):
        """Workflow - a model defined in OpenAPI

        :param badge_url: The badge_url of this Workflow.
        :param created_at: The created_at of this Workflow.
        :param deleted_at: The deleted_at of this Workflow.
        :param html_url: The html_url of this Workflow.
        :param id: The id of this Workflow.
        :param name: The name of this Workflow.
        :param node_id: The node_id of this Workflow.
        :param path: The path of this Workflow.
        :param state: The state of this Workflow.
        :param updated_at: The updated_at of this Workflow.
        :param url: The url of this Workflow.
        """
        self.openapi_types = {
            'badge_url': str,
            'created_at': datetime,
            'deleted_at': datetime,
            'html_url': str,
            'id': int,
            'name': str,
            'node_id': str,
            'path': str,
            'state': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'badge_url': 'badge_url',
            'created_at': 'created_at',
            'deleted_at': 'deleted_at',
            'html_url': 'html_url',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'path': 'path',
            'state': 'state',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._badge_url = badge_url
        self._created_at = created_at
        self._deleted_at = deleted_at
        self._html_url = html_url
        self._id = id
        self._name = name
        self._node_id = node_id
        self._path = path
        self._state = state
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The workflow of this Workflow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badge_url(self):
        """Gets the badge_url of this Workflow.


        :return: The badge_url of this Workflow.
        :rtype: str
        """
        return self._badge_url

    @badge_url.setter
    def badge_url(self, badge_url):
        """Sets the badge_url of this Workflow.


        :param badge_url: The badge_url of this Workflow.
        :type badge_url: str
        """
        if badge_url is None:
            raise ValueError("Invalid value for `badge_url`, must not be `None`")

        self._badge_url = badge_url

    @property
    def created_at(self):
        """Gets the created_at of this Workflow.


        :return: The created_at of this Workflow.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workflow.


        :param created_at: The created_at of this Workflow.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Workflow.


        :return: The deleted_at of this Workflow.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Workflow.


        :param deleted_at: The deleted_at of this Workflow.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def html_url(self):
        """Gets the html_url of this Workflow.


        :return: The html_url of this Workflow.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Workflow.


        :param html_url: The html_url of this Workflow.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Workflow.


        :return: The id of this Workflow.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workflow.


        :param id: The id of this Workflow.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Workflow.


        :return: The name of this Workflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.


        :param name: The name of this Workflow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this Workflow.


        :return: The node_id of this Workflow.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Workflow.


        :param node_id: The node_id of this Workflow.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def path(self):
        """Gets the path of this Workflow.


        :return: The path of this Workflow.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Workflow.


        :param path: The path of this Workflow.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def state(self):
        """Gets the state of this Workflow.


        :return: The state of this Workflow.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Workflow.


        :param state: The state of this Workflow.
        :type state: str
        """
        allowed_values = ["active", "deleted", "disabled_fork", "disabled_inactivity", "disabled_manually"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this Workflow.


        :return: The updated_at of this Workflow.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Workflow.


        :param updated_at: The updated_at of this Workflow.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Workflow.


        :return: The url of this Workflow.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Workflow.


        :param url: The url of this Workflow.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
