# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runner_label import RunnerLabel
from openapi_server import util


class Runner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, busy: bool=None, id: int=None, labels: List[RunnerLabel]=None, name: str=None, os: str=None, status: str=None):
        """Runner - a model defined in OpenAPI

        :param busy: The busy of this Runner.
        :param id: The id of this Runner.
        :param labels: The labels of this Runner.
        :param name: The name of this Runner.
        :param os: The os of this Runner.
        :param status: The status of this Runner.
        """
        self.openapi_types = {
            'busy': bool,
            'id': int,
            'labels': List[RunnerLabel],
            'name': str,
            'os': str,
            'status': str
        }

        self.attribute_map = {
            'busy': 'busy',
            'id': 'id',
            'labels': 'labels',
            'name': 'name',
            'os': 'os',
            'status': 'status'
        }

        self._busy = busy
        self._id = id
        self._labels = labels
        self._name = name
        self._os = os
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Runner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The runner of this Runner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def busy(self):
        """Gets the busy of this Runner.


        :return: The busy of this Runner.
        :rtype: bool
        """
        return self._busy

    @busy.setter
    def busy(self, busy):
        """Sets the busy of this Runner.


        :param busy: The busy of this Runner.
        :type busy: bool
        """
        if busy is None:
            raise ValueError("Invalid value for `busy`, must not be `None`")

        self._busy = busy

    @property
    def id(self):
        """Gets the id of this Runner.

        The id of the runner.

        :return: The id of this Runner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Runner.

        The id of the runner.

        :param id: The id of this Runner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Runner.


        :return: The labels of this Runner.
        :rtype: List[RunnerLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Runner.


        :param labels: The labels of this Runner.
        :type labels: List[RunnerLabel]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Runner.

        The name of the runner.

        :return: The name of this Runner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Runner.

        The name of the runner.

        :param name: The name of this Runner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os(self):
        """Gets the os of this Runner.

        The Operating System of the runner.

        :return: The os of this Runner.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this Runner.

        The Operating System of the runner.

        :param os: The os of this Runner.
        :type os: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def status(self):
        """Gets the status of this Runner.

        The status of the runner.

        :return: The status of this Runner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Runner.

        The status of the runner.

        :param status: The status of this Runner.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
