# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_payload import DeploymentPayload
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class Deployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, creator: NullableSimpleUser=None, description: str=None, environment: str=None, id: int=None, node_id: str=None, original_environment: str=None, payload: DeploymentPayload=None, performed_via_github_app: NullableIntegration=None, production_environment: bool=None, ref: str=None, repository_url: str=None, sha: str=None, statuses_url: str=None, task: str=None, transient_environment: bool=None, updated_at: datetime=None, url: str=None):
        """Deployment - a model defined in OpenAPI

        :param created_at: The created_at of this Deployment.
        :param creator: The creator of this Deployment.
        :param description: The description of this Deployment.
        :param environment: The environment of this Deployment.
        :param id: The id of this Deployment.
        :param node_id: The node_id of this Deployment.
        :param original_environment: The original_environment of this Deployment.
        :param payload: The payload of this Deployment.
        :param performed_via_github_app: The performed_via_github_app of this Deployment.
        :param production_environment: The production_environment of this Deployment.
        :param ref: The ref of this Deployment.
        :param repository_url: The repository_url of this Deployment.
        :param sha: The sha of this Deployment.
        :param statuses_url: The statuses_url of this Deployment.
        :param task: The task of this Deployment.
        :param transient_environment: The transient_environment of this Deployment.
        :param updated_at: The updated_at of this Deployment.
        :param url: The url of this Deployment.
        """
        self.openapi_types = {
            'created_at': datetime,
            'creator': NullableSimpleUser,
            'description': str,
            'environment': str,
            'id': int,
            'node_id': str,
            'original_environment': str,
            'payload': DeploymentPayload,
            'performed_via_github_app': NullableIntegration,
            'production_environment': bool,
            'ref': str,
            'repository_url': str,
            'sha': str,
            'statuses_url': str,
            'task': str,
            'transient_environment': bool,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'creator': 'creator',
            'description': 'description',
            'environment': 'environment',
            'id': 'id',
            'node_id': 'node_id',
            'original_environment': 'original_environment',
            'payload': 'payload',
            'performed_via_github_app': 'performed_via_github_app',
            'production_environment': 'production_environment',
            'ref': 'ref',
            'repository_url': 'repository_url',
            'sha': 'sha',
            'statuses_url': 'statuses_url',
            'task': 'task',
            'transient_environment': 'transient_environment',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._created_at = created_at
        self._creator = creator
        self._description = description
        self._environment = environment
        self._id = id
        self._node_id = node_id
        self._original_environment = original_environment
        self._payload = payload
        self._performed_via_github_app = performed_via_github_app
        self._production_environment = production_environment
        self._ref = ref
        self._repository_url = repository_url
        self._sha = sha
        self._statuses_url = statuses_url
        self._task = task
        self._transient_environment = transient_environment
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deployment of this Deployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Deployment.


        :return: The created_at of this Deployment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Deployment.


        :param created_at: The created_at of this Deployment.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this Deployment.


        :return: The creator of this Deployment.
        :rtype: NullableSimpleUser
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Deployment.


        :param creator: The creator of this Deployment.
        :type creator: NullableSimpleUser
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this Deployment.


        :return: The description of this Deployment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Deployment.


        :param description: The description of this Deployment.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this Deployment.

        Name for the target deployment environment.

        :return: The environment of this Deployment.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Deployment.

        Name for the target deployment environment.

        :param environment: The environment of this Deployment.
        :type environment: str
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment

    @property
    def id(self):
        """Gets the id of this Deployment.

        Unique identifier of the deployment

        :return: The id of this Deployment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.

        Unique identifier of the deployment

        :param id: The id of this Deployment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this Deployment.


        :return: The node_id of this Deployment.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Deployment.


        :param node_id: The node_id of this Deployment.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def original_environment(self):
        """Gets the original_environment of this Deployment.


        :return: The original_environment of this Deployment.
        :rtype: str
        """
        return self._original_environment

    @original_environment.setter
    def original_environment(self, original_environment):
        """Sets the original_environment of this Deployment.


        :param original_environment: The original_environment of this Deployment.
        :type original_environment: str
        """

        self._original_environment = original_environment

    @property
    def payload(self):
        """Gets the payload of this Deployment.


        :return: The payload of this Deployment.
        :rtype: DeploymentPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Deployment.


        :param payload: The payload of this Deployment.
        :type payload: DeploymentPayload
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def performed_via_github_app(self):
        """Gets the performed_via_github_app of this Deployment.


        :return: The performed_via_github_app of this Deployment.
        :rtype: NullableIntegration
        """
        return self._performed_via_github_app

    @performed_via_github_app.setter
    def performed_via_github_app(self, performed_via_github_app):
        """Sets the performed_via_github_app of this Deployment.


        :param performed_via_github_app: The performed_via_github_app of this Deployment.
        :type performed_via_github_app: NullableIntegration
        """

        self._performed_via_github_app = performed_via_github_app

    @property
    def production_environment(self):
        """Gets the production_environment of this Deployment.

        Specifies if the given environment is one that end-users directly interact with. Default: false.

        :return: The production_environment of this Deployment.
        :rtype: bool
        """
        return self._production_environment

    @production_environment.setter
    def production_environment(self, production_environment):
        """Sets the production_environment of this Deployment.

        Specifies if the given environment is one that end-users directly interact with. Default: false.

        :param production_environment: The production_environment of this Deployment.
        :type production_environment: bool
        """

        self._production_environment = production_environment

    @property
    def ref(self):
        """Gets the ref of this Deployment.

        The ref to deploy. This can be a branch, tag, or sha.

        :return: The ref of this Deployment.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this Deployment.

        The ref to deploy. This can be a branch, tag, or sha.

        :param ref: The ref of this Deployment.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref

    @property
    def repository_url(self):
        """Gets the repository_url of this Deployment.


        :return: The repository_url of this Deployment.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this Deployment.


        :param repository_url: The repository_url of this Deployment.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def sha(self):
        """Gets the sha of this Deployment.


        :return: The sha of this Deployment.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this Deployment.


        :param sha: The sha of this Deployment.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def statuses_url(self):
        """Gets the statuses_url of this Deployment.


        :return: The statuses_url of this Deployment.
        :rtype: str
        """
        return self._statuses_url

    @statuses_url.setter
    def statuses_url(self, statuses_url):
        """Sets the statuses_url of this Deployment.


        :param statuses_url: The statuses_url of this Deployment.
        :type statuses_url: str
        """
        if statuses_url is None:
            raise ValueError("Invalid value for `statuses_url`, must not be `None`")

        self._statuses_url = statuses_url

    @property
    def task(self):
        """Gets the task of this Deployment.

        Parameter to specify a task to execute

        :return: The task of this Deployment.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this Deployment.

        Parameter to specify a task to execute

        :param task: The task of this Deployment.
        :type task: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")

        self._task = task

    @property
    def transient_environment(self):
        """Gets the transient_environment of this Deployment.

        Specifies if the given environment is will no longer exist at some point in the future. Default: false.

        :return: The transient_environment of this Deployment.
        :rtype: bool
        """
        return self._transient_environment

    @transient_environment.setter
    def transient_environment(self, transient_environment):
        """Sets the transient_environment of this Deployment.

        Specifies if the given environment is will no longer exist at some point in the future. Default: false.

        :param transient_environment: The transient_environment of this Deployment.
        :type transient_environment: bool
        """

        self._transient_environment = transient_environment

    @property
    def updated_at(self):
        """Gets the updated_at of this Deployment.


        :return: The updated_at of this Deployment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Deployment.


        :param updated_at: The updated_at of this Deployment.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Deployment.


        :return: The url of this Deployment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Deployment.


        :param url: The url of this Deployment.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
