# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_search_result_item_commit import CommitSearchResultItemCommit
from openapi_server.models.commit_search_result_item_parents_inner import CommitSearchResultItemParentsInner
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server.models.nullable_git_user import NullableGitUser
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.search_result_text_matches_inner import SearchResultTextMatchesInner
from openapi_server import util


class CommitSearchResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: NullableSimpleUser=None, comments_url: str=None, commit: CommitSearchResultItemCommit=None, committer: NullableGitUser=None, html_url: str=None, node_id: str=None, parents: List[CommitSearchResultItemParentsInner]=None, repository: MinimalRepository=None, score: float=None, sha: str=None, text_matches: List[SearchResultTextMatchesInner]=None, url: str=None):
        """CommitSearchResultItem - a model defined in OpenAPI

        :param author: The author of this CommitSearchResultItem.
        :param comments_url: The comments_url of this CommitSearchResultItem.
        :param commit: The commit of this CommitSearchResultItem.
        :param committer: The committer of this CommitSearchResultItem.
        :param html_url: The html_url of this CommitSearchResultItem.
        :param node_id: The node_id of this CommitSearchResultItem.
        :param parents: The parents of this CommitSearchResultItem.
        :param repository: The repository of this CommitSearchResultItem.
        :param score: The score of this CommitSearchResultItem.
        :param sha: The sha of this CommitSearchResultItem.
        :param text_matches: The text_matches of this CommitSearchResultItem.
        :param url: The url of this CommitSearchResultItem.
        """
        self.openapi_types = {
            'author': NullableSimpleUser,
            'comments_url': str,
            'commit': CommitSearchResultItemCommit,
            'committer': NullableGitUser,
            'html_url': str,
            'node_id': str,
            'parents': List[CommitSearchResultItemParentsInner],
            'repository': MinimalRepository,
            'score': float,
            'sha': str,
            'text_matches': List[SearchResultTextMatchesInner],
            'url': str
        }

        self.attribute_map = {
            'author': 'author',
            'comments_url': 'comments_url',
            'commit': 'commit',
            'committer': 'committer',
            'html_url': 'html_url',
            'node_id': 'node_id',
            'parents': 'parents',
            'repository': 'repository',
            'score': 'score',
            'sha': 'sha',
            'text_matches': 'text_matches',
            'url': 'url'
        }

        self._author = author
        self._comments_url = comments_url
        self._commit = commit
        self._committer = committer
        self._html_url = html_url
        self._node_id = node_id
        self._parents = parents
        self._repository = repository
        self._score = score
        self._sha = sha
        self._text_matches = text_matches
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitSearchResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The commit-search-result-item of this CommitSearchResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CommitSearchResultItem.


        :return: The author of this CommitSearchResultItem.
        :rtype: NullableSimpleUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommitSearchResultItem.


        :param author: The author of this CommitSearchResultItem.
        :type author: NullableSimpleUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def comments_url(self):
        """Gets the comments_url of this CommitSearchResultItem.


        :return: The comments_url of this CommitSearchResultItem.
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this CommitSearchResultItem.


        :param comments_url: The comments_url of this CommitSearchResultItem.
        :type comments_url: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")

        self._comments_url = comments_url

    @property
    def commit(self):
        """Gets the commit of this CommitSearchResultItem.


        :return: The commit of this CommitSearchResultItem.
        :rtype: CommitSearchResultItemCommit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this CommitSearchResultItem.


        :param commit: The commit of this CommitSearchResultItem.
        :type commit: CommitSearchResultItemCommit
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def committer(self):
        """Gets the committer of this CommitSearchResultItem.


        :return: The committer of this CommitSearchResultItem.
        :rtype: NullableGitUser
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this CommitSearchResultItem.


        :param committer: The committer of this CommitSearchResultItem.
        :type committer: NullableGitUser
        """
        if committer is None:
            raise ValueError("Invalid value for `committer`, must not be `None`")

        self._committer = committer

    @property
    def html_url(self):
        """Gets the html_url of this CommitSearchResultItem.


        :return: The html_url of this CommitSearchResultItem.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this CommitSearchResultItem.


        :param html_url: The html_url of this CommitSearchResultItem.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def node_id(self):
        """Gets the node_id of this CommitSearchResultItem.


        :return: The node_id of this CommitSearchResultItem.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this CommitSearchResultItem.


        :param node_id: The node_id of this CommitSearchResultItem.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def parents(self):
        """Gets the parents of this CommitSearchResultItem.


        :return: The parents of this CommitSearchResultItem.
        :rtype: List[CommitSearchResultItemParentsInner]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this CommitSearchResultItem.


        :param parents: The parents of this CommitSearchResultItem.
        :type parents: List[CommitSearchResultItemParentsInner]
        """
        if parents is None:
            raise ValueError("Invalid value for `parents`, must not be `None`")

        self._parents = parents

    @property
    def repository(self):
        """Gets the repository of this CommitSearchResultItem.


        :return: The repository of this CommitSearchResultItem.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CommitSearchResultItem.


        :param repository: The repository of this CommitSearchResultItem.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def score(self):
        """Gets the score of this CommitSearchResultItem.


        :return: The score of this CommitSearchResultItem.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CommitSearchResultItem.


        :param score: The score of this CommitSearchResultItem.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def sha(self):
        """Gets the sha of this CommitSearchResultItem.


        :return: The sha of this CommitSearchResultItem.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this CommitSearchResultItem.


        :param sha: The sha of this CommitSearchResultItem.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def text_matches(self):
        """Gets the text_matches of this CommitSearchResultItem.


        :return: The text_matches of this CommitSearchResultItem.
        :rtype: List[SearchResultTextMatchesInner]
        """
        return self._text_matches

    @text_matches.setter
    def text_matches(self, text_matches):
        """Sets the text_matches of this CommitSearchResultItem.


        :param text_matches: The text_matches of this CommitSearchResultItem.
        :type text_matches: List[SearchResultTextMatchesInner]
        """

        self._text_matches = text_matches

    @property
    def url(self):
        """Gets the url of this CommitSearchResultItem.


        :return: The url of this CommitSearchResultItem.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CommitSearchResultItem.


        :param url: The url of this CommitSearchResultItem.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
