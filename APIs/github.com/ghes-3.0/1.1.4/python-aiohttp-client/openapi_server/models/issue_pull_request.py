# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuePullRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, diff_url: str=None, html_url: str=None, merged_at: datetime=None, patch_url: str=None, url: str=None):
        """IssuePullRequest - a model defined in OpenAPI

        :param diff_url: The diff_url of this IssuePullRequest.
        :param html_url: The html_url of this IssuePullRequest.
        :param merged_at: The merged_at of this IssuePullRequest.
        :param patch_url: The patch_url of this IssuePullRequest.
        :param url: The url of this IssuePullRequest.
        """
        self.openapi_types = {
            'diff_url': str,
            'html_url': str,
            'merged_at': datetime,
            'patch_url': str,
            'url': str
        }

        self.attribute_map = {
            'diff_url': 'diff_url',
            'html_url': 'html_url',
            'merged_at': 'merged_at',
            'patch_url': 'patch_url',
            'url': 'url'
        }

        self._diff_url = diff_url
        self._html_url = html_url
        self._merged_at = merged_at
        self._patch_url = patch_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuePullRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issue_pull_request of this IssuePullRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def diff_url(self):
        """Gets the diff_url of this IssuePullRequest.


        :return: The diff_url of this IssuePullRequest.
        :rtype: str
        """
        return self._diff_url

    @diff_url.setter
    def diff_url(self, diff_url):
        """Sets the diff_url of this IssuePullRequest.


        :param diff_url: The diff_url of this IssuePullRequest.
        :type diff_url: str
        """
        if diff_url is None:
            raise ValueError("Invalid value for `diff_url`, must not be `None`")

        self._diff_url = diff_url

    @property
    def html_url(self):
        """Gets the html_url of this IssuePullRequest.


        :return: The html_url of this IssuePullRequest.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this IssuePullRequest.


        :param html_url: The html_url of this IssuePullRequest.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def merged_at(self):
        """Gets the merged_at of this IssuePullRequest.


        :return: The merged_at of this IssuePullRequest.
        :rtype: datetime
        """
        return self._merged_at

    @merged_at.setter
    def merged_at(self, merged_at):
        """Sets the merged_at of this IssuePullRequest.


        :param merged_at: The merged_at of this IssuePullRequest.
        :type merged_at: datetime
        """

        self._merged_at = merged_at

    @property
    def patch_url(self):
        """Gets the patch_url of this IssuePullRequest.


        :return: The patch_url of this IssuePullRequest.
        :rtype: str
        """
        return self._patch_url

    @patch_url.setter
    def patch_url(self, patch_url):
        """Sets the patch_url of this IssuePullRequest.


        :param patch_url: The patch_url of this IssuePullRequest.
        :type patch_url: str
        """
        if patch_url is None:
            raise ValueError("Invalid value for `patch_url`, must not be `None`")

        self._patch_url = patch_url

    @property
    def url(self):
        """Gets the url of this IssuePullRequest.


        :return: The url of this IssuePullRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssuePullRequest.


        :param url: The url of this IssuePullRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
