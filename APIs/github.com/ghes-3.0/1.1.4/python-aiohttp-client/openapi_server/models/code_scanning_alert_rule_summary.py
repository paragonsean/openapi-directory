# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeScanningAlertRuleSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, name: str=None, severity: str=None):
        """CodeScanningAlertRuleSummary - a model defined in OpenAPI

        :param description: The description of this CodeScanningAlertRuleSummary.
        :param id: The id of this CodeScanningAlertRuleSummary.
        :param name: The name of this CodeScanningAlertRuleSummary.
        :param severity: The severity of this CodeScanningAlertRuleSummary.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'name': str,
            'severity': str
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'severity': 'severity'
        }

        self._description = description
        self._id = id
        self._name = name
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningAlertRuleSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-scanning-alert-rule-summary of this CodeScanningAlertRuleSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CodeScanningAlertRuleSummary.

        A short description of the rule used to detect the alert.

        :return: The description of this CodeScanningAlertRuleSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodeScanningAlertRuleSummary.

        A short description of the rule used to detect the alert.

        :param description: The description of this CodeScanningAlertRuleSummary.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this CodeScanningAlertRuleSummary.

        A unique identifier for the rule used to detect the alert.

        :return: The id of this CodeScanningAlertRuleSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeScanningAlertRuleSummary.

        A unique identifier for the rule used to detect the alert.

        :param id: The id of this CodeScanningAlertRuleSummary.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodeScanningAlertRuleSummary.

        The name of the rule used to detect the alert.

        :return: The name of this CodeScanningAlertRuleSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodeScanningAlertRuleSummary.

        The name of the rule used to detect the alert.

        :param name: The name of this CodeScanningAlertRuleSummary.
        :type name: str
        """

        self._name = name

    @property
    def severity(self):
        """Gets the severity of this CodeScanningAlertRuleSummary.

        The severity of the alert.

        :return: The severity of this CodeScanningAlertRuleSummary.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CodeScanningAlertRuleSummary.

        The severity of the alert.

        :param severity: The severity of this CodeScanningAlertRuleSummary.
        :type severity: str
        """
        allowed_values = [None,"none", "note", "warning", "error"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
