# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runner_groups_org import RunnerGroupsOrg
from openapi_server import util


class ActionsListSelfHostedRunnerGroupsForOrg200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, runner_groups: List[RunnerGroupsOrg]=None, total_count: float=None):
        """ActionsListSelfHostedRunnerGroupsForOrg200Response - a model defined in OpenAPI

        :param runner_groups: The runner_groups of this ActionsListSelfHostedRunnerGroupsForOrg200Response.
        :param total_count: The total_count of this ActionsListSelfHostedRunnerGroupsForOrg200Response.
        """
        self.openapi_types = {
            'runner_groups': List[RunnerGroupsOrg],
            'total_count': float
        }

        self.attribute_map = {
            'runner_groups': 'runner_groups',
            'total_count': 'total_count'
        }

        self._runner_groups = runner_groups
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsListSelfHostedRunnerGroupsForOrg200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_list_self_hosted_runner_groups_for_org_200_response of this ActionsListSelfHostedRunnerGroupsForOrg200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def runner_groups(self):
        """Gets the runner_groups of this ActionsListSelfHostedRunnerGroupsForOrg200Response.


        :return: The runner_groups of this ActionsListSelfHostedRunnerGroupsForOrg200Response.
        :rtype: List[RunnerGroupsOrg]
        """
        return self._runner_groups

    @runner_groups.setter
    def runner_groups(self, runner_groups):
        """Sets the runner_groups of this ActionsListSelfHostedRunnerGroupsForOrg200Response.


        :param runner_groups: The runner_groups of this ActionsListSelfHostedRunnerGroupsForOrg200Response.
        :type runner_groups: List[RunnerGroupsOrg]
        """
        if runner_groups is None:
            raise ValueError("Invalid value for `runner_groups`, must not be `None`")

        self._runner_groups = runner_groups

    @property
    def total_count(self):
        """Gets the total_count of this ActionsListSelfHostedRunnerGroupsForOrg200Response.


        :return: The total_count of this ActionsListSelfHostedRunnerGroupsForOrg200Response.
        :rtype: float
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActionsListSelfHostedRunnerGroupsForOrg200Response.


        :param total_count: The total_count of this ActionsListSelfHostedRunnerGroupsForOrg200Response.
        :type total_count: float
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
