# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseSettingsEnterpriseGithubSsl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert: str=None, enabled: bool=None, key: str=None):
        """EnterpriseSettingsEnterpriseGithubSsl - a model defined in OpenAPI

        :param cert: The cert of this EnterpriseSettingsEnterpriseGithubSsl.
        :param enabled: The enabled of this EnterpriseSettingsEnterpriseGithubSsl.
        :param key: The key of this EnterpriseSettingsEnterpriseGithubSsl.
        """
        self.openapi_types = {
            'cert': str,
            'enabled': bool,
            'key': str
        }

        self.attribute_map = {
            'cert': 'cert',
            'enabled': 'enabled',
            'key': 'key'
        }

        self._cert = cert
        self._enabled = enabled
        self._key = key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterpriseGithubSsl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise_github_ssl of this EnterpriseSettingsEnterpriseGithubSsl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert(self):
        """Gets the cert of this EnterpriseSettingsEnterpriseGithubSsl.


        :return: The cert of this EnterpriseSettingsEnterpriseGithubSsl.
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this EnterpriseSettingsEnterpriseGithubSsl.


        :param cert: The cert of this EnterpriseSettingsEnterpriseGithubSsl.
        :type cert: str
        """

        self._cert = cert

    @property
    def enabled(self):
        """Gets the enabled of this EnterpriseSettingsEnterpriseGithubSsl.


        :return: The enabled of this EnterpriseSettingsEnterpriseGithubSsl.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EnterpriseSettingsEnterpriseGithubSsl.


        :param enabled: The enabled of this EnterpriseSettingsEnterpriseGithubSsl.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def key(self):
        """Gets the key of this EnterpriseSettingsEnterpriseGithubSsl.


        :return: The key of this EnterpriseSettingsEnterpriseGithubSsl.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EnterpriseSettingsEnterpriseGithubSsl.


        :param key: The key of this EnterpriseSettingsEnterpriseGithubSsl.
        :type key: str
        """

        self._key = key
