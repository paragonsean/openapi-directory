# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server.models.nullable_simple_commit import NullableSimpleCommit
from openapi_server.models.pull_request_minimal import PullRequestMinimal
from openapi_server import util


class WorkflowRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts_url: str=None, cancel_url: str=None, check_suite_id: int=None, check_suite_node_id: str=None, check_suite_url: str=None, conclusion: str=None, created_at: datetime=None, event: str=None, head_branch: str=None, head_commit: NullableSimpleCommit=None, head_repository: MinimalRepository=None, head_repository_id: int=None, head_sha: str=None, html_url: str=None, id: int=None, jobs_url: str=None, logs_url: str=None, name: str=None, node_id: str=None, previous_attempt_url: str=None, pull_requests: List[PullRequestMinimal]=None, repository: MinimalRepository=None, rerun_url: str=None, run_attempt: int=None, run_number: int=None, run_started_at: datetime=None, status: str=None, updated_at: datetime=None, url: str=None, workflow_id: int=None, workflow_url: str=None):
        """WorkflowRun - a model defined in OpenAPI

        :param artifacts_url: The artifacts_url of this WorkflowRun.
        :param cancel_url: The cancel_url of this WorkflowRun.
        :param check_suite_id: The check_suite_id of this WorkflowRun.
        :param check_suite_node_id: The check_suite_node_id of this WorkflowRun.
        :param check_suite_url: The check_suite_url of this WorkflowRun.
        :param conclusion: The conclusion of this WorkflowRun.
        :param created_at: The created_at of this WorkflowRun.
        :param event: The event of this WorkflowRun.
        :param head_branch: The head_branch of this WorkflowRun.
        :param head_commit: The head_commit of this WorkflowRun.
        :param head_repository: The head_repository of this WorkflowRun.
        :param head_repository_id: The head_repository_id of this WorkflowRun.
        :param head_sha: The head_sha of this WorkflowRun.
        :param html_url: The html_url of this WorkflowRun.
        :param id: The id of this WorkflowRun.
        :param jobs_url: The jobs_url of this WorkflowRun.
        :param logs_url: The logs_url of this WorkflowRun.
        :param name: The name of this WorkflowRun.
        :param node_id: The node_id of this WorkflowRun.
        :param previous_attempt_url: The previous_attempt_url of this WorkflowRun.
        :param pull_requests: The pull_requests of this WorkflowRun.
        :param repository: The repository of this WorkflowRun.
        :param rerun_url: The rerun_url of this WorkflowRun.
        :param run_attempt: The run_attempt of this WorkflowRun.
        :param run_number: The run_number of this WorkflowRun.
        :param run_started_at: The run_started_at of this WorkflowRun.
        :param status: The status of this WorkflowRun.
        :param updated_at: The updated_at of this WorkflowRun.
        :param url: The url of this WorkflowRun.
        :param workflow_id: The workflow_id of this WorkflowRun.
        :param workflow_url: The workflow_url of this WorkflowRun.
        """
        self.openapi_types = {
            'artifacts_url': str,
            'cancel_url': str,
            'check_suite_id': int,
            'check_suite_node_id': str,
            'check_suite_url': str,
            'conclusion': str,
            'created_at': datetime,
            'event': str,
            'head_branch': str,
            'head_commit': NullableSimpleCommit,
            'head_repository': MinimalRepository,
            'head_repository_id': int,
            'head_sha': str,
            'html_url': str,
            'id': int,
            'jobs_url': str,
            'logs_url': str,
            'name': str,
            'node_id': str,
            'previous_attempt_url': str,
            'pull_requests': List[PullRequestMinimal],
            'repository': MinimalRepository,
            'rerun_url': str,
            'run_attempt': int,
            'run_number': int,
            'run_started_at': datetime,
            'status': str,
            'updated_at': datetime,
            'url': str,
            'workflow_id': int,
            'workflow_url': str
        }

        self.attribute_map = {
            'artifacts_url': 'artifacts_url',
            'cancel_url': 'cancel_url',
            'check_suite_id': 'check_suite_id',
            'check_suite_node_id': 'check_suite_node_id',
            'check_suite_url': 'check_suite_url',
            'conclusion': 'conclusion',
            'created_at': 'created_at',
            'event': 'event',
            'head_branch': 'head_branch',
            'head_commit': 'head_commit',
            'head_repository': 'head_repository',
            'head_repository_id': 'head_repository_id',
            'head_sha': 'head_sha',
            'html_url': 'html_url',
            'id': 'id',
            'jobs_url': 'jobs_url',
            'logs_url': 'logs_url',
            'name': 'name',
            'node_id': 'node_id',
            'previous_attempt_url': 'previous_attempt_url',
            'pull_requests': 'pull_requests',
            'repository': 'repository',
            'rerun_url': 'rerun_url',
            'run_attempt': 'run_attempt',
            'run_number': 'run_number',
            'run_started_at': 'run_started_at',
            'status': 'status',
            'updated_at': 'updated_at',
            'url': 'url',
            'workflow_id': 'workflow_id',
            'workflow_url': 'workflow_url'
        }

        self._artifacts_url = artifacts_url
        self._cancel_url = cancel_url
        self._check_suite_id = check_suite_id
        self._check_suite_node_id = check_suite_node_id
        self._check_suite_url = check_suite_url
        self._conclusion = conclusion
        self._created_at = created_at
        self._event = event
        self._head_branch = head_branch
        self._head_commit = head_commit
        self._head_repository = head_repository
        self._head_repository_id = head_repository_id
        self._head_sha = head_sha
        self._html_url = html_url
        self._id = id
        self._jobs_url = jobs_url
        self._logs_url = logs_url
        self._name = name
        self._node_id = node_id
        self._previous_attempt_url = previous_attempt_url
        self._pull_requests = pull_requests
        self._repository = repository
        self._rerun_url = rerun_url
        self._run_attempt = run_attempt
        self._run_number = run_number
        self._run_started_at = run_started_at
        self._status = status
        self._updated_at = updated_at
        self._url = url
        self._workflow_id = workflow_id
        self._workflow_url = workflow_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The workflow-run of this WorkflowRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts_url(self):
        """Gets the artifacts_url of this WorkflowRun.

        The URL to the artifacts for the workflow run.

        :return: The artifacts_url of this WorkflowRun.
        :rtype: str
        """
        return self._artifacts_url

    @artifacts_url.setter
    def artifacts_url(self, artifacts_url):
        """Sets the artifacts_url of this WorkflowRun.

        The URL to the artifacts for the workflow run.

        :param artifacts_url: The artifacts_url of this WorkflowRun.
        :type artifacts_url: str
        """
        if artifacts_url is None:
            raise ValueError("Invalid value for `artifacts_url`, must not be `None`")

        self._artifacts_url = artifacts_url

    @property
    def cancel_url(self):
        """Gets the cancel_url of this WorkflowRun.

        The URL to cancel the workflow run.

        :return: The cancel_url of this WorkflowRun.
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this WorkflowRun.

        The URL to cancel the workflow run.

        :param cancel_url: The cancel_url of this WorkflowRun.
        :type cancel_url: str
        """
        if cancel_url is None:
            raise ValueError("Invalid value for `cancel_url`, must not be `None`")

        self._cancel_url = cancel_url

    @property
    def check_suite_id(self):
        """Gets the check_suite_id of this WorkflowRun.

        The ID of the associated check suite.

        :return: The check_suite_id of this WorkflowRun.
        :rtype: int
        """
        return self._check_suite_id

    @check_suite_id.setter
    def check_suite_id(self, check_suite_id):
        """Sets the check_suite_id of this WorkflowRun.

        The ID of the associated check suite.

        :param check_suite_id: The check_suite_id of this WorkflowRun.
        :type check_suite_id: int
        """

        self._check_suite_id = check_suite_id

    @property
    def check_suite_node_id(self):
        """Gets the check_suite_node_id of this WorkflowRun.

        The node ID of the associated check suite.

        :return: The check_suite_node_id of this WorkflowRun.
        :rtype: str
        """
        return self._check_suite_node_id

    @check_suite_node_id.setter
    def check_suite_node_id(self, check_suite_node_id):
        """Sets the check_suite_node_id of this WorkflowRun.

        The node ID of the associated check suite.

        :param check_suite_node_id: The check_suite_node_id of this WorkflowRun.
        :type check_suite_node_id: str
        """

        self._check_suite_node_id = check_suite_node_id

    @property
    def check_suite_url(self):
        """Gets the check_suite_url of this WorkflowRun.

        The URL to the associated check suite.

        :return: The check_suite_url of this WorkflowRun.
        :rtype: str
        """
        return self._check_suite_url

    @check_suite_url.setter
    def check_suite_url(self, check_suite_url):
        """Sets the check_suite_url of this WorkflowRun.

        The URL to the associated check suite.

        :param check_suite_url: The check_suite_url of this WorkflowRun.
        :type check_suite_url: str
        """
        if check_suite_url is None:
            raise ValueError("Invalid value for `check_suite_url`, must not be `None`")

        self._check_suite_url = check_suite_url

    @property
    def conclusion(self):
        """Gets the conclusion of this WorkflowRun.


        :return: The conclusion of this WorkflowRun.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this WorkflowRun.


        :param conclusion: The conclusion of this WorkflowRun.
        :type conclusion: str
        """
        if conclusion is None:
            raise ValueError("Invalid value for `conclusion`, must not be `None`")

        self._conclusion = conclusion

    @property
    def created_at(self):
        """Gets the created_at of this WorkflowRun.


        :return: The created_at of this WorkflowRun.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkflowRun.


        :param created_at: The created_at of this WorkflowRun.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this WorkflowRun.


        :return: The event of this WorkflowRun.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WorkflowRun.


        :param event: The event of this WorkflowRun.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def head_branch(self):
        """Gets the head_branch of this WorkflowRun.


        :return: The head_branch of this WorkflowRun.
        :rtype: str
        """
        return self._head_branch

    @head_branch.setter
    def head_branch(self, head_branch):
        """Sets the head_branch of this WorkflowRun.


        :param head_branch: The head_branch of this WorkflowRun.
        :type head_branch: str
        """
        if head_branch is None:
            raise ValueError("Invalid value for `head_branch`, must not be `None`")

        self._head_branch = head_branch

    @property
    def head_commit(self):
        """Gets the head_commit of this WorkflowRun.


        :return: The head_commit of this WorkflowRun.
        :rtype: NullableSimpleCommit
        """
        return self._head_commit

    @head_commit.setter
    def head_commit(self, head_commit):
        """Sets the head_commit of this WorkflowRun.


        :param head_commit: The head_commit of this WorkflowRun.
        :type head_commit: NullableSimpleCommit
        """
        if head_commit is None:
            raise ValueError("Invalid value for `head_commit`, must not be `None`")

        self._head_commit = head_commit

    @property
    def head_repository(self):
        """Gets the head_repository of this WorkflowRun.


        :return: The head_repository of this WorkflowRun.
        :rtype: MinimalRepository
        """
        return self._head_repository

    @head_repository.setter
    def head_repository(self, head_repository):
        """Sets the head_repository of this WorkflowRun.


        :param head_repository: The head_repository of this WorkflowRun.
        :type head_repository: MinimalRepository
        """
        if head_repository is None:
            raise ValueError("Invalid value for `head_repository`, must not be `None`")

        self._head_repository = head_repository

    @property
    def head_repository_id(self):
        """Gets the head_repository_id of this WorkflowRun.


        :return: The head_repository_id of this WorkflowRun.
        :rtype: int
        """
        return self._head_repository_id

    @head_repository_id.setter
    def head_repository_id(self, head_repository_id):
        """Sets the head_repository_id of this WorkflowRun.


        :param head_repository_id: The head_repository_id of this WorkflowRun.
        :type head_repository_id: int
        """

        self._head_repository_id = head_repository_id

    @property
    def head_sha(self):
        """Gets the head_sha of this WorkflowRun.

        The SHA of the head commit that points to the version of the workflow being run.

        :return: The head_sha of this WorkflowRun.
        :rtype: str
        """
        return self._head_sha

    @head_sha.setter
    def head_sha(self, head_sha):
        """Sets the head_sha of this WorkflowRun.

        The SHA of the head commit that points to the version of the workflow being run.

        :param head_sha: The head_sha of this WorkflowRun.
        :type head_sha: str
        """
        if head_sha is None:
            raise ValueError("Invalid value for `head_sha`, must not be `None`")

        self._head_sha = head_sha

    @property
    def html_url(self):
        """Gets the html_url of this WorkflowRun.


        :return: The html_url of this WorkflowRun.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this WorkflowRun.


        :param html_url: The html_url of this WorkflowRun.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this WorkflowRun.

        The ID of the workflow run.

        :return: The id of this WorkflowRun.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowRun.

        The ID of the workflow run.

        :param id: The id of this WorkflowRun.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def jobs_url(self):
        """Gets the jobs_url of this WorkflowRun.

        The URL to the jobs for the workflow run.

        :return: The jobs_url of this WorkflowRun.
        :rtype: str
        """
        return self._jobs_url

    @jobs_url.setter
    def jobs_url(self, jobs_url):
        """Sets the jobs_url of this WorkflowRun.

        The URL to the jobs for the workflow run.

        :param jobs_url: The jobs_url of this WorkflowRun.
        :type jobs_url: str
        """
        if jobs_url is None:
            raise ValueError("Invalid value for `jobs_url`, must not be `None`")

        self._jobs_url = jobs_url

    @property
    def logs_url(self):
        """Gets the logs_url of this WorkflowRun.

        The URL to download the logs for the workflow run.

        :return: The logs_url of this WorkflowRun.
        :rtype: str
        """
        return self._logs_url

    @logs_url.setter
    def logs_url(self, logs_url):
        """Sets the logs_url of this WorkflowRun.

        The URL to download the logs for the workflow run.

        :param logs_url: The logs_url of this WorkflowRun.
        :type logs_url: str
        """
        if logs_url is None:
            raise ValueError("Invalid value for `logs_url`, must not be `None`")

        self._logs_url = logs_url

    @property
    def name(self):
        """Gets the name of this WorkflowRun.

        The name of the workflow run.

        :return: The name of this WorkflowRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowRun.

        The name of the workflow run.

        :param name: The name of this WorkflowRun.
        :type name: str
        """

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this WorkflowRun.


        :return: The node_id of this WorkflowRun.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this WorkflowRun.


        :param node_id: The node_id of this WorkflowRun.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def previous_attempt_url(self):
        """Gets the previous_attempt_url of this WorkflowRun.

        The URL to the previous attempted run of this workflow, if one exists.

        :return: The previous_attempt_url of this WorkflowRun.
        :rtype: str
        """
        return self._previous_attempt_url

    @previous_attempt_url.setter
    def previous_attempt_url(self, previous_attempt_url):
        """Sets the previous_attempt_url of this WorkflowRun.

        The URL to the previous attempted run of this workflow, if one exists.

        :param previous_attempt_url: The previous_attempt_url of this WorkflowRun.
        :type previous_attempt_url: str
        """

        self._previous_attempt_url = previous_attempt_url

    @property
    def pull_requests(self):
        """Gets the pull_requests of this WorkflowRun.


        :return: The pull_requests of this WorkflowRun.
        :rtype: List[PullRequestMinimal]
        """
        return self._pull_requests

    @pull_requests.setter
    def pull_requests(self, pull_requests):
        """Sets the pull_requests of this WorkflowRun.


        :param pull_requests: The pull_requests of this WorkflowRun.
        :type pull_requests: List[PullRequestMinimal]
        """
        if pull_requests is None:
            raise ValueError("Invalid value for `pull_requests`, must not be `None`")

        self._pull_requests = pull_requests

    @property
    def repository(self):
        """Gets the repository of this WorkflowRun.


        :return: The repository of this WorkflowRun.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this WorkflowRun.


        :param repository: The repository of this WorkflowRun.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def rerun_url(self):
        """Gets the rerun_url of this WorkflowRun.

        The URL to rerun the workflow run.

        :return: The rerun_url of this WorkflowRun.
        :rtype: str
        """
        return self._rerun_url

    @rerun_url.setter
    def rerun_url(self, rerun_url):
        """Sets the rerun_url of this WorkflowRun.

        The URL to rerun the workflow run.

        :param rerun_url: The rerun_url of this WorkflowRun.
        :type rerun_url: str
        """
        if rerun_url is None:
            raise ValueError("Invalid value for `rerun_url`, must not be `None`")

        self._rerun_url = rerun_url

    @property
    def run_attempt(self):
        """Gets the run_attempt of this WorkflowRun.

        Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.

        :return: The run_attempt of this WorkflowRun.
        :rtype: int
        """
        return self._run_attempt

    @run_attempt.setter
    def run_attempt(self, run_attempt):
        """Sets the run_attempt of this WorkflowRun.

        Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.

        :param run_attempt: The run_attempt of this WorkflowRun.
        :type run_attempt: int
        """

        self._run_attempt = run_attempt

    @property
    def run_number(self):
        """Gets the run_number of this WorkflowRun.

        The auto incrementing run number for the workflow run.

        :return: The run_number of this WorkflowRun.
        :rtype: int
        """
        return self._run_number

    @run_number.setter
    def run_number(self, run_number):
        """Sets the run_number of this WorkflowRun.

        The auto incrementing run number for the workflow run.

        :param run_number: The run_number of this WorkflowRun.
        :type run_number: int
        """
        if run_number is None:
            raise ValueError("Invalid value for `run_number`, must not be `None`")

        self._run_number = run_number

    @property
    def run_started_at(self):
        """Gets the run_started_at of this WorkflowRun.

        The start time of the latest run. Resets on re-run.

        :return: The run_started_at of this WorkflowRun.
        :rtype: datetime
        """
        return self._run_started_at

    @run_started_at.setter
    def run_started_at(self, run_started_at):
        """Sets the run_started_at of this WorkflowRun.

        The start time of the latest run. Resets on re-run.

        :param run_started_at: The run_started_at of this WorkflowRun.
        :type run_started_at: datetime
        """

        self._run_started_at = run_started_at

    @property
    def status(self):
        """Gets the status of this WorkflowRun.


        :return: The status of this WorkflowRun.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowRun.


        :param status: The status of this WorkflowRun.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this WorkflowRun.


        :return: The updated_at of this WorkflowRun.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WorkflowRun.


        :param updated_at: The updated_at of this WorkflowRun.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this WorkflowRun.

        The URL to the workflow run.

        :return: The url of this WorkflowRun.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WorkflowRun.

        The URL to the workflow run.

        :param url: The url of this WorkflowRun.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def workflow_id(self):
        """Gets the workflow_id of this WorkflowRun.

        The ID of the parent workflow.

        :return: The workflow_id of this WorkflowRun.
        :rtype: int
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this WorkflowRun.

        The ID of the parent workflow.

        :param workflow_id: The workflow_id of this WorkflowRun.
        :type workflow_id: int
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id

    @property
    def workflow_url(self):
        """Gets the workflow_url of this WorkflowRun.

        The URL to the workflow.

        :return: The workflow_url of this WorkflowRun.
        :rtype: str
        """
        return self._workflow_url

    @workflow_url.setter
    def workflow_url(self, workflow_url):
        """Sets the workflow_url of this WorkflowRun.

        The URL to the workflow.

        :param workflow_url: The workflow_url of this WorkflowRun.
        :type workflow_url: str
        """
        if workflow_url is None:
            raise ValueError("Invalid value for `workflow_url`, must not be `None`")

        self._workflow_url = workflow_url
