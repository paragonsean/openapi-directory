# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branch_short_commit import BranchShortCommit
from openapi_server import util


class BranchShort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: BranchShortCommit=None, name: str=None, protected: bool=None):
        """BranchShort - a model defined in OpenAPI

        :param commit: The commit of this BranchShort.
        :param name: The name of this BranchShort.
        :param protected: The protected of this BranchShort.
        """
        self.openapi_types = {
            'commit': BranchShortCommit,
            'name': str,
            'protected': bool
        }

        self.attribute_map = {
            'commit': 'commit',
            'name': 'name',
            'protected': 'protected'
        }

        self._commit = commit
        self._name = name
        self._protected = protected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BranchShort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The branch-short of this BranchShort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this BranchShort.


        :return: The commit of this BranchShort.
        :rtype: BranchShortCommit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this BranchShort.


        :param commit: The commit of this BranchShort.
        :type commit: BranchShortCommit
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def name(self):
        """Gets the name of this BranchShort.


        :return: The name of this BranchShort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BranchShort.


        :param name: The name of this BranchShort.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def protected(self):
        """Gets the protected of this BranchShort.


        :return: The protected of this BranchShort.
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this BranchShort.


        :param protected: The protected of this BranchShort.
        :type protected: bool
        """
        if protected is None:
            raise ValueError("Invalid value for `protected`, must not be `None`")

        self._protected = protected
