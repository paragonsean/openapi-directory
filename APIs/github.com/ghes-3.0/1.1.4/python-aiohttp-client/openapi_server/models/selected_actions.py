# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SelectedActions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, github_owned_allowed: bool=None, patterns_allowed: List[str]=None):
        """SelectedActions - a model defined in OpenAPI

        :param github_owned_allowed: The github_owned_allowed of this SelectedActions.
        :param patterns_allowed: The patterns_allowed of this SelectedActions.
        """
        self.openapi_types = {
            'github_owned_allowed': bool,
            'patterns_allowed': List[str]
        }

        self.attribute_map = {
            'github_owned_allowed': 'github_owned_allowed',
            'patterns_allowed': 'patterns_allowed'
        }

        self._github_owned_allowed = github_owned_allowed
        self._patterns_allowed = patterns_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SelectedActions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The selected-actions of this SelectedActions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def github_owned_allowed(self):
        """Gets the github_owned_allowed of this SelectedActions.

        Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.

        :return: The github_owned_allowed of this SelectedActions.
        :rtype: bool
        """
        return self._github_owned_allowed

    @github_owned_allowed.setter
    def github_owned_allowed(self, github_owned_allowed):
        """Sets the github_owned_allowed of this SelectedActions.

        Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.

        :param github_owned_allowed: The github_owned_allowed of this SelectedActions.
        :type github_owned_allowed: bool
        """
        if github_owned_allowed is None:
            raise ValueError("Invalid value for `github_owned_allowed`, must not be `None`")

        self._github_owned_allowed = github_owned_allowed

    @property
    def patterns_allowed(self):
        """Gets the patterns_allowed of this SelectedActions.

        Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\"

        :return: The patterns_allowed of this SelectedActions.
        :rtype: List[str]
        """
        return self._patterns_allowed

    @patterns_allowed.setter
    def patterns_allowed(self, patterns_allowed):
        """Sets the patterns_allowed of this SelectedActions.

        Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\"

        :param patterns_allowed: The patterns_allowed of this SelectedActions.
        :type patterns_allowed: List[str]
        """
        if patterns_allowed is None:
            raise ValueError("Invalid value for `patterns_allowed`, must not be `None`")

        self._patterns_allowed = patterns_allowed
