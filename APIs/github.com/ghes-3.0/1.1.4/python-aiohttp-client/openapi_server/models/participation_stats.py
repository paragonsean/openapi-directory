# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParticipationStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: List[int]=None, owner: List[int]=None):
        """ParticipationStats - a model defined in OpenAPI

        :param all: The all of this ParticipationStats.
        :param owner: The owner of this ParticipationStats.
        """
        self.openapi_types = {
            'all': List[int],
            'owner': List[int]
        }

        self.attribute_map = {
            'all': 'all',
            'owner': 'owner'
        }

        self._all = all
        self._owner = owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParticipationStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The participation-stats of this ParticipationStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this ParticipationStats.


        :return: The all of this ParticipationStats.
        :rtype: List[int]
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this ParticipationStats.


        :param all: The all of this ParticipationStats.
        :type all: List[int]
        """
        if all is None:
            raise ValueError("Invalid value for `all`, must not be `None`")

        self._all = all

    @property
    def owner(self):
        """Gets the owner of this ParticipationStats.


        :return: The owner of this ParticipationStats.
        :rtype: List[int]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ParticipationStats.


        :param owner: The owner of this ParticipationStats.
        :type owner: List[int]
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner
