# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author_association import AuthorAssociation
from openapi_server.models.nullable_milestone import NullableMilestone
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.pull_request_base import PullRequestBase
from openapi_server.models.pull_request_head import PullRequestHead
from openapi_server.models.pull_request_labels_inner import PullRequestLabelsInner
from openapi_server.models.pull_request_links import PullRequestLinks
from openapi_server.models.simple_user import SimpleUser
from openapi_server.models.team_simple import TeamSimple
from openapi_server import util


class PullRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PullRequestLinks=None, active_lock_reason: str=None, additions: int=None, assignee: NullableSimpleUser=None, assignees: List[SimpleUser]=None, author_association: AuthorAssociation=None, base: PullRequestBase=None, body: str=None, changed_files: int=None, closed_at: datetime=None, comments: int=None, comments_url: str=None, commits: int=None, commits_url: str=None, created_at: datetime=None, deletions: int=None, diff_url: str=None, draft: bool=None, head: PullRequestHead=None, html_url: str=None, id: int=None, issue_url: str=None, labels: List[PullRequestLabelsInner]=None, locked: bool=None, maintainer_can_modify: bool=None, merge_commit_sha: str=None, mergeable: bool=None, mergeable_state: str=None, merged: bool=None, merged_at: datetime=None, merged_by: NullableSimpleUser=None, milestone: NullableMilestone=None, node_id: str=None, number: int=None, patch_url: str=None, rebaseable: bool=None, requested_reviewers: List[SimpleUser]=None, requested_teams: List[TeamSimple]=None, review_comment_url: str=None, review_comments: int=None, review_comments_url: str=None, state: str=None, statuses_url: str=None, title: str=None, updated_at: datetime=None, url: str=None, user: NullableSimpleUser=None):
        """PullRequest - a model defined in OpenAPI

        :param links: The links of this PullRequest.
        :param active_lock_reason: The active_lock_reason of this PullRequest.
        :param additions: The additions of this PullRequest.
        :param assignee: The assignee of this PullRequest.
        :param assignees: The assignees of this PullRequest.
        :param author_association: The author_association of this PullRequest.
        :param base: The base of this PullRequest.
        :param body: The body of this PullRequest.
        :param changed_files: The changed_files of this PullRequest.
        :param closed_at: The closed_at of this PullRequest.
        :param comments: The comments of this PullRequest.
        :param comments_url: The comments_url of this PullRequest.
        :param commits: The commits of this PullRequest.
        :param commits_url: The commits_url of this PullRequest.
        :param created_at: The created_at of this PullRequest.
        :param deletions: The deletions of this PullRequest.
        :param diff_url: The diff_url of this PullRequest.
        :param draft: The draft of this PullRequest.
        :param head: The head of this PullRequest.
        :param html_url: The html_url of this PullRequest.
        :param id: The id of this PullRequest.
        :param issue_url: The issue_url of this PullRequest.
        :param labels: The labels of this PullRequest.
        :param locked: The locked of this PullRequest.
        :param maintainer_can_modify: The maintainer_can_modify of this PullRequest.
        :param merge_commit_sha: The merge_commit_sha of this PullRequest.
        :param mergeable: The mergeable of this PullRequest.
        :param mergeable_state: The mergeable_state of this PullRequest.
        :param merged: The merged of this PullRequest.
        :param merged_at: The merged_at of this PullRequest.
        :param merged_by: The merged_by of this PullRequest.
        :param milestone: The milestone of this PullRequest.
        :param node_id: The node_id of this PullRequest.
        :param number: The number of this PullRequest.
        :param patch_url: The patch_url of this PullRequest.
        :param rebaseable: The rebaseable of this PullRequest.
        :param requested_reviewers: The requested_reviewers of this PullRequest.
        :param requested_teams: The requested_teams of this PullRequest.
        :param review_comment_url: The review_comment_url of this PullRequest.
        :param review_comments: The review_comments of this PullRequest.
        :param review_comments_url: The review_comments_url of this PullRequest.
        :param state: The state of this PullRequest.
        :param statuses_url: The statuses_url of this PullRequest.
        :param title: The title of this PullRequest.
        :param updated_at: The updated_at of this PullRequest.
        :param url: The url of this PullRequest.
        :param user: The user of this PullRequest.
        """
        self.openapi_types = {
            'links': PullRequestLinks,
            'active_lock_reason': str,
            'additions': int,
            'assignee': NullableSimpleUser,
            'assignees': List[SimpleUser],
            'author_association': AuthorAssociation,
            'base': PullRequestBase,
            'body': str,
            'changed_files': int,
            'closed_at': datetime,
            'comments': int,
            'comments_url': str,
            'commits': int,
            'commits_url': str,
            'created_at': datetime,
            'deletions': int,
            'diff_url': str,
            'draft': bool,
            'head': PullRequestHead,
            'html_url': str,
            'id': int,
            'issue_url': str,
            'labels': List[PullRequestLabelsInner],
            'locked': bool,
            'maintainer_can_modify': bool,
            'merge_commit_sha': str,
            'mergeable': bool,
            'mergeable_state': str,
            'merged': bool,
            'merged_at': datetime,
            'merged_by': NullableSimpleUser,
            'milestone': NullableMilestone,
            'node_id': str,
            'number': int,
            'patch_url': str,
            'rebaseable': bool,
            'requested_reviewers': List[SimpleUser],
            'requested_teams': List[TeamSimple],
            'review_comment_url': str,
            'review_comments': int,
            'review_comments_url': str,
            'state': str,
            'statuses_url': str,
            'title': str,
            'updated_at': datetime,
            'url': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'links': '_links',
            'active_lock_reason': 'active_lock_reason',
            'additions': 'additions',
            'assignee': 'assignee',
            'assignees': 'assignees',
            'author_association': 'author_association',
            'base': 'base',
            'body': 'body',
            'changed_files': 'changed_files',
            'closed_at': 'closed_at',
            'comments': 'comments',
            'comments_url': 'comments_url',
            'commits': 'commits',
            'commits_url': 'commits_url',
            'created_at': 'created_at',
            'deletions': 'deletions',
            'diff_url': 'diff_url',
            'draft': 'draft',
            'head': 'head',
            'html_url': 'html_url',
            'id': 'id',
            'issue_url': 'issue_url',
            'labels': 'labels',
            'locked': 'locked',
            'maintainer_can_modify': 'maintainer_can_modify',
            'merge_commit_sha': 'merge_commit_sha',
            'mergeable': 'mergeable',
            'mergeable_state': 'mergeable_state',
            'merged': 'merged',
            'merged_at': 'merged_at',
            'merged_by': 'merged_by',
            'milestone': 'milestone',
            'node_id': 'node_id',
            'number': 'number',
            'patch_url': 'patch_url',
            'rebaseable': 'rebaseable',
            'requested_reviewers': 'requested_reviewers',
            'requested_teams': 'requested_teams',
            'review_comment_url': 'review_comment_url',
            'review_comments': 'review_comments',
            'review_comments_url': 'review_comments_url',
            'state': 'state',
            'statuses_url': 'statuses_url',
            'title': 'title',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._links = links
        self._active_lock_reason = active_lock_reason
        self._additions = additions
        self._assignee = assignee
        self._assignees = assignees
        self._author_association = author_association
        self._base = base
        self._body = body
        self._changed_files = changed_files
        self._closed_at = closed_at
        self._comments = comments
        self._comments_url = comments_url
        self._commits = commits
        self._commits_url = commits_url
        self._created_at = created_at
        self._deletions = deletions
        self._diff_url = diff_url
        self._draft = draft
        self._head = head
        self._html_url = html_url
        self._id = id
        self._issue_url = issue_url
        self._labels = labels
        self._locked = locked
        self._maintainer_can_modify = maintainer_can_modify
        self._merge_commit_sha = merge_commit_sha
        self._mergeable = mergeable
        self._mergeable_state = mergeable_state
        self._merged = merged
        self._merged_at = merged_at
        self._merged_by = merged_by
        self._milestone = milestone
        self._node_id = node_id
        self._number = number
        self._patch_url = patch_url
        self._rebaseable = rebaseable
        self._requested_reviewers = requested_reviewers
        self._requested_teams = requested_teams
        self._review_comment_url = review_comment_url
        self._review_comments = review_comments
        self._review_comments_url = review_comments_url
        self._state = state
        self._statuses_url = statuses_url
        self._title = title
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pull-request of this PullRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PullRequest.


        :return: The links of this PullRequest.
        :rtype: PullRequestLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PullRequest.


        :param links: The links of this PullRequest.
        :type links: PullRequestLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def active_lock_reason(self):
        """Gets the active_lock_reason of this PullRequest.


        :return: The active_lock_reason of this PullRequest.
        :rtype: str
        """
        return self._active_lock_reason

    @active_lock_reason.setter
    def active_lock_reason(self, active_lock_reason):
        """Sets the active_lock_reason of this PullRequest.


        :param active_lock_reason: The active_lock_reason of this PullRequest.
        :type active_lock_reason: str
        """

        self._active_lock_reason = active_lock_reason

    @property
    def additions(self):
        """Gets the additions of this PullRequest.


        :return: The additions of this PullRequest.
        :rtype: int
        """
        return self._additions

    @additions.setter
    def additions(self, additions):
        """Sets the additions of this PullRequest.


        :param additions: The additions of this PullRequest.
        :type additions: int
        """
        if additions is None:
            raise ValueError("Invalid value for `additions`, must not be `None`")

        self._additions = additions

    @property
    def assignee(self):
        """Gets the assignee of this PullRequest.


        :return: The assignee of this PullRequest.
        :rtype: NullableSimpleUser
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this PullRequest.


        :param assignee: The assignee of this PullRequest.
        :type assignee: NullableSimpleUser
        """
        if assignee is None:
            raise ValueError("Invalid value for `assignee`, must not be `None`")

        self._assignee = assignee

    @property
    def assignees(self):
        """Gets the assignees of this PullRequest.


        :return: The assignees of this PullRequest.
        :rtype: List[SimpleUser]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this PullRequest.


        :param assignees: The assignees of this PullRequest.
        :type assignees: List[SimpleUser]
        """

        self._assignees = assignees

    @property
    def author_association(self):
        """Gets the author_association of this PullRequest.


        :return: The author_association of this PullRequest.
        :rtype: AuthorAssociation
        """
        return self._author_association

    @author_association.setter
    def author_association(self, author_association):
        """Sets the author_association of this PullRequest.


        :param author_association: The author_association of this PullRequest.
        :type author_association: AuthorAssociation
        """
        if author_association is None:
            raise ValueError("Invalid value for `author_association`, must not be `None`")

        self._author_association = author_association

    @property
    def base(self):
        """Gets the base of this PullRequest.


        :return: The base of this PullRequest.
        :rtype: PullRequestBase
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this PullRequest.


        :param base: The base of this PullRequest.
        :type base: PullRequestBase
        """
        if base is None:
            raise ValueError("Invalid value for `base`, must not be `None`")

        self._base = base

    @property
    def body(self):
        """Gets the body of this PullRequest.


        :return: The body of this PullRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullRequest.


        :param body: The body of this PullRequest.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def changed_files(self):
        """Gets the changed_files of this PullRequest.


        :return: The changed_files of this PullRequest.
        :rtype: int
        """
        return self._changed_files

    @changed_files.setter
    def changed_files(self, changed_files):
        """Sets the changed_files of this PullRequest.


        :param changed_files: The changed_files of this PullRequest.
        :type changed_files: int
        """
        if changed_files is None:
            raise ValueError("Invalid value for `changed_files`, must not be `None`")

        self._changed_files = changed_files

    @property
    def closed_at(self):
        """Gets the closed_at of this PullRequest.


        :return: The closed_at of this PullRequest.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this PullRequest.


        :param closed_at: The closed_at of this PullRequest.
        :type closed_at: datetime
        """
        if closed_at is None:
            raise ValueError("Invalid value for `closed_at`, must not be `None`")

        self._closed_at = closed_at

    @property
    def comments(self):
        """Gets the comments of this PullRequest.


        :return: The comments of this PullRequest.
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PullRequest.


        :param comments: The comments of this PullRequest.
        :type comments: int
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def comments_url(self):
        """Gets the comments_url of this PullRequest.


        :return: The comments_url of this PullRequest.
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this PullRequest.


        :param comments_url: The comments_url of this PullRequest.
        :type comments_url: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")

        self._comments_url = comments_url

    @property
    def commits(self):
        """Gets the commits of this PullRequest.


        :return: The commits of this PullRequest.
        :rtype: int
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """Sets the commits of this PullRequest.


        :param commits: The commits of this PullRequest.
        :type commits: int
        """
        if commits is None:
            raise ValueError("Invalid value for `commits`, must not be `None`")

        self._commits = commits

    @property
    def commits_url(self):
        """Gets the commits_url of this PullRequest.


        :return: The commits_url of this PullRequest.
        :rtype: str
        """
        return self._commits_url

    @commits_url.setter
    def commits_url(self, commits_url):
        """Sets the commits_url of this PullRequest.


        :param commits_url: The commits_url of this PullRequest.
        :type commits_url: str
        """
        if commits_url is None:
            raise ValueError("Invalid value for `commits_url`, must not be `None`")

        self._commits_url = commits_url

    @property
    def created_at(self):
        """Gets the created_at of this PullRequest.


        :return: The created_at of this PullRequest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PullRequest.


        :param created_at: The created_at of this PullRequest.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def deletions(self):
        """Gets the deletions of this PullRequest.


        :return: The deletions of this PullRequest.
        :rtype: int
        """
        return self._deletions

    @deletions.setter
    def deletions(self, deletions):
        """Sets the deletions of this PullRequest.


        :param deletions: The deletions of this PullRequest.
        :type deletions: int
        """
        if deletions is None:
            raise ValueError("Invalid value for `deletions`, must not be `None`")

        self._deletions = deletions

    @property
    def diff_url(self):
        """Gets the diff_url of this PullRequest.


        :return: The diff_url of this PullRequest.
        :rtype: str
        """
        return self._diff_url

    @diff_url.setter
    def diff_url(self, diff_url):
        """Sets the diff_url of this PullRequest.


        :param diff_url: The diff_url of this PullRequest.
        :type diff_url: str
        """
        if diff_url is None:
            raise ValueError("Invalid value for `diff_url`, must not be `None`")

        self._diff_url = diff_url

    @property
    def draft(self):
        """Gets the draft of this PullRequest.

        Indicates whether or not the pull request is a draft.

        :return: The draft of this PullRequest.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this PullRequest.

        Indicates whether or not the pull request is a draft.

        :param draft: The draft of this PullRequest.
        :type draft: bool
        """

        self._draft = draft

    @property
    def head(self):
        """Gets the head of this PullRequest.


        :return: The head of this PullRequest.
        :rtype: PullRequestHead
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this PullRequest.


        :param head: The head of this PullRequest.
        :type head: PullRequestHead
        """
        if head is None:
            raise ValueError("Invalid value for `head`, must not be `None`")

        self._head = head

    @property
    def html_url(self):
        """Gets the html_url of this PullRequest.


        :return: The html_url of this PullRequest.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this PullRequest.


        :param html_url: The html_url of this PullRequest.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this PullRequest.


        :return: The id of this PullRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PullRequest.


        :param id: The id of this PullRequest.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def issue_url(self):
        """Gets the issue_url of this PullRequest.


        :return: The issue_url of this PullRequest.
        :rtype: str
        """
        return self._issue_url

    @issue_url.setter
    def issue_url(self, issue_url):
        """Sets the issue_url of this PullRequest.


        :param issue_url: The issue_url of this PullRequest.
        :type issue_url: str
        """
        if issue_url is None:
            raise ValueError("Invalid value for `issue_url`, must not be `None`")

        self._issue_url = issue_url

    @property
    def labels(self):
        """Gets the labels of this PullRequest.


        :return: The labels of this PullRequest.
        :rtype: List[PullRequestLabelsInner]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PullRequest.


        :param labels: The labels of this PullRequest.
        :type labels: List[PullRequestLabelsInner]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def locked(self):
        """Gets the locked of this PullRequest.


        :return: The locked of this PullRequest.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this PullRequest.


        :param locked: The locked of this PullRequest.
        :type locked: bool
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")

        self._locked = locked

    @property
    def maintainer_can_modify(self):
        """Gets the maintainer_can_modify of this PullRequest.

        Indicates whether maintainers can modify the pull request.

        :return: The maintainer_can_modify of this PullRequest.
        :rtype: bool
        """
        return self._maintainer_can_modify

    @maintainer_can_modify.setter
    def maintainer_can_modify(self, maintainer_can_modify):
        """Sets the maintainer_can_modify of this PullRequest.

        Indicates whether maintainers can modify the pull request.

        :param maintainer_can_modify: The maintainer_can_modify of this PullRequest.
        :type maintainer_can_modify: bool
        """
        if maintainer_can_modify is None:
            raise ValueError("Invalid value for `maintainer_can_modify`, must not be `None`")

        self._maintainer_can_modify = maintainer_can_modify

    @property
    def merge_commit_sha(self):
        """Gets the merge_commit_sha of this PullRequest.


        :return: The merge_commit_sha of this PullRequest.
        :rtype: str
        """
        return self._merge_commit_sha

    @merge_commit_sha.setter
    def merge_commit_sha(self, merge_commit_sha):
        """Sets the merge_commit_sha of this PullRequest.


        :param merge_commit_sha: The merge_commit_sha of this PullRequest.
        :type merge_commit_sha: str
        """
        if merge_commit_sha is None:
            raise ValueError("Invalid value for `merge_commit_sha`, must not be `None`")

        self._merge_commit_sha = merge_commit_sha

    @property
    def mergeable(self):
        """Gets the mergeable of this PullRequest.


        :return: The mergeable of this PullRequest.
        :rtype: bool
        """
        return self._mergeable

    @mergeable.setter
    def mergeable(self, mergeable):
        """Sets the mergeable of this PullRequest.


        :param mergeable: The mergeable of this PullRequest.
        :type mergeable: bool
        """
        if mergeable is None:
            raise ValueError("Invalid value for `mergeable`, must not be `None`")

        self._mergeable = mergeable

    @property
    def mergeable_state(self):
        """Gets the mergeable_state of this PullRequest.


        :return: The mergeable_state of this PullRequest.
        :rtype: str
        """
        return self._mergeable_state

    @mergeable_state.setter
    def mergeable_state(self, mergeable_state):
        """Sets the mergeable_state of this PullRequest.


        :param mergeable_state: The mergeable_state of this PullRequest.
        :type mergeable_state: str
        """
        if mergeable_state is None:
            raise ValueError("Invalid value for `mergeable_state`, must not be `None`")

        self._mergeable_state = mergeable_state

    @property
    def merged(self):
        """Gets the merged of this PullRequest.


        :return: The merged of this PullRequest.
        :rtype: bool
        """
        return self._merged

    @merged.setter
    def merged(self, merged):
        """Sets the merged of this PullRequest.


        :param merged: The merged of this PullRequest.
        :type merged: bool
        """
        if merged is None:
            raise ValueError("Invalid value for `merged`, must not be `None`")

        self._merged = merged

    @property
    def merged_at(self):
        """Gets the merged_at of this PullRequest.


        :return: The merged_at of this PullRequest.
        :rtype: datetime
        """
        return self._merged_at

    @merged_at.setter
    def merged_at(self, merged_at):
        """Sets the merged_at of this PullRequest.


        :param merged_at: The merged_at of this PullRequest.
        :type merged_at: datetime
        """
        if merged_at is None:
            raise ValueError("Invalid value for `merged_at`, must not be `None`")

        self._merged_at = merged_at

    @property
    def merged_by(self):
        """Gets the merged_by of this PullRequest.


        :return: The merged_by of this PullRequest.
        :rtype: NullableSimpleUser
        """
        return self._merged_by

    @merged_by.setter
    def merged_by(self, merged_by):
        """Sets the merged_by of this PullRequest.


        :param merged_by: The merged_by of this PullRequest.
        :type merged_by: NullableSimpleUser
        """
        if merged_by is None:
            raise ValueError("Invalid value for `merged_by`, must not be `None`")

        self._merged_by = merged_by

    @property
    def milestone(self):
        """Gets the milestone of this PullRequest.


        :return: The milestone of this PullRequest.
        :rtype: NullableMilestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this PullRequest.


        :param milestone: The milestone of this PullRequest.
        :type milestone: NullableMilestone
        """
        if milestone is None:
            raise ValueError("Invalid value for `milestone`, must not be `None`")

        self._milestone = milestone

    @property
    def node_id(self):
        """Gets the node_id of this PullRequest.


        :return: The node_id of this PullRequest.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this PullRequest.


        :param node_id: The node_id of this PullRequest.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def number(self):
        """Gets the number of this PullRequest.

        Number uniquely identifying the pull request within its repository.

        :return: The number of this PullRequest.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PullRequest.

        Number uniquely identifying the pull request within its repository.

        :param number: The number of this PullRequest.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def patch_url(self):
        """Gets the patch_url of this PullRequest.


        :return: The patch_url of this PullRequest.
        :rtype: str
        """
        return self._patch_url

    @patch_url.setter
    def patch_url(self, patch_url):
        """Sets the patch_url of this PullRequest.


        :param patch_url: The patch_url of this PullRequest.
        :type patch_url: str
        """
        if patch_url is None:
            raise ValueError("Invalid value for `patch_url`, must not be `None`")

        self._patch_url = patch_url

    @property
    def rebaseable(self):
        """Gets the rebaseable of this PullRequest.


        :return: The rebaseable of this PullRequest.
        :rtype: bool
        """
        return self._rebaseable

    @rebaseable.setter
    def rebaseable(self, rebaseable):
        """Sets the rebaseable of this PullRequest.


        :param rebaseable: The rebaseable of this PullRequest.
        :type rebaseable: bool
        """

        self._rebaseable = rebaseable

    @property
    def requested_reviewers(self):
        """Gets the requested_reviewers of this PullRequest.


        :return: The requested_reviewers of this PullRequest.
        :rtype: List[SimpleUser]
        """
        return self._requested_reviewers

    @requested_reviewers.setter
    def requested_reviewers(self, requested_reviewers):
        """Sets the requested_reviewers of this PullRequest.


        :param requested_reviewers: The requested_reviewers of this PullRequest.
        :type requested_reviewers: List[SimpleUser]
        """

        self._requested_reviewers = requested_reviewers

    @property
    def requested_teams(self):
        """Gets the requested_teams of this PullRequest.


        :return: The requested_teams of this PullRequest.
        :rtype: List[TeamSimple]
        """
        return self._requested_teams

    @requested_teams.setter
    def requested_teams(self, requested_teams):
        """Sets the requested_teams of this PullRequest.


        :param requested_teams: The requested_teams of this PullRequest.
        :type requested_teams: List[TeamSimple]
        """

        self._requested_teams = requested_teams

    @property
    def review_comment_url(self):
        """Gets the review_comment_url of this PullRequest.


        :return: The review_comment_url of this PullRequest.
        :rtype: str
        """
        return self._review_comment_url

    @review_comment_url.setter
    def review_comment_url(self, review_comment_url):
        """Sets the review_comment_url of this PullRequest.


        :param review_comment_url: The review_comment_url of this PullRequest.
        :type review_comment_url: str
        """
        if review_comment_url is None:
            raise ValueError("Invalid value for `review_comment_url`, must not be `None`")

        self._review_comment_url = review_comment_url

    @property
    def review_comments(self):
        """Gets the review_comments of this PullRequest.


        :return: The review_comments of this PullRequest.
        :rtype: int
        """
        return self._review_comments

    @review_comments.setter
    def review_comments(self, review_comments):
        """Sets the review_comments of this PullRequest.


        :param review_comments: The review_comments of this PullRequest.
        :type review_comments: int
        """
        if review_comments is None:
            raise ValueError("Invalid value for `review_comments`, must not be `None`")

        self._review_comments = review_comments

    @property
    def review_comments_url(self):
        """Gets the review_comments_url of this PullRequest.


        :return: The review_comments_url of this PullRequest.
        :rtype: str
        """
        return self._review_comments_url

    @review_comments_url.setter
    def review_comments_url(self, review_comments_url):
        """Sets the review_comments_url of this PullRequest.


        :param review_comments_url: The review_comments_url of this PullRequest.
        :type review_comments_url: str
        """
        if review_comments_url is None:
            raise ValueError("Invalid value for `review_comments_url`, must not be `None`")

        self._review_comments_url = review_comments_url

    @property
    def state(self):
        """Gets the state of this PullRequest.

        State of this Pull Request. Either `open` or `closed`.

        :return: The state of this PullRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PullRequest.

        State of this Pull Request. Either `open` or `closed`.

        :param state: The state of this PullRequest.
        :type state: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def statuses_url(self):
        """Gets the statuses_url of this PullRequest.


        :return: The statuses_url of this PullRequest.
        :rtype: str
        """
        return self._statuses_url

    @statuses_url.setter
    def statuses_url(self, statuses_url):
        """Sets the statuses_url of this PullRequest.


        :param statuses_url: The statuses_url of this PullRequest.
        :type statuses_url: str
        """
        if statuses_url is None:
            raise ValueError("Invalid value for `statuses_url`, must not be `None`")

        self._statuses_url = statuses_url

    @property
    def title(self):
        """Gets the title of this PullRequest.

        The title of the pull request.

        :return: The title of this PullRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PullRequest.

        The title of the pull request.

        :param title: The title of this PullRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this PullRequest.


        :return: The updated_at of this PullRequest.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PullRequest.


        :param updated_at: The updated_at of this PullRequest.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this PullRequest.


        :return: The url of this PullRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PullRequest.


        :param url: The url of this PullRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this PullRequest.


        :return: The user of this PullRequest.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PullRequest.


        :param user: The user of this PullRequest.
        :type user: NullableSimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
