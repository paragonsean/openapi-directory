# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_commit import CommitCommit
from openapi_server.models.commit_parents_inner import CommitParentsInner
from openapi_server.models.commit_stats import CommitStats
from openapi_server.models.diff_entry import DiffEntry
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class Commit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: NullableSimpleUser=None, comments_url: str=None, commit: CommitCommit=None, committer: NullableSimpleUser=None, files: List[DiffEntry]=None, html_url: str=None, node_id: str=None, parents: List[CommitParentsInner]=None, sha: str=None, stats: CommitStats=None, url: str=None):
        """Commit - a model defined in OpenAPI

        :param author: The author of this Commit.
        :param comments_url: The comments_url of this Commit.
        :param commit: The commit of this Commit.
        :param committer: The committer of this Commit.
        :param files: The files of this Commit.
        :param html_url: The html_url of this Commit.
        :param node_id: The node_id of this Commit.
        :param parents: The parents of this Commit.
        :param sha: The sha of this Commit.
        :param stats: The stats of this Commit.
        :param url: The url of this Commit.
        """
        self.openapi_types = {
            'author': NullableSimpleUser,
            'comments_url': str,
            'commit': CommitCommit,
            'committer': NullableSimpleUser,
            'files': List[DiffEntry],
            'html_url': str,
            'node_id': str,
            'parents': List[CommitParentsInner],
            'sha': str,
            'stats': CommitStats,
            'url': str
        }

        self.attribute_map = {
            'author': 'author',
            'comments_url': 'comments_url',
            'commit': 'commit',
            'committer': 'committer',
            'files': 'files',
            'html_url': 'html_url',
            'node_id': 'node_id',
            'parents': 'parents',
            'sha': 'sha',
            'stats': 'stats',
            'url': 'url'
        }

        self._author = author
        self._comments_url = comments_url
        self._commit = commit
        self._committer = committer
        self._files = files
        self._html_url = html_url
        self._node_id = node_id
        self._parents = parents
        self._sha = sha
        self._stats = stats
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Commit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The commit of this Commit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Commit.


        :return: The author of this Commit.
        :rtype: NullableSimpleUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Commit.


        :param author: The author of this Commit.
        :type author: NullableSimpleUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def comments_url(self):
        """Gets the comments_url of this Commit.


        :return: The comments_url of this Commit.
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this Commit.


        :param comments_url: The comments_url of this Commit.
        :type comments_url: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")

        self._comments_url = comments_url

    @property
    def commit(self):
        """Gets the commit of this Commit.


        :return: The commit of this Commit.
        :rtype: CommitCommit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Commit.


        :param commit: The commit of this Commit.
        :type commit: CommitCommit
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def committer(self):
        """Gets the committer of this Commit.


        :return: The committer of this Commit.
        :rtype: NullableSimpleUser
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this Commit.


        :param committer: The committer of this Commit.
        :type committer: NullableSimpleUser
        """
        if committer is None:
            raise ValueError("Invalid value for `committer`, must not be `None`")

        self._committer = committer

    @property
    def files(self):
        """Gets the files of this Commit.


        :return: The files of this Commit.
        :rtype: List[DiffEntry]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Commit.


        :param files: The files of this Commit.
        :type files: List[DiffEntry]
        """

        self._files = files

    @property
    def html_url(self):
        """Gets the html_url of this Commit.


        :return: The html_url of this Commit.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Commit.


        :param html_url: The html_url of this Commit.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def node_id(self):
        """Gets the node_id of this Commit.


        :return: The node_id of this Commit.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Commit.


        :param node_id: The node_id of this Commit.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def parents(self):
        """Gets the parents of this Commit.


        :return: The parents of this Commit.
        :rtype: List[CommitParentsInner]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this Commit.


        :param parents: The parents of this Commit.
        :type parents: List[CommitParentsInner]
        """
        if parents is None:
            raise ValueError("Invalid value for `parents`, must not be `None`")

        self._parents = parents

    @property
    def sha(self):
        """Gets the sha of this Commit.


        :return: The sha of this Commit.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this Commit.


        :param sha: The sha of this Commit.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def stats(self):
        """Gets the stats of this Commit.


        :return: The stats of this Commit.
        :rtype: CommitStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Commit.


        :param stats: The stats of this Commit.
        :type stats: CommitStats
        """

        self._stats = stats

    @property
    def url(self):
        """Gets the url of this Commit.


        :return: The url of this Commit.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Commit.


        :param url: The url of this Commit.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
