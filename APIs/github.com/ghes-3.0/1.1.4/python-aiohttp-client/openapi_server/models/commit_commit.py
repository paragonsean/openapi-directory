# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_commit_tree import CommitCommitTree
from openapi_server.models.nullable_git_user import NullableGitUser
from openapi_server.models.verification import Verification
from openapi_server import util


class CommitCommit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: NullableGitUser=None, comment_count: int=None, committer: NullableGitUser=None, message: str=None, tree: CommitCommitTree=None, url: str=None, verification: Verification=None):
        """CommitCommit - a model defined in OpenAPI

        :param author: The author of this CommitCommit.
        :param comment_count: The comment_count of this CommitCommit.
        :param committer: The committer of this CommitCommit.
        :param message: The message of this CommitCommit.
        :param tree: The tree of this CommitCommit.
        :param url: The url of this CommitCommit.
        :param verification: The verification of this CommitCommit.
        """
        self.openapi_types = {
            'author': NullableGitUser,
            'comment_count': int,
            'committer': NullableGitUser,
            'message': str,
            'tree': CommitCommitTree,
            'url': str,
            'verification': Verification
        }

        self.attribute_map = {
            'author': 'author',
            'comment_count': 'comment_count',
            'committer': 'committer',
            'message': 'message',
            'tree': 'tree',
            'url': 'url',
            'verification': 'verification'
        }

        self._author = author
        self._comment_count = comment_count
        self._committer = committer
        self._message = message
        self._tree = tree
        self._url = url
        self._verification = verification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitCommit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The commit_commit of this CommitCommit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CommitCommit.


        :return: The author of this CommitCommit.
        :rtype: NullableGitUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommitCommit.


        :param author: The author of this CommitCommit.
        :type author: NullableGitUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def comment_count(self):
        """Gets the comment_count of this CommitCommit.


        :return: The comment_count of this CommitCommit.
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this CommitCommit.


        :param comment_count: The comment_count of this CommitCommit.
        :type comment_count: int
        """
        if comment_count is None:
            raise ValueError("Invalid value for `comment_count`, must not be `None`")

        self._comment_count = comment_count

    @property
    def committer(self):
        """Gets the committer of this CommitCommit.


        :return: The committer of this CommitCommit.
        :rtype: NullableGitUser
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this CommitCommit.


        :param committer: The committer of this CommitCommit.
        :type committer: NullableGitUser
        """
        if committer is None:
            raise ValueError("Invalid value for `committer`, must not be `None`")

        self._committer = committer

    @property
    def message(self):
        """Gets the message of this CommitCommit.


        :return: The message of this CommitCommit.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CommitCommit.


        :param message: The message of this CommitCommit.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def tree(self):
        """Gets the tree of this CommitCommit.


        :return: The tree of this CommitCommit.
        :rtype: CommitCommitTree
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this CommitCommit.


        :param tree: The tree of this CommitCommit.
        :type tree: CommitCommitTree
        """
        if tree is None:
            raise ValueError("Invalid value for `tree`, must not be `None`")

        self._tree = tree

    @property
    def url(self):
        """Gets the url of this CommitCommit.


        :return: The url of this CommitCommit.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CommitCommit.


        :param url: The url of this CommitCommit.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def verification(self):
        """Gets the verification of this CommitCommit.


        :return: The verification of this CommitCommit.
        :rtype: Verification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this CommitCommit.


        :param verification: The verification of this CommitCommit.
        :type verification: Verification
        """

        self._verification = verification
