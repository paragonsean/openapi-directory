# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actor import Actor
from openapi_server.models.event_payload import EventPayload
from openapi_server.models.event_repo import EventRepo
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: Actor=None, created_at: datetime=None, id: str=None, org: Actor=None, payload: EventPayload=None, public: bool=None, repo: EventRepo=None, type: str=None):
        """Event - a model defined in OpenAPI

        :param actor: The actor of this Event.
        :param created_at: The created_at of this Event.
        :param id: The id of this Event.
        :param org: The org of this Event.
        :param payload: The payload of this Event.
        :param public: The public of this Event.
        :param repo: The repo of this Event.
        :param type: The type of this Event.
        """
        self.openapi_types = {
            'actor': Actor,
            'created_at': datetime,
            'id': str,
            'org': Actor,
            'payload': EventPayload,
            'public': bool,
            'repo': EventRepo,
            'type': str
        }

        self.attribute_map = {
            'actor': 'actor',
            'created_at': 'created_at',
            'id': 'id',
            'org': 'org',
            'payload': 'payload',
            'public': 'public',
            'repo': 'repo',
            'type': 'type'
        }

        self._actor = actor
        self._created_at = created_at
        self._id = id
        self._org = org
        self._payload = payload
        self._public = public
        self._repo = repo
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this Event.


        :return: The actor of this Event.
        :rtype: Actor
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Event.


        :param actor: The actor of this Event.
        :type actor: Actor
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")

        self._actor = actor

    @property
    def created_at(self):
        """Gets the created_at of this Event.


        :return: The created_at of this Event.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.


        :param created_at: The created_at of this Event.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def org(self):
        """Gets the org of this Event.


        :return: The org of this Event.
        :rtype: Actor
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Event.


        :param org: The org of this Event.
        :type org: Actor
        """

        self._org = org

    @property
    def payload(self):
        """Gets the payload of this Event.


        :return: The payload of this Event.
        :rtype: EventPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Event.


        :param payload: The payload of this Event.
        :type payload: EventPayload
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def public(self):
        """Gets the public of this Event.


        :return: The public of this Event.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Event.


        :param public: The public of this Event.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")

        self._public = public

    @property
    def repo(self):
        """Gets the repo of this Event.


        :return: The repo of this Event.
        :rtype: EventRepo
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this Event.


        :param repo: The repo of this Event.
        :type repo: EventRepo
        """
        if repo is None:
            raise ValueError("Invalid value for `repo`, must not be `None`")

        self._repo = repo

    @property
    def type(self):
        """Gets the type of this Event.


        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
