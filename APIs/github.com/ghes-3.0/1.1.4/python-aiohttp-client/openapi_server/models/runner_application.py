# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunnerApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, download_url: str=None, filename: str=None, os: str=None, sha256_checksum: str=None, temp_download_token: str=None):
        """RunnerApplication - a model defined in OpenAPI

        :param architecture: The architecture of this RunnerApplication.
        :param download_url: The download_url of this RunnerApplication.
        :param filename: The filename of this RunnerApplication.
        :param os: The os of this RunnerApplication.
        :param sha256_checksum: The sha256_checksum of this RunnerApplication.
        :param temp_download_token: The temp_download_token of this RunnerApplication.
        """
        self.openapi_types = {
            'architecture': str,
            'download_url': str,
            'filename': str,
            'os': str,
            'sha256_checksum': str,
            'temp_download_token': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'download_url': 'download_url',
            'filename': 'filename',
            'os': 'os',
            'sha256_checksum': 'sha256_checksum',
            'temp_download_token': 'temp_download_token'
        }

        self._architecture = architecture
        self._download_url = download_url
        self._filename = filename
        self._os = os
        self._sha256_checksum = sha256_checksum
        self._temp_download_token = temp_download_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunnerApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The runner-application of this RunnerApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this RunnerApplication.


        :return: The architecture of this RunnerApplication.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this RunnerApplication.


        :param architecture: The architecture of this RunnerApplication.
        :type architecture: str
        """
        if architecture is None:
            raise ValueError("Invalid value for `architecture`, must not be `None`")

        self._architecture = architecture

    @property
    def download_url(self):
        """Gets the download_url of this RunnerApplication.


        :return: The download_url of this RunnerApplication.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this RunnerApplication.


        :param download_url: The download_url of this RunnerApplication.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def filename(self):
        """Gets the filename of this RunnerApplication.


        :return: The filename of this RunnerApplication.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this RunnerApplication.


        :param filename: The filename of this RunnerApplication.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def os(self):
        """Gets the os of this RunnerApplication.


        :return: The os of this RunnerApplication.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this RunnerApplication.


        :param os: The os of this RunnerApplication.
        :type os: str
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")

        self._os = os

    @property
    def sha256_checksum(self):
        """Gets the sha256_checksum of this RunnerApplication.


        :return: The sha256_checksum of this RunnerApplication.
        :rtype: str
        """
        return self._sha256_checksum

    @sha256_checksum.setter
    def sha256_checksum(self, sha256_checksum):
        """Sets the sha256_checksum of this RunnerApplication.


        :param sha256_checksum: The sha256_checksum of this RunnerApplication.
        :type sha256_checksum: str
        """

        self._sha256_checksum = sha256_checksum

    @property
    def temp_download_token(self):
        """Gets the temp_download_token of this RunnerApplication.

        A short lived bearer token used to download the runner, if needed.

        :return: The temp_download_token of this RunnerApplication.
        :rtype: str
        """
        return self._temp_download_token

    @temp_download_token.setter
    def temp_download_token(self, temp_download_token):
        """Sets the temp_download_token of this RunnerApplication.

        A short lived bearer token used to download the runner, if needed.

        :param temp_download_token: The temp_download_token of this RunnerApplication.
        :type temp_download_token: str
        """

        self._temp_download_token = temp_download_token
