# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributor_activity_weeks_inner import ContributorActivityWeeksInner
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class ContributorActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: NullableSimpleUser=None, total: int=None, weeks: List[ContributorActivityWeeksInner]=None):
        """ContributorActivity - a model defined in OpenAPI

        :param author: The author of this ContributorActivity.
        :param total: The total of this ContributorActivity.
        :param weeks: The weeks of this ContributorActivity.
        """
        self.openapi_types = {
            'author': NullableSimpleUser,
            'total': int,
            'weeks': List[ContributorActivityWeeksInner]
        }

        self.attribute_map = {
            'author': 'author',
            'total': 'total',
            'weeks': 'weeks'
        }

        self._author = author
        self._total = total
        self._weeks = weeks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContributorActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The contributor-activity of this ContributorActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this ContributorActivity.


        :return: The author of this ContributorActivity.
        :rtype: NullableSimpleUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ContributorActivity.


        :param author: The author of this ContributorActivity.
        :type author: NullableSimpleUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def total(self):
        """Gets the total of this ContributorActivity.


        :return: The total of this ContributorActivity.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ContributorActivity.


        :param total: The total of this ContributorActivity.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def weeks(self):
        """Gets the weeks of this ContributorActivity.


        :return: The weeks of this ContributorActivity.
        :rtype: List[ContributorActivityWeeksInner]
        """
        return self._weeks

    @weeks.setter
    def weeks(self, weeks):
        """Sets the weeks of this ContributorActivity.


        :param weeks: The weeks of this ContributorActivity.
        :type weeks: List[ContributorActivityWeeksInner]
        """
        if weeks is None:
            raise ValueError("Invalid value for `weeks`, must not be `None`")

        self._weeks = weeks
