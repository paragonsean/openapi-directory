# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreadSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, ignored: bool=None, reason: str=None, repository_url: str=None, subscribed: bool=None, thread_url: str=None, url: str=None):
        """ThreadSubscription - a model defined in OpenAPI

        :param created_at: The created_at of this ThreadSubscription.
        :param ignored: The ignored of this ThreadSubscription.
        :param reason: The reason of this ThreadSubscription.
        :param repository_url: The repository_url of this ThreadSubscription.
        :param subscribed: The subscribed of this ThreadSubscription.
        :param thread_url: The thread_url of this ThreadSubscription.
        :param url: The url of this ThreadSubscription.
        """
        self.openapi_types = {
            'created_at': datetime,
            'ignored': bool,
            'reason': str,
            'repository_url': str,
            'subscribed': bool,
            'thread_url': str,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'ignored': 'ignored',
            'reason': 'reason',
            'repository_url': 'repository_url',
            'subscribed': 'subscribed',
            'thread_url': 'thread_url',
            'url': 'url'
        }

        self._created_at = created_at
        self._ignored = ignored
        self._reason = reason
        self._repository_url = repository_url
        self._subscribed = subscribed
        self._thread_url = thread_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreadSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The thread-subscription of this ThreadSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ThreadSubscription.


        :return: The created_at of this ThreadSubscription.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ThreadSubscription.


        :param created_at: The created_at of this ThreadSubscription.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def ignored(self):
        """Gets the ignored of this ThreadSubscription.


        :return: The ignored of this ThreadSubscription.
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this ThreadSubscription.


        :param ignored: The ignored of this ThreadSubscription.
        :type ignored: bool
        """
        if ignored is None:
            raise ValueError("Invalid value for `ignored`, must not be `None`")

        self._ignored = ignored

    @property
    def reason(self):
        """Gets the reason of this ThreadSubscription.


        :return: The reason of this ThreadSubscription.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ThreadSubscription.


        :param reason: The reason of this ThreadSubscription.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def repository_url(self):
        """Gets the repository_url of this ThreadSubscription.


        :return: The repository_url of this ThreadSubscription.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this ThreadSubscription.


        :param repository_url: The repository_url of this ThreadSubscription.
        :type repository_url: str
        """

        self._repository_url = repository_url

    @property
    def subscribed(self):
        """Gets the subscribed of this ThreadSubscription.


        :return: The subscribed of this ThreadSubscription.
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this ThreadSubscription.


        :param subscribed: The subscribed of this ThreadSubscription.
        :type subscribed: bool
        """
        if subscribed is None:
            raise ValueError("Invalid value for `subscribed`, must not be `None`")

        self._subscribed = subscribed

    @property
    def thread_url(self):
        """Gets the thread_url of this ThreadSubscription.


        :return: The thread_url of this ThreadSubscription.
        :rtype: str
        """
        return self._thread_url

    @thread_url.setter
    def thread_url(self, thread_url):
        """Sets the thread_url of this ThreadSubscription.


        :param thread_url: The thread_url of this ThreadSubscription.
        :type thread_url: str
        """

        self._thread_url = thread_url

    @property
    def url(self):
        """Gets the url of this ThreadSubscription.


        :return: The url of this ThreadSubscription.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ThreadSubscription.


        :param url: The url of this ThreadSubscription.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
