# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Actor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, display_login: str=None, gravatar_id: str=None, id: int=None, login: str=None, url: str=None):
        """Actor - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this Actor.
        :param display_login: The display_login of this Actor.
        :param gravatar_id: The gravatar_id of this Actor.
        :param id: The id of this Actor.
        :param login: The login of this Actor.
        :param url: The url of this Actor.
        """
        self.openapi_types = {
            'avatar_url': str,
            'display_login': str,
            'gravatar_id': str,
            'id': int,
            'login': str,
            'url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'display_login': 'display_login',
            'gravatar_id': 'gravatar_id',
            'id': 'id',
            'login': 'login',
            'url': 'url'
        }

        self._avatar_url = avatar_url
        self._display_login = display_login
        self._gravatar_id = gravatar_id
        self._id = id
        self._login = login
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Actor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actor of this Actor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Actor.


        :return: The avatar_url of this Actor.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Actor.


        :param avatar_url: The avatar_url of this Actor.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")

        self._avatar_url = avatar_url

    @property
    def display_login(self):
        """Gets the display_login of this Actor.


        :return: The display_login of this Actor.
        :rtype: str
        """
        return self._display_login

    @display_login.setter
    def display_login(self, display_login):
        """Sets the display_login of this Actor.


        :param display_login: The display_login of this Actor.
        :type display_login: str
        """

        self._display_login = display_login

    @property
    def gravatar_id(self):
        """Gets the gravatar_id of this Actor.


        :return: The gravatar_id of this Actor.
        :rtype: str
        """
        return self._gravatar_id

    @gravatar_id.setter
    def gravatar_id(self, gravatar_id):
        """Sets the gravatar_id of this Actor.


        :param gravatar_id: The gravatar_id of this Actor.
        :type gravatar_id: str
        """
        if gravatar_id is None:
            raise ValueError("Invalid value for `gravatar_id`, must not be `None`")

        self._gravatar_id = gravatar_id

    @property
    def id(self):
        """Gets the id of this Actor.


        :return: The id of this Actor.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Actor.


        :param id: The id of this Actor.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def login(self):
        """Gets the login of this Actor.


        :return: The login of this Actor.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Actor.


        :param login: The login of this Actor.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def url(self):
        """Gets the url of this Actor.


        :return: The url of this Actor.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Actor.


        :param url: The url of this Actor.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
