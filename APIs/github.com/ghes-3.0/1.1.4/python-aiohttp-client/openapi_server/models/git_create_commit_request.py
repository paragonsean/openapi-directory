# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.git_create_commit_request_author import GitCreateCommitRequestAuthor
from openapi_server.models.git_create_commit_request_committer import GitCreateCommitRequestCommitter
from openapi_server import util


class GitCreateCommitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: GitCreateCommitRequestAuthor=None, committer: GitCreateCommitRequestCommitter=None, message: str=None, parents: List[str]=None, signature: str=None, tree: str=None):
        """GitCreateCommitRequest - a model defined in OpenAPI

        :param author: The author of this GitCreateCommitRequest.
        :param committer: The committer of this GitCreateCommitRequest.
        :param message: The message of this GitCreateCommitRequest.
        :param parents: The parents of this GitCreateCommitRequest.
        :param signature: The signature of this GitCreateCommitRequest.
        :param tree: The tree of this GitCreateCommitRequest.
        """
        self.openapi_types = {
            'author': GitCreateCommitRequestAuthor,
            'committer': GitCreateCommitRequestCommitter,
            'message': str,
            'parents': List[str],
            'signature': str,
            'tree': str
        }

        self.attribute_map = {
            'author': 'author',
            'committer': 'committer',
            'message': 'message',
            'parents': 'parents',
            'signature': 'signature',
            'tree': 'tree'
        }

        self._author = author
        self._committer = committer
        self._message = message
        self._parents = parents
        self._signature = signature
        self._tree = tree

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitCreateCommitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The git_create_commit_request of this GitCreateCommitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this GitCreateCommitRequest.


        :return: The author of this GitCreateCommitRequest.
        :rtype: GitCreateCommitRequestAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GitCreateCommitRequest.


        :param author: The author of this GitCreateCommitRequest.
        :type author: GitCreateCommitRequestAuthor
        """

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this GitCreateCommitRequest.


        :return: The committer of this GitCreateCommitRequest.
        :rtype: GitCreateCommitRequestCommitter
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this GitCreateCommitRequest.


        :param committer: The committer of this GitCreateCommitRequest.
        :type committer: GitCreateCommitRequestCommitter
        """

        self._committer = committer

    @property
    def message(self):
        """Gets the message of this GitCreateCommitRequest.

        The commit message

        :return: The message of this GitCreateCommitRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GitCreateCommitRequest.

        The commit message

        :param message: The message of this GitCreateCommitRequest.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def parents(self):
        """Gets the parents of this GitCreateCommitRequest.

        The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.

        :return: The parents of this GitCreateCommitRequest.
        :rtype: List[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this GitCreateCommitRequest.

        The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.

        :param parents: The parents of this GitCreateCommitRequest.
        :type parents: List[str]
        """

        self._parents = parents

    @property
    def signature(self):
        """Gets the signature of this GitCreateCommitRequest.

        The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.

        :return: The signature of this GitCreateCommitRequest.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this GitCreateCommitRequest.

        The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.

        :param signature: The signature of this GitCreateCommitRequest.
        :type signature: str
        """

        self._signature = signature

    @property
    def tree(self):
        """Gets the tree of this GitCreateCommitRequest.

        The SHA of the tree object this commit points to

        :return: The tree of this GitCreateCommitRequest.
        :rtype: str
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this GitCreateCommitRequest.

        The SHA of the tree object this commit points to

        :param tree: The tree of this GitCreateCommitRequest.
        :type tree: str
        """
        if tree is None:
            raise ValueError("Invalid value for `tree`, must not be `None`")

        self._tree = tree
