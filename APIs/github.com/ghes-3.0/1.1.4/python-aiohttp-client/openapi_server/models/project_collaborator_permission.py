# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class ProjectCollaboratorPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permission: str=None, user: NullableSimpleUser=None):
        """ProjectCollaboratorPermission - a model defined in OpenAPI

        :param permission: The permission of this ProjectCollaboratorPermission.
        :param user: The user of this ProjectCollaboratorPermission.
        """
        self.openapi_types = {
            'permission': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'permission': 'permission',
            'user': 'user'
        }

        self._permission = permission
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectCollaboratorPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The project-collaborator-permission of this ProjectCollaboratorPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permission(self):
        """Gets the permission of this ProjectCollaboratorPermission.


        :return: The permission of this ProjectCollaboratorPermission.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ProjectCollaboratorPermission.


        :param permission: The permission of this ProjectCollaboratorPermission.
        :type permission: str
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission

    @property
    def user(self):
        """Gets the user of this ProjectCollaboratorPermission.


        :return: The user of this ProjectCollaboratorPermission.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ProjectCollaboratorPermission.


        :param user: The user of this ProjectCollaboratorPermission.
        :type user: NullableSimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
