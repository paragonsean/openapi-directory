# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job import Job
from openapi_server import util


class ActionsListJobsForWorkflowRun200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jobs: List[Job]=None, total_count: int=None):
        """ActionsListJobsForWorkflowRun200Response - a model defined in OpenAPI

        :param jobs: The jobs of this ActionsListJobsForWorkflowRun200Response.
        :param total_count: The total_count of this ActionsListJobsForWorkflowRun200Response.
        """
        self.openapi_types = {
            'jobs': List[Job],
            'total_count': int
        }

        self.attribute_map = {
            'jobs': 'jobs',
            'total_count': 'total_count'
        }

        self._jobs = jobs
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsListJobsForWorkflowRun200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_list_jobs_for_workflow_run_200_response of this ActionsListJobsForWorkflowRun200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jobs(self):
        """Gets the jobs of this ActionsListJobsForWorkflowRun200Response.


        :return: The jobs of this ActionsListJobsForWorkflowRun200Response.
        :rtype: List[Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this ActionsListJobsForWorkflowRun200Response.


        :param jobs: The jobs of this ActionsListJobsForWorkflowRun200Response.
        :type jobs: List[Job]
        """
        if jobs is None:
            raise ValueError("Invalid value for `jobs`, must not be `None`")

        self._jobs = jobs

    @property
    def total_count(self):
        """Gets the total_count of this ActionsListJobsForWorkflowRun200Response.


        :return: The total_count of this ActionsListJobsForWorkflowRun200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActionsListJobsForWorkflowRun200Response.


        :param total_count: The total_count of this ActionsListJobsForWorkflowRun200Response.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
