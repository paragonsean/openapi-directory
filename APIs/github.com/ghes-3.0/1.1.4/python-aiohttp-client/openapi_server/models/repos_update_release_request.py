# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposUpdateReleaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, draft: bool=None, name: str=None, prerelease: bool=None, tag_name: str=None, target_commitish: str=None):
        """ReposUpdateReleaseRequest - a model defined in OpenAPI

        :param body: The body of this ReposUpdateReleaseRequest.
        :param draft: The draft of this ReposUpdateReleaseRequest.
        :param name: The name of this ReposUpdateReleaseRequest.
        :param prerelease: The prerelease of this ReposUpdateReleaseRequest.
        :param tag_name: The tag_name of this ReposUpdateReleaseRequest.
        :param target_commitish: The target_commitish of this ReposUpdateReleaseRequest.
        """
        self.openapi_types = {
            'body': str,
            'draft': bool,
            'name': str,
            'prerelease': bool,
            'tag_name': str,
            'target_commitish': str
        }

        self.attribute_map = {
            'body': 'body',
            'draft': 'draft',
            'name': 'name',
            'prerelease': 'prerelease',
            'tag_name': 'tag_name',
            'target_commitish': 'target_commitish'
        }

        self._body = body
        self._draft = draft
        self._name = name
        self._prerelease = prerelease
        self._tag_name = tag_name
        self._target_commitish = target_commitish

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateReleaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_release_request of this ReposUpdateReleaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ReposUpdateReleaseRequest.

        Text describing the contents of the tag.

        :return: The body of this ReposUpdateReleaseRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ReposUpdateReleaseRequest.

        Text describing the contents of the tag.

        :param body: The body of this ReposUpdateReleaseRequest.
        :type body: str
        """

        self._body = body

    @property
    def draft(self):
        """Gets the draft of this ReposUpdateReleaseRequest.

        `true` makes the release a draft, and `false` publishes the release.

        :return: The draft of this ReposUpdateReleaseRequest.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this ReposUpdateReleaseRequest.

        `true` makes the release a draft, and `false` publishes the release.

        :param draft: The draft of this ReposUpdateReleaseRequest.
        :type draft: bool
        """

        self._draft = draft

    @property
    def name(self):
        """Gets the name of this ReposUpdateReleaseRequest.

        The name of the release.

        :return: The name of this ReposUpdateReleaseRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReposUpdateReleaseRequest.

        The name of the release.

        :param name: The name of this ReposUpdateReleaseRequest.
        :type name: str
        """

        self._name = name

    @property
    def prerelease(self):
        """Gets the prerelease of this ReposUpdateReleaseRequest.

        `true` to identify the release as a prerelease, `false` to identify the release as a full release.

        :return: The prerelease of this ReposUpdateReleaseRequest.
        :rtype: bool
        """
        return self._prerelease

    @prerelease.setter
    def prerelease(self, prerelease):
        """Sets the prerelease of this ReposUpdateReleaseRequest.

        `true` to identify the release as a prerelease, `false` to identify the release as a full release.

        :param prerelease: The prerelease of this ReposUpdateReleaseRequest.
        :type prerelease: bool
        """

        self._prerelease = prerelease

    @property
    def tag_name(self):
        """Gets the tag_name of this ReposUpdateReleaseRequest.

        The name of the tag.

        :return: The tag_name of this ReposUpdateReleaseRequest.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this ReposUpdateReleaseRequest.

        The name of the tag.

        :param tag_name: The tag_name of this ReposUpdateReleaseRequest.
        :type tag_name: str
        """

        self._tag_name = tag_name

    @property
    def target_commitish(self):
        """Gets the target_commitish of this ReposUpdateReleaseRequest.

        Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).

        :return: The target_commitish of this ReposUpdateReleaseRequest.
        :rtype: str
        """
        return self._target_commitish

    @target_commitish.setter
    def target_commitish(self, target_commitish):
        """Sets the target_commitish of this ReposUpdateReleaseRequest.

        Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).

        :param target_commitish: The target_commitish of this ReposUpdateReleaseRequest.
        :type target_commitish: str
        """

        self._target_commitish = target_commitish
