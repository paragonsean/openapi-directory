# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_level: str=None, blob_href: str=None, end_column: int=None, end_line: int=None, message: str=None, path: str=None, raw_details: str=None, start_column: int=None, start_line: int=None, title: str=None):
        """CheckAnnotation - a model defined in OpenAPI

        :param annotation_level: The annotation_level of this CheckAnnotation.
        :param blob_href: The blob_href of this CheckAnnotation.
        :param end_column: The end_column of this CheckAnnotation.
        :param end_line: The end_line of this CheckAnnotation.
        :param message: The message of this CheckAnnotation.
        :param path: The path of this CheckAnnotation.
        :param raw_details: The raw_details of this CheckAnnotation.
        :param start_column: The start_column of this CheckAnnotation.
        :param start_line: The start_line of this CheckAnnotation.
        :param title: The title of this CheckAnnotation.
        """
        self.openapi_types = {
            'annotation_level': str,
            'blob_href': str,
            'end_column': int,
            'end_line': int,
            'message': str,
            'path': str,
            'raw_details': str,
            'start_column': int,
            'start_line': int,
            'title': str
        }

        self.attribute_map = {
            'annotation_level': 'annotation_level',
            'blob_href': 'blob_href',
            'end_column': 'end_column',
            'end_line': 'end_line',
            'message': 'message',
            'path': 'path',
            'raw_details': 'raw_details',
            'start_column': 'start_column',
            'start_line': 'start_line',
            'title': 'title'
        }

        self._annotation_level = annotation_level
        self._blob_href = blob_href
        self._end_column = end_column
        self._end_line = end_line
        self._message = message
        self._path = path
        self._raw_details = raw_details
        self._start_column = start_column
        self._start_line = start_line
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check-annotation of this CheckAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_level(self):
        """Gets the annotation_level of this CheckAnnotation.


        :return: The annotation_level of this CheckAnnotation.
        :rtype: str
        """
        return self._annotation_level

    @annotation_level.setter
    def annotation_level(self, annotation_level):
        """Sets the annotation_level of this CheckAnnotation.


        :param annotation_level: The annotation_level of this CheckAnnotation.
        :type annotation_level: str
        """
        if annotation_level is None:
            raise ValueError("Invalid value for `annotation_level`, must not be `None`")

        self._annotation_level = annotation_level

    @property
    def blob_href(self):
        """Gets the blob_href of this CheckAnnotation.


        :return: The blob_href of this CheckAnnotation.
        :rtype: str
        """
        return self._blob_href

    @blob_href.setter
    def blob_href(self, blob_href):
        """Sets the blob_href of this CheckAnnotation.


        :param blob_href: The blob_href of this CheckAnnotation.
        :type blob_href: str
        """
        if blob_href is None:
            raise ValueError("Invalid value for `blob_href`, must not be `None`")

        self._blob_href = blob_href

    @property
    def end_column(self):
        """Gets the end_column of this CheckAnnotation.


        :return: The end_column of this CheckAnnotation.
        :rtype: int
        """
        return self._end_column

    @end_column.setter
    def end_column(self, end_column):
        """Sets the end_column of this CheckAnnotation.


        :param end_column: The end_column of this CheckAnnotation.
        :type end_column: int
        """
        if end_column is None:
            raise ValueError("Invalid value for `end_column`, must not be `None`")

        self._end_column = end_column

    @property
    def end_line(self):
        """Gets the end_line of this CheckAnnotation.


        :return: The end_line of this CheckAnnotation.
        :rtype: int
        """
        return self._end_line

    @end_line.setter
    def end_line(self, end_line):
        """Sets the end_line of this CheckAnnotation.


        :param end_line: The end_line of this CheckAnnotation.
        :type end_line: int
        """
        if end_line is None:
            raise ValueError("Invalid value for `end_line`, must not be `None`")

        self._end_line = end_line

    @property
    def message(self):
        """Gets the message of this CheckAnnotation.


        :return: The message of this CheckAnnotation.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CheckAnnotation.


        :param message: The message of this CheckAnnotation.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def path(self):
        """Gets the path of this CheckAnnotation.


        :return: The path of this CheckAnnotation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CheckAnnotation.


        :param path: The path of this CheckAnnotation.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def raw_details(self):
        """Gets the raw_details of this CheckAnnotation.


        :return: The raw_details of this CheckAnnotation.
        :rtype: str
        """
        return self._raw_details

    @raw_details.setter
    def raw_details(self, raw_details):
        """Sets the raw_details of this CheckAnnotation.


        :param raw_details: The raw_details of this CheckAnnotation.
        :type raw_details: str
        """
        if raw_details is None:
            raise ValueError("Invalid value for `raw_details`, must not be `None`")

        self._raw_details = raw_details

    @property
    def start_column(self):
        """Gets the start_column of this CheckAnnotation.


        :return: The start_column of this CheckAnnotation.
        :rtype: int
        """
        return self._start_column

    @start_column.setter
    def start_column(self, start_column):
        """Sets the start_column of this CheckAnnotation.


        :param start_column: The start_column of this CheckAnnotation.
        :type start_column: int
        """
        if start_column is None:
            raise ValueError("Invalid value for `start_column`, must not be `None`")

        self._start_column = start_column

    @property
    def start_line(self):
        """Gets the start_line of this CheckAnnotation.


        :return: The start_line of this CheckAnnotation.
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line):
        """Sets the start_line of this CheckAnnotation.


        :param start_line: The start_line of this CheckAnnotation.
        :type start_line: int
        """
        if start_line is None:
            raise ValueError("Invalid value for `start_line`, must not be `None`")

        self._start_line = start_line

    @property
    def title(self):
        """Gets the title of this CheckAnnotation.


        :return: The title of this CheckAnnotation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CheckAnnotation.


        :param title: The title of this CheckAnnotation.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
