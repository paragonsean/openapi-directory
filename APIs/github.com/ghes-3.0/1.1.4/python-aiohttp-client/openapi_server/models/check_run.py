# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_run_check_suite import CheckRunCheckSuite
from openapi_server.models.check_run_output import CheckRunOutput
from openapi_server.models.deployment_simple import DeploymentSimple
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.pull_request_minimal import PullRequestMinimal
from openapi_server import util


class CheckRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: NullableIntegration=None, check_suite: CheckRunCheckSuite=None, completed_at: datetime=None, conclusion: str=None, deployment: DeploymentSimple=None, details_url: str=None, external_id: str=None, head_sha: str=None, html_url: str=None, id: int=None, name: str=None, node_id: str=None, output: CheckRunOutput=None, pull_requests: List[PullRequestMinimal]=None, started_at: datetime=None, status: str=None, url: str=None):
        """CheckRun - a model defined in OpenAPI

        :param app: The app of this CheckRun.
        :param check_suite: The check_suite of this CheckRun.
        :param completed_at: The completed_at of this CheckRun.
        :param conclusion: The conclusion of this CheckRun.
        :param deployment: The deployment of this CheckRun.
        :param details_url: The details_url of this CheckRun.
        :param external_id: The external_id of this CheckRun.
        :param head_sha: The head_sha of this CheckRun.
        :param html_url: The html_url of this CheckRun.
        :param id: The id of this CheckRun.
        :param name: The name of this CheckRun.
        :param node_id: The node_id of this CheckRun.
        :param output: The output of this CheckRun.
        :param pull_requests: The pull_requests of this CheckRun.
        :param started_at: The started_at of this CheckRun.
        :param status: The status of this CheckRun.
        :param url: The url of this CheckRun.
        """
        self.openapi_types = {
            'app': NullableIntegration,
            'check_suite': CheckRunCheckSuite,
            'completed_at': datetime,
            'conclusion': str,
            'deployment': DeploymentSimple,
            'details_url': str,
            'external_id': str,
            'head_sha': str,
            'html_url': str,
            'id': int,
            'name': str,
            'node_id': str,
            'output': CheckRunOutput,
            'pull_requests': List[PullRequestMinimal],
            'started_at': datetime,
            'status': str,
            'url': str
        }

        self.attribute_map = {
            'app': 'app',
            'check_suite': 'check_suite',
            'completed_at': 'completed_at',
            'conclusion': 'conclusion',
            'deployment': 'deployment',
            'details_url': 'details_url',
            'external_id': 'external_id',
            'head_sha': 'head_sha',
            'html_url': 'html_url',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'output': 'output',
            'pull_requests': 'pull_requests',
            'started_at': 'started_at',
            'status': 'status',
            'url': 'url'
        }

        self._app = app
        self._check_suite = check_suite
        self._completed_at = completed_at
        self._conclusion = conclusion
        self._deployment = deployment
        self._details_url = details_url
        self._external_id = external_id
        self._head_sha = head_sha
        self._html_url = html_url
        self._id = id
        self._name = name
        self._node_id = node_id
        self._output = output
        self._pull_requests = pull_requests
        self._started_at = started_at
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The check-run of this CheckRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this CheckRun.


        :return: The app of this CheckRun.
        :rtype: NullableIntegration
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this CheckRun.


        :param app: The app of this CheckRun.
        :type app: NullableIntegration
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def check_suite(self):
        """Gets the check_suite of this CheckRun.


        :return: The check_suite of this CheckRun.
        :rtype: CheckRunCheckSuite
        """
        return self._check_suite

    @check_suite.setter
    def check_suite(self, check_suite):
        """Sets the check_suite of this CheckRun.


        :param check_suite: The check_suite of this CheckRun.
        :type check_suite: CheckRunCheckSuite
        """
        if check_suite is None:
            raise ValueError("Invalid value for `check_suite`, must not be `None`")

        self._check_suite = check_suite

    @property
    def completed_at(self):
        """Gets the completed_at of this CheckRun.


        :return: The completed_at of this CheckRun.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this CheckRun.


        :param completed_at: The completed_at of this CheckRun.
        :type completed_at: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")

        self._completed_at = completed_at

    @property
    def conclusion(self):
        """Gets the conclusion of this CheckRun.


        :return: The conclusion of this CheckRun.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this CheckRun.


        :param conclusion: The conclusion of this CheckRun.
        :type conclusion: str
        """
        allowed_values = [None,"success", "failure", "neutral", "cancelled", "skipped", "timed_out", "action_required"]  # noqa: E501
        if conclusion not in allowed_values:
            raise ValueError(
                "Invalid value for `conclusion` ({0}), must be one of {1}"
                .format(conclusion, allowed_values)
            )

        self._conclusion = conclusion

    @property
    def deployment(self):
        """Gets the deployment of this CheckRun.


        :return: The deployment of this CheckRun.
        :rtype: DeploymentSimple
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this CheckRun.


        :param deployment: The deployment of this CheckRun.
        :type deployment: DeploymentSimple
        """

        self._deployment = deployment

    @property
    def details_url(self):
        """Gets the details_url of this CheckRun.


        :return: The details_url of this CheckRun.
        :rtype: str
        """
        return self._details_url

    @details_url.setter
    def details_url(self, details_url):
        """Sets the details_url of this CheckRun.


        :param details_url: The details_url of this CheckRun.
        :type details_url: str
        """
        if details_url is None:
            raise ValueError("Invalid value for `details_url`, must not be `None`")

        self._details_url = details_url

    @property
    def external_id(self):
        """Gets the external_id of this CheckRun.


        :return: The external_id of this CheckRun.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CheckRun.


        :param external_id: The external_id of this CheckRun.
        :type external_id: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")

        self._external_id = external_id

    @property
    def head_sha(self):
        """Gets the head_sha of this CheckRun.

        The SHA of the commit that is being checked.

        :return: The head_sha of this CheckRun.
        :rtype: str
        """
        return self._head_sha

    @head_sha.setter
    def head_sha(self, head_sha):
        """Sets the head_sha of this CheckRun.

        The SHA of the commit that is being checked.

        :param head_sha: The head_sha of this CheckRun.
        :type head_sha: str
        """
        if head_sha is None:
            raise ValueError("Invalid value for `head_sha`, must not be `None`")

        self._head_sha = head_sha

    @property
    def html_url(self):
        """Gets the html_url of this CheckRun.


        :return: The html_url of this CheckRun.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this CheckRun.


        :param html_url: The html_url of this CheckRun.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this CheckRun.

        The id of the check.

        :return: The id of this CheckRun.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckRun.

        The id of the check.

        :param id: The id of this CheckRun.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CheckRun.

        The name of the check.

        :return: The name of this CheckRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckRun.

        The name of the check.

        :param name: The name of this CheckRun.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this CheckRun.


        :return: The node_id of this CheckRun.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this CheckRun.


        :param node_id: The node_id of this CheckRun.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def output(self):
        """Gets the output of this CheckRun.


        :return: The output of this CheckRun.
        :rtype: CheckRunOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this CheckRun.


        :param output: The output of this CheckRun.
        :type output: CheckRunOutput
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def pull_requests(self):
        """Gets the pull_requests of this CheckRun.


        :return: The pull_requests of this CheckRun.
        :rtype: List[PullRequestMinimal]
        """
        return self._pull_requests

    @pull_requests.setter
    def pull_requests(self, pull_requests):
        """Sets the pull_requests of this CheckRun.


        :param pull_requests: The pull_requests of this CheckRun.
        :type pull_requests: List[PullRequestMinimal]
        """
        if pull_requests is None:
            raise ValueError("Invalid value for `pull_requests`, must not be `None`")

        self._pull_requests = pull_requests

    @property
    def started_at(self):
        """Gets the started_at of this CheckRun.


        :return: The started_at of this CheckRun.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CheckRun.


        :param started_at: The started_at of this CheckRun.
        :type started_at: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this CheckRun.

        The phase of the lifecycle that the check is currently in.

        :return: The status of this CheckRun.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckRun.

        The phase of the lifecycle that the check is currently in.

        :param status: The status of this CheckRun.
        :type status: str
        """
        allowed_values = ["queued", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url(self):
        """Gets the url of this CheckRun.


        :return: The url of this CheckRun.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CheckRun.


        :param url: The url of this CheckRun.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
