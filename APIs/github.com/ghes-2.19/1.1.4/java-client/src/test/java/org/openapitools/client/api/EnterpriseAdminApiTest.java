/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Authorization;
import org.openapitools.client.model.ConfigurationStatus;
import org.openapitools.client.model.EnterpriseAdminCreateGlobalWebhookRequest;
import org.openapitools.client.model.EnterpriseAdminCreateImpersonationOAuthTokenRequest;
import org.openapitools.client.model.EnterpriseAdminCreateOrgRequest;
import org.openapitools.client.model.EnterpriseAdminCreatePreReceiveEnvironmentRequest;
import org.openapitools.client.model.EnterpriseAdminCreatePreReceiveHookRequest;
import org.openapitools.client.model.EnterpriseAdminCreateUserRequest;
import org.openapitools.client.model.EnterpriseAdminDeletePreReceiveEnvironment422Response;
import org.openapitools.client.model.EnterpriseAdminSuspendUserRequest;
import org.openapitools.client.model.EnterpriseAdminSyncLdapMappingForTeam201Response;
import org.openapitools.client.model.EnterpriseAdminUnsuspendUserRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateGlobalWebhookRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateLdapMappingForTeamRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgName202Response;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgNameRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveEnvironmentRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateUsernameForUserRequest;
import org.openapitools.client.model.EnterpriseCommentOverview;
import org.openapitools.client.model.EnterpriseGistOverview;
import org.openapitools.client.model.EnterpriseHookOverview;
import org.openapitools.client.model.EnterpriseIssueOverview;
import org.openapitools.client.model.EnterpriseMilestoneOverview;
import org.openapitools.client.model.EnterpriseOrganizationOverview;
import org.openapitools.client.model.EnterpriseOverview;
import org.openapitools.client.model.EnterprisePageOverview;
import org.openapitools.client.model.EnterprisePullRequestOverview;
import org.openapitools.client.model.EnterpriseRepositoryOverview;
import org.openapitools.client.model.EnterpriseSettings;
import org.openapitools.client.model.EnterpriseUserOverview;
import org.openapitools.client.model.GlobalHook;
import org.openapitools.client.model.GlobalHook2;
import org.openapitools.client.model.LdapMappingTeam;
import org.openapitools.client.model.LdapMappingUser;
import org.openapitools.client.model.LicenseInfo;
import org.openapitools.client.model.MaintenanceStatus;
import org.openapitools.client.model.OrgPreReceiveHook;
import org.openapitools.client.model.OrganizationSimple;
import org.openapitools.client.model.PreReceiveEnvironment;
import org.openapitools.client.model.PreReceiveEnvironmentDownloadStatus;
import org.openapitools.client.model.PreReceiveHook;
import org.openapitools.client.model.PublicKeyFull;
import org.openapitools.client.model.RepositoryPreReceiveHook;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.SshKey;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EnterpriseAdminApi
 */
@Disabled
public class EnterpriseAdminApiTest {

    private final EnterpriseAdminApi api = new EnterpriseAdminApi();

    /**
     * Add an authorized SSH key
     *
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminAddAuthorizedSshKeyTest() throws ApiException {
        String authorizedKey = null;
        List<SshKey> response = api.enterpriseAdminAddAuthorizedSshKey(authorizedKey);
        // TODO: test validations
    }

    /**
     * Create a GitHub license
     *
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to &#x60;POST&#x60; to [&#x60;/setup/api/configure&#x60;](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you&#39;re working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminCreateEnterpriseServerLicenseTest() throws ApiException {
        String license = null;
        String password = null;
        String settings = null;
        api.enterpriseAdminCreateEnterpriseServerLicense(license, password, settings);
        // TODO: test validations
    }

    /**
     * Create a global webhook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminCreateGlobalWebhookTest() throws ApiException {
        String accept = null;
        EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest = null;
        GlobalHook response = api.enterpriseAdminCreateGlobalWebhook(accept, enterpriseAdminCreateGlobalWebhookRequest);
        // TODO: test validations
    }

    /**
     * Create an impersonation OAuth token
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminCreateImpersonationOAuthTokenTest() throws ApiException {
        String username = null;
        EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest = null;
        Authorization response = api.enterpriseAdminCreateImpersonationOAuthToken(username, enterpriseAdminCreateImpersonationOAuthTokenRequest);
        // TODO: test validations
    }

    /**
     * Create an organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminCreateOrgTest() throws ApiException {
        EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest = null;
        OrganizationSimple response = api.enterpriseAdminCreateOrg(enterpriseAdminCreateOrgRequest);
        // TODO: test validations
    }

    /**
     * Create a pre-receive environment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminCreatePreReceiveEnvironmentTest() throws ApiException {
        EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest = null;
        PreReceiveEnvironment response = api.enterpriseAdminCreatePreReceiveEnvironment(enterpriseAdminCreatePreReceiveEnvironmentRequest);
        // TODO: test validations
    }

    /**
     * Create a pre-receive hook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminCreatePreReceiveHookTest() throws ApiException {
        EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest = null;
        PreReceiveHook response = api.enterpriseAdminCreatePreReceiveHook(enterpriseAdminCreatePreReceiveHookRequest);
        // TODO: test validations
    }

    /**
     * Create a user
     *
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send &#x60;\&quot;octo_cat\&quot;&#x60; as the login, a user named &#x60;\&quot;octo-cat\&quot;&#x60; will be created.  If the login name or email address is already associated with an account, the server will return a &#x60;422&#x60; response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminCreateUserTest() throws ApiException {
        EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest = null;
        SimpleUser response = api.enterpriseAdminCreateUser(enterpriseAdminCreateUserRequest);
        // TODO: test validations
    }

    /**
     * Delete a global webhook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDeleteGlobalWebhookTest() throws ApiException {
        String accept = null;
        Integer hookId = null;
        api.enterpriseAdminDeleteGlobalWebhook(accept, hookId);
        // TODO: test validations
    }

    /**
     * Delete an impersonation OAuth token
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDeleteImpersonationOAuthTokenTest() throws ApiException {
        String username = null;
        api.enterpriseAdminDeleteImpersonationOAuthToken(username);
        // TODO: test validations
    }

    /**
     * Delete a personal access token
     *
     * Deletes a personal access token. Returns a &#x60;403 - Forbidden&#x60; status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDeletePersonalAccessTokenTest() throws ApiException {
        Integer tokenId = null;
        api.enterpriseAdminDeletePersonalAccessToken(tokenId);
        // TODO: test validations
    }

    /**
     * Delete a pre-receive environment
     *
     * If you attempt to delete an environment that cannot be deleted, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDeletePreReceiveEnvironmentTest() throws ApiException {
        Integer preReceiveEnvironmentId = null;
        api.enterpriseAdminDeletePreReceiveEnvironment(preReceiveEnvironmentId);
        // TODO: test validations
    }

    /**
     * Delete a pre-receive hook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDeletePreReceiveHookTest() throws ApiException {
        Integer preReceiveHookId = null;
        api.enterpriseAdminDeletePreReceiveHook(preReceiveHookId);
        // TODO: test validations
    }

    /**
     * Delete a public key
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDeletePublicKeyTest() throws ApiException {
        String keyIds = null;
        api.enterpriseAdminDeletePublicKey(keyIds);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDeleteUserTest() throws ApiException {
        String username = null;
        api.enterpriseAdminDeleteUser(username);
        // TODO: test validations
    }

    /**
     * Demote a site administrator
     *
     * You can demote any user account except your own.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminDemoteSiteAdministratorTest() throws ApiException {
        String username = null;
        api.enterpriseAdminDemoteSiteAdministrator(username);
        // TODO: test validations
    }

    /**
     * Enable or disable maintenance mode
     *
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminEnableOrDisableMaintenanceModeTest() throws ApiException {
        String maintenance = null;
        MaintenanceStatus response = api.enterpriseAdminEnableOrDisableMaintenanceMode(maintenance);
        // TODO: test validations
    }

    /**
     * Get all authorized SSH keys
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetAllAuthorizedSshKeysTest() throws ApiException {
        List<SshKey> response = api.enterpriseAdminGetAllAuthorizedSshKeys();
        // TODO: test validations
    }

    /**
     * Get all statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetAllStatsTest() throws ApiException {
        EnterpriseOverview response = api.enterpriseAdminGetAllStats();
        // TODO: test validations
    }

    /**
     * Get comment statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetCommentStatsTest() throws ApiException {
        EnterpriseCommentOverview response = api.enterpriseAdminGetCommentStats();
        // TODO: test validations
    }

    /**
     * Get the configuration status
     *
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | &#x60;PENDING&#x60;     | The job has not started yet       | | &#x60;CONFIGURING&#x60; | The job is running                | | &#x60;DONE&#x60;        | The job has finished correctly    | | &#x60;FAILED&#x60;      | The job has finished unexpectedly |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetConfigurationStatusTest() throws ApiException {
        ConfigurationStatus response = api.enterpriseAdminGetConfigurationStatus();
        // TODO: test validations
    }

    /**
     * Get the download status for a pre-receive environment
     *
     * In addition to seeing the download status at the \&quot;[Get a pre-receive environment](#get-a-pre-receive-environment)\&quot; endpoint, there is also this separate endpoint for just the download status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentTest() throws ApiException {
        Integer preReceiveEnvironmentId = null;
        PreReceiveEnvironmentDownloadStatus response = api.enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(preReceiveEnvironmentId);
        // TODO: test validations
    }

    /**
     * Get a global webhook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetGlobalWebhookTest() throws ApiException {
        String accept = null;
        Integer hookId = null;
        GlobalHook response = api.enterpriseAdminGetGlobalWebhook(accept, hookId);
        // TODO: test validations
    }

    /**
     * Get hooks statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetHooksStatsTest() throws ApiException {
        EnterpriseHookOverview response = api.enterpriseAdminGetHooksStats();
        // TODO: test validations
    }

    /**
     * Get issue statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetIssueStatsTest() throws ApiException {
        EnterpriseIssueOverview response = api.enterpriseAdminGetIssueStats();
        // TODO: test validations
    }

    /**
     * Get license information
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetLicenseInformationTest() throws ApiException {
        LicenseInfo response = api.enterpriseAdminGetLicenseInformation();
        // TODO: test validations
    }

    /**
     * Get the maintenance status
     *
     * Check your installation&#39;s maintenance status:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetMaintenanceStatusTest() throws ApiException {
        MaintenanceStatus response = api.enterpriseAdminGetMaintenanceStatus();
        // TODO: test validations
    }

    /**
     * Get milestone statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetMilestoneStatsTest() throws ApiException {
        EnterpriseMilestoneOverview response = api.enterpriseAdminGetMilestoneStats();
        // TODO: test validations
    }

    /**
     * Get organization statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetOrgStatsTest() throws ApiException {
        EnterpriseOrganizationOverview response = api.enterpriseAdminGetOrgStats();
        // TODO: test validations
    }

    /**
     * Get pages statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetPagesStatsTest() throws ApiException {
        EnterprisePageOverview response = api.enterpriseAdminGetPagesStats();
        // TODO: test validations
    }

    /**
     * Get a pre-receive environment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetPreReceiveEnvironmentTest() throws ApiException {
        Integer preReceiveEnvironmentId = null;
        PreReceiveEnvironment response = api.enterpriseAdminGetPreReceiveEnvironment(preReceiveEnvironmentId);
        // TODO: test validations
    }

    /**
     * Get a pre-receive hook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetPreReceiveHookTest() throws ApiException {
        Integer preReceiveHookId = null;
        PreReceiveHook response = api.enterpriseAdminGetPreReceiveHook(preReceiveHookId);
        // TODO: test validations
    }

    /**
     * Get a pre-receive hook for an organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetPreReceiveHookForOrgTest() throws ApiException {
        String org = null;
        Integer preReceiveHookId = null;
        OrgPreReceiveHook response = api.enterpriseAdminGetPreReceiveHookForOrg(org, preReceiveHookId);
        // TODO: test validations
    }

    /**
     * Get a pre-receive hook for a repository
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetPreReceiveHookForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer preReceiveHookId = null;
        RepositoryPreReceiveHook response = api.enterpriseAdminGetPreReceiveHookForRepo(owner, repo, preReceiveHookId);
        // TODO: test validations
    }

    /**
     * Get pull request statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetPullRequestStatsTest() throws ApiException {
        EnterprisePullRequestOverview response = api.enterpriseAdminGetPullRequestStats();
        // TODO: test validations
    }

    /**
     * Get repository statistics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetRepoStatsTest() throws ApiException {
        EnterpriseRepositoryOverview response = api.enterpriseAdminGetRepoStats();
        // TODO: test validations
    }

    /**
     * Get settings
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetSettingsTest() throws ApiException {
        EnterpriseSettings response = api.enterpriseAdminGetSettings();
        // TODO: test validations
    }

    /**
     * Get users statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminGetUserStatsTest() throws ApiException {
        EnterpriseUserOverview response = api.enterpriseAdminGetUserStats();
        // TODO: test validations
    }

    /**
     * List global webhooks
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminListGlobalWebhooksTest() throws ApiException {
        String accept = null;
        Integer perPage = null;
        Integer page = null;
        List<GlobalHook> response = api.enterpriseAdminListGlobalWebhooks(accept, perPage, page);
        // TODO: test validations
    }

    /**
     * List personal access tokens
     *
     * Lists personal access tokens for all users, including admin users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminListPersonalAccessTokensTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        List<Authorization> response = api.enterpriseAdminListPersonalAccessTokens(perPage, page);
        // TODO: test validations
    }

    /**
     * List pre-receive environments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminListPreReceiveEnvironmentsTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        String direction = null;
        String sort = null;
        List<PreReceiveEnvironment> response = api.enterpriseAdminListPreReceiveEnvironments(perPage, page, direction, sort);
        // TODO: test validations
    }

    /**
     * List pre-receive hooks
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminListPreReceiveHooksTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        String direction = null;
        String sort = null;
        List<PreReceiveHook> response = api.enterpriseAdminListPreReceiveHooks(perPage, page, direction, sort);
        // TODO: test validations
    }

    /**
     * List pre-receive hooks for an organization
     *
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminListPreReceiveHooksForOrgTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        String direction = null;
        String sort = null;
        List<OrgPreReceiveHook> response = api.enterpriseAdminListPreReceiveHooksForOrg(org, perPage, page, direction, sort);
        // TODO: test validations
    }

    /**
     * List pre-receive hooks for a repository
     *
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminListPreReceiveHooksForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        String direction = null;
        String sort = null;
        List<RepositoryPreReceiveHook> response = api.enterpriseAdminListPreReceiveHooksForRepo(owner, repo, perPage, page, direction, sort);
        // TODO: test validations
    }

    /**
     * List public keys
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminListPublicKeysTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        String direction = null;
        String sort = null;
        String since = null;
        List<PublicKeyFull> response = api.enterpriseAdminListPublicKeys(perPage, page, direction, sort, since);
        // TODO: test validations
    }

    /**
     * Ping a global webhook
     *
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.19/webhooks/#ping-event) to be sent to the webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminPingGlobalWebhookTest() throws ApiException {
        String accept = null;
        Integer hookId = null;
        api.enterpriseAdminPingGlobalWebhook(accept, hookId);
        // TODO: test validations
    }

    /**
     * Promote a user to be a site administrator
     *
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.19/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminPromoteUserToBeSiteAdministratorTest() throws ApiException {
        String username = null;
        api.enterpriseAdminPromoteUserToBeSiteAdministrator(username);
        // TODO: test validations
    }

    /**
     * Remove an authorized SSH key
     *
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminRemoveAuthorizedSshKeyTest() throws ApiException {
        String authorizedKey = null;
        List<SshKey> response = api.enterpriseAdminRemoveAuthorizedSshKey(authorizedKey);
        // TODO: test validations
    }

    /**
     * Remove pre-receive hook enforcement for an organization
     *
     * Removes any overrides for this hook at the org level for this org.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminRemovePreReceiveHookEnforcementForOrgTest() throws ApiException {
        String org = null;
        Integer preReceiveHookId = null;
        OrgPreReceiveHook response = api.enterpriseAdminRemovePreReceiveHookEnforcementForOrg(org, preReceiveHookId);
        // TODO: test validations
    }

    /**
     * Remove pre-receive hook enforcement for a repository
     *
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminRemovePreReceiveHookEnforcementForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer preReceiveHookId = null;
        RepositoryPreReceiveHook response = api.enterpriseAdminRemovePreReceiveHookEnforcementForRepo(owner, repo, preReceiveHookId);
        // TODO: test validations
    }

    /**
     * Set settings
     *
     * For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.19/rest/reference/enterprise-admin#get-settings).  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminSetSettingsTest() throws ApiException {
        String settings = null;
        api.enterpriseAdminSetSettings(settings);
        // TODO: test validations
    }

    /**
     * Start a configuration process
     *
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminStartConfigurationProcessTest() throws ApiException {
        api.enterpriseAdminStartConfigurationProcess();
        // TODO: test validations
    }

    /**
     * Start a pre-receive environment download
     *
     * Triggers a new download of the environment tarball from the environment&#39;s &#x60;image_url&#x60;. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminStartPreReceiveEnvironmentDownloadTest() throws ApiException {
        Integer preReceiveEnvironmentId = null;
        PreReceiveEnvironmentDownloadStatus response = api.enterpriseAdminStartPreReceiveEnvironmentDownload(preReceiveEnvironmentId);
        // TODO: test validations
    }

    /**
     * Suspend a user
     *
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a &#x60;403&#x60; response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.19/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminSuspendUserTest() throws ApiException {
        String username = null;
        EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest = null;
        api.enterpriseAdminSuspendUser(username, enterpriseAdminSuspendUserRequest);
        // TODO: test validations
    }

    /**
     * Sync LDAP mapping for a team
     *
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminSyncLdapMappingForTeamTest() throws ApiException {
        Integer teamId = null;
        EnterpriseAdminSyncLdapMappingForTeam201Response response = api.enterpriseAdminSyncLdapMappingForTeam(teamId);
        // TODO: test validations
    }

    /**
     * Sync LDAP mapping for a user
     *
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminSyncLdapMappingForUserTest() throws ApiException {
        String username = null;
        EnterpriseAdminSyncLdapMappingForTeam201Response response = api.enterpriseAdminSyncLdapMappingForUser(username);
        // TODO: test validations
    }

    /**
     * Unsuspend a user
     *
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a &#x60;403&#x60; response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUnsuspendUserTest() throws ApiException {
        String username = null;
        EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest = null;
        api.enterpriseAdminUnsuspendUser(username, enterpriseAdminUnsuspendUserRequest);
        // TODO: test validations
    }

    /**
     * Update a global webhook
     *
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdateGlobalWebhookTest() throws ApiException {
        String accept = null;
        Integer hookId = null;
        EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest = null;
        GlobalHook2 response = api.enterpriseAdminUpdateGlobalWebhook(accept, hookId, enterpriseAdminUpdateGlobalWebhookRequest);
        // TODO: test validations
    }

    /**
     * Update LDAP mapping for a team
     *
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@2.19/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.  If you pass the &#x60;hellcat-preview&#x60; media type, you can also update the LDAP mapping of a child team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdateLdapMappingForTeamTest() throws ApiException {
        Integer teamId = null;
        EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest = null;
        LdapMappingTeam response = api.enterpriseAdminUpdateLdapMappingForTeam(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest);
        // TODO: test validations
    }

    /**
     * Update LDAP mapping for a user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdateLdapMappingForUserTest() throws ApiException {
        String username = null;
        EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest = null;
        LdapMappingUser response = api.enterpriseAdminUpdateLdapMappingForUser(username, enterpriseAdminUpdateLdapMappingForTeamRequest);
        // TODO: test validations
    }

    /**
     * Update an organization name
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdateOrgNameTest() throws ApiException {
        String org = null;
        EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest = null;
        EnterpriseAdminUpdateOrgName202Response response = api.enterpriseAdminUpdateOrgName(org, enterpriseAdminUpdateOrgNameRequest);
        // TODO: test validations
    }

    /**
     * Update a pre-receive environment
     *
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a &#x60;422 Unprocessable Entity&#x60; response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdatePreReceiveEnvironmentTest() throws ApiException {
        Integer preReceiveEnvironmentId = null;
        EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest = null;
        PreReceiveEnvironment response = api.enterpriseAdminUpdatePreReceiveEnvironment(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest);
        // TODO: test validations
    }

    /**
     * Update a pre-receive hook
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdatePreReceiveHookTest() throws ApiException {
        Integer preReceiveHookId = null;
        EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest = null;
        PreReceiveHook response = api.enterpriseAdminUpdatePreReceiveHook(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest);
        // TODO: test validations
    }

    /**
     * Update pre-receive hook enforcement for an organization
     *
     * For pre-receive hooks which are allowed to be configured at the org level, you can set &#x60;enforcement&#x60; and &#x60;allow_downstream_configuration&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdatePreReceiveHookEnforcementForOrgTest() throws ApiException {
        String org = null;
        Integer preReceiveHookId = null;
        EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest = null;
        OrgPreReceiveHook response = api.enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest);
        // TODO: test validations
    }

    /**
     * Update pre-receive hook enforcement for a repository
     *
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set &#x60;enforcement&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdatePreReceiveHookEnforcementForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer preReceiveHookId = null;
        EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest = null;
        RepositoryPreReceiveHook response = api.enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest);
        // TODO: test validations
    }

    /**
     * Update the username for a user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpdateUsernameForUserTest() throws ApiException {
        String username = null;
        EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest = null;
        EnterpriseAdminUpdateOrgName202Response response = api.enterpriseAdminUpdateUsernameForUser(username, enterpriseAdminUpdateUsernameForUserRequest);
        // TODO: test validations
    }

    /**
     * Upgrade a license
     *
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseAdminUpgradeLicenseTest() throws ApiException {
        String license = null;
        api.enterpriseAdminUpgradeLicense(license);
        // TODO: test validations
    }

    /**
     * Get gist statistics
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseStatsGistsGetTest() throws ApiException {
        EnterpriseGistOverview response = api.enterpriseStatsGistsGet();
        // TODO: test validations
    }

}
