/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinkWithType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FeedLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeedLinks {
  public static final String SERIALIZED_NAME_CURRENT_USER = "current_user";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER)
  private LinkWithType currentUser;

  public static final String SERIALIZED_NAME_CURRENT_USER_ACTOR = "current_user_actor";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ACTOR)
  private LinkWithType currentUserActor;

  public static final String SERIALIZED_NAME_CURRENT_USER_ORGANIZATION = "current_user_organization";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ORGANIZATION)
  private LinkWithType currentUserOrganization;

  public static final String SERIALIZED_NAME_CURRENT_USER_ORGANIZATIONS = "current_user_organizations";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_ORGANIZATIONS)
  private List<LinkWithType> currentUserOrganizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_USER_PUBLIC = "current_user_public";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_PUBLIC)
  private LinkWithType currentUserPublic;

  public static final String SERIALIZED_NAME_SECURITY_ADVISORIES = "security_advisories";
  @SerializedName(SERIALIZED_NAME_SECURITY_ADVISORIES)
  private LinkWithType securityAdvisories;

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  private LinkWithType timeline;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private LinkWithType user;

  public FeedLinks() {
  }

  public FeedLinks currentUser(LinkWithType currentUser) {
    this.currentUser = currentUser;
    return this;
  }

  /**
   * Get currentUser
   * @return currentUser
   */
  @javax.annotation.Nullable
  public LinkWithType getCurrentUser() {
    return currentUser;
  }

  public void setCurrentUser(LinkWithType currentUser) {
    this.currentUser = currentUser;
  }


  public FeedLinks currentUserActor(LinkWithType currentUserActor) {
    this.currentUserActor = currentUserActor;
    return this;
  }

  /**
   * Get currentUserActor
   * @return currentUserActor
   */
  @javax.annotation.Nullable
  public LinkWithType getCurrentUserActor() {
    return currentUserActor;
  }

  public void setCurrentUserActor(LinkWithType currentUserActor) {
    this.currentUserActor = currentUserActor;
  }


  public FeedLinks currentUserOrganization(LinkWithType currentUserOrganization) {
    this.currentUserOrganization = currentUserOrganization;
    return this;
  }

  /**
   * Get currentUserOrganization
   * @return currentUserOrganization
   */
  @javax.annotation.Nullable
  public LinkWithType getCurrentUserOrganization() {
    return currentUserOrganization;
  }

  public void setCurrentUserOrganization(LinkWithType currentUserOrganization) {
    this.currentUserOrganization = currentUserOrganization;
  }


  public FeedLinks currentUserOrganizations(List<LinkWithType> currentUserOrganizations) {
    this.currentUserOrganizations = currentUserOrganizations;
    return this;
  }

  public FeedLinks addCurrentUserOrganizationsItem(LinkWithType currentUserOrganizationsItem) {
    if (this.currentUserOrganizations == null) {
      this.currentUserOrganizations = new ArrayList<>();
    }
    this.currentUserOrganizations.add(currentUserOrganizationsItem);
    return this;
  }

  /**
   * Get currentUserOrganizations
   * @return currentUserOrganizations
   */
  @javax.annotation.Nullable
  public List<LinkWithType> getCurrentUserOrganizations() {
    return currentUserOrganizations;
  }

  public void setCurrentUserOrganizations(List<LinkWithType> currentUserOrganizations) {
    this.currentUserOrganizations = currentUserOrganizations;
  }


  public FeedLinks currentUserPublic(LinkWithType currentUserPublic) {
    this.currentUserPublic = currentUserPublic;
    return this;
  }

  /**
   * Get currentUserPublic
   * @return currentUserPublic
   */
  @javax.annotation.Nullable
  public LinkWithType getCurrentUserPublic() {
    return currentUserPublic;
  }

  public void setCurrentUserPublic(LinkWithType currentUserPublic) {
    this.currentUserPublic = currentUserPublic;
  }


  public FeedLinks securityAdvisories(LinkWithType securityAdvisories) {
    this.securityAdvisories = securityAdvisories;
    return this;
  }

  /**
   * Get securityAdvisories
   * @return securityAdvisories
   */
  @javax.annotation.Nullable
  public LinkWithType getSecurityAdvisories() {
    return securityAdvisories;
  }

  public void setSecurityAdvisories(LinkWithType securityAdvisories) {
    this.securityAdvisories = securityAdvisories;
  }


  public FeedLinks timeline(LinkWithType timeline) {
    this.timeline = timeline;
    return this;
  }

  /**
   * Get timeline
   * @return timeline
   */
  @javax.annotation.Nonnull
  public LinkWithType getTimeline() {
    return timeline;
  }

  public void setTimeline(LinkWithType timeline) {
    this.timeline = timeline;
  }


  public FeedLinks user(LinkWithType user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public LinkWithType getUser() {
    return user;
  }

  public void setUser(LinkWithType user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedLinks feedLinks = (FeedLinks) o;
    return Objects.equals(this.currentUser, feedLinks.currentUser) &&
        Objects.equals(this.currentUserActor, feedLinks.currentUserActor) &&
        Objects.equals(this.currentUserOrganization, feedLinks.currentUserOrganization) &&
        Objects.equals(this.currentUserOrganizations, feedLinks.currentUserOrganizations) &&
        Objects.equals(this.currentUserPublic, feedLinks.currentUserPublic) &&
        Objects.equals(this.securityAdvisories, feedLinks.securityAdvisories) &&
        Objects.equals(this.timeline, feedLinks.timeline) &&
        Objects.equals(this.user, feedLinks.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentUser, currentUserActor, currentUserOrganization, currentUserOrganizations, currentUserPublic, securityAdvisories, timeline, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedLinks {\n");
    sb.append("    currentUser: ").append(toIndentedString(currentUser)).append("\n");
    sb.append("    currentUserActor: ").append(toIndentedString(currentUserActor)).append("\n");
    sb.append("    currentUserOrganization: ").append(toIndentedString(currentUserOrganization)).append("\n");
    sb.append("    currentUserOrganizations: ").append(toIndentedString(currentUserOrganizations)).append("\n");
    sb.append("    currentUserPublic: ").append(toIndentedString(currentUserPublic)).append("\n");
    sb.append("    securityAdvisories: ").append(toIndentedString(securityAdvisories)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_user");
    openapiFields.add("current_user_actor");
    openapiFields.add("current_user_organization");
    openapiFields.add("current_user_organizations");
    openapiFields.add("current_user_public");
    openapiFields.add("security_advisories");
    openapiFields.add("timeline");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timeline");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeedLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedLinks is not found in the empty JSON string", FeedLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeedLinks.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `current_user`
      if (jsonObj.get("current_user") != null && !jsonObj.get("current_user").isJsonNull()) {
        LinkWithType.validateJsonElement(jsonObj.get("current_user"));
      }
      // validate the optional field `current_user_actor`
      if (jsonObj.get("current_user_actor") != null && !jsonObj.get("current_user_actor").isJsonNull()) {
        LinkWithType.validateJsonElement(jsonObj.get("current_user_actor"));
      }
      // validate the optional field `current_user_organization`
      if (jsonObj.get("current_user_organization") != null && !jsonObj.get("current_user_organization").isJsonNull()) {
        LinkWithType.validateJsonElement(jsonObj.get("current_user_organization"));
      }
      if (jsonObj.get("current_user_organizations") != null && !jsonObj.get("current_user_organizations").isJsonNull()) {
        JsonArray jsonArraycurrentUserOrganizations = jsonObj.getAsJsonArray("current_user_organizations");
        if (jsonArraycurrentUserOrganizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("current_user_organizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `current_user_organizations` to be an array in the JSON string but got `%s`", jsonObj.get("current_user_organizations").toString()));
          }

          // validate the optional field `current_user_organizations` (array)
          for (int i = 0; i < jsonArraycurrentUserOrganizations.size(); i++) {
            LinkWithType.validateJsonElement(jsonArraycurrentUserOrganizations.get(i));
          };
        }
      }
      // validate the optional field `current_user_public`
      if (jsonObj.get("current_user_public") != null && !jsonObj.get("current_user_public").isJsonNull()) {
        LinkWithType.validateJsonElement(jsonObj.get("current_user_public"));
      }
      // validate the optional field `security_advisories`
      if (jsonObj.get("security_advisories") != null && !jsonObj.get("security_advisories").isJsonNull()) {
        LinkWithType.validateJsonElement(jsonObj.get("security_advisories"));
      }
      // validate the required field `timeline`
      LinkWithType.validateJsonElement(jsonObj.get("timeline"));
      // validate the required field `user`
      LinkWithType.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedLinks>() {
           @Override
           public void write(JsonWriter out, FeedLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeedLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeedLinks
   * @throws IOException if the JSON string is invalid with respect to FeedLinks
   */
  public static FeedLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedLinks.class);
  }

  /**
   * Convert an instance of FeedLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

