/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LicenseInfoSeats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LicenseInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseInfo {
  public static final String SERIALIZED_NAME_DAYS_UNTIL_EXPIRATION = "days_until_expiration";
  @SerializedName(SERIALIZED_NAME_DAYS_UNTIL_EXPIRATION)
  private Integer daysUntilExpiration;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expire_at";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private String expireAt;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private LicenseInfoSeats seats;

  public static final String SERIALIZED_NAME_SEATS_AVAILABLE = "seats_available";
  @SerializedName(SERIALIZED_NAME_SEATS_AVAILABLE)
  private LicenseInfoSeats seatsAvailable;

  public static final String SERIALIZED_NAME_SEATS_USED = "seats_used";
  @SerializedName(SERIALIZED_NAME_SEATS_USED)
  private Integer seatsUsed;

  public LicenseInfo() {
  }

  public LicenseInfo daysUntilExpiration(Integer daysUntilExpiration) {
    this.daysUntilExpiration = daysUntilExpiration;
    return this;
  }

  /**
   * Get daysUntilExpiration
   * @return daysUntilExpiration
   */
  @javax.annotation.Nullable
  public Integer getDaysUntilExpiration() {
    return daysUntilExpiration;
  }

  public void setDaysUntilExpiration(Integer daysUntilExpiration) {
    this.daysUntilExpiration = daysUntilExpiration;
  }


  public LicenseInfo expireAt(String expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Get expireAt
   * @return expireAt
   */
  @javax.annotation.Nullable
  public String getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(String expireAt) {
    this.expireAt = expireAt;
  }


  public LicenseInfo kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LicenseInfo seats(LicenseInfoSeats seats) {
    this.seats = seats;
    return this;
  }

  /**
   * Get seats
   * @return seats
   */
  @javax.annotation.Nullable
  public LicenseInfoSeats getSeats() {
    return seats;
  }

  public void setSeats(LicenseInfoSeats seats) {
    this.seats = seats;
  }


  public LicenseInfo seatsAvailable(LicenseInfoSeats seatsAvailable) {
    this.seatsAvailable = seatsAvailable;
    return this;
  }

  /**
   * Get seatsAvailable
   * @return seatsAvailable
   */
  @javax.annotation.Nullable
  public LicenseInfoSeats getSeatsAvailable() {
    return seatsAvailable;
  }

  public void setSeatsAvailable(LicenseInfoSeats seatsAvailable) {
    this.seatsAvailable = seatsAvailable;
  }


  public LicenseInfo seatsUsed(Integer seatsUsed) {
    this.seatsUsed = seatsUsed;
    return this;
  }

  /**
   * Get seatsUsed
   * @return seatsUsed
   */
  @javax.annotation.Nullable
  public Integer getSeatsUsed() {
    return seatsUsed;
  }

  public void setSeatsUsed(Integer seatsUsed) {
    this.seatsUsed = seatsUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseInfo licenseInfo = (LicenseInfo) o;
    return Objects.equals(this.daysUntilExpiration, licenseInfo.daysUntilExpiration) &&
        Objects.equals(this.expireAt, licenseInfo.expireAt) &&
        Objects.equals(this.kind, licenseInfo.kind) &&
        Objects.equals(this.seats, licenseInfo.seats) &&
        Objects.equals(this.seatsAvailable, licenseInfo.seatsAvailable) &&
        Objects.equals(this.seatsUsed, licenseInfo.seatsUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysUntilExpiration, expireAt, kind, seats, seatsAvailable, seatsUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseInfo {\n");
    sb.append("    daysUntilExpiration: ").append(toIndentedString(daysUntilExpiration)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("    seatsAvailable: ").append(toIndentedString(seatsAvailable)).append("\n");
    sb.append("    seatsUsed: ").append(toIndentedString(seatsUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("days_until_expiration");
    openapiFields.add("expire_at");
    openapiFields.add("kind");
    openapiFields.add("seats");
    openapiFields.add("seats_available");
    openapiFields.add("seats_used");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseInfo is not found in the empty JSON string", LicenseInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expire_at") != null && !jsonObj.get("expire_at").isJsonNull()) && !jsonObj.get("expire_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expire_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expire_at").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `seats`
      if (jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) {
        LicenseInfoSeats.validateJsonElement(jsonObj.get("seats"));
      }
      // validate the optional field `seats_available`
      if (jsonObj.get("seats_available") != null && !jsonObj.get("seats_available").isJsonNull()) {
        LicenseInfoSeats.validateJsonElement(jsonObj.get("seats_available"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseInfo>() {
           @Override
           public void write(JsonWriter out, LicenseInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseInfo
   * @throws IOException if the JSON string is invalid with respect to LicenseInfo
   */
  public static LicenseInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseInfo.class);
  }

  /**
   * Convert an instance of LicenseInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

