/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MaintenanceStatusConnectionServicesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MaintenanceStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MaintenanceStatus {
  public static final String SERIALIZED_NAME_CONNECTION_SERVICES = "connection_services";
  @SerializedName(SERIALIZED_NAME_CONNECTION_SERVICES)
  private List<MaintenanceStatusConnectionServicesInner> connectionServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduled_time";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private String scheduledTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public MaintenanceStatus() {
  }

  public MaintenanceStatus connectionServices(List<MaintenanceStatusConnectionServicesInner> connectionServices) {
    this.connectionServices = connectionServices;
    return this;
  }

  public MaintenanceStatus addConnectionServicesItem(MaintenanceStatusConnectionServicesInner connectionServicesItem) {
    if (this.connectionServices == null) {
      this.connectionServices = new ArrayList<>();
    }
    this.connectionServices.add(connectionServicesItem);
    return this;
  }

  /**
   * Get connectionServices
   * @return connectionServices
   */
  @javax.annotation.Nullable
  public List<MaintenanceStatusConnectionServicesInner> getConnectionServices() {
    return connectionServices;
  }

  public void setConnectionServices(List<MaintenanceStatusConnectionServicesInner> connectionServices) {
    this.connectionServices = connectionServices;
  }


  public MaintenanceStatus scheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Get scheduledTime
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public String getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public MaintenanceStatus status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceStatus maintenanceStatus = (MaintenanceStatus) o;
    return Objects.equals(this.connectionServices, maintenanceStatus.connectionServices) &&
        Objects.equals(this.scheduledTime, maintenanceStatus.scheduledTime) &&
        Objects.equals(this.status, maintenanceStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionServices, scheduledTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceStatus {\n");
    sb.append("    connectionServices: ").append(toIndentedString(connectionServices)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection_services");
    openapiFields.add("scheduled_time");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MaintenanceStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaintenanceStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaintenanceStatus is not found in the empty JSON string", MaintenanceStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaintenanceStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaintenanceStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("connection_services") != null && !jsonObj.get("connection_services").isJsonNull()) {
        JsonArray jsonArrayconnectionServices = jsonObj.getAsJsonArray("connection_services");
        if (jsonArrayconnectionServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connection_services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connection_services` to be an array in the JSON string but got `%s`", jsonObj.get("connection_services").toString()));
          }

          // validate the optional field `connection_services` (array)
          for (int i = 0; i < jsonArrayconnectionServices.size(); i++) {
            MaintenanceStatusConnectionServicesInner.validateJsonElement(jsonArrayconnectionServices.get(i));
          };
        }
      }
      if ((jsonObj.get("scheduled_time") != null && !jsonObj.get("scheduled_time").isJsonNull()) && !jsonObj.get("scheduled_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_time").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaintenanceStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaintenanceStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaintenanceStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaintenanceStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<MaintenanceStatus>() {
           @Override
           public void write(JsonWriter out, MaintenanceStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaintenanceStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MaintenanceStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MaintenanceStatus
   * @throws IOException if the JSON string is invalid with respect to MaintenanceStatus
   */
  public static MaintenanceStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaintenanceStatus.class);
  }

  /**
   * Convert an instance of MaintenanceStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

