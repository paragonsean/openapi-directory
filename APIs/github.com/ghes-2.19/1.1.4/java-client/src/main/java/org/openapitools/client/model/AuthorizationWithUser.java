/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizationWithUserApp;
import org.openapitools.client.model.AuthorizationWithUserUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthorizationWithUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthorizationWithUser {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private AuthorizationWithUserApp app;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_HASHED_TOKEN = "hashed_token";
  @SerializedName(SERIALIZED_NAME_HASHED_TOKEN)
  private String hashedToken;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_NOTE_URL = "note_url";
  @SerializedName(SERIALIZED_NAME_NOTE_URL)
  private String noteUrl;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TOKEN_LAST_EIGHT = "token_last_eight";
  @SerializedName(SERIALIZED_NAME_TOKEN_LAST_EIGHT)
  private String tokenLastEight;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private AuthorizationWithUserUser user;

  public AuthorizationWithUser() {
  }

  public AuthorizationWithUser app(AuthorizationWithUserApp app) {
    this.app = app;
    return this;
  }

  /**
   * Get app
   * @return app
   */
  @javax.annotation.Nullable
  public AuthorizationWithUserApp getApp() {
    return app;
  }

  public void setApp(AuthorizationWithUserApp app) {
    this.app = app;
  }


  public AuthorizationWithUser createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public AuthorizationWithUser fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Get fingerprint
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public AuthorizationWithUser hashedToken(String hashedToken) {
    this.hashedToken = hashedToken;
    return this;
  }

  /**
   * Get hashedToken
   * @return hashedToken
   */
  @javax.annotation.Nullable
  public String getHashedToken() {
    return hashedToken;
  }

  public void setHashedToken(String hashedToken) {
    this.hashedToken = hashedToken;
  }


  public AuthorizationWithUser id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public AuthorizationWithUser note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public AuthorizationWithUser noteUrl(String noteUrl) {
    this.noteUrl = noteUrl;
    return this;
  }

  /**
   * Get noteUrl
   * @return noteUrl
   */
  @javax.annotation.Nullable
  public String getNoteUrl() {
    return noteUrl;
  }

  public void setNoteUrl(String noteUrl) {
    this.noteUrl = noteUrl;
  }


  public AuthorizationWithUser scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public AuthorizationWithUser addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public AuthorizationWithUser token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public AuthorizationWithUser tokenLastEight(String tokenLastEight) {
    this.tokenLastEight = tokenLastEight;
    return this;
  }

  /**
   * Get tokenLastEight
   * @return tokenLastEight
   */
  @javax.annotation.Nullable
  public String getTokenLastEight() {
    return tokenLastEight;
  }

  public void setTokenLastEight(String tokenLastEight) {
    this.tokenLastEight = tokenLastEight;
  }


  public AuthorizationWithUser updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AuthorizationWithUser url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public AuthorizationWithUser user(AuthorizationWithUserUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public AuthorizationWithUserUser getUser() {
    return user;
  }

  public void setUser(AuthorizationWithUserUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationWithUser authorizationWithUser = (AuthorizationWithUser) o;
    return Objects.equals(this.app, authorizationWithUser.app) &&
        Objects.equals(this.createdAt, authorizationWithUser.createdAt) &&
        Objects.equals(this.fingerprint, authorizationWithUser.fingerprint) &&
        Objects.equals(this.hashedToken, authorizationWithUser.hashedToken) &&
        Objects.equals(this.id, authorizationWithUser.id) &&
        Objects.equals(this.note, authorizationWithUser.note) &&
        Objects.equals(this.noteUrl, authorizationWithUser.noteUrl) &&
        Objects.equals(this.scopes, authorizationWithUser.scopes) &&
        Objects.equals(this.token, authorizationWithUser.token) &&
        Objects.equals(this.tokenLastEight, authorizationWithUser.tokenLastEight) &&
        Objects.equals(this.updatedAt, authorizationWithUser.updatedAt) &&
        Objects.equals(this.url, authorizationWithUser.url) &&
        Objects.equals(this.user, authorizationWithUser.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, createdAt, fingerprint, hashedToken, id, note, noteUrl, scopes, token, tokenLastEight, updatedAt, url, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationWithUser {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    hashedToken: ").append(toIndentedString(hashedToken)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    noteUrl: ").append(toIndentedString(noteUrl)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    tokenLastEight: ").append(toIndentedString(tokenLastEight)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("created_at");
    openapiFields.add("fingerprint");
    openapiFields.add("hashed_token");
    openapiFields.add("id");
    openapiFields.add("note");
    openapiFields.add("note_url");
    openapiFields.add("scopes");
    openapiFields.add("token");
    openapiFields.add("token_last_eight");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizationWithUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizationWithUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizationWithUser is not found in the empty JSON string", AuthorizationWithUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizationWithUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizationWithUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `app`
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) {
        AuthorizationWithUserApp.validateJsonElement(jsonObj.get("app"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("hashed_token") != null && !jsonObj.get("hashed_token").isJsonNull()) && !jsonObj.get("hashed_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashed_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashed_token").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("note_url") != null && !jsonObj.get("note_url").isJsonNull()) && !jsonObj.get("note_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("token_last_eight") != null && !jsonObj.get("token_last_eight").isJsonNull()) && !jsonObj.get("token_last_eight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_last_eight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_last_eight").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        AuthorizationWithUserUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizationWithUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizationWithUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizationWithUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizationWithUser.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizationWithUser>() {
           @Override
           public void write(JsonWriter out, AuthorizationWithUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizationWithUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizationWithUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizationWithUser
   * @throws IOException if the JSON string is invalid with respect to AuthorizationWithUser
   */
  public static AuthorizationWithUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizationWithUser.class);
  }

  /**
   * Convert an instance of AuthorizationWithUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

