/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthorizationWithUserUser;
import org.openapitools.client.model.LegacyReviewCommentLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegacyReviewComment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegacyReviewComment {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private LegacyReviewCommentLinks links;

  public static final String SERIALIZED_NAME_AUTHOR_ASSOCIATION = "author_association";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ASSOCIATION)
  private String authorAssociation;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commit_id";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DIFF_HUNK = "diff_hunk";
  @SerializedName(SERIALIZED_NAME_DIFF_HUNK)
  private String diffHunk;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IN_REPLY_TO_ID = "in_reply_to_id";
  @SerializedName(SERIALIZED_NAME_IN_REPLY_TO_ID)
  private Integer inReplyToId;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_ORIGINAL_COMMIT_ID = "original_commit_id";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_COMMIT_ID)
  private String originalCommitId;

  public static final String SERIALIZED_NAME_ORIGINAL_POSITION = "original_position";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_POSITION)
  private Integer originalPosition;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_PULL_REQUEST_REVIEW_ID = "pull_request_review_id";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_REVIEW_ID)
  private Integer pullRequestReviewId;

  public static final String SERIALIZED_NAME_PULL_REQUEST_URL = "pull_request_url";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST_URL)
  private String pullRequestUrl;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private AuthorizationWithUserUser user;

  public LegacyReviewComment() {
  }

  public LegacyReviewComment links(LegacyReviewCommentLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public LegacyReviewCommentLinks getLinks() {
    return links;
  }

  public void setLinks(LegacyReviewCommentLinks links) {
    this.links = links;
  }


  public LegacyReviewComment authorAssociation(String authorAssociation) {
    this.authorAssociation = authorAssociation;
    return this;
  }

  /**
   * Get authorAssociation
   * @return authorAssociation
   */
  @javax.annotation.Nullable
  public String getAuthorAssociation() {
    return authorAssociation;
  }

  public void setAuthorAssociation(String authorAssociation) {
    this.authorAssociation = authorAssociation;
  }


  public LegacyReviewComment body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public LegacyReviewComment commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public LegacyReviewComment createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public LegacyReviewComment diffHunk(String diffHunk) {
    this.diffHunk = diffHunk;
    return this;
  }

  /**
   * Get diffHunk
   * @return diffHunk
   */
  @javax.annotation.Nullable
  public String getDiffHunk() {
    return diffHunk;
  }

  public void setDiffHunk(String diffHunk) {
    this.diffHunk = diffHunk;
  }


  public LegacyReviewComment htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public LegacyReviewComment id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LegacyReviewComment inReplyToId(Integer inReplyToId) {
    this.inReplyToId = inReplyToId;
    return this;
  }

  /**
   * Get inReplyToId
   * @return inReplyToId
   */
  @javax.annotation.Nullable
  public Integer getInReplyToId() {
    return inReplyToId;
  }

  public void setInReplyToId(Integer inReplyToId) {
    this.inReplyToId = inReplyToId;
  }


  public LegacyReviewComment nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public LegacyReviewComment originalCommitId(String originalCommitId) {
    this.originalCommitId = originalCommitId;
    return this;
  }

  /**
   * Get originalCommitId
   * @return originalCommitId
   */
  @javax.annotation.Nullable
  public String getOriginalCommitId() {
    return originalCommitId;
  }

  public void setOriginalCommitId(String originalCommitId) {
    this.originalCommitId = originalCommitId;
  }


  public LegacyReviewComment originalPosition(Integer originalPosition) {
    this.originalPosition = originalPosition;
    return this;
  }

  /**
   * Get originalPosition
   * @return originalPosition
   */
  @javax.annotation.Nullable
  public Integer getOriginalPosition() {
    return originalPosition;
  }

  public void setOriginalPosition(Integer originalPosition) {
    this.originalPosition = originalPosition;
  }


  public LegacyReviewComment path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public LegacyReviewComment position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public LegacyReviewComment pullRequestReviewId(Integer pullRequestReviewId) {
    this.pullRequestReviewId = pullRequestReviewId;
    return this;
  }

  /**
   * Get pullRequestReviewId
   * @return pullRequestReviewId
   */
  @javax.annotation.Nullable
  public Integer getPullRequestReviewId() {
    return pullRequestReviewId;
  }

  public void setPullRequestReviewId(Integer pullRequestReviewId) {
    this.pullRequestReviewId = pullRequestReviewId;
  }


  public LegacyReviewComment pullRequestUrl(String pullRequestUrl) {
    this.pullRequestUrl = pullRequestUrl;
    return this;
  }

  /**
   * Get pullRequestUrl
   * @return pullRequestUrl
   */
  @javax.annotation.Nullable
  public String getPullRequestUrl() {
    return pullRequestUrl;
  }

  public void setPullRequestUrl(String pullRequestUrl) {
    this.pullRequestUrl = pullRequestUrl;
  }


  public LegacyReviewComment updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public LegacyReviewComment url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public LegacyReviewComment user(AuthorizationWithUserUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public AuthorizationWithUserUser getUser() {
    return user;
  }

  public void setUser(AuthorizationWithUserUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegacyReviewComment legacyReviewComment = (LegacyReviewComment) o;
    return Objects.equals(this.links, legacyReviewComment.links) &&
        Objects.equals(this.authorAssociation, legacyReviewComment.authorAssociation) &&
        Objects.equals(this.body, legacyReviewComment.body) &&
        Objects.equals(this.commitId, legacyReviewComment.commitId) &&
        Objects.equals(this.createdAt, legacyReviewComment.createdAt) &&
        Objects.equals(this.diffHunk, legacyReviewComment.diffHunk) &&
        Objects.equals(this.htmlUrl, legacyReviewComment.htmlUrl) &&
        Objects.equals(this.id, legacyReviewComment.id) &&
        Objects.equals(this.inReplyToId, legacyReviewComment.inReplyToId) &&
        Objects.equals(this.nodeId, legacyReviewComment.nodeId) &&
        Objects.equals(this.originalCommitId, legacyReviewComment.originalCommitId) &&
        Objects.equals(this.originalPosition, legacyReviewComment.originalPosition) &&
        Objects.equals(this.path, legacyReviewComment.path) &&
        Objects.equals(this.position, legacyReviewComment.position) &&
        Objects.equals(this.pullRequestReviewId, legacyReviewComment.pullRequestReviewId) &&
        Objects.equals(this.pullRequestUrl, legacyReviewComment.pullRequestUrl) &&
        Objects.equals(this.updatedAt, legacyReviewComment.updatedAt) &&
        Objects.equals(this.url, legacyReviewComment.url) &&
        Objects.equals(this.user, legacyReviewComment.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, authorAssociation, body, commitId, createdAt, diffHunk, htmlUrl, id, inReplyToId, nodeId, originalCommitId, originalPosition, path, position, pullRequestReviewId, pullRequestUrl, updatedAt, url, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegacyReviewComment {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    authorAssociation: ").append(toIndentedString(authorAssociation)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    diffHunk: ").append(toIndentedString(diffHunk)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inReplyToId: ").append(toIndentedString(inReplyToId)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    originalCommitId: ").append(toIndentedString(originalCommitId)).append("\n");
    sb.append("    originalPosition: ").append(toIndentedString(originalPosition)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    pullRequestReviewId: ").append(toIndentedString(pullRequestReviewId)).append("\n");
    sb.append("    pullRequestUrl: ").append(toIndentedString(pullRequestUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("author_association");
    openapiFields.add("body");
    openapiFields.add("commit_id");
    openapiFields.add("created_at");
    openapiFields.add("diff_hunk");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("in_reply_to_id");
    openapiFields.add("node_id");
    openapiFields.add("original_commit_id");
    openapiFields.add("original_position");
    openapiFields.add("path");
    openapiFields.add("position");
    openapiFields.add("pull_request_review_id");
    openapiFields.add("pull_request_url");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegacyReviewComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegacyReviewComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegacyReviewComment is not found in the empty JSON string", LegacyReviewComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegacyReviewComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegacyReviewComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        LegacyReviewCommentLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("author_association") != null && !jsonObj.get("author_association").isJsonNull()) && !jsonObj.get("author_association").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_association` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_association").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("commit_id") != null && !jsonObj.get("commit_id").isJsonNull()) && !jsonObj.get("commit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("diff_hunk") != null && !jsonObj.get("diff_hunk").isJsonNull()) && !jsonObj.get("diff_hunk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff_hunk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff_hunk").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("original_commit_id") != null && !jsonObj.get("original_commit_id").isJsonNull()) && !jsonObj.get("original_commit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_commit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_commit_id").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("pull_request_url") != null && !jsonObj.get("pull_request_url").isJsonNull()) && !jsonObj.get("pull_request_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pull_request_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pull_request_url").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        AuthorizationWithUserUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegacyReviewComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegacyReviewComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegacyReviewComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegacyReviewComment.class));

       return (TypeAdapter<T>) new TypeAdapter<LegacyReviewComment>() {
           @Override
           public void write(JsonWriter out, LegacyReviewComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegacyReviewComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegacyReviewComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegacyReviewComment
   * @throws IOException if the JSON string is invalid with respect to LegacyReviewComment
   */
  public static LegacyReviewComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegacyReviewComment.class);
  }

  /**
   * Convert an instance of LegacyReviewComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

