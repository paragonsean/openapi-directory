/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseSettingsEnterpriseSmtp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseSettingsEnterpriseSmtp {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private String authentication;

  public static final String SERIALIZED_NAME_DISCARD_TO_NOREPLY_ADDRESS = "discard-to-noreply-address";
  @SerializedName(SERIALIZED_NAME_DISCARD_TO_NOREPLY_ADDRESS)
  private Boolean discardToNoreplyAddress;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ENABLE_STARTTLS_AUTO = "enable_starttls_auto";
  @SerializedName(SERIALIZED_NAME_ENABLE_STARTTLS_AUTO)
  private Boolean enableStarttlsAuto;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_NOREPLY_ADDRESS = "noreply_address";
  @SerializedName(SERIALIZED_NAME_NOREPLY_ADDRESS)
  private String noreplyAddress;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private String port;

  public static final String SERIALIZED_NAME_SUPPORT_ADDRESS = "support_address";
  @SerializedName(SERIALIZED_NAME_SUPPORT_ADDRESS)
  private String supportAddress;

  public static final String SERIALIZED_NAME_SUPPORT_ADDRESS_TYPE = "support_address_type";
  @SerializedName(SERIALIZED_NAME_SUPPORT_ADDRESS_TYPE)
  private String supportAddressType;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public EnterpriseSettingsEnterpriseSmtp() {
  }

  public EnterpriseSettingsEnterpriseSmtp address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public EnterpriseSettingsEnterpriseSmtp authentication(String authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public String getAuthentication() {
    return authentication;
  }

  public void setAuthentication(String authentication) {
    this.authentication = authentication;
  }


  public EnterpriseSettingsEnterpriseSmtp discardToNoreplyAddress(Boolean discardToNoreplyAddress) {
    this.discardToNoreplyAddress = discardToNoreplyAddress;
    return this;
  }

  /**
   * Get discardToNoreplyAddress
   * @return discardToNoreplyAddress
   */
  @javax.annotation.Nullable
  public Boolean getDiscardToNoreplyAddress() {
    return discardToNoreplyAddress;
  }

  public void setDiscardToNoreplyAddress(Boolean discardToNoreplyAddress) {
    this.discardToNoreplyAddress = discardToNoreplyAddress;
  }


  public EnterpriseSettingsEnterpriseSmtp domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public EnterpriseSettingsEnterpriseSmtp enableStarttlsAuto(Boolean enableStarttlsAuto) {
    this.enableStarttlsAuto = enableStarttlsAuto;
    return this;
  }

  /**
   * Get enableStarttlsAuto
   * @return enableStarttlsAuto
   */
  @javax.annotation.Nullable
  public Boolean getEnableStarttlsAuto() {
    return enableStarttlsAuto;
  }

  public void setEnableStarttlsAuto(Boolean enableStarttlsAuto) {
    this.enableStarttlsAuto = enableStarttlsAuto;
  }


  public EnterpriseSettingsEnterpriseSmtp enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public EnterpriseSettingsEnterpriseSmtp noreplyAddress(String noreplyAddress) {
    this.noreplyAddress = noreplyAddress;
    return this;
  }

  /**
   * Get noreplyAddress
   * @return noreplyAddress
   */
  @javax.annotation.Nullable
  public String getNoreplyAddress() {
    return noreplyAddress;
  }

  public void setNoreplyAddress(String noreplyAddress) {
    this.noreplyAddress = noreplyAddress;
  }


  public EnterpriseSettingsEnterpriseSmtp password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EnterpriseSettingsEnterpriseSmtp port(String port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public String getPort() {
    return port;
  }

  public void setPort(String port) {
    this.port = port;
  }


  public EnterpriseSettingsEnterpriseSmtp supportAddress(String supportAddress) {
    this.supportAddress = supportAddress;
    return this;
  }

  /**
   * Get supportAddress
   * @return supportAddress
   */
  @javax.annotation.Nullable
  public String getSupportAddress() {
    return supportAddress;
  }

  public void setSupportAddress(String supportAddress) {
    this.supportAddress = supportAddress;
  }


  public EnterpriseSettingsEnterpriseSmtp supportAddressType(String supportAddressType) {
    this.supportAddressType = supportAddressType;
    return this;
  }

  /**
   * Get supportAddressType
   * @return supportAddressType
   */
  @javax.annotation.Nullable
  public String getSupportAddressType() {
    return supportAddressType;
  }

  public void setSupportAddressType(String supportAddressType) {
    this.supportAddressType = supportAddressType;
  }


  public EnterpriseSettingsEnterpriseSmtp userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public EnterpriseSettingsEnterpriseSmtp username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseSettingsEnterpriseSmtp enterpriseSettingsEnterpriseSmtp = (EnterpriseSettingsEnterpriseSmtp) o;
    return Objects.equals(this.address, enterpriseSettingsEnterpriseSmtp.address) &&
        Objects.equals(this.authentication, enterpriseSettingsEnterpriseSmtp.authentication) &&
        Objects.equals(this.discardToNoreplyAddress, enterpriseSettingsEnterpriseSmtp.discardToNoreplyAddress) &&
        Objects.equals(this.domain, enterpriseSettingsEnterpriseSmtp.domain) &&
        Objects.equals(this.enableStarttlsAuto, enterpriseSettingsEnterpriseSmtp.enableStarttlsAuto) &&
        Objects.equals(this.enabled, enterpriseSettingsEnterpriseSmtp.enabled) &&
        Objects.equals(this.noreplyAddress, enterpriseSettingsEnterpriseSmtp.noreplyAddress) &&
        Objects.equals(this.password, enterpriseSettingsEnterpriseSmtp.password) &&
        Objects.equals(this.port, enterpriseSettingsEnterpriseSmtp.port) &&
        Objects.equals(this.supportAddress, enterpriseSettingsEnterpriseSmtp.supportAddress) &&
        Objects.equals(this.supportAddressType, enterpriseSettingsEnterpriseSmtp.supportAddressType) &&
        Objects.equals(this.userName, enterpriseSettingsEnterpriseSmtp.userName) &&
        Objects.equals(this.username, enterpriseSettingsEnterpriseSmtp.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, authentication, discardToNoreplyAddress, domain, enableStarttlsAuto, enabled, noreplyAddress, password, port, supportAddress, supportAddressType, userName, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseSettingsEnterpriseSmtp {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    discardToNoreplyAddress: ").append(toIndentedString(discardToNoreplyAddress)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    enableStarttlsAuto: ").append(toIndentedString(enableStarttlsAuto)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    noreplyAddress: ").append(toIndentedString(noreplyAddress)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    supportAddress: ").append(toIndentedString(supportAddress)).append("\n");
    sb.append("    supportAddressType: ").append(toIndentedString(supportAddressType)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("authentication");
    openapiFields.add("discard-to-noreply-address");
    openapiFields.add("domain");
    openapiFields.add("enable_starttls_auto");
    openapiFields.add("enabled");
    openapiFields.add("noreply_address");
    openapiFields.add("password");
    openapiFields.add("port");
    openapiFields.add("support_address");
    openapiFields.add("support_address_type");
    openapiFields.add("user_name");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseSettingsEnterpriseSmtp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseSettingsEnterpriseSmtp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseSettingsEnterpriseSmtp is not found in the empty JSON string", EnterpriseSettingsEnterpriseSmtp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseSettingsEnterpriseSmtp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseSettingsEnterpriseSmtp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) && !jsonObj.get("authentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("noreply_address") != null && !jsonObj.get("noreply_address").isJsonNull()) && !jsonObj.get("noreply_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noreply_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noreply_address").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) && !jsonObj.get("port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port").toString()));
      }
      if ((jsonObj.get("support_address") != null && !jsonObj.get("support_address").isJsonNull()) && !jsonObj.get("support_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `support_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("support_address").toString()));
      }
      if ((jsonObj.get("support_address_type") != null && !jsonObj.get("support_address_type").isJsonNull()) && !jsonObj.get("support_address_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `support_address_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("support_address_type").toString()));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseSettingsEnterpriseSmtp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseSettingsEnterpriseSmtp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseSettingsEnterpriseSmtp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseSettingsEnterpriseSmtp.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseSettingsEnterpriseSmtp>() {
           @Override
           public void write(JsonWriter out, EnterpriseSettingsEnterpriseSmtp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseSettingsEnterpriseSmtp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseSettingsEnterpriseSmtp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseSettingsEnterpriseSmtp
   * @throws IOException if the JSON string is invalid with respect to EnterpriseSettingsEnterpriseSmtp
   */
  public static EnterpriseSettingsEnterpriseSmtp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseSettingsEnterpriseSmtp.class);
  }

  /**
   * Convert an instance of EnterpriseSettingsEnterpriseSmtp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

