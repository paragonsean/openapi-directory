/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseSettingsEnterpriseSaml
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseSettingsEnterpriseSaml {
  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_PATH = "certificate_path";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PATH)
  private String certificatePath;

  public static final String SERIALIZED_NAME_DISABLE_ADMIN_DEMOTE = "disable_admin_demote";
  @SerializedName(SERIALIZED_NAME_DISABLE_ADMIN_DEMOTE)
  private Boolean disableAdminDemote;

  public static final String SERIALIZED_NAME_IDP_INITIATED_SSO = "idp_initiated_sso";
  @SerializedName(SERIALIZED_NAME_IDP_INITIATED_SSO)
  private Boolean idpInitiatedSso;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_SSO_URL = "sso_url";
  @SerializedName(SERIALIZED_NAME_SSO_URL)
  private String ssoUrl;

  public EnterpriseSettingsEnterpriseSaml() {
  }

  public EnterpriseSettingsEnterpriseSaml certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public EnterpriseSettingsEnterpriseSaml certificatePath(String certificatePath) {
    this.certificatePath = certificatePath;
    return this;
  }

  /**
   * Get certificatePath
   * @return certificatePath
   */
  @javax.annotation.Nullable
  public String getCertificatePath() {
    return certificatePath;
  }

  public void setCertificatePath(String certificatePath) {
    this.certificatePath = certificatePath;
  }


  public EnterpriseSettingsEnterpriseSaml disableAdminDemote(Boolean disableAdminDemote) {
    this.disableAdminDemote = disableAdminDemote;
    return this;
  }

  /**
   * Get disableAdminDemote
   * @return disableAdminDemote
   */
  @javax.annotation.Nullable
  public Boolean getDisableAdminDemote() {
    return disableAdminDemote;
  }

  public void setDisableAdminDemote(Boolean disableAdminDemote) {
    this.disableAdminDemote = disableAdminDemote;
  }


  public EnterpriseSettingsEnterpriseSaml idpInitiatedSso(Boolean idpInitiatedSso) {
    this.idpInitiatedSso = idpInitiatedSso;
    return this;
  }

  /**
   * Get idpInitiatedSso
   * @return idpInitiatedSso
   */
  @javax.annotation.Nullable
  public Boolean getIdpInitiatedSso() {
    return idpInitiatedSso;
  }

  public void setIdpInitiatedSso(Boolean idpInitiatedSso) {
    this.idpInitiatedSso = idpInitiatedSso;
  }


  public EnterpriseSettingsEnterpriseSaml issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public EnterpriseSettingsEnterpriseSaml ssoUrl(String ssoUrl) {
    this.ssoUrl = ssoUrl;
    return this;
  }

  /**
   * Get ssoUrl
   * @return ssoUrl
   */
  @javax.annotation.Nullable
  public String getSsoUrl() {
    return ssoUrl;
  }

  public void setSsoUrl(String ssoUrl) {
    this.ssoUrl = ssoUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseSettingsEnterpriseSaml enterpriseSettingsEnterpriseSaml = (EnterpriseSettingsEnterpriseSaml) o;
    return Objects.equals(this.certificate, enterpriseSettingsEnterpriseSaml.certificate) &&
        Objects.equals(this.certificatePath, enterpriseSettingsEnterpriseSaml.certificatePath) &&
        Objects.equals(this.disableAdminDemote, enterpriseSettingsEnterpriseSaml.disableAdminDemote) &&
        Objects.equals(this.idpInitiatedSso, enterpriseSettingsEnterpriseSaml.idpInitiatedSso) &&
        Objects.equals(this.issuer, enterpriseSettingsEnterpriseSaml.issuer) &&
        Objects.equals(this.ssoUrl, enterpriseSettingsEnterpriseSaml.ssoUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, certificatePath, disableAdminDemote, idpInitiatedSso, issuer, ssoUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseSettingsEnterpriseSaml {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificatePath: ").append(toIndentedString(certificatePath)).append("\n");
    sb.append("    disableAdminDemote: ").append(toIndentedString(disableAdminDemote)).append("\n");
    sb.append("    idpInitiatedSso: ").append(toIndentedString(idpInitiatedSso)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    ssoUrl: ").append(toIndentedString(ssoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate");
    openapiFields.add("certificate_path");
    openapiFields.add("disable_admin_demote");
    openapiFields.add("idp_initiated_sso");
    openapiFields.add("issuer");
    openapiFields.add("sso_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseSettingsEnterpriseSaml
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseSettingsEnterpriseSaml.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseSettingsEnterpriseSaml is not found in the empty JSON string", EnterpriseSettingsEnterpriseSaml.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseSettingsEnterpriseSaml.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseSettingsEnterpriseSaml` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("certificate_path") != null && !jsonObj.get("certificate_path").isJsonNull()) && !jsonObj.get("certificate_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_path").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("sso_url") != null && !jsonObj.get("sso_url").isJsonNull()) && !jsonObj.get("sso_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sso_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sso_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseSettingsEnterpriseSaml.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseSettingsEnterpriseSaml' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseSettingsEnterpriseSaml> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseSettingsEnterpriseSaml.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseSettingsEnterpriseSaml>() {
           @Override
           public void write(JsonWriter out, EnterpriseSettingsEnterpriseSaml value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseSettingsEnterpriseSaml read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseSettingsEnterpriseSaml given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseSettingsEnterpriseSaml
   * @throws IOException if the JSON string is invalid with respect to EnterpriseSettingsEnterpriseSaml
   */
  public static EnterpriseSettingsEnterpriseSaml fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseSettingsEnterpriseSaml.class);
  }

  /**
   * Convert an instance of EnterpriseSettingsEnterpriseSaml to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

