/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReposCreateDeploymentRequestPayload;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReposCreateDeploymentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:39.483482-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReposCreateDeploymentRequest {
  public static final String SERIALIZED_NAME_AUTO_MERGE = "auto_merge";
  @SerializedName(SERIALIZED_NAME_AUTO_MERGE)
  private Boolean autoMerge = true;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "";

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment = "production";

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private ReposCreateDeploymentRequestPayload payload;

  public static final String SERIALIZED_NAME_PRODUCTION_ENVIRONMENT = "production_environment";
  @SerializedName(SERIALIZED_NAME_PRODUCTION_ENVIRONMENT)
  private Boolean productionEnvironment;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_REQUIRED_CONTEXTS = "required_contexts";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CONTEXTS)
  private List<String> requiredContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private String task = "deploy";

  public static final String SERIALIZED_NAME_TRANSIENT_ENVIRONMENT = "transient_environment";
  @SerializedName(SERIALIZED_NAME_TRANSIENT_ENVIRONMENT)
  private Boolean transientEnvironment = false;

  public ReposCreateDeploymentRequest() {
  }

  public ReposCreateDeploymentRequest autoMerge(Boolean autoMerge) {
    this.autoMerge = autoMerge;
    return this;
  }

  /**
   * Attempts to automatically merge the default branch into the requested ref, if it&#39;s behind the default branch.
   * @return autoMerge
   */
  @javax.annotation.Nullable
  public Boolean getAutoMerge() {
    return autoMerge;
  }

  public void setAutoMerge(Boolean autoMerge) {
    this.autoMerge = autoMerge;
  }


  public ReposCreateDeploymentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Short description of the deployment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReposCreateDeploymentRequest environment(String environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Name for the target deployment environment (e.g., &#x60;production&#x60;, &#x60;staging&#x60;, &#x60;qa&#x60;).
   * @return environment
   */
  @javax.annotation.Nullable
  public String getEnvironment() {
    return environment;
  }

  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public ReposCreateDeploymentRequest payload(ReposCreateDeploymentRequestPayload payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Get payload
   * @return payload
   */
  @javax.annotation.Nullable
  public ReposCreateDeploymentRequestPayload getPayload() {
    return payload;
  }

  public void setPayload(ReposCreateDeploymentRequestPayload payload) {
    this.payload = payload;
  }


  public ReposCreateDeploymentRequest productionEnvironment(Boolean productionEnvironment) {
    this.productionEnvironment = productionEnvironment;
    return this;
  }

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: &#x60;true&#x60; when &#x60;environment&#x60; is &#x60;production&#x60; and &#x60;false&#x60; otherwise.   **Note:** This parameter requires you to use the [&#x60;application/vnd.github.ant-man-preview+json&#x60;](https://docs.github.com/enterprise-server@2.19/rest/overview/api-previews#enhanced-deployments) custom media type.
   * @return productionEnvironment
   */
  @javax.annotation.Nullable
  public Boolean getProductionEnvironment() {
    return productionEnvironment;
  }

  public void setProductionEnvironment(Boolean productionEnvironment) {
    this.productionEnvironment = productionEnvironment;
  }


  public ReposCreateDeploymentRequest ref(String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * The ref to deploy. This can be a branch, tag, or SHA.
   * @return ref
   */
  @javax.annotation.Nonnull
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }


  public ReposCreateDeploymentRequest requiredContexts(List<String> requiredContexts) {
    this.requiredContexts = requiredContexts;
    return this;
  }

  public ReposCreateDeploymentRequest addRequiredContextsItem(String requiredContextsItem) {
    if (this.requiredContexts == null) {
      this.requiredContexts = new ArrayList<>();
    }
    this.requiredContexts.add(requiredContextsItem);
    return this;
  }

  /**
   * The [status](https://docs.github.com/enterprise-server@2.19/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
   * @return requiredContexts
   */
  @javax.annotation.Nullable
  public List<String> getRequiredContexts() {
    return requiredContexts;
  }

  public void setRequiredContexts(List<String> requiredContexts) {
    this.requiredContexts = requiredContexts;
  }


  public ReposCreateDeploymentRequest task(String task) {
    this.task = task;
    return this;
  }

  /**
   * Specifies a task to execute (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;).
   * @return task
   */
  @javax.annotation.Nullable
  public String getTask() {
    return task;
  }

  public void setTask(String task) {
    this.task = task;
  }


  public ReposCreateDeploymentRequest transientEnvironment(Boolean transientEnvironment) {
    this.transientEnvironment = transientEnvironment;
    return this;
  }

  /**
   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: &#x60;false&#x60;   **Note:** This parameter requires you to use the [&#x60;application/vnd.github.ant-man-preview+json&#x60;](https://docs.github.com/enterprise-server@2.19/rest/overview/api-previews#enhanced-deployments) custom media type.
   * @return transientEnvironment
   */
  @javax.annotation.Nullable
  public Boolean getTransientEnvironment() {
    return transientEnvironment;
  }

  public void setTransientEnvironment(Boolean transientEnvironment) {
    this.transientEnvironment = transientEnvironment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposCreateDeploymentRequest reposCreateDeploymentRequest = (ReposCreateDeploymentRequest) o;
    return Objects.equals(this.autoMerge, reposCreateDeploymentRequest.autoMerge) &&
        Objects.equals(this.description, reposCreateDeploymentRequest.description) &&
        Objects.equals(this.environment, reposCreateDeploymentRequest.environment) &&
        Objects.equals(this.payload, reposCreateDeploymentRequest.payload) &&
        Objects.equals(this.productionEnvironment, reposCreateDeploymentRequest.productionEnvironment) &&
        Objects.equals(this.ref, reposCreateDeploymentRequest.ref) &&
        Objects.equals(this.requiredContexts, reposCreateDeploymentRequest.requiredContexts) &&
        Objects.equals(this.task, reposCreateDeploymentRequest.task) &&
        Objects.equals(this.transientEnvironment, reposCreateDeploymentRequest.transientEnvironment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoMerge, description, environment, payload, productionEnvironment, ref, requiredContexts, task, transientEnvironment);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposCreateDeploymentRequest {\n");
    sb.append("    autoMerge: ").append(toIndentedString(autoMerge)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    productionEnvironment: ").append(toIndentedString(productionEnvironment)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    requiredContexts: ").append(toIndentedString(requiredContexts)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    transientEnvironment: ").append(toIndentedString(transientEnvironment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_merge");
    openapiFields.add("description");
    openapiFields.add("environment");
    openapiFields.add("payload");
    openapiFields.add("production_environment");
    openapiFields.add("ref");
    openapiFields.add("required_contexts");
    openapiFields.add("task");
    openapiFields.add("transient_environment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ref");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReposCreateDeploymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReposCreateDeploymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposCreateDeploymentRequest is not found in the empty JSON string", ReposCreateDeploymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReposCreateDeploymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposCreateDeploymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReposCreateDeploymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) && !jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // validate the optional field `payload`
      if (jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) {
        ReposCreateDeploymentRequestPayload.validateJsonElement(jsonObj.get("payload"));
      }
      if (!jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("required_contexts") != null && !jsonObj.get("required_contexts").isJsonNull() && !jsonObj.get("required_contexts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_contexts` to be an array in the JSON string but got `%s`", jsonObj.get("required_contexts").toString()));
      }
      if ((jsonObj.get("task") != null && !jsonObj.get("task").isJsonNull()) && !jsonObj.get("task").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposCreateDeploymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposCreateDeploymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposCreateDeploymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposCreateDeploymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposCreateDeploymentRequest>() {
           @Override
           public void write(JsonWriter out, ReposCreateDeploymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposCreateDeploymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReposCreateDeploymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReposCreateDeploymentRequest
   * @throws IOException if the JSON string is invalid with respect to ReposCreateDeploymentRequest
   */
  public static ReposCreateDeploymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposCreateDeploymentRequest.class);
  }

  /**
   * Convert an instance of ReposCreateDeploymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

