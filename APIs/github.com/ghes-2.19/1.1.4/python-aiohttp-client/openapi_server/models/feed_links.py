# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_with_type import LinkWithType
from openapi_server import util


class FeedLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_user: LinkWithType=None, current_user_actor: LinkWithType=None, current_user_organization: LinkWithType=None, current_user_organizations: List[LinkWithType]=None, current_user_public: LinkWithType=None, security_advisories: LinkWithType=None, timeline: LinkWithType=None, user: LinkWithType=None):
        """FeedLinks - a model defined in OpenAPI

        :param current_user: The current_user of this FeedLinks.
        :param current_user_actor: The current_user_actor of this FeedLinks.
        :param current_user_organization: The current_user_organization of this FeedLinks.
        :param current_user_organizations: The current_user_organizations of this FeedLinks.
        :param current_user_public: The current_user_public of this FeedLinks.
        :param security_advisories: The security_advisories of this FeedLinks.
        :param timeline: The timeline of this FeedLinks.
        :param user: The user of this FeedLinks.
        """
        self.openapi_types = {
            'current_user': LinkWithType,
            'current_user_actor': LinkWithType,
            'current_user_organization': LinkWithType,
            'current_user_organizations': List[LinkWithType],
            'current_user_public': LinkWithType,
            'security_advisories': LinkWithType,
            'timeline': LinkWithType,
            'user': LinkWithType
        }

        self.attribute_map = {
            'current_user': 'current_user',
            'current_user_actor': 'current_user_actor',
            'current_user_organization': 'current_user_organization',
            'current_user_organizations': 'current_user_organizations',
            'current_user_public': 'current_user_public',
            'security_advisories': 'security_advisories',
            'timeline': 'timeline',
            'user': 'user'
        }

        self._current_user = current_user
        self._current_user_actor = current_user_actor
        self._current_user_organization = current_user_organization
        self._current_user_organizations = current_user_organizations
        self._current_user_public = current_user_public
        self._security_advisories = security_advisories
        self._timeline = timeline
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The feed__links of this FeedLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_user(self):
        """Gets the current_user of this FeedLinks.


        :return: The current_user of this FeedLinks.
        :rtype: LinkWithType
        """
        return self._current_user

    @current_user.setter
    def current_user(self, current_user):
        """Sets the current_user of this FeedLinks.


        :param current_user: The current_user of this FeedLinks.
        :type current_user: LinkWithType
        """

        self._current_user = current_user

    @property
    def current_user_actor(self):
        """Gets the current_user_actor of this FeedLinks.


        :return: The current_user_actor of this FeedLinks.
        :rtype: LinkWithType
        """
        return self._current_user_actor

    @current_user_actor.setter
    def current_user_actor(self, current_user_actor):
        """Sets the current_user_actor of this FeedLinks.


        :param current_user_actor: The current_user_actor of this FeedLinks.
        :type current_user_actor: LinkWithType
        """

        self._current_user_actor = current_user_actor

    @property
    def current_user_organization(self):
        """Gets the current_user_organization of this FeedLinks.


        :return: The current_user_organization of this FeedLinks.
        :rtype: LinkWithType
        """
        return self._current_user_organization

    @current_user_organization.setter
    def current_user_organization(self, current_user_organization):
        """Sets the current_user_organization of this FeedLinks.


        :param current_user_organization: The current_user_organization of this FeedLinks.
        :type current_user_organization: LinkWithType
        """

        self._current_user_organization = current_user_organization

    @property
    def current_user_organizations(self):
        """Gets the current_user_organizations of this FeedLinks.


        :return: The current_user_organizations of this FeedLinks.
        :rtype: List[LinkWithType]
        """
        return self._current_user_organizations

    @current_user_organizations.setter
    def current_user_organizations(self, current_user_organizations):
        """Sets the current_user_organizations of this FeedLinks.


        :param current_user_organizations: The current_user_organizations of this FeedLinks.
        :type current_user_organizations: List[LinkWithType]
        """

        self._current_user_organizations = current_user_organizations

    @property
    def current_user_public(self):
        """Gets the current_user_public of this FeedLinks.


        :return: The current_user_public of this FeedLinks.
        :rtype: LinkWithType
        """
        return self._current_user_public

    @current_user_public.setter
    def current_user_public(self, current_user_public):
        """Sets the current_user_public of this FeedLinks.


        :param current_user_public: The current_user_public of this FeedLinks.
        :type current_user_public: LinkWithType
        """

        self._current_user_public = current_user_public

    @property
    def security_advisories(self):
        """Gets the security_advisories of this FeedLinks.


        :return: The security_advisories of this FeedLinks.
        :rtype: LinkWithType
        """
        return self._security_advisories

    @security_advisories.setter
    def security_advisories(self, security_advisories):
        """Sets the security_advisories of this FeedLinks.


        :param security_advisories: The security_advisories of this FeedLinks.
        :type security_advisories: LinkWithType
        """

        self._security_advisories = security_advisories

    @property
    def timeline(self):
        """Gets the timeline of this FeedLinks.


        :return: The timeline of this FeedLinks.
        :rtype: LinkWithType
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this FeedLinks.


        :param timeline: The timeline of this FeedLinks.
        :type timeline: LinkWithType
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")

        self._timeline = timeline

    @property
    def user(self):
        """Gets the user of this FeedLinks.


        :return: The user of this FeedLinks.
        :rtype: LinkWithType
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FeedLinks.


        :param user: The user of this FeedLinks.
        :type user: LinkWithType
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
