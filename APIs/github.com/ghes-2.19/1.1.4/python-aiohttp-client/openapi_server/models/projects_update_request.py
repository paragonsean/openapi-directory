# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectsUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, name: str=None, organization_permission: str=None, private: bool=None, state: str=None):
        """ProjectsUpdateRequest - a model defined in OpenAPI

        :param body: The body of this ProjectsUpdateRequest.
        :param name: The name of this ProjectsUpdateRequest.
        :param organization_permission: The organization_permission of this ProjectsUpdateRequest.
        :param private: The private of this ProjectsUpdateRequest.
        :param state: The state of this ProjectsUpdateRequest.
        """
        self.openapi_types = {
            'body': str,
            'name': str,
            'organization_permission': str,
            'private': bool,
            'state': str
        }

        self.attribute_map = {
            'body': 'body',
            'name': 'name',
            'organization_permission': 'organization_permission',
            'private': 'private',
            'state': 'state'
        }

        self._body = body
        self._name = name
        self._organization_permission = organization_permission
        self._private = private
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The projects_update_request of this ProjectsUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ProjectsUpdateRequest.

        Body of the project

        :return: The body of this ProjectsUpdateRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ProjectsUpdateRequest.

        Body of the project

        :param body: The body of this ProjectsUpdateRequest.
        :type body: str
        """

        self._body = body

    @property
    def name(self):
        """Gets the name of this ProjectsUpdateRequest.

        Name of the project

        :return: The name of this ProjectsUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsUpdateRequest.

        Name of the project

        :param name: The name of this ProjectsUpdateRequest.
        :type name: str
        """

        self._name = name

    @property
    def organization_permission(self):
        """Gets the organization_permission of this ProjectsUpdateRequest.

        The baseline permission that all organization members have on this project

        :return: The organization_permission of this ProjectsUpdateRequest.
        :rtype: str
        """
        return self._organization_permission

    @organization_permission.setter
    def organization_permission(self, organization_permission):
        """Sets the organization_permission of this ProjectsUpdateRequest.

        The baseline permission that all organization members have on this project

        :param organization_permission: The organization_permission of this ProjectsUpdateRequest.
        :type organization_permission: str
        """
        allowed_values = ["read", "write", "admin", "none"]  # noqa: E501
        if organization_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_permission` ({0}), must be one of {1}"
                .format(organization_permission, allowed_values)
            )

        self._organization_permission = organization_permission

    @property
    def private(self):
        """Gets the private of this ProjectsUpdateRequest.

        Whether or not this project can be seen by everyone.

        :return: The private of this ProjectsUpdateRequest.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this ProjectsUpdateRequest.

        Whether or not this project can be seen by everyone.

        :param private: The private of this ProjectsUpdateRequest.
        :type private: bool
        """

        self._private = private

    @property
    def state(self):
        """Gets the state of this ProjectsUpdateRequest.

        State of the project; either 'open' or 'closed'

        :return: The state of this ProjectsUpdateRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProjectsUpdateRequest.

        State of the project; either 'open' or 'closed'

        :param state: The state of this ProjectsUpdateRequest.
        :type state: str
        """

        self._state = state
