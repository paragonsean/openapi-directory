# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issues_create_request_labels_inner import IssuesCreateRequestLabelsInner
from openapi_server.models.issues_update_request_milestone import IssuesUpdateRequestMilestone
from openapi_server.models.issues_update_request_title import IssuesUpdateRequestTitle
from openapi_server import util


class IssuesUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: str=None, assignees: List[str]=None, body: str=None, labels: List[IssuesCreateRequestLabelsInner]=None, milestone: IssuesUpdateRequestMilestone=None, state: str=None, title: IssuesUpdateRequestTitle=None):
        """IssuesUpdateRequest - a model defined in OpenAPI

        :param assignee: The assignee of this IssuesUpdateRequest.
        :param assignees: The assignees of this IssuesUpdateRequest.
        :param body: The body of this IssuesUpdateRequest.
        :param labels: The labels of this IssuesUpdateRequest.
        :param milestone: The milestone of this IssuesUpdateRequest.
        :param state: The state of this IssuesUpdateRequest.
        :param title: The title of this IssuesUpdateRequest.
        """
        self.openapi_types = {
            'assignee': str,
            'assignees': List[str],
            'body': str,
            'labels': List[IssuesCreateRequestLabelsInner],
            'milestone': IssuesUpdateRequestMilestone,
            'state': str,
            'title': IssuesUpdateRequestTitle
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'assignees': 'assignees',
            'body': 'body',
            'labels': 'labels',
            'milestone': 'milestone',
            'state': 'state',
            'title': 'title'
        }

        self._assignee = assignee
        self._assignees = assignees
        self._body = body
        self._labels = labels
        self._milestone = milestone
        self._state = state
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issues_update_request of this IssuesUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this IssuesUpdateRequest.

        Login for the user that this issue should be assigned to. **This field is deprecated.**

        :return: The assignee of this IssuesUpdateRequest.
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this IssuesUpdateRequest.

        Login for the user that this issue should be assigned to. **This field is deprecated.**

        :param assignee: The assignee of this IssuesUpdateRequest.
        :type assignee: str
        """

        self._assignee = assignee

    @property
    def assignees(self):
        """Gets the assignees of this IssuesUpdateRequest.

        Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._

        :return: The assignees of this IssuesUpdateRequest.
        :rtype: List[str]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this IssuesUpdateRequest.

        Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._

        :param assignees: The assignees of this IssuesUpdateRequest.
        :type assignees: List[str]
        """

        self._assignees = assignees

    @property
    def body(self):
        """Gets the body of this IssuesUpdateRequest.

        The contents of the issue.

        :return: The body of this IssuesUpdateRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this IssuesUpdateRequest.

        The contents of the issue.

        :param body: The body of this IssuesUpdateRequest.
        :type body: str
        """

        self._body = body

    @property
    def labels(self):
        """Gets the labels of this IssuesUpdateRequest.

        Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._

        :return: The labels of this IssuesUpdateRequest.
        :rtype: List[IssuesCreateRequestLabelsInner]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IssuesUpdateRequest.

        Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._

        :param labels: The labels of this IssuesUpdateRequest.
        :type labels: List[IssuesCreateRequestLabelsInner]
        """

        self._labels = labels

    @property
    def milestone(self):
        """Gets the milestone of this IssuesUpdateRequest.


        :return: The milestone of this IssuesUpdateRequest.
        :rtype: IssuesUpdateRequestMilestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this IssuesUpdateRequest.


        :param milestone: The milestone of this IssuesUpdateRequest.
        :type milestone: IssuesUpdateRequestMilestone
        """

        self._milestone = milestone

    @property
    def state(self):
        """Gets the state of this IssuesUpdateRequest.

        State of the issue. Either `open` or `closed`.

        :return: The state of this IssuesUpdateRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IssuesUpdateRequest.

        State of the issue. Either `open` or `closed`.

        :param state: The state of this IssuesUpdateRequest.
        :type state: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this IssuesUpdateRequest.


        :return: The title of this IssuesUpdateRequest.
        :rtype: IssuesUpdateRequestTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssuesUpdateRequest.


        :param title: The title of this IssuesUpdateRequest.
        :type title: IssuesUpdateRequestTitle
        """

        self._title = title
