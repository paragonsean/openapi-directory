# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseHookOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_hooks: int=None, inactive_hooks: int=None, total_hooks: int=None):
        """EnterpriseHookOverview - a model defined in OpenAPI

        :param active_hooks: The active_hooks of this EnterpriseHookOverview.
        :param inactive_hooks: The inactive_hooks of this EnterpriseHookOverview.
        :param total_hooks: The total_hooks of this EnterpriseHookOverview.
        """
        self.openapi_types = {
            'active_hooks': int,
            'inactive_hooks': int,
            'total_hooks': int
        }

        self.attribute_map = {
            'active_hooks': 'active_hooks',
            'inactive_hooks': 'inactive_hooks',
            'total_hooks': 'total_hooks'
        }

        self._active_hooks = active_hooks
        self._inactive_hooks = inactive_hooks
        self._total_hooks = total_hooks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseHookOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-hook-overview of this EnterpriseHookOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_hooks(self):
        """Gets the active_hooks of this EnterpriseHookOverview.


        :return: The active_hooks of this EnterpriseHookOverview.
        :rtype: int
        """
        return self._active_hooks

    @active_hooks.setter
    def active_hooks(self, active_hooks):
        """Sets the active_hooks of this EnterpriseHookOverview.


        :param active_hooks: The active_hooks of this EnterpriseHookOverview.
        :type active_hooks: int
        """
        if active_hooks is None:
            raise ValueError("Invalid value for `active_hooks`, must not be `None`")

        self._active_hooks = active_hooks

    @property
    def inactive_hooks(self):
        """Gets the inactive_hooks of this EnterpriseHookOverview.


        :return: The inactive_hooks of this EnterpriseHookOverview.
        :rtype: int
        """
        return self._inactive_hooks

    @inactive_hooks.setter
    def inactive_hooks(self, inactive_hooks):
        """Sets the inactive_hooks of this EnterpriseHookOverview.


        :param inactive_hooks: The inactive_hooks of this EnterpriseHookOverview.
        :type inactive_hooks: int
        """
        if inactive_hooks is None:
            raise ValueError("Invalid value for `inactive_hooks`, must not be `None`")

        self._inactive_hooks = inactive_hooks

    @property
    def total_hooks(self):
        """Gets the total_hooks of this EnterpriseHookOverview.


        :return: The total_hooks of this EnterpriseHookOverview.
        :rtype: int
        """
        return self._total_hooks

    @total_hooks.setter
    def total_hooks(self, total_hooks):
        """Sets the total_hooks of this EnterpriseHookOverview.


        :param total_hooks: The total_hooks of this EnterpriseHookOverview.
        :type total_hooks: int
        """
        if total_hooks is None:
            raise ValueError("Invalid value for `total_hooks`, must not be `None`")

        self._total_hooks = total_hooks
