# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ldap_mapping_user_plan import LdapMappingUserPlan
from openapi_server import util


class LdapMappingUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, bio: str=None, blog: str=None, business_plus: bool=None, collaborators: int=None, company: str=None, created_at: datetime=None, disk_usage: int=None, email: str=None, events_url: str=None, followers: int=None, followers_url: str=None, following: int=None, following_url: str=None, gists_url: str=None, gravatar_id: str=None, hireable: bool=None, html_url: str=None, id: int=None, ldap_dn: str=None, location: str=None, login: str=None, name: str=None, node_id: str=None, organizations_url: str=None, owned_private_repos: int=None, plan: LdapMappingUserPlan=None, private_gists: int=None, public_gists: int=None, public_repos: int=None, received_events_url: str=None, repos_url: str=None, site_admin: bool=None, starred_url: str=None, subscriptions_url: str=None, suspended_at: datetime=None, total_private_repos: int=None, twitter_username: str=None, two_factor_authentication: bool=None, type: str=None, updated_at: datetime=None, url: str=None):
        """LdapMappingUser - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this LdapMappingUser.
        :param bio: The bio of this LdapMappingUser.
        :param blog: The blog of this LdapMappingUser.
        :param business_plus: The business_plus of this LdapMappingUser.
        :param collaborators: The collaborators of this LdapMappingUser.
        :param company: The company of this LdapMappingUser.
        :param created_at: The created_at of this LdapMappingUser.
        :param disk_usage: The disk_usage of this LdapMappingUser.
        :param email: The email of this LdapMappingUser.
        :param events_url: The events_url of this LdapMappingUser.
        :param followers: The followers of this LdapMappingUser.
        :param followers_url: The followers_url of this LdapMappingUser.
        :param following: The following of this LdapMappingUser.
        :param following_url: The following_url of this LdapMappingUser.
        :param gists_url: The gists_url of this LdapMappingUser.
        :param gravatar_id: The gravatar_id of this LdapMappingUser.
        :param hireable: The hireable of this LdapMappingUser.
        :param html_url: The html_url of this LdapMappingUser.
        :param id: The id of this LdapMappingUser.
        :param ldap_dn: The ldap_dn of this LdapMappingUser.
        :param location: The location of this LdapMappingUser.
        :param login: The login of this LdapMappingUser.
        :param name: The name of this LdapMappingUser.
        :param node_id: The node_id of this LdapMappingUser.
        :param organizations_url: The organizations_url of this LdapMappingUser.
        :param owned_private_repos: The owned_private_repos of this LdapMappingUser.
        :param plan: The plan of this LdapMappingUser.
        :param private_gists: The private_gists of this LdapMappingUser.
        :param public_gists: The public_gists of this LdapMappingUser.
        :param public_repos: The public_repos of this LdapMappingUser.
        :param received_events_url: The received_events_url of this LdapMappingUser.
        :param repos_url: The repos_url of this LdapMappingUser.
        :param site_admin: The site_admin of this LdapMappingUser.
        :param starred_url: The starred_url of this LdapMappingUser.
        :param subscriptions_url: The subscriptions_url of this LdapMappingUser.
        :param suspended_at: The suspended_at of this LdapMappingUser.
        :param total_private_repos: The total_private_repos of this LdapMappingUser.
        :param twitter_username: The twitter_username of this LdapMappingUser.
        :param two_factor_authentication: The two_factor_authentication of this LdapMappingUser.
        :param type: The type of this LdapMappingUser.
        :param updated_at: The updated_at of this LdapMappingUser.
        :param url: The url of this LdapMappingUser.
        """
        self.openapi_types = {
            'avatar_url': str,
            'bio': str,
            'blog': str,
            'business_plus': bool,
            'collaborators': int,
            'company': str,
            'created_at': datetime,
            'disk_usage': int,
            'email': str,
            'events_url': str,
            'followers': int,
            'followers_url': str,
            'following': int,
            'following_url': str,
            'gists_url': str,
            'gravatar_id': str,
            'hireable': bool,
            'html_url': str,
            'id': int,
            'ldap_dn': str,
            'location': str,
            'login': str,
            'name': str,
            'node_id': str,
            'organizations_url': str,
            'owned_private_repos': int,
            'plan': LdapMappingUserPlan,
            'private_gists': int,
            'public_gists': int,
            'public_repos': int,
            'received_events_url': str,
            'repos_url': str,
            'site_admin': bool,
            'starred_url': str,
            'subscriptions_url': str,
            'suspended_at': datetime,
            'total_private_repos': int,
            'twitter_username': str,
            'two_factor_authentication': bool,
            'type': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'bio': 'bio',
            'blog': 'blog',
            'business_plus': 'business_plus',
            'collaborators': 'collaborators',
            'company': 'company',
            'created_at': 'created_at',
            'disk_usage': 'disk_usage',
            'email': 'email',
            'events_url': 'events_url',
            'followers': 'followers',
            'followers_url': 'followers_url',
            'following': 'following',
            'following_url': 'following_url',
            'gists_url': 'gists_url',
            'gravatar_id': 'gravatar_id',
            'hireable': 'hireable',
            'html_url': 'html_url',
            'id': 'id',
            'ldap_dn': 'ldap_dn',
            'location': 'location',
            'login': 'login',
            'name': 'name',
            'node_id': 'node_id',
            'organizations_url': 'organizations_url',
            'owned_private_repos': 'owned_private_repos',
            'plan': 'plan',
            'private_gists': 'private_gists',
            'public_gists': 'public_gists',
            'public_repos': 'public_repos',
            'received_events_url': 'received_events_url',
            'repos_url': 'repos_url',
            'site_admin': 'site_admin',
            'starred_url': 'starred_url',
            'subscriptions_url': 'subscriptions_url',
            'suspended_at': 'suspended_at',
            'total_private_repos': 'total_private_repos',
            'twitter_username': 'twitter_username',
            'two_factor_authentication': 'two_factor_authentication',
            'type': 'type',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._avatar_url = avatar_url
        self._bio = bio
        self._blog = blog
        self._business_plus = business_plus
        self._collaborators = collaborators
        self._company = company
        self._created_at = created_at
        self._disk_usage = disk_usage
        self._email = email
        self._events_url = events_url
        self._followers = followers
        self._followers_url = followers_url
        self._following = following
        self._following_url = following_url
        self._gists_url = gists_url
        self._gravatar_id = gravatar_id
        self._hireable = hireable
        self._html_url = html_url
        self._id = id
        self._ldap_dn = ldap_dn
        self._location = location
        self._login = login
        self._name = name
        self._node_id = node_id
        self._organizations_url = organizations_url
        self._owned_private_repos = owned_private_repos
        self._plan = plan
        self._private_gists = private_gists
        self._public_gists = public_gists
        self._public_repos = public_repos
        self._received_events_url = received_events_url
        self._repos_url = repos_url
        self._site_admin = site_admin
        self._starred_url = starred_url
        self._subscriptions_url = subscriptions_url
        self._suspended_at = suspended_at
        self._total_private_repos = total_private_repos
        self._twitter_username = twitter_username
        self._two_factor_authentication = two_factor_authentication
        self._type = type
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LdapMappingUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ldap-mapping-user of this LdapMappingUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this LdapMappingUser.


        :return: The avatar_url of this LdapMappingUser.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this LdapMappingUser.


        :param avatar_url: The avatar_url of this LdapMappingUser.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")

        self._avatar_url = avatar_url

    @property
    def bio(self):
        """Gets the bio of this LdapMappingUser.


        :return: The bio of this LdapMappingUser.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this LdapMappingUser.


        :param bio: The bio of this LdapMappingUser.
        :type bio: str
        """
        if bio is None:
            raise ValueError("Invalid value for `bio`, must not be `None`")

        self._bio = bio

    @property
    def blog(self):
        """Gets the blog of this LdapMappingUser.


        :return: The blog of this LdapMappingUser.
        :rtype: str
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this LdapMappingUser.


        :param blog: The blog of this LdapMappingUser.
        :type blog: str
        """
        if blog is None:
            raise ValueError("Invalid value for `blog`, must not be `None`")

        self._blog = blog

    @property
    def business_plus(self):
        """Gets the business_plus of this LdapMappingUser.


        :return: The business_plus of this LdapMappingUser.
        :rtype: bool
        """
        return self._business_plus

    @business_plus.setter
    def business_plus(self, business_plus):
        """Sets the business_plus of this LdapMappingUser.


        :param business_plus: The business_plus of this LdapMappingUser.
        :type business_plus: bool
        """

        self._business_plus = business_plus

    @property
    def collaborators(self):
        """Gets the collaborators of this LdapMappingUser.


        :return: The collaborators of this LdapMappingUser.
        :rtype: int
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this LdapMappingUser.


        :param collaborators: The collaborators of this LdapMappingUser.
        :type collaborators: int
        """
        if collaborators is None:
            raise ValueError("Invalid value for `collaborators`, must not be `None`")

        self._collaborators = collaborators

    @property
    def company(self):
        """Gets the company of this LdapMappingUser.


        :return: The company of this LdapMappingUser.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this LdapMappingUser.


        :param company: The company of this LdapMappingUser.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def created_at(self):
        """Gets the created_at of this LdapMappingUser.


        :return: The created_at of this LdapMappingUser.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LdapMappingUser.


        :param created_at: The created_at of this LdapMappingUser.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def disk_usage(self):
        """Gets the disk_usage of this LdapMappingUser.


        :return: The disk_usage of this LdapMappingUser.
        :rtype: int
        """
        return self._disk_usage

    @disk_usage.setter
    def disk_usage(self, disk_usage):
        """Sets the disk_usage of this LdapMappingUser.


        :param disk_usage: The disk_usage of this LdapMappingUser.
        :type disk_usage: int
        """
        if disk_usage is None:
            raise ValueError("Invalid value for `disk_usage`, must not be `None`")

        self._disk_usage = disk_usage

    @property
    def email(self):
        """Gets the email of this LdapMappingUser.


        :return: The email of this LdapMappingUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LdapMappingUser.


        :param email: The email of this LdapMappingUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def events_url(self):
        """Gets the events_url of this LdapMappingUser.


        :return: The events_url of this LdapMappingUser.
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this LdapMappingUser.


        :param events_url: The events_url of this LdapMappingUser.
        :type events_url: str
        """
        if events_url is None:
            raise ValueError("Invalid value for `events_url`, must not be `None`")

        self._events_url = events_url

    @property
    def followers(self):
        """Gets the followers of this LdapMappingUser.


        :return: The followers of this LdapMappingUser.
        :rtype: int
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this LdapMappingUser.


        :param followers: The followers of this LdapMappingUser.
        :type followers: int
        """
        if followers is None:
            raise ValueError("Invalid value for `followers`, must not be `None`")

        self._followers = followers

    @property
    def followers_url(self):
        """Gets the followers_url of this LdapMappingUser.


        :return: The followers_url of this LdapMappingUser.
        :rtype: str
        """
        return self._followers_url

    @followers_url.setter
    def followers_url(self, followers_url):
        """Sets the followers_url of this LdapMappingUser.


        :param followers_url: The followers_url of this LdapMappingUser.
        :type followers_url: str
        """
        if followers_url is None:
            raise ValueError("Invalid value for `followers_url`, must not be `None`")

        self._followers_url = followers_url

    @property
    def following(self):
        """Gets the following of this LdapMappingUser.


        :return: The following of this LdapMappingUser.
        :rtype: int
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this LdapMappingUser.


        :param following: The following of this LdapMappingUser.
        :type following: int
        """
        if following is None:
            raise ValueError("Invalid value for `following`, must not be `None`")

        self._following = following

    @property
    def following_url(self):
        """Gets the following_url of this LdapMappingUser.


        :return: The following_url of this LdapMappingUser.
        :rtype: str
        """
        return self._following_url

    @following_url.setter
    def following_url(self, following_url):
        """Sets the following_url of this LdapMappingUser.


        :param following_url: The following_url of this LdapMappingUser.
        :type following_url: str
        """
        if following_url is None:
            raise ValueError("Invalid value for `following_url`, must not be `None`")

        self._following_url = following_url

    @property
    def gists_url(self):
        """Gets the gists_url of this LdapMappingUser.


        :return: The gists_url of this LdapMappingUser.
        :rtype: str
        """
        return self._gists_url

    @gists_url.setter
    def gists_url(self, gists_url):
        """Sets the gists_url of this LdapMappingUser.


        :param gists_url: The gists_url of this LdapMappingUser.
        :type gists_url: str
        """
        if gists_url is None:
            raise ValueError("Invalid value for `gists_url`, must not be `None`")

        self._gists_url = gists_url

    @property
    def gravatar_id(self):
        """Gets the gravatar_id of this LdapMappingUser.


        :return: The gravatar_id of this LdapMappingUser.
        :rtype: str
        """
        return self._gravatar_id

    @gravatar_id.setter
    def gravatar_id(self, gravatar_id):
        """Sets the gravatar_id of this LdapMappingUser.


        :param gravatar_id: The gravatar_id of this LdapMappingUser.
        :type gravatar_id: str
        """
        if gravatar_id is None:
            raise ValueError("Invalid value for `gravatar_id`, must not be `None`")

        self._gravatar_id = gravatar_id

    @property
    def hireable(self):
        """Gets the hireable of this LdapMappingUser.


        :return: The hireable of this LdapMappingUser.
        :rtype: bool
        """
        return self._hireable

    @hireable.setter
    def hireable(self, hireable):
        """Sets the hireable of this LdapMappingUser.


        :param hireable: The hireable of this LdapMappingUser.
        :type hireable: bool
        """
        if hireable is None:
            raise ValueError("Invalid value for `hireable`, must not be `None`")

        self._hireable = hireable

    @property
    def html_url(self):
        """Gets the html_url of this LdapMappingUser.


        :return: The html_url of this LdapMappingUser.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this LdapMappingUser.


        :param html_url: The html_url of this LdapMappingUser.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this LdapMappingUser.


        :return: The id of this LdapMappingUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LdapMappingUser.


        :param id: The id of this LdapMappingUser.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ldap_dn(self):
        """Gets the ldap_dn of this LdapMappingUser.


        :return: The ldap_dn of this LdapMappingUser.
        :rtype: str
        """
        return self._ldap_dn

    @ldap_dn.setter
    def ldap_dn(self, ldap_dn):
        """Sets the ldap_dn of this LdapMappingUser.


        :param ldap_dn: The ldap_dn of this LdapMappingUser.
        :type ldap_dn: str
        """

        self._ldap_dn = ldap_dn

    @property
    def location(self):
        """Gets the location of this LdapMappingUser.


        :return: The location of this LdapMappingUser.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LdapMappingUser.


        :param location: The location of this LdapMappingUser.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def login(self):
        """Gets the login of this LdapMappingUser.


        :return: The login of this LdapMappingUser.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this LdapMappingUser.


        :param login: The login of this LdapMappingUser.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def name(self):
        """Gets the name of this LdapMappingUser.


        :return: The name of this LdapMappingUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapMappingUser.


        :param name: The name of this LdapMappingUser.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this LdapMappingUser.


        :return: The node_id of this LdapMappingUser.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this LdapMappingUser.


        :param node_id: The node_id of this LdapMappingUser.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def organizations_url(self):
        """Gets the organizations_url of this LdapMappingUser.


        :return: The organizations_url of this LdapMappingUser.
        :rtype: str
        """
        return self._organizations_url

    @organizations_url.setter
    def organizations_url(self, organizations_url):
        """Sets the organizations_url of this LdapMappingUser.


        :param organizations_url: The organizations_url of this LdapMappingUser.
        :type organizations_url: str
        """
        if organizations_url is None:
            raise ValueError("Invalid value for `organizations_url`, must not be `None`")

        self._organizations_url = organizations_url

    @property
    def owned_private_repos(self):
        """Gets the owned_private_repos of this LdapMappingUser.


        :return: The owned_private_repos of this LdapMappingUser.
        :rtype: int
        """
        return self._owned_private_repos

    @owned_private_repos.setter
    def owned_private_repos(self, owned_private_repos):
        """Sets the owned_private_repos of this LdapMappingUser.


        :param owned_private_repos: The owned_private_repos of this LdapMappingUser.
        :type owned_private_repos: int
        """
        if owned_private_repos is None:
            raise ValueError("Invalid value for `owned_private_repos`, must not be `None`")

        self._owned_private_repos = owned_private_repos

    @property
    def plan(self):
        """Gets the plan of this LdapMappingUser.


        :return: The plan of this LdapMappingUser.
        :rtype: LdapMappingUserPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this LdapMappingUser.


        :param plan: The plan of this LdapMappingUser.
        :type plan: LdapMappingUserPlan
        """

        self._plan = plan

    @property
    def private_gists(self):
        """Gets the private_gists of this LdapMappingUser.


        :return: The private_gists of this LdapMappingUser.
        :rtype: int
        """
        return self._private_gists

    @private_gists.setter
    def private_gists(self, private_gists):
        """Sets the private_gists of this LdapMappingUser.


        :param private_gists: The private_gists of this LdapMappingUser.
        :type private_gists: int
        """
        if private_gists is None:
            raise ValueError("Invalid value for `private_gists`, must not be `None`")

        self._private_gists = private_gists

    @property
    def public_gists(self):
        """Gets the public_gists of this LdapMappingUser.


        :return: The public_gists of this LdapMappingUser.
        :rtype: int
        """
        return self._public_gists

    @public_gists.setter
    def public_gists(self, public_gists):
        """Sets the public_gists of this LdapMappingUser.


        :param public_gists: The public_gists of this LdapMappingUser.
        :type public_gists: int
        """
        if public_gists is None:
            raise ValueError("Invalid value for `public_gists`, must not be `None`")

        self._public_gists = public_gists

    @property
    def public_repos(self):
        """Gets the public_repos of this LdapMappingUser.


        :return: The public_repos of this LdapMappingUser.
        :rtype: int
        """
        return self._public_repos

    @public_repos.setter
    def public_repos(self, public_repos):
        """Sets the public_repos of this LdapMappingUser.


        :param public_repos: The public_repos of this LdapMappingUser.
        :type public_repos: int
        """
        if public_repos is None:
            raise ValueError("Invalid value for `public_repos`, must not be `None`")

        self._public_repos = public_repos

    @property
    def received_events_url(self):
        """Gets the received_events_url of this LdapMappingUser.


        :return: The received_events_url of this LdapMappingUser.
        :rtype: str
        """
        return self._received_events_url

    @received_events_url.setter
    def received_events_url(self, received_events_url):
        """Sets the received_events_url of this LdapMappingUser.


        :param received_events_url: The received_events_url of this LdapMappingUser.
        :type received_events_url: str
        """
        if received_events_url is None:
            raise ValueError("Invalid value for `received_events_url`, must not be `None`")

        self._received_events_url = received_events_url

    @property
    def repos_url(self):
        """Gets the repos_url of this LdapMappingUser.


        :return: The repos_url of this LdapMappingUser.
        :rtype: str
        """
        return self._repos_url

    @repos_url.setter
    def repos_url(self, repos_url):
        """Sets the repos_url of this LdapMappingUser.


        :param repos_url: The repos_url of this LdapMappingUser.
        :type repos_url: str
        """
        if repos_url is None:
            raise ValueError("Invalid value for `repos_url`, must not be `None`")

        self._repos_url = repos_url

    @property
    def site_admin(self):
        """Gets the site_admin of this LdapMappingUser.


        :return: The site_admin of this LdapMappingUser.
        :rtype: bool
        """
        return self._site_admin

    @site_admin.setter
    def site_admin(self, site_admin):
        """Sets the site_admin of this LdapMappingUser.


        :param site_admin: The site_admin of this LdapMappingUser.
        :type site_admin: bool
        """
        if site_admin is None:
            raise ValueError("Invalid value for `site_admin`, must not be `None`")

        self._site_admin = site_admin

    @property
    def starred_url(self):
        """Gets the starred_url of this LdapMappingUser.


        :return: The starred_url of this LdapMappingUser.
        :rtype: str
        """
        return self._starred_url

    @starred_url.setter
    def starred_url(self, starred_url):
        """Sets the starred_url of this LdapMappingUser.


        :param starred_url: The starred_url of this LdapMappingUser.
        :type starred_url: str
        """
        if starred_url is None:
            raise ValueError("Invalid value for `starred_url`, must not be `None`")

        self._starred_url = starred_url

    @property
    def subscriptions_url(self):
        """Gets the subscriptions_url of this LdapMappingUser.


        :return: The subscriptions_url of this LdapMappingUser.
        :rtype: str
        """
        return self._subscriptions_url

    @subscriptions_url.setter
    def subscriptions_url(self, subscriptions_url):
        """Sets the subscriptions_url of this LdapMappingUser.


        :param subscriptions_url: The subscriptions_url of this LdapMappingUser.
        :type subscriptions_url: str
        """
        if subscriptions_url is None:
            raise ValueError("Invalid value for `subscriptions_url`, must not be `None`")

        self._subscriptions_url = subscriptions_url

    @property
    def suspended_at(self):
        """Gets the suspended_at of this LdapMappingUser.


        :return: The suspended_at of this LdapMappingUser.
        :rtype: datetime
        """
        return self._suspended_at

    @suspended_at.setter
    def suspended_at(self, suspended_at):
        """Sets the suspended_at of this LdapMappingUser.


        :param suspended_at: The suspended_at of this LdapMappingUser.
        :type suspended_at: datetime
        """

        self._suspended_at = suspended_at

    @property
    def total_private_repos(self):
        """Gets the total_private_repos of this LdapMappingUser.


        :return: The total_private_repos of this LdapMappingUser.
        :rtype: int
        """
        return self._total_private_repos

    @total_private_repos.setter
    def total_private_repos(self, total_private_repos):
        """Sets the total_private_repos of this LdapMappingUser.


        :param total_private_repos: The total_private_repos of this LdapMappingUser.
        :type total_private_repos: int
        """
        if total_private_repos is None:
            raise ValueError("Invalid value for `total_private_repos`, must not be `None`")

        self._total_private_repos = total_private_repos

    @property
    def twitter_username(self):
        """Gets the twitter_username of this LdapMappingUser.


        :return: The twitter_username of this LdapMappingUser.
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this LdapMappingUser.


        :param twitter_username: The twitter_username of this LdapMappingUser.
        :type twitter_username: str
        """

        self._twitter_username = twitter_username

    @property
    def two_factor_authentication(self):
        """Gets the two_factor_authentication of this LdapMappingUser.


        :return: The two_factor_authentication of this LdapMappingUser.
        :rtype: bool
        """
        return self._two_factor_authentication

    @two_factor_authentication.setter
    def two_factor_authentication(self, two_factor_authentication):
        """Sets the two_factor_authentication of this LdapMappingUser.


        :param two_factor_authentication: The two_factor_authentication of this LdapMappingUser.
        :type two_factor_authentication: bool
        """
        if two_factor_authentication is None:
            raise ValueError("Invalid value for `two_factor_authentication`, must not be `None`")

        self._two_factor_authentication = two_factor_authentication

    @property
    def type(self):
        """Gets the type of this LdapMappingUser.


        :return: The type of this LdapMappingUser.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LdapMappingUser.


        :param type: The type of this LdapMappingUser.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this LdapMappingUser.


        :return: The updated_at of this LdapMappingUser.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LdapMappingUser.


        :param updated_at: The updated_at of this LdapMappingUser.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this LdapMappingUser.


        :return: The url of this LdapMappingUser.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LdapMappingUser.


        :param url: The url of this LdapMappingUser.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
