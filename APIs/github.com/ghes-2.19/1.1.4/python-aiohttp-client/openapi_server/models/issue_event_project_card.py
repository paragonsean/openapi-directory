# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueEventProjectCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_name: str=None, id: int=None, previous_column_name: str=None, project_id: int=None, project_url: str=None, url: str=None):
        """IssueEventProjectCard - a model defined in OpenAPI

        :param column_name: The column_name of this IssueEventProjectCard.
        :param id: The id of this IssueEventProjectCard.
        :param previous_column_name: The previous_column_name of this IssueEventProjectCard.
        :param project_id: The project_id of this IssueEventProjectCard.
        :param project_url: The project_url of this IssueEventProjectCard.
        :param url: The url of this IssueEventProjectCard.
        """
        self.openapi_types = {
            'column_name': str,
            'id': int,
            'previous_column_name': str,
            'project_id': int,
            'project_url': str,
            'url': str
        }

        self.attribute_map = {
            'column_name': 'column_name',
            'id': 'id',
            'previous_column_name': 'previous_column_name',
            'project_id': 'project_id',
            'project_url': 'project_url',
            'url': 'url'
        }

        self._column_name = column_name
        self._id = id
        self._previous_column_name = previous_column_name
        self._project_id = project_id
        self._project_url = project_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueEventProjectCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issue-event-project-card of this IssueEventProjectCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_name(self):
        """Gets the column_name of this IssueEventProjectCard.


        :return: The column_name of this IssueEventProjectCard.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this IssueEventProjectCard.


        :param column_name: The column_name of this IssueEventProjectCard.
        :type column_name: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def id(self):
        """Gets the id of this IssueEventProjectCard.


        :return: The id of this IssueEventProjectCard.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueEventProjectCard.


        :param id: The id of this IssueEventProjectCard.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def previous_column_name(self):
        """Gets the previous_column_name of this IssueEventProjectCard.


        :return: The previous_column_name of this IssueEventProjectCard.
        :rtype: str
        """
        return self._previous_column_name

    @previous_column_name.setter
    def previous_column_name(self, previous_column_name):
        """Sets the previous_column_name of this IssueEventProjectCard.


        :param previous_column_name: The previous_column_name of this IssueEventProjectCard.
        :type previous_column_name: str
        """

        self._previous_column_name = previous_column_name

    @property
    def project_id(self):
        """Gets the project_id of this IssueEventProjectCard.


        :return: The project_id of this IssueEventProjectCard.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this IssueEventProjectCard.


        :param project_id: The project_id of this IssueEventProjectCard.
        :type project_id: int
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def project_url(self):
        """Gets the project_url of this IssueEventProjectCard.


        :return: The project_url of this IssueEventProjectCard.
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this IssueEventProjectCard.


        :param project_url: The project_url of this IssueEventProjectCard.
        :type project_url: str
        """
        if project_url is None:
            raise ValueError("Invalid value for `project_url`, must not be `None`")

        self._project_url = project_url

    @property
    def url(self):
        """Gets the url of this IssueEventProjectCard.


        :return: The url of this IssueEventProjectCard.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssueEventProjectCard.


        :param url: The url of this IssueEventProjectCard.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
