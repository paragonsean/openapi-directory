# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamsCreateDiscussionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, private: bool=False, title: str=None):
        """TeamsCreateDiscussionRequest - a model defined in OpenAPI

        :param body: The body of this TeamsCreateDiscussionRequest.
        :param private: The private of this TeamsCreateDiscussionRequest.
        :param title: The title of this TeamsCreateDiscussionRequest.
        """
        self.openapi_types = {
            'body': str,
            'private': bool,
            'title': str
        }

        self.attribute_map = {
            'body': 'body',
            'private': 'private',
            'title': 'title'
        }

        self._body = body
        self._private = private
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamsCreateDiscussionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The teams_create_discussion_request of this TeamsCreateDiscussionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this TeamsCreateDiscussionRequest.

        The discussion post's body text.

        :return: The body of this TeamsCreateDiscussionRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TeamsCreateDiscussionRequest.

        The discussion post's body text.

        :param body: The body of this TeamsCreateDiscussionRequest.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def private(self):
        """Gets the private of this TeamsCreateDiscussionRequest.

        Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.

        :return: The private of this TeamsCreateDiscussionRequest.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this TeamsCreateDiscussionRequest.

        Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.

        :param private: The private of this TeamsCreateDiscussionRequest.
        :type private: bool
        """

        self._private = private

    @property
    def title(self):
        """Gets the title of this TeamsCreateDiscussionRequest.

        The discussion post's title.

        :return: The title of this TeamsCreateDiscussionRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TeamsCreateDiscussionRequest.

        The discussion post's title.

        :param title: The title of this TeamsCreateDiscussionRequest.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
