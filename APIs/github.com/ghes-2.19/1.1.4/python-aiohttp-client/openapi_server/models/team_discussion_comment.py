# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.reaction_rollup import ReactionRollup
from openapi_server import util


class TeamDiscussionComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: NullableSimpleUser=None, body: str=None, body_html: str=None, body_version: str=None, created_at: datetime=None, discussion_url: str=None, html_url: str=None, last_edited_at: datetime=None, node_id: str=None, number: int=None, reactions: ReactionRollup=None, updated_at: datetime=None, url: str=None):
        """TeamDiscussionComment - a model defined in OpenAPI

        :param author: The author of this TeamDiscussionComment.
        :param body: The body of this TeamDiscussionComment.
        :param body_html: The body_html of this TeamDiscussionComment.
        :param body_version: The body_version of this TeamDiscussionComment.
        :param created_at: The created_at of this TeamDiscussionComment.
        :param discussion_url: The discussion_url of this TeamDiscussionComment.
        :param html_url: The html_url of this TeamDiscussionComment.
        :param last_edited_at: The last_edited_at of this TeamDiscussionComment.
        :param node_id: The node_id of this TeamDiscussionComment.
        :param number: The number of this TeamDiscussionComment.
        :param reactions: The reactions of this TeamDiscussionComment.
        :param updated_at: The updated_at of this TeamDiscussionComment.
        :param url: The url of this TeamDiscussionComment.
        """
        self.openapi_types = {
            'author': NullableSimpleUser,
            'body': str,
            'body_html': str,
            'body_version': str,
            'created_at': datetime,
            'discussion_url': str,
            'html_url': str,
            'last_edited_at': datetime,
            'node_id': str,
            'number': int,
            'reactions': ReactionRollup,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'author': 'author',
            'body': 'body',
            'body_html': 'body_html',
            'body_version': 'body_version',
            'created_at': 'created_at',
            'discussion_url': 'discussion_url',
            'html_url': 'html_url',
            'last_edited_at': 'last_edited_at',
            'node_id': 'node_id',
            'number': 'number',
            'reactions': 'reactions',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._author = author
        self._body = body
        self._body_html = body_html
        self._body_version = body_version
        self._created_at = created_at
        self._discussion_url = discussion_url
        self._html_url = html_url
        self._last_edited_at = last_edited_at
        self._node_id = node_id
        self._number = number
        self._reactions = reactions
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamDiscussionComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team-discussion-comment of this TeamDiscussionComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this TeamDiscussionComment.


        :return: The author of this TeamDiscussionComment.
        :rtype: NullableSimpleUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TeamDiscussionComment.


        :param author: The author of this TeamDiscussionComment.
        :type author: NullableSimpleUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def body(self):
        """Gets the body of this TeamDiscussionComment.

        The main text of the comment.

        :return: The body of this TeamDiscussionComment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TeamDiscussionComment.

        The main text of the comment.

        :param body: The body of this TeamDiscussionComment.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this TeamDiscussionComment.


        :return: The body_html of this TeamDiscussionComment.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this TeamDiscussionComment.


        :param body_html: The body_html of this TeamDiscussionComment.
        :type body_html: str
        """
        if body_html is None:
            raise ValueError("Invalid value for `body_html`, must not be `None`")

        self._body_html = body_html

    @property
    def body_version(self):
        """Gets the body_version of this TeamDiscussionComment.

        The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.

        :return: The body_version of this TeamDiscussionComment.
        :rtype: str
        """
        return self._body_version

    @body_version.setter
    def body_version(self, body_version):
        """Sets the body_version of this TeamDiscussionComment.

        The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.

        :param body_version: The body_version of this TeamDiscussionComment.
        :type body_version: str
        """
        if body_version is None:
            raise ValueError("Invalid value for `body_version`, must not be `None`")

        self._body_version = body_version

    @property
    def created_at(self):
        """Gets the created_at of this TeamDiscussionComment.


        :return: The created_at of this TeamDiscussionComment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamDiscussionComment.


        :param created_at: The created_at of this TeamDiscussionComment.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def discussion_url(self):
        """Gets the discussion_url of this TeamDiscussionComment.


        :return: The discussion_url of this TeamDiscussionComment.
        :rtype: str
        """
        return self._discussion_url

    @discussion_url.setter
    def discussion_url(self, discussion_url):
        """Sets the discussion_url of this TeamDiscussionComment.


        :param discussion_url: The discussion_url of this TeamDiscussionComment.
        :type discussion_url: str
        """
        if discussion_url is None:
            raise ValueError("Invalid value for `discussion_url`, must not be `None`")

        self._discussion_url = discussion_url

    @property
    def html_url(self):
        """Gets the html_url of this TeamDiscussionComment.


        :return: The html_url of this TeamDiscussionComment.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TeamDiscussionComment.


        :param html_url: The html_url of this TeamDiscussionComment.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def last_edited_at(self):
        """Gets the last_edited_at of this TeamDiscussionComment.


        :return: The last_edited_at of this TeamDiscussionComment.
        :rtype: datetime
        """
        return self._last_edited_at

    @last_edited_at.setter
    def last_edited_at(self, last_edited_at):
        """Sets the last_edited_at of this TeamDiscussionComment.


        :param last_edited_at: The last_edited_at of this TeamDiscussionComment.
        :type last_edited_at: datetime
        """
        if last_edited_at is None:
            raise ValueError("Invalid value for `last_edited_at`, must not be `None`")

        self._last_edited_at = last_edited_at

    @property
    def node_id(self):
        """Gets the node_id of this TeamDiscussionComment.


        :return: The node_id of this TeamDiscussionComment.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TeamDiscussionComment.


        :param node_id: The node_id of this TeamDiscussionComment.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def number(self):
        """Gets the number of this TeamDiscussionComment.

        The unique sequence number of a team discussion comment.

        :return: The number of this TeamDiscussionComment.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TeamDiscussionComment.

        The unique sequence number of a team discussion comment.

        :param number: The number of this TeamDiscussionComment.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def reactions(self):
        """Gets the reactions of this TeamDiscussionComment.


        :return: The reactions of this TeamDiscussionComment.
        :rtype: ReactionRollup
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this TeamDiscussionComment.


        :param reactions: The reactions of this TeamDiscussionComment.
        :type reactions: ReactionRollup
        """

        self._reactions = reactions

    @property
    def updated_at(self):
        """Gets the updated_at of this TeamDiscussionComment.


        :return: The updated_at of this TeamDiscussionComment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TeamDiscussionComment.


        :param updated_at: The updated_at of this TeamDiscussionComment.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this TeamDiscussionComment.


        :return: The url of this TeamDiscussionComment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TeamDiscussionComment.


        :param url: The url of this TeamDiscussionComment.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
