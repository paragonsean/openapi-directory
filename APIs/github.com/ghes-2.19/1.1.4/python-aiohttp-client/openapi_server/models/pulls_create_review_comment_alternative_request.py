# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullsCreateReviewCommentAlternativeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, in_reply_to: int=None):
        """PullsCreateReviewCommentAlternativeRequest - a model defined in OpenAPI

        :param body: The body of this PullsCreateReviewCommentAlternativeRequest.
        :param in_reply_to: The in_reply_to of this PullsCreateReviewCommentAlternativeRequest.
        """
        self.openapi_types = {
            'body': str,
            'in_reply_to': int
        }

        self.attribute_map = {
            'body': 'body',
            'in_reply_to': 'in_reply_to'
        }

        self._body = body
        self._in_reply_to = in_reply_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullsCreateReviewCommentAlternativeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pulls_create_review_comment_alternative_request of this PullsCreateReviewCommentAlternativeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this PullsCreateReviewCommentAlternativeRequest.

        The text of the comment.

        :return: The body of this PullsCreateReviewCommentAlternativeRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullsCreateReviewCommentAlternativeRequest.

        The text of the comment.

        :param body: The body of this PullsCreateReviewCommentAlternativeRequest.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def in_reply_to(self):
        """Gets the in_reply_to of this PullsCreateReviewCommentAlternativeRequest.

        The comment ID to reply to. **Note**: This must be the ID of a _top-level comment_, not a reply to that comment. Replies to replies are not supported.

        :return: The in_reply_to of this PullsCreateReviewCommentAlternativeRequest.
        :rtype: int
        """
        return self._in_reply_to

    @in_reply_to.setter
    def in_reply_to(self, in_reply_to):
        """Sets the in_reply_to of this PullsCreateReviewCommentAlternativeRequest.

        The comment ID to reply to. **Note**: This must be the ID of a _top-level comment_, not a reply to that comment. Replies to replies are not supported.

        :param in_reply_to: The in_reply_to of this PullsCreateReviewCommentAlternativeRequest.
        :type in_reply_to: int
        """

        self._in_reply_to = in_reply_to
