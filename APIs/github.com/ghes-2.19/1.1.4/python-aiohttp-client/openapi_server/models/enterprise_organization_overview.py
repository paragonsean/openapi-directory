# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseOrganizationOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled_orgs: int=None, total_orgs: int=None, total_team_members: int=None, total_teams: int=None):
        """EnterpriseOrganizationOverview - a model defined in OpenAPI

        :param disabled_orgs: The disabled_orgs of this EnterpriseOrganizationOverview.
        :param total_orgs: The total_orgs of this EnterpriseOrganizationOverview.
        :param total_team_members: The total_team_members of this EnterpriseOrganizationOverview.
        :param total_teams: The total_teams of this EnterpriseOrganizationOverview.
        """
        self.openapi_types = {
            'disabled_orgs': int,
            'total_orgs': int,
            'total_team_members': int,
            'total_teams': int
        }

        self.attribute_map = {
            'disabled_orgs': 'disabled_orgs',
            'total_orgs': 'total_orgs',
            'total_team_members': 'total_team_members',
            'total_teams': 'total_teams'
        }

        self._disabled_orgs = disabled_orgs
        self._total_orgs = total_orgs
        self._total_team_members = total_team_members
        self._total_teams = total_teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseOrganizationOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-organization-overview of this EnterpriseOrganizationOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled_orgs(self):
        """Gets the disabled_orgs of this EnterpriseOrganizationOverview.


        :return: The disabled_orgs of this EnterpriseOrganizationOverview.
        :rtype: int
        """
        return self._disabled_orgs

    @disabled_orgs.setter
    def disabled_orgs(self, disabled_orgs):
        """Sets the disabled_orgs of this EnterpriseOrganizationOverview.


        :param disabled_orgs: The disabled_orgs of this EnterpriseOrganizationOverview.
        :type disabled_orgs: int
        """
        if disabled_orgs is None:
            raise ValueError("Invalid value for `disabled_orgs`, must not be `None`")

        self._disabled_orgs = disabled_orgs

    @property
    def total_orgs(self):
        """Gets the total_orgs of this EnterpriseOrganizationOverview.


        :return: The total_orgs of this EnterpriseOrganizationOverview.
        :rtype: int
        """
        return self._total_orgs

    @total_orgs.setter
    def total_orgs(self, total_orgs):
        """Sets the total_orgs of this EnterpriseOrganizationOverview.


        :param total_orgs: The total_orgs of this EnterpriseOrganizationOverview.
        :type total_orgs: int
        """
        if total_orgs is None:
            raise ValueError("Invalid value for `total_orgs`, must not be `None`")

        self._total_orgs = total_orgs

    @property
    def total_team_members(self):
        """Gets the total_team_members of this EnterpriseOrganizationOverview.


        :return: The total_team_members of this EnterpriseOrganizationOverview.
        :rtype: int
        """
        return self._total_team_members

    @total_team_members.setter
    def total_team_members(self, total_team_members):
        """Sets the total_team_members of this EnterpriseOrganizationOverview.


        :param total_team_members: The total_team_members of this EnterpriseOrganizationOverview.
        :type total_team_members: int
        """
        if total_team_members is None:
            raise ValueError("Invalid value for `total_team_members`, must not be `None`")

        self._total_team_members = total_team_members

    @property
    def total_teams(self):
        """Gets the total_teams of this EnterpriseOrganizationOverview.


        :return: The total_teams of this EnterpriseOrganizationOverview.
        :rtype: int
        """
        return self._total_teams

    @total_teams.setter
    def total_teams(self, total_teams):
        """Sets the total_teams of this EnterpriseOrganizationOverview.


        :param total_teams: The total_teams of this EnterpriseOrganizationOverview.
        :type total_teams: int
        """
        if total_teams is None:
            raise ValueError("Invalid value for `total_teams`, must not be `None`")

        self._total_teams = total_teams
