# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collaborator_permissions import CollaboratorPermissions
from openapi_server import util


class Collaborator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, email: str=None, events_url: str=None, followers_url: str=None, following_url: str=None, gists_url: str=None, gravatar_id: str=None, html_url: str=None, id: int=None, login: str=None, name: str=None, node_id: str=None, organizations_url: str=None, permissions: CollaboratorPermissions=None, received_events_url: str=None, repos_url: str=None, site_admin: bool=None, starred_url: str=None, subscriptions_url: str=None, type: str=None, url: str=None):
        """Collaborator - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this Collaborator.
        :param email: The email of this Collaborator.
        :param events_url: The events_url of this Collaborator.
        :param followers_url: The followers_url of this Collaborator.
        :param following_url: The following_url of this Collaborator.
        :param gists_url: The gists_url of this Collaborator.
        :param gravatar_id: The gravatar_id of this Collaborator.
        :param html_url: The html_url of this Collaborator.
        :param id: The id of this Collaborator.
        :param login: The login of this Collaborator.
        :param name: The name of this Collaborator.
        :param node_id: The node_id of this Collaborator.
        :param organizations_url: The organizations_url of this Collaborator.
        :param permissions: The permissions of this Collaborator.
        :param received_events_url: The received_events_url of this Collaborator.
        :param repos_url: The repos_url of this Collaborator.
        :param site_admin: The site_admin of this Collaborator.
        :param starred_url: The starred_url of this Collaborator.
        :param subscriptions_url: The subscriptions_url of this Collaborator.
        :param type: The type of this Collaborator.
        :param url: The url of this Collaborator.
        """
        self.openapi_types = {
            'avatar_url': str,
            'email': str,
            'events_url': str,
            'followers_url': str,
            'following_url': str,
            'gists_url': str,
            'gravatar_id': str,
            'html_url': str,
            'id': int,
            'login': str,
            'name': str,
            'node_id': str,
            'organizations_url': str,
            'permissions': CollaboratorPermissions,
            'received_events_url': str,
            'repos_url': str,
            'site_admin': bool,
            'starred_url': str,
            'subscriptions_url': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'email': 'email',
            'events_url': 'events_url',
            'followers_url': 'followers_url',
            'following_url': 'following_url',
            'gists_url': 'gists_url',
            'gravatar_id': 'gravatar_id',
            'html_url': 'html_url',
            'id': 'id',
            'login': 'login',
            'name': 'name',
            'node_id': 'node_id',
            'organizations_url': 'organizations_url',
            'permissions': 'permissions',
            'received_events_url': 'received_events_url',
            'repos_url': 'repos_url',
            'site_admin': 'site_admin',
            'starred_url': 'starred_url',
            'subscriptions_url': 'subscriptions_url',
            'type': 'type',
            'url': 'url'
        }

        self._avatar_url = avatar_url
        self._email = email
        self._events_url = events_url
        self._followers_url = followers_url
        self._following_url = following_url
        self._gists_url = gists_url
        self._gravatar_id = gravatar_id
        self._html_url = html_url
        self._id = id
        self._login = login
        self._name = name
        self._node_id = node_id
        self._organizations_url = organizations_url
        self._permissions = permissions
        self._received_events_url = received_events_url
        self._repos_url = repos_url
        self._site_admin = site_admin
        self._starred_url = starred_url
        self._subscriptions_url = subscriptions_url
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collaborator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The collaborator of this Collaborator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Collaborator.


        :return: The avatar_url of this Collaborator.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Collaborator.


        :param avatar_url: The avatar_url of this Collaborator.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")

        self._avatar_url = avatar_url

    @property
    def email(self):
        """Gets the email of this Collaborator.


        :return: The email of this Collaborator.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Collaborator.


        :param email: The email of this Collaborator.
        :type email: str
        """

        self._email = email

    @property
    def events_url(self):
        """Gets the events_url of this Collaborator.


        :return: The events_url of this Collaborator.
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this Collaborator.


        :param events_url: The events_url of this Collaborator.
        :type events_url: str
        """
        if events_url is None:
            raise ValueError("Invalid value for `events_url`, must not be `None`")

        self._events_url = events_url

    @property
    def followers_url(self):
        """Gets the followers_url of this Collaborator.


        :return: The followers_url of this Collaborator.
        :rtype: str
        """
        return self._followers_url

    @followers_url.setter
    def followers_url(self, followers_url):
        """Sets the followers_url of this Collaborator.


        :param followers_url: The followers_url of this Collaborator.
        :type followers_url: str
        """
        if followers_url is None:
            raise ValueError("Invalid value for `followers_url`, must not be `None`")

        self._followers_url = followers_url

    @property
    def following_url(self):
        """Gets the following_url of this Collaborator.


        :return: The following_url of this Collaborator.
        :rtype: str
        """
        return self._following_url

    @following_url.setter
    def following_url(self, following_url):
        """Sets the following_url of this Collaborator.


        :param following_url: The following_url of this Collaborator.
        :type following_url: str
        """
        if following_url is None:
            raise ValueError("Invalid value for `following_url`, must not be `None`")

        self._following_url = following_url

    @property
    def gists_url(self):
        """Gets the gists_url of this Collaborator.


        :return: The gists_url of this Collaborator.
        :rtype: str
        """
        return self._gists_url

    @gists_url.setter
    def gists_url(self, gists_url):
        """Sets the gists_url of this Collaborator.


        :param gists_url: The gists_url of this Collaborator.
        :type gists_url: str
        """
        if gists_url is None:
            raise ValueError("Invalid value for `gists_url`, must not be `None`")

        self._gists_url = gists_url

    @property
    def gravatar_id(self):
        """Gets the gravatar_id of this Collaborator.


        :return: The gravatar_id of this Collaborator.
        :rtype: str
        """
        return self._gravatar_id

    @gravatar_id.setter
    def gravatar_id(self, gravatar_id):
        """Sets the gravatar_id of this Collaborator.


        :param gravatar_id: The gravatar_id of this Collaborator.
        :type gravatar_id: str
        """
        if gravatar_id is None:
            raise ValueError("Invalid value for `gravatar_id`, must not be `None`")

        self._gravatar_id = gravatar_id

    @property
    def html_url(self):
        """Gets the html_url of this Collaborator.


        :return: The html_url of this Collaborator.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Collaborator.


        :param html_url: The html_url of this Collaborator.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Collaborator.


        :return: The id of this Collaborator.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collaborator.


        :param id: The id of this Collaborator.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def login(self):
        """Gets the login of this Collaborator.


        :return: The login of this Collaborator.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Collaborator.


        :param login: The login of this Collaborator.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def name(self):
        """Gets the name of this Collaborator.


        :return: The name of this Collaborator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Collaborator.


        :param name: The name of this Collaborator.
        :type name: str
        """

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this Collaborator.


        :return: The node_id of this Collaborator.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Collaborator.


        :param node_id: The node_id of this Collaborator.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def organizations_url(self):
        """Gets the organizations_url of this Collaborator.


        :return: The organizations_url of this Collaborator.
        :rtype: str
        """
        return self._organizations_url

    @organizations_url.setter
    def organizations_url(self, organizations_url):
        """Sets the organizations_url of this Collaborator.


        :param organizations_url: The organizations_url of this Collaborator.
        :type organizations_url: str
        """
        if organizations_url is None:
            raise ValueError("Invalid value for `organizations_url`, must not be `None`")

        self._organizations_url = organizations_url

    @property
    def permissions(self):
        """Gets the permissions of this Collaborator.


        :return: The permissions of this Collaborator.
        :rtype: CollaboratorPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Collaborator.


        :param permissions: The permissions of this Collaborator.
        :type permissions: CollaboratorPermissions
        """

        self._permissions = permissions

    @property
    def received_events_url(self):
        """Gets the received_events_url of this Collaborator.


        :return: The received_events_url of this Collaborator.
        :rtype: str
        """
        return self._received_events_url

    @received_events_url.setter
    def received_events_url(self, received_events_url):
        """Sets the received_events_url of this Collaborator.


        :param received_events_url: The received_events_url of this Collaborator.
        :type received_events_url: str
        """
        if received_events_url is None:
            raise ValueError("Invalid value for `received_events_url`, must not be `None`")

        self._received_events_url = received_events_url

    @property
    def repos_url(self):
        """Gets the repos_url of this Collaborator.


        :return: The repos_url of this Collaborator.
        :rtype: str
        """
        return self._repos_url

    @repos_url.setter
    def repos_url(self, repos_url):
        """Sets the repos_url of this Collaborator.


        :param repos_url: The repos_url of this Collaborator.
        :type repos_url: str
        """
        if repos_url is None:
            raise ValueError("Invalid value for `repos_url`, must not be `None`")

        self._repos_url = repos_url

    @property
    def site_admin(self):
        """Gets the site_admin of this Collaborator.


        :return: The site_admin of this Collaborator.
        :rtype: bool
        """
        return self._site_admin

    @site_admin.setter
    def site_admin(self, site_admin):
        """Sets the site_admin of this Collaborator.


        :param site_admin: The site_admin of this Collaborator.
        :type site_admin: bool
        """
        if site_admin is None:
            raise ValueError("Invalid value for `site_admin`, must not be `None`")

        self._site_admin = site_admin

    @property
    def starred_url(self):
        """Gets the starred_url of this Collaborator.


        :return: The starred_url of this Collaborator.
        :rtype: str
        """
        return self._starred_url

    @starred_url.setter
    def starred_url(self, starred_url):
        """Sets the starred_url of this Collaborator.


        :param starred_url: The starred_url of this Collaborator.
        :type starred_url: str
        """
        if starred_url is None:
            raise ValueError("Invalid value for `starred_url`, must not be `None`")

        self._starred_url = starred_url

    @property
    def subscriptions_url(self):
        """Gets the subscriptions_url of this Collaborator.


        :return: The subscriptions_url of this Collaborator.
        :rtype: str
        """
        return self._subscriptions_url

    @subscriptions_url.setter
    def subscriptions_url(self, subscriptions_url):
        """Sets the subscriptions_url of this Collaborator.


        :param subscriptions_url: The subscriptions_url of this Collaborator.
        :type subscriptions_url: str
        """
        if subscriptions_url is None:
            raise ValueError("Invalid value for `subscriptions_url`, must not be `None`")

        self._subscriptions_url = subscriptions_url

    @property
    def type(self):
        """Gets the type of this Collaborator.


        :return: The type of this Collaborator.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Collaborator.


        :param type: The type of this Collaborator.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this Collaborator.


        :return: The url of this Collaborator.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Collaborator.


        :param url: The url of this Collaborator.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
