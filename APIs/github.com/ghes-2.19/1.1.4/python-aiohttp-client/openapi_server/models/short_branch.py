# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branch_protection import BranchProtection
from openapi_server.models.commit_search_result_item_commit_tree import CommitSearchResultItemCommitTree
from openapi_server import util


class ShortBranch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: CommitSearchResultItemCommitTree=None, name: str=None, protected: bool=None, protection: BranchProtection=None, protection_url: str=None):
        """ShortBranch - a model defined in OpenAPI

        :param commit: The commit of this ShortBranch.
        :param name: The name of this ShortBranch.
        :param protected: The protected of this ShortBranch.
        :param protection: The protection of this ShortBranch.
        :param protection_url: The protection_url of this ShortBranch.
        """
        self.openapi_types = {
            'commit': CommitSearchResultItemCommitTree,
            'name': str,
            'protected': bool,
            'protection': BranchProtection,
            'protection_url': str
        }

        self.attribute_map = {
            'commit': 'commit',
            'name': 'name',
            'protected': 'protected',
            'protection': 'protection',
            'protection_url': 'protection_url'
        }

        self._commit = commit
        self._name = name
        self._protected = protected
        self._protection = protection
        self._protection_url = protection_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShortBranch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The short-branch of this ShortBranch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this ShortBranch.


        :return: The commit of this ShortBranch.
        :rtype: CommitSearchResultItemCommitTree
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this ShortBranch.


        :param commit: The commit of this ShortBranch.
        :type commit: CommitSearchResultItemCommitTree
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def name(self):
        """Gets the name of this ShortBranch.


        :return: The name of this ShortBranch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShortBranch.


        :param name: The name of this ShortBranch.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def protected(self):
        """Gets the protected of this ShortBranch.


        :return: The protected of this ShortBranch.
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this ShortBranch.


        :param protected: The protected of this ShortBranch.
        :type protected: bool
        """
        if protected is None:
            raise ValueError("Invalid value for `protected`, must not be `None`")

        self._protected = protected

    @property
    def protection(self):
        """Gets the protection of this ShortBranch.


        :return: The protection of this ShortBranch.
        :rtype: BranchProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this ShortBranch.


        :param protection: The protection of this ShortBranch.
        :type protection: BranchProtection
        """

        self._protection = protection

    @property
    def protection_url(self):
        """Gets the protection_url of this ShortBranch.


        :return: The protection_url of this ShortBranch.
        :rtype: str
        """
        return self._protection_url

    @protection_url.setter
    def protection_url(self, protection_url):
        """Sets the protection_url of this ShortBranch.


        :param protection_url: The protection_url of this ShortBranch.
        :type protection_url: str
        """

        self._protection_url = protection_url
