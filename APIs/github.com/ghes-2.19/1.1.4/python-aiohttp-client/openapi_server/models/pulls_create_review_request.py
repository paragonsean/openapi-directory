# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pulls_create_review_request_comments_inner import PullsCreateReviewRequestCommentsInner
from openapi_server import util


class PullsCreateReviewRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, comments: List[PullsCreateReviewRequestCommentsInner]=None, commit_id: str=None, event: str=None):
        """PullsCreateReviewRequest - a model defined in OpenAPI

        :param body: The body of this PullsCreateReviewRequest.
        :param comments: The comments of this PullsCreateReviewRequest.
        :param commit_id: The commit_id of this PullsCreateReviewRequest.
        :param event: The event of this PullsCreateReviewRequest.
        """
        self.openapi_types = {
            'body': str,
            'comments': List[PullsCreateReviewRequestCommentsInner],
            'commit_id': str,
            'event': str
        }

        self.attribute_map = {
            'body': 'body',
            'comments': 'comments',
            'commit_id': 'commit_id',
            'event': 'event'
        }

        self._body = body
        self._comments = comments
        self._commit_id = commit_id
        self._event = event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullsCreateReviewRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pulls_create_review_request of this PullsCreateReviewRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this PullsCreateReviewRequest.

        **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.

        :return: The body of this PullsCreateReviewRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullsCreateReviewRequest.

        **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.

        :param body: The body of this PullsCreateReviewRequest.
        :type body: str
        """

        self._body = body

    @property
    def comments(self):
        """Gets the comments of this PullsCreateReviewRequest.

        Use the following table to specify the location, destination, and contents of the draft review comment.

        :return: The comments of this PullsCreateReviewRequest.
        :rtype: List[PullsCreateReviewRequestCommentsInner]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PullsCreateReviewRequest.

        Use the following table to specify the location, destination, and contents of the draft review comment.

        :param comments: The comments of this PullsCreateReviewRequest.
        :type comments: List[PullsCreateReviewRequestCommentsInner]
        """

        self._comments = comments

    @property
    def commit_id(self):
        """Gets the commit_id of this PullsCreateReviewRequest.

        The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.

        :return: The commit_id of this PullsCreateReviewRequest.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this PullsCreateReviewRequest.

        The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.

        :param commit_id: The commit_id of this PullsCreateReviewRequest.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def event(self):
        """Gets the event of this PullsCreateReviewRequest.

        The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@2.19/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.

        :return: The event of this PullsCreateReviewRequest.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this PullsCreateReviewRequest.

        The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@2.19/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.

        :param event: The event of this PullsCreateReviewRequest.
        :type event: str
        """
        allowed_values = ["APPROVE", "REQUEST_CHANGES", "COMMENT"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event
