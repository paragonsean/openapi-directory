# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GitCreateRefRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, ref: str=None, sha: str=None):
        """GitCreateRefRequest - a model defined in OpenAPI

        :param key: The key of this GitCreateRefRequest.
        :param ref: The ref of this GitCreateRefRequest.
        :param sha: The sha of this GitCreateRefRequest.
        """
        self.openapi_types = {
            'key': str,
            'ref': str,
            'sha': str
        }

        self.attribute_map = {
            'key': 'key',
            'ref': 'ref',
            'sha': 'sha'
        }

        self._key = key
        self._ref = ref
        self._sha = sha

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitCreateRefRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The git_create_ref_request of this GitCreateRefRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this GitCreateRefRequest.


        :return: The key of this GitCreateRefRequest.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GitCreateRefRequest.


        :param key: The key of this GitCreateRefRequest.
        :type key: str
        """

        self._key = key

    @property
    def ref(self):
        """Gets the ref of this GitCreateRefRequest.

        The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.

        :return: The ref of this GitCreateRefRequest.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this GitCreateRefRequest.

        The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.

        :param ref: The ref of this GitCreateRefRequest.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref

    @property
    def sha(self):
        """Gets the sha of this GitCreateRefRequest.

        The SHA1 value for this reference.

        :return: The sha of this GitCreateRefRequest.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this GitCreateRefRequest.

        The SHA1 value for this reference.

        :param sha: The sha of this GitCreateRefRequest.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha
