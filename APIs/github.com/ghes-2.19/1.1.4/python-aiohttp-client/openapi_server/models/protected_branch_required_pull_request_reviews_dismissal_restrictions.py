# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_user import SimpleUser
from openapi_server.models.team import Team
from openapi_server import util


class ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, teams: List[Team]=None, teams_url: str=None, url: str=None, users: List[SimpleUser]=None, users_url: str=None):
        """ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions - a model defined in OpenAPI

        :param teams: The teams of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :param teams_url: The teams_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :param url: The url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :param users: The users of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :param users_url: The users_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        """
        self.openapi_types = {
            'teams': List[Team],
            'teams_url': str,
            'url': str,
            'users': List[SimpleUser],
            'users_url': str
        }

        self.attribute_map = {
            'teams': 'teams',
            'teams_url': 'teams_url',
            'url': 'url',
            'users': 'users',
            'users_url': 'users_url'
        }

        self._teams = teams
        self._teams_url = teams_url
        self._url = url
        self._users = users
        self._users_url = users_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The protected_branch_required_pull_request_reviews_dismissal_restrictions of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def teams(self):
        """Gets the teams of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :return: The teams of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :rtype: List[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :param teams: The teams of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :type teams: List[Team]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")

        self._teams = teams

    @property
    def teams_url(self):
        """Gets the teams_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :return: The teams_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :rtype: str
        """
        return self._teams_url

    @teams_url.setter
    def teams_url(self, teams_url):
        """Sets the teams_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :param teams_url: The teams_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :type teams_url: str
        """
        if teams_url is None:
            raise ValueError("Invalid value for `teams_url`, must not be `None`")

        self._teams_url = teams_url

    @property
    def url(self):
        """Gets the url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :return: The url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :param url: The url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def users(self):
        """Gets the users of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :return: The users of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :rtype: List[SimpleUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :param users: The users of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :type users: List[SimpleUser]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users

    @property
    def users_url(self):
        """Gets the users_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :return: The users_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :rtype: str
        """
        return self._users_url

    @users_url.setter
    def users_url(self, users_url):
        """Sets the users_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.


        :param users_url: The users_url of this ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.
        :type users_url: str
        """
        if users_url is None:
            raise ValueError("Invalid value for `users_url`, must not be `None`")

        self._users_url = users_url
