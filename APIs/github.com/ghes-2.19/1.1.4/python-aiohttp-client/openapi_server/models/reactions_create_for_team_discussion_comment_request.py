# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReactionsCreateForTeamDiscussionCommentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None):
        """ReactionsCreateForTeamDiscussionCommentRequest - a model defined in OpenAPI

        :param content: The content of this ReactionsCreateForTeamDiscussionCommentRequest.
        """
        self.openapi_types = {
            'content': str
        }

        self.attribute_map = {
            'content': 'content'
        }

        self._content = content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReactionsCreateForTeamDiscussionCommentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reactions_create_for_team_discussion_comment_request of this ReactionsCreateForTeamDiscussionCommentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ReactionsCreateForTeamDiscussionCommentRequest.

        The [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types) to add to the team discussion comment.

        :return: The content of this ReactionsCreateForTeamDiscussionCommentRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ReactionsCreateForTeamDiscussionCommentRequest.

        The [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types) to add to the team discussion comment.

        :param content: The content of this ReactionsCreateForTeamDiscussionCommentRequest.
        :type content: str
        """
        allowed_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]  # noqa: E501
        if content not in allowed_values:
            raise ValueError(
                "Invalid value for `content` ({0}), must be one of {1}"
                .format(content, allowed_values)
            )

        self._content = content
