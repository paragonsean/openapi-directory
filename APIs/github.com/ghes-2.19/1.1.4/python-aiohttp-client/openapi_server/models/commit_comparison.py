# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit import Commit
from openapi_server.models.diff_entry import DiffEntry
from openapi_server import util


class CommitComparison(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ahead_by: int=None, base_commit: Commit=None, behind_by: int=None, commits: List[Commit]=None, diff_url: str=None, files: List[DiffEntry]=None, html_url: str=None, merge_base_commit: Commit=None, patch_url: str=None, permalink_url: str=None, status: str=None, total_commits: int=None, url: str=None):
        """CommitComparison - a model defined in OpenAPI

        :param ahead_by: The ahead_by of this CommitComparison.
        :param base_commit: The base_commit of this CommitComparison.
        :param behind_by: The behind_by of this CommitComparison.
        :param commits: The commits of this CommitComparison.
        :param diff_url: The diff_url of this CommitComparison.
        :param files: The files of this CommitComparison.
        :param html_url: The html_url of this CommitComparison.
        :param merge_base_commit: The merge_base_commit of this CommitComparison.
        :param patch_url: The patch_url of this CommitComparison.
        :param permalink_url: The permalink_url of this CommitComparison.
        :param status: The status of this CommitComparison.
        :param total_commits: The total_commits of this CommitComparison.
        :param url: The url of this CommitComparison.
        """
        self.openapi_types = {
            'ahead_by': int,
            'base_commit': Commit,
            'behind_by': int,
            'commits': List[Commit],
            'diff_url': str,
            'files': List[DiffEntry],
            'html_url': str,
            'merge_base_commit': Commit,
            'patch_url': str,
            'permalink_url': str,
            'status': str,
            'total_commits': int,
            'url': str
        }

        self.attribute_map = {
            'ahead_by': 'ahead_by',
            'base_commit': 'base_commit',
            'behind_by': 'behind_by',
            'commits': 'commits',
            'diff_url': 'diff_url',
            'files': 'files',
            'html_url': 'html_url',
            'merge_base_commit': 'merge_base_commit',
            'patch_url': 'patch_url',
            'permalink_url': 'permalink_url',
            'status': 'status',
            'total_commits': 'total_commits',
            'url': 'url'
        }

        self._ahead_by = ahead_by
        self._base_commit = base_commit
        self._behind_by = behind_by
        self._commits = commits
        self._diff_url = diff_url
        self._files = files
        self._html_url = html_url
        self._merge_base_commit = merge_base_commit
        self._patch_url = patch_url
        self._permalink_url = permalink_url
        self._status = status
        self._total_commits = total_commits
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitComparison':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The commit-comparison of this CommitComparison.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ahead_by(self):
        """Gets the ahead_by of this CommitComparison.


        :return: The ahead_by of this CommitComparison.
        :rtype: int
        """
        return self._ahead_by

    @ahead_by.setter
    def ahead_by(self, ahead_by):
        """Sets the ahead_by of this CommitComparison.


        :param ahead_by: The ahead_by of this CommitComparison.
        :type ahead_by: int
        """
        if ahead_by is None:
            raise ValueError("Invalid value for `ahead_by`, must not be `None`")

        self._ahead_by = ahead_by

    @property
    def base_commit(self):
        """Gets the base_commit of this CommitComparison.


        :return: The base_commit of this CommitComparison.
        :rtype: Commit
        """
        return self._base_commit

    @base_commit.setter
    def base_commit(self, base_commit):
        """Sets the base_commit of this CommitComparison.


        :param base_commit: The base_commit of this CommitComparison.
        :type base_commit: Commit
        """
        if base_commit is None:
            raise ValueError("Invalid value for `base_commit`, must not be `None`")

        self._base_commit = base_commit

    @property
    def behind_by(self):
        """Gets the behind_by of this CommitComparison.


        :return: The behind_by of this CommitComparison.
        :rtype: int
        """
        return self._behind_by

    @behind_by.setter
    def behind_by(self, behind_by):
        """Sets the behind_by of this CommitComparison.


        :param behind_by: The behind_by of this CommitComparison.
        :type behind_by: int
        """
        if behind_by is None:
            raise ValueError("Invalid value for `behind_by`, must not be `None`")

        self._behind_by = behind_by

    @property
    def commits(self):
        """Gets the commits of this CommitComparison.


        :return: The commits of this CommitComparison.
        :rtype: List[Commit]
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """Sets the commits of this CommitComparison.


        :param commits: The commits of this CommitComparison.
        :type commits: List[Commit]
        """
        if commits is None:
            raise ValueError("Invalid value for `commits`, must not be `None`")

        self._commits = commits

    @property
    def diff_url(self):
        """Gets the diff_url of this CommitComparison.


        :return: The diff_url of this CommitComparison.
        :rtype: str
        """
        return self._diff_url

    @diff_url.setter
    def diff_url(self, diff_url):
        """Sets the diff_url of this CommitComparison.


        :param diff_url: The diff_url of this CommitComparison.
        :type diff_url: str
        """
        if diff_url is None:
            raise ValueError("Invalid value for `diff_url`, must not be `None`")

        self._diff_url = diff_url

    @property
    def files(self):
        """Gets the files of this CommitComparison.


        :return: The files of this CommitComparison.
        :rtype: List[DiffEntry]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CommitComparison.


        :param files: The files of this CommitComparison.
        :type files: List[DiffEntry]
        """

        self._files = files

    @property
    def html_url(self):
        """Gets the html_url of this CommitComparison.


        :return: The html_url of this CommitComparison.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this CommitComparison.


        :param html_url: The html_url of this CommitComparison.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def merge_base_commit(self):
        """Gets the merge_base_commit of this CommitComparison.


        :return: The merge_base_commit of this CommitComparison.
        :rtype: Commit
        """
        return self._merge_base_commit

    @merge_base_commit.setter
    def merge_base_commit(self, merge_base_commit):
        """Sets the merge_base_commit of this CommitComparison.


        :param merge_base_commit: The merge_base_commit of this CommitComparison.
        :type merge_base_commit: Commit
        """
        if merge_base_commit is None:
            raise ValueError("Invalid value for `merge_base_commit`, must not be `None`")

        self._merge_base_commit = merge_base_commit

    @property
    def patch_url(self):
        """Gets the patch_url of this CommitComparison.


        :return: The patch_url of this CommitComparison.
        :rtype: str
        """
        return self._patch_url

    @patch_url.setter
    def patch_url(self, patch_url):
        """Sets the patch_url of this CommitComparison.


        :param patch_url: The patch_url of this CommitComparison.
        :type patch_url: str
        """
        if patch_url is None:
            raise ValueError("Invalid value for `patch_url`, must not be `None`")

        self._patch_url = patch_url

    @property
    def permalink_url(self):
        """Gets the permalink_url of this CommitComparison.


        :return: The permalink_url of this CommitComparison.
        :rtype: str
        """
        return self._permalink_url

    @permalink_url.setter
    def permalink_url(self, permalink_url):
        """Sets the permalink_url of this CommitComparison.


        :param permalink_url: The permalink_url of this CommitComparison.
        :type permalink_url: str
        """
        if permalink_url is None:
            raise ValueError("Invalid value for `permalink_url`, must not be `None`")

        self._permalink_url = permalink_url

    @property
    def status(self):
        """Gets the status of this CommitComparison.


        :return: The status of this CommitComparison.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommitComparison.


        :param status: The status of this CommitComparison.
        :type status: str
        """
        allowed_values = ["diverged", "ahead", "behind", "identical"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_commits(self):
        """Gets the total_commits of this CommitComparison.


        :return: The total_commits of this CommitComparison.
        :rtype: int
        """
        return self._total_commits

    @total_commits.setter
    def total_commits(self, total_commits):
        """Sets the total_commits of this CommitComparison.


        :param total_commits: The total_commits of this CommitComparison.
        :type total_commits: int
        """
        if total_commits is None:
            raise ValueError("Invalid value for `total_commits`, must not be `None`")

        self._total_commits = total_commits

    @property
    def url(self):
        """Gets the url of this CommitComparison.


        :return: The url of this CommitComparison.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CommitComparison.


        :param url: The url of this CommitComparison.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
