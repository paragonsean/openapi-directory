# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LdapMappingUserPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaborators: int=None, name: str=None, private_repos: int=None, space: int=None):
        """LdapMappingUserPlan - a model defined in OpenAPI

        :param collaborators: The collaborators of this LdapMappingUserPlan.
        :param name: The name of this LdapMappingUserPlan.
        :param private_repos: The private_repos of this LdapMappingUserPlan.
        :param space: The space of this LdapMappingUserPlan.
        """
        self.openapi_types = {
            'collaborators': int,
            'name': str,
            'private_repos': int,
            'space': int
        }

        self.attribute_map = {
            'collaborators': 'collaborators',
            'name': 'name',
            'private_repos': 'private_repos',
            'space': 'space'
        }

        self._collaborators = collaborators
        self._name = name
        self._private_repos = private_repos
        self._space = space

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LdapMappingUserPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ldap_mapping_user_plan of this LdapMappingUserPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaborators(self):
        """Gets the collaborators of this LdapMappingUserPlan.


        :return: The collaborators of this LdapMappingUserPlan.
        :rtype: int
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this LdapMappingUserPlan.


        :param collaborators: The collaborators of this LdapMappingUserPlan.
        :type collaborators: int
        """
        if collaborators is None:
            raise ValueError("Invalid value for `collaborators`, must not be `None`")

        self._collaborators = collaborators

    @property
    def name(self):
        """Gets the name of this LdapMappingUserPlan.


        :return: The name of this LdapMappingUserPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapMappingUserPlan.


        :param name: The name of this LdapMappingUserPlan.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def private_repos(self):
        """Gets the private_repos of this LdapMappingUserPlan.


        :return: The private_repos of this LdapMappingUserPlan.
        :rtype: int
        """
        return self._private_repos

    @private_repos.setter
    def private_repos(self, private_repos):
        """Sets the private_repos of this LdapMappingUserPlan.


        :param private_repos: The private_repos of this LdapMappingUserPlan.
        :type private_repos: int
        """
        if private_repos is None:
            raise ValueError("Invalid value for `private_repos`, must not be `None`")

        self._private_repos = private_repos

    @property
    def space(self):
        """Gets the space of this LdapMappingUserPlan.


        :return: The space of this LdapMappingUserPlan.
        :rtype: int
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this LdapMappingUserPlan.


        :param space: The space of this LdapMappingUserPlan.
        :type space: int
        """
        if space is None:
            raise ValueError("Invalid value for `space`, must not be `None`")

        self._space = space
