# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branch_protection import BranchProtection
from openapi_server.models.branch_with_protection_links import BranchWithProtectionLinks
from openapi_server.models.commit import Commit
from openapi_server import util


class BranchWithProtection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: BranchWithProtectionLinks=None, commit: Commit=None, name: str=None, pattern: str=None, protected: bool=None, protection: BranchProtection=None, protection_url: str=None, required_approving_review_count: int=None):
        """BranchWithProtection - a model defined in OpenAPI

        :param links: The links of this BranchWithProtection.
        :param commit: The commit of this BranchWithProtection.
        :param name: The name of this BranchWithProtection.
        :param pattern: The pattern of this BranchWithProtection.
        :param protected: The protected of this BranchWithProtection.
        :param protection: The protection of this BranchWithProtection.
        :param protection_url: The protection_url of this BranchWithProtection.
        :param required_approving_review_count: The required_approving_review_count of this BranchWithProtection.
        """
        self.openapi_types = {
            'links': BranchWithProtectionLinks,
            'commit': Commit,
            'name': str,
            'pattern': str,
            'protected': bool,
            'protection': BranchProtection,
            'protection_url': str,
            'required_approving_review_count': int
        }

        self.attribute_map = {
            'links': '_links',
            'commit': 'commit',
            'name': 'name',
            'pattern': 'pattern',
            'protected': 'protected',
            'protection': 'protection',
            'protection_url': 'protection_url',
            'required_approving_review_count': 'required_approving_review_count'
        }

        self._links = links
        self._commit = commit
        self._name = name
        self._pattern = pattern
        self._protected = protected
        self._protection = protection
        self._protection_url = protection_url
        self._required_approving_review_count = required_approving_review_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BranchWithProtection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The branch-with-protection of this BranchWithProtection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this BranchWithProtection.


        :return: The links of this BranchWithProtection.
        :rtype: BranchWithProtectionLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BranchWithProtection.


        :param links: The links of this BranchWithProtection.
        :type links: BranchWithProtectionLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def commit(self):
        """Gets the commit of this BranchWithProtection.


        :return: The commit of this BranchWithProtection.
        :rtype: Commit
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this BranchWithProtection.


        :param commit: The commit of this BranchWithProtection.
        :type commit: Commit
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def name(self):
        """Gets the name of this BranchWithProtection.


        :return: The name of this BranchWithProtection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BranchWithProtection.


        :param name: The name of this BranchWithProtection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pattern(self):
        """Gets the pattern of this BranchWithProtection.


        :return: The pattern of this BranchWithProtection.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this BranchWithProtection.


        :param pattern: The pattern of this BranchWithProtection.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def protected(self):
        """Gets the protected of this BranchWithProtection.


        :return: The protected of this BranchWithProtection.
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this BranchWithProtection.


        :param protected: The protected of this BranchWithProtection.
        :type protected: bool
        """
        if protected is None:
            raise ValueError("Invalid value for `protected`, must not be `None`")

        self._protected = protected

    @property
    def protection(self):
        """Gets the protection of this BranchWithProtection.


        :return: The protection of this BranchWithProtection.
        :rtype: BranchProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this BranchWithProtection.


        :param protection: The protection of this BranchWithProtection.
        :type protection: BranchProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def protection_url(self):
        """Gets the protection_url of this BranchWithProtection.


        :return: The protection_url of this BranchWithProtection.
        :rtype: str
        """
        return self._protection_url

    @protection_url.setter
    def protection_url(self, protection_url):
        """Sets the protection_url of this BranchWithProtection.


        :param protection_url: The protection_url of this BranchWithProtection.
        :type protection_url: str
        """
        if protection_url is None:
            raise ValueError("Invalid value for `protection_url`, must not be `None`")

        self._protection_url = protection_url

    @property
    def required_approving_review_count(self):
        """Gets the required_approving_review_count of this BranchWithProtection.


        :return: The required_approving_review_count of this BranchWithProtection.
        :rtype: int
        """
        return self._required_approving_review_count

    @required_approving_review_count.setter
    def required_approving_review_count(self, required_approving_review_count):
        """Sets the required_approving_review_count of this BranchWithProtection.


        :param required_approving_review_count: The required_approving_review_count of this BranchWithProtection.
        :type required_approving_review_count: int
        """

        self._required_approving_review_count = required_approving_review_count
