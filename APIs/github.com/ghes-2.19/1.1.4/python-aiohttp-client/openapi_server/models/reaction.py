# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class Reaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, created_at: datetime=None, id: int=None, node_id: str=None, user: NullableSimpleUser=None):
        """Reaction - a model defined in OpenAPI

        :param content: The content of this Reaction.
        :param created_at: The created_at of this Reaction.
        :param id: The id of this Reaction.
        :param node_id: The node_id of this Reaction.
        :param user: The user of this Reaction.
        """
        self.openapi_types = {
            'content': str,
            'created_at': datetime,
            'id': int,
            'node_id': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'content': 'content',
            'created_at': 'created_at',
            'id': 'id',
            'node_id': 'node_id',
            'user': 'user'
        }

        self._content = content
        self._created_at = created_at
        self._id = id
        self._node_id = node_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reaction of this Reaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Reaction.

        The reaction to use

        :return: The content of this Reaction.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Reaction.

        The reaction to use

        :param content: The content of this Reaction.
        :type content: str
        """
        allowed_values = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"]  # noqa: E501
        if content not in allowed_values:
            raise ValueError(
                "Invalid value for `content` ({0}), must be one of {1}"
                .format(content, allowed_values)
            )

        self._content = content

    @property
    def created_at(self):
        """Gets the created_at of this Reaction.


        :return: The created_at of this Reaction.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Reaction.


        :param created_at: The created_at of this Reaction.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Reaction.


        :return: The id of this Reaction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Reaction.


        :param id: The id of this Reaction.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this Reaction.


        :return: The node_id of this Reaction.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Reaction.


        :param node_id: The node_id of this Reaction.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def user(self):
        """Gets the user of this Reaction.


        :return: The user of this Reaction.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Reaction.


        :param user: The user of this Reaction.
        :type user: NullableSimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
