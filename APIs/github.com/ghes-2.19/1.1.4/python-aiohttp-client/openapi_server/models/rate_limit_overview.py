# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rate_limit import RateLimit
from openapi_server.models.rate_limit_overview_resources import RateLimitOverviewResources
from openapi_server import util


class RateLimitOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rate: RateLimit=None, resources: RateLimitOverviewResources=None):
        """RateLimitOverview - a model defined in OpenAPI

        :param rate: The rate of this RateLimitOverview.
        :param resources: The resources of this RateLimitOverview.
        """
        self.openapi_types = {
            'rate': RateLimit,
            'resources': RateLimitOverviewResources
        }

        self.attribute_map = {
            'rate': 'rate',
            'resources': 'resources'
        }

        self._rate = rate
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateLimitOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rate-limit-overview of this RateLimitOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rate(self):
        """Gets the rate of this RateLimitOverview.


        :return: The rate of this RateLimitOverview.
        :rtype: RateLimit
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this RateLimitOverview.


        :param rate: The rate of this RateLimitOverview.
        :type rate: RateLimit
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def resources(self):
        """Gets the resources of this RateLimitOverview.


        :return: The resources of this RateLimitOverview.
        :rtype: RateLimitOverviewResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this RateLimitOverview.


        :param resources: The resources of this RateLimitOverview.
        :type resources: RateLimitOverviewResources
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources
