# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposCreateCommitStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str='default', description: str=None, state: str=None, target_url: str=None):
        """ReposCreateCommitStatusRequest - a model defined in OpenAPI

        :param context: The context of this ReposCreateCommitStatusRequest.
        :param description: The description of this ReposCreateCommitStatusRequest.
        :param state: The state of this ReposCreateCommitStatusRequest.
        :param target_url: The target_url of this ReposCreateCommitStatusRequest.
        """
        self.openapi_types = {
            'context': str,
            'description': str,
            'state': str,
            'target_url': str
        }

        self.attribute_map = {
            'context': 'context',
            'description': 'description',
            'state': 'state',
            'target_url': 'target_url'
        }

        self._context = context
        self._description = description
        self._state = state
        self._target_url = target_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposCreateCommitStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_create_commit_status_request of this ReposCreateCommitStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this ReposCreateCommitStatusRequest.

        A string label to differentiate this status from the status of other systems. This field is case-insensitive.

        :return: The context of this ReposCreateCommitStatusRequest.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ReposCreateCommitStatusRequest.

        A string label to differentiate this status from the status of other systems. This field is case-insensitive.

        :param context: The context of this ReposCreateCommitStatusRequest.
        :type context: str
        """

        self._context = context

    @property
    def description(self):
        """Gets the description of this ReposCreateCommitStatusRequest.

        A short description of the status.

        :return: The description of this ReposCreateCommitStatusRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReposCreateCommitStatusRequest.

        A short description of the status.

        :param description: The description of this ReposCreateCommitStatusRequest.
        :type description: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this ReposCreateCommitStatusRequest.

        The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.

        :return: The state of this ReposCreateCommitStatusRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReposCreateCommitStatusRequest.

        The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.

        :param state: The state of this ReposCreateCommitStatusRequest.
        :type state: str
        """
        allowed_values = ["error", "failure", "pending", "success"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target_url(self):
        """Gets the target_url of this ReposCreateCommitStatusRequest.

        The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.   For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:   `http://ci.example.com/user/repo/build/sha`

        :return: The target_url of this ReposCreateCommitStatusRequest.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this ReposCreateCommitStatusRequest.

        The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.   For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:   `http://ci.example.com/user/repo/build/sha`

        :param target_url: The target_url of this ReposCreateCommitStatusRequest.
        :type target_url: str
        """

        self._target_url = target_url
