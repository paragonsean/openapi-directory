# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OauthAuthorizationsCreateAuthorizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, fingerprint: str=None, note: str=None, note_url: str=None, scopes: List[str]=None):
        """OauthAuthorizationsCreateAuthorizationRequest - a model defined in OpenAPI

        :param client_id: The client_id of this OauthAuthorizationsCreateAuthorizationRequest.
        :param client_secret: The client_secret of this OauthAuthorizationsCreateAuthorizationRequest.
        :param fingerprint: The fingerprint of this OauthAuthorizationsCreateAuthorizationRequest.
        :param note: The note of this OauthAuthorizationsCreateAuthorizationRequest.
        :param note_url: The note_url of this OauthAuthorizationsCreateAuthorizationRequest.
        :param scopes: The scopes of this OauthAuthorizationsCreateAuthorizationRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'fingerprint': str,
            'note': str,
            'note_url': str,
            'scopes': List[str]
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'fingerprint': 'fingerprint',
            'note': 'note',
            'note_url': 'note_url',
            'scopes': 'scopes'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._fingerprint = fingerprint
        self._note = note
        self._note_url = note_url
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OauthAuthorizationsCreateAuthorizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The oauth_authorizations_create_authorization_request of this OauthAuthorizationsCreateAuthorizationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this OauthAuthorizationsCreateAuthorizationRequest.

        The OAuth app client key for which to create the token.

        :return: The client_id of this OauthAuthorizationsCreateAuthorizationRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OauthAuthorizationsCreateAuthorizationRequest.

        The OAuth app client key for which to create the token.

        :param client_id: The client_id of this OauthAuthorizationsCreateAuthorizationRequest.
        :type client_id: str
        """
        if client_id is not None and len(client_id) > 20:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `20`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OauthAuthorizationsCreateAuthorizationRequest.

        The OAuth app client secret for which to create the token.

        :return: The client_secret of this OauthAuthorizationsCreateAuthorizationRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OauthAuthorizationsCreateAuthorizationRequest.

        The OAuth app client secret for which to create the token.

        :param client_secret: The client_secret of this OauthAuthorizationsCreateAuthorizationRequest.
        :type client_secret: str
        """
        if client_secret is not None and len(client_secret) > 40:
            raise ValueError("Invalid value for `client_secret`, length must be less than or equal to `40`")

        self._client_secret = client_secret

    @property
    def fingerprint(self):
        """Gets the fingerprint of this OauthAuthorizationsCreateAuthorizationRequest.

        A unique string to distinguish an authorization from others created for the same client ID and user.

        :return: The fingerprint of this OauthAuthorizationsCreateAuthorizationRequest.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this OauthAuthorizationsCreateAuthorizationRequest.

        A unique string to distinguish an authorization from others created for the same client ID and user.

        :param fingerprint: The fingerprint of this OauthAuthorizationsCreateAuthorizationRequest.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def note(self):
        """Gets the note of this OauthAuthorizationsCreateAuthorizationRequest.

        A note to remind you what the OAuth token is for.

        :return: The note of this OauthAuthorizationsCreateAuthorizationRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this OauthAuthorizationsCreateAuthorizationRequest.

        A note to remind you what the OAuth token is for.

        :param note: The note of this OauthAuthorizationsCreateAuthorizationRequest.
        :type note: str
        """

        self._note = note

    @property
    def note_url(self):
        """Gets the note_url of this OauthAuthorizationsCreateAuthorizationRequest.

        A URL to remind you what app the OAuth token is for.

        :return: The note_url of this OauthAuthorizationsCreateAuthorizationRequest.
        :rtype: str
        """
        return self._note_url

    @note_url.setter
    def note_url(self, note_url):
        """Sets the note_url of this OauthAuthorizationsCreateAuthorizationRequest.

        A URL to remind you what app the OAuth token is for.

        :param note_url: The note_url of this OauthAuthorizationsCreateAuthorizationRequest.
        :type note_url: str
        """

        self._note_url = note_url

    @property
    def scopes(self):
        """Gets the scopes of this OauthAuthorizationsCreateAuthorizationRequest.

        A list of scopes that this authorization is in.

        :return: The scopes of this OauthAuthorizationsCreateAuthorizationRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OauthAuthorizationsCreateAuthorizationRequest.

        A list of scopes that this authorization is in.

        :param scopes: The scopes of this OauthAuthorizationsCreateAuthorizationRequest.
        :type scopes: List[str]
        """

        self._scopes = scopes
