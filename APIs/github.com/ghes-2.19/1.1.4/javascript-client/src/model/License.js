/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The License model module.
 * @module model/License
 * @version 1.1.4
 */
class License {
    /**
     * Constructs a new <code>License</code>.
     * License
     * @alias module:model/License
     * @param body {String} 
     * @param conditions {Array.<String>} 
     * @param description {String} 
     * @param featured {Boolean} 
     * @param htmlUrl {String} 
     * @param implementation {String} 
     * @param key {String} 
     * @param limitations {Array.<String>} 
     * @param name {String} 
     * @param nodeId {String} 
     * @param permissions {Array.<String>} 
     * @param spdxId {String} 
     * @param url {String} 
     */
    constructor(body, conditions, description, featured, htmlUrl, implementation, key, limitations, name, nodeId, permissions, spdxId, url) { 
        
        License.initialize(this, body, conditions, description, featured, htmlUrl, implementation, key, limitations, name, nodeId, permissions, spdxId, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, conditions, description, featured, htmlUrl, implementation, key, limitations, name, nodeId, permissions, spdxId, url) { 
        obj['body'] = body;
        obj['conditions'] = conditions;
        obj['description'] = description;
        obj['featured'] = featured;
        obj['html_url'] = htmlUrl;
        obj['implementation'] = implementation;
        obj['key'] = key;
        obj['limitations'] = limitations;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['permissions'] = permissions;
        obj['spdx_id'] = spdxId;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>License</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/License} obj Optional instance to populate.
     * @return {module:model/License} The populated <code>License</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new License();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('featured')) {
                obj['featured'] = ApiClient.convertToType(data['featured'], 'Boolean');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('implementation')) {
                obj['implementation'] = ApiClient.convertToType(data['implementation'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('limitations')) {
                obj['limitations'] = ApiClient.convertToType(data['limitations'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
            if (data.hasOwnProperty('spdx_id')) {
                obj['spdx_id'] = ApiClient.convertToType(data['spdx_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>License</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>License</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of License.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['conditions'])) {
            throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['implementation'] && !(typeof data['implementation'] === 'string' || data['implementation'] instanceof String)) {
            throw new Error("Expected the field `implementation` to be a primitive type in the JSON string but got " + data['implementation']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['limitations'])) {
            throw new Error("Expected the field `limitations` to be an array in the JSON data but got " + data['limitations']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permissions'])) {
            throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['spdx_id'] && !(typeof data['spdx_id'] === 'string' || data['spdx_id'] instanceof String)) {
            throw new Error("Expected the field `spdx_id` to be a primitive type in the JSON string but got " + data['spdx_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

License.RequiredProperties = ["body", "conditions", "description", "featured", "html_url", "implementation", "key", "limitations", "name", "node_id", "permissions", "spdx_id", "url"];

/**
 * @member {String} body
 */
License.prototype['body'] = undefined;

/**
 * @member {Array.<String>} conditions
 */
License.prototype['conditions'] = undefined;

/**
 * @member {String} description
 */
License.prototype['description'] = undefined;

/**
 * @member {Boolean} featured
 */
License.prototype['featured'] = undefined;

/**
 * @member {String} html_url
 */
License.prototype['html_url'] = undefined;

/**
 * @member {String} implementation
 */
License.prototype['implementation'] = undefined;

/**
 * @member {String} key
 */
License.prototype['key'] = undefined;

/**
 * @member {Array.<String>} limitations
 */
License.prototype['limitations'] = undefined;

/**
 * @member {String} name
 */
License.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
License.prototype['node_id'] = undefined;

/**
 * @member {Array.<String>} permissions
 */
License.prototype['permissions'] = undefined;

/**
 * @member {String} spdx_id
 */
License.prototype['spdx_id'] = undefined;

/**
 * @member {String} url
 */
License.prototype['url'] = undefined;






export default License;

