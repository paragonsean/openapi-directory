/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsCreateContentAttachmentRequest from '../model/AppsCreateContentAttachmentRequest';
import AppsCreateFromManifest201Response from '../model/AppsCreateFromManifest201Response';
import AppsCreateInstallationAccessTokenRequest from '../model/AppsCreateInstallationAccessTokenRequest';
import AppsGetInstallation415Response from '../model/AppsGetInstallation415Response';
import AppsListInstallationReposForAuthenticatedUser200Response from '../model/AppsListInstallationReposForAuthenticatedUser200Response';
import AppsListReposAccessibleToInstallation200Response from '../model/AppsListReposAccessibleToInstallation200Response';
import BasicError from '../model/BasicError';
import ContentReferenceAttachment from '../model/ContentReferenceAttachment';
import InstallationGhes2 from '../model/InstallationGhes2';
import InstallationToken from '../model/InstallationToken';
import Integration from '../model/Integration';
import OrgsListAppInstallations200Response from '../model/OrgsListAppInstallations200Response';
import ValidationError from '../model/ValidationError';
import ValidationErrorSimple from '../model/ValidationErrorSimple';

/**
* Apps service.
* @module api/AppsApi
* @version 1.1.4
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAddRepoToInstallation operation.
     * @callback module:api/AppsApi~appsAddRepoToInstallationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a repository to an app installation
     * Add a single repository to an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@2.19/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@2.19/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     * @param {Number} installationId installation_id parameter
     * @param {Number} repositoryId 
     * @param {module:api/AppsApi~appsAddRepoToInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAddRepoToInstallation(installationId, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsAddRepoToInstallation");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling appsAddRepoToInstallation");
      }

      let pathParams = {
        'installation_id': installationId,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/installations/{installation_id}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreateContentAttachment operation.
     * @callback module:api/AppsApi~appsCreateContentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentReferenceAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a content attachment
     * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/enterprise-server@2.19/webhooks/event-payloads/#content_reference) to create an attachment.  The app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://docs.github.com/enterprise-server@2.19/apps/using-content-attachments/)\" for details about content attachments.  You must use an [installation access token](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @param {String} owner The owner of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
     * @param {String} repo The name of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
     * @param {Number} contentReferenceId The `id` of the `content_reference` event.
     * @param {module:model/AppsCreateContentAttachmentRequest} appsCreateContentAttachmentRequest 
     * @param {module:api/AppsApi~appsCreateContentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentReferenceAttachment}
     */
    appsCreateContentAttachment(owner, repo, contentReferenceId, appsCreateContentAttachmentRequest, callback) {
      let postBody = appsCreateContentAttachmentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling appsCreateContentAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling appsCreateContentAttachment");
      }
      // verify the required parameter 'contentReferenceId' is set
      if (contentReferenceId === undefined || contentReferenceId === null) {
        throw new Error("Missing the required parameter 'contentReferenceId' when calling appsCreateContentAttachment");
      }
      // verify the required parameter 'appsCreateContentAttachmentRequest' is set
      if (appsCreateContentAttachmentRequest === undefined || appsCreateContentAttachmentRequest === null) {
        throw new Error("Missing the required parameter 'appsCreateContentAttachmentRequest' when calling appsCreateContentAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'content_reference_id': contentReferenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContentReferenceAttachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreateFromManifest operation.
     * @callback module:api/AppsApi~appsCreateFromManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsCreateFromManifest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a GitHub App from a manifest
     * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
     * @param {String} code 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AppsApi~appsCreateFromManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsCreateFromManifest201Response}
     */
    appsCreateFromManifest(code, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling appsCreateFromManifest");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppsCreateFromManifest201Response;
      return this.apiClient.callApi(
        '/app-manifests/{code}/conversions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreateInstallationAccessToken operation.
     * @callback module:api/AppsApi~appsCreateInstallationAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an installation access token for an app
     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.  You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} installationId installation_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/AppsCreateInstallationAccessTokenRequest} [appsCreateInstallationAccessTokenRequest] 
     * @param {module:api/AppsApi~appsCreateInstallationAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallationToken}
     */
    appsCreateInstallationAccessToken(accept, installationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appsCreateInstallationAccessTokenRequest'];
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsCreateInstallationAccessToken");
      }
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsCreateInstallationAccessToken");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstallationToken;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}/access_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDeleteInstallation operation.
     * @callback module:api/AppsApi~appsDeleteInstallationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an installation for the authenticated app
     * Uninstalls a GitHub App on a user, organization, or business account. You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} installationId installation_id parameter
     * @param {module:api/AppsApi~appsDeleteInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsDeleteInstallation(accept, installationId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsDeleteInstallation");
      }
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsDeleteInstallation");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetAuthenticated operation.
     * @callback module:api/AppsApi~appsGetAuthenticatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the authenticated app
     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/enterprise-server@2.19/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.  You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {module:api/AppsApi~appsGetAuthenticatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    appsGetAuthenticated(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetBySlug operation.
     * @callback module:api/AppsApi~appsGetBySlugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an app
     * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).  If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @param {String} appSlug 
     * @param {module:api/AppsApi~appsGetBySlugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    appsGetBySlug(appSlug, callback) {
      let postBody = null;
      // verify the required parameter 'appSlug' is set
      if (appSlug === undefined || appSlug === null) {
        throw new Error("Missing the required parameter 'appSlug' when calling appsGetBySlug");
      }

      let pathParams = {
        'app_slug': appSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/apps/{app_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetInstallation operation.
     * @callback module:api/AppsApi~appsGetInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallationGhes2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an installation for the authenticated app
     * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} installationId installation_id parameter
     * @param {module:api/AppsApi~appsGetInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallationGhes2}
     */
    appsGetInstallation(accept, installationId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsGetInstallation");
      }
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsGetInstallation");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstallationGhes2;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetOrgInstallation operation.
     * @callback module:api/AppsApi~appsGetOrgInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallationGhes2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization installation for the authenticated app
     * Enables an authenticated GitHub App to find the organization's installation information.  You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} accept This API is under preview and subject to change.
     * @param {String} org 
     * @param {module:api/AppsApi~appsGetOrgInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallationGhes2}
     */
    appsGetOrgInstallation(accept, org, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsGetOrgInstallation");
      }
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling appsGetOrgInstallation");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstallationGhes2;
      return this.apiClient.callApi(
        '/orgs/{org}/installation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetRepoInstallation operation.
     * @callback module:api/AppsApi~appsGetRepoInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallationGhes2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository installation for the authenticated app
     * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} accept This API is under preview and subject to change.
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:api/AppsApi~appsGetRepoInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallationGhes2}
     */
    appsGetRepoInstallation(accept, owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsGetRepoInstallation");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling appsGetRepoInstallation");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling appsGetRepoInstallation");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstallationGhes2;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/installation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetUserInstallation operation.
     * @callback module:api/AppsApi~appsGetUserInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallationGhes2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user installation for the authenticated app
     * Enables an authenticated GitHub App to find the user’s installation information.  You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} accept This API is under preview and subject to change.
     * @param {String} username 
     * @param {module:api/AppsApi~appsGetUserInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallationGhes2}
     */
    appsGetUserInstallation(accept, username, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsGetUserInstallation");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling appsGetUserInstallation");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstallationGhes2;
      return this.apiClient.callApi(
        '/users/{username}/installation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListInstallationReposForAuthenticatedUser operation.
     * @callback module:api/AppsApi~appsListInstallationReposForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsListInstallationReposForAuthenticatedUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories accessible to the user access token
     * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The access the user has to each repository is included in the hash under the `permissions` key.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} installationId installation_id parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/AppsApi~appsListInstallationReposForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsListInstallationReposForAuthenticatedUser200Response}
     */
    appsListInstallationReposForAuthenticatedUser(accept, installationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsListInstallationReposForAuthenticatedUser");
      }
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsListInstallationReposForAuthenticatedUser");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsListInstallationReposForAuthenticatedUser200Response;
      return this.apiClient.callApi(
        '/user/installations/{installation_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListInstallations operation.
     * @callback module:api/AppsApi~appsListInstallationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InstallationGhes2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List installations for the authenticated app
     * You must use a [JWT](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.  The permissions the installation has are included under the `permissions` key.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/AppsApi~appsListInstallationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InstallationGhes2>}
     */
    appsListInstallations(accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsListInstallations");
      }

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InstallationGhes2];
      return this.apiClient.callApi(
        '/app/installations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListInstallationsForAuthenticatedUser operation.
     * @callback module:api/AppsApi~appsListInstallationsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgsListAppInstallations200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List app installations accessible to the user access token
     * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.  You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You can find the permissions for the installation under the `permissions` key.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/AppsApi~appsListInstallationsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgsListAppInstallations200Response}
     */
    appsListInstallationsForAuthenticatedUser(accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsListInstallationsForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgsListAppInstallations200Response;
      return this.apiClient.callApi(
        '/user/installations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListReposAccessibleToInstallation operation.
     * @callback module:api/AppsApi~appsListReposAccessibleToInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsListReposAccessibleToInstallation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories accessible to the app installation
     * List repositories that an app installation can access.  You must use an [installation access token](https://docs.github.com/enterprise-server@2.19/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/AppsApi~appsListReposAccessibleToInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsListReposAccessibleToInstallation200Response}
     */
    appsListReposAccessibleToInstallation(accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling appsListReposAccessibleToInstallation");
      }

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsListReposAccessibleToInstallation200Response;
      return this.apiClient.callApi(
        '/installation/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsRemoveRepoFromInstallation operation.
     * @callback module:api/AppsApi~appsRemoveRepoFromInstallationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a repository from an app installation
     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@2.19/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@2.19/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     * @param {Number} installationId installation_id parameter
     * @param {Number} repositoryId 
     * @param {module:api/AppsApi~appsRemoveRepoFromInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsRemoveRepoFromInstallation(installationId, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsRemoveRepoFromInstallation");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling appsRemoveRepoFromInstallation");
      }

      let pathParams = {
        'installation_id': installationId,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/installations/{installation_id}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
