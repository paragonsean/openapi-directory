/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicError from '../model/BasicError';
import CodeOfConduct from '../model/CodeOfConduct';

/**
* CodesOfConduct service.
* @module api/CodesOfConductApi
* @version 1.1.4
*/
export default class CodesOfConductApi {

    /**
    * Constructs a new CodesOfConductApi. 
    * @alias module:api/CodesOfConductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the codesOfConductGetAllCodesOfConduct operation.
     * @callback module:api/CodesOfConductApi~codesOfConductGetAllCodesOfConductCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CodeOfConduct>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all codes of conduct
     * 
     * @param {module:api/CodesOfConductApi~codesOfConductGetAllCodesOfConductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CodeOfConduct>}
     */
    codesOfConductGetAllCodesOfConduct(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CodeOfConduct];
      return this.apiClient.callApi(
        '/codes_of_conduct', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codesOfConductGetConductCode operation.
     * @callback module:api/CodesOfConductApi~codesOfConductGetConductCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodeOfConduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a code of conduct
     * 
     * @param {String} key 
     * @param {module:api/CodesOfConductApi~codesOfConductGetConductCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodeOfConduct}
     */
    codesOfConductGetConductCode(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling codesOfConductGetConductCode");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodeOfConduct;
      return this.apiClient.callApi(
        '/codes_of_conduct/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
