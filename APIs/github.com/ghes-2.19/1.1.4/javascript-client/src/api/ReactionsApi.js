/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsGetInstallation415Response from '../model/AppsGetInstallation415Response';
import BasicError from '../model/BasicError';
import Reaction from '../model/Reaction';
import ReactionsCreateForCommitCommentRequest from '../model/ReactionsCreateForCommitCommentRequest';
import ReactionsCreateForIssueCommentRequest from '../model/ReactionsCreateForIssueCommentRequest';
import ReactionsCreateForIssueRequest from '../model/ReactionsCreateForIssueRequest';
import ReactionsCreateForPullRequestReviewCommentRequest from '../model/ReactionsCreateForPullRequestReviewCommentRequest';
import ReactionsCreateForTeamDiscussionCommentRequest from '../model/ReactionsCreateForTeamDiscussionCommentRequest';
import ReactionsCreateForTeamDiscussionRequest from '../model/ReactionsCreateForTeamDiscussionRequest';
import ValidationError from '../model/ValidationError';

/**
* Reactions service.
* @module api/ReactionsApi
* @version 1.1.4
*/
export default class ReactionsApi {

    /**
    * Constructs a new ReactionsApi. 
    * @alias module:api/ReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reactionsCreateForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a commit comment
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.19/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {module:model/ReactionsCreateForCommitCommentRequest} reactionsCreateForCommitCommentRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForCommitComment(owner, repo, commentId, reactionsCreateForCommitCommentRequest, callback) {
      let postBody = reactionsCreateForCommitCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'reactionsCreateForCommitCommentRequest' is set
      if (reactionsCreateForCommitCommentRequest === undefined || reactionsCreateForCommitCommentRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForCommitCommentRequest' when calling reactionsCreateForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForIssue operation.
     * @callback module:api/ReactionsApi~reactionsCreateForIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for an issue
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@2.19/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {module:model/ReactionsCreateForIssueRequest} reactionsCreateForIssueRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForIssue(owner, repo, issueNumber, reactionsCreateForIssueRequest, callback) {
      let postBody = reactionsCreateForIssueRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'reactionsCreateForIssueRequest' is set
      if (reactionsCreateForIssueRequest === undefined || reactionsCreateForIssueRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForIssueRequest' when calling reactionsCreateForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for an issue comment
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.19/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {module:model/ReactionsCreateForIssueCommentRequest} reactionsCreateForIssueCommentRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForIssueComment(owner, repo, commentId, reactionsCreateForIssueCommentRequest, callback) {
      let postBody = reactionsCreateForIssueCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'reactionsCreateForIssueCommentRequest' is set
      if (reactionsCreateForIssueCommentRequest === undefined || reactionsCreateForIssueCommentRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForIssueCommentRequest' when calling reactionsCreateForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForPullRequestReviewComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForPullRequestReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a pull request review comment
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.19/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {module:model/ReactionsCreateForPullRequestReviewCommentRequest} reactionsCreateForPullRequestReviewCommentRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForPullRequestReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForPullRequestReviewComment(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, callback) {
      let postBody = reactionsCreateForPullRequestReviewCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' is set
      if (reactionsCreateForPullRequestReviewCommentRequest === undefined || reactionsCreateForPullRequestReviewCommentRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' when calling reactionsCreateForPullRequestReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussion operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {module:model/ReactionsCreateForTeamDiscussionRequest} reactionsCreateForTeamDiscussionRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussion(accept, teamId, discussionNumber, reactionsCreateForTeamDiscussionRequest, callback) {
      let postBody = reactionsCreateForTeamDiscussionRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reactionsCreateForTeamDiscussion");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussion");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussion");
      }
      // verify the required parameter 'reactionsCreateForTeamDiscussionRequest' is set
      if (reactionsCreateForTeamDiscussionRequest === undefined || reactionsCreateForTeamDiscussionRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForTeamDiscussionRequest' when calling reactionsCreateForTeamDiscussion");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion comment
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {module:model/ReactionsCreateForTeamDiscussionCommentRequest} reactionsCreateForTeamDiscussionCommentRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionComment(accept, teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentRequest, callback) {
      let postBody = reactionsCreateForTeamDiscussionCommentRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reactionsCreateForTeamDiscussionComment");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionComment");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionComment");
      }
      // verify the required parameter 'reactionsCreateForTeamDiscussionCommentRequest' is set
      if (reactionsCreateForTeamDiscussionCommentRequest === undefined || reactionsCreateForTeamDiscussionCommentRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForTeamDiscussionCommentRequest' when calling reactionsCreateForTeamDiscussionComment");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDelete operation.
     * @callback module:api/ReactionsApi~reactionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a reaction
     * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussion-comments).
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} reactionId 
     * @param {module:api/ReactionsApi~reactionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDelete(accept, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reactionsDelete");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDelete");
      }

      let pathParams = {
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsListForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a commit comment
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@2.19/rest/reference/repos#comments).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForCommitComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForIssue operation.
     * @callback module:api/ReactionsApi~reactionsListForIssueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for an issue
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@2.19/rest/reference/issues).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForIssue(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsListForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsListForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for an issue comment
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@2.19/rest/reference/issues#comments).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForIssueComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForPullRequestReviewComment operation.
     * @callback module:api/ReactionsApi~reactionsListForPullRequestReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a pull request review comment
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@2.19/rest/reference/pulls#review-comments).
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForPullRequestReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForPullRequestReviewComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForPullRequestReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForPullRequestReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForPullRequestReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussion operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussion(accept, teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reactionsListForTeamDiscussion");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussion");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussion");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionComment operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion comment
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.19/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@2.19/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} teamId 
     * @param {Number} discussionNumber 
     * @param {Number} commentNumber 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@2.19/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionComment(accept, teamId, discussionNumber, commentNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reactionsListForTeamDiscussionComment");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionComment");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionComment");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
