/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.AppPermissions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppPermissions', function() {
    it('should create an instance of AppPermissions', function() {
      // uncomment below and update the code to test AppPermissions
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be.a(GitHubV3RestApi.AppPermissions);
    });

    it('should have the property actions (base name: "actions")', function() {
      // uncomment below and update the code to test the property actions
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property administration (base name: "administration")', function() {
      // uncomment below and update the code to test the property administration
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property checks (base name: "checks")', function() {
      // uncomment below and update the code to test the property checks
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property contentReferences (base name: "content_references")', function() {
      // uncomment below and update the code to test the property contentReferences
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property contents (base name: "contents")', function() {
      // uncomment below and update the code to test the property contents
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property deployments (base name: "deployments")', function() {
      // uncomment below and update the code to test the property deployments
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property environments (base name: "environments")', function() {
      // uncomment below and update the code to test the property environments
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property issues (base name: "issues")', function() {
      // uncomment below and update the code to test the property issues
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property members (base name: "members")', function() {
      // uncomment below and update the code to test the property members
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationAdministration (base name: "organization_administration")', function() {
      // uncomment below and update the code to test the property organizationAdministration
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationHooks (base name: "organization_hooks")', function() {
      // uncomment below and update the code to test the property organizationHooks
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationPackages (base name: "organization_packages")', function() {
      // uncomment below and update the code to test the property organizationPackages
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationPlan (base name: "organization_plan")', function() {
      // uncomment below and update the code to test the property organizationPlan
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationProjects (base name: "organization_projects")', function() {
      // uncomment below and update the code to test the property organizationProjects
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationSecrets (base name: "organization_secrets")', function() {
      // uncomment below and update the code to test the property organizationSecrets
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationSelfHostedRunners (base name: "organization_self_hosted_runners")', function() {
      // uncomment below and update the code to test the property organizationSelfHostedRunners
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property organizationUserBlocking (base name: "organization_user_blocking")', function() {
      // uncomment below and update the code to test the property organizationUserBlocking
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property packages (base name: "packages")', function() {
      // uncomment below and update the code to test the property packages
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property pages (base name: "pages")', function() {
      // uncomment below and update the code to test the property pages
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property pullRequests (base name: "pull_requests")', function() {
      // uncomment below and update the code to test the property pullRequests
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property repositoryHooks (base name: "repository_hooks")', function() {
      // uncomment below and update the code to test the property repositoryHooks
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property repositoryProjects (base name: "repository_projects")', function() {
      // uncomment below and update the code to test the property repositoryProjects
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property secretScanningAlerts (base name: "secret_scanning_alerts")', function() {
      // uncomment below and update the code to test the property secretScanningAlerts
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property secrets (base name: "secrets")', function() {
      // uncomment below and update the code to test the property secrets
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property securityEvents (base name: "security_events")', function() {
      // uncomment below and update the code to test the property securityEvents
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property singleFile (base name: "single_file")', function() {
      // uncomment below and update the code to test the property singleFile
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property statuses (base name: "statuses")', function() {
      // uncomment below and update the code to test the property statuses
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property teamDiscussions (base name: "team_discussions")', function() {
      // uncomment below and update the code to test the property teamDiscussions
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property vulnerabilityAlerts (base name: "vulnerability_alerts")', function() {
      // uncomment below and update the code to test the property vulnerabilityAlerts
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

    it('should have the property workflows (base name: "workflows")', function() {
      // uncomment below and update the code to test the property workflows
      //var instance = new GitHubV3RestApi.AppPermissions();
      //expect(instance).to.be();
    });

  });

}));
