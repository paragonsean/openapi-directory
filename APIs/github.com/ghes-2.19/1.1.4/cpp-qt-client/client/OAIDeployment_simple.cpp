/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment_simple.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment_simple::OAIDeployment_simple(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment_simple::OAIDeployment_simple() {
    this->initializeModel();
}

OAIDeployment_simple::~OAIDeployment_simple() {}

void OAIDeployment_simple::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_original_environment_isSet = false;
    m_original_environment_isValid = false;

    m_performed_via_github_app_isSet = false;
    m_performed_via_github_app_isValid = false;

    m_production_environment_isSet = false;
    m_production_environment_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_statuses_url_isSet = false;
    m_statuses_url_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_transient_environment_isSet = false;
    m_transient_environment_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDeployment_simple::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment_simple::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_original_environment_isValid = ::OpenAPI::fromJsonValue(m_original_environment, json[QString("original_environment")]);
    m_original_environment_isSet = !json[QString("original_environment")].isNull() && m_original_environment_isValid;

    m_performed_via_github_app_isValid = ::OpenAPI::fromJsonValue(m_performed_via_github_app, json[QString("performed_via_github_app")]);
    m_performed_via_github_app_isSet = !json[QString("performed_via_github_app")].isNull() && m_performed_via_github_app_isValid;

    m_production_environment_isValid = ::OpenAPI::fromJsonValue(m_production_environment, json[QString("production_environment")]);
    m_production_environment_isSet = !json[QString("production_environment")].isNull() && m_production_environment_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repository_url")]);
    m_repository_url_isSet = !json[QString("repository_url")].isNull() && m_repository_url_isValid;

    m_statuses_url_isValid = ::OpenAPI::fromJsonValue(m_statuses_url, json[QString("statuses_url")]);
    m_statuses_url_isSet = !json[QString("statuses_url")].isNull() && m_statuses_url_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;

    m_transient_environment_isValid = ::OpenAPI::fromJsonValue(m_transient_environment, json[QString("transient_environment")]);
    m_transient_environment_isSet = !json[QString("transient_environment")].isNull() && m_transient_environment_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDeployment_simple::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment_simple::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_original_environment_isSet) {
        obj.insert(QString("original_environment"), ::OpenAPI::toJsonValue(m_original_environment));
    }
    if (m_performed_via_github_app.isSet()) {
        obj.insert(QString("performed_via_github_app"), ::OpenAPI::toJsonValue(m_performed_via_github_app));
    }
    if (m_production_environment_isSet) {
        obj.insert(QString("production_environment"), ::OpenAPI::toJsonValue(m_production_environment));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repository_url"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_statuses_url_isSet) {
        obj.insert(QString("statuses_url"), ::OpenAPI::toJsonValue(m_statuses_url));
    }
    if (m_task_isSet) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_transient_environment_isSet) {
        obj.insert(QString("transient_environment"), ::OpenAPI::toJsonValue(m_transient_environment));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIDeployment_simple::getCreatedAt() const {
    return m_created_at;
}
void OAIDeployment_simple::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeployment_simple::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeployment_simple::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeployment_simple::getDescription() const {
    return m_description;
}
void OAIDeployment_simple::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeployment_simple::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeployment_simple::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeployment_simple::getEnvironment() const {
    return m_environment;
}
void OAIDeployment_simple::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIDeployment_simple::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIDeployment_simple::is_environment_Valid() const{
    return m_environment_isValid;
}

qint32 OAIDeployment_simple::getId() const {
    return m_id;
}
void OAIDeployment_simple::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployment_simple::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployment_simple::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployment_simple::getNodeId() const {
    return m_node_id;
}
void OAIDeployment_simple::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIDeployment_simple::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIDeployment_simple::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIDeployment_simple::getOriginalEnvironment() const {
    return m_original_environment;
}
void OAIDeployment_simple::setOriginalEnvironment(const QString &original_environment) {
    m_original_environment = original_environment;
    m_original_environment_isSet = true;
}

bool OAIDeployment_simple::is_original_environment_Set() const{
    return m_original_environment_isSet;
}

bool OAIDeployment_simple::is_original_environment_Valid() const{
    return m_original_environment_isValid;
}

OAINullable_integration OAIDeployment_simple::getPerformedViaGithubApp() const {
    return m_performed_via_github_app;
}
void OAIDeployment_simple::setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app) {
    m_performed_via_github_app = performed_via_github_app;
    m_performed_via_github_app_isSet = true;
}

bool OAIDeployment_simple::is_performed_via_github_app_Set() const{
    return m_performed_via_github_app_isSet;
}

bool OAIDeployment_simple::is_performed_via_github_app_Valid() const{
    return m_performed_via_github_app_isValid;
}

bool OAIDeployment_simple::isProductionEnvironment() const {
    return m_production_environment;
}
void OAIDeployment_simple::setProductionEnvironment(const bool &production_environment) {
    m_production_environment = production_environment;
    m_production_environment_isSet = true;
}

bool OAIDeployment_simple::is_production_environment_Set() const{
    return m_production_environment_isSet;
}

bool OAIDeployment_simple::is_production_environment_Valid() const{
    return m_production_environment_isValid;
}

QString OAIDeployment_simple::getRepositoryUrl() const {
    return m_repository_url;
}
void OAIDeployment_simple::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAIDeployment_simple::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAIDeployment_simple::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

QString OAIDeployment_simple::getStatusesUrl() const {
    return m_statuses_url;
}
void OAIDeployment_simple::setStatusesUrl(const QString &statuses_url) {
    m_statuses_url = statuses_url;
    m_statuses_url_isSet = true;
}

bool OAIDeployment_simple::is_statuses_url_Set() const{
    return m_statuses_url_isSet;
}

bool OAIDeployment_simple::is_statuses_url_Valid() const{
    return m_statuses_url_isValid;
}

QString OAIDeployment_simple::getTask() const {
    return m_task;
}
void OAIDeployment_simple::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIDeployment_simple::is_task_Set() const{
    return m_task_isSet;
}

bool OAIDeployment_simple::is_task_Valid() const{
    return m_task_isValid;
}

bool OAIDeployment_simple::isTransientEnvironment() const {
    return m_transient_environment;
}
void OAIDeployment_simple::setTransientEnvironment(const bool &transient_environment) {
    m_transient_environment = transient_environment;
    m_transient_environment_isSet = true;
}

bool OAIDeployment_simple::is_transient_environment_Set() const{
    return m_transient_environment_isSet;
}

bool OAIDeployment_simple::is_transient_environment_Valid() const{
    return m_transient_environment_isValid;
}

QDateTime OAIDeployment_simple::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDeployment_simple::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDeployment_simple::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDeployment_simple::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIDeployment_simple::getUrl() const {
    return m_url;
}
void OAIDeployment_simple::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeployment_simple::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeployment_simple::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDeployment_simple::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performed_via_github_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_production_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transient_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment_simple::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_description_isValid && m_environment_isValid && m_id_isValid && m_node_id_isValid && m_repository_url_isValid && m_statuses_url_isValid && m_task_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
