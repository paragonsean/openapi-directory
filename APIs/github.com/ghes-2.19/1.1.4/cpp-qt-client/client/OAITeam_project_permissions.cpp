/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_project_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_project_permissions::OAITeam_project_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_project_permissions::OAITeam_project_permissions() {
    this->initializeModel();
}

OAITeam_project_permissions::~OAITeam_project_permissions() {}

void OAITeam_project_permissions::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_write_isSet = false;
    m_write_isValid = false;
}

void OAITeam_project_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_project_permissions::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_write_isValid = ::OpenAPI::fromJsonValue(m_write, json[QString("write")]);
    m_write_isSet = !json[QString("write")].isNull() && m_write_isValid;
}

QString OAITeam_project_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_project_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_write_isSet) {
        obj.insert(QString("write"), ::OpenAPI::toJsonValue(m_write));
    }
    return obj;
}

bool OAITeam_project_permissions::isAdmin() const {
    return m_admin;
}
void OAITeam_project_permissions::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAITeam_project_permissions::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAITeam_project_permissions::is_admin_Valid() const{
    return m_admin_isValid;
}

bool OAITeam_project_permissions::isRead() const {
    return m_read;
}
void OAITeam_project_permissions::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAITeam_project_permissions::is_read_Set() const{
    return m_read_isSet;
}

bool OAITeam_project_permissions::is_read_Valid() const{
    return m_read_isValid;
}

bool OAITeam_project_permissions::isWrite() const {
    return m_write;
}
void OAITeam_project_permissions::setWrite(const bool &write) {
    m_write = write;
    m_write_isSet = true;
}

bool OAITeam_project_permissions::is_write_Set() const{
    return m_write_isSet;
}

bool OAITeam_project_permissions::is_write_Valid() const{
    return m_write_isValid;
}

bool OAITeam_project_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_project_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_isValid && m_read_isValid && m_write_isValid && true;
}

} // namespace OpenAPI
