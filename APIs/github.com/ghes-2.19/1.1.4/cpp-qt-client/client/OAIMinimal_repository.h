/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMinimal_repository.h
 *
 * Minimal Repository
 */

#ifndef OAIMinimal_repository_H
#define OAIMinimal_repository_H

#include <QJsonObject>

#include "OAICode_of_conduct.h"
#include "OAIMinimal_repository_license.h"
#include "OAIMinimal_repository_permissions.h"
#include "OAINullable_repository.h"
#include "OAISimple_user.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICode_of_conduct;
class OAIMinimal_repository_license;
class OAISimple_user;
class OAIMinimal_repository_permissions;
class OAINullable_repository;

class OAIMinimal_repository : public OAIObject {
public:
    OAIMinimal_repository();
    OAIMinimal_repository(QString json);
    ~OAIMinimal_repository() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowForking() const;
    void setAllowForking(const bool &allow_forking);
    bool is_allow_forking_Set() const;
    bool is_allow_forking_Valid() const;

    bool isAnonymousAccessEnabled() const;
    void setAnonymousAccessEnabled(const bool &anonymous_access_enabled);
    bool is_anonymous_access_enabled_Set() const;
    bool is_anonymous_access_enabled_Valid() const;

    QString getArchiveUrl() const;
    void setArchiveUrl(const QString &archive_url);
    bool is_archive_url_Set() const;
    bool is_archive_url_Valid() const;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    QString getAssigneesUrl() const;
    void setAssigneesUrl(const QString &assignees_url);
    bool is_assignees_url_Set() const;
    bool is_assignees_url_Valid() const;

    QString getBlobsUrl() const;
    void setBlobsUrl(const QString &blobs_url);
    bool is_blobs_url_Set() const;
    bool is_blobs_url_Valid() const;

    QString getBranchesUrl() const;
    void setBranchesUrl(const QString &branches_url);
    bool is_branches_url_Set() const;
    bool is_branches_url_Valid() const;

    QString getCloneUrl() const;
    void setCloneUrl(const QString &clone_url);
    bool is_clone_url_Set() const;
    bool is_clone_url_Valid() const;

    OAICode_of_conduct getCodeOfConduct() const;
    void setCodeOfConduct(const OAICode_of_conduct &code_of_conduct);
    bool is_code_of_conduct_Set() const;
    bool is_code_of_conduct_Valid() const;

    QString getCollaboratorsUrl() const;
    void setCollaboratorsUrl(const QString &collaborators_url);
    bool is_collaborators_url_Set() const;
    bool is_collaborators_url_Valid() const;

    QString getCommentsUrl() const;
    void setCommentsUrl(const QString &comments_url);
    bool is_comments_url_Set() const;
    bool is_comments_url_Valid() const;

    QString getCommitsUrl() const;
    void setCommitsUrl(const QString &commits_url);
    bool is_commits_url_Set() const;
    bool is_commits_url_Valid() const;

    QString getCompareUrl() const;
    void setCompareUrl(const QString &compare_url);
    bool is_compare_url_Set() const;
    bool is_compare_url_Valid() const;

    QString getContentsUrl() const;
    void setContentsUrl(const QString &contents_url);
    bool is_contents_url_Set() const;
    bool is_contents_url_Valid() const;

    QString getContributorsUrl() const;
    void setContributorsUrl(const QString &contributors_url);
    bool is_contributors_url_Set() const;
    bool is_contributors_url_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDefaultBranch() const;
    void setDefaultBranch(const QString &default_branch);
    bool is_default_branch_Set() const;
    bool is_default_branch_Valid() const;

    QString getDeploymentsUrl() const;
    void setDeploymentsUrl(const QString &deployments_url);
    bool is_deployments_url_Set() const;
    bool is_deployments_url_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    QString getDownloadsUrl() const;
    void setDownloadsUrl(const QString &downloads_url);
    bool is_downloads_url_Set() const;
    bool is_downloads_url_Valid() const;

    QString getEventsUrl() const;
    void setEventsUrl(const QString &events_url);
    bool is_events_url_Set() const;
    bool is_events_url_Valid() const;

    bool isFork() const;
    void setFork(const bool &fork);
    bool is_fork_Set() const;
    bool is_fork_Valid() const;

    qint32 getForks() const;
    void setForks(const qint32 &forks);
    bool is_forks_Set() const;
    bool is_forks_Valid() const;

    qint32 getForksCount() const;
    void setForksCount(const qint32 &forks_count);
    bool is_forks_count_Set() const;
    bool is_forks_count_Valid() const;

    QString getForksUrl() const;
    void setForksUrl(const QString &forks_url);
    bool is_forks_url_Set() const;
    bool is_forks_url_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    QString getGitCommitsUrl() const;
    void setGitCommitsUrl(const QString &git_commits_url);
    bool is_git_commits_url_Set() const;
    bool is_git_commits_url_Valid() const;

    QString getGitRefsUrl() const;
    void setGitRefsUrl(const QString &git_refs_url);
    bool is_git_refs_url_Set() const;
    bool is_git_refs_url_Valid() const;

    QString getGitTagsUrl() const;
    void setGitTagsUrl(const QString &git_tags_url);
    bool is_git_tags_url_Set() const;
    bool is_git_tags_url_Valid() const;

    QString getGitUrl() const;
    void setGitUrl(const QString &git_url);
    bool is_git_url_Set() const;
    bool is_git_url_Valid() const;

    bool isHasDownloads() const;
    void setHasDownloads(const bool &has_downloads);
    bool is_has_downloads_Set() const;
    bool is_has_downloads_Valid() const;

    bool isHasIssues() const;
    void setHasIssues(const bool &has_issues);
    bool is_has_issues_Set() const;
    bool is_has_issues_Valid() const;

    bool isHasPages() const;
    void setHasPages(const bool &has_pages);
    bool is_has_pages_Set() const;
    bool is_has_pages_Valid() const;

    bool isHasProjects() const;
    void setHasProjects(const bool &has_projects);
    bool is_has_projects_Set() const;
    bool is_has_projects_Valid() const;

    bool isHasWiki() const;
    void setHasWiki(const bool &has_wiki);
    bool is_has_wiki_Set() const;
    bool is_has_wiki_Valid() const;

    QString getHomepage() const;
    void setHomepage(const QString &homepage);
    bool is_homepage_Set() const;
    bool is_homepage_Valid() const;

    QString getHooksUrl() const;
    void setHooksUrl(const QString &hooks_url);
    bool is_hooks_url_Set() const;
    bool is_hooks_url_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsTemplate() const;
    void setIsTemplate(const bool &is_template);
    bool is_is_template_Set() const;
    bool is_is_template_Valid() const;

    QString getIssueCommentUrl() const;
    void setIssueCommentUrl(const QString &issue_comment_url);
    bool is_issue_comment_url_Set() const;
    bool is_issue_comment_url_Valid() const;

    QString getIssueEventsUrl() const;
    void setIssueEventsUrl(const QString &issue_events_url);
    bool is_issue_events_url_Set() const;
    bool is_issue_events_url_Valid() const;

    QString getIssuesUrl() const;
    void setIssuesUrl(const QString &issues_url);
    bool is_issues_url_Set() const;
    bool is_issues_url_Valid() const;

    QString getKeysUrl() const;
    void setKeysUrl(const QString &keys_url);
    bool is_keys_url_Set() const;
    bool is_keys_url_Valid() const;

    QString getLabelsUrl() const;
    void setLabelsUrl(const QString &labels_url);
    bool is_labels_url_Set() const;
    bool is_labels_url_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getLanguagesUrl() const;
    void setLanguagesUrl(const QString &languages_url);
    bool is_languages_url_Set() const;
    bool is_languages_url_Valid() const;

    OAIMinimal_repository_license getLicense() const;
    void setLicense(const OAIMinimal_repository_license &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    QString getMergesUrl() const;
    void setMergesUrl(const QString &merges_url);
    bool is_merges_url_Set() const;
    bool is_merges_url_Valid() const;

    QString getMilestonesUrl() const;
    void setMilestonesUrl(const QString &milestones_url);
    bool is_milestones_url_Set() const;
    bool is_milestones_url_Valid() const;

    QString getMirrorUrl() const;
    void setMirrorUrl(const QString &mirror_url);
    bool is_mirror_url_Set() const;
    bool is_mirror_url_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNetworkCount() const;
    void setNetworkCount(const qint32 &network_count);
    bool is_network_count_Set() const;
    bool is_network_count_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    QString getNotificationsUrl() const;
    void setNotificationsUrl(const QString &notifications_url);
    bool is_notifications_url_Set() const;
    bool is_notifications_url_Valid() const;

    qint32 getOpenIssues() const;
    void setOpenIssues(const qint32 &open_issues);
    bool is_open_issues_Set() const;
    bool is_open_issues_Valid() const;

    qint32 getOpenIssuesCount() const;
    void setOpenIssuesCount(const qint32 &open_issues_count);
    bool is_open_issues_count_Set() const;
    bool is_open_issues_count_Valid() const;

    OAISimple_user getOwner() const;
    void setOwner(const OAISimple_user &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    OAIMinimal_repository_permissions getPermissions() const;
    void setPermissions(const OAIMinimal_repository_permissions &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    bool isRPrivate() const;
    void setRPrivate(const bool &r_private);
    bool is_r_private_Set() const;
    bool is_r_private_Valid() const;

    QString getPullsUrl() const;
    void setPullsUrl(const QString &pulls_url);
    bool is_pulls_url_Set() const;
    bool is_pulls_url_Valid() const;

    QDateTime getPushedAt() const;
    void setPushedAt(const QDateTime &pushed_at);
    bool is_pushed_at_Set() const;
    bool is_pushed_at_Valid() const;

    QString getReleasesUrl() const;
    void setReleasesUrl(const QString &releases_url);
    bool is_releases_url_Set() const;
    bool is_releases_url_Valid() const;

    qint32 getSize() const;
    void setSize(const qint32 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getSshUrl() const;
    void setSshUrl(const QString &ssh_url);
    bool is_ssh_url_Set() const;
    bool is_ssh_url_Valid() const;

    qint32 getStargazersCount() const;
    void setStargazersCount(const qint32 &stargazers_count);
    bool is_stargazers_count_Set() const;
    bool is_stargazers_count_Valid() const;

    QString getStargazersUrl() const;
    void setStargazersUrl(const QString &stargazers_url);
    bool is_stargazers_url_Set() const;
    bool is_stargazers_url_Valid() const;

    QString getStatusesUrl() const;
    void setStatusesUrl(const QString &statuses_url);
    bool is_statuses_url_Set() const;
    bool is_statuses_url_Valid() const;

    qint32 getSubscribersCount() const;
    void setSubscribersCount(const qint32 &subscribers_count);
    bool is_subscribers_count_Set() const;
    bool is_subscribers_count_Valid() const;

    QString getSubscribersUrl() const;
    void setSubscribersUrl(const QString &subscribers_url);
    bool is_subscribers_url_Set() const;
    bool is_subscribers_url_Valid() const;

    QString getSubscriptionUrl() const;
    void setSubscriptionUrl(const QString &subscription_url);
    bool is_subscription_url_Set() const;
    bool is_subscription_url_Valid() const;

    QString getSvnUrl() const;
    void setSvnUrl(const QString &svn_url);
    bool is_svn_url_Set() const;
    bool is_svn_url_Valid() const;

    QString getTagsUrl() const;
    void setTagsUrl(const QString &tags_url);
    bool is_tags_url_Set() const;
    bool is_tags_url_Valid() const;

    QString getTeamsUrl() const;
    void setTeamsUrl(const QString &teams_url);
    bool is_teams_url_Set() const;
    bool is_teams_url_Valid() const;

    OAINullable_repository getTemplateRepository() const;
    void setTemplateRepository(const OAINullable_repository &template_repository);
    bool is_template_repository_Set() const;
    bool is_template_repository_Valid() const;

    QList<QString> getTopics() const;
    void setTopics(const QList<QString> &topics);
    bool is_topics_Set() const;
    bool is_topics_Valid() const;

    QString getTreesUrl() const;
    void setTreesUrl(const QString &trees_url);
    bool is_trees_url_Set() const;
    bool is_trees_url_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint32 getWatchers() const;
    void setWatchers(const qint32 &watchers);
    bool is_watchers_Set() const;
    bool is_watchers_Valid() const;

    qint32 getWatchersCount() const;
    void setWatchersCount(const qint32 &watchers_count);
    bool is_watchers_count_Set() const;
    bool is_watchers_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_forking;
    bool m_allow_forking_isSet;
    bool m_allow_forking_isValid;

    bool m_anonymous_access_enabled;
    bool m_anonymous_access_enabled_isSet;
    bool m_anonymous_access_enabled_isValid;

    QString m_archive_url;
    bool m_archive_url_isSet;
    bool m_archive_url_isValid;

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    QString m_assignees_url;
    bool m_assignees_url_isSet;
    bool m_assignees_url_isValid;

    QString m_blobs_url;
    bool m_blobs_url_isSet;
    bool m_blobs_url_isValid;

    QString m_branches_url;
    bool m_branches_url_isSet;
    bool m_branches_url_isValid;

    QString m_clone_url;
    bool m_clone_url_isSet;
    bool m_clone_url_isValid;

    OAICode_of_conduct m_code_of_conduct;
    bool m_code_of_conduct_isSet;
    bool m_code_of_conduct_isValid;

    QString m_collaborators_url;
    bool m_collaborators_url_isSet;
    bool m_collaborators_url_isValid;

    QString m_comments_url;
    bool m_comments_url_isSet;
    bool m_comments_url_isValid;

    QString m_commits_url;
    bool m_commits_url_isSet;
    bool m_commits_url_isValid;

    QString m_compare_url;
    bool m_compare_url_isSet;
    bool m_compare_url_isValid;

    QString m_contents_url;
    bool m_contents_url_isSet;
    bool m_contents_url_isValid;

    QString m_contributors_url;
    bool m_contributors_url_isSet;
    bool m_contributors_url_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_default_branch;
    bool m_default_branch_isSet;
    bool m_default_branch_isValid;

    QString m_deployments_url;
    bool m_deployments_url_isSet;
    bool m_deployments_url_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    QString m_downloads_url;
    bool m_downloads_url_isSet;
    bool m_downloads_url_isValid;

    QString m_events_url;
    bool m_events_url_isSet;
    bool m_events_url_isValid;

    bool m_fork;
    bool m_fork_isSet;
    bool m_fork_isValid;

    qint32 m_forks;
    bool m_forks_isSet;
    bool m_forks_isValid;

    qint32 m_forks_count;
    bool m_forks_count_isSet;
    bool m_forks_count_isValid;

    QString m_forks_url;
    bool m_forks_url_isSet;
    bool m_forks_url_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    QString m_git_commits_url;
    bool m_git_commits_url_isSet;
    bool m_git_commits_url_isValid;

    QString m_git_refs_url;
    bool m_git_refs_url_isSet;
    bool m_git_refs_url_isValid;

    QString m_git_tags_url;
    bool m_git_tags_url_isSet;
    bool m_git_tags_url_isValid;

    QString m_git_url;
    bool m_git_url_isSet;
    bool m_git_url_isValid;

    bool m_has_downloads;
    bool m_has_downloads_isSet;
    bool m_has_downloads_isValid;

    bool m_has_issues;
    bool m_has_issues_isSet;
    bool m_has_issues_isValid;

    bool m_has_pages;
    bool m_has_pages_isSet;
    bool m_has_pages_isValid;

    bool m_has_projects;
    bool m_has_projects_isSet;
    bool m_has_projects_isValid;

    bool m_has_wiki;
    bool m_has_wiki_isSet;
    bool m_has_wiki_isValid;

    QString m_homepage;
    bool m_homepage_isSet;
    bool m_homepage_isValid;

    QString m_hooks_url;
    bool m_hooks_url_isSet;
    bool m_hooks_url_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_template;
    bool m_is_template_isSet;
    bool m_is_template_isValid;

    QString m_issue_comment_url;
    bool m_issue_comment_url_isSet;
    bool m_issue_comment_url_isValid;

    QString m_issue_events_url;
    bool m_issue_events_url_isSet;
    bool m_issue_events_url_isValid;

    QString m_issues_url;
    bool m_issues_url_isSet;
    bool m_issues_url_isValid;

    QString m_keys_url;
    bool m_keys_url_isSet;
    bool m_keys_url_isValid;

    QString m_labels_url;
    bool m_labels_url_isSet;
    bool m_labels_url_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_languages_url;
    bool m_languages_url_isSet;
    bool m_languages_url_isValid;

    OAIMinimal_repository_license m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    QString m_merges_url;
    bool m_merges_url_isSet;
    bool m_merges_url_isValid;

    QString m_milestones_url;
    bool m_milestones_url_isSet;
    bool m_milestones_url_isValid;

    QString m_mirror_url;
    bool m_mirror_url_isSet;
    bool m_mirror_url_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_network_count;
    bool m_network_count_isSet;
    bool m_network_count_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    QString m_notifications_url;
    bool m_notifications_url_isSet;
    bool m_notifications_url_isValid;

    qint32 m_open_issues;
    bool m_open_issues_isSet;
    bool m_open_issues_isValid;

    qint32 m_open_issues_count;
    bool m_open_issues_count_isSet;
    bool m_open_issues_count_isValid;

    OAISimple_user m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    OAIMinimal_repository_permissions m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    bool m_r_private;
    bool m_r_private_isSet;
    bool m_r_private_isValid;

    QString m_pulls_url;
    bool m_pulls_url_isSet;
    bool m_pulls_url_isValid;

    QDateTime m_pushed_at;
    bool m_pushed_at_isSet;
    bool m_pushed_at_isValid;

    QString m_releases_url;
    bool m_releases_url_isSet;
    bool m_releases_url_isValid;

    qint32 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_ssh_url;
    bool m_ssh_url_isSet;
    bool m_ssh_url_isValid;

    qint32 m_stargazers_count;
    bool m_stargazers_count_isSet;
    bool m_stargazers_count_isValid;

    QString m_stargazers_url;
    bool m_stargazers_url_isSet;
    bool m_stargazers_url_isValid;

    QString m_statuses_url;
    bool m_statuses_url_isSet;
    bool m_statuses_url_isValid;

    qint32 m_subscribers_count;
    bool m_subscribers_count_isSet;
    bool m_subscribers_count_isValid;

    QString m_subscribers_url;
    bool m_subscribers_url_isSet;
    bool m_subscribers_url_isValid;

    QString m_subscription_url;
    bool m_subscription_url_isSet;
    bool m_subscription_url_isValid;

    QString m_svn_url;
    bool m_svn_url_isSet;
    bool m_svn_url_isValid;

    QString m_tags_url;
    bool m_tags_url_isSet;
    bool m_tags_url_isValid;

    QString m_teams_url;
    bool m_teams_url_isSet;
    bool m_teams_url_isValid;

    OAINullable_repository m_template_repository;
    bool m_template_repository_isSet;
    bool m_template_repository_isValid;

    QList<QString> m_topics;
    bool m_topics_isSet;
    bool m_topics_isValid;

    QString m_trees_url;
    bool m_trees_url_isSet;
    bool m_trees_url_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint32 m_watchers;
    bool m_watchers_isSet;
    bool m_watchers_isValid;

    qint32 m_watchers_count;
    bool m_watchers_count_isSet;
    bool m_watchers_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMinimal_repository)

#endif // OAIMinimal_repository_H
