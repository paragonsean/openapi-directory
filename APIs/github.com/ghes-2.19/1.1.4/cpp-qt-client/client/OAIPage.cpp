/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPage::OAIPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPage::OAIPage() {
    this->initializeModel();
}

OAIPage::~OAIPage() {}

void OAIPage::initializeModel() {

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_custom_404_isSet = false;
    m_custom_404_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_https_certificate_isSet = false;
    m_https_certificate_isValid = false;

    m_https_enforced_isSet = false;
    m_https_enforced_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPage::fromJsonObject(QJsonObject json) {

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("cname")]);
    m_cname_isSet = !json[QString("cname")].isNull() && m_cname_isValid;

    m_custom_404_isValid = ::OpenAPI::fromJsonValue(m_custom_404, json[QString("custom_404")]);
    m_custom_404_isSet = !json[QString("custom_404")].isNull() && m_custom_404_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_https_certificate_isValid = ::OpenAPI::fromJsonValue(m_https_certificate, json[QString("https_certificate")]);
    m_https_certificate_isSet = !json[QString("https_certificate")].isNull() && m_https_certificate_isValid;

    m_https_enforced_isValid = ::OpenAPI::fromJsonValue(m_https_enforced, json[QString("https_enforced")]);
    m_https_enforced_isSet = !json[QString("https_enforced")].isNull() && m_https_enforced_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPage::asJsonObject() const {
    QJsonObject obj;
    if (m_cname_isSet) {
        obj.insert(QString("cname"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_custom_404_isSet) {
        obj.insert(QString("custom_404"), ::OpenAPI::toJsonValue(m_custom_404));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_https_certificate.isSet()) {
        obj.insert(QString("https_certificate"), ::OpenAPI::toJsonValue(m_https_certificate));
    }
    if (m_https_enforced_isSet) {
        obj.insert(QString("https_enforced"), ::OpenAPI::toJsonValue(m_https_enforced));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPage::getCname() const {
    return m_cname;
}
void OAIPage::setCname(const QString &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAIPage::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAIPage::is_cname_Valid() const{
    return m_cname_isValid;
}

bool OAIPage::isCustom404() const {
    return m_custom_404;
}
void OAIPage::setCustom404(const bool &custom_404) {
    m_custom_404 = custom_404;
    m_custom_404_isSet = true;
}

bool OAIPage::is_custom_404_Set() const{
    return m_custom_404_isSet;
}

bool OAIPage::is_custom_404_Valid() const{
    return m_custom_404_isValid;
}

QString OAIPage::getHtmlUrl() const {
    return m_html_url;
}
void OAIPage::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPage::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPage::is_html_url_Valid() const{
    return m_html_url_isValid;
}

OAIPages_https_certificate OAIPage::getHttpsCertificate() const {
    return m_https_certificate;
}
void OAIPage::setHttpsCertificate(const OAIPages_https_certificate &https_certificate) {
    m_https_certificate = https_certificate;
    m_https_certificate_isSet = true;
}

bool OAIPage::is_https_certificate_Set() const{
    return m_https_certificate_isSet;
}

bool OAIPage::is_https_certificate_Valid() const{
    return m_https_certificate_isValid;
}

bool OAIPage::isHttpsEnforced() const {
    return m_https_enforced;
}
void OAIPage::setHttpsEnforced(const bool &https_enforced) {
    m_https_enforced = https_enforced;
    m_https_enforced_isSet = true;
}

bool OAIPage::is_https_enforced_Set() const{
    return m_https_enforced_isSet;
}

bool OAIPage::is_https_enforced_Valid() const{
    return m_https_enforced_isValid;
}

bool OAIPage::isRPublic() const {
    return m_r_public;
}
void OAIPage::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIPage::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIPage::is_r_public_Valid() const{
    return m_r_public_isValid;
}

OAIPages_source_hash OAIPage::getSource() const {
    return m_source;
}
void OAIPage::setSource(const OAIPages_source_hash &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPage::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPage::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPage::getStatus() const {
    return m_status;
}
void OAIPage::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPage::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPage::getUrl() const {
    return m_url;
}
void OAIPage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_404_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_enforced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cname_isValid && m_custom_404_isValid && m_r_public_isValid && m_status_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
