/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelease_asset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelease_asset::OAIRelease_asset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelease_asset::OAIRelease_asset() {
    this->initializeModel();
}

OAIRelease_asset::~OAIRelease_asset() {}

void OAIRelease_asset::initializeModel() {

    m_browser_download_url_isSet = false;
    m_browser_download_url_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_download_count_isSet = false;
    m_download_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_uploader_isSet = false;
    m_uploader_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRelease_asset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelease_asset::fromJsonObject(QJsonObject json) {

    m_browser_download_url_isValid = ::OpenAPI::fromJsonValue(m_browser_download_url, json[QString("browser_download_url")]);
    m_browser_download_url_isSet = !json[QString("browser_download_url")].isNull() && m_browser_download_url_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_download_count_isValid = ::OpenAPI::fromJsonValue(m_download_count, json[QString("download_count")]);
    m_download_count_isSet = !json[QString("download_count")].isNull() && m_download_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_uploader_isValid = ::OpenAPI::fromJsonValue(m_uploader, json[QString("uploader")]);
    m_uploader_isSet = !json[QString("uploader")].isNull() && m_uploader_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRelease_asset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelease_asset::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_download_url_isSet) {
        obj.insert(QString("browser_download_url"), ::OpenAPI::toJsonValue(m_browser_download_url));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_download_count_isSet) {
        obj.insert(QString("download_count"), ::OpenAPI::toJsonValue(m_download_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_uploader.isSet()) {
        obj.insert(QString("uploader"), ::OpenAPI::toJsonValue(m_uploader));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIRelease_asset::getBrowserDownloadUrl() const {
    return m_browser_download_url;
}
void OAIRelease_asset::setBrowserDownloadUrl(const QString &browser_download_url) {
    m_browser_download_url = browser_download_url;
    m_browser_download_url_isSet = true;
}

bool OAIRelease_asset::is_browser_download_url_Set() const{
    return m_browser_download_url_isSet;
}

bool OAIRelease_asset::is_browser_download_url_Valid() const{
    return m_browser_download_url_isValid;
}

QString OAIRelease_asset::getContentType() const {
    return m_content_type;
}
void OAIRelease_asset::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIRelease_asset::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIRelease_asset::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIRelease_asset::getCreatedAt() const {
    return m_created_at;
}
void OAIRelease_asset::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRelease_asset::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRelease_asset::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIRelease_asset::getDownloadCount() const {
    return m_download_count;
}
void OAIRelease_asset::setDownloadCount(const qint32 &download_count) {
    m_download_count = download_count;
    m_download_count_isSet = true;
}

bool OAIRelease_asset::is_download_count_Set() const{
    return m_download_count_isSet;
}

bool OAIRelease_asset::is_download_count_Valid() const{
    return m_download_count_isValid;
}

qint32 OAIRelease_asset::getId() const {
    return m_id;
}
void OAIRelease_asset::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRelease_asset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRelease_asset::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRelease_asset::getLabel() const {
    return m_label;
}
void OAIRelease_asset::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIRelease_asset::is_label_Set() const{
    return m_label_isSet;
}

bool OAIRelease_asset::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIRelease_asset::getName() const {
    return m_name;
}
void OAIRelease_asset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRelease_asset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRelease_asset::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRelease_asset::getNodeId() const {
    return m_node_id;
}
void OAIRelease_asset::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIRelease_asset::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIRelease_asset::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAIRelease_asset::getSize() const {
    return m_size;
}
void OAIRelease_asset::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRelease_asset::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRelease_asset::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIRelease_asset::getState() const {
    return m_state;
}
void OAIRelease_asset::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRelease_asset::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRelease_asset::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIRelease_asset::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRelease_asset::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRelease_asset::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRelease_asset::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAINullable_simple_user OAIRelease_asset::getUploader() const {
    return m_uploader;
}
void OAIRelease_asset::setUploader(const OAINullable_simple_user &uploader) {
    m_uploader = uploader;
    m_uploader_isSet = true;
}

bool OAIRelease_asset::is_uploader_Set() const{
    return m_uploader_isSet;
}

bool OAIRelease_asset::is_uploader_Valid() const{
    return m_uploader_isValid;
}

QString OAIRelease_asset::getUrl() const {
    return m_url;
}
void OAIRelease_asset::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRelease_asset::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRelease_asset::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRelease_asset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploader.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelease_asset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_browser_download_url_isValid && m_content_type_isValid && m_created_at_isValid && m_download_count_isValid && m_id_isValid && m_label_isValid && m_name_isValid && m_node_id_isValid && m_size_isValid && m_state_isValid && m_updated_at_isValid && m_uploader_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
