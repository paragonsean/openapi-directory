/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContent_file.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContent_file::OAIContent_file(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContent_file::OAIContent_file() {
    this->initializeModel();
}

OAIContent_file::~OAIContent_file() {}

void OAIContent_file::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_git_url_isSet = false;
    m_git_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_submodule_git_url_isSet = false;
    m_submodule_git_url_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIContent_file::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContent_file::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_git_url_isValid = ::OpenAPI::fromJsonValue(m_git_url, json[QString("git_url")]);
    m_git_url_isSet = !json[QString("git_url")].isNull() && m_git_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_submodule_git_url_isValid = ::OpenAPI::fromJsonValue(m_submodule_git_url, json[QString("submodule_git_url")]);
    m_submodule_git_url_isSet = !json[QString("submodule_git_url")].isNull() && m_submodule_git_url_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIContent_file::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContent_file::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_git_url_isSet) {
        obj.insert(QString("git_url"), ::OpenAPI::toJsonValue(m_git_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_submodule_git_url_isSet) {
        obj.insert(QString("submodule_git_url"), ::OpenAPI::toJsonValue(m_submodule_git_url));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIContent_directory_inner__links OAIContent_file::getLinks() const {
    return m__links;
}
void OAIContent_file::setLinks(const OAIContent_directory_inner__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIContent_file::is__links_Set() const{
    return m__links_isSet;
}

bool OAIContent_file::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIContent_file::getContent() const {
    return m_content;
}
void OAIContent_file::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIContent_file::is_content_Set() const{
    return m_content_isSet;
}

bool OAIContent_file::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIContent_file::getDownloadUrl() const {
    return m_download_url;
}
void OAIContent_file::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIContent_file::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIContent_file::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIContent_file::getEncoding() const {
    return m_encoding;
}
void OAIContent_file::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIContent_file::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIContent_file::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIContent_file::getGitUrl() const {
    return m_git_url;
}
void OAIContent_file::setGitUrl(const QString &git_url) {
    m_git_url = git_url;
    m_git_url_isSet = true;
}

bool OAIContent_file::is_git_url_Set() const{
    return m_git_url_isSet;
}

bool OAIContent_file::is_git_url_Valid() const{
    return m_git_url_isValid;
}

QString OAIContent_file::getHtmlUrl() const {
    return m_html_url;
}
void OAIContent_file::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIContent_file::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIContent_file::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIContent_file::getName() const {
    return m_name;
}
void OAIContent_file::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContent_file::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContent_file::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContent_file::getPath() const {
    return m_path;
}
void OAIContent_file::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIContent_file::is_path_Set() const{
    return m_path_isSet;
}

bool OAIContent_file::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIContent_file::getSha() const {
    return m_sha;
}
void OAIContent_file::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIContent_file::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIContent_file::is_sha_Valid() const{
    return m_sha_isValid;
}

qint32 OAIContent_file::getSize() const {
    return m_size;
}
void OAIContent_file::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIContent_file::is_size_Set() const{
    return m_size_isSet;
}

bool OAIContent_file::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIContent_file::getSubmoduleGitUrl() const {
    return m_submodule_git_url;
}
void OAIContent_file::setSubmoduleGitUrl(const QString &submodule_git_url) {
    m_submodule_git_url = submodule_git_url;
    m_submodule_git_url_isSet = true;
}

bool OAIContent_file::is_submodule_git_url_Set() const{
    return m_submodule_git_url_isSet;
}

bool OAIContent_file::is_submodule_git_url_Valid() const{
    return m_submodule_git_url_isValid;
}

QString OAIContent_file::getTarget() const {
    return m_target;
}
void OAIContent_file::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIContent_file::is_target_Set() const{
    return m_target_isSet;
}

bool OAIContent_file::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIContent_file::getType() const {
    return m_type;
}
void OAIContent_file::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContent_file::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContent_file::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIContent_file::getUrl() const {
    return m_url;
}
void OAIContent_file::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContent_file::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContent_file::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContent_file::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submodule_git_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContent_file::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_content_isValid && m_download_url_isValid && m_encoding_isValid && m_git_url_isValid && m_html_url_isValid && m_name_isValid && m_path_isValid && m_sha_isValid && m_size_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
