/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGist_simple_files_value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGist_simple_files_value::OAIGist_simple_files_value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGist_simple_files_value::OAIGist_simple_files_value() {
    this->initializeModel();
}

OAIGist_simple_files_value::~OAIGist_simple_files_value() {}

void OAIGist_simple_files_value::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_raw_url_isSet = false;
    m_raw_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGist_simple_files_value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGist_simple_files_value::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_raw_url_isValid = ::OpenAPI::fromJsonValue(m_raw_url, json[QString("raw_url")]);
    m_raw_url_isSet = !json[QString("raw_url")].isNull() && m_raw_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGist_simple_files_value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGist_simple_files_value::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_raw_url_isSet) {
        obj.insert(QString("raw_url"), ::OpenAPI::toJsonValue(m_raw_url));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGist_simple_files_value::getContent() const {
    return m_content;
}
void OAIGist_simple_files_value::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGist_simple_files_value::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGist_simple_files_value::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIGist_simple_files_value::getFilename() const {
    return m_filename;
}
void OAIGist_simple_files_value::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIGist_simple_files_value::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIGist_simple_files_value::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIGist_simple_files_value::getLanguage() const {
    return m_language;
}
void OAIGist_simple_files_value::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIGist_simple_files_value::is_language_Set() const{
    return m_language_isSet;
}

bool OAIGist_simple_files_value::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIGist_simple_files_value::getRawUrl() const {
    return m_raw_url;
}
void OAIGist_simple_files_value::setRawUrl(const QString &raw_url) {
    m_raw_url = raw_url;
    m_raw_url_isSet = true;
}

bool OAIGist_simple_files_value::is_raw_url_Set() const{
    return m_raw_url_isSet;
}

bool OAIGist_simple_files_value::is_raw_url_Valid() const{
    return m_raw_url_isValid;
}

qint32 OAIGist_simple_files_value::getSize() const {
    return m_size;
}
void OAIGist_simple_files_value::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGist_simple_files_value::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGist_simple_files_value::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIGist_simple_files_value::isTruncated() const {
    return m_truncated;
}
void OAIGist_simple_files_value::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIGist_simple_files_value::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIGist_simple_files_value::is_truncated_Valid() const{
    return m_truncated_isValid;
}

QString OAIGist_simple_files_value::getType() const {
    return m_type;
}
void OAIGist_simple_files_value::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGist_simple_files_value::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGist_simple_files_value::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGist_simple_files_value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGist_simple_files_value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
