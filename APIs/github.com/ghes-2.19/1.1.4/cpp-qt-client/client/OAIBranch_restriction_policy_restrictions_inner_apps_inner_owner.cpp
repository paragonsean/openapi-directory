/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner() {
    this->initializeModel();
}

OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::~OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner() {}

void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_events_url_isSet = false;
    m_events_url_isValid = false;

    m_hooks_url_isSet = false;
    m_hooks_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_url_isSet = false;
    m_issues_url_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_members_url_isSet = false;
    m_members_url_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_public_members_url_isSet = false;
    m_public_members_url_isValid = false;

    m_repos_url_isSet = false;
    m_repos_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_events_url_isValid = ::OpenAPI::fromJsonValue(m_events_url, json[QString("events_url")]);
    m_events_url_isSet = !json[QString("events_url")].isNull() && m_events_url_isValid;

    m_hooks_url_isValid = ::OpenAPI::fromJsonValue(m_hooks_url, json[QString("hooks_url")]);
    m_hooks_url_isSet = !json[QString("hooks_url")].isNull() && m_hooks_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_url_isValid = ::OpenAPI::fromJsonValue(m_issues_url, json[QString("issues_url")]);
    m_issues_url_isSet = !json[QString("issues_url")].isNull() && m_issues_url_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_members_url_isValid = ::OpenAPI::fromJsonValue(m_members_url, json[QString("members_url")]);
    m_members_url_isSet = !json[QString("members_url")].isNull() && m_members_url_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_public_members_url_isValid = ::OpenAPI::fromJsonValue(m_public_members_url, json[QString("public_members_url")]);
    m_public_members_url_isSet = !json[QString("public_members_url")].isNull() && m_public_members_url_isValid;

    m_repos_url_isValid = ::OpenAPI::fromJsonValue(m_repos_url, json[QString("repos_url")]);
    m_repos_url_isSet = !json[QString("repos_url")].isNull() && m_repos_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_events_url_isSet) {
        obj.insert(QString("events_url"), ::OpenAPI::toJsonValue(m_events_url));
    }
    if (m_hooks_url_isSet) {
        obj.insert(QString("hooks_url"), ::OpenAPI::toJsonValue(m_hooks_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues_url_isSet) {
        obj.insert(QString("issues_url"), ::OpenAPI::toJsonValue(m_issues_url));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_members_url_isSet) {
        obj.insert(QString("members_url"), ::OpenAPI::toJsonValue(m_members_url));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_public_members_url_isSet) {
        obj.insert(QString("public_members_url"), ::OpenAPI::toJsonValue(m_public_members_url));
    }
    if (m_repos_url_isSet) {
        obj.insert(QString("repos_url"), ::OpenAPI::toJsonValue(m_repos_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getDescription() const {
    return m_description;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getEventsUrl() const {
    return m_events_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setEventsUrl(const QString &events_url) {
    m_events_url = events_url;
    m_events_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_events_url_Set() const{
    return m_events_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_events_url_Valid() const{
    return m_events_url_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getHooksUrl() const {
    return m_hooks_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setHooksUrl(const QString &hooks_url) {
    m_hooks_url = hooks_url;
    m_hooks_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_hooks_url_Set() const{
    return m_hooks_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_hooks_url_Valid() const{
    return m_hooks_url_isValid;
}

double OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getId() const {
    return m_id;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getIssuesUrl() const {
    return m_issues_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setIssuesUrl(const QString &issues_url) {
    m_issues_url = issues_url;
    m_issues_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_issues_url_Set() const{
    return m_issues_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_issues_url_Valid() const{
    return m_issues_url_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getLogin() const {
    return m_login;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_login_Set() const{
    return m_login_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getMembersUrl() const {
    return m_members_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setMembersUrl(const QString &members_url) {
    m_members_url = members_url;
    m_members_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_members_url_Set() const{
    return m_members_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_members_url_Valid() const{
    return m_members_url_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getNodeId() const {
    return m_node_id;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getPublicMembersUrl() const {
    return m_public_members_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setPublicMembersUrl(const QString &public_members_url) {
    m_public_members_url = public_members_url;
    m_public_members_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_public_members_url_Set() const{
    return m_public_members_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_public_members_url_Valid() const{
    return m_public_members_url_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getReposUrl() const {
    return m_repos_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setReposUrl(const QString &repos_url) {
    m_repos_url = repos_url;
    m_repos_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_repos_url_Set() const{
    return m_repos_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_repos_url_Valid() const{
    return m_repos_url_isValid;
}

QString OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::getUrl() const {
    return m_url;
}
void OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_members_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repos_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranch_restriction_policy_restrictions_inner_apps_inner_owner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
