/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPage_build.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPage_build::OAIPage_build(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPage_build::OAIPage_build() {
    this->initializeModel();
}

OAIPage_build::~OAIPage_build() {}

void OAIPage_build::initializeModel() {

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_pusher_isSet = false;
    m_pusher_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPage_build::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPage_build::fromJsonObject(QJsonObject json) {

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_pusher_isValid = ::OpenAPI::fromJsonValue(m_pusher, json[QString("pusher")]);
    m_pusher_isSet = !json[QString("pusher")].isNull() && m_pusher_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPage_build::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPage_build::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_pusher.isSet()) {
        obj.insert(QString("pusher"), ::OpenAPI::toJsonValue(m_pusher));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPage_build::getCommit() const {
    return m_commit;
}
void OAIPage_build::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIPage_build::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIPage_build::is_commit_Valid() const{
    return m_commit_isValid;
}

QDateTime OAIPage_build::getCreatedAt() const {
    return m_created_at;
}
void OAIPage_build::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPage_build::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPage_build::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIPage_build::getDuration() const {
    return m_duration;
}
void OAIPage_build::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPage_build::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPage_build::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIPage_build_error OAIPage_build::getError() const {
    return m_error;
}
void OAIPage_build::setError(const OAIPage_build_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIPage_build::is_error_Set() const{
    return m_error_isSet;
}

bool OAIPage_build::is_error_Valid() const{
    return m_error_isValid;
}

OAINullable_simple_user OAIPage_build::getPusher() const {
    return m_pusher;
}
void OAIPage_build::setPusher(const OAINullable_simple_user &pusher) {
    m_pusher = pusher;
    m_pusher_isSet = true;
}

bool OAIPage_build::is_pusher_Set() const{
    return m_pusher_isSet;
}

bool OAIPage_build::is_pusher_Valid() const{
    return m_pusher_isValid;
}

QString OAIPage_build::getStatus() const {
    return m_status;
}
void OAIPage_build::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPage_build::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPage_build::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIPage_build::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPage_build::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPage_build::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPage_build::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPage_build::getUrl() const {
    return m_url;
}
void OAIPage_build::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPage_build::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPage_build::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPage_build::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pusher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPage_build::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commit_isValid && m_created_at_isValid && m_duration_isValid && m_error_isValid && m_pusher_isValid && m_status_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
