/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIssue_event.h
 *
 * Issue Event
 */

#ifndef OAIIssue_event_H
#define OAIIssue_event_H

#include <QJsonObject>

#include "OAIAuthor_association.h"
#include "OAIIssue_event_dismissed_review.h"
#include "OAIIssue_event_label.h"
#include "OAIIssue_event_milestone.h"
#include "OAIIssue_event_project_card.h"
#include "OAIIssue_event_rename.h"
#include "OAIIssue_simple.h"
#include "OAINullable_integration.h"
#include "OAINullable_simple_user.h"
#include "OAITeam.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINullable_simple_user;
class OAIIssue_event_dismissed_review;
class OAIIssue_simple;
class OAIIssue_event_label;
class OAIIssue_event_milestone;
class OAINullable_integration;
class OAIIssue_event_project_card;
class OAIIssue_event_rename;
class OAITeam;

class OAIIssue_event : public OAIObject {
public:
    OAIIssue_event();
    OAIIssue_event(QString json);
    ~OAIIssue_event() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINullable_simple_user getActor() const;
    void setActor(const OAINullable_simple_user &actor);
    bool is_actor_Set() const;
    bool is_actor_Valid() const;

    OAINullable_simple_user getAssignee() const;
    void setAssignee(const OAINullable_simple_user &assignee);
    bool is_assignee_Set() const;
    bool is_assignee_Valid() const;

    OAINullable_simple_user getAssigner() const;
    void setAssigner(const OAINullable_simple_user &assigner);
    bool is_assigner_Set() const;
    bool is_assigner_Valid() const;

    OAIAuthor_association getAuthorAssociation() const;
    void setAuthorAssociation(const OAIAuthor_association &author_association);
    bool is_author_association_Set() const;
    bool is_author_association_Valid() const;

    QString getCommitId() const;
    void setCommitId(const QString &commit_id);
    bool is_commit_id_Set() const;
    bool is_commit_id_Valid() const;

    QString getCommitUrl() const;
    void setCommitUrl(const QString &commit_url);
    bool is_commit_url_Set() const;
    bool is_commit_url_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIIssue_event_dismissed_review getDismissedReview() const;
    void setDismissedReview(const OAIIssue_event_dismissed_review &dismissed_review);
    bool is_dismissed_review_Set() const;
    bool is_dismissed_review_Valid() const;

    QString getEvent() const;
    void setEvent(const QString &event);
    bool is_event_Set() const;
    bool is_event_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIIssue_simple getIssue() const;
    void setIssue(const OAIIssue_simple &issue);
    bool is_issue_Set() const;
    bool is_issue_Valid() const;

    OAIIssue_event_label getLabel() const;
    void setLabel(const OAIIssue_event_label &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    QString getLockReason() const;
    void setLockReason(const QString &lock_reason);
    bool is_lock_reason_Set() const;
    bool is_lock_reason_Valid() const;

    OAIIssue_event_milestone getMilestone() const;
    void setMilestone(const OAIIssue_event_milestone &milestone);
    bool is_milestone_Set() const;
    bool is_milestone_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    OAINullable_integration getPerformedViaGithubApp() const;
    void setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app);
    bool is_performed_via_github_app_Set() const;
    bool is_performed_via_github_app_Valid() const;

    OAIIssue_event_project_card getProjectCard() const;
    void setProjectCard(const OAIIssue_event_project_card &project_card);
    bool is_project_card_Set() const;
    bool is_project_card_Valid() const;

    OAIIssue_event_rename getRename() const;
    void setRename(const OAIIssue_event_rename &rename);
    bool is_rename_Set() const;
    bool is_rename_Valid() const;

    OAINullable_simple_user getRequestedReviewer() const;
    void setRequestedReviewer(const OAINullable_simple_user &requested_reviewer);
    bool is_requested_reviewer_Set() const;
    bool is_requested_reviewer_Valid() const;

    OAITeam getRequestedTeam() const;
    void setRequestedTeam(const OAITeam &requested_team);
    bool is_requested_team_Set() const;
    bool is_requested_team_Valid() const;

    OAINullable_simple_user getReviewRequester() const;
    void setReviewRequester(const OAINullable_simple_user &review_requester);
    bool is_review_requester_Set() const;
    bool is_review_requester_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINullable_simple_user m_actor;
    bool m_actor_isSet;
    bool m_actor_isValid;

    OAINullable_simple_user m_assignee;
    bool m_assignee_isSet;
    bool m_assignee_isValid;

    OAINullable_simple_user m_assigner;
    bool m_assigner_isSet;
    bool m_assigner_isValid;

    OAIAuthor_association m_author_association;
    bool m_author_association_isSet;
    bool m_author_association_isValid;

    QString m_commit_id;
    bool m_commit_id_isSet;
    bool m_commit_id_isValid;

    QString m_commit_url;
    bool m_commit_url_isSet;
    bool m_commit_url_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIIssue_event_dismissed_review m_dismissed_review;
    bool m_dismissed_review_isSet;
    bool m_dismissed_review_isValid;

    QString m_event;
    bool m_event_isSet;
    bool m_event_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIIssue_simple m_issue;
    bool m_issue_isSet;
    bool m_issue_isValid;

    OAIIssue_event_label m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    QString m_lock_reason;
    bool m_lock_reason_isSet;
    bool m_lock_reason_isValid;

    OAIIssue_event_milestone m_milestone;
    bool m_milestone_isSet;
    bool m_milestone_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    OAINullable_integration m_performed_via_github_app;
    bool m_performed_via_github_app_isSet;
    bool m_performed_via_github_app_isValid;

    OAIIssue_event_project_card m_project_card;
    bool m_project_card_isSet;
    bool m_project_card_isValid;

    OAIIssue_event_rename m_rename;
    bool m_rename_isSet;
    bool m_rename_isValid;

    OAINullable_simple_user m_requested_reviewer;
    bool m_requested_reviewer_isSet;
    bool m_requested_reviewer_isValid;

    OAITeam m_requested_team;
    bool m_requested_team_isSet;
    bool m_requested_team_isValid;

    OAINullable_simple_user m_review_requester;
    bool m_review_requester_isSet;
    bool m_review_requester_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIssue_event)

#endif // OAIIssue_event_H
