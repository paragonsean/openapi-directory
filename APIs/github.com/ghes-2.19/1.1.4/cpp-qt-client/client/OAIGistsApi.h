/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGistsApi_H
#define OAI_OAIGistsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBase_gist.h"
#include "OAIBasic_error.h"
#include "OAIGist_comment.h"
#include "OAIGist_commit.h"
#include "OAIGist_simple.h"
#include "OAIGists_create_comment_request.h"
#include "OAIGists_create_request.h"
#include "OAIGists_get_403_response.h"
#include "OAIGists_update_request.h"
#include "OAIObject.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGistsApi : public QObject {
    Q_OBJECT

public:
    OAIGistsApi(const int timeOut = 0);
    ~OAIGistsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  gist_id QString [required]
    */
    virtual void gists_checkIsStarred(const QString &gist_id);

    /**
    * @param[in]  oai_gists_create_request OAIGists_create_request [required]
    */
    virtual void gists_create(const OAIGists_create_request &oai_gists_create_request);

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  oai_gists_create_comment_request OAIGists_create_comment_request [required]
    */
    virtual void gists_createComment(const QString &gist_id, const OAIGists_create_comment_request &oai_gists_create_comment_request);

    /**
    * @param[in]  gist_id QString [required]
    */
    virtual void gists_delete(const QString &gist_id);

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void gists_deleteComment(const QString &gist_id, const qint32 &comment_id);

    /**
    * @param[in]  gist_id QString [required]
    */
    virtual void gists_fork(const QString &gist_id);

    /**
    * @param[in]  gist_id QString [required]
    */
    virtual void gists_get(const QString &gist_id);

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void gists_getComment(const QString &gist_id, const qint32 &comment_id);

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  sha QString [required]
    */
    virtual void gists_getRevision(const QString &gist_id, const QString &sha);

    /**
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void gists_list(const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void gists_listComments(const QString &gist_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void gists_listCommits(const QString &gist_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void gists_listForUser(const QString &username, const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void gists_listForks(const QString &gist_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void gists_listPublic(const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  since QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void gists_listStarred(const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  gist_id QString [required]
    */
    virtual void gists_star(const QString &gist_id);

    /**
    * @param[in]  gist_id QString [required]
    */
    virtual void gists_unstar(const QString &gist_id);

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  oai_gists_update_request OAIGists_update_request [required]
    */
    virtual void gists_update(const QString &gist_id, const OAIGists_update_request &oai_gists_update_request);

    /**
    * @param[in]  gist_id QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_gists_create_comment_request OAIGists_create_comment_request [required]
    */
    virtual void gists_updateComment(const QString &gist_id, const qint32 &comment_id, const OAIGists_create_comment_request &oai_gists_create_comment_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gists_checkIsStarredCallback(OAIHttpRequestWorker *worker);
    void gists_createCallback(OAIHttpRequestWorker *worker);
    void gists_createCommentCallback(OAIHttpRequestWorker *worker);
    void gists_deleteCallback(OAIHttpRequestWorker *worker);
    void gists_deleteCommentCallback(OAIHttpRequestWorker *worker);
    void gists_forkCallback(OAIHttpRequestWorker *worker);
    void gists_getCallback(OAIHttpRequestWorker *worker);
    void gists_getCommentCallback(OAIHttpRequestWorker *worker);
    void gists_getRevisionCallback(OAIHttpRequestWorker *worker);
    void gists_listCallback(OAIHttpRequestWorker *worker);
    void gists_listCommentsCallback(OAIHttpRequestWorker *worker);
    void gists_listCommitsCallback(OAIHttpRequestWorker *worker);
    void gists_listForUserCallback(OAIHttpRequestWorker *worker);
    void gists_listForksCallback(OAIHttpRequestWorker *worker);
    void gists_listPublicCallback(OAIHttpRequestWorker *worker);
    void gists_listStarredCallback(OAIHttpRequestWorker *worker);
    void gists_starCallback(OAIHttpRequestWorker *worker);
    void gists_unstarCallback(OAIHttpRequestWorker *worker);
    void gists_updateCallback(OAIHttpRequestWorker *worker);
    void gists_updateCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gists_checkIsStarredSignal();
    void gists_createSignal(OAIGist_simple summary);
    void gists_createCommentSignal(OAIGist_comment summary);
    void gists_deleteSignal();
    void gists_deleteCommentSignal();
    void gists_forkSignal(OAIBase_gist summary);
    void gists_getSignal(OAIGist_simple summary);
    void gists_getCommentSignal(OAIGist_comment summary);
    void gists_getRevisionSignal(OAIGist_simple summary);
    void gists_listSignal(QList<OAIBase_gist> summary);
    void gists_listCommentsSignal(QList<OAIGist_comment> summary);
    void gists_listCommitsSignal(QList<OAIGist_commit> summary);
    void gists_listForUserSignal(QList<OAIBase_gist> summary);
    void gists_listForksSignal(QList<OAIGist_simple> summary);
    void gists_listPublicSignal(QList<OAIBase_gist> summary);
    void gists_listStarredSignal(QList<OAIBase_gist> summary);
    void gists_starSignal();
    void gists_unstarSignal();
    void gists_updateSignal(OAIGist_simple summary);
    void gists_updateCommentSignal(OAIGist_comment summary);


    void gists_checkIsStarredSignalFull(OAIHttpRequestWorker *worker);
    void gists_createSignalFull(OAIHttpRequestWorker *worker, OAIGist_simple summary);
    void gists_createCommentSignalFull(OAIHttpRequestWorker *worker, OAIGist_comment summary);
    void gists_deleteSignalFull(OAIHttpRequestWorker *worker);
    void gists_deleteCommentSignalFull(OAIHttpRequestWorker *worker);
    void gists_forkSignalFull(OAIHttpRequestWorker *worker, OAIBase_gist summary);
    void gists_getSignalFull(OAIHttpRequestWorker *worker, OAIGist_simple summary);
    void gists_getCommentSignalFull(OAIHttpRequestWorker *worker, OAIGist_comment summary);
    void gists_getRevisionSignalFull(OAIHttpRequestWorker *worker, OAIGist_simple summary);
    void gists_listSignalFull(OAIHttpRequestWorker *worker, QList<OAIBase_gist> summary);
    void gists_listCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGist_comment> summary);
    void gists_listCommitsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGist_commit> summary);
    void gists_listForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIBase_gist> summary);
    void gists_listForksSignalFull(OAIHttpRequestWorker *worker, QList<OAIGist_simple> summary);
    void gists_listPublicSignalFull(OAIHttpRequestWorker *worker, QList<OAIBase_gist> summary);
    void gists_listStarredSignalFull(OAIHttpRequestWorker *worker, QList<OAIBase_gist> summary);
    void gists_starSignalFull(OAIHttpRequestWorker *worker);
    void gists_unstarSignalFull(OAIHttpRequestWorker *worker);
    void gists_updateSignalFull(OAIHttpRequestWorker *worker, OAIGist_simple summary);
    void gists_updateCommentSignalFull(OAIHttpRequestWorker *worker, OAIGist_comment summary);

    Q_DECL_DEPRECATED_X("Use gists_checkIsStarredSignalError() instead")
    void gists_checkIsStarredSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gists_checkIsStarredSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_createSignalError() instead")
    void gists_createSignalE(OAIGist_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_createSignalError(OAIGist_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_createCommentSignalError() instead")
    void gists_createCommentSignalE(OAIGist_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_createCommentSignalError(OAIGist_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_deleteSignalError() instead")
    void gists_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gists_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_deleteCommentSignalError() instead")
    void gists_deleteCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gists_deleteCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_forkSignalError() instead")
    void gists_forkSignalE(OAIBase_gist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_forkSignalError(OAIBase_gist summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_getSignalError() instead")
    void gists_getSignalE(OAIGist_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_getSignalError(OAIGist_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_getCommentSignalError() instead")
    void gists_getCommentSignalE(OAIGist_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_getCommentSignalError(OAIGist_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_getRevisionSignalError() instead")
    void gists_getRevisionSignalE(OAIGist_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_getRevisionSignalError(OAIGist_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listSignalError() instead")
    void gists_listSignalE(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listSignalError(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listCommentsSignalError() instead")
    void gists_listCommentsSignalE(QList<OAIGist_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listCommentsSignalError(QList<OAIGist_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listCommitsSignalError() instead")
    void gists_listCommitsSignalE(QList<OAIGist_commit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listCommitsSignalError(QList<OAIGist_commit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listForUserSignalError() instead")
    void gists_listForUserSignalE(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listForUserSignalError(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listForksSignalError() instead")
    void gists_listForksSignalE(QList<OAIGist_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listForksSignalError(QList<OAIGist_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listPublicSignalError() instead")
    void gists_listPublicSignalE(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listPublicSignalError(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listStarredSignalError() instead")
    void gists_listStarredSignalE(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listStarredSignalError(QList<OAIBase_gist> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_starSignalError() instead")
    void gists_starSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gists_starSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_unstarSignalError() instead")
    void gists_unstarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gists_unstarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_updateSignalError() instead")
    void gists_updateSignalE(OAIGist_simple summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_updateSignalError(OAIGist_simple summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_updateCommentSignalError() instead")
    void gists_updateCommentSignalE(OAIGist_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_updateCommentSignalError(OAIGist_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gists_checkIsStarredSignalErrorFull() instead")
    void gists_checkIsStarredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_checkIsStarredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_createSignalErrorFull() instead")
    void gists_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_createCommentSignalErrorFull() instead")
    void gists_createCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_createCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_deleteSignalErrorFull() instead")
    void gists_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_deleteCommentSignalErrorFull() instead")
    void gists_deleteCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_deleteCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_forkSignalErrorFull() instead")
    void gists_forkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_forkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_getSignalErrorFull() instead")
    void gists_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_getCommentSignalErrorFull() instead")
    void gists_getCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_getCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_getRevisionSignalErrorFull() instead")
    void gists_getRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_getRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listSignalErrorFull() instead")
    void gists_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listCommentsSignalErrorFull() instead")
    void gists_listCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listCommitsSignalErrorFull() instead")
    void gists_listCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listForUserSignalErrorFull() instead")
    void gists_listForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listForksSignalErrorFull() instead")
    void gists_listForksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listForksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listPublicSignalErrorFull() instead")
    void gists_listPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_listStarredSignalErrorFull() instead")
    void gists_listStarredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_listStarredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_starSignalErrorFull() instead")
    void gists_starSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_starSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_unstarSignalErrorFull() instead")
    void gists_unstarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_unstarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_updateSignalErrorFull() instead")
    void gists_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gists_updateCommentSignalErrorFull() instead")
    void gists_updateCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gists_updateCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
