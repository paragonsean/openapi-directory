/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck_run.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck_run::OAICheck_run(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck_run::OAICheck_run() {
    this->initializeModel();
}

OAICheck_run::~OAICheck_run() {}

void OAICheck_run::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_check_suite_isSet = false;
    m_check_suite_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_conclusion_isSet = false;
    m_conclusion_isValid = false;

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_details_url_isSet = false;
    m_details_url_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_head_sha_isSet = false;
    m_head_sha_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_pull_requests_isSet = false;
    m_pull_requests_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICheck_run::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck_run::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_check_suite_isValid = ::OpenAPI::fromJsonValue(m_check_suite, json[QString("check_suite")]);
    m_check_suite_isSet = !json[QString("check_suite")].isNull() && m_check_suite_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_conclusion_isValid = ::OpenAPI::fromJsonValue(m_conclusion, json[QString("conclusion")]);
    m_conclusion_isSet = !json[QString("conclusion")].isNull() && m_conclusion_isValid;

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_details_url_isValid = ::OpenAPI::fromJsonValue(m_details_url, json[QString("details_url")]);
    m_details_url_isSet = !json[QString("details_url")].isNull() && m_details_url_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_head_sha_isValid = ::OpenAPI::fromJsonValue(m_head_sha, json[QString("head_sha")]);
    m_head_sha_isSet = !json[QString("head_sha")].isNull() && m_head_sha_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_pull_requests, json[QString("pull_requests")]);
    m_pull_requests_isSet = !json[QString("pull_requests")].isNull() && m_pull_requests_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICheck_run::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck_run::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_check_suite.isSet()) {
        obj.insert(QString("check_suite"), ::OpenAPI::toJsonValue(m_check_suite));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_conclusion_isSet) {
        obj.insert(QString("conclusion"), ::OpenAPI::toJsonValue(m_conclusion));
    }
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_details_url_isSet) {
        obj.insert(QString("details_url"), ::OpenAPI::toJsonValue(m_details_url));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_head_sha_isSet) {
        obj.insert(QString("head_sha"), ::OpenAPI::toJsonValue(m_head_sha));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_pull_requests.size() > 0) {
        obj.insert(QString("pull_requests"), ::OpenAPI::toJsonValue(m_pull_requests));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAINullable_integration OAICheck_run::getApp() const {
    return m_app;
}
void OAICheck_run::setApp(const OAINullable_integration &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAICheck_run::is_app_Set() const{
    return m_app_isSet;
}

bool OAICheck_run::is_app_Valid() const{
    return m_app_isValid;
}

OAICheck_run_check_suite OAICheck_run::getCheckSuite() const {
    return m_check_suite;
}
void OAICheck_run::setCheckSuite(const OAICheck_run_check_suite &check_suite) {
    m_check_suite = check_suite;
    m_check_suite_isSet = true;
}

bool OAICheck_run::is_check_suite_Set() const{
    return m_check_suite_isSet;
}

bool OAICheck_run::is_check_suite_Valid() const{
    return m_check_suite_isValid;
}

QDateTime OAICheck_run::getCompletedAt() const {
    return m_completed_at;
}
void OAICheck_run::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAICheck_run::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAICheck_run::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QString OAICheck_run::getConclusion() const {
    return m_conclusion;
}
void OAICheck_run::setConclusion(const QString &conclusion) {
    m_conclusion = conclusion;
    m_conclusion_isSet = true;
}

bool OAICheck_run::is_conclusion_Set() const{
    return m_conclusion_isSet;
}

bool OAICheck_run::is_conclusion_Valid() const{
    return m_conclusion_isValid;
}

OAIDeployment_simple OAICheck_run::getDeployment() const {
    return m_deployment;
}
void OAICheck_run::setDeployment(const OAIDeployment_simple &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAICheck_run::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAICheck_run::is_deployment_Valid() const{
    return m_deployment_isValid;
}

QString OAICheck_run::getDetailsUrl() const {
    return m_details_url;
}
void OAICheck_run::setDetailsUrl(const QString &details_url) {
    m_details_url = details_url;
    m_details_url_isSet = true;
}

bool OAICheck_run::is_details_url_Set() const{
    return m_details_url_isSet;
}

bool OAICheck_run::is_details_url_Valid() const{
    return m_details_url_isValid;
}

QString OAICheck_run::getExternalId() const {
    return m_external_id;
}
void OAICheck_run::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAICheck_run::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAICheck_run::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAICheck_run::getHeadSha() const {
    return m_head_sha;
}
void OAICheck_run::setHeadSha(const QString &head_sha) {
    m_head_sha = head_sha;
    m_head_sha_isSet = true;
}

bool OAICheck_run::is_head_sha_Set() const{
    return m_head_sha_isSet;
}

bool OAICheck_run::is_head_sha_Valid() const{
    return m_head_sha_isValid;
}

QString OAICheck_run::getHtmlUrl() const {
    return m_html_url;
}
void OAICheck_run::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICheck_run::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICheck_run::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAICheck_run::getId() const {
    return m_id;
}
void OAICheck_run::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICheck_run::is_id_Set() const{
    return m_id_isSet;
}

bool OAICheck_run::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICheck_run::getName() const {
    return m_name;
}
void OAICheck_run::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICheck_run::is_name_Set() const{
    return m_name_isSet;
}

bool OAICheck_run::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICheck_run::getNodeId() const {
    return m_node_id;
}
void OAICheck_run::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAICheck_run::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAICheck_run::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAICheck_run_output OAICheck_run::getOutput() const {
    return m_output;
}
void OAICheck_run::setOutput(const OAICheck_run_output &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAICheck_run::is_output_Set() const{
    return m_output_isSet;
}

bool OAICheck_run::is_output_Valid() const{
    return m_output_isValid;
}

QList<OAIPull_request_minimal> OAICheck_run::getPullRequests() const {
    return m_pull_requests;
}
void OAICheck_run::setPullRequests(const QList<OAIPull_request_minimal> &pull_requests) {
    m_pull_requests = pull_requests;
    m_pull_requests_isSet = true;
}

bool OAICheck_run::is_pull_requests_Set() const{
    return m_pull_requests_isSet;
}

bool OAICheck_run::is_pull_requests_Valid() const{
    return m_pull_requests_isValid;
}

QDateTime OAICheck_run::getStartedAt() const {
    return m_started_at;
}
void OAICheck_run::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAICheck_run::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAICheck_run::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAICheck_run::getStatus() const {
    return m_status;
}
void OAICheck_run::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICheck_run::is_status_Set() const{
    return m_status_isSet;
}

bool OAICheck_run::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICheck_run::getUrl() const {
    return m_url;
}
void OAICheck_run::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICheck_run::is_url_Set() const{
    return m_url_isSet;
}

bool OAICheck_run::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICheck_run::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_suite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck_run::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_isValid && m_check_suite_isValid && m_completed_at_isValid && m_conclusion_isValid && m_details_url_isValid && m_external_id_isValid && m_head_sha_isValid && m_html_url_isValid && m_id_isValid && m_name_isValid && m_node_id_isValid && m_output_isValid && m_pull_requests_isValid && m_started_at_isValid && m_status_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
