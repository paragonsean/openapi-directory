/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssues_update_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssues_update_request::OAIIssues_update_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssues_update_request::OAIIssues_update_request() {
    this->initializeModel();
}

OAIIssues_update_request::~OAIIssues_update_request() {}

void OAIIssues_update_request::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignees_isSet = false;
    m_assignees_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIIssues_update_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssues_update_request::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignees_isValid = ::OpenAPI::fromJsonValue(m_assignees, json[QString("assignees")]);
    m_assignees_isSet = !json[QString("assignees")].isNull() && m_assignees_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIIssues_update_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssues_update_request::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee_isSet) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignees.size() > 0) {
        obj.insert(QString("assignees"), ::OpenAPI::toJsonValue(m_assignees));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIIssues_update_request::getAssignee() const {
    return m_assignee;
}
void OAIIssues_update_request::setAssignee(const QString &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIIssues_update_request::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIIssues_update_request::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<QString> OAIIssues_update_request::getAssignees() const {
    return m_assignees;
}
void OAIIssues_update_request::setAssignees(const QList<QString> &assignees) {
    m_assignees = assignees;
    m_assignees_isSet = true;
}

bool OAIIssues_update_request::is_assignees_Set() const{
    return m_assignees_isSet;
}

bool OAIIssues_update_request::is_assignees_Valid() const{
    return m_assignees_isValid;
}

QString OAIIssues_update_request::getBody() const {
    return m_body;
}
void OAIIssues_update_request::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIIssues_update_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAIIssues_update_request::is_body_Valid() const{
    return m_body_isValid;
}

QList<OAIIssues_create_request_labels_inner> OAIIssues_update_request::getLabels() const {
    return m_labels;
}
void OAIIssues_update_request::setLabels(const QList<OAIIssues_create_request_labels_inner> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIIssues_update_request::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIIssues_update_request::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIIssues_update_request_milestone OAIIssues_update_request::getMilestone() const {
    return m_milestone;
}
void OAIIssues_update_request::setMilestone(const OAIIssues_update_request_milestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIIssues_update_request::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIIssues_update_request::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAIIssues_update_request::getState() const {
    return m_state;
}
void OAIIssues_update_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIssues_update_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIssues_update_request::is_state_Valid() const{
    return m_state_isValid;
}

OAIIssues_update_request_title OAIIssues_update_request::getTitle() const {
    return m_title;
}
void OAIIssues_update_request::setTitle(const OAIIssues_update_request_title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIssues_update_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIssues_update_request::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIIssues_update_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssues_update_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
