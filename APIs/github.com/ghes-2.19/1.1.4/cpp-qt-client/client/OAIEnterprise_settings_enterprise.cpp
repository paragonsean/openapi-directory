/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_settings_enterprise.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_settings_enterprise::OAIEnterprise_settings_enterprise(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_settings_enterprise::OAIEnterprise_settings_enterprise() {
    this->initializeModel();
}

OAIEnterprise_settings_enterprise::~OAIEnterprise_settings_enterprise() {}

void OAIEnterprise_settings_enterprise::initializeModel() {

    m_admin_password_isSet = false;
    m_admin_password_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_auth_mode_isSet = false;
    m_auth_mode_isValid = false;

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_cas_isSet = false;
    m_cas_isValid = false;

    m_collectd_isSet = false;
    m_collectd_isValid = false;

    m_configuration_id_isSet = false;
    m_configuration_id_isValid = false;

    m_configuration_run_count_isSet = false;
    m_configuration_run_count_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_expire_sessions_isSet = false;
    m_expire_sessions_isValid = false;

    m_github_hostname_isSet = false;
    m_github_hostname_isValid = false;

    m_github_oauth_isSet = false;
    m_github_oauth_isValid = false;

    m_github_ssl_isSet = false;
    m_github_ssl_isValid = false;

    m_http_proxy_isSet = false;
    m_http_proxy_isValid = false;

    m_identicons_host_isSet = false;
    m_identicons_host_isValid = false;

    m_ldap_isSet = false;
    m_ldap_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_load_balancer_isSet = false;
    m_load_balancer_isValid = false;

    m_mapping_isSet = false;
    m_mapping_isValid = false;

    m_ntp_isSet = false;
    m_ntp_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_private_mode_isSet = false;
    m_private_mode_isValid = false;

    m_public_pages_isSet = false;
    m_public_pages_isValid = false;

    m_saml_isSet = false;
    m_saml_isValid = false;

    m_signup_enabled_isSet = false;
    m_signup_enabled_isValid = false;

    m_smtp_isSet = false;
    m_smtp_isValid = false;

    m_snmp_isSet = false;
    m_snmp_isValid = false;

    m_subdomain_isolation_isSet = false;
    m_subdomain_isolation_isValid = false;

    m_syslog_isSet = false;
    m_syslog_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIEnterprise_settings_enterprise::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_settings_enterprise::fromJsonObject(QJsonObject json) {

    m_admin_password_isValid = ::OpenAPI::fromJsonValue(m_admin_password, json[QString("admin_password")]);
    m_admin_password_isSet = !json[QString("admin_password")].isNull() && m_admin_password_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_auth_mode_isValid = ::OpenAPI::fromJsonValue(m_auth_mode, json[QString("auth_mode")]);
    m_auth_mode_isSet = !json[QString("auth_mode")].isNull() && m_auth_mode_isValid;

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_cas_isValid = ::OpenAPI::fromJsonValue(m_cas, json[QString("cas")]);
    m_cas_isSet = !json[QString("cas")].isNull() && m_cas_isValid;

    m_collectd_isValid = ::OpenAPI::fromJsonValue(m_collectd, json[QString("collectd")]);
    m_collectd_isSet = !json[QString("collectd")].isNull() && m_collectd_isValid;

    m_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_configuration_id, json[QString("configuration_id")]);
    m_configuration_id_isSet = !json[QString("configuration_id")].isNull() && m_configuration_id_isValid;

    m_configuration_run_count_isValid = ::OpenAPI::fromJsonValue(m_configuration_run_count, json[QString("configuration_run_count")]);
    m_configuration_run_count_isSet = !json[QString("configuration_run_count")].isNull() && m_configuration_run_count_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_expire_sessions_isValid = ::OpenAPI::fromJsonValue(m_expire_sessions, json[QString("expire_sessions")]);
    m_expire_sessions_isSet = !json[QString("expire_sessions")].isNull() && m_expire_sessions_isValid;

    m_github_hostname_isValid = ::OpenAPI::fromJsonValue(m_github_hostname, json[QString("github_hostname")]);
    m_github_hostname_isSet = !json[QString("github_hostname")].isNull() && m_github_hostname_isValid;

    m_github_oauth_isValid = ::OpenAPI::fromJsonValue(m_github_oauth, json[QString("github_oauth")]);
    m_github_oauth_isSet = !json[QString("github_oauth")].isNull() && m_github_oauth_isValid;

    m_github_ssl_isValid = ::OpenAPI::fromJsonValue(m_github_ssl, json[QString("github_ssl")]);
    m_github_ssl_isSet = !json[QString("github_ssl")].isNull() && m_github_ssl_isValid;

    m_http_proxy_isValid = ::OpenAPI::fromJsonValue(m_http_proxy, json[QString("http_proxy")]);
    m_http_proxy_isSet = !json[QString("http_proxy")].isNull() && m_http_proxy_isValid;

    m_identicons_host_isValid = ::OpenAPI::fromJsonValue(m_identicons_host, json[QString("identicons_host")]);
    m_identicons_host_isSet = !json[QString("identicons_host")].isNull() && m_identicons_host_isValid;

    m_ldap_isValid = ::OpenAPI::fromJsonValue(m_ldap, json[QString("ldap")]);
    m_ldap_isSet = !json[QString("ldap")].isNull() && m_ldap_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_load_balancer_isValid = ::OpenAPI::fromJsonValue(m_load_balancer, json[QString("load_balancer")]);
    m_load_balancer_isSet = !json[QString("load_balancer")].isNull() && m_load_balancer_isValid;

    m_mapping_isValid = ::OpenAPI::fromJsonValue(m_mapping, json[QString("mapping")]);
    m_mapping_isSet = !json[QString("mapping")].isNull() && m_mapping_isValid;

    m_ntp_isValid = ::OpenAPI::fromJsonValue(m_ntp, json[QString("ntp")]);
    m_ntp_isSet = !json[QString("ntp")].isNull() && m_ntp_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_private_mode_isValid = ::OpenAPI::fromJsonValue(m_private_mode, json[QString("private_mode")]);
    m_private_mode_isSet = !json[QString("private_mode")].isNull() && m_private_mode_isValid;

    m_public_pages_isValid = ::OpenAPI::fromJsonValue(m_public_pages, json[QString("public_pages")]);
    m_public_pages_isSet = !json[QString("public_pages")].isNull() && m_public_pages_isValid;

    m_saml_isValid = ::OpenAPI::fromJsonValue(m_saml, json[QString("saml")]);
    m_saml_isSet = !json[QString("saml")].isNull() && m_saml_isValid;

    m_signup_enabled_isValid = ::OpenAPI::fromJsonValue(m_signup_enabled, json[QString("signup_enabled")]);
    m_signup_enabled_isSet = !json[QString("signup_enabled")].isNull() && m_signup_enabled_isValid;

    m_smtp_isValid = ::OpenAPI::fromJsonValue(m_smtp, json[QString("smtp")]);
    m_smtp_isSet = !json[QString("smtp")].isNull() && m_smtp_isValid;

    m_snmp_isValid = ::OpenAPI::fromJsonValue(m_snmp, json[QString("snmp")]);
    m_snmp_isSet = !json[QString("snmp")].isNull() && m_snmp_isValid;

    m_subdomain_isolation_isValid = ::OpenAPI::fromJsonValue(m_subdomain_isolation, json[QString("subdomain_isolation")]);
    m_subdomain_isolation_isSet = !json[QString("subdomain_isolation")].isNull() && m_subdomain_isolation_isValid;

    m_syslog_isValid = ::OpenAPI::fromJsonValue(m_syslog, json[QString("syslog")]);
    m_syslog_isSet = !json[QString("syslog")].isNull() && m_syslog_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIEnterprise_settings_enterprise::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_settings_enterprise::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_password_isSet) {
        obj.insert(QString("admin_password"), ::OpenAPI::toJsonValue(m_admin_password));
    }
    if (m_assets_isSet) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_auth_mode_isSet) {
        obj.insert(QString("auth_mode"), ::OpenAPI::toJsonValue(m_auth_mode));
    }
    if (m_avatar.isSet()) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_cas.isSet()) {
        obj.insert(QString("cas"), ::OpenAPI::toJsonValue(m_cas));
    }
    if (m_collectd.isSet()) {
        obj.insert(QString("collectd"), ::OpenAPI::toJsonValue(m_collectd));
    }
    if (m_configuration_id_isSet) {
        obj.insert(QString("configuration_id"), ::OpenAPI::toJsonValue(m_configuration_id));
    }
    if (m_configuration_run_count_isSet) {
        obj.insert(QString("configuration_run_count"), ::OpenAPI::toJsonValue(m_configuration_run_count));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_expire_sessions_isSet) {
        obj.insert(QString("expire_sessions"), ::OpenAPI::toJsonValue(m_expire_sessions));
    }
    if (m_github_hostname_isSet) {
        obj.insert(QString("github_hostname"), ::OpenAPI::toJsonValue(m_github_hostname));
    }
    if (m_github_oauth.isSet()) {
        obj.insert(QString("github_oauth"), ::OpenAPI::toJsonValue(m_github_oauth));
    }
    if (m_github_ssl.isSet()) {
        obj.insert(QString("github_ssl"), ::OpenAPI::toJsonValue(m_github_ssl));
    }
    if (m_http_proxy_isSet) {
        obj.insert(QString("http_proxy"), ::OpenAPI::toJsonValue(m_http_proxy));
    }
    if (m_identicons_host_isSet) {
        obj.insert(QString("identicons_host"), ::OpenAPI::toJsonValue(m_identicons_host));
    }
    if (m_ldap.isSet()) {
        obj.insert(QString("ldap"), ::OpenAPI::toJsonValue(m_ldap));
    }
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_load_balancer_isSet) {
        obj.insert(QString("load_balancer"), ::OpenAPI::toJsonValue(m_load_balancer));
    }
    if (m_mapping.isSet()) {
        obj.insert(QString("mapping"), ::OpenAPI::toJsonValue(m_mapping));
    }
    if (m_ntp.isSet()) {
        obj.insert(QString("ntp"), ::OpenAPI::toJsonValue(m_ntp));
    }
    if (m_pages.isSet()) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_private_mode_isSet) {
        obj.insert(QString("private_mode"), ::OpenAPI::toJsonValue(m_private_mode));
    }
    if (m_public_pages_isSet) {
        obj.insert(QString("public_pages"), ::OpenAPI::toJsonValue(m_public_pages));
    }
    if (m_saml.isSet()) {
        obj.insert(QString("saml"), ::OpenAPI::toJsonValue(m_saml));
    }
    if (m_signup_enabled_isSet) {
        obj.insert(QString("signup_enabled"), ::OpenAPI::toJsonValue(m_signup_enabled));
    }
    if (m_smtp.isSet()) {
        obj.insert(QString("smtp"), ::OpenAPI::toJsonValue(m_smtp));
    }
    if (m_snmp.isSet()) {
        obj.insert(QString("snmp"), ::OpenAPI::toJsonValue(m_snmp));
    }
    if (m_subdomain_isolation_isSet) {
        obj.insert(QString("subdomain_isolation"), ::OpenAPI::toJsonValue(m_subdomain_isolation));
    }
    if (m_syslog.isSet()) {
        obj.insert(QString("syslog"), ::OpenAPI::toJsonValue(m_syslog));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAIEnterprise_settings_enterprise::getAdminPassword() const {
    return m_admin_password;
}
void OAIEnterprise_settings_enterprise::setAdminPassword(const QString &admin_password) {
    m_admin_password = admin_password;
    m_admin_password_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_admin_password_Set() const{
    return m_admin_password_isSet;
}

bool OAIEnterprise_settings_enterprise::is_admin_password_Valid() const{
    return m_admin_password_isValid;
}

QString OAIEnterprise_settings_enterprise::getAssets() const {
    return m_assets;
}
void OAIEnterprise_settings_enterprise::setAssets(const QString &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIEnterprise_settings_enterprise::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIEnterprise_settings_enterprise::getAuthMode() const {
    return m_auth_mode;
}
void OAIEnterprise_settings_enterprise::setAuthMode(const QString &auth_mode) {
    m_auth_mode = auth_mode;
    m_auth_mode_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_auth_mode_Set() const{
    return m_auth_mode_isSet;
}

bool OAIEnterprise_settings_enterprise::is_auth_mode_Valid() const{
    return m_auth_mode_isValid;
}

OAIEnterprise_settings_enterprise_avatar OAIEnterprise_settings_enterprise::getAvatar() const {
    return m_avatar;
}
void OAIEnterprise_settings_enterprise::setAvatar(const OAIEnterprise_settings_enterprise_avatar &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIEnterprise_settings_enterprise::is_avatar_Valid() const{
    return m_avatar_isValid;
}

OAIEnterprise_settings_enterprise_cas OAIEnterprise_settings_enterprise::getCas() const {
    return m_cas;
}
void OAIEnterprise_settings_enterprise::setCas(const OAIEnterprise_settings_enterprise_cas &cas) {
    m_cas = cas;
    m_cas_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_cas_Set() const{
    return m_cas_isSet;
}

bool OAIEnterprise_settings_enterprise::is_cas_Valid() const{
    return m_cas_isValid;
}

OAIEnterprise_settings_enterprise_collectd OAIEnterprise_settings_enterprise::getCollectd() const {
    return m_collectd;
}
void OAIEnterprise_settings_enterprise::setCollectd(const OAIEnterprise_settings_enterprise_collectd &collectd) {
    m_collectd = collectd;
    m_collectd_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_collectd_Set() const{
    return m_collectd_isSet;
}

bool OAIEnterprise_settings_enterprise::is_collectd_Valid() const{
    return m_collectd_isValid;
}

qint32 OAIEnterprise_settings_enterprise::getConfigurationId() const {
    return m_configuration_id;
}
void OAIEnterprise_settings_enterprise::setConfigurationId(const qint32 &configuration_id) {
    m_configuration_id = configuration_id;
    m_configuration_id_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_configuration_id_Set() const{
    return m_configuration_id_isSet;
}

bool OAIEnterprise_settings_enterprise::is_configuration_id_Valid() const{
    return m_configuration_id_isValid;
}

qint32 OAIEnterprise_settings_enterprise::getConfigurationRunCount() const {
    return m_configuration_run_count;
}
void OAIEnterprise_settings_enterprise::setConfigurationRunCount(const qint32 &configuration_run_count) {
    m_configuration_run_count = configuration_run_count;
    m_configuration_run_count_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_configuration_run_count_Set() const{
    return m_configuration_run_count_isSet;
}

bool OAIEnterprise_settings_enterprise::is_configuration_run_count_Valid() const{
    return m_configuration_run_count_isValid;
}

OAIEnterprise_settings_enterprise_customer OAIEnterprise_settings_enterprise::getCustomer() const {
    return m_customer;
}
void OAIEnterprise_settings_enterprise::setCustomer(const OAIEnterprise_settings_enterprise_customer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIEnterprise_settings_enterprise::is_customer_Valid() const{
    return m_customer_isValid;
}

bool OAIEnterprise_settings_enterprise::isExpireSessions() const {
    return m_expire_sessions;
}
void OAIEnterprise_settings_enterprise::setExpireSessions(const bool &expire_sessions) {
    m_expire_sessions = expire_sessions;
    m_expire_sessions_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_expire_sessions_Set() const{
    return m_expire_sessions_isSet;
}

bool OAIEnterprise_settings_enterprise::is_expire_sessions_Valid() const{
    return m_expire_sessions_isValid;
}

QString OAIEnterprise_settings_enterprise::getGithubHostname() const {
    return m_github_hostname;
}
void OAIEnterprise_settings_enterprise::setGithubHostname(const QString &github_hostname) {
    m_github_hostname = github_hostname;
    m_github_hostname_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_github_hostname_Set() const{
    return m_github_hostname_isSet;
}

bool OAIEnterprise_settings_enterprise::is_github_hostname_Valid() const{
    return m_github_hostname_isValid;
}

OAIEnterprise_settings_enterprise_github_oauth OAIEnterprise_settings_enterprise::getGithubOauth() const {
    return m_github_oauth;
}
void OAIEnterprise_settings_enterprise::setGithubOauth(const OAIEnterprise_settings_enterprise_github_oauth &github_oauth) {
    m_github_oauth = github_oauth;
    m_github_oauth_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_github_oauth_Set() const{
    return m_github_oauth_isSet;
}

bool OAIEnterprise_settings_enterprise::is_github_oauth_Valid() const{
    return m_github_oauth_isValid;
}

OAIEnterprise_settings_enterprise_github_ssl OAIEnterprise_settings_enterprise::getGithubSsl() const {
    return m_github_ssl;
}
void OAIEnterprise_settings_enterprise::setGithubSsl(const OAIEnterprise_settings_enterprise_github_ssl &github_ssl) {
    m_github_ssl = github_ssl;
    m_github_ssl_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_github_ssl_Set() const{
    return m_github_ssl_isSet;
}

bool OAIEnterprise_settings_enterprise::is_github_ssl_Valid() const{
    return m_github_ssl_isValid;
}

QString OAIEnterprise_settings_enterprise::getHttpProxy() const {
    return m_http_proxy;
}
void OAIEnterprise_settings_enterprise::setHttpProxy(const QString &http_proxy) {
    m_http_proxy = http_proxy;
    m_http_proxy_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_http_proxy_Set() const{
    return m_http_proxy_isSet;
}

bool OAIEnterprise_settings_enterprise::is_http_proxy_Valid() const{
    return m_http_proxy_isValid;
}

QString OAIEnterprise_settings_enterprise::getIdenticonsHost() const {
    return m_identicons_host;
}
void OAIEnterprise_settings_enterprise::setIdenticonsHost(const QString &identicons_host) {
    m_identicons_host = identicons_host;
    m_identicons_host_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_identicons_host_Set() const{
    return m_identicons_host_isSet;
}

bool OAIEnterprise_settings_enterprise::is_identicons_host_Valid() const{
    return m_identicons_host_isValid;
}

OAIEnterprise_settings_enterprise_ldap OAIEnterprise_settings_enterprise::getLdap() const {
    return m_ldap;
}
void OAIEnterprise_settings_enterprise::setLdap(const OAIEnterprise_settings_enterprise_ldap &ldap) {
    m_ldap = ldap;
    m_ldap_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_ldap_Set() const{
    return m_ldap_isSet;
}

bool OAIEnterprise_settings_enterprise::is_ldap_Valid() const{
    return m_ldap_isValid;
}

OAIEnterprise_settings_enterprise_license OAIEnterprise_settings_enterprise::getLicense() const {
    return m_license;
}
void OAIEnterprise_settings_enterprise::setLicense(const OAIEnterprise_settings_enterprise_license &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_license_Set() const{
    return m_license_isSet;
}

bool OAIEnterprise_settings_enterprise::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIEnterprise_settings_enterprise::getLoadBalancer() const {
    return m_load_balancer;
}
void OAIEnterprise_settings_enterprise::setLoadBalancer(const QString &load_balancer) {
    m_load_balancer = load_balancer;
    m_load_balancer_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_load_balancer_Set() const{
    return m_load_balancer_isSet;
}

bool OAIEnterprise_settings_enterprise::is_load_balancer_Valid() const{
    return m_load_balancer_isValid;
}

OAIEnterprise_settings_enterprise_mapping OAIEnterprise_settings_enterprise::getMapping() const {
    return m_mapping;
}
void OAIEnterprise_settings_enterprise::setMapping(const OAIEnterprise_settings_enterprise_mapping &mapping) {
    m_mapping = mapping;
    m_mapping_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_mapping_Set() const{
    return m_mapping_isSet;
}

bool OAIEnterprise_settings_enterprise::is_mapping_Valid() const{
    return m_mapping_isValid;
}

OAIEnterprise_settings_enterprise_ntp OAIEnterprise_settings_enterprise::getNtp() const {
    return m_ntp;
}
void OAIEnterprise_settings_enterprise::setNtp(const OAIEnterprise_settings_enterprise_ntp &ntp) {
    m_ntp = ntp;
    m_ntp_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_ntp_Set() const{
    return m_ntp_isSet;
}

bool OAIEnterprise_settings_enterprise::is_ntp_Valid() const{
    return m_ntp_isValid;
}

OAIBranch_protection_required_conversation_resolution OAIEnterprise_settings_enterprise::getPages() const {
    return m_pages;
}
void OAIEnterprise_settings_enterprise::setPages(const OAIBranch_protection_required_conversation_resolution &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIEnterprise_settings_enterprise::is_pages_Valid() const{
    return m_pages_isValid;
}

bool OAIEnterprise_settings_enterprise::isPrivateMode() const {
    return m_private_mode;
}
void OAIEnterprise_settings_enterprise::setPrivateMode(const bool &private_mode) {
    m_private_mode = private_mode;
    m_private_mode_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_private_mode_Set() const{
    return m_private_mode_isSet;
}

bool OAIEnterprise_settings_enterprise::is_private_mode_Valid() const{
    return m_private_mode_isValid;
}

bool OAIEnterprise_settings_enterprise::isPublicPages() const {
    return m_public_pages;
}
void OAIEnterprise_settings_enterprise::setPublicPages(const bool &public_pages) {
    m_public_pages = public_pages;
    m_public_pages_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_public_pages_Set() const{
    return m_public_pages_isSet;
}

bool OAIEnterprise_settings_enterprise::is_public_pages_Valid() const{
    return m_public_pages_isValid;
}

OAIEnterprise_settings_enterprise_saml OAIEnterprise_settings_enterprise::getSaml() const {
    return m_saml;
}
void OAIEnterprise_settings_enterprise::setSaml(const OAIEnterprise_settings_enterprise_saml &saml) {
    m_saml = saml;
    m_saml_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_saml_Set() const{
    return m_saml_isSet;
}

bool OAIEnterprise_settings_enterprise::is_saml_Valid() const{
    return m_saml_isValid;
}

bool OAIEnterprise_settings_enterprise::isSignupEnabled() const {
    return m_signup_enabled;
}
void OAIEnterprise_settings_enterprise::setSignupEnabled(const bool &signup_enabled) {
    m_signup_enabled = signup_enabled;
    m_signup_enabled_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_signup_enabled_Set() const{
    return m_signup_enabled_isSet;
}

bool OAIEnterprise_settings_enterprise::is_signup_enabled_Valid() const{
    return m_signup_enabled_isValid;
}

OAIEnterprise_settings_enterprise_smtp OAIEnterprise_settings_enterprise::getSmtp() const {
    return m_smtp;
}
void OAIEnterprise_settings_enterprise::setSmtp(const OAIEnterprise_settings_enterprise_smtp &smtp) {
    m_smtp = smtp;
    m_smtp_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_smtp_Set() const{
    return m_smtp_isSet;
}

bool OAIEnterprise_settings_enterprise::is_smtp_Valid() const{
    return m_smtp_isValid;
}

OAIEnterprise_settings_enterprise_snmp OAIEnterprise_settings_enterprise::getSnmp() const {
    return m_snmp;
}
void OAIEnterprise_settings_enterprise::setSnmp(const OAIEnterprise_settings_enterprise_snmp &snmp) {
    m_snmp = snmp;
    m_snmp_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_snmp_Set() const{
    return m_snmp_isSet;
}

bool OAIEnterprise_settings_enterprise::is_snmp_Valid() const{
    return m_snmp_isValid;
}

bool OAIEnterprise_settings_enterprise::isSubdomainIsolation() const {
    return m_subdomain_isolation;
}
void OAIEnterprise_settings_enterprise::setSubdomainIsolation(const bool &subdomain_isolation) {
    m_subdomain_isolation = subdomain_isolation;
    m_subdomain_isolation_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_subdomain_isolation_Set() const{
    return m_subdomain_isolation_isSet;
}

bool OAIEnterprise_settings_enterprise::is_subdomain_isolation_Valid() const{
    return m_subdomain_isolation_isValid;
}

OAIEnterprise_settings_enterprise_syslog OAIEnterprise_settings_enterprise::getSyslog() const {
    return m_syslog;
}
void OAIEnterprise_settings_enterprise::setSyslog(const OAIEnterprise_settings_enterprise_syslog &syslog) {
    m_syslog = syslog;
    m_syslog_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_syslog_Set() const{
    return m_syslog_isSet;
}

bool OAIEnterprise_settings_enterprise::is_syslog_Valid() const{
    return m_syslog_isValid;
}

QString OAIEnterprise_settings_enterprise::getTimezone() const {
    return m_timezone;
}
void OAIEnterprise_settings_enterprise::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIEnterprise_settings_enterprise::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIEnterprise_settings_enterprise::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIEnterprise_settings_enterprise::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collectd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_run_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_sessions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_oauth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_ssl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identicons_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ntp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snmp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isolation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syslog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_settings_enterprise::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
