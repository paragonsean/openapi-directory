/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEnterprise_settings_enterprise_license.h
 *
 * 
 */

#ifndef OAIEnterprise_settings_enterprise_license_H
#define OAIEnterprise_settings_enterprise_license_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEnterprise_settings_enterprise_license : public OAIObject {
public:
    OAIEnterprise_settings_enterprise_license();
    OAIEnterprise_settings_enterprise_license(QString json);
    ~OAIEnterprise_settings_enterprise_license() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isClusterSupport() const;
    void setClusterSupport(const bool &cluster_support);
    bool is_cluster_support_Set() const;
    bool is_cluster_support_Valid() const;

    bool isEvaluation() const;
    void setEvaluation(const bool &evaluation);
    bool is_evaluation_Set() const;
    bool is_evaluation_Valid() const;

    QString getExpireAt() const;
    void setExpireAt(const QString &expire_at);
    bool is_expire_at_Set() const;
    bool is_expire_at_Valid() const;

    bool isPerpetual() const;
    void setPerpetual(const bool &perpetual);
    bool is_perpetual_Set() const;
    bool is_perpetual_Valid() const;

    qint32 getSeats() const;
    void setSeats(const qint32 &seats);
    bool is_seats_Set() const;
    bool is_seats_Valid() const;

    bool isSshAllowed() const;
    void setSshAllowed(const bool &ssh_allowed);
    bool is_ssh_allowed_Set() const;
    bool is_ssh_allowed_Valid() const;

    QString getSupportKey() const;
    void setSupportKey(const QString &support_key);
    bool is_support_key_Set() const;
    bool is_support_key_Valid() const;

    bool isUnlimitedSeating() const;
    void setUnlimitedSeating(const bool &unlimited_seating);
    bool is_unlimited_seating_Set() const;
    bool is_unlimited_seating_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_cluster_support;
    bool m_cluster_support_isSet;
    bool m_cluster_support_isValid;

    bool m_evaluation;
    bool m_evaluation_isSet;
    bool m_evaluation_isValid;

    QString m_expire_at;
    bool m_expire_at_isSet;
    bool m_expire_at_isValid;

    bool m_perpetual;
    bool m_perpetual_isSet;
    bool m_perpetual_isValid;

    qint32 m_seats;
    bool m_seats_isSet;
    bool m_seats_isValid;

    bool m_ssh_allowed;
    bool m_ssh_allowed_isSet;
    bool m_ssh_allowed_isValid;

    QString m_support_key;
    bool m_support_key_isSet;
    bool m_support_key_isValid;

    bool m_unlimited_seating;
    bool m_unlimited_seating_isSet;
    bool m_unlimited_seating_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEnterprise_settings_enterprise_license)

#endif // OAIEnterprise_settings_enterprise_license_H
