/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_overview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_overview::OAIApi_overview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_overview::OAIApi_overview() {
    this->initializeModel();
}

OAIApi_overview::~OAIApi_overview() {}

void OAIApi_overview::initializeModel() {

    m_dependabot_isSet = false;
    m_dependabot_isValid = false;

    m_github_services_sha_isSet = false;
    m_github_services_sha_isValid = false;

    m_installed_version_isSet = false;
    m_installed_version_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_verifiable_password_authentication_isSet = false;
    m_verifiable_password_authentication_isValid = false;
}

void OAIApi_overview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_overview::fromJsonObject(QJsonObject json) {

    m_dependabot_isValid = ::OpenAPI::fromJsonValue(m_dependabot, json[QString("dependabot")]);
    m_dependabot_isSet = !json[QString("dependabot")].isNull() && m_dependabot_isValid;

    m_github_services_sha_isValid = ::OpenAPI::fromJsonValue(m_github_services_sha, json[QString("github_services_sha")]);
    m_github_services_sha_isSet = !json[QString("github_services_sha")].isNull() && m_github_services_sha_isValid;

    m_installed_version_isValid = ::OpenAPI::fromJsonValue(m_installed_version, json[QString("installed_version")]);
    m_installed_version_isSet = !json[QString("installed_version")].isNull() && m_installed_version_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_verifiable_password_authentication_isValid = ::OpenAPI::fromJsonValue(m_verifiable_password_authentication, json[QString("verifiable_password_authentication")]);
    m_verifiable_password_authentication_isSet = !json[QString("verifiable_password_authentication")].isNull() && m_verifiable_password_authentication_isValid;
}

QString OAIApi_overview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_overview::asJsonObject() const {
    QJsonObject obj;
    if (m_dependabot.size() > 0) {
        obj.insert(QString("dependabot"), ::OpenAPI::toJsonValue(m_dependabot));
    }
    if (m_github_services_sha_isSet) {
        obj.insert(QString("github_services_sha"), ::OpenAPI::toJsonValue(m_github_services_sha));
    }
    if (m_installed_version_isSet) {
        obj.insert(QString("installed_version"), ::OpenAPI::toJsonValue(m_installed_version));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_verifiable_password_authentication_isSet) {
        obj.insert(QString("verifiable_password_authentication"), ::OpenAPI::toJsonValue(m_verifiable_password_authentication));
    }
    return obj;
}

QList<QString> OAIApi_overview::getDependabot() const {
    return m_dependabot;
}
void OAIApi_overview::setDependabot(const QList<QString> &dependabot) {
    m_dependabot = dependabot;
    m_dependabot_isSet = true;
}

bool OAIApi_overview::is_dependabot_Set() const{
    return m_dependabot_isSet;
}

bool OAIApi_overview::is_dependabot_Valid() const{
    return m_dependabot_isValid;
}

QString OAIApi_overview::getGithubServicesSha() const {
    return m_github_services_sha;
}
void OAIApi_overview::setGithubServicesSha(const QString &github_services_sha) {
    m_github_services_sha = github_services_sha;
    m_github_services_sha_isSet = true;
}

bool OAIApi_overview::is_github_services_sha_Set() const{
    return m_github_services_sha_isSet;
}

bool OAIApi_overview::is_github_services_sha_Valid() const{
    return m_github_services_sha_isValid;
}

QString OAIApi_overview::getInstalledVersion() const {
    return m_installed_version;
}
void OAIApi_overview::setInstalledVersion(const QString &installed_version) {
    m_installed_version = installed_version;
    m_installed_version_isSet = true;
}

bool OAIApi_overview::is_installed_version_Set() const{
    return m_installed_version_isSet;
}

bool OAIApi_overview::is_installed_version_Valid() const{
    return m_installed_version_isValid;
}

QList<QString> OAIApi_overview::getPackages() const {
    return m_packages;
}
void OAIApi_overview::setPackages(const QList<QString> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIApi_overview::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIApi_overview::is_packages_Valid() const{
    return m_packages_isValid;
}

bool OAIApi_overview::isVerifiablePasswordAuthentication() const {
    return m_verifiable_password_authentication;
}
void OAIApi_overview::setVerifiablePasswordAuthentication(const bool &verifiable_password_authentication) {
    m_verifiable_password_authentication = verifiable_password_authentication;
    m_verifiable_password_authentication_isSet = true;
}

bool OAIApi_overview::is_verifiable_password_authentication_Set() const{
    return m_verifiable_password_authentication_isSet;
}

bool OAIApi_overview::is_verifiable_password_authentication_Valid() const{
    return m_verifiable_password_authentication_isValid;
}

bool OAIApi_overview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dependabot.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_services_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verifiable_password_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_overview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_verifiable_password_authentication_isValid && true;
}

} // namespace OpenAPI
