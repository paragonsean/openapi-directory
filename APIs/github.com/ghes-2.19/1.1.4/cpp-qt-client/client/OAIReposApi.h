/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReposApi_H
#define OAI_OAIReposApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity_list_public_events_503_response.h"
#include "OAIActivity_mark_notifications_as_read_202_response.h"
#include "OAIApps_get_installation_415_response.h"
#include "OAIBasic_error.h"
#include "OAIBranch_protection.h"
#include "OAIBranch_restriction_policy.h"
#include "OAIBranch_short.h"
#include "OAIBranch_with_protection.h"
#include "OAICollaborator.h"
#include "OAICombined_commit_status.h"
#include "OAICommit.h"
#include "OAICommit_activity.h"
#include "OAICommit_comment.h"
#include "OAICommit_comparison.h"
#include "OAIContent_file.h"
#include "OAIContent_tree.h"
#include "OAIContributor.h"
#include "OAIContributor_activity.h"
#include "OAIDeploy_key.h"
#include "OAIDeployment.h"
#include "OAIDeployment_status.h"
#include "OAIFile_commit.h"
#include "OAIFull_repository.h"
#include "OAIHook.h"
#include "OAIIntegration.h"
#include "OAIMinimal_repository.h"
#include "OAIObject.h"
#include "OAIOrgs_remove_outside_collaborator_422_response.h"
#include "OAIPage.h"
#include "OAIPage_build.h"
#include "OAIPage_build_status.h"
#include "OAIParticipation_stats.h"
#include "OAIProtected_branch.h"
#include "OAIProtected_branch_admin_enforced.h"
#include "OAIProtected_branch_pull_request_review.h"
#include "OAIPull_request_simple.h"
#include "OAIRelease.h"
#include "OAIRelease_asset.h"
#include "OAIRepos_add_collaborator_request.h"
#include "OAIRepos_create_commit_comment_request.h"
#include "OAIRepos_create_commit_status_request.h"
#include "OAIRepos_create_deploy_key_request.h"
#include "OAIRepos_create_deployment_request.h"
#include "OAIRepos_create_deployment_status_request.h"
#include "OAIRepos_create_for_authenticated_user_request.h"
#include "OAIRepos_create_fork_request.h"
#include "OAIRepos_create_in_org_request.h"
#include "OAIRepos_create_or_update_file_contents_request.h"
#include "OAIRepos_create_pages_site_request.h"
#include "OAIRepos_create_release_request.h"
#include "OAIRepos_create_using_template_request.h"
#include "OAIRepos_create_webhook_request.h"
#include "OAIRepos_delete_file_request.h"
#include "OAIRepos_get_content_200_response.h"
#include "OAIRepos_merge_request.h"
#include "OAIRepos_replace_all_topics_request.h"
#include "OAIRepos_set_app_access_restrictions_request.h"
#include "OAIRepos_set_status_check_contexts_request.h"
#include "OAIRepos_set_team_access_restrictions_request.h"
#include "OAIRepos_set_user_access_restrictions_request.h"
#include "OAIRepos_transfer_request.h"
#include "OAIRepos_update_branch_protection_request.h"
#include "OAIRepos_update_commit_comment_request.h"
#include "OAIRepos_update_information_about_pages_site_request.h"
#include "OAIRepos_update_invitation_request.h"
#include "OAIRepos_update_pull_request_review_protection_request.h"
#include "OAIRepos_update_release_asset_request.h"
#include "OAIRepos_update_release_request.h"
#include "OAIRepos_update_request.h"
#include "OAIRepos_update_status_check_protection_request.h"
#include "OAIRepos_update_webhook_request.h"
#include "OAIRepository.h"
#include "OAIRepository_collaborator_permission.h"
#include "OAIRepository_invitation.h"
#include "OAIScim_error.h"
#include "OAIShort_branch.h"
#include "OAISimple_user.h"
#include "OAIStatus.h"
#include "OAIStatus_check_policy.h"
#include "OAITag.h"
#include "OAITeam.h"
#include "OAITopic.h"
#include "OAIValidation_error.h"
#include "OAIValidation_error_simple.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReposApi : public QObject {
    Q_OBJECT

public:
    OAIReposApi(const int timeOut = 0);
    ~OAIReposApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  invitation_id qint32 [required]
    */
    virtual void repos_acceptInvitation(const qint32 &invitation_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_app_access_restrictions_request OAIRepos_set_app_access_restrictions_request [optional]
    */
    virtual void repos_addAppAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_app_access_restrictions_request> &oai_repos_set_app_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_app_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_repos_add_collaborator_request OAIRepos_add_collaborator_request [optional]
    */
    virtual void repos_addCollaborator(const QString &owner, const QString &repo, const QString &username, const ::OpenAPI::OptionalParam<OAIRepos_add_collaborator_request> &oai_repos_add_collaborator_request = ::OpenAPI::OptionalParam<OAIRepos_add_collaborator_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_status_check_contexts_request OAIRepos_set_status_check_contexts_request [optional]
    */
    virtual void repos_addStatusCheckContexts(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_status_check_contexts_request> &oai_repos_set_status_check_contexts_request = ::OpenAPI::OptionalParam<OAIRepos_set_status_check_contexts_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_team_access_restrictions_request OAIRepos_set_team_access_restrictions_request [optional]
    */
    virtual void repos_addTeamAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_team_access_restrictions_request> &oai_repos_set_team_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_team_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_user_access_restrictions_request OAIRepos_set_user_access_restrictions_request [optional]
    */
    virtual void repos_addUserAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_user_access_restrictions_request> &oai_repos_set_user_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_user_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  username QString [required]
    */
    virtual void repos_checkCollaborator(const QString &owner, const QString &repo, const QString &username);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  basehead QString [required]
    */
    virtual void repos_compareCommits(const QString &owner, const QString &repo, const QString &basehead);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  commit_sha QString [required]
    * @param[in]  oai_repos_create_commit_comment_request OAIRepos_create_commit_comment_request [required]
    */
    virtual void repos_createCommitComment(const QString &owner, const QString &repo, const QString &commit_sha, const OAIRepos_create_commit_comment_request &oai_repos_create_commit_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_createCommitSignatureProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [required]
    * @param[in]  oai_repos_create_commit_status_request OAIRepos_create_commit_status_request [required]
    */
    virtual void repos_createCommitStatus(const QString &owner, const QString &repo, const QString &sha, const OAIRepos_create_commit_status_request &oai_repos_create_commit_status_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_create_deploy_key_request OAIRepos_create_deploy_key_request [required]
    */
    virtual void repos_createDeployKey(const QString &owner, const QString &repo, const OAIRepos_create_deploy_key_request &oai_repos_create_deploy_key_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_create_deployment_request OAIRepos_create_deployment_request [required]
    */
    virtual void repos_createDeployment(const QString &owner, const QString &repo, const OAIRepos_create_deployment_request &oai_repos_create_deployment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  deployment_id qint32 [required]
    * @param[in]  oai_repos_create_deployment_status_request OAIRepos_create_deployment_status_request [required]
    */
    virtual void repos_createDeploymentStatus(const QString &owner, const QString &repo, const qint32 &deployment_id, const OAIRepos_create_deployment_status_request &oai_repos_create_deployment_status_request);

    /**
    * @param[in]  oai_repos_create_for_authenticated_user_request OAIRepos_create_for_authenticated_user_request [required]
    */
    virtual void repos_createForAuthenticatedUser(const OAIRepos_create_for_authenticated_user_request &oai_repos_create_for_authenticated_user_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_create_fork_request OAIRepos_create_fork_request [optional]
    */
    virtual void repos_createFork(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAIRepos_create_fork_request> &oai_repos_create_fork_request = ::OpenAPI::OptionalParam<OAIRepos_create_fork_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_repos_create_in_org_request OAIRepos_create_in_org_request [required]
    */
    virtual void repos_createInOrg(const QString &org, const OAIRepos_create_in_org_request &oai_repos_create_in_org_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  path QString [required]
    * @param[in]  oai_repos_create_or_update_file_contents_request OAIRepos_create_or_update_file_contents_request [required]
    */
    virtual void repos_createOrUpdateFileContents(const QString &owner, const QString &repo, const QString &path, const OAIRepos_create_or_update_file_contents_request &oai_repos_create_or_update_file_contents_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_create_pages_site_request OAIRepos_create_pages_site_request [required]
    */
    virtual void repos_createPagesSite(const QString &owner, const QString &repo, const OAIRepos_create_pages_site_request &oai_repos_create_pages_site_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_create_release_request OAIRepos_create_release_request [required]
    */
    virtual void repos_createRelease(const QString &owner, const QString &repo, const OAIRepos_create_release_request &oai_repos_create_release_request);

    /**
    * @param[in]  template_owner QString [required]
    * @param[in]  template_repo QString [required]
    * @param[in]  oai_repos_create_using_template_request OAIRepos_create_using_template_request [required]
    */
    virtual void repos_createUsingTemplate(const QString &template_owner, const QString &template_repo, const OAIRepos_create_using_template_request &oai_repos_create_using_template_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_create_webhook_request OAIRepos_create_webhook_request [optional]
    */
    virtual void repos_createWebhook(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAIRepos_create_webhook_request> &oai_repos_create_webhook_request = ::OpenAPI::OptionalParam<OAIRepos_create_webhook_request>());

    /**
    * @param[in]  invitation_id qint32 [required]
    */
    virtual void repos_declineInvitation(const qint32 &invitation_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_delete(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_deleteAccessRestrictions(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_deleteAdminBranchProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_deleteBranchProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void repos_deleteCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_deleteCommitSignatureProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void repos_deleteDeployKey(const QString &owner, const QString &repo, const qint32 &key_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  path QString [required]
    * @param[in]  oai_repos_delete_file_request OAIRepos_delete_file_request [required]
    */
    virtual void repos_deleteFile(const QString &owner, const QString &repo, const QString &path, const OAIRepos_delete_file_request &oai_repos_delete_file_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  invitation_id qint32 [required]
    */
    virtual void repos_deleteInvitation(const QString &owner, const QString &repo, const qint32 &invitation_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_deletePagesSite(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_deletePullRequestReviewProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    */
    virtual void repos_deleteRelease(const QString &owner, const QString &repo, const qint32 &release_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  asset_id qint32 [required]
    */
    virtual void repos_deleteReleaseAsset(const QString &owner, const QString &repo, const qint32 &asset_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void repos_deleteWebhook(const QString &owner, const QString &repo, const qint32 &hook_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    */
    virtual void repos_downloadTarballArchive(const QString &owner, const QString &repo, const QString &ref);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    */
    virtual void repos_downloadZipballArchive(const QString &owner, const QString &repo, const QString &ref);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_get(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getAccessRestrictions(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getAdminBranchProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getAllStatusCheckContexts(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void repos_getAllTopics(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getAppsWithAccessToProtectedBranch(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getBranch(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getBranchProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getCodeFrequencyStats(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  username QString [required]
    */
    virtual void repos_getCollaboratorPermissionLevel(const QString &owner, const QString &repo, const QString &username);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_getCombinedStatusForRef(const QString &owner, const QString &repo, const QString &ref, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void repos_getCommit(const QString &owner, const QString &repo, const QString &ref, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getCommitActivityStats(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    */
    virtual void repos_getCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getCommitSignatureProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  path QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repos_getContent(const QString &owner, const QString &repo, const QString &path, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getContributorsStats(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  key_id qint32 [required]
    */
    virtual void repos_getDeployKey(const QString &owner, const QString &repo, const qint32 &key_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  deployment_id qint32 [required]
    */
    virtual void repos_getDeployment(const QString &owner, const QString &repo, const qint32 &deployment_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  deployment_id qint32 [required]
    * @param[in]  status_id qint32 [required]
    */
    virtual void repos_getDeploymentStatus(const QString &owner, const QString &repo, const qint32 &deployment_id, const qint32 &status_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getLatestPagesBuild(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getLatestRelease(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getPages(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  build_id qint32 [required]
    */
    virtual void repos_getPagesBuild(const QString &owner, const QString &repo, const qint32 &build_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getParticipationStats(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getPullRequestReviewProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_getPunchCardStats(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repos_getReadme(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  dir QString [required]
    * @param[in]  ref QString [optional]
    */
    virtual void repos_getReadmeInDirectory(const QString &owner, const QString &repo, const QString &dir, const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    */
    virtual void repos_getRelease(const QString &owner, const QString &repo, const qint32 &release_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  asset_id qint32 [required]
    */
    virtual void repos_getReleaseAsset(const QString &owner, const QString &repo, const qint32 &asset_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void repos_getReleaseByTag(const QString &owner, const QString &repo, const QString &tag);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getStatusChecksProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getTeamsWithAccessToProtectedBranch(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_getUsersWithAccessToProtectedBranch(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void repos_getWebhook(const QString &owner, const QString &repo, const qint32 &hook_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  r_protected bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listBranches(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<bool> &r_protected = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  commit_sha QString [required]
    */
    virtual void repos_listBranchesForHeadCommit(const QString &owner, const QString &repo, const QString &commit_sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  affiliation QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listCollaborators(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &affiliation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  commit_sha QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listCommentsForCommit(const QString &owner, const QString &repo, const QString &commit_sha, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listCommitCommentsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listCommitStatusesForRef(const QString &owner, const QString &repo, const QString &ref, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  until QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listCommits(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &sha = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &until = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  anon QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listContributors(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &anon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listDeployKeys(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  deployment_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listDeploymentStatuses(const QString &owner, const QString &repo, const qint32 &deployment_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sha QString [optional]
    * @param[in]  ref QString [optional]
    * @param[in]  task QString [optional]
    * @param[in]  environment QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listDeployments(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &sha = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &task = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  visibility QString [optional]
    * @param[in]  affiliation QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    */
    virtual void repos_listForAuthenticatedUser(const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &affiliation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listForOrg(const QString &org, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listForUser(const QString &username, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listForks(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listInvitations(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listInvitationsForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_listLanguages(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listPagesBuilds(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  since qint32 [optional]
    * @param[in]  visibility QString [optional]
    */
    virtual void repos_listPublic(const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  commit_sha QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listPullRequestsAssociatedWithCommit(const QString &owner, const QString &repo, const QString &commit_sha, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listReleaseAssets(const QString &owner, const QString &repo, const qint32 &release_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listReleases(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listTags(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listTeams(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void repos_listWebhooks(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_merge_request OAIRepos_merge_request [required]
    */
    virtual void repos_merge(const QString &owner, const QString &repo, const OAIRepos_merge_request &oai_repos_merge_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void repos_pingWebhook(const QString &owner, const QString &repo, const qint32 &hook_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_app_access_restrictions_request OAIRepos_set_app_access_restrictions_request [optional]
    */
    virtual void repos_removeAppAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_app_access_restrictions_request> &oai_repos_set_app_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_app_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  username QString [required]
    */
    virtual void repos_removeCollaborator(const QString &owner, const QString &repo, const QString &username);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_status_check_contexts_request OAIRepos_set_status_check_contexts_request [optional]
    */
    virtual void repos_removeStatusCheckContexts(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_status_check_contexts_request> &oai_repos_set_status_check_contexts_request = ::OpenAPI::OptionalParam<OAIRepos_set_status_check_contexts_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_removeStatusCheckProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_team_access_restrictions_request OAIRepos_set_team_access_restrictions_request [optional]
    */
    virtual void repos_removeTeamAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_team_access_restrictions_request> &oai_repos_set_team_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_team_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_user_access_restrictions_request OAIRepos_set_user_access_restrictions_request [optional]
    */
    virtual void repos_removeUserAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_user_access_restrictions_request> &oai_repos_set_user_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_user_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_replace_all_topics_request OAIRepos_replace_all_topics_request [required]
    */
    virtual void repos_replaceAllTopics(const QString &owner, const QString &repo, const OAIRepos_replace_all_topics_request &oai_repos_replace_all_topics_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void repos_requestPagesBuild(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    */
    virtual void repos_setAdminBranchProtection(const QString &owner, const QString &repo, const QString &branch);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_app_access_restrictions_request OAIRepos_set_app_access_restrictions_request [optional]
    */
    virtual void repos_setAppAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_app_access_restrictions_request> &oai_repos_set_app_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_app_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_status_check_contexts_request OAIRepos_set_status_check_contexts_request [optional]
    */
    virtual void repos_setStatusCheckContexts(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_status_check_contexts_request> &oai_repos_set_status_check_contexts_request = ::OpenAPI::OptionalParam<OAIRepos_set_status_check_contexts_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_team_access_restrictions_request OAIRepos_set_team_access_restrictions_request [optional]
    */
    virtual void repos_setTeamAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_team_access_restrictions_request> &oai_repos_set_team_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_team_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_set_user_access_restrictions_request OAIRepos_set_user_access_restrictions_request [optional]
    */
    virtual void repos_setUserAccessRestrictions(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_set_user_access_restrictions_request> &oai_repos_set_user_access_restrictions_request = ::OpenAPI::OptionalParam<OAIRepos_set_user_access_restrictions_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void repos_testPushWebhook(const QString &owner, const QString &repo, const qint32 &hook_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_transfer_request OAIRepos_transfer_request [required]
    */
    virtual void repos_transfer(const QString &owner, const QString &repo, const OAIRepos_transfer_request &oai_repos_transfer_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_update_request OAIRepos_update_request [optional]
    */
    virtual void repos_update(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAIRepos_update_request> &oai_repos_update_request = ::OpenAPI::OptionalParam<OAIRepos_update_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_update_branch_protection_request OAIRepos_update_branch_protection_request [required]
    */
    virtual void repos_updateBranchProtection(const QString &owner, const QString &repo, const QString &branch, const OAIRepos_update_branch_protection_request &oai_repos_update_branch_protection_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_repos_update_commit_comment_request OAIRepos_update_commit_comment_request [required]
    */
    virtual void repos_updateCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIRepos_update_commit_comment_request &oai_repos_update_commit_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_repos_update_information_about_pages_site_request OAIRepos_update_information_about_pages_site_request [required]
    */
    virtual void repos_updateInformationAboutPagesSite(const QString &owner, const QString &repo, const OAIRepos_update_information_about_pages_site_request &oai_repos_update_information_about_pages_site_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  invitation_id qint32 [required]
    * @param[in]  oai_repos_update_invitation_request OAIRepos_update_invitation_request [optional]
    */
    virtual void repos_updateInvitation(const QString &owner, const QString &repo, const qint32 &invitation_id, const ::OpenAPI::OptionalParam<OAIRepos_update_invitation_request> &oai_repos_update_invitation_request = ::OpenAPI::OptionalParam<OAIRepos_update_invitation_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_update_pull_request_review_protection_request OAIRepos_update_pull_request_review_protection_request [optional]
    */
    virtual void repos_updatePullRequestReviewProtection(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_update_pull_request_review_protection_request> &oai_repos_update_pull_request_review_protection_request = ::OpenAPI::OptionalParam<OAIRepos_update_pull_request_review_protection_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    * @param[in]  oai_repos_update_release_request OAIRepos_update_release_request [optional]
    */
    virtual void repos_updateRelease(const QString &owner, const QString &repo, const qint32 &release_id, const ::OpenAPI::OptionalParam<OAIRepos_update_release_request> &oai_repos_update_release_request = ::OpenAPI::OptionalParam<OAIRepos_update_release_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  asset_id qint32 [required]
    * @param[in]  oai_repos_update_release_asset_request OAIRepos_update_release_asset_request [optional]
    */
    virtual void repos_updateReleaseAsset(const QString &owner, const QString &repo, const qint32 &asset_id, const ::OpenAPI::OptionalParam<OAIRepos_update_release_asset_request> &oai_repos_update_release_asset_request = ::OpenAPI::OptionalParam<OAIRepos_update_release_asset_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  oai_repos_update_status_check_protection_request OAIRepos_update_status_check_protection_request [optional]
    */
    virtual void repos_updateStatusCheckProtection(const QString &owner, const QString &repo, const QString &branch, const ::OpenAPI::OptionalParam<OAIRepos_update_status_check_protection_request> &oai_repos_update_status_check_protection_request = ::OpenAPI::OptionalParam<OAIRepos_update_status_check_protection_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  hook_id qint32 [required]
    * @param[in]  oai_repos_update_webhook_request OAIRepos_update_webhook_request [optional]
    */
    virtual void repos_updateWebhook(const QString &owner, const QString &repo, const qint32 &hook_id, const ::OpenAPI::OptionalParam<OAIRepos_update_webhook_request> &oai_repos_update_webhook_request = ::OpenAPI::OptionalParam<OAIRepos_update_webhook_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    * @param[in]  name QString [required]
    * @param[in]  label QString [optional]
    * @param[in]  body QString [optional]
    */
    virtual void repos_uploadReleaseAsset(const QString &owner, const QString &repo, const qint32 &release_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repos_acceptInvitationCallback(OAIHttpRequestWorker *worker);
    void repos_addAppAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_addCollaboratorCallback(OAIHttpRequestWorker *worker);
    void repos_addStatusCheckContextsCallback(OAIHttpRequestWorker *worker);
    void repos_addTeamAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_addUserAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_checkCollaboratorCallback(OAIHttpRequestWorker *worker);
    void repos_compareCommitsCallback(OAIHttpRequestWorker *worker);
    void repos_createCommitCommentCallback(OAIHttpRequestWorker *worker);
    void repos_createCommitSignatureProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_createCommitStatusCallback(OAIHttpRequestWorker *worker);
    void repos_createDeployKeyCallback(OAIHttpRequestWorker *worker);
    void repos_createDeploymentCallback(OAIHttpRequestWorker *worker);
    void repos_createDeploymentStatusCallback(OAIHttpRequestWorker *worker);
    void repos_createForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void repos_createForkCallback(OAIHttpRequestWorker *worker);
    void repos_createInOrgCallback(OAIHttpRequestWorker *worker);
    void repos_createOrUpdateFileContentsCallback(OAIHttpRequestWorker *worker);
    void repos_createPagesSiteCallback(OAIHttpRequestWorker *worker);
    void repos_createReleaseCallback(OAIHttpRequestWorker *worker);
    void repos_createUsingTemplateCallback(OAIHttpRequestWorker *worker);
    void repos_createWebhookCallback(OAIHttpRequestWorker *worker);
    void repos_declineInvitationCallback(OAIHttpRequestWorker *worker);
    void repos_deleteCallback(OAIHttpRequestWorker *worker);
    void repos_deleteAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_deleteAdminBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_deleteBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_deleteCommitCommentCallback(OAIHttpRequestWorker *worker);
    void repos_deleteCommitSignatureProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_deleteDeployKeyCallback(OAIHttpRequestWorker *worker);
    void repos_deleteFileCallback(OAIHttpRequestWorker *worker);
    void repos_deleteInvitationCallback(OAIHttpRequestWorker *worker);
    void repos_deletePagesSiteCallback(OAIHttpRequestWorker *worker);
    void repos_deletePullRequestReviewProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_deleteReleaseCallback(OAIHttpRequestWorker *worker);
    void repos_deleteReleaseAssetCallback(OAIHttpRequestWorker *worker);
    void repos_deleteWebhookCallback(OAIHttpRequestWorker *worker);
    void repos_downloadTarballArchiveCallback(OAIHttpRequestWorker *worker);
    void repos_downloadZipballArchiveCallback(OAIHttpRequestWorker *worker);
    void repos_getCallback(OAIHttpRequestWorker *worker);
    void repos_getAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_getAdminBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_getAllStatusCheckContextsCallback(OAIHttpRequestWorker *worker);
    void repos_getAllTopicsCallback(OAIHttpRequestWorker *worker);
    void repos_getAppsWithAccessToProtectedBranchCallback(OAIHttpRequestWorker *worker);
    void repos_getBranchCallback(OAIHttpRequestWorker *worker);
    void repos_getBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_getCodeFrequencyStatsCallback(OAIHttpRequestWorker *worker);
    void repos_getCollaboratorPermissionLevelCallback(OAIHttpRequestWorker *worker);
    void repos_getCombinedStatusForRefCallback(OAIHttpRequestWorker *worker);
    void repos_getCommitCallback(OAIHttpRequestWorker *worker);
    void repos_getCommitActivityStatsCallback(OAIHttpRequestWorker *worker);
    void repos_getCommitCommentCallback(OAIHttpRequestWorker *worker);
    void repos_getCommitSignatureProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_getContentCallback(OAIHttpRequestWorker *worker);
    void repos_getContributorsStatsCallback(OAIHttpRequestWorker *worker);
    void repos_getDeployKeyCallback(OAIHttpRequestWorker *worker);
    void repos_getDeploymentCallback(OAIHttpRequestWorker *worker);
    void repos_getDeploymentStatusCallback(OAIHttpRequestWorker *worker);
    void repos_getLatestPagesBuildCallback(OAIHttpRequestWorker *worker);
    void repos_getLatestReleaseCallback(OAIHttpRequestWorker *worker);
    void repos_getPagesCallback(OAIHttpRequestWorker *worker);
    void repos_getPagesBuildCallback(OAIHttpRequestWorker *worker);
    void repos_getParticipationStatsCallback(OAIHttpRequestWorker *worker);
    void repos_getPullRequestReviewProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_getPunchCardStatsCallback(OAIHttpRequestWorker *worker);
    void repos_getReadmeCallback(OAIHttpRequestWorker *worker);
    void repos_getReadmeInDirectoryCallback(OAIHttpRequestWorker *worker);
    void repos_getReleaseCallback(OAIHttpRequestWorker *worker);
    void repos_getReleaseAssetCallback(OAIHttpRequestWorker *worker);
    void repos_getReleaseByTagCallback(OAIHttpRequestWorker *worker);
    void repos_getStatusChecksProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_getTeamsWithAccessToProtectedBranchCallback(OAIHttpRequestWorker *worker);
    void repos_getUsersWithAccessToProtectedBranchCallback(OAIHttpRequestWorker *worker);
    void repos_getWebhookCallback(OAIHttpRequestWorker *worker);
    void repos_listBranchesCallback(OAIHttpRequestWorker *worker);
    void repos_listBranchesForHeadCommitCallback(OAIHttpRequestWorker *worker);
    void repos_listCollaboratorsCallback(OAIHttpRequestWorker *worker);
    void repos_listCommentsForCommitCallback(OAIHttpRequestWorker *worker);
    void repos_listCommitCommentsForRepoCallback(OAIHttpRequestWorker *worker);
    void repos_listCommitStatusesForRefCallback(OAIHttpRequestWorker *worker);
    void repos_listCommitsCallback(OAIHttpRequestWorker *worker);
    void repos_listContributorsCallback(OAIHttpRequestWorker *worker);
    void repos_listDeployKeysCallback(OAIHttpRequestWorker *worker);
    void repos_listDeploymentStatusesCallback(OAIHttpRequestWorker *worker);
    void repos_listDeploymentsCallback(OAIHttpRequestWorker *worker);
    void repos_listForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void repos_listForOrgCallback(OAIHttpRequestWorker *worker);
    void repos_listForUserCallback(OAIHttpRequestWorker *worker);
    void repos_listForksCallback(OAIHttpRequestWorker *worker);
    void repos_listInvitationsCallback(OAIHttpRequestWorker *worker);
    void repos_listInvitationsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void repos_listLanguagesCallback(OAIHttpRequestWorker *worker);
    void repos_listPagesBuildsCallback(OAIHttpRequestWorker *worker);
    void repos_listPublicCallback(OAIHttpRequestWorker *worker);
    void repos_listPullRequestsAssociatedWithCommitCallback(OAIHttpRequestWorker *worker);
    void repos_listReleaseAssetsCallback(OAIHttpRequestWorker *worker);
    void repos_listReleasesCallback(OAIHttpRequestWorker *worker);
    void repos_listTagsCallback(OAIHttpRequestWorker *worker);
    void repos_listTeamsCallback(OAIHttpRequestWorker *worker);
    void repos_listWebhooksCallback(OAIHttpRequestWorker *worker);
    void repos_mergeCallback(OAIHttpRequestWorker *worker);
    void repos_pingWebhookCallback(OAIHttpRequestWorker *worker);
    void repos_removeAppAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_removeCollaboratorCallback(OAIHttpRequestWorker *worker);
    void repos_removeStatusCheckContextsCallback(OAIHttpRequestWorker *worker);
    void repos_removeStatusCheckProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_removeTeamAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_removeUserAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_replaceAllTopicsCallback(OAIHttpRequestWorker *worker);
    void repos_requestPagesBuildCallback(OAIHttpRequestWorker *worker);
    void repos_setAdminBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_setAppAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_setStatusCheckContextsCallback(OAIHttpRequestWorker *worker);
    void repos_setTeamAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_setUserAccessRestrictionsCallback(OAIHttpRequestWorker *worker);
    void repos_testPushWebhookCallback(OAIHttpRequestWorker *worker);
    void repos_transferCallback(OAIHttpRequestWorker *worker);
    void repos_updateCallback(OAIHttpRequestWorker *worker);
    void repos_updateBranchProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_updateCommitCommentCallback(OAIHttpRequestWorker *worker);
    void repos_updateInformationAboutPagesSiteCallback(OAIHttpRequestWorker *worker);
    void repos_updateInvitationCallback(OAIHttpRequestWorker *worker);
    void repos_updatePullRequestReviewProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_updateReleaseCallback(OAIHttpRequestWorker *worker);
    void repos_updateReleaseAssetCallback(OAIHttpRequestWorker *worker);
    void repos_updateStatusCheckProtectionCallback(OAIHttpRequestWorker *worker);
    void repos_updateWebhookCallback(OAIHttpRequestWorker *worker);
    void repos_uploadReleaseAssetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repos_acceptInvitationSignal();
    void repos_addAppAccessRestrictionsSignal(QList<OAIIntegration> summary);
    void repos_addCollaboratorSignal(OAIRepository_invitation summary);
    void repos_addStatusCheckContextsSignal(QList<QString> summary);
    void repos_addTeamAccessRestrictionsSignal(QList<OAITeam> summary);
    void repos_addUserAccessRestrictionsSignal(QList<OAISimple_user> summary);
    void repos_checkCollaboratorSignal();
    void repos_compareCommitsSignal(OAICommit_comparison summary);
    void repos_createCommitCommentSignal(OAICommit_comment summary);
    void repos_createCommitSignatureProtectionSignal(OAIProtected_branch_admin_enforced summary);
    void repos_createCommitStatusSignal(OAIStatus summary);
    void repos_createDeployKeySignal(OAIDeploy_key summary);
    void repos_createDeploymentSignal(OAIDeployment summary);
    void repos_createDeploymentStatusSignal(OAIDeployment_status summary);
    void repos_createForAuthenticatedUserSignal(OAIRepository summary);
    void repos_createForkSignal(OAIFull_repository summary);
    void repos_createInOrgSignal(OAIRepository summary);
    void repos_createOrUpdateFileContentsSignal(OAIFile_commit summary);
    void repos_createPagesSiteSignal(OAIPage summary);
    void repos_createReleaseSignal(OAIRelease summary);
    void repos_createUsingTemplateSignal(OAIRepository summary);
    void repos_createWebhookSignal(OAIHook summary);
    void repos_declineInvitationSignal();
    void repos_deleteSignal();
    void repos_deleteAccessRestrictionsSignal();
    void repos_deleteAdminBranchProtectionSignal();
    void repos_deleteBranchProtectionSignal();
    void repos_deleteCommitCommentSignal();
    void repos_deleteCommitSignatureProtectionSignal();
    void repos_deleteDeployKeySignal();
    void repos_deleteFileSignal(OAIFile_commit summary);
    void repos_deleteInvitationSignal();
    void repos_deletePagesSiteSignal();
    void repos_deletePullRequestReviewProtectionSignal();
    void repos_deleteReleaseSignal();
    void repos_deleteReleaseAssetSignal();
    void repos_deleteWebhookSignal();
    void repos_downloadTarballArchiveSignal();
    void repos_downloadZipballArchiveSignal();
    void repos_getSignal(OAIFull_repository summary);
    void repos_getAccessRestrictionsSignal(OAIBranch_restriction_policy summary);
    void repos_getAdminBranchProtectionSignal(OAIProtected_branch_admin_enforced summary);
    void repos_getAllStatusCheckContextsSignal(QList<QString> summary);
    void repos_getAllTopicsSignal(OAITopic summary);
    void repos_getAppsWithAccessToProtectedBranchSignal(QList<OAIIntegration> summary);
    void repos_getBranchSignal(OAIBranch_with_protection summary);
    void repos_getBranchProtectionSignal(OAIBranch_protection summary);
    void repos_getCodeFrequencyStatsSignal(QList<QList> summary);
    void repos_getCollaboratorPermissionLevelSignal(OAIRepository_collaborator_permission summary);
    void repos_getCombinedStatusForRefSignal(OAICombined_commit_status summary);
    void repos_getCommitSignal(OAICommit summary);
    void repos_getCommitActivityStatsSignal(QList<OAICommit_activity> summary);
    void repos_getCommitCommentSignal(OAICommit_comment summary);
    void repos_getCommitSignatureProtectionSignal(OAIProtected_branch_admin_enforced summary);
    void repos_getContentSignal(OAIRepos_get_content_200_response summary);
    void repos_getContributorsStatsSignal(QList<OAIContributor_activity> summary);
    void repos_getDeployKeySignal(OAIDeploy_key summary);
    void repos_getDeploymentSignal(OAIDeployment summary);
    void repos_getDeploymentStatusSignal(OAIDeployment_status summary);
    void repos_getLatestPagesBuildSignal(OAIPage_build summary);
    void repos_getLatestReleaseSignal(OAIRelease summary);
    void repos_getPagesSignal(OAIPage summary);
    void repos_getPagesBuildSignal(OAIPage_build summary);
    void repos_getParticipationStatsSignal(OAIParticipation_stats summary);
    void repos_getPullRequestReviewProtectionSignal(OAIProtected_branch_pull_request_review summary);
    void repos_getPunchCardStatsSignal(QList<QList> summary);
    void repos_getReadmeSignal(OAIContent_file summary);
    void repos_getReadmeInDirectorySignal(OAIContent_file summary);
    void repos_getReleaseSignal(OAIRelease summary);
    void repos_getReleaseAssetSignal(OAIRelease_asset summary);
    void repos_getReleaseByTagSignal(OAIRelease summary);
    void repos_getStatusChecksProtectionSignal(OAIStatus_check_policy summary);
    void repos_getTeamsWithAccessToProtectedBranchSignal(QList<OAITeam> summary);
    void repos_getUsersWithAccessToProtectedBranchSignal(QList<OAISimple_user> summary);
    void repos_getWebhookSignal(OAIHook summary);
    void repos_listBranchesSignal(QList<OAIShort_branch> summary);
    void repos_listBranchesForHeadCommitSignal(QList<OAIBranch_short> summary);
    void repos_listCollaboratorsSignal(QList<OAICollaborator> summary);
    void repos_listCommentsForCommitSignal(QList<OAICommit_comment> summary);
    void repos_listCommitCommentsForRepoSignal(QList<OAICommit_comment> summary);
    void repos_listCommitStatusesForRefSignal(QList<OAIStatus> summary);
    void repos_listCommitsSignal(QList<OAICommit> summary);
    void repos_listContributorsSignal(QList<OAIContributor> summary);
    void repos_listDeployKeysSignal(QList<OAIDeploy_key> summary);
    void repos_listDeploymentStatusesSignal(QList<OAIDeployment_status> summary);
    void repos_listDeploymentsSignal(QList<OAIDeployment> summary);
    void repos_listForAuthenticatedUserSignal(QList<OAIRepository> summary);
    void repos_listForOrgSignal(QList<OAIMinimal_repository> summary);
    void repos_listForUserSignal(QList<OAIMinimal_repository> summary);
    void repos_listForksSignal(QList<OAIMinimal_repository> summary);
    void repos_listInvitationsSignal(QList<OAIRepository_invitation> summary);
    void repos_listInvitationsForAuthenticatedUserSignal(QList<OAIRepository_invitation> summary);
    void repos_listLanguagesSignal(QMap<QString, qint32> summary);
    void repos_listPagesBuildsSignal(QList<OAIPage_build> summary);
    void repos_listPublicSignal(QList<OAIMinimal_repository> summary);
    void repos_listPullRequestsAssociatedWithCommitSignal(QList<OAIPull_request_simple> summary);
    void repos_listReleaseAssetsSignal(QList<OAIRelease_asset> summary);
    void repos_listReleasesSignal(QList<OAIRelease> summary);
    void repos_listTagsSignal(QList<OAITag> summary);
    void repos_listTeamsSignal(QList<OAITeam> summary);
    void repos_listWebhooksSignal(QList<OAIHook> summary);
    void repos_mergeSignal(OAICommit summary);
    void repos_pingWebhookSignal();
    void repos_removeAppAccessRestrictionsSignal(QList<OAIIntegration> summary);
    void repos_removeCollaboratorSignal();
    void repos_removeStatusCheckContextsSignal(QList<QString> summary);
    void repos_removeStatusCheckProtectionSignal();
    void repos_removeTeamAccessRestrictionsSignal(QList<OAITeam> summary);
    void repos_removeUserAccessRestrictionsSignal(QList<OAISimple_user> summary);
    void repos_replaceAllTopicsSignal(OAITopic summary);
    void repos_requestPagesBuildSignal(OAIPage_build_status summary);
    void repos_setAdminBranchProtectionSignal(OAIProtected_branch_admin_enforced summary);
    void repos_setAppAccessRestrictionsSignal(QList<OAIIntegration> summary);
    void repos_setStatusCheckContextsSignal(QList<QString> summary);
    void repos_setTeamAccessRestrictionsSignal(QList<OAITeam> summary);
    void repos_setUserAccessRestrictionsSignal(QList<OAISimple_user> summary);
    void repos_testPushWebhookSignal();
    void repos_transferSignal(OAIMinimal_repository summary);
    void repos_updateSignal(OAIFull_repository summary);
    void repos_updateBranchProtectionSignal(OAIProtected_branch summary);
    void repos_updateCommitCommentSignal(OAICommit_comment summary);
    void repos_updateInformationAboutPagesSiteSignal();
    void repos_updateInvitationSignal(OAIRepository_invitation summary);
    void repos_updatePullRequestReviewProtectionSignal(OAIProtected_branch_pull_request_review summary);
    void repos_updateReleaseSignal(OAIRelease summary);
    void repos_updateReleaseAssetSignal(OAIRelease_asset summary);
    void repos_updateStatusCheckProtectionSignal(OAIStatus_check_policy summary);
    void repos_updateWebhookSignal(OAIHook summary);
    void repos_uploadReleaseAssetSignal(OAIRelease_asset summary);


    void repos_acceptInvitationSignalFull(OAIHttpRequestWorker *worker);
    void repos_addAppAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntegration> summary);
    void repos_addCollaboratorSignalFull(OAIHttpRequestWorker *worker, OAIRepository_invitation summary);
    void repos_addStatusCheckContextsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void repos_addTeamAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void repos_addUserAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void repos_checkCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void repos_compareCommitsSignalFull(OAIHttpRequestWorker *worker, OAICommit_comparison summary);
    void repos_createCommitCommentSignalFull(OAIHttpRequestWorker *worker, OAICommit_comment summary);
    void repos_createCommitSignatureProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtected_branch_admin_enforced summary);
    void repos_createCommitStatusSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void repos_createDeployKeySignalFull(OAIHttpRequestWorker *worker, OAIDeploy_key summary);
    void repos_createDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void repos_createDeploymentStatusSignalFull(OAIHttpRequestWorker *worker, OAIDeployment_status summary);
    void repos_createForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repos_createForkSignalFull(OAIHttpRequestWorker *worker, OAIFull_repository summary);
    void repos_createInOrgSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repos_createOrUpdateFileContentsSignalFull(OAIHttpRequestWorker *worker, OAIFile_commit summary);
    void repos_createPagesSiteSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void repos_createReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repos_createUsingTemplateSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repos_createWebhookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void repos_declineInvitationSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteAdminBranchProtectionSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteBranchProtectionSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteCommitCommentSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteCommitSignatureProtectionSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteDeployKeySignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteFileSignalFull(OAIHttpRequestWorker *worker, OAIFile_commit summary);
    void repos_deleteInvitationSignalFull(OAIHttpRequestWorker *worker);
    void repos_deletePagesSiteSignalFull(OAIHttpRequestWorker *worker);
    void repos_deletePullRequestReviewProtectionSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteReleaseSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteReleaseAssetSignalFull(OAIHttpRequestWorker *worker);
    void repos_deleteWebhookSignalFull(OAIHttpRequestWorker *worker);
    void repos_downloadTarballArchiveSignalFull(OAIHttpRequestWorker *worker);
    void repos_downloadZipballArchiveSignalFull(OAIHttpRequestWorker *worker);
    void repos_getSignalFull(OAIHttpRequestWorker *worker, OAIFull_repository summary);
    void repos_getAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, OAIBranch_restriction_policy summary);
    void repos_getAdminBranchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtected_branch_admin_enforced summary);
    void repos_getAllStatusCheckContextsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void repos_getAllTopicsSignalFull(OAIHttpRequestWorker *worker, OAITopic summary);
    void repos_getAppsWithAccessToProtectedBranchSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntegration> summary);
    void repos_getBranchSignalFull(OAIHttpRequestWorker *worker, OAIBranch_with_protection summary);
    void repos_getBranchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIBranch_protection summary);
    void repos_getCodeFrequencyStatsSignalFull(OAIHttpRequestWorker *worker, QList<QList> summary);
    void repos_getCollaboratorPermissionLevelSignalFull(OAIHttpRequestWorker *worker, OAIRepository_collaborator_permission summary);
    void repos_getCombinedStatusForRefSignalFull(OAIHttpRequestWorker *worker, OAICombined_commit_status summary);
    void repos_getCommitSignalFull(OAIHttpRequestWorker *worker, OAICommit summary);
    void repos_getCommitActivityStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAICommit_activity> summary);
    void repos_getCommitCommentSignalFull(OAIHttpRequestWorker *worker, OAICommit_comment summary);
    void repos_getCommitSignatureProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtected_branch_admin_enforced summary);
    void repos_getContentSignalFull(OAIHttpRequestWorker *worker, OAIRepos_get_content_200_response summary);
    void repos_getContributorsStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor_activity> summary);
    void repos_getDeployKeySignalFull(OAIHttpRequestWorker *worker, OAIDeploy_key summary);
    void repos_getDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void repos_getDeploymentStatusSignalFull(OAIHttpRequestWorker *worker, OAIDeployment_status summary);
    void repos_getLatestPagesBuildSignalFull(OAIHttpRequestWorker *worker, OAIPage_build summary);
    void repos_getLatestReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repos_getPagesSignalFull(OAIHttpRequestWorker *worker, OAIPage summary);
    void repos_getPagesBuildSignalFull(OAIHttpRequestWorker *worker, OAIPage_build summary);
    void repos_getParticipationStatsSignalFull(OAIHttpRequestWorker *worker, OAIParticipation_stats summary);
    void repos_getPullRequestReviewProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtected_branch_pull_request_review summary);
    void repos_getPunchCardStatsSignalFull(OAIHttpRequestWorker *worker, QList<QList> summary);
    void repos_getReadmeSignalFull(OAIHttpRequestWorker *worker, OAIContent_file summary);
    void repos_getReadmeInDirectorySignalFull(OAIHttpRequestWorker *worker, OAIContent_file summary);
    void repos_getReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repos_getReleaseAssetSignalFull(OAIHttpRequestWorker *worker, OAIRelease_asset summary);
    void repos_getReleaseByTagSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repos_getStatusChecksProtectionSignalFull(OAIHttpRequestWorker *worker, OAIStatus_check_policy summary);
    void repos_getTeamsWithAccessToProtectedBranchSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void repos_getUsersWithAccessToProtectedBranchSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void repos_getWebhookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void repos_listBranchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIShort_branch> summary);
    void repos_listBranchesForHeadCommitSignalFull(OAIHttpRequestWorker *worker, QList<OAIBranch_short> summary);
    void repos_listCollaboratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAICollaborator> summary);
    void repos_listCommentsForCommitSignalFull(OAIHttpRequestWorker *worker, QList<OAICommit_comment> summary);
    void repos_listCommitCommentsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAICommit_comment> summary);
    void repos_listCommitStatusesForRefSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void repos_listCommitsSignalFull(OAIHttpRequestWorker *worker, QList<OAICommit> summary);
    void repos_listContributorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIContributor> summary);
    void repos_listDeployKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeploy_key> summary);
    void repos_listDeploymentStatusesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment_status> summary);
    void repos_listDeploymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);
    void repos_listForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void repos_listForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void repos_listForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void repos_listForksSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void repos_listInvitationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository_invitation> summary);
    void repos_listInvitationsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository_invitation> summary);
    void repos_listLanguagesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void repos_listPagesBuildsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPage_build> summary);
    void repos_listPublicSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void repos_listPullRequestsAssociatedWithCommitSignalFull(OAIHttpRequestWorker *worker, QList<OAIPull_request_simple> summary);
    void repos_listReleaseAssetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRelease_asset> summary);
    void repos_listReleasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRelease> summary);
    void repos_listTagsSignalFull(OAIHttpRequestWorker *worker, QList<OAITag> summary);
    void repos_listTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void repos_listWebhooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook> summary);
    void repos_mergeSignalFull(OAIHttpRequestWorker *worker, OAICommit summary);
    void repos_pingWebhookSignalFull(OAIHttpRequestWorker *worker);
    void repos_removeAppAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntegration> summary);
    void repos_removeCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void repos_removeStatusCheckContextsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void repos_removeStatusCheckProtectionSignalFull(OAIHttpRequestWorker *worker);
    void repos_removeTeamAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void repos_removeUserAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void repos_replaceAllTopicsSignalFull(OAIHttpRequestWorker *worker, OAITopic summary);
    void repos_requestPagesBuildSignalFull(OAIHttpRequestWorker *worker, OAIPage_build_status summary);
    void repos_setAdminBranchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtected_branch_admin_enforced summary);
    void repos_setAppAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIIntegration> summary);
    void repos_setStatusCheckContextsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void repos_setTeamAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void repos_setUserAccessRestrictionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void repos_testPushWebhookSignalFull(OAIHttpRequestWorker *worker);
    void repos_transferSignalFull(OAIHttpRequestWorker *worker, OAIMinimal_repository summary);
    void repos_updateSignalFull(OAIHttpRequestWorker *worker, OAIFull_repository summary);
    void repos_updateBranchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtected_branch summary);
    void repos_updateCommitCommentSignalFull(OAIHttpRequestWorker *worker, OAICommit_comment summary);
    void repos_updateInformationAboutPagesSiteSignalFull(OAIHttpRequestWorker *worker);
    void repos_updateInvitationSignalFull(OAIHttpRequestWorker *worker, OAIRepository_invitation summary);
    void repos_updatePullRequestReviewProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtected_branch_pull_request_review summary);
    void repos_updateReleaseSignalFull(OAIHttpRequestWorker *worker, OAIRelease summary);
    void repos_updateReleaseAssetSignalFull(OAIHttpRequestWorker *worker, OAIRelease_asset summary);
    void repos_updateStatusCheckProtectionSignalFull(OAIHttpRequestWorker *worker, OAIStatus_check_policy summary);
    void repos_updateWebhookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void repos_uploadReleaseAssetSignalFull(OAIHttpRequestWorker *worker, OAIRelease_asset summary);

    Q_DECL_DEPRECATED_X("Use repos_acceptInvitationSignalError() instead")
    void repos_acceptInvitationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_acceptInvitationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addAppAccessRestrictionsSignalError() instead")
    void repos_addAppAccessRestrictionsSignalE(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addAppAccessRestrictionsSignalError(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addCollaboratorSignalError() instead")
    void repos_addCollaboratorSignalE(OAIRepository_invitation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addCollaboratorSignalError(OAIRepository_invitation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addStatusCheckContextsSignalError() instead")
    void repos_addStatusCheckContextsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addStatusCheckContextsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addTeamAccessRestrictionsSignalError() instead")
    void repos_addTeamAccessRestrictionsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addTeamAccessRestrictionsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addUserAccessRestrictionsSignalError() instead")
    void repos_addUserAccessRestrictionsSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addUserAccessRestrictionsSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_checkCollaboratorSignalError() instead")
    void repos_checkCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_checkCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_compareCommitsSignalError() instead")
    void repos_compareCommitsSignalE(OAICommit_comparison summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_compareCommitsSignalError(OAICommit_comparison summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createCommitCommentSignalError() instead")
    void repos_createCommitCommentSignalE(OAICommit_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createCommitCommentSignalError(OAICommit_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createCommitSignatureProtectionSignalError() instead")
    void repos_createCommitSignatureProtectionSignalE(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createCommitSignatureProtectionSignalError(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createCommitStatusSignalError() instead")
    void repos_createCommitStatusSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createCommitStatusSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createDeployKeySignalError() instead")
    void repos_createDeployKeySignalE(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createDeployKeySignalError(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createDeploymentSignalError() instead")
    void repos_createDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createDeploymentStatusSignalError() instead")
    void repos_createDeploymentStatusSignalE(OAIDeployment_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createDeploymentStatusSignalError(OAIDeployment_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createForAuthenticatedUserSignalError() instead")
    void repos_createForAuthenticatedUserSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createForAuthenticatedUserSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createForkSignalError() instead")
    void repos_createForkSignalE(OAIFull_repository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createForkSignalError(OAIFull_repository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createInOrgSignalError() instead")
    void repos_createInOrgSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createInOrgSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createOrUpdateFileContentsSignalError() instead")
    void repos_createOrUpdateFileContentsSignalE(OAIFile_commit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createOrUpdateFileContentsSignalError(OAIFile_commit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createPagesSiteSignalError() instead")
    void repos_createPagesSiteSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createPagesSiteSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createReleaseSignalError() instead")
    void repos_createReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createUsingTemplateSignalError() instead")
    void repos_createUsingTemplateSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createUsingTemplateSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createWebhookSignalError() instead")
    void repos_createWebhookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createWebhookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_declineInvitationSignalError() instead")
    void repos_declineInvitationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_declineInvitationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteSignalError() instead")
    void repos_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteAccessRestrictionsSignalError() instead")
    void repos_deleteAccessRestrictionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteAccessRestrictionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteAdminBranchProtectionSignalError() instead")
    void repos_deleteAdminBranchProtectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteAdminBranchProtectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteBranchProtectionSignalError() instead")
    void repos_deleteBranchProtectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteBranchProtectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteCommitCommentSignalError() instead")
    void repos_deleteCommitCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteCommitCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteCommitSignatureProtectionSignalError() instead")
    void repos_deleteCommitSignatureProtectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteCommitSignatureProtectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteDeployKeySignalError() instead")
    void repos_deleteDeployKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteDeployKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteFileSignalError() instead")
    void repos_deleteFileSignalE(OAIFile_commit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteFileSignalError(OAIFile_commit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteInvitationSignalError() instead")
    void repos_deleteInvitationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteInvitationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deletePagesSiteSignalError() instead")
    void repos_deletePagesSiteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deletePagesSiteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deletePullRequestReviewProtectionSignalError() instead")
    void repos_deletePullRequestReviewProtectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deletePullRequestReviewProtectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteReleaseSignalError() instead")
    void repos_deleteReleaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteReleaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteReleaseAssetSignalError() instead")
    void repos_deleteReleaseAssetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteReleaseAssetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteWebhookSignalError() instead")
    void repos_deleteWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_downloadTarballArchiveSignalError() instead")
    void repos_downloadTarballArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_downloadTarballArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_downloadZipballArchiveSignalError() instead")
    void repos_downloadZipballArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_downloadZipballArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getSignalError() instead")
    void repos_getSignalE(OAIFull_repository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getSignalError(OAIFull_repository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAccessRestrictionsSignalError() instead")
    void repos_getAccessRestrictionsSignalE(OAIBranch_restriction_policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAccessRestrictionsSignalError(OAIBranch_restriction_policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAdminBranchProtectionSignalError() instead")
    void repos_getAdminBranchProtectionSignalE(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAdminBranchProtectionSignalError(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAllStatusCheckContextsSignalError() instead")
    void repos_getAllStatusCheckContextsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAllStatusCheckContextsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAllTopicsSignalError() instead")
    void repos_getAllTopicsSignalE(OAITopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAllTopicsSignalError(OAITopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAppsWithAccessToProtectedBranchSignalError() instead")
    void repos_getAppsWithAccessToProtectedBranchSignalE(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAppsWithAccessToProtectedBranchSignalError(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getBranchSignalError() instead")
    void repos_getBranchSignalE(OAIBranch_with_protection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getBranchSignalError(OAIBranch_with_protection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getBranchProtectionSignalError() instead")
    void repos_getBranchProtectionSignalE(OAIBranch_protection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getBranchProtectionSignalError(OAIBranch_protection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCodeFrequencyStatsSignalError() instead")
    void repos_getCodeFrequencyStatsSignalE(QList<QList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCodeFrequencyStatsSignalError(QList<QList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCollaboratorPermissionLevelSignalError() instead")
    void repos_getCollaboratorPermissionLevelSignalE(OAIRepository_collaborator_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCollaboratorPermissionLevelSignalError(OAIRepository_collaborator_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCombinedStatusForRefSignalError() instead")
    void repos_getCombinedStatusForRefSignalE(OAICombined_commit_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCombinedStatusForRefSignalError(OAICombined_commit_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitSignalError() instead")
    void repos_getCommitSignalE(OAICommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitSignalError(OAICommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitActivityStatsSignalError() instead")
    void repos_getCommitActivityStatsSignalE(QList<OAICommit_activity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitActivityStatsSignalError(QList<OAICommit_activity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitCommentSignalError() instead")
    void repos_getCommitCommentSignalE(OAICommit_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitCommentSignalError(OAICommit_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitSignatureProtectionSignalError() instead")
    void repos_getCommitSignatureProtectionSignalE(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitSignatureProtectionSignalError(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getContentSignalError() instead")
    void repos_getContentSignalE(OAIRepos_get_content_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getContentSignalError(OAIRepos_get_content_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getContributorsStatsSignalError() instead")
    void repos_getContributorsStatsSignalE(QList<OAIContributor_activity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getContributorsStatsSignalError(QList<OAIContributor_activity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getDeployKeySignalError() instead")
    void repos_getDeployKeySignalE(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getDeployKeySignalError(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getDeploymentSignalError() instead")
    void repos_getDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getDeploymentStatusSignalError() instead")
    void repos_getDeploymentStatusSignalE(OAIDeployment_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getDeploymentStatusSignalError(OAIDeployment_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getLatestPagesBuildSignalError() instead")
    void repos_getLatestPagesBuildSignalE(OAIPage_build summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getLatestPagesBuildSignalError(OAIPage_build summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getLatestReleaseSignalError() instead")
    void repos_getLatestReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getLatestReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPagesSignalError() instead")
    void repos_getPagesSignalE(OAIPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPagesSignalError(OAIPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPagesBuildSignalError() instead")
    void repos_getPagesBuildSignalE(OAIPage_build summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPagesBuildSignalError(OAIPage_build summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getParticipationStatsSignalError() instead")
    void repos_getParticipationStatsSignalE(OAIParticipation_stats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getParticipationStatsSignalError(OAIParticipation_stats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPullRequestReviewProtectionSignalError() instead")
    void repos_getPullRequestReviewProtectionSignalE(OAIProtected_branch_pull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPullRequestReviewProtectionSignalError(OAIProtected_branch_pull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPunchCardStatsSignalError() instead")
    void repos_getPunchCardStatsSignalE(QList<QList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPunchCardStatsSignalError(QList<QList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReadmeSignalError() instead")
    void repos_getReadmeSignalE(OAIContent_file summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReadmeSignalError(OAIContent_file summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReadmeInDirectorySignalError() instead")
    void repos_getReadmeInDirectorySignalE(OAIContent_file summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReadmeInDirectorySignalError(OAIContent_file summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReleaseSignalError() instead")
    void repos_getReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReleaseAssetSignalError() instead")
    void repos_getReleaseAssetSignalE(OAIRelease_asset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReleaseAssetSignalError(OAIRelease_asset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReleaseByTagSignalError() instead")
    void repos_getReleaseByTagSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReleaseByTagSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getStatusChecksProtectionSignalError() instead")
    void repos_getStatusChecksProtectionSignalE(OAIStatus_check_policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getStatusChecksProtectionSignalError(OAIStatus_check_policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getTeamsWithAccessToProtectedBranchSignalError() instead")
    void repos_getTeamsWithAccessToProtectedBranchSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getTeamsWithAccessToProtectedBranchSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getUsersWithAccessToProtectedBranchSignalError() instead")
    void repos_getUsersWithAccessToProtectedBranchSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getUsersWithAccessToProtectedBranchSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getWebhookSignalError() instead")
    void repos_getWebhookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getWebhookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listBranchesSignalError() instead")
    void repos_listBranchesSignalE(QList<OAIShort_branch> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listBranchesSignalError(QList<OAIShort_branch> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listBranchesForHeadCommitSignalError() instead")
    void repos_listBranchesForHeadCommitSignalE(QList<OAIBranch_short> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listBranchesForHeadCommitSignalError(QList<OAIBranch_short> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCollaboratorsSignalError() instead")
    void repos_listCollaboratorsSignalE(QList<OAICollaborator> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCollaboratorsSignalError(QList<OAICollaborator> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommentsForCommitSignalError() instead")
    void repos_listCommentsForCommitSignalE(QList<OAICommit_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommentsForCommitSignalError(QList<OAICommit_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommitCommentsForRepoSignalError() instead")
    void repos_listCommitCommentsForRepoSignalE(QList<OAICommit_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommitCommentsForRepoSignalError(QList<OAICommit_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommitStatusesForRefSignalError() instead")
    void repos_listCommitStatusesForRefSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommitStatusesForRefSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommitsSignalError() instead")
    void repos_listCommitsSignalE(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommitsSignalError(QList<OAICommit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listContributorsSignalError() instead")
    void repos_listContributorsSignalE(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listContributorsSignalError(QList<OAIContributor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listDeployKeysSignalError() instead")
    void repos_listDeployKeysSignalE(QList<OAIDeploy_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listDeployKeysSignalError(QList<OAIDeploy_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listDeploymentStatusesSignalError() instead")
    void repos_listDeploymentStatusesSignalE(QList<OAIDeployment_status> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listDeploymentStatusesSignalError(QList<OAIDeployment_status> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listDeploymentsSignalError() instead")
    void repos_listDeploymentsSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listDeploymentsSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForAuthenticatedUserSignalError() instead")
    void repos_listForAuthenticatedUserSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForAuthenticatedUserSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForOrgSignalError() instead")
    void repos_listForOrgSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForOrgSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForUserSignalError() instead")
    void repos_listForUserSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForUserSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForksSignalError() instead")
    void repos_listForksSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForksSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listInvitationsSignalError() instead")
    void repos_listInvitationsSignalE(QList<OAIRepository_invitation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listInvitationsSignalError(QList<OAIRepository_invitation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listInvitationsForAuthenticatedUserSignalError() instead")
    void repos_listInvitationsForAuthenticatedUserSignalE(QList<OAIRepository_invitation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listInvitationsForAuthenticatedUserSignalError(QList<OAIRepository_invitation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listLanguagesSignalError() instead")
    void repos_listLanguagesSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listLanguagesSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listPagesBuildsSignalError() instead")
    void repos_listPagesBuildsSignalE(QList<OAIPage_build> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listPagesBuildsSignalError(QList<OAIPage_build> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listPublicSignalError() instead")
    void repos_listPublicSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listPublicSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listPullRequestsAssociatedWithCommitSignalError() instead")
    void repos_listPullRequestsAssociatedWithCommitSignalE(QList<OAIPull_request_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listPullRequestsAssociatedWithCommitSignalError(QList<OAIPull_request_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listReleaseAssetsSignalError() instead")
    void repos_listReleaseAssetsSignalE(QList<OAIRelease_asset> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listReleaseAssetsSignalError(QList<OAIRelease_asset> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listReleasesSignalError() instead")
    void repos_listReleasesSignalE(QList<OAIRelease> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listReleasesSignalError(QList<OAIRelease> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listTagsSignalError() instead")
    void repos_listTagsSignalE(QList<OAITag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listTagsSignalError(QList<OAITag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listTeamsSignalError() instead")
    void repos_listTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listWebhooksSignalError() instead")
    void repos_listWebhooksSignalE(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listWebhooksSignalError(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_mergeSignalError() instead")
    void repos_mergeSignalE(OAICommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_mergeSignalError(OAICommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_pingWebhookSignalError() instead")
    void repos_pingWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_pingWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeAppAccessRestrictionsSignalError() instead")
    void repos_removeAppAccessRestrictionsSignalE(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeAppAccessRestrictionsSignalError(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeCollaboratorSignalError() instead")
    void repos_removeCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeStatusCheckContextsSignalError() instead")
    void repos_removeStatusCheckContextsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeStatusCheckContextsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeStatusCheckProtectionSignalError() instead")
    void repos_removeStatusCheckProtectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeStatusCheckProtectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeTeamAccessRestrictionsSignalError() instead")
    void repos_removeTeamAccessRestrictionsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeTeamAccessRestrictionsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeUserAccessRestrictionsSignalError() instead")
    void repos_removeUserAccessRestrictionsSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeUserAccessRestrictionsSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_replaceAllTopicsSignalError() instead")
    void repos_replaceAllTopicsSignalE(OAITopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_replaceAllTopicsSignalError(OAITopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_requestPagesBuildSignalError() instead")
    void repos_requestPagesBuildSignalE(OAIPage_build_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_requestPagesBuildSignalError(OAIPage_build_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setAdminBranchProtectionSignalError() instead")
    void repos_setAdminBranchProtectionSignalE(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setAdminBranchProtectionSignalError(OAIProtected_branch_admin_enforced summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setAppAccessRestrictionsSignalError() instead")
    void repos_setAppAccessRestrictionsSignalE(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setAppAccessRestrictionsSignalError(QList<OAIIntegration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setStatusCheckContextsSignalError() instead")
    void repos_setStatusCheckContextsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setStatusCheckContextsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setTeamAccessRestrictionsSignalError() instead")
    void repos_setTeamAccessRestrictionsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setTeamAccessRestrictionsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setUserAccessRestrictionsSignalError() instead")
    void repos_setUserAccessRestrictionsSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setUserAccessRestrictionsSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_testPushWebhookSignalError() instead")
    void repos_testPushWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_testPushWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_transferSignalError() instead")
    void repos_transferSignalE(OAIMinimal_repository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_transferSignalError(OAIMinimal_repository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateSignalError() instead")
    void repos_updateSignalE(OAIFull_repository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateSignalError(OAIFull_repository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateBranchProtectionSignalError() instead")
    void repos_updateBranchProtectionSignalE(OAIProtected_branch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateBranchProtectionSignalError(OAIProtected_branch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateCommitCommentSignalError() instead")
    void repos_updateCommitCommentSignalE(OAICommit_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateCommitCommentSignalError(OAICommit_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateInformationAboutPagesSiteSignalError() instead")
    void repos_updateInformationAboutPagesSiteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateInformationAboutPagesSiteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateInvitationSignalError() instead")
    void repos_updateInvitationSignalE(OAIRepository_invitation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateInvitationSignalError(OAIRepository_invitation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updatePullRequestReviewProtectionSignalError() instead")
    void repos_updatePullRequestReviewProtectionSignalE(OAIProtected_branch_pull_request_review summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updatePullRequestReviewProtectionSignalError(OAIProtected_branch_pull_request_review summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateReleaseSignalError() instead")
    void repos_updateReleaseSignalE(OAIRelease summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateReleaseSignalError(OAIRelease summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateReleaseAssetSignalError() instead")
    void repos_updateReleaseAssetSignalE(OAIRelease_asset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateReleaseAssetSignalError(OAIRelease_asset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateStatusCheckProtectionSignalError() instead")
    void repos_updateStatusCheckProtectionSignalE(OAIStatus_check_policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateStatusCheckProtectionSignalError(OAIStatus_check_policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateWebhookSignalError() instead")
    void repos_updateWebhookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateWebhookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_uploadReleaseAssetSignalError() instead")
    void repos_uploadReleaseAssetSignalE(OAIRelease_asset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_uploadReleaseAssetSignalError(OAIRelease_asset summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repos_acceptInvitationSignalErrorFull() instead")
    void repos_acceptInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_acceptInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addAppAccessRestrictionsSignalErrorFull() instead")
    void repos_addAppAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addAppAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addCollaboratorSignalErrorFull() instead")
    void repos_addCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addStatusCheckContextsSignalErrorFull() instead")
    void repos_addStatusCheckContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addStatusCheckContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addTeamAccessRestrictionsSignalErrorFull() instead")
    void repos_addTeamAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addTeamAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_addUserAccessRestrictionsSignalErrorFull() instead")
    void repos_addUserAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_addUserAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_checkCollaboratorSignalErrorFull() instead")
    void repos_checkCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_checkCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_compareCommitsSignalErrorFull() instead")
    void repos_compareCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_compareCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createCommitCommentSignalErrorFull() instead")
    void repos_createCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createCommitSignatureProtectionSignalErrorFull() instead")
    void repos_createCommitSignatureProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createCommitSignatureProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createCommitStatusSignalErrorFull() instead")
    void repos_createCommitStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createCommitStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createDeployKeySignalErrorFull() instead")
    void repos_createDeployKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createDeployKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createDeploymentSignalErrorFull() instead")
    void repos_createDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createDeploymentStatusSignalErrorFull() instead")
    void repos_createDeploymentStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createDeploymentStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createForAuthenticatedUserSignalErrorFull() instead")
    void repos_createForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createForkSignalErrorFull() instead")
    void repos_createForkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createForkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createInOrgSignalErrorFull() instead")
    void repos_createInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createOrUpdateFileContentsSignalErrorFull() instead")
    void repos_createOrUpdateFileContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createOrUpdateFileContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createPagesSiteSignalErrorFull() instead")
    void repos_createPagesSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createPagesSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createReleaseSignalErrorFull() instead")
    void repos_createReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createUsingTemplateSignalErrorFull() instead")
    void repos_createUsingTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createUsingTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_createWebhookSignalErrorFull() instead")
    void repos_createWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_createWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_declineInvitationSignalErrorFull() instead")
    void repos_declineInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_declineInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteSignalErrorFull() instead")
    void repos_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteAccessRestrictionsSignalErrorFull() instead")
    void repos_deleteAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteAdminBranchProtectionSignalErrorFull() instead")
    void repos_deleteAdminBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteAdminBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteBranchProtectionSignalErrorFull() instead")
    void repos_deleteBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteCommitCommentSignalErrorFull() instead")
    void repos_deleteCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteCommitSignatureProtectionSignalErrorFull() instead")
    void repos_deleteCommitSignatureProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteCommitSignatureProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteDeployKeySignalErrorFull() instead")
    void repos_deleteDeployKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteDeployKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteFileSignalErrorFull() instead")
    void repos_deleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteInvitationSignalErrorFull() instead")
    void repos_deleteInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deletePagesSiteSignalErrorFull() instead")
    void repos_deletePagesSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deletePagesSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deletePullRequestReviewProtectionSignalErrorFull() instead")
    void repos_deletePullRequestReviewProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deletePullRequestReviewProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteReleaseSignalErrorFull() instead")
    void repos_deleteReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteReleaseAssetSignalErrorFull() instead")
    void repos_deleteReleaseAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteReleaseAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_deleteWebhookSignalErrorFull() instead")
    void repos_deleteWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_deleteWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_downloadTarballArchiveSignalErrorFull() instead")
    void repos_downloadTarballArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_downloadTarballArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_downloadZipballArchiveSignalErrorFull() instead")
    void repos_downloadZipballArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_downloadZipballArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getSignalErrorFull() instead")
    void repos_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAccessRestrictionsSignalErrorFull() instead")
    void repos_getAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAdminBranchProtectionSignalErrorFull() instead")
    void repos_getAdminBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAdminBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAllStatusCheckContextsSignalErrorFull() instead")
    void repos_getAllStatusCheckContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAllStatusCheckContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAllTopicsSignalErrorFull() instead")
    void repos_getAllTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAllTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getAppsWithAccessToProtectedBranchSignalErrorFull() instead")
    void repos_getAppsWithAccessToProtectedBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getAppsWithAccessToProtectedBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getBranchSignalErrorFull() instead")
    void repos_getBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getBranchProtectionSignalErrorFull() instead")
    void repos_getBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCodeFrequencyStatsSignalErrorFull() instead")
    void repos_getCodeFrequencyStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCodeFrequencyStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCollaboratorPermissionLevelSignalErrorFull() instead")
    void repos_getCollaboratorPermissionLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCollaboratorPermissionLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCombinedStatusForRefSignalErrorFull() instead")
    void repos_getCombinedStatusForRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCombinedStatusForRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitSignalErrorFull() instead")
    void repos_getCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitActivityStatsSignalErrorFull() instead")
    void repos_getCommitActivityStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitActivityStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitCommentSignalErrorFull() instead")
    void repos_getCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getCommitSignatureProtectionSignalErrorFull() instead")
    void repos_getCommitSignatureProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getCommitSignatureProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getContentSignalErrorFull() instead")
    void repos_getContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getContributorsStatsSignalErrorFull() instead")
    void repos_getContributorsStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getContributorsStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getDeployKeySignalErrorFull() instead")
    void repos_getDeployKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getDeployKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getDeploymentSignalErrorFull() instead")
    void repos_getDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getDeploymentStatusSignalErrorFull() instead")
    void repos_getDeploymentStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getDeploymentStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getLatestPagesBuildSignalErrorFull() instead")
    void repos_getLatestPagesBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getLatestPagesBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getLatestReleaseSignalErrorFull() instead")
    void repos_getLatestReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getLatestReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPagesSignalErrorFull() instead")
    void repos_getPagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPagesBuildSignalErrorFull() instead")
    void repos_getPagesBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPagesBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getParticipationStatsSignalErrorFull() instead")
    void repos_getParticipationStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getParticipationStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPullRequestReviewProtectionSignalErrorFull() instead")
    void repos_getPullRequestReviewProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPullRequestReviewProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getPunchCardStatsSignalErrorFull() instead")
    void repos_getPunchCardStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getPunchCardStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReadmeSignalErrorFull() instead")
    void repos_getReadmeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReadmeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReadmeInDirectorySignalErrorFull() instead")
    void repos_getReadmeInDirectorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReadmeInDirectorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReleaseSignalErrorFull() instead")
    void repos_getReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReleaseAssetSignalErrorFull() instead")
    void repos_getReleaseAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReleaseAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getReleaseByTagSignalErrorFull() instead")
    void repos_getReleaseByTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getReleaseByTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getStatusChecksProtectionSignalErrorFull() instead")
    void repos_getStatusChecksProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getStatusChecksProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getTeamsWithAccessToProtectedBranchSignalErrorFull() instead")
    void repos_getTeamsWithAccessToProtectedBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getTeamsWithAccessToProtectedBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getUsersWithAccessToProtectedBranchSignalErrorFull() instead")
    void repos_getUsersWithAccessToProtectedBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getUsersWithAccessToProtectedBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_getWebhookSignalErrorFull() instead")
    void repos_getWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_getWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listBranchesSignalErrorFull() instead")
    void repos_listBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listBranchesForHeadCommitSignalErrorFull() instead")
    void repos_listBranchesForHeadCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listBranchesForHeadCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCollaboratorsSignalErrorFull() instead")
    void repos_listCollaboratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCollaboratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommentsForCommitSignalErrorFull() instead")
    void repos_listCommentsForCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommentsForCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommitCommentsForRepoSignalErrorFull() instead")
    void repos_listCommitCommentsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommitCommentsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommitStatusesForRefSignalErrorFull() instead")
    void repos_listCommitStatusesForRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommitStatusesForRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listCommitsSignalErrorFull() instead")
    void repos_listCommitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listCommitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listContributorsSignalErrorFull() instead")
    void repos_listContributorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listContributorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listDeployKeysSignalErrorFull() instead")
    void repos_listDeployKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listDeployKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listDeploymentStatusesSignalErrorFull() instead")
    void repos_listDeploymentStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listDeploymentStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listDeploymentsSignalErrorFull() instead")
    void repos_listDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForAuthenticatedUserSignalErrorFull() instead")
    void repos_listForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForOrgSignalErrorFull() instead")
    void repos_listForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForUserSignalErrorFull() instead")
    void repos_listForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listForksSignalErrorFull() instead")
    void repos_listForksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listForksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listInvitationsSignalErrorFull() instead")
    void repos_listInvitationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listInvitationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listInvitationsForAuthenticatedUserSignalErrorFull() instead")
    void repos_listInvitationsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listInvitationsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listLanguagesSignalErrorFull() instead")
    void repos_listLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listPagesBuildsSignalErrorFull() instead")
    void repos_listPagesBuildsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listPagesBuildsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listPublicSignalErrorFull() instead")
    void repos_listPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listPullRequestsAssociatedWithCommitSignalErrorFull() instead")
    void repos_listPullRequestsAssociatedWithCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listPullRequestsAssociatedWithCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listReleaseAssetsSignalErrorFull() instead")
    void repos_listReleaseAssetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listReleaseAssetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listReleasesSignalErrorFull() instead")
    void repos_listReleasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listReleasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listTagsSignalErrorFull() instead")
    void repos_listTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listTeamsSignalErrorFull() instead")
    void repos_listTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_listWebhooksSignalErrorFull() instead")
    void repos_listWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_listWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_mergeSignalErrorFull() instead")
    void repos_mergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_mergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_pingWebhookSignalErrorFull() instead")
    void repos_pingWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_pingWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeAppAccessRestrictionsSignalErrorFull() instead")
    void repos_removeAppAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeAppAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeCollaboratorSignalErrorFull() instead")
    void repos_removeCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeStatusCheckContextsSignalErrorFull() instead")
    void repos_removeStatusCheckContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeStatusCheckContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeStatusCheckProtectionSignalErrorFull() instead")
    void repos_removeStatusCheckProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeStatusCheckProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeTeamAccessRestrictionsSignalErrorFull() instead")
    void repos_removeTeamAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeTeamAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_removeUserAccessRestrictionsSignalErrorFull() instead")
    void repos_removeUserAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_removeUserAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_replaceAllTopicsSignalErrorFull() instead")
    void repos_replaceAllTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_replaceAllTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_requestPagesBuildSignalErrorFull() instead")
    void repos_requestPagesBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_requestPagesBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setAdminBranchProtectionSignalErrorFull() instead")
    void repos_setAdminBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setAdminBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setAppAccessRestrictionsSignalErrorFull() instead")
    void repos_setAppAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setAppAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setStatusCheckContextsSignalErrorFull() instead")
    void repos_setStatusCheckContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setStatusCheckContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setTeamAccessRestrictionsSignalErrorFull() instead")
    void repos_setTeamAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setTeamAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_setUserAccessRestrictionsSignalErrorFull() instead")
    void repos_setUserAccessRestrictionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_setUserAccessRestrictionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_testPushWebhookSignalErrorFull() instead")
    void repos_testPushWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_testPushWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_transferSignalErrorFull() instead")
    void repos_transferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_transferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateSignalErrorFull() instead")
    void repos_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateBranchProtectionSignalErrorFull() instead")
    void repos_updateBranchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateBranchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateCommitCommentSignalErrorFull() instead")
    void repos_updateCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateInformationAboutPagesSiteSignalErrorFull() instead")
    void repos_updateInformationAboutPagesSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateInformationAboutPagesSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateInvitationSignalErrorFull() instead")
    void repos_updateInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updatePullRequestReviewProtectionSignalErrorFull() instead")
    void repos_updatePullRequestReviewProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updatePullRequestReviewProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateReleaseSignalErrorFull() instead")
    void repos_updateReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateReleaseAssetSignalErrorFull() instead")
    void repos_updateReleaseAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateReleaseAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateStatusCheckProtectionSignalErrorFull() instead")
    void repos_updateStatusCheckProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateStatusCheckProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_updateWebhookSignalErrorFull() instead")
    void repos_updateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_updateWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repos_uploadReleaseAssetSignalErrorFull() instead")
    void repos_uploadReleaseAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repos_uploadReleaseAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
