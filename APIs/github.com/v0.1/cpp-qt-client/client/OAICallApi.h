/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICallApi_H
#define OAI_OAICallApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkCallResponse.h"
#include "OAICallResponse.h"
#include "OAICancelScheduledHangupResponse.h"
#include "OAICancelScheduledPlayResponse.h"
#include "OAIGroupCallResponse.h"
#include "OAIHangupAllCallsResponse.h"
#include "OAIHangupCallResponse.h"
#include "OAIPlayResponse.h"
#include "OAIPlayStopResponse.h"
#include "OAIRecordStartResponse.h"
#include "OAIRecordStopResponse.h"
#include "OAIScheduleHangupResponse.h"
#include "OAISchedulePlayResponse.h"
#include "OAISendDigitsResponse.h"
#include "OAISoundTouchResponse.h"
#include "OAISoundTouchStopResponse.h"
#include "OAITransferCallResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICallApi : public QObject {
    Q_OBJECT

public:
    OAICallApi(const int timeOut = 0);
    ~OAICallApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  answer_url QString [required]
    * @param[in]  delimiter QString [required]
    * @param[in]  from QString [required]
    * @param[in]  gateways QString [required]
    * @param[in]  to QString [required]
    * @param[in]  caller_name QString [optional]
    * @param[in]  confirm_key QString [optional]
    * @param[in]  confirm_sound QString [optional]
    * @param[in]  core_uuid QString [optional]
    * @param[in]  extra_dial_string QString [optional]
    * @param[in]  gateway_codecs QString [optional]
    * @param[in]  gateway_retries QString [optional]
    * @param[in]  gateway_timeouts QString [optional]
    * @param[in]  hangup_on_ring qint32 [optional]
    * @param[in]  hangup_url QString [optional]
    * @param[in]  reject_causes QString [optional]
    * @param[in]  ring_url QString [optional]
    * @param[in]  send_digits QString [optional]
    * @param[in]  send_on_preanswer bool [optional]
    * @param[in]  time_limit qint32 [optional]
    */
    virtual void v01BulkCallPost(const QString &answer_url, const QString &delimiter, const QString &from, const QString &gateways, const QString &to, const ::OpenAPI::OptionalParam<QString> &caller_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &confirm_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &confirm_sound = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &core_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra_dial_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_codecs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_retries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_timeouts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &hangup_on_ring = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hangup_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reject_causes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ring_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &send_digits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_on_preanswer = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &time_limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  answer_url QString [required]
    * @param[in]  from QString [required]
    * @param[in]  gateways QString [required]
    * @param[in]  to QString [required]
    * @param[in]  async_amd bool [optional]
    * @param[in]  async_amd_status_callback QString [optional]
    * @param[in]  async_amd_status_callback_method QString [optional]
    * @param[in]  caller_name QString [optional]
    * @param[in]  core_uuid QString [optional]
    * @param[in]  extra_dial_string QString [optional]
    * @param[in]  gateway_codecs QString [optional]
    * @param[in]  gateway_retries QString [optional]
    * @param[in]  gateway_timeouts QString [optional]
    * @param[in]  hangup_on_ring qint32 [optional]
    * @param[in]  hangup_url QString [optional]
    * @param[in]  machine_detection QString [optional]
    * @param[in]  machine_detection_silence_timeout qint32 [optional]
    * @param[in]  machine_detection_speech_end_threshold qint32 [optional]
    * @param[in]  machine_detection_speech_threshold qint32 [optional]
    * @param[in]  machine_detection_timeout qint32 [optional]
    * @param[in]  ring_url QString [optional]
    * @param[in]  send_digits QString [optional]
    * @param[in]  send_on_preanswer bool [optional]
    * @param[in]  time_limit qint32 [optional]
    */
    virtual void v01CallPost(const QString &answer_url, const QString &from, const QString &gateways, const QString &to, const ::OpenAPI::OptionalParam<bool> &async_amd = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &async_amd_status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &async_amd_status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &caller_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &core_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra_dial_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_codecs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_retries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_timeouts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &hangup_on_ring = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hangup_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &machine_detection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_silence_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_end_threshold = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_speech_threshold = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &machine_detection_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ring_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &send_digits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_on_preanswer = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &time_limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  sched_hangup_id QString [required]
    */
    virtual void v01CancelScheduledHangupPost(const QString &sched_hangup_id);

    /**
    * @param[in]  sched_play_id QString [required]
    */
    virtual void v01CancelScheduledPlayPost(const QString &sched_play_id);

    /**
    * @param[in]  answer_url QString [required]
    * @param[in]  delimiter QString [required]
    * @param[in]  from QString [required]
    * @param[in]  gateways QString [required]
    * @param[in]  to QString [required]
    * @param[in]  caller_name QString [optional]
    * @param[in]  confirm_key QString [optional]
    * @param[in]  confirm_sound QString [optional]
    * @param[in]  core_uuid QString [optional]
    * @param[in]  extra_dial_string QString [optional]
    * @param[in]  gateway_codecs QString [optional]
    * @param[in]  gateway_retries QString [optional]
    * @param[in]  gateway_timeouts QString [optional]
    * @param[in]  hangup_on_ring qint32 [optional]
    * @param[in]  hangup_url QString [optional]
    * @param[in]  reject_causes QString [optional]
    * @param[in]  ring_url QString [optional]
    * @param[in]  send_digits QString [optional]
    * @param[in]  send_on_preanswer bool [optional]
    * @param[in]  time_limit qint32 [optional]
    */
    virtual void v01GroupCallPost(const QString &answer_url, const QString &delimiter, const QString &from, const QString &gateways, const QString &to, const ::OpenAPI::OptionalParam<QString> &caller_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &confirm_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &confirm_sound = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &core_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extra_dial_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_codecs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_retries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gateway_timeouts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &hangup_on_ring = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hangup_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reject_causes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ring_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &send_digits = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_on_preanswer = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &time_limit = ::OpenAPI::OptionalParam<qint32>());


    virtual void v01HangupAllCallsPost();

    /**
    * @param[in]  call_uuid QString [optional]
    * @param[in]  request_uuid QString [optional]
    */
    virtual void v01HangupCallPost(const ::OpenAPI::OptionalParam<QString> &call_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_uuid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  call_uuid QString [required]
    * @param[in]  sounds QString [required]
    * @param[in]  legs QString [optional]
    * @param[in]  length qint32 [optional]
    * @param[in]  loop bool [optional]
    * @param[in]  mix bool [optional]
    */
    virtual void v01PlayPost(const QString &call_uuid, const QString &sounds, const ::OpenAPI::OptionalParam<QString> &legs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &loop = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &mix = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  call_uuid QString [required]
    */
    virtual void v01PlayStopPost(const QString &call_uuid);

    /**
    * @param[in]  call_uuid QString [optional]
    * @param[in]  file_format QString [optional]
    * @param[in]  file_name QString [optional]
    * @param[in]  file_path QString [optional]
    * @param[in]  time_limit qint32 [optional]
    */
    virtual void v01RecordStartPost(const ::OpenAPI::OptionalParam<QString> &call_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &time_limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  call_uuid QString [required]
    * @param[in]  record_file QString [required]
    */
    virtual void v01RecordStopPost(const QString &call_uuid, const QString &record_file);

    /**
    * @param[in]  call_uuid QString [required]
    * @param[in]  time qint32 [required]
    */
    virtual void v01ScheduleHangupPost(const QString &call_uuid, const qint32 &time);

    /**
    * @param[in]  call_uuid QString [required]
    * @param[in]  sounds QString [required]
    * @param[in]  time qint32 [required]
    * @param[in]  legs QString [optional]
    * @param[in]  length qint32 [optional]
    * @param[in]  loop bool [optional]
    * @param[in]  mix bool [optional]
    */
    virtual void v01SchedulePlayPost(const QString &call_uuid, const QString &sounds, const qint32 &time, const ::OpenAPI::OptionalParam<QString> &legs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &loop = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &mix = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  call_uuid QString [required]
    * @param[in]  digits QString [required]
    * @param[in]  leg QString [optional]
    */
    virtual void v01SendDigitsPost(const QString &call_uuid, const QString &digits, const ::OpenAPI::OptionalParam<QString> &leg = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  call_uuid QString [required]
    * @param[in]  audio_direction QString [optional]
    * @param[in]  pitch float [optional]
    * @param[in]  pitch_octaves float [optional]
    * @param[in]  pitch_semi_tones float [optional]
    * @param[in]  rate float [optional]
    * @param[in]  tempo float [optional]
    */
    virtual void v01SoundTouchPost(const QString &call_uuid, const ::OpenAPI::OptionalParam<QString> &audio_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &pitch = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &pitch_octaves = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &pitch_semi_tones = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &rate = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &tempo = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  call_uuid QString [required]
    */
    virtual void v01SoundTouchStopPost(const QString &call_uuid);

    /**
    * @param[in]  call_uuid QString [required]
    * @param[in]  url QString [required]
    */
    virtual void v01TransferCallPost(const QString &call_uuid, const QString &url);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v01BulkCallPostCallback(OAIHttpRequestWorker *worker);
    void v01CallPostCallback(OAIHttpRequestWorker *worker);
    void v01CancelScheduledHangupPostCallback(OAIHttpRequestWorker *worker);
    void v01CancelScheduledPlayPostCallback(OAIHttpRequestWorker *worker);
    void v01GroupCallPostCallback(OAIHttpRequestWorker *worker);
    void v01HangupAllCallsPostCallback(OAIHttpRequestWorker *worker);
    void v01HangupCallPostCallback(OAIHttpRequestWorker *worker);
    void v01PlayPostCallback(OAIHttpRequestWorker *worker);
    void v01PlayStopPostCallback(OAIHttpRequestWorker *worker);
    void v01RecordStartPostCallback(OAIHttpRequestWorker *worker);
    void v01RecordStopPostCallback(OAIHttpRequestWorker *worker);
    void v01ScheduleHangupPostCallback(OAIHttpRequestWorker *worker);
    void v01SchedulePlayPostCallback(OAIHttpRequestWorker *worker);
    void v01SendDigitsPostCallback(OAIHttpRequestWorker *worker);
    void v01SoundTouchPostCallback(OAIHttpRequestWorker *worker);
    void v01SoundTouchStopPostCallback(OAIHttpRequestWorker *worker);
    void v01TransferCallPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v01BulkCallPostSignal(OAIBulkCallResponse summary);
    void v01CallPostSignal(OAICallResponse summary);
    void v01CancelScheduledHangupPostSignal(OAICancelScheduledHangupResponse summary);
    void v01CancelScheduledPlayPostSignal(OAICancelScheduledPlayResponse summary);
    void v01GroupCallPostSignal(OAIGroupCallResponse summary);
    void v01HangupAllCallsPostSignal(OAIHangupAllCallsResponse summary);
    void v01HangupCallPostSignal(OAIHangupCallResponse summary);
    void v01PlayPostSignal(OAIPlayResponse summary);
    void v01PlayStopPostSignal(OAIPlayStopResponse summary);
    void v01RecordStartPostSignal(OAIRecordStartResponse summary);
    void v01RecordStopPostSignal(OAIRecordStopResponse summary);
    void v01ScheduleHangupPostSignal(OAIScheduleHangupResponse summary);
    void v01SchedulePlayPostSignal(OAISchedulePlayResponse summary);
    void v01SendDigitsPostSignal(OAISendDigitsResponse summary);
    void v01SoundTouchPostSignal(OAISoundTouchResponse summary);
    void v01SoundTouchStopPostSignal(OAISoundTouchStopResponse summary);
    void v01TransferCallPostSignal(OAITransferCallResponse summary);


    void v01BulkCallPostSignalFull(OAIHttpRequestWorker *worker, OAIBulkCallResponse summary);
    void v01CallPostSignalFull(OAIHttpRequestWorker *worker, OAICallResponse summary);
    void v01CancelScheduledHangupPostSignalFull(OAIHttpRequestWorker *worker, OAICancelScheduledHangupResponse summary);
    void v01CancelScheduledPlayPostSignalFull(OAIHttpRequestWorker *worker, OAICancelScheduledPlayResponse summary);
    void v01GroupCallPostSignalFull(OAIHttpRequestWorker *worker, OAIGroupCallResponse summary);
    void v01HangupAllCallsPostSignalFull(OAIHttpRequestWorker *worker, OAIHangupAllCallsResponse summary);
    void v01HangupCallPostSignalFull(OAIHttpRequestWorker *worker, OAIHangupCallResponse summary);
    void v01PlayPostSignalFull(OAIHttpRequestWorker *worker, OAIPlayResponse summary);
    void v01PlayStopPostSignalFull(OAIHttpRequestWorker *worker, OAIPlayStopResponse summary);
    void v01RecordStartPostSignalFull(OAIHttpRequestWorker *worker, OAIRecordStartResponse summary);
    void v01RecordStopPostSignalFull(OAIHttpRequestWorker *worker, OAIRecordStopResponse summary);
    void v01ScheduleHangupPostSignalFull(OAIHttpRequestWorker *worker, OAIScheduleHangupResponse summary);
    void v01SchedulePlayPostSignalFull(OAIHttpRequestWorker *worker, OAISchedulePlayResponse summary);
    void v01SendDigitsPostSignalFull(OAIHttpRequestWorker *worker, OAISendDigitsResponse summary);
    void v01SoundTouchPostSignalFull(OAIHttpRequestWorker *worker, OAISoundTouchResponse summary);
    void v01SoundTouchStopPostSignalFull(OAIHttpRequestWorker *worker, OAISoundTouchStopResponse summary);
    void v01TransferCallPostSignalFull(OAIHttpRequestWorker *worker, OAITransferCallResponse summary);

    Q_DECL_DEPRECATED_X("Use v01BulkCallPostSignalError() instead")
    void v01BulkCallPostSignalE(OAIBulkCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01BulkCallPostSignalError(OAIBulkCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01CallPostSignalError() instead")
    void v01CallPostSignalE(OAICallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01CallPostSignalError(OAICallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01CancelScheduledHangupPostSignalError() instead")
    void v01CancelScheduledHangupPostSignalE(OAICancelScheduledHangupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01CancelScheduledHangupPostSignalError(OAICancelScheduledHangupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01CancelScheduledPlayPostSignalError() instead")
    void v01CancelScheduledPlayPostSignalE(OAICancelScheduledPlayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01CancelScheduledPlayPostSignalError(OAICancelScheduledPlayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01GroupCallPostSignalError() instead")
    void v01GroupCallPostSignalE(OAIGroupCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01GroupCallPostSignalError(OAIGroupCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01HangupAllCallsPostSignalError() instead")
    void v01HangupAllCallsPostSignalE(OAIHangupAllCallsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01HangupAllCallsPostSignalError(OAIHangupAllCallsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01HangupCallPostSignalError() instead")
    void v01HangupCallPostSignalE(OAIHangupCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01HangupCallPostSignalError(OAIHangupCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01PlayPostSignalError() instead")
    void v01PlayPostSignalE(OAIPlayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01PlayPostSignalError(OAIPlayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01PlayStopPostSignalError() instead")
    void v01PlayStopPostSignalE(OAIPlayStopResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01PlayStopPostSignalError(OAIPlayStopResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01RecordStartPostSignalError() instead")
    void v01RecordStartPostSignalE(OAIRecordStartResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01RecordStartPostSignalError(OAIRecordStartResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01RecordStopPostSignalError() instead")
    void v01RecordStopPostSignalE(OAIRecordStopResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01RecordStopPostSignalError(OAIRecordStopResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ScheduleHangupPostSignalError() instead")
    void v01ScheduleHangupPostSignalE(OAIScheduleHangupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ScheduleHangupPostSignalError(OAIScheduleHangupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SchedulePlayPostSignalError() instead")
    void v01SchedulePlayPostSignalE(OAISchedulePlayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SchedulePlayPostSignalError(OAISchedulePlayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SendDigitsPostSignalError() instead")
    void v01SendDigitsPostSignalE(OAISendDigitsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SendDigitsPostSignalError(OAISendDigitsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SoundTouchPostSignalError() instead")
    void v01SoundTouchPostSignalE(OAISoundTouchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SoundTouchPostSignalError(OAISoundTouchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SoundTouchStopPostSignalError() instead")
    void v01SoundTouchStopPostSignalE(OAISoundTouchStopResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SoundTouchStopPostSignalError(OAISoundTouchStopResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01TransferCallPostSignalError() instead")
    void v01TransferCallPostSignalE(OAITransferCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01TransferCallPostSignalError(OAITransferCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v01BulkCallPostSignalErrorFull() instead")
    void v01BulkCallPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01BulkCallPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01CallPostSignalErrorFull() instead")
    void v01CallPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01CallPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01CancelScheduledHangupPostSignalErrorFull() instead")
    void v01CancelScheduledHangupPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01CancelScheduledHangupPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01CancelScheduledPlayPostSignalErrorFull() instead")
    void v01CancelScheduledPlayPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01CancelScheduledPlayPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01GroupCallPostSignalErrorFull() instead")
    void v01GroupCallPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01GroupCallPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01HangupAllCallsPostSignalErrorFull() instead")
    void v01HangupAllCallsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01HangupAllCallsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01HangupCallPostSignalErrorFull() instead")
    void v01HangupCallPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01HangupCallPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01PlayPostSignalErrorFull() instead")
    void v01PlayPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01PlayPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01PlayStopPostSignalErrorFull() instead")
    void v01PlayStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01PlayStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01RecordStartPostSignalErrorFull() instead")
    void v01RecordStartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01RecordStartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01RecordStopPostSignalErrorFull() instead")
    void v01RecordStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01RecordStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ScheduleHangupPostSignalErrorFull() instead")
    void v01ScheduleHangupPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ScheduleHangupPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SchedulePlayPostSignalErrorFull() instead")
    void v01SchedulePlayPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SchedulePlayPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SendDigitsPostSignalErrorFull() instead")
    void v01SendDigitsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SendDigitsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SoundTouchPostSignalErrorFull() instead")
    void v01SoundTouchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SoundTouchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01SoundTouchStopPostSignalErrorFull() instead")
    void v01SoundTouchStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01SoundTouchStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01TransferCallPostSignalErrorFull() instead")
    void v01TransferCallPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01TransferCallPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
