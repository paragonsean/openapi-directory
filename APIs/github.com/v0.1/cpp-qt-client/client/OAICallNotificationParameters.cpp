/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallNotificationParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallNotificationParameters::OAICallNotificationParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallNotificationParameters::OAICallNotificationParameters() {
    this->initializeModel();
}

OAICallNotificationParameters::~OAICallNotificationParameters() {}

void OAICallNotificationParameters::initializeModel() {

    m_a_leg_request_uuid_isSet = false;
    m_a_leg_request_uuid_isValid = false;

    m_a_leg_uuid_isSet = false;
    m_a_leg_uuid_isValid = false;

    m_answered_by_isSet = false;
    m_answered_by_isValid = false;

    m_call_status_isSet = false;
    m_call_status_isValid = false;

    m_call_uuid_isSet = false;
    m_call_uuid_isValid = false;

    m_caller_name_isSet = false;
    m_caller_name_isValid = false;

    m_core_uuid_isSet = false;
    m_core_uuid_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_forwarded_from_isSet = false;
    m_forwarded_from_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_machine_detection_duration_isSet = false;
    m_machine_detection_duration_isValid = false;

    m_rest_api_server_isSet = false;
    m_rest_api_server_isValid = false;

    m_scheduled_hangup_id_isSet = false;
    m_scheduled_hangup_id_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAICallNotificationParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallNotificationParameters::fromJsonObject(QJsonObject json) {

    m_a_leg_request_uuid_isValid = ::OpenAPI::fromJsonValue(m_a_leg_request_uuid, json[QString("ALegRequestUUID")]);
    m_a_leg_request_uuid_isSet = !json[QString("ALegRequestUUID")].isNull() && m_a_leg_request_uuid_isValid;

    m_a_leg_uuid_isValid = ::OpenAPI::fromJsonValue(m_a_leg_uuid, json[QString("ALegUUID")]);
    m_a_leg_uuid_isSet = !json[QString("ALegUUID")].isNull() && m_a_leg_uuid_isValid;

    m_answered_by_isValid = ::OpenAPI::fromJsonValue(m_answered_by, json[QString("AnsweredBy")]);
    m_answered_by_isSet = !json[QString("AnsweredBy")].isNull() && m_answered_by_isValid;

    m_call_status_isValid = ::OpenAPI::fromJsonValue(m_call_status, json[QString("CallStatus")]);
    m_call_status_isSet = !json[QString("CallStatus")].isNull() && m_call_status_isValid;

    m_call_uuid_isValid = ::OpenAPI::fromJsonValue(m_call_uuid, json[QString("CallUUID")]);
    m_call_uuid_isSet = !json[QString("CallUUID")].isNull() && m_call_uuid_isValid;

    m_caller_name_isValid = ::OpenAPI::fromJsonValue(m_caller_name, json[QString("CallerName")]);
    m_caller_name_isSet = !json[QString("CallerName")].isNull() && m_caller_name_isValid;

    m_core_uuid_isValid = ::OpenAPI::fromJsonValue(m_core_uuid, json[QString("CoreUUID")]);
    m_core_uuid_isSet = !json[QString("CoreUUID")].isNull() && m_core_uuid_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;

    m_forwarded_from_isValid = ::OpenAPI::fromJsonValue(m_forwarded_from, json[QString("ForwardedFrom")]);
    m_forwarded_from_isSet = !json[QString("ForwardedFrom")].isNull() && m_forwarded_from_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("From")]);
    m_from_isSet = !json[QString("From")].isNull() && m_from_isValid;

    m_machine_detection_duration_isValid = ::OpenAPI::fromJsonValue(m_machine_detection_duration, json[QString("MachineDetectionDuration")]);
    m_machine_detection_duration_isSet = !json[QString("MachineDetectionDuration")].isNull() && m_machine_detection_duration_isValid;

    m_rest_api_server_isValid = ::OpenAPI::fromJsonValue(m_rest_api_server, json[QString("RestApiServer")]);
    m_rest_api_server_isSet = !json[QString("RestApiServer")].isNull() && m_rest_api_server_isValid;

    m_scheduled_hangup_id_isValid = ::OpenAPI::fromJsonValue(m_scheduled_hangup_id, json[QString("ScheduledHangupId")]);
    m_scheduled_hangup_id_isSet = !json[QString("ScheduledHangupId")].isNull() && m_scheduled_hangup_id_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("To")]);
    m_to_isSet = !json[QString("To")].isNull() && m_to_isValid;
}

QString OAICallNotificationParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallNotificationParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_a_leg_request_uuid_isSet) {
        obj.insert(QString("ALegRequestUUID"), ::OpenAPI::toJsonValue(m_a_leg_request_uuid));
    }
    if (m_a_leg_uuid_isSet) {
        obj.insert(QString("ALegUUID"), ::OpenAPI::toJsonValue(m_a_leg_uuid));
    }
    if (m_answered_by_isSet) {
        obj.insert(QString("AnsweredBy"), ::OpenAPI::toJsonValue(m_answered_by));
    }
    if (m_call_status_isSet) {
        obj.insert(QString("CallStatus"), ::OpenAPI::toJsonValue(m_call_status));
    }
    if (m_call_uuid_isSet) {
        obj.insert(QString("CallUUID"), ::OpenAPI::toJsonValue(m_call_uuid));
    }
    if (m_caller_name_isSet) {
        obj.insert(QString("CallerName"), ::OpenAPI::toJsonValue(m_caller_name));
    }
    if (m_core_uuid_isSet) {
        obj.insert(QString("CoreUUID"), ::OpenAPI::toJsonValue(m_core_uuid));
    }
    if (m_direction_isSet) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_forwarded_from_isSet) {
        obj.insert(QString("ForwardedFrom"), ::OpenAPI::toJsonValue(m_forwarded_from));
    }
    if (m_from_isSet) {
        obj.insert(QString("From"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_machine_detection_duration_isSet) {
        obj.insert(QString("MachineDetectionDuration"), ::OpenAPI::toJsonValue(m_machine_detection_duration));
    }
    if (m_rest_api_server_isSet) {
        obj.insert(QString("RestApiServer"), ::OpenAPI::toJsonValue(m_rest_api_server));
    }
    if (m_scheduled_hangup_id_isSet) {
        obj.insert(QString("ScheduledHangupId"), ::OpenAPI::toJsonValue(m_scheduled_hangup_id));
    }
    if (m_to_isSet) {
        obj.insert(QString("To"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QString OAICallNotificationParameters::getALegRequestUuid() const {
    return m_a_leg_request_uuid;
}
void OAICallNotificationParameters::setALegRequestUuid(const QString &a_leg_request_uuid) {
    m_a_leg_request_uuid = a_leg_request_uuid;
    m_a_leg_request_uuid_isSet = true;
}

bool OAICallNotificationParameters::is_a_leg_request_uuid_Set() const{
    return m_a_leg_request_uuid_isSet;
}

bool OAICallNotificationParameters::is_a_leg_request_uuid_Valid() const{
    return m_a_leg_request_uuid_isValid;
}

QString OAICallNotificationParameters::getALegUuid() const {
    return m_a_leg_uuid;
}
void OAICallNotificationParameters::setALegUuid(const QString &a_leg_uuid) {
    m_a_leg_uuid = a_leg_uuid;
    m_a_leg_uuid_isSet = true;
}

bool OAICallNotificationParameters::is_a_leg_uuid_Set() const{
    return m_a_leg_uuid_isSet;
}

bool OAICallNotificationParameters::is_a_leg_uuid_Valid() const{
    return m_a_leg_uuid_isValid;
}

QString OAICallNotificationParameters::getAnsweredBy() const {
    return m_answered_by;
}
void OAICallNotificationParameters::setAnsweredBy(const QString &answered_by) {
    m_answered_by = answered_by;
    m_answered_by_isSet = true;
}

bool OAICallNotificationParameters::is_answered_by_Set() const{
    return m_answered_by_isSet;
}

bool OAICallNotificationParameters::is_answered_by_Valid() const{
    return m_answered_by_isValid;
}

QString OAICallNotificationParameters::getCallStatus() const {
    return m_call_status;
}
void OAICallNotificationParameters::setCallStatus(const QString &call_status) {
    m_call_status = call_status;
    m_call_status_isSet = true;
}

bool OAICallNotificationParameters::is_call_status_Set() const{
    return m_call_status_isSet;
}

bool OAICallNotificationParameters::is_call_status_Valid() const{
    return m_call_status_isValid;
}

QString OAICallNotificationParameters::getCallUuid() const {
    return m_call_uuid;
}
void OAICallNotificationParameters::setCallUuid(const QString &call_uuid) {
    m_call_uuid = call_uuid;
    m_call_uuid_isSet = true;
}

bool OAICallNotificationParameters::is_call_uuid_Set() const{
    return m_call_uuid_isSet;
}

bool OAICallNotificationParameters::is_call_uuid_Valid() const{
    return m_call_uuid_isValid;
}

QString OAICallNotificationParameters::getCallerName() const {
    return m_caller_name;
}
void OAICallNotificationParameters::setCallerName(const QString &caller_name) {
    m_caller_name = caller_name;
    m_caller_name_isSet = true;
}

bool OAICallNotificationParameters::is_caller_name_Set() const{
    return m_caller_name_isSet;
}

bool OAICallNotificationParameters::is_caller_name_Valid() const{
    return m_caller_name_isValid;
}

QString OAICallNotificationParameters::getCoreUuid() const {
    return m_core_uuid;
}
void OAICallNotificationParameters::setCoreUuid(const QString &core_uuid) {
    m_core_uuid = core_uuid;
    m_core_uuid_isSet = true;
}

bool OAICallNotificationParameters::is_core_uuid_Set() const{
    return m_core_uuid_isSet;
}

bool OAICallNotificationParameters::is_core_uuid_Valid() const{
    return m_core_uuid_isValid;
}

QString OAICallNotificationParameters::getDirection() const {
    return m_direction;
}
void OAICallNotificationParameters::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICallNotificationParameters::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICallNotificationParameters::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAICallNotificationParameters::getForwardedFrom() const {
    return m_forwarded_from;
}
void OAICallNotificationParameters::setForwardedFrom(const QString &forwarded_from) {
    m_forwarded_from = forwarded_from;
    m_forwarded_from_isSet = true;
}

bool OAICallNotificationParameters::is_forwarded_from_Set() const{
    return m_forwarded_from_isSet;
}

bool OAICallNotificationParameters::is_forwarded_from_Valid() const{
    return m_forwarded_from_isValid;
}

QString OAICallNotificationParameters::getFrom() const {
    return m_from;
}
void OAICallNotificationParameters::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICallNotificationParameters::is_from_Set() const{
    return m_from_isSet;
}

bool OAICallNotificationParameters::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAICallNotificationParameters::getMachineDetectionDuration() const {
    return m_machine_detection_duration;
}
void OAICallNotificationParameters::setMachineDetectionDuration(const qint32 &machine_detection_duration) {
    m_machine_detection_duration = machine_detection_duration;
    m_machine_detection_duration_isSet = true;
}

bool OAICallNotificationParameters::is_machine_detection_duration_Set() const{
    return m_machine_detection_duration_isSet;
}

bool OAICallNotificationParameters::is_machine_detection_duration_Valid() const{
    return m_machine_detection_duration_isValid;
}

QString OAICallNotificationParameters::getRestApiServer() const {
    return m_rest_api_server;
}
void OAICallNotificationParameters::setRestApiServer(const QString &rest_api_server) {
    m_rest_api_server = rest_api_server;
    m_rest_api_server_isSet = true;
}

bool OAICallNotificationParameters::is_rest_api_server_Set() const{
    return m_rest_api_server_isSet;
}

bool OAICallNotificationParameters::is_rest_api_server_Valid() const{
    return m_rest_api_server_isValid;
}

QString OAICallNotificationParameters::getScheduledHangupId() const {
    return m_scheduled_hangup_id;
}
void OAICallNotificationParameters::setScheduledHangupId(const QString &scheduled_hangup_id) {
    m_scheduled_hangup_id = scheduled_hangup_id;
    m_scheduled_hangup_id_isSet = true;
}

bool OAICallNotificationParameters::is_scheduled_hangup_id_Set() const{
    return m_scheduled_hangup_id_isSet;
}

bool OAICallNotificationParameters::is_scheduled_hangup_id_Valid() const{
    return m_scheduled_hangup_id_isValid;
}

QString OAICallNotificationParameters::getTo() const {
    return m_to;
}
void OAICallNotificationParameters::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICallNotificationParameters::is_to_Set() const{
    return m_to_isSet;
}

bool OAICallNotificationParameters::is_to_Valid() const{
    return m_to_isValid;
}

bool OAICallNotificationParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_leg_request_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_a_leg_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answered_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarded_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_detection_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rest_api_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_hangup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallNotificationParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_call_status_isValid && m_call_uuid_isValid && m_caller_name_isValid && m_core_uuid_isValid && m_direction_isValid && m_from_isValid && m_rest_api_server_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
