/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConferenceApi_H
#define OAI_OAIConferenceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConferenceDeafResponse.h"
#include "OAIConferenceHangupResponse.h"
#include "OAIConferenceKickResponse.h"
#include "OAIConferenceListMembersResponse.h"
#include "OAIConferenceListResponse.h"
#include "OAIConferenceMuteResponse.h"
#include "OAIConferencePlayResponse.h"
#include "OAIConferenceRecordStartResponse.h"
#include "OAIConferenceRecordStopResponse.h"
#include "OAIConferenceSpeakResponse.h"
#include "OAIConferenceUndeafResponse.h"
#include "OAIConferenceUnmuteResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConferenceApi : public QObject {
    Q_OBJECT

public:
    OAIConferenceApi(const int timeOut = 0);
    ~OAIConferenceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void v01ConferenceDeafPost(const QString &conference_name, const QString &member_id);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void v01ConferenceHangupPost(const QString &conference_name, const QString &member_id);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void v01ConferenceKickPost(const QString &conference_name, const QString &member_id);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  call_uuid_filter QString [optional]
    * @param[in]  deaf_filter bool [optional]
    * @param[in]  member_filter QString [optional]
    * @param[in]  muted_filter bool [optional]
    */
    virtual void v01ConferenceListMembersPost(const QString &conference_name, const ::OpenAPI::OptionalParam<QString> &call_uuid_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deaf_filter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &member_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &muted_filter = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  call_uuid_filter QString [optional]
    * @param[in]  deaf_filter bool [optional]
    * @param[in]  member_filter QString [optional]
    * @param[in]  muted_filter bool [optional]
    */
    virtual void v01ConferenceListPost(const ::OpenAPI::OptionalParam<QString> &call_uuid_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deaf_filter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &member_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &muted_filter = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void v01ConferenceMutePost(const QString &conference_name, const QString &member_id);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  file_path QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void v01ConferencePlayPost(const QString &conference_name, const QString &file_path, const QString &member_id);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  file_format QString [optional]
    * @param[in]  file_name QString [optional]
    * @param[in]  file_path QString [optional]
    */
    virtual void v01ConferenceRecordStartPost(const QString &conference_name, const ::OpenAPI::OptionalParam<QString> &file_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  record_file QString [required]
    */
    virtual void v01ConferenceRecordStopPost(const QString &conference_name, const QString &record_file);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  text QString [required]
    */
    virtual void v01ConferenceSpeakPost(const QString &conference_name, const QString &member_id, const QString &text);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void v01ConferenceUndeafPost(const QString &conference_name, const QString &member_id);

    /**
    * @param[in]  conference_name QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void v01ConferenceUnmutePost(const QString &conference_name, const QString &member_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v01ConferenceDeafPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceHangupPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceKickPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceListMembersPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceListPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceMutePostCallback(OAIHttpRequestWorker *worker);
    void v01ConferencePlayPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceRecordStartPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceRecordStopPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceSpeakPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceUndeafPostCallback(OAIHttpRequestWorker *worker);
    void v01ConferenceUnmutePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v01ConferenceDeafPostSignal(OAIConferenceDeafResponse summary);
    void v01ConferenceHangupPostSignal(OAIConferenceHangupResponse summary);
    void v01ConferenceKickPostSignal(OAIConferenceKickResponse summary);
    void v01ConferenceListMembersPostSignal(OAIConferenceListMembersResponse summary);
    void v01ConferenceListPostSignal(OAIConferenceListResponse summary);
    void v01ConferenceMutePostSignal(OAIConferenceMuteResponse summary);
    void v01ConferencePlayPostSignal(OAIConferencePlayResponse summary);
    void v01ConferenceRecordStartPostSignal(OAIConferenceRecordStartResponse summary);
    void v01ConferenceRecordStopPostSignal(OAIConferenceRecordStopResponse summary);
    void v01ConferenceSpeakPostSignal(OAIConferenceSpeakResponse summary);
    void v01ConferenceUndeafPostSignal(OAIConferenceUndeafResponse summary);
    void v01ConferenceUnmutePostSignal(OAIConferenceUnmuteResponse summary);


    void v01ConferenceDeafPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceDeafResponse summary);
    void v01ConferenceHangupPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceHangupResponse summary);
    void v01ConferenceKickPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceKickResponse summary);
    void v01ConferenceListMembersPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceListMembersResponse summary);
    void v01ConferenceListPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceListResponse summary);
    void v01ConferenceMutePostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceMuteResponse summary);
    void v01ConferencePlayPostSignalFull(OAIHttpRequestWorker *worker, OAIConferencePlayResponse summary);
    void v01ConferenceRecordStartPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceRecordStartResponse summary);
    void v01ConferenceRecordStopPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceRecordStopResponse summary);
    void v01ConferenceSpeakPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceSpeakResponse summary);
    void v01ConferenceUndeafPostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceUndeafResponse summary);
    void v01ConferenceUnmutePostSignalFull(OAIHttpRequestWorker *worker, OAIConferenceUnmuteResponse summary);

    Q_DECL_DEPRECATED_X("Use v01ConferenceDeafPostSignalError() instead")
    void v01ConferenceDeafPostSignalE(OAIConferenceDeafResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceDeafPostSignalError(OAIConferenceDeafResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceHangupPostSignalError() instead")
    void v01ConferenceHangupPostSignalE(OAIConferenceHangupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceHangupPostSignalError(OAIConferenceHangupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceKickPostSignalError() instead")
    void v01ConferenceKickPostSignalE(OAIConferenceKickResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceKickPostSignalError(OAIConferenceKickResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceListMembersPostSignalError() instead")
    void v01ConferenceListMembersPostSignalE(OAIConferenceListMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceListMembersPostSignalError(OAIConferenceListMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceListPostSignalError() instead")
    void v01ConferenceListPostSignalE(OAIConferenceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceListPostSignalError(OAIConferenceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceMutePostSignalError() instead")
    void v01ConferenceMutePostSignalE(OAIConferenceMuteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceMutePostSignalError(OAIConferenceMuteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferencePlayPostSignalError() instead")
    void v01ConferencePlayPostSignalE(OAIConferencePlayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferencePlayPostSignalError(OAIConferencePlayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceRecordStartPostSignalError() instead")
    void v01ConferenceRecordStartPostSignalE(OAIConferenceRecordStartResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceRecordStartPostSignalError(OAIConferenceRecordStartResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceRecordStopPostSignalError() instead")
    void v01ConferenceRecordStopPostSignalE(OAIConferenceRecordStopResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceRecordStopPostSignalError(OAIConferenceRecordStopResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceSpeakPostSignalError() instead")
    void v01ConferenceSpeakPostSignalE(OAIConferenceSpeakResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceSpeakPostSignalError(OAIConferenceSpeakResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceUndeafPostSignalError() instead")
    void v01ConferenceUndeafPostSignalE(OAIConferenceUndeafResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceUndeafPostSignalError(OAIConferenceUndeafResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceUnmutePostSignalError() instead")
    void v01ConferenceUnmutePostSignalE(OAIConferenceUnmuteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceUnmutePostSignalError(OAIConferenceUnmuteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v01ConferenceDeafPostSignalErrorFull() instead")
    void v01ConferenceDeafPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceDeafPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceHangupPostSignalErrorFull() instead")
    void v01ConferenceHangupPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceHangupPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceKickPostSignalErrorFull() instead")
    void v01ConferenceKickPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceKickPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceListMembersPostSignalErrorFull() instead")
    void v01ConferenceListMembersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceListMembersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceListPostSignalErrorFull() instead")
    void v01ConferenceListPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceListPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceMutePostSignalErrorFull() instead")
    void v01ConferenceMutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceMutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferencePlayPostSignalErrorFull() instead")
    void v01ConferencePlayPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferencePlayPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceRecordStartPostSignalErrorFull() instead")
    void v01ConferenceRecordStartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceRecordStartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceRecordStopPostSignalErrorFull() instead")
    void v01ConferenceRecordStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceRecordStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceSpeakPostSignalErrorFull() instead")
    void v01ConferenceSpeakPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceSpeakPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceUndeafPostSignalErrorFull() instead")
    void v01ConferenceUndeafPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceUndeafPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v01ConferenceUnmutePostSignalErrorFull() instead")
    void v01ConferenceUnmutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v01ConferenceUnmutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
