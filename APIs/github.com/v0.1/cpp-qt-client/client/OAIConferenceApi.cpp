/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConferenceApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIConferenceApi::OAIConferenceApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIConferenceApi::~OAIConferenceApi() {
}

void OAIConferenceApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://raw.github.com/rtckit/media/master/eqivo/readme-splash.png"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v01ConferenceDeafPost", defaultConf);
    _serverIndices.insert("v01ConferenceDeafPost", 0);
    _serverConfigs.insert("v01ConferenceHangupPost", defaultConf);
    _serverIndices.insert("v01ConferenceHangupPost", 0);
    _serverConfigs.insert("v01ConferenceKickPost", defaultConf);
    _serverIndices.insert("v01ConferenceKickPost", 0);
    _serverConfigs.insert("v01ConferenceListMembersPost", defaultConf);
    _serverIndices.insert("v01ConferenceListMembersPost", 0);
    _serverConfigs.insert("v01ConferenceListPost", defaultConf);
    _serverIndices.insert("v01ConferenceListPost", 0);
    _serverConfigs.insert("v01ConferenceMutePost", defaultConf);
    _serverIndices.insert("v01ConferenceMutePost", 0);
    _serverConfigs.insert("v01ConferencePlayPost", defaultConf);
    _serverIndices.insert("v01ConferencePlayPost", 0);
    _serverConfigs.insert("v01ConferenceRecordStartPost", defaultConf);
    _serverIndices.insert("v01ConferenceRecordStartPost", 0);
    _serverConfigs.insert("v01ConferenceRecordStopPost", defaultConf);
    _serverIndices.insert("v01ConferenceRecordStopPost", 0);
    _serverConfigs.insert("v01ConferenceSpeakPost", defaultConf);
    _serverIndices.insert("v01ConferenceSpeakPost", 0);
    _serverConfigs.insert("v01ConferenceUndeafPost", defaultConf);
    _serverIndices.insert("v01ConferenceUndeafPost", 0);
    _serverConfigs.insert("v01ConferenceUnmutePost", defaultConf);
    _serverIndices.insert("v01ConferenceUnmutePost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIConferenceApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIConferenceApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIConferenceApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIConferenceApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIConferenceApi::setUsername(const QString &username) {
    _username = username;
}

void OAIConferenceApi::setPassword(const QString &password) {
    _password = password;
}


void OAIConferenceApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIConferenceApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIConferenceApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIConferenceApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConferenceApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIConferenceApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIConferenceApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIConferenceApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIConferenceApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIConferenceApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIConferenceApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIConferenceApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIConferenceApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIConferenceApi::v01ConferenceDeafPost(const QString &conference_name, const QString &member_id) {
    QString fullPath = QString(_serverConfigs["v01ConferenceDeafPost"][_serverIndices.value("v01ConferenceDeafPost")].URL()+"/v0.1/ConferenceDeaf/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceDeafPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceDeafPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceDeafResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceDeafPostSignal(output);
        Q_EMIT v01ConferenceDeafPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceDeafPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceDeafPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceDeafPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceDeafPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceHangupPost(const QString &conference_name, const QString &member_id) {
    QString fullPath = QString(_serverConfigs["v01ConferenceHangupPost"][_serverIndices.value("v01ConferenceHangupPost")].URL()+"/v0.1/ConferenceHangup/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceHangupPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceHangupPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceHangupResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceHangupPostSignal(output);
        Q_EMIT v01ConferenceHangupPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceHangupPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceHangupPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceHangupPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceHangupPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceKickPost(const QString &conference_name, const QString &member_id) {
    QString fullPath = QString(_serverConfigs["v01ConferenceKickPost"][_serverIndices.value("v01ConferenceKickPost")].URL()+"/v0.1/ConferenceKick/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceKickPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceKickPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceKickResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceKickPostSignal(output);
        Q_EMIT v01ConferenceKickPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceKickPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceKickPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceKickPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceKickPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceListMembersPost(const QString &conference_name, const ::OpenAPI::OptionalParam<QString> &call_uuid_filter, const ::OpenAPI::OptionalParam<bool> &deaf_filter, const ::OpenAPI::OptionalParam<QString> &member_filter, const ::OpenAPI::OptionalParam<bool> &muted_filter) {
    QString fullPath = QString(_serverConfigs["v01ConferenceListMembersPost"][_serverIndices.value("v01ConferenceListMembersPost")].URL()+"/v0.1/ConferenceListMembers/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (call_uuid_filter.hasValue())
    {
        input.add_var("CallUUIDFilter", ::OpenAPI::toStringValue(call_uuid_filter.value()));
    }
    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    if (deaf_filter.hasValue())
    {
        input.add_var("DeafFilter", ::OpenAPI::toStringValue(deaf_filter.value()));
    }
    if (member_filter.hasValue())
    {
        input.add_var("MemberFilter", ::OpenAPI::toStringValue(member_filter.value()));
    }
    if (muted_filter.hasValue())
    {
        input.add_var("MutedFilter", ::OpenAPI::toStringValue(muted_filter.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceListMembersPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceListMembersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceListMembersResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceListMembersPostSignal(output);
        Q_EMIT v01ConferenceListMembersPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceListMembersPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceListMembersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceListMembersPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceListMembersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceListPost(const ::OpenAPI::OptionalParam<QString> &call_uuid_filter, const ::OpenAPI::OptionalParam<bool> &deaf_filter, const ::OpenAPI::OptionalParam<QString> &member_filter, const ::OpenAPI::OptionalParam<bool> &muted_filter) {
    QString fullPath = QString(_serverConfigs["v01ConferenceListPost"][_serverIndices.value("v01ConferenceListPost")].URL()+"/v0.1/ConferenceList/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (call_uuid_filter.hasValue())
    {
        input.add_var("CallUUIDFilter", ::OpenAPI::toStringValue(call_uuid_filter.value()));
    }
    if (deaf_filter.hasValue())
    {
        input.add_var("DeafFilter", ::OpenAPI::toStringValue(deaf_filter.value()));
    }
    if (member_filter.hasValue())
    {
        input.add_var("MemberFilter", ::OpenAPI::toStringValue(member_filter.value()));
    }
    if (muted_filter.hasValue())
    {
        input.add_var("MutedFilter", ::OpenAPI::toStringValue(muted_filter.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceListPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceListPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceListResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceListPostSignal(output);
        Q_EMIT v01ConferenceListPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceListPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceListPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceListPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceListPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceMutePost(const QString &conference_name, const QString &member_id) {
    QString fullPath = QString(_serverConfigs["v01ConferenceMutePost"][_serverIndices.value("v01ConferenceMutePost")].URL()+"/v0.1/ConferenceMute/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceMutePostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceMutePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceMuteResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceMutePostSignal(output);
        Q_EMIT v01ConferenceMutePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceMutePostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceMutePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceMutePostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceMutePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferencePlayPost(const QString &conference_name, const QString &file_path, const QString &member_id) {
    QString fullPath = QString(_serverConfigs["v01ConferencePlayPost"][_serverIndices.value("v01ConferencePlayPost")].URL()+"/v0.1/ConferencePlay/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("FilePath", ::OpenAPI::toStringValue(file_path));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferencePlayPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferencePlayPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferencePlayResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferencePlayPostSignal(output);
        Q_EMIT v01ConferencePlayPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferencePlayPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferencePlayPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferencePlayPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferencePlayPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceRecordStartPost(const QString &conference_name, const ::OpenAPI::OptionalParam<QString> &file_format, const ::OpenAPI::OptionalParam<QString> &file_name, const ::OpenAPI::OptionalParam<QString> &file_path) {
    QString fullPath = QString(_serverConfigs["v01ConferenceRecordStartPost"][_serverIndices.value("v01ConferenceRecordStartPost")].URL()+"/v0.1/ConferenceRecordStart/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    if (file_format.hasValue())
    {
        input.add_var("FileFormat", ::OpenAPI::toStringValue(file_format.value()));
    }
    if (file_name.hasValue())
    {
        input.add_var("FileName", ::OpenAPI::toStringValue(file_name.value()));
    }
    if (file_path.hasValue())
    {
        input.add_var("FilePath", ::OpenAPI::toStringValue(file_path.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceRecordStartPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceRecordStartPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceRecordStartResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceRecordStartPostSignal(output);
        Q_EMIT v01ConferenceRecordStartPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceRecordStartPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceRecordStartPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceRecordStartPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceRecordStartPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceRecordStopPost(const QString &conference_name, const QString &record_file) {
    QString fullPath = QString(_serverConfigs["v01ConferenceRecordStopPost"][_serverIndices.value("v01ConferenceRecordStopPost")].URL()+"/v0.1/ConferenceRecordStop/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("RecordFile", ::OpenAPI::toStringValue(record_file));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceRecordStopPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceRecordStopPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceRecordStopResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceRecordStopPostSignal(output);
        Q_EMIT v01ConferenceRecordStopPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceRecordStopPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceRecordStopPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceRecordStopPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceRecordStopPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceSpeakPost(const QString &conference_name, const QString &member_id, const QString &text) {
    QString fullPath = QString(_serverConfigs["v01ConferenceSpeakPost"][_serverIndices.value("v01ConferenceSpeakPost")].URL()+"/v0.1/ConferenceSpeak/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }
    
    {
        input.add_var("Text", ::OpenAPI::toStringValue(text));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceSpeakPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceSpeakPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceSpeakResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceSpeakPostSignal(output);
        Q_EMIT v01ConferenceSpeakPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceSpeakPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceSpeakPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceSpeakPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceSpeakPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceUndeafPost(const QString &conference_name, const QString &member_id) {
    QString fullPath = QString(_serverConfigs["v01ConferenceUndeafPost"][_serverIndices.value("v01ConferenceUndeafPost")].URL()+"/v0.1/ConferenceUndeaf/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceUndeafPostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceUndeafPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceUndeafResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceUndeafPostSignal(output);
        Q_EMIT v01ConferenceUndeafPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceUndeafPostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceUndeafPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceUndeafPostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceUndeafPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::v01ConferenceUnmutePost(const QString &conference_name, const QString &member_id) {
    QString fullPath = QString(_serverConfigs["v01ConferenceUnmutePost"][_serverIndices.value("v01ConferenceUnmutePost")].URL()+"/v0.1/ConferenceUnmute/");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("ConferenceName", ::OpenAPI::toStringValue(conference_name));
    }
    
    {
        input.add_var("MemberID", ::OpenAPI::toStringValue(member_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIConferenceApi::v01ConferenceUnmutePostCallback);
    connect(this, &OAIConferenceApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIConferenceApi::v01ConferenceUnmutePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConferenceUnmuteResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v01ConferenceUnmutePostSignal(output);
        Q_EMIT v01ConferenceUnmutePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v01ConferenceUnmutePostSignalE(output, error_type, error_str);
        Q_EMIT v01ConferenceUnmutePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v01ConferenceUnmutePostSignalError(output, error_type, error_str);
        Q_EMIT v01ConferenceUnmutePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIConferenceApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
