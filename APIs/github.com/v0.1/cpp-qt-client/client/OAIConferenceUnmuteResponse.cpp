/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConferenceUnmuteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConferenceUnmuteResponse::OAIConferenceUnmuteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConferenceUnmuteResponse::OAIConferenceUnmuteResponse() {
    this->initializeModel();
}

OAIConferenceUnmuteResponse::~OAIConferenceUnmuteResponse() {}

void OAIConferenceUnmuteResponse::initializeModel() {

    m_members_isSet = false;
    m_members_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIConferenceUnmuteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConferenceUnmuteResponse::fromJsonObject(QJsonObject json) {

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("Members")]);
    m_members_isSet = !json[QString("Members")].isNull() && m_members_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("Success")]);
    m_success_isSet = !json[QString("Success")].isNull() && m_success_isValid;
}

QString OAIConferenceUnmuteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConferenceUnmuteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_members.size() > 0) {
        obj.insert(QString("Members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_success_isSet) {
        obj.insert(QString("Success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QList<QString> OAIConferenceUnmuteResponse::getMembers() const {
    return m_members;
}
void OAIConferenceUnmuteResponse::setMembers(const QList<QString> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIConferenceUnmuteResponse::is_members_Set() const{
    return m_members_isSet;
}

bool OAIConferenceUnmuteResponse::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIConferenceUnmuteResponse::getMessage() const {
    return m_message;
}
void OAIConferenceUnmuteResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIConferenceUnmuteResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIConferenceUnmuteResponse::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIConferenceUnmuteResponse::isSuccess() const {
    return m_success;
}
void OAIConferenceUnmuteResponse::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIConferenceUnmuteResponse::is_success_Set() const{
    return m_success_isSet;
}

bool OAIConferenceUnmuteResponse::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIConferenceUnmuteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConferenceUnmuteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_success_isValid && true;
}

} // namespace OpenAPI
