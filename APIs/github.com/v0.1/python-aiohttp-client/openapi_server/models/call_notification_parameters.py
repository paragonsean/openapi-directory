# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallNotificationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a_leg_request_uuid: str=None, a_leg_uuid: str=None, answered_by: str=None, call_status: str=None, call_uuid: str=None, caller_name: str=None, core_uuid: str=None, direction: str=None, forwarded_from: str=None, _from: str=None, machine_detection_duration: int=None, rest_api_server: str=None, scheduled_hangup_id: str=None, to: str=None):
        """CallNotificationParameters - a model defined in OpenAPI

        :param a_leg_request_uuid: The a_leg_request_uuid of this CallNotificationParameters.
        :param a_leg_uuid: The a_leg_uuid of this CallNotificationParameters.
        :param answered_by: The answered_by of this CallNotificationParameters.
        :param call_status: The call_status of this CallNotificationParameters.
        :param call_uuid: The call_uuid of this CallNotificationParameters.
        :param caller_name: The caller_name of this CallNotificationParameters.
        :param core_uuid: The core_uuid of this CallNotificationParameters.
        :param direction: The direction of this CallNotificationParameters.
        :param forwarded_from: The forwarded_from of this CallNotificationParameters.
        :param _from: The _from of this CallNotificationParameters.
        :param machine_detection_duration: The machine_detection_duration of this CallNotificationParameters.
        :param rest_api_server: The rest_api_server of this CallNotificationParameters.
        :param scheduled_hangup_id: The scheduled_hangup_id of this CallNotificationParameters.
        :param to: The to of this CallNotificationParameters.
        """
        self.openapi_types = {
            'a_leg_request_uuid': str,
            'a_leg_uuid': str,
            'answered_by': str,
            'call_status': str,
            'call_uuid': str,
            'caller_name': str,
            'core_uuid': str,
            'direction': str,
            'forwarded_from': str,
            '_from': str,
            'machine_detection_duration': int,
            'rest_api_server': str,
            'scheduled_hangup_id': str,
            'to': str
        }

        self.attribute_map = {
            'a_leg_request_uuid': 'ALegRequestUUID',
            'a_leg_uuid': 'ALegUUID',
            'answered_by': 'AnsweredBy',
            'call_status': 'CallStatus',
            'call_uuid': 'CallUUID',
            'caller_name': 'CallerName',
            'core_uuid': 'CoreUUID',
            'direction': 'Direction',
            'forwarded_from': 'ForwardedFrom',
            '_from': 'From',
            'machine_detection_duration': 'MachineDetectionDuration',
            'rest_api_server': 'RestApiServer',
            'scheduled_hangup_id': 'ScheduledHangupId',
            'to': 'To'
        }

        self._a_leg_request_uuid = a_leg_request_uuid
        self._a_leg_uuid = a_leg_uuid
        self._answered_by = answered_by
        self._call_status = call_status
        self._call_uuid = call_uuid
        self._caller_name = caller_name
        self._core_uuid = core_uuid
        self._direction = direction
        self._forwarded_from = forwarded_from
        self.__from = _from
        self._machine_detection_duration = machine_detection_duration
        self._rest_api_server = rest_api_server
        self._scheduled_hangup_id = scheduled_hangup_id
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallNotificationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallNotificationParameters of this CallNotificationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a_leg_request_uuid(self):
        """Gets the a_leg_request_uuid of this CallNotificationParameters.

        A leg call request's unique identifier

        :return: The a_leg_request_uuid of this CallNotificationParameters.
        :rtype: str
        """
        return self._a_leg_request_uuid

    @a_leg_request_uuid.setter
    def a_leg_request_uuid(self, a_leg_request_uuid):
        """Sets the a_leg_request_uuid of this CallNotificationParameters.

        A leg call request's unique identifier

        :param a_leg_request_uuid: The a_leg_request_uuid of this CallNotificationParameters.
        :type a_leg_request_uuid: str
        """

        self._a_leg_request_uuid = a_leg_request_uuid

    @property
    def a_leg_uuid(self):
        """Gets the a_leg_uuid of this CallNotificationParameters.

        A leg call's unique identifier, assigned by FreeSWITCH

        :return: The a_leg_uuid of this CallNotificationParameters.
        :rtype: str
        """
        return self._a_leg_uuid

    @a_leg_uuid.setter
    def a_leg_uuid(self, a_leg_uuid):
        """Sets the a_leg_uuid of this CallNotificationParameters.

        A leg call's unique identifier, assigned by FreeSWITCH

        :param a_leg_uuid: The a_leg_uuid of this CallNotificationParameters.
        :type a_leg_uuid: str
        """

        self._a_leg_uuid = a_leg_uuid

    @property
    def answered_by(self):
        """Gets the answered_by of this CallNotificationParameters.

        Answering actor, when answering machine detection is enabled

        :return: The answered_by of this CallNotificationParameters.
        :rtype: str
        """
        return self._answered_by

    @answered_by.setter
    def answered_by(self, answered_by):
        """Sets the answered_by of this CallNotificationParameters.

        Answering actor, when answering machine detection is enabled

        :param answered_by: The answered_by of this CallNotificationParameters.
        :type answered_by: str
        """
        allowed_values = ["machine_start", "machine_end_beep", "machine_end_other", "human", "unknown"]  # noqa: E501
        if answered_by not in allowed_values:
            raise ValueError(
                "Invalid value for `answered_by` ({0}), must be one of {1}"
                .format(answered_by, allowed_values)
            )

        self._answered_by = answered_by

    @property
    def call_status(self):
        """Gets the call_status of this CallNotificationParameters.

        Call's current status

        :return: The call_status of this CallNotificationParameters.
        :rtype: str
        """
        return self._call_status

    @call_status.setter
    def call_status(self, call_status):
        """Sets the call_status of this CallNotificationParameters.

        Call's current status

        :param call_status: The call_status of this CallNotificationParameters.
        :type call_status: str
        """
        allowed_values = ["ringing", "early-media", "answer", "in-progress", "completed"]  # noqa: E501
        if call_status not in allowed_values:
            raise ValueError(
                "Invalid value for `call_status` ({0}), must be one of {1}"
                .format(call_status, allowed_values)
            )

        self._call_status = call_status

    @property
    def call_uuid(self):
        """Gets the call_uuid of this CallNotificationParameters.

        Call's unique identifier, assigned by FreeSWITCH

        :return: The call_uuid of this CallNotificationParameters.
        :rtype: str
        """
        return self._call_uuid

    @call_uuid.setter
    def call_uuid(self, call_uuid):
        """Sets the call_uuid of this CallNotificationParameters.

        Call's unique identifier, assigned by FreeSWITCH

        :param call_uuid: The call_uuid of this CallNotificationParameters.
        :type call_uuid: str
        """
        if call_uuid is None:
            raise ValueError("Invalid value for `call_uuid`, must not be `None`")

        self._call_uuid = call_uuid

    @property
    def caller_name(self):
        """Gets the caller_name of this CallNotificationParameters.

        Caller name set for the call

        :return: The caller_name of this CallNotificationParameters.
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this CallNotificationParameters.

        Caller name set for the call

        :param caller_name: The caller_name of this CallNotificationParameters.
        :type caller_name: str
        """
        if caller_name is None:
            raise ValueError("Invalid value for `caller_name`, must not be `None`")

        self._caller_name = caller_name

    @property
    def core_uuid(self):
        """Gets the core_uuid of this CallNotificationParameters.

        FreeSWITCH's instance unique identifier (Eqivo extension)

        :return: The core_uuid of this CallNotificationParameters.
        :rtype: str
        """
        return self._core_uuid

    @core_uuid.setter
    def core_uuid(self, core_uuid):
        """Sets the core_uuid of this CallNotificationParameters.

        FreeSWITCH's instance unique identifier (Eqivo extension)

        :param core_uuid: The core_uuid of this CallNotificationParameters.
        :type core_uuid: str
        """
        if core_uuid is None:
            raise ValueError("Invalid value for `core_uuid`, must not be `None`")

        self._core_uuid = core_uuid

    @property
    def direction(self):
        """Gets the direction of this CallNotificationParameters.

        Call's direction

        :return: The direction of this CallNotificationParameters.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CallNotificationParameters.

        Call's direction

        :param direction: The direction of this CallNotificationParameters.
        :type direction: str
        """
        allowed_values = ["inbound", "outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def forwarded_from(self):
        """Gets the forwarded_from of this CallNotificationParameters.

        Original call destination (before diversion)

        :return: The forwarded_from of this CallNotificationParameters.
        :rtype: str
        """
        return self._forwarded_from

    @forwarded_from.setter
    def forwarded_from(self, forwarded_from):
        """Sets the forwarded_from of this CallNotificationParameters.

        Original call destination (before diversion)

        :param forwarded_from: The forwarded_from of this CallNotificationParameters.
        :type forwarded_from: str
        """

        self._forwarded_from = forwarded_from

    @property
    def _from(self):
        """Gets the _from of this CallNotificationParameters.

        Caller ID set for the call

        :return: The _from of this CallNotificationParameters.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CallNotificationParameters.

        Caller ID set for the call

        :param _from: The _from of this CallNotificationParameters.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def machine_detection_duration(self):
        """Gets the machine_detection_duration of this CallNotificationParameters.

        Actual answering machine detection assessment duration (in milliseconds)

        :return: The machine_detection_duration of this CallNotificationParameters.
        :rtype: int
        """
        return self._machine_detection_duration

    @machine_detection_duration.setter
    def machine_detection_duration(self, machine_detection_duration):
        """Sets the machine_detection_duration of this CallNotificationParameters.

        Actual answering machine detection assessment duration (in milliseconds)

        :param machine_detection_duration: The machine_detection_duration of this CallNotificationParameters.
        :type machine_detection_duration: int
        """

        self._machine_detection_duration = machine_detection_duration

    @property
    def rest_api_server(self):
        """Gets the rest_api_server of this CallNotificationParameters.

        Eqivo Rest API server which controls the call (Eqivo extension)

        :return: The rest_api_server of this CallNotificationParameters.
        :rtype: str
        """
        return self._rest_api_server

    @rest_api_server.setter
    def rest_api_server(self, rest_api_server):
        """Sets the rest_api_server of this CallNotificationParameters.

        Eqivo Rest API server which controls the call (Eqivo extension)

        :param rest_api_server: The rest_api_server of this CallNotificationParameters.
        :type rest_api_server: str
        """
        if rest_api_server is None:
            raise ValueError("Invalid value for `rest_api_server`, must not be `None`")

        self._rest_api_server = rest_api_server

    @property
    def scheduled_hangup_id(self):
        """Gets the scheduled_hangup_id of this CallNotificationParameters.

        Unique identifier of the scheduled hangup task

        :return: The scheduled_hangup_id of this CallNotificationParameters.
        :rtype: str
        """
        return self._scheduled_hangup_id

    @scheduled_hangup_id.setter
    def scheduled_hangup_id(self, scheduled_hangup_id):
        """Sets the scheduled_hangup_id of this CallNotificationParameters.

        Unique identifier of the scheduled hangup task

        :param scheduled_hangup_id: The scheduled_hangup_id of this CallNotificationParameters.
        :type scheduled_hangup_id: str
        """

        self._scheduled_hangup_id = scheduled_hangup_id

    @property
    def to(self):
        """Gets the to of this CallNotificationParameters.

        Called phone number

        :return: The to of this CallNotificationParameters.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CallNotificationParameters.

        Called phone number

        :param to: The to of this CallNotificationParameters.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
