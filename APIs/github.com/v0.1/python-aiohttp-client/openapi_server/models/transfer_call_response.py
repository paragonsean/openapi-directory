# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferCallResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, success: bool=None):
        """TransferCallResponse - a model defined in OpenAPI

        :param message: The message of this TransferCallResponse.
        :param success: The success of this TransferCallResponse.
        """
        self.openapi_types = {
            'message': str,
            'success': bool
        }

        self.attribute_map = {
            'message': 'Message',
            'success': 'Success'
        }

        self._message = message
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferCallResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferCallResponse of this TransferCallResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this TransferCallResponse.

        Response message

        :return: The message of this TransferCallResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TransferCallResponse.

        Response message

        :param message: The message of this TransferCallResponse.
        :type message: str
        """
        allowed_values = ["Transfer Call Executed", "CallUUID Parameter must be present", "Url Parameter must be present", "Url is not Valid", "Transfer Call Failed -- Call not found", "Transfer Call Failed"]  # noqa: E501
        if message not in allowed_values:
            raise ValueError(
                "Invalid value for `message` ({0}), must be one of {1}"
                .format(message, allowed_values)
            )

        self._message = message

    @property
    def success(self):
        """Gets the success of this TransferCallResponse.

        Whether the request was successful or not

        :return: The success of this TransferCallResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TransferCallResponse.

        Whether the request was successful or not

        :param success: The success of this TransferCallResponse.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success
