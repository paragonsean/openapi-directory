/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConferenceDeafResponse from '../model/ConferenceDeafResponse';
import ConferenceHangupResponse from '../model/ConferenceHangupResponse';
import ConferenceKickResponse from '../model/ConferenceKickResponse';
import ConferenceListMembersResponse from '../model/ConferenceListMembersResponse';
import ConferenceListResponse from '../model/ConferenceListResponse';
import ConferenceMuteResponse from '../model/ConferenceMuteResponse';
import ConferencePlayResponse from '../model/ConferencePlayResponse';
import ConferenceRecordStartResponse from '../model/ConferenceRecordStartResponse';
import ConferenceRecordStopResponse from '../model/ConferenceRecordStopResponse';
import ConferenceSpeakResponse from '../model/ConferenceSpeakResponse';
import ConferenceUndeafResponse from '../model/ConferenceUndeafResponse';
import ConferenceUnmuteResponse from '../model/ConferenceUnmuteResponse';

/**
* Conference service.
* @module api/ConferenceApi
* @version v0.1
*/
export default class ConferenceApi {

    /**
    * Constructs a new ConferenceApi. 
    * @alias module:api/ConferenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v01ConferenceDeafPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceDeafPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceDeafResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceDeaf/
     * Blocks audio to one or more conference members
     * @param {String} conferenceName Name of the conference in question
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {module:api/ConferenceApi~v01ConferenceDeafPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceDeafResponse}
     */
    v01ConferenceDeafPost(conferenceName, memberID, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceDeafPost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferenceDeafPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'MemberID': memberID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceDeafResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceDeaf/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceHangupPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceHangupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceHangupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceHangup/
     * Kicks one or more conference members, without playing the kick sound
     * @param {String} conferenceName Name of the conference in question
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {module:api/ConferenceApi~v01ConferenceHangupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceHangupResponse}
     */
    v01ConferenceHangupPost(conferenceName, memberID, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceHangupPost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferenceHangupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'MemberID': memberID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceHangupResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceHangup/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceKickPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceKickPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceKickResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceKick/
     * Kicks one or more conference members
     * @param {String} conferenceName Name of the conference in question
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {module:api/ConferenceApi~v01ConferenceKickPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceKickResponse}
     */
    v01ConferenceKickPost(conferenceName, memberID, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceKickPost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferenceKickPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'MemberID': memberID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceKickResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceKick/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceListMembersPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceListMembersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceListMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceListMembers/
     * Retrieves the member list for a given conference
     * @param {String} conferenceName Name of the conference
     * @param {Object} opts Optional parameters
     * @param {String} [callUUIDFilter] Restricts listed calls to the provided values (comma separated call UUID list)
     * @param {Boolean} [deafFilter = false)] Restricts listed members to deaf ones
     * @param {String} [memberFilter] Restricts listed members to the provided values (comma separated member ID list)
     * @param {Boolean} [mutedFilter = false)] Restricts listed members to muted ones
     * @param {module:api/ConferenceApi~v01ConferenceListMembersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceListMembersResponse}
     */
    v01ConferenceListMembersPost(conferenceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceListMembersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUIDFilter': opts['callUUIDFilter'],
        'ConferenceName': conferenceName,
        'DeafFilter': opts['deafFilter'],
        'MemberFilter': opts['memberFilter'],
        'MutedFilter': opts['mutedFilter']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceListMembersResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceListMembers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceListPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceList/
     * Returns a list of all established conferences
     * @param {Object} opts Optional parameters
     * @param {String} [callUUIDFilter] Restricts listed calls to the provided values (comma separated call UUID list)
     * @param {Boolean} [deafFilter = false)] Restricts listed members to deaf ones
     * @param {String} [memberFilter] Restricts listed members to the provided values (comma separated member ID list)
     * @param {Boolean} [mutedFilter = false)] Restricts listed members to muted ones
     * @param {module:api/ConferenceApi~v01ConferenceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceListResponse}
     */
    v01ConferenceListPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUIDFilter': opts['callUUIDFilter'],
        'DeafFilter': opts['deafFilter'],
        'MemberFilter': opts['memberFilter'],
        'MutedFilter': opts['mutedFilter']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceListResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceList/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceMutePost operation.
     * @callback module:api/ConferenceApi~v01ConferenceMutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceMuteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceMute/
     * Blocks audio from one or more conference members
     * @param {String} conferenceName Name of the conference in question
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {module:api/ConferenceApi~v01ConferenceMutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceMuteResponse}
     */
    v01ConferenceMutePost(conferenceName, memberID, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceMutePost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferenceMutePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'MemberID': memberID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceMuteResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceMute/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferencePlayPost operation.
     * @callback module:api/ConferenceApi~v01ConferencePlayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferencePlayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferencePlay/
     * Plays media to one or more conference members
     * @param {String} conferenceName Name of the conference in question
     * @param {String} filePath Path/URI of the media file to be played
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {module:api/ConferenceApi~v01ConferencePlayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferencePlayResponse}
     */
    v01ConferencePlayPost(conferenceName, filePath, memberID, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferencePlayPost");
      }
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling v01ConferencePlayPost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferencePlayPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'FilePath': filePath,
        'MemberID': memberID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferencePlayResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferencePlay/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceRecordStartPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceRecordStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceRecordStartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceRecordStart/
     * Initiates a conference recording
     * @param {String} conferenceName Name of the conference in question
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [fileFormat = 'mp3')] File format (extension)
     * @param {String} [fileName = '')] Recording file name (without extension); if empty, a timestamp based file name will be generated
     * @param {String} [filePath = '')] Directory path/URI where the recording file will be saved
     * @param {module:api/ConferenceApi~v01ConferenceRecordStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceRecordStartResponse}
     */
    v01ConferenceRecordStartPost(conferenceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceRecordStartPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'FileFormat': opts['fileFormat'],
        'FileName': opts['fileName'],
        'FilePath': opts['filePath']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceRecordStartResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceRecordStart/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceRecordStopPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceRecordStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceRecordStopResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceRecordStop/
     * Stops a conference recording
     * @param {String} conferenceName Name of the conference in question
     * @param {String} recordFile Full path to recording file, as returned by ConferenceRecordStart; `all` shorthand is also available
     * @param {module:api/ConferenceApi~v01ConferenceRecordStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceRecordStopResponse}
     */
    v01ConferenceRecordStopPost(conferenceName, recordFile, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceRecordStopPost");
      }
      // verify the required parameter 'recordFile' is set
      if (recordFile === undefined || recordFile === null) {
        throw new Error("Missing the required parameter 'recordFile' when calling v01ConferenceRecordStopPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'RecordFile': recordFile
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceRecordStopResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceRecordStop/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceSpeakPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceSpeakPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceSpeakResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceSpeak/
     * Plays synthesized speech into a conference
     * @param {String} conferenceName Name of the conference in question
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {String} text Text to be synthesized
     * @param {module:api/ConferenceApi~v01ConferenceSpeakPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceSpeakResponse}
     */
    v01ConferenceSpeakPost(conferenceName, memberID, text, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceSpeakPost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferenceSpeakPost");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling v01ConferenceSpeakPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'MemberID': memberID,
        'Text': text
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceSpeakResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceSpeak/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceUndeafPost operation.
     * @callback module:api/ConferenceApi~v01ConferenceUndeafPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceUndeafResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceUndeaf/
     * Restores audio to one or more conference members
     * @param {String} conferenceName Name of the conference in question
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {module:api/ConferenceApi~v01ConferenceUndeafPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceUndeafResponse}
     */
    v01ConferenceUndeafPost(conferenceName, memberID, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceUndeafPost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferenceUndeafPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'MemberID': memberID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceUndeafResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceUndeaf/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ConferenceUnmutePost operation.
     * @callback module:api/ConferenceApi~v01ConferenceUnmutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConferenceUnmuteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ConferenceUnmute/
     * Restores audio from one or more conference members
     * @param {String} conferenceName Name of the conference in question
     * @param {String} memberID List of comma separated member IDs to be affected; `all` shorthand is available too.
     * @param {module:api/ConferenceApi~v01ConferenceUnmutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConferenceUnmuteResponse}
     */
    v01ConferenceUnmutePost(conferenceName, memberID, callback) {
      let postBody = null;
      // verify the required parameter 'conferenceName' is set
      if (conferenceName === undefined || conferenceName === null) {
        throw new Error("Missing the required parameter 'conferenceName' when calling v01ConferenceUnmutePost");
      }
      // verify the required parameter 'memberID' is set
      if (memberID === undefined || memberID === null) {
        throw new Error("Missing the required parameter 'memberID' when calling v01ConferenceUnmutePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'ConferenceName': conferenceName,
        'MemberID': memberID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConferenceUnmuteResponse;
      return this.apiClient.callApi(
        '/v0.1/ConferenceUnmute/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
