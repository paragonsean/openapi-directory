/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkCallResponse from '../model/BulkCallResponse';
import CallResponse from '../model/CallResponse';
import CancelScheduledHangupResponse from '../model/CancelScheduledHangupResponse';
import CancelScheduledPlayResponse from '../model/CancelScheduledPlayResponse';
import GroupCallResponse from '../model/GroupCallResponse';
import HangupAllCallsResponse from '../model/HangupAllCallsResponse';
import HangupCallResponse from '../model/HangupCallResponse';
import PlayResponse from '../model/PlayResponse';
import PlayStopResponse from '../model/PlayStopResponse';
import RecordStartResponse from '../model/RecordStartResponse';
import RecordStopResponse from '../model/RecordStopResponse';
import ScheduleHangupResponse from '../model/ScheduleHangupResponse';
import SchedulePlayResponse from '../model/SchedulePlayResponse';
import SendDigitsResponse from '../model/SendDigitsResponse';
import SoundTouchResponse from '../model/SoundTouchResponse';
import SoundTouchStopResponse from '../model/SoundTouchStopResponse';
import TransferCallResponse from '../model/TransferCallResponse';

/**
* Call service.
* @module api/CallApi
* @version v0.1
*/
export default class CallApi {

    /**
    * Constructs a new CallApi. 
    * @alias module:api/CallApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v01BulkCallPost operation.
     * @callback module:api/CallApi~v01BulkCallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkCallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/BulkCall/
     * Initiates multiple concurrent outbound calls
     * @param {String} answerUrl Fully qualified URL which will provide the RestXML once the call connects
     * @param {String} delimiter Any character, except `/` and `,`, which will be used as a separator within several parameters
     * @param {String} from Phone number to be used as Caller ID
     * @param {String} gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
     * @param {String} to Phone number to be called
     * @param {Object} opts Optional parameters
     * @param {String} [callerName] Caller Name to be set for the call
     * @param {String} [confirmKey] DTMF tone the called party must send to accept the call
     * @param {String} [confirmSound] Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered
     * @param {String} [coreUUID] Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
     * @param {String} [extraDialString] Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
     * @param {String} [gatewayCodecs] List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
     * @param {String} [gatewayRetries] List of maximum retry counts for each gateway
     * @param {String} [gatewayTimeouts] List of maximum timeout amounts (in seconds) for each gateway
     * @param {Number} [hangupOnRing] Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
     * @param {String} [hangupUrl] Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
     * @param {String} [rejectCauses = 'NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED')] Comma separated reject causes
     * @param {String} [ringUrl] Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
     * @param {String} [sendDigits] DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
     * @param {Boolean} [sendOnPreanswer] When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
     * @param {Number} [timeLimit] Schedules the call's hangup at a given time offset (in seconds) after the call is answered
     * @param {module:api/CallApi~v01BulkCallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkCallResponse}
     */
    v01BulkCallPost(answerUrl, delimiter, from, gateways, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'answerUrl' is set
      if (answerUrl === undefined || answerUrl === null) {
        throw new Error("Missing the required parameter 'answerUrl' when calling v01BulkCallPost");
      }
      // verify the required parameter 'delimiter' is set
      if (delimiter === undefined || delimiter === null) {
        throw new Error("Missing the required parameter 'delimiter' when calling v01BulkCallPost");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v01BulkCallPost");
      }
      // verify the required parameter 'gateways' is set
      if (gateways === undefined || gateways === null) {
        throw new Error("Missing the required parameter 'gateways' when calling v01BulkCallPost");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v01BulkCallPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AnswerUrl': answerUrl,
        'CallerName': opts['callerName'],
        'ConfirmKey': opts['confirmKey'],
        'ConfirmSound': opts['confirmSound'],
        'CoreUUID': opts['coreUUID'],
        'Delimiter': delimiter,
        'ExtraDialString': opts['extraDialString'],
        'From': from,
        'GatewayCodecs': opts['gatewayCodecs'],
        'GatewayRetries': opts['gatewayRetries'],
        'GatewayTimeouts': opts['gatewayTimeouts'],
        'Gateways': gateways,
        'HangupOnRing': opts['hangupOnRing'],
        'HangupUrl': opts['hangupUrl'],
        'RejectCauses': opts['rejectCauses'],
        'RingUrl': opts['ringUrl'],
        'SendDigits': opts['sendDigits'],
        'SendOnPreanswer': opts['sendOnPreanswer'],
        'TimeLimit': opts['timeLimit'],
        'To': to
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = BulkCallResponse;
      return this.apiClient.callApi(
        '/v0.1/BulkCall/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01CallPost operation.
     * @callback module:api/CallApi~v01CallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/Call/
     * Initiates an outbound call
     * @param {String} answerUrl Fully qualified URL which will provide the RestXML once the call connects
     * @param {String} from Phone number to be used as Caller ID
     * @param {String} gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
     * @param {String} to Phone number to be called
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asyncAMD = false)] When set to `true`, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension)
     * @param {String} [asyncAmdStatusCallback] Fully qualified URL to which the answering machine detection result will be sent. `AnsweredBy` and `MachineDetectionDuration` are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension)
     * @param {module:model/String} [asyncAmdStatusCallbackMethod = 'POST')] HTTP method to be used when answering machine detection is completed (an Eqivo extension)
     * @param {String} [callerName] Caller Name to be set for the call
     * @param {String} [coreUUID] Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
     * @param {String} [extraDialString] Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
     * @param {String} [gatewayCodecs] List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
     * @param {String} [gatewayRetries] List of maximum retry counts for each gateway
     * @param {String} [gatewayTimeouts] List of maximum timeout amounts (in seconds) for each gateway
     * @param {Number} [hangupOnRing] Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
     * @param {String} [hangupUrl] Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
     * @param {module:model/String} [machineDetection] Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension)
     * @param {Number} [machineDetectionSilenceTimeout = 5000)] Initial silence threshold (in milliseconds, an Eqivo extension)
     * @param {Number} [machineDetectionSpeechEndThreshold = 1200)] Silence threshold (in milliseconds, an Eqivo extension)
     * @param {Number} [machineDetectionSpeechThreshold = 2400)] Speech activity/utterance threshold (in milliseconds, an Eqivo extension)
     * @param {Number} [machineDetectionTimeout = 30)] Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension)
     * @param {String} [ringUrl] Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
     * @param {String} [sendDigits] DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
     * @param {Boolean} [sendOnPreanswer] When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
     * @param {Number} [timeLimit] Schedules the call's hangup at a given time offset (in seconds) after the call is answered
     * @param {module:api/CallApi~v01CallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallResponse}
     */
    v01CallPost(answerUrl, from, gateways, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'answerUrl' is set
      if (answerUrl === undefined || answerUrl === null) {
        throw new Error("Missing the required parameter 'answerUrl' when calling v01CallPost");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v01CallPost");
      }
      // verify the required parameter 'gateways' is set
      if (gateways === undefined || gateways === null) {
        throw new Error("Missing the required parameter 'gateways' when calling v01CallPost");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v01CallPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AnswerUrl': answerUrl,
        'AsyncAMD': opts['asyncAMD'],
        'AsyncAmdStatusCallback': opts['asyncAmdStatusCallback'],
        'AsyncAmdStatusCallbackMethod': opts['asyncAmdStatusCallbackMethod'],
        'CallerName': opts['callerName'],
        'CoreUUID': opts['coreUUID'],
        'ExtraDialString': opts['extraDialString'],
        'From': from,
        'GatewayCodecs': opts['gatewayCodecs'],
        'GatewayRetries': opts['gatewayRetries'],
        'GatewayTimeouts': opts['gatewayTimeouts'],
        'Gateways': gateways,
        'HangupOnRing': opts['hangupOnRing'],
        'HangupUrl': opts['hangupUrl'],
        'MachineDetection': opts['machineDetection'],
        'MachineDetectionSilenceTimeout': opts['machineDetectionSilenceTimeout'],
        'MachineDetectionSpeechEndThreshold': opts['machineDetectionSpeechEndThreshold'],
        'MachineDetectionSpeechThreshold': opts['machineDetectionSpeechThreshold'],
        'MachineDetectionTimeout': opts['machineDetectionTimeout'],
        'RingUrl': opts['ringUrl'],
        'SendDigits': opts['sendDigits'],
        'SendOnPreanswer': opts['sendOnPreanswer'],
        'TimeLimit': opts['timeLimit'],
        'To': to
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = CallResponse;
      return this.apiClient.callApi(
        '/v0.1/Call/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01CancelScheduledHangupPost operation.
     * @callback module:api/CallApi~v01CancelScheduledHangupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelScheduledHangupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/CancelScheduledHangup/
     * Cancels a scheduled hangup for a call
     * @param {String} schedHangupId Unique identifier returned when scheduled hangup was originally requested
     * @param {module:api/CallApi~v01CancelScheduledHangupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelScheduledHangupResponse}
     */
    v01CancelScheduledHangupPost(schedHangupId, callback) {
      let postBody = null;
      // verify the required parameter 'schedHangupId' is set
      if (schedHangupId === undefined || schedHangupId === null) {
        throw new Error("Missing the required parameter 'schedHangupId' when calling v01CancelScheduledHangupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'SchedHangupId': schedHangupId
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = CancelScheduledHangupResponse;
      return this.apiClient.callApi(
        '/v0.1/CancelScheduledHangup/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01CancelScheduledPlayPost operation.
     * @callback module:api/CallApi~v01CancelScheduledPlayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelScheduledPlayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/CancelScheduledPlay/
     * Cancels a scheduled playback request
     * @param {String} schedPlayId Unique identifier returned when scheduled playback was originally requested
     * @param {module:api/CallApi~v01CancelScheduledPlayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelScheduledPlayResponse}
     */
    v01CancelScheduledPlayPost(schedPlayId, callback) {
      let postBody = null;
      // verify the required parameter 'schedPlayId' is set
      if (schedPlayId === undefined || schedPlayId === null) {
        throw new Error("Missing the required parameter 'schedPlayId' when calling v01CancelScheduledPlayPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'SchedPlayId': schedPlayId
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = CancelScheduledPlayResponse;
      return this.apiClient.callApi(
        '/v0.1/CancelScheduledPlay/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01GroupCallPost operation.
     * @callback module:api/CallApi~v01GroupCallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupCallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/GroupCall/
     * Initiate multiple racing outbound calls
     * @param {String} answerUrl Fully qualified URL which will provide the RestXML once the call connects
     * @param {String} delimiter Any character, except `/` and `,`, which will be used as a separator within several parameters
     * @param {String} from Phone number to be used as Caller ID
     * @param {String} gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
     * @param {String} to Phone number to be called
     * @param {Object} opts Optional parameters
     * @param {String} [callerName] Caller Name to be set for the call
     * @param {String} [confirmKey] DTMF tone the called party must send to accept the call
     * @param {String} [confirmSound] Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered
     * @param {String} [coreUUID] Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
     * @param {String} [extraDialString] Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
     * @param {String} [gatewayCodecs] List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
     * @param {String} [gatewayRetries] List of maximum retry counts for each gateway
     * @param {String} [gatewayTimeouts] List of maximum timeout amounts (in seconds) for each gateway
     * @param {Number} [hangupOnRing] Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
     * @param {String} [hangupUrl] Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
     * @param {String} [rejectCauses = 'NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED')] Comma separated reject causes
     * @param {String} [ringUrl] Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
     * @param {String} [sendDigits] DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
     * @param {Boolean} [sendOnPreanswer] When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
     * @param {Number} [timeLimit] Schedules the call's hangup at a given time offset (in seconds) after the call is answered
     * @param {module:api/CallApi~v01GroupCallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupCallResponse}
     */
    v01GroupCallPost(answerUrl, delimiter, from, gateways, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'answerUrl' is set
      if (answerUrl === undefined || answerUrl === null) {
        throw new Error("Missing the required parameter 'answerUrl' when calling v01GroupCallPost");
      }
      // verify the required parameter 'delimiter' is set
      if (delimiter === undefined || delimiter === null) {
        throw new Error("Missing the required parameter 'delimiter' when calling v01GroupCallPost");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling v01GroupCallPost");
      }
      // verify the required parameter 'gateways' is set
      if (gateways === undefined || gateways === null) {
        throw new Error("Missing the required parameter 'gateways' when calling v01GroupCallPost");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling v01GroupCallPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AnswerUrl': answerUrl,
        'CallerName': opts['callerName'],
        'ConfirmKey': opts['confirmKey'],
        'ConfirmSound': opts['confirmSound'],
        'CoreUUID': opts['coreUUID'],
        'Delimiter': delimiter,
        'ExtraDialString': opts['extraDialString'],
        'From': from,
        'GatewayCodecs': opts['gatewayCodecs'],
        'GatewayRetries': opts['gatewayRetries'],
        'GatewayTimeouts': opts['gatewayTimeouts'],
        'Gateways': gateways,
        'HangupOnRing': opts['hangupOnRing'],
        'HangupUrl': opts['hangupUrl'],
        'RejectCauses': opts['rejectCauses'],
        'RingUrl': opts['ringUrl'],
        'SendDigits': opts['sendDigits'],
        'SendOnPreanswer': opts['sendOnPreanswer'],
        'TimeLimit': opts['timeLimit'],
        'To': to
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GroupCallResponse;
      return this.apiClient.callApi(
        '/v0.1/GroupCall/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01HangupAllCallsPost operation.
     * @callback module:api/CallApi~v01HangupAllCallsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HangupAllCallsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/HangupAllCalls/
     * Hangs up all established calls
     * @param {module:api/CallApi~v01HangupAllCallsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HangupAllCallsResponse}
     */
    v01HangupAllCallsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HangupAllCallsResponse;
      return this.apiClient.callApi(
        '/v0.1/HangupAllCalls/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01HangupCallPost operation.
     * @callback module:api/CallApi~v01HangupCallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HangupCallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/HangupCall/
     * Hangs up a specific call
     * @param {Object} opts Optional parameters
     * @param {String} [callUUID] Unique identifier of the call (when established); this parameter is mutually exclusive with RequestUUID
     * @param {String} [requestUUID] Unique identifier of the API request (when the call is not established yet); this parameter is mutually exclusive with CallUUID
     * @param {module:api/CallApi~v01HangupCallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HangupCallResponse}
     */
    v01HangupCallPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': opts['callUUID'],
        'RequestUUID': opts['requestUUID']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = HangupCallResponse;
      return this.apiClient.callApi(
        '/v0.1/HangupCall/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01PlayPost operation.
     * @callback module:api/CallApi~v01PlayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/Play/
     * Plays media into a live call
     * @param {String} callUUID Unique identifier of the call to play media into
     * @param {String} sounds Comma separated list of file paths/URIs to be played
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [legs = 'aleg')] Call leg(s) for which the media will be played; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
     * @param {Number} [length = 3600)] Maximum amount of time (in seconds) to playback the media
     * @param {Boolean} [loop = false)] Loops the media file(s) indefinitely
     * @param {Boolean} [mix = true)] Whether the media should be mixed with the call's audio stream
     * @param {module:api/CallApi~v01PlayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayResponse}
     */
    v01PlayPost(callUUID, sounds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01PlayPost");
      }
      // verify the required parameter 'sounds' is set
      if (sounds === undefined || sounds === null) {
        throw new Error("Missing the required parameter 'sounds' when calling v01PlayPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID,
        'Legs': opts['legs'],
        'Length': opts['length'],
        'Loop': opts['loop'],
        'Mix': opts['mix'],
        'Sounds': sounds
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PlayResponse;
      return this.apiClient.callApi(
        '/v0.1/Play/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01PlayStopPost operation.
     * @callback module:api/CallApi~v01PlayStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayStopResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/PlayStop/
     * Interrupts media playback on a given call
     * @param {String} callUUID Unique identifier of the call
     * @param {module:api/CallApi~v01PlayStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayStopResponse}
     */
    v01PlayStopPost(callUUID, callback) {
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01PlayStopPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PlayStopResponse;
      return this.apiClient.callApi(
        '/v0.1/PlayStop/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01RecordStartPost operation.
     * @callback module:api/CallApi~v01RecordStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordStartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/RecordStart/
     * Initiates recording of a given call
     * @param {Object} opts Optional parameters
     * @param {String} [callUUID] Unique identifier of the call to be recorded
     * @param {module:model/String} [fileFormat = 'mp3')] File format (extension)
     * @param {String} [fileName = '')] Recording file name (without extension); if empty, a timestamp based file name will be generated
     * @param {String} [filePath = '')] Directory path/URI where the recording file will be saved
     * @param {Number} [timeLimit = 60)] Maximum recording length, in seconds
     * @param {module:api/CallApi~v01RecordStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordStartResponse}
     */
    v01RecordStartPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': opts['callUUID'],
        'FileFormat': opts['fileFormat'],
        'FileName': opts['fileName'],
        'FilePath': opts['filePath'],
        'TimeLimit': opts['timeLimit']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RecordStartResponse;
      return this.apiClient.callApi(
        '/v0.1/RecordStart/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01RecordStopPost operation.
     * @callback module:api/CallApi~v01RecordStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordStopResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/RecordStop/
     * Stops the recording of a given call
     * @param {String} callUUID Unique identifier of the call
     * @param {String} recordFile Full path to recording file, as returned by RecordStart; `all` shorthand is also available
     * @param {module:api/CallApi~v01RecordStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordStopResponse}
     */
    v01RecordStopPost(callUUID, recordFile, callback) {
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01RecordStopPost");
      }
      // verify the required parameter 'recordFile' is set
      if (recordFile === undefined || recordFile === null) {
        throw new Error("Missing the required parameter 'recordFile' when calling v01RecordStopPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID,
        'RecordFile': recordFile
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RecordStopResponse;
      return this.apiClient.callApi(
        '/v0.1/RecordStop/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01ScheduleHangupPost operation.
     * @callback module:api/CallApi~v01ScheduleHangupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleHangupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/ScheduleHangup/
     * Schedules a hangup for a specific call
     * @param {String} callUUID Unique identifier of the call
     * @param {Number} time Time (in seconds) after which the call in question will be hung up
     * @param {module:api/CallApi~v01ScheduleHangupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleHangupResponse}
     */
    v01ScheduleHangupPost(callUUID, time, callback) {
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01ScheduleHangupPost");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling v01ScheduleHangupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID,
        'Time': time
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ScheduleHangupResponse;
      return this.apiClient.callApi(
        '/v0.1/ScheduleHangup/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01SchedulePlayPost operation.
     * @callback module:api/CallApi~v01SchedulePlayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchedulePlayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/SchedulePlay/
     * Schedules media playback for a specific call
     * @param {String} callUUID Unique identifier of the call to play media into
     * @param {String} sounds Comma separated list of file paths/URIs to be played
     * @param {Number} time Time (in seconds) after which the media will be playedback
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [legs = 'aleg')] Call leg(s) for which the media will be played; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
     * @param {Number} [length = 3600)] Maximum amount of time (in seconds) to playback the media
     * @param {Boolean} [loop = false)] Loops the media file(s) indefinitely
     * @param {Boolean} [mix = true)] Whether the media should be mixed with the call's audio stream
     * @param {module:api/CallApi~v01SchedulePlayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchedulePlayResponse}
     */
    v01SchedulePlayPost(callUUID, sounds, time, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01SchedulePlayPost");
      }
      // verify the required parameter 'sounds' is set
      if (sounds === undefined || sounds === null) {
        throw new Error("Missing the required parameter 'sounds' when calling v01SchedulePlayPost");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling v01SchedulePlayPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID,
        'Legs': opts['legs'],
        'Length': opts['length'],
        'Loop': opts['loop'],
        'Mix': opts['mix'],
        'Sounds': sounds,
        'Time': time
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SchedulePlayResponse;
      return this.apiClient.callApi(
        '/v0.1/SchedulePlay/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01SendDigitsPost operation.
     * @callback module:api/CallApi~v01SendDigitsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendDigitsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/SendDigits/
     * Emits DMTF tones to a call
     * @param {String} callUUID Unique identifier of the call to send DTMF to
     * @param {String} digits DTMF tones to be sent; each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [leg = 'aleg')] Call leg(s) to which DTMFs will be sent; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
     * @param {module:api/CallApi~v01SendDigitsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendDigitsResponse}
     */
    v01SendDigitsPost(callUUID, digits, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01SendDigitsPost");
      }
      // verify the required parameter 'digits' is set
      if (digits === undefined || digits === null) {
        throw new Error("Missing the required parameter 'digits' when calling v01SendDigitsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID,
        'Digits': digits,
        'Leg': opts['leg']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SendDigitsResponse;
      return this.apiClient.callApi(
        '/v0.1/SendDigits/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01SoundTouchPost operation.
     * @callback module:api/CallApi~v01SoundTouchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoundTouchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/SoundTouch/
     * Applies SoundTouch effects to a live call
     * @param {String} callUUID Unique identifier of the call to send DTMF to
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [audioDirection = 'out')] Media stream to be altered, incoming or outgoing
     * @param {Number} [pitch = 1)] Adjust the pitch
     * @param {Number} [pitchOctaves] Adjust the pitch in octaves
     * @param {Number} [pitchSemiTones] Adjust the pitch in semitones
     * @param {Number} [rate = 1)] Adjust the rate
     * @param {Number} [tempo = 1)] Adjust the tempo
     * @param {module:api/CallApi~v01SoundTouchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoundTouchResponse}
     */
    v01SoundTouchPost(callUUID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01SoundTouchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AudioDirection': opts['audioDirection'],
        'CallUUID': callUUID,
        'Pitch': opts['pitch'],
        'PitchOctaves': opts['pitchOctaves'],
        'PitchSemiTones': opts['pitchSemiTones'],
        'Rate': opts['rate'],
        'Tempo': opts['tempo']
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SoundTouchResponse;
      return this.apiClient.callApi(
        '/v0.1/SoundTouch/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01SoundTouchStopPost operation.
     * @callback module:api/CallApi~v01SoundTouchStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoundTouchStopResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/SoundTouchStop/
     * Removes SoundTouch effects from a given call
     * @param {String} callUUID Unique identifier of the call
     * @param {module:api/CallApi~v01SoundTouchStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoundTouchStopResponse}
     */
    v01SoundTouchStopPost(callUUID, callback) {
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01SoundTouchStopPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SoundTouchStopResponse;
      return this.apiClient.callApi(
        '/v0.1/SoundTouchStop/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v01TransferCallPost operation.
     * @callback module:api/CallApi~v01TransferCallPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferCallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v0.1/TransferCall/
     * Replaces the RestXML flow of a live call
     * @param {String} callUUID Unique identifier of the call
     * @param {String} url Absolute URL which will return the updated RestXML flow
     * @param {module:api/CallApi~v01TransferCallPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferCallResponse}
     */
    v01TransferCallPost(callUUID, url, callback) {
      let postBody = null;
      // verify the required parameter 'callUUID' is set
      if (callUUID === undefined || callUUID === null) {
        throw new Error("Missing the required parameter 'callUUID' when calling v01TransferCallPost");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling v01TransferCallPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'CallUUID': callUUID,
        'Url': url
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TransferCallResponse;
      return this.apiClient.callApi(
        '/v0.1/TransferCall/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
