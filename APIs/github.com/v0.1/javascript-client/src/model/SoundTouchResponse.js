/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SoundTouchResponse model module.
 * @module model/SoundTouchResponse
 * @version v0.1
 */
class SoundTouchResponse {
    /**
     * Constructs a new <code>SoundTouchResponse</code>.
     * @alias module:model/SoundTouchResponse
     * @param message {module:model/SoundTouchResponse.MessageEnum} Response message
     * @param success {Boolean} Whether the request was successful or not
     */
    constructor(message, success) { 
        
        SoundTouchResponse.initialize(this, message, success);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, success) { 
        obj['Message'] = message;
        obj['Success'] = success;
    }

    /**
     * Constructs a <code>SoundTouchResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoundTouchResponse} obj Optional instance to populate.
     * @return {module:model/SoundTouchResponse} The populated <code>SoundTouchResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoundTouchResponse();

            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('Success')) {
                obj['Success'] = ApiClient.convertToType(data['Success'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoundTouchResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoundTouchResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SoundTouchResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }

        return true;
    }


}

SoundTouchResponse.RequiredProperties = ["Message", "Success"];

/**
 * Response message
 * @member {module:model/SoundTouchResponse.MessageEnum} Message
 */
SoundTouchResponse.prototype['Message'] = undefined;

/**
 * Whether the request was successful or not
 * @member {Boolean} Success
 */
SoundTouchResponse.prototype['Success'] = undefined;





/**
 * Allowed values for the <code>Message</code> property.
 * @enum {String}
 * @readonly
 */
SoundTouchResponse['MessageEnum'] = {

    /**
     * value: "SoundTouch Executed"
     * @const
     */
    "SoundTouch Executed": "SoundTouch Executed",

    /**
     * value: "CallUUID Parameter Missing"
     * @const
     */
    "CallUUID Parameter Missing": "CallUUID Parameter Missing",

    /**
     * value: "AudioDirection Parameter Must be 'in' or 'out'"
     * @const
     */
    "AudioDirection Parameter Must be &#39;in&#39; or &#39;out&#39;": "AudioDirection Parameter Must be 'in' or 'out'",

    /**
     * value: "PitchSemiTones Parameter must be float"
     * @const
     */
    "PitchSemiTones Parameter must be float": "PitchSemiTones Parameter must be float",

    /**
     * value: "PitchSemiTones Parameter must be between -14 and 14"
     * @const
     */
    "PitchSemiTones Parameter must be between -14 and 14": "PitchSemiTones Parameter must be between -14 and 14",

    /**
     * value: "PitchOctaves Parameter must be float"
     * @const
     */
    "PitchOctaves Parameter must be float": "PitchOctaves Parameter must be float",

    /**
     * value: "PitchOctaves Parameter must be between -1 and 1"
     * @const
     */
    "PitchOctaves Parameter must be between -1 and 1": "PitchOctaves Parameter must be between -1 and 1",

    /**
     * value: "Pitch Parameter must be float"
     * @const
     */
    "Pitch Parameter must be float": "Pitch Parameter must be float",

    /**
     * value: "Pitch Parameter must be > 0"
     * @const
     */
    "Pitch Parameter must be &gt; 0": "Pitch Parameter must be > 0",

    /**
     * value: "Rate Parameter must be float"
     * @const
     */
    "Rate Parameter must be float": "Rate Parameter must be float",

    /**
     * value: "Rate Parameter must be > 0"
     * @const
     */
    "Rate Parameter must be &gt; 0": "Rate Parameter must be > 0",

    /**
     * value: "Tempo Parameter must be float"
     * @const
     */
    "Tempo Parameter must be float": "Tempo Parameter must be float",

    /**
     * value: "Tempo Parameter must be > 0"
     * @const
     */
    "Tempo Parameter must be &gt; 0": "Tempo Parameter must be > 0",

    /**
     * value: "SoundTouch Failed -- Call not found"
     * @const
     */
    "SoundTouch Failed -- Call not found": "SoundTouch Failed -- Call not found",

    /**
     * value: "SoundTouch Failed"
     * @const
     */
    "SoundTouch Failed": "SoundTouch Failed"
};



export default SoundTouchResponse;

