/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlayResponse model module.
 * @module model/PlayResponse
 * @version v0.1
 */
class PlayResponse {
    /**
     * Constructs a new <code>PlayResponse</code>.
     * @alias module:model/PlayResponse
     * @param message {module:model/PlayResponse.MessageEnum} Response message
     * @param success {Boolean} Whether the request was successful or not
     */
    constructor(message, success) { 
        
        PlayResponse.initialize(this, message, success);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, success) { 
        obj['Message'] = message;
        obj['Success'] = success;
    }

    /**
     * Constructs a <code>PlayResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayResponse} obj Optional instance to populate.
     * @return {module:model/PlayResponse} The populated <code>PlayResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayResponse();

            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('Success')) {
                obj['Success'] = ApiClient.convertToType(data['Success'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PlayResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }

        return true;
    }


}

PlayResponse.RequiredProperties = ["Message", "Success"];

/**
 * Response message
 * @member {module:model/PlayResponse.MessageEnum} Message
 */
PlayResponse.prototype['Message'] = undefined;

/**
 * Whether the request was successful or not
 * @member {Boolean} Success
 */
PlayResponse.prototype['Success'] = undefined;





/**
 * Allowed values for the <code>Message</code> property.
 * @enum {String}
 * @readonly
 */
PlayResponse['MessageEnum'] = {

    /**
     * value: "Play Executed"
     * @const
     */
    "Play Executed": "Play Executed",

    /**
     * value: "CallUUID Parameter Missing"
     * @const
     */
    "CallUUID Parameter Missing": "CallUUID Parameter Missing",

    /**
     * value: "Sounds Parameter Missing"
     * @const
     */
    "Sounds Parameter Missing": "Sounds Parameter Missing",

    /**
     * value: "Legs Parameter is Invalid"
     * @const
     */
    "Legs Parameter is Invalid": "Legs Parameter is Invalid",

    /**
     * value: "Length Parameter must be a positive integer"
     * @const
     */
    "Length Parameter must be a positive integer": "Length Parameter must be a positive integer",

    /**
     * value: "Sounds Parameter is Invalid"
     * @const
     */
    "Sounds Parameter is Invalid": "Sounds Parameter is Invalid",

    /**
     * value: "Play Failed -- Call not found"
     * @const
     */
    "Play Failed -- Call not found": "Play Failed -- Call not found",

    /**
     * value: "Play Failed"
     * @const
     */
    "Play Failed": "Play Failed"
};



export default PlayResponse;

