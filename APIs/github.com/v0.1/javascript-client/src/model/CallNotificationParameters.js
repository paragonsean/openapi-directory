/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CallNotificationParameters model module.
 * @module model/CallNotificationParameters
 * @version v0.1
 */
class CallNotificationParameters {
    /**
     * Constructs a new <code>CallNotificationParameters</code>.
     * @alias module:model/CallNotificationParameters
     * @param callStatus {module:model/CallNotificationParameters.CallStatusEnum} Call's current status
     * @param callUUID {String} Call's unique identifier, assigned by FreeSWITCH
     * @param callerName {String} Caller name set for the call
     * @param coreUUID {String} FreeSWITCH's instance unique identifier (Eqivo extension)
     * @param direction {module:model/CallNotificationParameters.DirectionEnum} Call's direction
     * @param from {String} Caller ID set for the call
     * @param restApiServer {String} Eqivo Rest API server which controls the call (Eqivo extension)
     * @param to {String} Called phone number
     */
    constructor(callStatus, callUUID, callerName, coreUUID, direction, from, restApiServer, to) { 
        
        CallNotificationParameters.initialize(this, callStatus, callUUID, callerName, coreUUID, direction, from, restApiServer, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, callStatus, callUUID, callerName, coreUUID, direction, from, restApiServer, to) { 
        obj['CallStatus'] = callStatus;
        obj['CallUUID'] = callUUID;
        obj['CallerName'] = callerName;
        obj['CoreUUID'] = coreUUID;
        obj['Direction'] = direction;
        obj['From'] = from;
        obj['RestApiServer'] = restApiServer;
        obj['To'] = to;
    }

    /**
     * Constructs a <code>CallNotificationParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallNotificationParameters} obj Optional instance to populate.
     * @return {module:model/CallNotificationParameters} The populated <code>CallNotificationParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallNotificationParameters();

            if (data.hasOwnProperty('ALegRequestUUID')) {
                obj['ALegRequestUUID'] = ApiClient.convertToType(data['ALegRequestUUID'], 'String');
            }
            if (data.hasOwnProperty('ALegUUID')) {
                obj['ALegUUID'] = ApiClient.convertToType(data['ALegUUID'], 'String');
            }
            if (data.hasOwnProperty('AnsweredBy')) {
                obj['AnsweredBy'] = ApiClient.convertToType(data['AnsweredBy'], 'String');
            }
            if (data.hasOwnProperty('CallStatus')) {
                obj['CallStatus'] = ApiClient.convertToType(data['CallStatus'], 'String');
            }
            if (data.hasOwnProperty('CallUUID')) {
                obj['CallUUID'] = ApiClient.convertToType(data['CallUUID'], 'String');
            }
            if (data.hasOwnProperty('CallerName')) {
                obj['CallerName'] = ApiClient.convertToType(data['CallerName'], 'String');
            }
            if (data.hasOwnProperty('CoreUUID')) {
                obj['CoreUUID'] = ApiClient.convertToType(data['CoreUUID'], 'String');
            }
            if (data.hasOwnProperty('Direction')) {
                obj['Direction'] = ApiClient.convertToType(data['Direction'], 'String');
            }
            if (data.hasOwnProperty('ForwardedFrom')) {
                obj['ForwardedFrom'] = ApiClient.convertToType(data['ForwardedFrom'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('MachineDetectionDuration')) {
                obj['MachineDetectionDuration'] = ApiClient.convertToType(data['MachineDetectionDuration'], 'Number');
            }
            if (data.hasOwnProperty('RestApiServer')) {
                obj['RestApiServer'] = ApiClient.convertToType(data['RestApiServer'], 'String');
            }
            if (data.hasOwnProperty('ScheduledHangupId')) {
                obj['ScheduledHangupId'] = ApiClient.convertToType(data['ScheduledHangupId'], 'String');
            }
            if (data.hasOwnProperty('To')) {
                obj['To'] = ApiClient.convertToType(data['To'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallNotificationParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallNotificationParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CallNotificationParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ALegRequestUUID'] && !(typeof data['ALegRequestUUID'] === 'string' || data['ALegRequestUUID'] instanceof String)) {
            throw new Error("Expected the field `ALegRequestUUID` to be a primitive type in the JSON string but got " + data['ALegRequestUUID']);
        }
        // ensure the json data is a string
        if (data['ALegUUID'] && !(typeof data['ALegUUID'] === 'string' || data['ALegUUID'] instanceof String)) {
            throw new Error("Expected the field `ALegUUID` to be a primitive type in the JSON string but got " + data['ALegUUID']);
        }
        // ensure the json data is a string
        if (data['AnsweredBy'] && !(typeof data['AnsweredBy'] === 'string' || data['AnsweredBy'] instanceof String)) {
            throw new Error("Expected the field `AnsweredBy` to be a primitive type in the JSON string but got " + data['AnsweredBy']);
        }
        // ensure the json data is a string
        if (data['CallStatus'] && !(typeof data['CallStatus'] === 'string' || data['CallStatus'] instanceof String)) {
            throw new Error("Expected the field `CallStatus` to be a primitive type in the JSON string but got " + data['CallStatus']);
        }
        // ensure the json data is a string
        if (data['CallUUID'] && !(typeof data['CallUUID'] === 'string' || data['CallUUID'] instanceof String)) {
            throw new Error("Expected the field `CallUUID` to be a primitive type in the JSON string but got " + data['CallUUID']);
        }
        // ensure the json data is a string
        if (data['CallerName'] && !(typeof data['CallerName'] === 'string' || data['CallerName'] instanceof String)) {
            throw new Error("Expected the field `CallerName` to be a primitive type in the JSON string but got " + data['CallerName']);
        }
        // ensure the json data is a string
        if (data['CoreUUID'] && !(typeof data['CoreUUID'] === 'string' || data['CoreUUID'] instanceof String)) {
            throw new Error("Expected the field `CoreUUID` to be a primitive type in the JSON string but got " + data['CoreUUID']);
        }
        // ensure the json data is a string
        if (data['Direction'] && !(typeof data['Direction'] === 'string' || data['Direction'] instanceof String)) {
            throw new Error("Expected the field `Direction` to be a primitive type in the JSON string but got " + data['Direction']);
        }
        // ensure the json data is a string
        if (data['ForwardedFrom'] && !(typeof data['ForwardedFrom'] === 'string' || data['ForwardedFrom'] instanceof String)) {
            throw new Error("Expected the field `ForwardedFrom` to be a primitive type in the JSON string but got " + data['ForwardedFrom']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        // ensure the json data is a string
        if (data['RestApiServer'] && !(typeof data['RestApiServer'] === 'string' || data['RestApiServer'] instanceof String)) {
            throw new Error("Expected the field `RestApiServer` to be a primitive type in the JSON string but got " + data['RestApiServer']);
        }
        // ensure the json data is a string
        if (data['ScheduledHangupId'] && !(typeof data['ScheduledHangupId'] === 'string' || data['ScheduledHangupId'] instanceof String)) {
            throw new Error("Expected the field `ScheduledHangupId` to be a primitive type in the JSON string but got " + data['ScheduledHangupId']);
        }
        // ensure the json data is a string
        if (data['To'] && !(typeof data['To'] === 'string' || data['To'] instanceof String)) {
            throw new Error("Expected the field `To` to be a primitive type in the JSON string but got " + data['To']);
        }

        return true;
    }


}

CallNotificationParameters.RequiredProperties = ["CallStatus", "CallUUID", "CallerName", "CoreUUID", "Direction", "From", "RestApiServer", "To"];

/**
 * A leg call request's unique identifier
 * @member {String} ALegRequestUUID
 */
CallNotificationParameters.prototype['ALegRequestUUID'] = undefined;

/**
 * A leg call's unique identifier, assigned by FreeSWITCH
 * @member {String} ALegUUID
 */
CallNotificationParameters.prototype['ALegUUID'] = undefined;

/**
 * Answering actor, when answering machine detection is enabled
 * @member {module:model/CallNotificationParameters.AnsweredByEnum} AnsweredBy
 */
CallNotificationParameters.prototype['AnsweredBy'] = undefined;

/**
 * Call's current status
 * @member {module:model/CallNotificationParameters.CallStatusEnum} CallStatus
 */
CallNotificationParameters.prototype['CallStatus'] = undefined;

/**
 * Call's unique identifier, assigned by FreeSWITCH
 * @member {String} CallUUID
 */
CallNotificationParameters.prototype['CallUUID'] = undefined;

/**
 * Caller name set for the call
 * @member {String} CallerName
 */
CallNotificationParameters.prototype['CallerName'] = undefined;

/**
 * FreeSWITCH's instance unique identifier (Eqivo extension)
 * @member {String} CoreUUID
 */
CallNotificationParameters.prototype['CoreUUID'] = undefined;

/**
 * Call's direction
 * @member {module:model/CallNotificationParameters.DirectionEnum} Direction
 */
CallNotificationParameters.prototype['Direction'] = undefined;

/**
 * Original call destination (before diversion)
 * @member {String} ForwardedFrom
 */
CallNotificationParameters.prototype['ForwardedFrom'] = undefined;

/**
 * Caller ID set for the call
 * @member {String} From
 */
CallNotificationParameters.prototype['From'] = undefined;

/**
 * Actual answering machine detection assessment duration (in milliseconds)
 * @member {Number} MachineDetectionDuration
 */
CallNotificationParameters.prototype['MachineDetectionDuration'] = undefined;

/**
 * Eqivo Rest API server which controls the call (Eqivo extension)
 * @member {String} RestApiServer
 */
CallNotificationParameters.prototype['RestApiServer'] = undefined;

/**
 * Unique identifier of the scheduled hangup task
 * @member {String} ScheduledHangupId
 */
CallNotificationParameters.prototype['ScheduledHangupId'] = undefined;

/**
 * Called phone number
 * @member {String} To
 */
CallNotificationParameters.prototype['To'] = undefined;





/**
 * Allowed values for the <code>AnsweredBy</code> property.
 * @enum {String}
 * @readonly
 */
CallNotificationParameters['AnsweredByEnum'] = {

    /**
     * value: "machine_start"
     * @const
     */
    "machine_start": "machine_start",

    /**
     * value: "machine_end_beep"
     * @const
     */
    "machine_end_beep": "machine_end_beep",

    /**
     * value: "machine_end_other"
     * @const
     */
    "machine_end_other": "machine_end_other",

    /**
     * value: "human"
     * @const
     */
    "human": "human",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>CallStatus</code> property.
 * @enum {String}
 * @readonly
 */
CallNotificationParameters['CallStatusEnum'] = {

    /**
     * value: "ringing"
     * @const
     */
    "ringing": "ringing",

    /**
     * value: "early-media"
     * @const
     */
    "early-media": "early-media",

    /**
     * value: "answer"
     * @const
     */
    "answer": "answer",

    /**
     * value: "in-progress"
     * @const
     */
    "in-progress": "in-progress",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};


/**
 * Allowed values for the <code>Direction</code> property.
 * @enum {String}
 * @readonly
 */
CallNotificationParameters['DirectionEnum'] = {

    /**
     * value: "inbound"
     * @const
     */
    "inbound": "inbound",

    /**
     * value: "outbound"
     * @const
     */
    "outbound": "outbound"
};



export default CallNotificationParameters;

