/**
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EqivoApi);
  }
}(this, function(expect, EqivoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EqivoApi.ConferenceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConferenceApi', function() {
    describe('v01ConferenceDeafPost', function() {
      it('should call v01ConferenceDeafPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceDeafPost
        //instance.v01ConferenceDeafPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceHangupPost', function() {
      it('should call v01ConferenceHangupPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceHangupPost
        //instance.v01ConferenceHangupPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceKickPost', function() {
      it('should call v01ConferenceKickPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceKickPost
        //instance.v01ConferenceKickPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceListMembersPost', function() {
      it('should call v01ConferenceListMembersPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceListMembersPost
        //instance.v01ConferenceListMembersPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceListPost', function() {
      it('should call v01ConferenceListPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceListPost
        //instance.v01ConferenceListPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceMutePost', function() {
      it('should call v01ConferenceMutePost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceMutePost
        //instance.v01ConferenceMutePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferencePlayPost', function() {
      it('should call v01ConferencePlayPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferencePlayPost
        //instance.v01ConferencePlayPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceRecordStartPost', function() {
      it('should call v01ConferenceRecordStartPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceRecordStartPost
        //instance.v01ConferenceRecordStartPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceRecordStopPost', function() {
      it('should call v01ConferenceRecordStopPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceRecordStopPost
        //instance.v01ConferenceRecordStopPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceSpeakPost', function() {
      it('should call v01ConferenceSpeakPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceSpeakPost
        //instance.v01ConferenceSpeakPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceUndeafPost', function() {
      it('should call v01ConferenceUndeafPost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceUndeafPost
        //instance.v01ConferenceUndeafPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v01ConferenceUnmutePost', function() {
      it('should call v01ConferenceUnmutePost successfully', function(done) {
        //uncomment below and update the code to test v01ConferenceUnmutePost
        //instance.v01ConferenceUnmutePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
