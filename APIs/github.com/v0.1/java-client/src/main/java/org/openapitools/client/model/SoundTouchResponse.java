/*
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SoundTouchResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:35.073755-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoundTouchResponse {
  /**
   * Response message
   */
  @JsonAdapter(MessageEnum.Adapter.class)
  public enum MessageEnum {
    SOUND_TOUCH_EXECUTED("SoundTouch Executed"),
    
    CALL_UUID_PARAMETER_MISSING("CallUUID Parameter Missing"),
    
    AUDIO_DIRECTION_PARAMETER_MUST_BE_IN_OR_OUT_("AudioDirection Parameter Must be 'in' or 'out'"),
    
    PITCH_SEMI_TONES_PARAMETER_MUST_BE_FLOAT("PitchSemiTones Parameter must be float"),
    
    PITCH_SEMI_TONES_PARAMETER_MUST_BE_BETWEEN_14_AND_14("PitchSemiTones Parameter must be between -14 and 14"),
    
    PITCH_OCTAVES_PARAMETER_MUST_BE_FLOAT("PitchOctaves Parameter must be float"),
    
    PITCH_OCTAVES_PARAMETER_MUST_BE_BETWEEN_1_AND_1("PitchOctaves Parameter must be between -1 and 1"),
    
    PITCH_PARAMETER_MUST_BE_FLOAT("Pitch Parameter must be float"),
    
    PITCH_PARAMETER_MUST_BE_0("Pitch Parameter must be > 0"),
    
    RATE_PARAMETER_MUST_BE_FLOAT("Rate Parameter must be float"),
    
    RATE_PARAMETER_MUST_BE_0("Rate Parameter must be > 0"),
    
    TEMPO_PARAMETER_MUST_BE_FLOAT("Tempo Parameter must be float"),
    
    TEMPO_PARAMETER_MUST_BE_0("Tempo Parameter must be > 0"),
    
    SOUND_TOUCH_FAILED_CALL_NOT_FOUND("SoundTouch Failed -- Call not found"),
    
    SOUND_TOUCH_FAILED("SoundTouch Failed");

    private String value;

    MessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageEnum fromValue(String value) {
      for (MessageEnum b : MessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private MessageEnum message;

  public static final String SERIALIZED_NAME_SUCCESS = "Success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public SoundTouchResponse() {
  }

  public SoundTouchResponse message(MessageEnum message) {
    this.message = message;
    return this;
  }

  /**
   * Response message
   * @return message
   */
  @javax.annotation.Nonnull
  public MessageEnum getMessage() {
    return message;
  }

  public void setMessage(MessageEnum message) {
    this.message = message;
  }


  public SoundTouchResponse success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Whether the request was successful or not
   * @return success
   */
  @javax.annotation.Nonnull
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoundTouchResponse soundTouchResponse = (SoundTouchResponse) o;
    return Objects.equals(this.message, soundTouchResponse.message) &&
        Objects.equals(this.success, soundTouchResponse.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoundTouchResponse {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Message");
    openapiFields.add("Success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Message");
    openapiRequiredFields.add("Success");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoundTouchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoundTouchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoundTouchResponse is not found in the empty JSON string", SoundTouchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoundTouchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoundTouchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SoundTouchResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      // validate the required field `Message`
      MessageEnum.validateJsonElement(jsonObj.get("Message"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoundTouchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoundTouchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoundTouchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoundTouchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SoundTouchResponse>() {
           @Override
           public void write(JsonWriter out, SoundTouchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoundTouchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoundTouchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoundTouchResponse
   * @throws IOException if the JSON string is invalid with respect to SoundTouchResponse
   */
  public static SoundTouchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoundTouchResponse.class);
  }

  /**
   * Convert an instance of SoundTouchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

