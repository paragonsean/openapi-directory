/*
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkCallResponse;
import org.openapitools.client.model.CallResponse;
import org.openapitools.client.model.CancelScheduledHangupResponse;
import org.openapitools.client.model.CancelScheduledPlayResponse;
import org.openapitools.client.model.GroupCallResponse;
import org.openapitools.client.model.HangupAllCallsResponse;
import org.openapitools.client.model.HangupCallResponse;
import org.openapitools.client.model.PlayResponse;
import org.openapitools.client.model.PlayStopResponse;
import org.openapitools.client.model.RecordStartResponse;
import org.openapitools.client.model.RecordStopResponse;
import org.openapitools.client.model.ScheduleHangupResponse;
import org.openapitools.client.model.SchedulePlayResponse;
import org.openapitools.client.model.SendDigitsResponse;
import org.openapitools.client.model.SoundTouchResponse;
import org.openapitools.client.model.SoundTouchStopResponse;
import org.openapitools.client.model.TransferCallResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v01BulkCallPost
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01BulkCallPostCall(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/BulkCall/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (answerUrl != null) {
            localVarFormParams.put("AnswerUrl", answerUrl);
        }

        if (callerName != null) {
            localVarFormParams.put("CallerName", callerName);
        }

        if (confirmKey != null) {
            localVarFormParams.put("ConfirmKey", confirmKey);
        }

        if (confirmSound != null) {
            localVarFormParams.put("ConfirmSound", confirmSound);
        }

        if (coreUUID != null) {
            localVarFormParams.put("CoreUUID", coreUUID);
        }

        if (delimiter != null) {
            localVarFormParams.put("Delimiter", delimiter);
        }

        if (extraDialString != null) {
            localVarFormParams.put("ExtraDialString", extraDialString);
        }

        if (from != null) {
            localVarFormParams.put("From", from);
        }

        if (gatewayCodecs != null) {
            localVarFormParams.put("GatewayCodecs", gatewayCodecs);
        }

        if (gatewayRetries != null) {
            localVarFormParams.put("GatewayRetries", gatewayRetries);
        }

        if (gatewayTimeouts != null) {
            localVarFormParams.put("GatewayTimeouts", gatewayTimeouts);
        }

        if (gateways != null) {
            localVarFormParams.put("Gateways", gateways);
        }

        if (hangupOnRing != null) {
            localVarFormParams.put("HangupOnRing", hangupOnRing);
        }

        if (hangupUrl != null) {
            localVarFormParams.put("HangupUrl", hangupUrl);
        }

        if (rejectCauses != null) {
            localVarFormParams.put("RejectCauses", rejectCauses);
        }

        if (ringUrl != null) {
            localVarFormParams.put("RingUrl", ringUrl);
        }

        if (sendDigits != null) {
            localVarFormParams.put("SendDigits", sendDigits);
        }

        if (sendOnPreanswer != null) {
            localVarFormParams.put("SendOnPreanswer", sendOnPreanswer);
        }

        if (timeLimit != null) {
            localVarFormParams.put("TimeLimit", timeLimit);
        }

        if (to != null) {
            localVarFormParams.put("To", to);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01BulkCallPostValidateBeforeCall(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'answerUrl' is set
        if (answerUrl == null) {
            throw new ApiException("Missing the required parameter 'answerUrl' when calling v01BulkCallPost(Async)");
        }

        // verify the required parameter 'delimiter' is set
        if (delimiter == null) {
            throw new ApiException("Missing the required parameter 'delimiter' when calling v01BulkCallPost(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling v01BulkCallPost(Async)");
        }

        // verify the required parameter 'gateways' is set
        if (gateways == null) {
            throw new ApiException("Missing the required parameter 'gateways' when calling v01BulkCallPost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling v01BulkCallPost(Async)");
        }

        return v01BulkCallPostCall(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit, _callback);

    }

    /**
     * /v0.1/BulkCall/
     * Initiates multiple concurrent outbound calls
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @return BulkCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public BulkCallResponse v01BulkCallPost(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit) throws ApiException {
        ApiResponse<BulkCallResponse> localVarResp = v01BulkCallPostWithHttpInfo(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit);
        return localVarResp.getData();
    }

    /**
     * /v0.1/BulkCall/
     * Initiates multiple concurrent outbound calls
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @return ApiResponse&lt;BulkCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkCallResponse> v01BulkCallPostWithHttpInfo(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit) throws ApiException {
        okhttp3.Call localVarCall = v01BulkCallPostValidateBeforeCall(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit, null);
        Type localVarReturnType = new TypeToken<BulkCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/BulkCall/ (asynchronously)
     * Initiates multiple concurrent outbound calls
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01BulkCallPostAsync(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback<BulkCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01BulkCallPostValidateBeforeCall(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit, _callback);
        Type localVarReturnType = new TypeToken<BulkCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01CallPost
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param asyncAMD When set to &#x60;true&#x60;, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension) (optional, default to false)
     * @param asyncAmdStatusCallback Fully qualified URL to which the answering machine detection result will be sent. &#x60;AnsweredBy&#x60; and &#x60;MachineDetectionDuration&#x60; are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension) (optional)
     * @param asyncAmdStatusCallbackMethod HTTP method to be used when answering machine detection is completed (an Eqivo extension) (optional, default to POST)
     * @param callerName Caller Name to be set for the call (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param machineDetection Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension) (optional)
     * @param machineDetectionSilenceTimeout Initial silence threshold (in milliseconds, an Eqivo extension) (optional, default to 5000)
     * @param machineDetectionSpeechEndThreshold Silence threshold (in milliseconds, an Eqivo extension) (optional, default to 1200)
     * @param machineDetectionSpeechThreshold Speech activity/utterance threshold (in milliseconds, an Eqivo extension) (optional, default to 2400)
     * @param machineDetectionTimeout Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension) (optional, default to 30)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01CallPostCall(String answerUrl, String from, String gateways, String to, Boolean asyncAMD, String asyncAmdStatusCallback, String asyncAmdStatusCallbackMethod, String callerName, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/Call/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (answerUrl != null) {
            localVarFormParams.put("AnswerUrl", answerUrl);
        }

        if (asyncAMD != null) {
            localVarFormParams.put("AsyncAMD", asyncAMD);
        }

        if (asyncAmdStatusCallback != null) {
            localVarFormParams.put("AsyncAmdStatusCallback", asyncAmdStatusCallback);
        }

        if (asyncAmdStatusCallbackMethod != null) {
            localVarFormParams.put("AsyncAmdStatusCallbackMethod", asyncAmdStatusCallbackMethod);
        }

        if (callerName != null) {
            localVarFormParams.put("CallerName", callerName);
        }

        if (coreUUID != null) {
            localVarFormParams.put("CoreUUID", coreUUID);
        }

        if (extraDialString != null) {
            localVarFormParams.put("ExtraDialString", extraDialString);
        }

        if (from != null) {
            localVarFormParams.put("From", from);
        }

        if (gatewayCodecs != null) {
            localVarFormParams.put("GatewayCodecs", gatewayCodecs);
        }

        if (gatewayRetries != null) {
            localVarFormParams.put("GatewayRetries", gatewayRetries);
        }

        if (gatewayTimeouts != null) {
            localVarFormParams.put("GatewayTimeouts", gatewayTimeouts);
        }

        if (gateways != null) {
            localVarFormParams.put("Gateways", gateways);
        }

        if (hangupOnRing != null) {
            localVarFormParams.put("HangupOnRing", hangupOnRing);
        }

        if (hangupUrl != null) {
            localVarFormParams.put("HangupUrl", hangupUrl);
        }

        if (machineDetection != null) {
            localVarFormParams.put("MachineDetection", machineDetection);
        }

        if (machineDetectionSilenceTimeout != null) {
            localVarFormParams.put("MachineDetectionSilenceTimeout", machineDetectionSilenceTimeout);
        }

        if (machineDetectionSpeechEndThreshold != null) {
            localVarFormParams.put("MachineDetectionSpeechEndThreshold", machineDetectionSpeechEndThreshold);
        }

        if (machineDetectionSpeechThreshold != null) {
            localVarFormParams.put("MachineDetectionSpeechThreshold", machineDetectionSpeechThreshold);
        }

        if (machineDetectionTimeout != null) {
            localVarFormParams.put("MachineDetectionTimeout", machineDetectionTimeout);
        }

        if (ringUrl != null) {
            localVarFormParams.put("RingUrl", ringUrl);
        }

        if (sendDigits != null) {
            localVarFormParams.put("SendDigits", sendDigits);
        }

        if (sendOnPreanswer != null) {
            localVarFormParams.put("SendOnPreanswer", sendOnPreanswer);
        }

        if (timeLimit != null) {
            localVarFormParams.put("TimeLimit", timeLimit);
        }

        if (to != null) {
            localVarFormParams.put("To", to);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01CallPostValidateBeforeCall(String answerUrl, String from, String gateways, String to, Boolean asyncAMD, String asyncAmdStatusCallback, String asyncAmdStatusCallbackMethod, String callerName, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'answerUrl' is set
        if (answerUrl == null) {
            throw new ApiException("Missing the required parameter 'answerUrl' when calling v01CallPost(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling v01CallPost(Async)");
        }

        // verify the required parameter 'gateways' is set
        if (gateways == null) {
            throw new ApiException("Missing the required parameter 'gateways' when calling v01CallPost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling v01CallPost(Async)");
        }

        return v01CallPostCall(answerUrl, from, gateways, to, asyncAMD, asyncAmdStatusCallback, asyncAmdStatusCallbackMethod, callerName, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, ringUrl, sendDigits, sendOnPreanswer, timeLimit, _callback);

    }

    /**
     * /v0.1/Call/
     * Initiates an outbound call
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param asyncAMD When set to &#x60;true&#x60;, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension) (optional, default to false)
     * @param asyncAmdStatusCallback Fully qualified URL to which the answering machine detection result will be sent. &#x60;AnsweredBy&#x60; and &#x60;MachineDetectionDuration&#x60; are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension) (optional)
     * @param asyncAmdStatusCallbackMethod HTTP method to be used when answering machine detection is completed (an Eqivo extension) (optional, default to POST)
     * @param callerName Caller Name to be set for the call (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param machineDetection Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension) (optional)
     * @param machineDetectionSilenceTimeout Initial silence threshold (in milliseconds, an Eqivo extension) (optional, default to 5000)
     * @param machineDetectionSpeechEndThreshold Silence threshold (in milliseconds, an Eqivo extension) (optional, default to 1200)
     * @param machineDetectionSpeechThreshold Speech activity/utterance threshold (in milliseconds, an Eqivo extension) (optional, default to 2400)
     * @param machineDetectionTimeout Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension) (optional, default to 30)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @return CallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public CallResponse v01CallPost(String answerUrl, String from, String gateways, String to, Boolean asyncAMD, String asyncAmdStatusCallback, String asyncAmdStatusCallbackMethod, String callerName, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit) throws ApiException {
        ApiResponse<CallResponse> localVarResp = v01CallPostWithHttpInfo(answerUrl, from, gateways, to, asyncAMD, asyncAmdStatusCallback, asyncAmdStatusCallbackMethod, callerName, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, ringUrl, sendDigits, sendOnPreanswer, timeLimit);
        return localVarResp.getData();
    }

    /**
     * /v0.1/Call/
     * Initiates an outbound call
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param asyncAMD When set to &#x60;true&#x60;, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension) (optional, default to false)
     * @param asyncAmdStatusCallback Fully qualified URL to which the answering machine detection result will be sent. &#x60;AnsweredBy&#x60; and &#x60;MachineDetectionDuration&#x60; are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension) (optional)
     * @param asyncAmdStatusCallbackMethod HTTP method to be used when answering machine detection is completed (an Eqivo extension) (optional, default to POST)
     * @param callerName Caller Name to be set for the call (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param machineDetection Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension) (optional)
     * @param machineDetectionSilenceTimeout Initial silence threshold (in milliseconds, an Eqivo extension) (optional, default to 5000)
     * @param machineDetectionSpeechEndThreshold Silence threshold (in milliseconds, an Eqivo extension) (optional, default to 1200)
     * @param machineDetectionSpeechThreshold Speech activity/utterance threshold (in milliseconds, an Eqivo extension) (optional, default to 2400)
     * @param machineDetectionTimeout Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension) (optional, default to 30)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @return ApiResponse&lt;CallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallResponse> v01CallPostWithHttpInfo(String answerUrl, String from, String gateways, String to, Boolean asyncAMD, String asyncAmdStatusCallback, String asyncAmdStatusCallbackMethod, String callerName, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit) throws ApiException {
        okhttp3.Call localVarCall = v01CallPostValidateBeforeCall(answerUrl, from, gateways, to, asyncAMD, asyncAmdStatusCallback, asyncAmdStatusCallbackMethod, callerName, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, ringUrl, sendDigits, sendOnPreanswer, timeLimit, null);
        Type localVarReturnType = new TypeToken<CallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/Call/ (asynchronously)
     * Initiates an outbound call
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param asyncAMD When set to &#x60;true&#x60;, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension) (optional, default to false)
     * @param asyncAmdStatusCallback Fully qualified URL to which the answering machine detection result will be sent. &#x60;AnsweredBy&#x60; and &#x60;MachineDetectionDuration&#x60; are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension) (optional)
     * @param asyncAmdStatusCallbackMethod HTTP method to be used when answering machine detection is completed (an Eqivo extension) (optional, default to POST)
     * @param callerName Caller Name to be set for the call (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param machineDetection Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension) (optional)
     * @param machineDetectionSilenceTimeout Initial silence threshold (in milliseconds, an Eqivo extension) (optional, default to 5000)
     * @param machineDetectionSpeechEndThreshold Silence threshold (in milliseconds, an Eqivo extension) (optional, default to 1200)
     * @param machineDetectionSpeechThreshold Speech activity/utterance threshold (in milliseconds, an Eqivo extension) (optional, default to 2400)
     * @param machineDetectionTimeout Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension) (optional, default to 30)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01CallPostAsync(String answerUrl, String from, String gateways, String to, Boolean asyncAMD, String asyncAmdStatusCallback, String asyncAmdStatusCallbackMethod, String callerName, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String machineDetection, Integer machineDetectionSilenceTimeout, Integer machineDetectionSpeechEndThreshold, Integer machineDetectionSpeechThreshold, Integer machineDetectionTimeout, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback<CallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01CallPostValidateBeforeCall(answerUrl, from, gateways, to, asyncAMD, asyncAmdStatusCallback, asyncAmdStatusCallbackMethod, callerName, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, ringUrl, sendDigits, sendOnPreanswer, timeLimit, _callback);
        Type localVarReturnType = new TypeToken<CallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01CancelScheduledHangupPost
     * @param schedHangupId Unique identifier returned when scheduled hangup was originally requested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01CancelScheduledHangupPostCall(String schedHangupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/CancelScheduledHangup/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schedHangupId != null) {
            localVarFormParams.put("SchedHangupId", schedHangupId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01CancelScheduledHangupPostValidateBeforeCall(String schedHangupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schedHangupId' is set
        if (schedHangupId == null) {
            throw new ApiException("Missing the required parameter 'schedHangupId' when calling v01CancelScheduledHangupPost(Async)");
        }

        return v01CancelScheduledHangupPostCall(schedHangupId, _callback);

    }

    /**
     * /v0.1/CancelScheduledHangup/
     * Cancels a scheduled hangup for a call
     * @param schedHangupId Unique identifier returned when scheduled hangup was originally requested (required)
     * @return CancelScheduledHangupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public CancelScheduledHangupResponse v01CancelScheduledHangupPost(String schedHangupId) throws ApiException {
        ApiResponse<CancelScheduledHangupResponse> localVarResp = v01CancelScheduledHangupPostWithHttpInfo(schedHangupId);
        return localVarResp.getData();
    }

    /**
     * /v0.1/CancelScheduledHangup/
     * Cancels a scheduled hangup for a call
     * @param schedHangupId Unique identifier returned when scheduled hangup was originally requested (required)
     * @return ApiResponse&lt;CancelScheduledHangupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelScheduledHangupResponse> v01CancelScheduledHangupPostWithHttpInfo(String schedHangupId) throws ApiException {
        okhttp3.Call localVarCall = v01CancelScheduledHangupPostValidateBeforeCall(schedHangupId, null);
        Type localVarReturnType = new TypeToken<CancelScheduledHangupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/CancelScheduledHangup/ (asynchronously)
     * Cancels a scheduled hangup for a call
     * @param schedHangupId Unique identifier returned when scheduled hangup was originally requested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01CancelScheduledHangupPostAsync(String schedHangupId, final ApiCallback<CancelScheduledHangupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01CancelScheduledHangupPostValidateBeforeCall(schedHangupId, _callback);
        Type localVarReturnType = new TypeToken<CancelScheduledHangupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01CancelScheduledPlayPost
     * @param schedPlayId Unique identifier returned when scheduled playback was originally requested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01CancelScheduledPlayPostCall(String schedPlayId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/CancelScheduledPlay/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (schedPlayId != null) {
            localVarFormParams.put("SchedPlayId", schedPlayId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01CancelScheduledPlayPostValidateBeforeCall(String schedPlayId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schedPlayId' is set
        if (schedPlayId == null) {
            throw new ApiException("Missing the required parameter 'schedPlayId' when calling v01CancelScheduledPlayPost(Async)");
        }

        return v01CancelScheduledPlayPostCall(schedPlayId, _callback);

    }

    /**
     * /v0.1/CancelScheduledPlay/
     * Cancels a scheduled playback request
     * @param schedPlayId Unique identifier returned when scheduled playback was originally requested (required)
     * @return CancelScheduledPlayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public CancelScheduledPlayResponse v01CancelScheduledPlayPost(String schedPlayId) throws ApiException {
        ApiResponse<CancelScheduledPlayResponse> localVarResp = v01CancelScheduledPlayPostWithHttpInfo(schedPlayId);
        return localVarResp.getData();
    }

    /**
     * /v0.1/CancelScheduledPlay/
     * Cancels a scheduled playback request
     * @param schedPlayId Unique identifier returned when scheduled playback was originally requested (required)
     * @return ApiResponse&lt;CancelScheduledPlayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelScheduledPlayResponse> v01CancelScheduledPlayPostWithHttpInfo(String schedPlayId) throws ApiException {
        okhttp3.Call localVarCall = v01CancelScheduledPlayPostValidateBeforeCall(schedPlayId, null);
        Type localVarReturnType = new TypeToken<CancelScheduledPlayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/CancelScheduledPlay/ (asynchronously)
     * Cancels a scheduled playback request
     * @param schedPlayId Unique identifier returned when scheduled playback was originally requested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01CancelScheduledPlayPostAsync(String schedPlayId, final ApiCallback<CancelScheduledPlayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01CancelScheduledPlayPostValidateBeforeCall(schedPlayId, _callback);
        Type localVarReturnType = new TypeToken<CancelScheduledPlayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01GroupCallPost
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01GroupCallPostCall(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/GroupCall/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (answerUrl != null) {
            localVarFormParams.put("AnswerUrl", answerUrl);
        }

        if (callerName != null) {
            localVarFormParams.put("CallerName", callerName);
        }

        if (confirmKey != null) {
            localVarFormParams.put("ConfirmKey", confirmKey);
        }

        if (confirmSound != null) {
            localVarFormParams.put("ConfirmSound", confirmSound);
        }

        if (coreUUID != null) {
            localVarFormParams.put("CoreUUID", coreUUID);
        }

        if (delimiter != null) {
            localVarFormParams.put("Delimiter", delimiter);
        }

        if (extraDialString != null) {
            localVarFormParams.put("ExtraDialString", extraDialString);
        }

        if (from != null) {
            localVarFormParams.put("From", from);
        }

        if (gatewayCodecs != null) {
            localVarFormParams.put("GatewayCodecs", gatewayCodecs);
        }

        if (gatewayRetries != null) {
            localVarFormParams.put("GatewayRetries", gatewayRetries);
        }

        if (gatewayTimeouts != null) {
            localVarFormParams.put("GatewayTimeouts", gatewayTimeouts);
        }

        if (gateways != null) {
            localVarFormParams.put("Gateways", gateways);
        }

        if (hangupOnRing != null) {
            localVarFormParams.put("HangupOnRing", hangupOnRing);
        }

        if (hangupUrl != null) {
            localVarFormParams.put("HangupUrl", hangupUrl);
        }

        if (rejectCauses != null) {
            localVarFormParams.put("RejectCauses", rejectCauses);
        }

        if (ringUrl != null) {
            localVarFormParams.put("RingUrl", ringUrl);
        }

        if (sendDigits != null) {
            localVarFormParams.put("SendDigits", sendDigits);
        }

        if (sendOnPreanswer != null) {
            localVarFormParams.put("SendOnPreanswer", sendOnPreanswer);
        }

        if (timeLimit != null) {
            localVarFormParams.put("TimeLimit", timeLimit);
        }

        if (to != null) {
            localVarFormParams.put("To", to);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01GroupCallPostValidateBeforeCall(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'answerUrl' is set
        if (answerUrl == null) {
            throw new ApiException("Missing the required parameter 'answerUrl' when calling v01GroupCallPost(Async)");
        }

        // verify the required parameter 'delimiter' is set
        if (delimiter == null) {
            throw new ApiException("Missing the required parameter 'delimiter' when calling v01GroupCallPost(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling v01GroupCallPost(Async)");
        }

        // verify the required parameter 'gateways' is set
        if (gateways == null) {
            throw new ApiException("Missing the required parameter 'gateways' when calling v01GroupCallPost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling v01GroupCallPost(Async)");
        }

        return v01GroupCallPostCall(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit, _callback);

    }

    /**
     * /v0.1/GroupCall/
     * Initiate multiple racing outbound calls
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @return GroupCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public GroupCallResponse v01GroupCallPost(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit) throws ApiException {
        ApiResponse<GroupCallResponse> localVarResp = v01GroupCallPostWithHttpInfo(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit);
        return localVarResp.getData();
    }

    /**
     * /v0.1/GroupCall/
     * Initiate multiple racing outbound calls
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @return ApiResponse&lt;GroupCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupCallResponse> v01GroupCallPostWithHttpInfo(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit) throws ApiException {
        okhttp3.Call localVarCall = v01GroupCallPostValidateBeforeCall(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit, null);
        Type localVarReturnType = new TypeToken<GroupCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/GroupCall/ (asynchronously)
     * Initiate multiple racing outbound calls
     * @param answerUrl Fully qualified URL which will provide the RestXML once the call connects (required)
     * @param delimiter Any character, except &#x60;/&#x60; and &#x60;,&#x60;, which will be used as a separator within several parameters (required)
     * @param from Phone number to be used as Caller ID (required)
     * @param gateways Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover) (required)
     * @param to Phone number to be called (required)
     * @param callerName Caller Name to be set for the call (optional)
     * @param confirmKey DTMF tone the called party must send to accept the call (optional)
     * @param confirmSound Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered (optional)
     * @param coreUUID Core UUID of the desired FreeSWITCH instance (an Eqivo extension) (optional)
     * @param extraDialString Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call. (optional)
     * @param gatewayCodecs List of codec(s) to be used for each gateway. Enclose codec groups in single quotes (optional)
     * @param gatewayRetries List of maximum retry counts for each gateway (optional)
     * @param gatewayTimeouts List of maximum timeout amounts (in seconds) for each gateway (optional)
     * @param hangupOnRing Schedules the call&#39;s hangup at a given time offset (in seconds) after the destination starts ringing (optional)
     * @param hangupUrl Fully qualified URL to which the call hangup notification will be POSTed. &#x60;HangupCause&#x60; is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param rejectCauses Comma separated reject causes (optional, default to NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED)
     * @param ringUrl Fully qualified URL to which the call ringing notification will be POSTed. &#x60;RequestUUID&#x60; and &#x60;CallUUID&#x60; is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (optional)
     * @param sendDigits DTMF tones to be sent when the call is answered. Each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (optional)
     * @param sendOnPreanswer When set to &#x60;true&#x60;, DTMF tones will be sent as early media rather than when the call is answered (optional)
     * @param timeLimit Schedules the call&#39;s hangup at a given time offset (in seconds) after the call is answered (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01GroupCallPostAsync(String answerUrl, String delimiter, String from, String gateways, String to, String callerName, String confirmKey, String confirmSound, String coreUUID, String extraDialString, String gatewayCodecs, String gatewayRetries, String gatewayTimeouts, Integer hangupOnRing, String hangupUrl, String rejectCauses, String ringUrl, String sendDigits, Boolean sendOnPreanswer, Integer timeLimit, final ApiCallback<GroupCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01GroupCallPostValidateBeforeCall(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit, _callback);
        Type localVarReturnType = new TypeToken<GroupCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01HangupAllCallsPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01HangupAllCallsPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/HangupAllCalls/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01HangupAllCallsPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v01HangupAllCallsPostCall(_callback);

    }

    /**
     * /v0.1/HangupAllCalls/
     * Hangs up all established calls
     * @return HangupAllCallsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public HangupAllCallsResponse v01HangupAllCallsPost() throws ApiException {
        ApiResponse<HangupAllCallsResponse> localVarResp = v01HangupAllCallsPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * /v0.1/HangupAllCalls/
     * Hangs up all established calls
     * @return ApiResponse&lt;HangupAllCallsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HangupAllCallsResponse> v01HangupAllCallsPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v01HangupAllCallsPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<HangupAllCallsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/HangupAllCalls/ (asynchronously)
     * Hangs up all established calls
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01HangupAllCallsPostAsync(final ApiCallback<HangupAllCallsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01HangupAllCallsPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<HangupAllCallsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01HangupCallPost
     * @param callUUID Unique identifier of the call (when established); this parameter is mutually exclusive with RequestUUID (optional)
     * @param requestUUID Unique identifier of the API request (when the call is not established yet); this parameter is mutually exclusive with CallUUID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01HangupCallPostCall(String callUUID, String requestUUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/HangupCall/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (requestUUID != null) {
            localVarFormParams.put("RequestUUID", requestUUID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01HangupCallPostValidateBeforeCall(String callUUID, String requestUUID, final ApiCallback _callback) throws ApiException {
        return v01HangupCallPostCall(callUUID, requestUUID, _callback);

    }

    /**
     * /v0.1/HangupCall/
     * Hangs up a specific call
     * @param callUUID Unique identifier of the call (when established); this parameter is mutually exclusive with RequestUUID (optional)
     * @param requestUUID Unique identifier of the API request (when the call is not established yet); this parameter is mutually exclusive with CallUUID (optional)
     * @return HangupCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public HangupCallResponse v01HangupCallPost(String callUUID, String requestUUID) throws ApiException {
        ApiResponse<HangupCallResponse> localVarResp = v01HangupCallPostWithHttpInfo(callUUID, requestUUID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/HangupCall/
     * Hangs up a specific call
     * @param callUUID Unique identifier of the call (when established); this parameter is mutually exclusive with RequestUUID (optional)
     * @param requestUUID Unique identifier of the API request (when the call is not established yet); this parameter is mutually exclusive with CallUUID (optional)
     * @return ApiResponse&lt;HangupCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HangupCallResponse> v01HangupCallPostWithHttpInfo(String callUUID, String requestUUID) throws ApiException {
        okhttp3.Call localVarCall = v01HangupCallPostValidateBeforeCall(callUUID, requestUUID, null);
        Type localVarReturnType = new TypeToken<HangupCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/HangupCall/ (asynchronously)
     * Hangs up a specific call
     * @param callUUID Unique identifier of the call (when established); this parameter is mutually exclusive with RequestUUID (optional)
     * @param requestUUID Unique identifier of the API request (when the call is not established yet); this parameter is mutually exclusive with CallUUID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01HangupCallPostAsync(String callUUID, String requestUUID, final ApiCallback<HangupCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01HangupCallPostValidateBeforeCall(callUUID, requestUUID, _callback);
        Type localVarReturnType = new TypeToken<HangupCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01PlayPost
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01PlayPostCall(String callUUID, String sounds, String legs, Integer length, Boolean loop, Boolean mix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/Play/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (legs != null) {
            localVarFormParams.put("Legs", legs);
        }

        if (length != null) {
            localVarFormParams.put("Length", length);
        }

        if (loop != null) {
            localVarFormParams.put("Loop", loop);
        }

        if (mix != null) {
            localVarFormParams.put("Mix", mix);
        }

        if (sounds != null) {
            localVarFormParams.put("Sounds", sounds);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01PlayPostValidateBeforeCall(String callUUID, String sounds, String legs, Integer length, Boolean loop, Boolean mix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01PlayPost(Async)");
        }

        // verify the required parameter 'sounds' is set
        if (sounds == null) {
            throw new ApiException("Missing the required parameter 'sounds' when calling v01PlayPost(Async)");
        }

        return v01PlayPostCall(callUUID, sounds, legs, length, loop, mix, _callback);

    }

    /**
     * /v0.1/Play/
     * Plays media into a live call
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @return PlayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public PlayResponse v01PlayPost(String callUUID, String sounds, String legs, Integer length, Boolean loop, Boolean mix) throws ApiException {
        ApiResponse<PlayResponse> localVarResp = v01PlayPostWithHttpInfo(callUUID, sounds, legs, length, loop, mix);
        return localVarResp.getData();
    }

    /**
     * /v0.1/Play/
     * Plays media into a live call
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @return ApiResponse&lt;PlayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayResponse> v01PlayPostWithHttpInfo(String callUUID, String sounds, String legs, Integer length, Boolean loop, Boolean mix) throws ApiException {
        okhttp3.Call localVarCall = v01PlayPostValidateBeforeCall(callUUID, sounds, legs, length, loop, mix, null);
        Type localVarReturnType = new TypeToken<PlayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/Play/ (asynchronously)
     * Plays media into a live call
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01PlayPostAsync(String callUUID, String sounds, String legs, Integer length, Boolean loop, Boolean mix, final ApiCallback<PlayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01PlayPostValidateBeforeCall(callUUID, sounds, legs, length, loop, mix, _callback);
        Type localVarReturnType = new TypeToken<PlayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01PlayStopPost
     * @param callUUID Unique identifier of the call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01PlayStopPostCall(String callUUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/PlayStop/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01PlayStopPostValidateBeforeCall(String callUUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01PlayStopPost(Async)");
        }

        return v01PlayStopPostCall(callUUID, _callback);

    }

    /**
     * /v0.1/PlayStop/
     * Interrupts media playback on a given call
     * @param callUUID Unique identifier of the call (required)
     * @return PlayStopResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public PlayStopResponse v01PlayStopPost(String callUUID) throws ApiException {
        ApiResponse<PlayStopResponse> localVarResp = v01PlayStopPostWithHttpInfo(callUUID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/PlayStop/
     * Interrupts media playback on a given call
     * @param callUUID Unique identifier of the call (required)
     * @return ApiResponse&lt;PlayStopResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayStopResponse> v01PlayStopPostWithHttpInfo(String callUUID) throws ApiException {
        okhttp3.Call localVarCall = v01PlayStopPostValidateBeforeCall(callUUID, null);
        Type localVarReturnType = new TypeToken<PlayStopResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/PlayStop/ (asynchronously)
     * Interrupts media playback on a given call
     * @param callUUID Unique identifier of the call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01PlayStopPostAsync(String callUUID, final ApiCallback<PlayStopResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01PlayStopPostValidateBeforeCall(callUUID, _callback);
        Type localVarReturnType = new TypeToken<PlayStopResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01RecordStartPost
     * @param callUUID Unique identifier of the call to be recorded (optional)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @param timeLimit Maximum recording length, in seconds (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01RecordStartPostCall(String callUUID, String fileFormat, String fileName, String filePath, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/RecordStart/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (fileFormat != null) {
            localVarFormParams.put("FileFormat", fileFormat);
        }

        if (fileName != null) {
            localVarFormParams.put("FileName", fileName);
        }

        if (filePath != null) {
            localVarFormParams.put("FilePath", filePath);
        }

        if (timeLimit != null) {
            localVarFormParams.put("TimeLimit", timeLimit);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01RecordStartPostValidateBeforeCall(String callUUID, String fileFormat, String fileName, String filePath, Integer timeLimit, final ApiCallback _callback) throws ApiException {
        return v01RecordStartPostCall(callUUID, fileFormat, fileName, filePath, timeLimit, _callback);

    }

    /**
     * /v0.1/RecordStart/
     * Initiates recording of a given call
     * @param callUUID Unique identifier of the call to be recorded (optional)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @param timeLimit Maximum recording length, in seconds (optional, default to 60)
     * @return RecordStartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public RecordStartResponse v01RecordStartPost(String callUUID, String fileFormat, String fileName, String filePath, Integer timeLimit) throws ApiException {
        ApiResponse<RecordStartResponse> localVarResp = v01RecordStartPostWithHttpInfo(callUUID, fileFormat, fileName, filePath, timeLimit);
        return localVarResp.getData();
    }

    /**
     * /v0.1/RecordStart/
     * Initiates recording of a given call
     * @param callUUID Unique identifier of the call to be recorded (optional)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @param timeLimit Maximum recording length, in seconds (optional, default to 60)
     * @return ApiResponse&lt;RecordStartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecordStartResponse> v01RecordStartPostWithHttpInfo(String callUUID, String fileFormat, String fileName, String filePath, Integer timeLimit) throws ApiException {
        okhttp3.Call localVarCall = v01RecordStartPostValidateBeforeCall(callUUID, fileFormat, fileName, filePath, timeLimit, null);
        Type localVarReturnType = new TypeToken<RecordStartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/RecordStart/ (asynchronously)
     * Initiates recording of a given call
     * @param callUUID Unique identifier of the call to be recorded (optional)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @param timeLimit Maximum recording length, in seconds (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01RecordStartPostAsync(String callUUID, String fileFormat, String fileName, String filePath, Integer timeLimit, final ApiCallback<RecordStartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01RecordStartPostValidateBeforeCall(callUUID, fileFormat, fileName, filePath, timeLimit, _callback);
        Type localVarReturnType = new TypeToken<RecordStartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01RecordStopPost
     * @param callUUID Unique identifier of the call (required)
     * @param recordFile Full path to recording file, as returned by RecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01RecordStopPostCall(String callUUID, String recordFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/RecordStop/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (recordFile != null) {
            localVarFormParams.put("RecordFile", recordFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01RecordStopPostValidateBeforeCall(String callUUID, String recordFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01RecordStopPost(Async)");
        }

        // verify the required parameter 'recordFile' is set
        if (recordFile == null) {
            throw new ApiException("Missing the required parameter 'recordFile' when calling v01RecordStopPost(Async)");
        }

        return v01RecordStopPostCall(callUUID, recordFile, _callback);

    }

    /**
     * /v0.1/RecordStop/
     * Stops the recording of a given call
     * @param callUUID Unique identifier of the call (required)
     * @param recordFile Full path to recording file, as returned by RecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @return RecordStopResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public RecordStopResponse v01RecordStopPost(String callUUID, String recordFile) throws ApiException {
        ApiResponse<RecordStopResponse> localVarResp = v01RecordStopPostWithHttpInfo(callUUID, recordFile);
        return localVarResp.getData();
    }

    /**
     * /v0.1/RecordStop/
     * Stops the recording of a given call
     * @param callUUID Unique identifier of the call (required)
     * @param recordFile Full path to recording file, as returned by RecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @return ApiResponse&lt;RecordStopResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecordStopResponse> v01RecordStopPostWithHttpInfo(String callUUID, String recordFile) throws ApiException {
        okhttp3.Call localVarCall = v01RecordStopPostValidateBeforeCall(callUUID, recordFile, null);
        Type localVarReturnType = new TypeToken<RecordStopResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/RecordStop/ (asynchronously)
     * Stops the recording of a given call
     * @param callUUID Unique identifier of the call (required)
     * @param recordFile Full path to recording file, as returned by RecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01RecordStopPostAsync(String callUUID, String recordFile, final ApiCallback<RecordStopResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01RecordStopPostValidateBeforeCall(callUUID, recordFile, _callback);
        Type localVarReturnType = new TypeToken<RecordStopResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ScheduleHangupPost
     * @param callUUID Unique identifier of the call (required)
     * @param time Time (in seconds) after which the call in question will be hung up (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ScheduleHangupPostCall(String callUUID, Integer time, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ScheduleHangup/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (time != null) {
            localVarFormParams.put("Time", time);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ScheduleHangupPostValidateBeforeCall(String callUUID, Integer time, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01ScheduleHangupPost(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling v01ScheduleHangupPost(Async)");
        }

        return v01ScheduleHangupPostCall(callUUID, time, _callback);

    }

    /**
     * /v0.1/ScheduleHangup/
     * Schedules a hangup for a specific call
     * @param callUUID Unique identifier of the call (required)
     * @param time Time (in seconds) after which the call in question will be hung up (required)
     * @return ScheduleHangupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleHangupResponse v01ScheduleHangupPost(String callUUID, Integer time) throws ApiException {
        ApiResponse<ScheduleHangupResponse> localVarResp = v01ScheduleHangupPostWithHttpInfo(callUUID, time);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ScheduleHangup/
     * Schedules a hangup for a specific call
     * @param callUUID Unique identifier of the call (required)
     * @param time Time (in seconds) after which the call in question will be hung up (required)
     * @return ApiResponse&lt;ScheduleHangupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleHangupResponse> v01ScheduleHangupPostWithHttpInfo(String callUUID, Integer time) throws ApiException {
        okhttp3.Call localVarCall = v01ScheduleHangupPostValidateBeforeCall(callUUID, time, null);
        Type localVarReturnType = new TypeToken<ScheduleHangupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ScheduleHangup/ (asynchronously)
     * Schedules a hangup for a specific call
     * @param callUUID Unique identifier of the call (required)
     * @param time Time (in seconds) after which the call in question will be hung up (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ScheduleHangupPostAsync(String callUUID, Integer time, final ApiCallback<ScheduleHangupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ScheduleHangupPostValidateBeforeCall(callUUID, time, _callback);
        Type localVarReturnType = new TypeToken<ScheduleHangupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01SchedulePlayPost
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param time Time (in seconds) after which the media will be playedback (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SchedulePlayPostCall(String callUUID, String sounds, Integer time, String legs, Integer length, Boolean loop, Boolean mix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/SchedulePlay/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (legs != null) {
            localVarFormParams.put("Legs", legs);
        }

        if (length != null) {
            localVarFormParams.put("Length", length);
        }

        if (loop != null) {
            localVarFormParams.put("Loop", loop);
        }

        if (mix != null) {
            localVarFormParams.put("Mix", mix);
        }

        if (sounds != null) {
            localVarFormParams.put("Sounds", sounds);
        }

        if (time != null) {
            localVarFormParams.put("Time", time);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01SchedulePlayPostValidateBeforeCall(String callUUID, String sounds, Integer time, String legs, Integer length, Boolean loop, Boolean mix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01SchedulePlayPost(Async)");
        }

        // verify the required parameter 'sounds' is set
        if (sounds == null) {
            throw new ApiException("Missing the required parameter 'sounds' when calling v01SchedulePlayPost(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling v01SchedulePlayPost(Async)");
        }

        return v01SchedulePlayPostCall(callUUID, sounds, time, legs, length, loop, mix, _callback);

    }

    /**
     * /v0.1/SchedulePlay/
     * Schedules media playback for a specific call
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param time Time (in seconds) after which the media will be playedback (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @return SchedulePlayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public SchedulePlayResponse v01SchedulePlayPost(String callUUID, String sounds, Integer time, String legs, Integer length, Boolean loop, Boolean mix) throws ApiException {
        ApiResponse<SchedulePlayResponse> localVarResp = v01SchedulePlayPostWithHttpInfo(callUUID, sounds, time, legs, length, loop, mix);
        return localVarResp.getData();
    }

    /**
     * /v0.1/SchedulePlay/
     * Schedules media playback for a specific call
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param time Time (in seconds) after which the media will be playedback (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @return ApiResponse&lt;SchedulePlayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulePlayResponse> v01SchedulePlayPostWithHttpInfo(String callUUID, String sounds, Integer time, String legs, Integer length, Boolean loop, Boolean mix) throws ApiException {
        okhttp3.Call localVarCall = v01SchedulePlayPostValidateBeforeCall(callUUID, sounds, time, legs, length, loop, mix, null);
        Type localVarReturnType = new TypeToken<SchedulePlayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/SchedulePlay/ (asynchronously)
     * Schedules media playback for a specific call
     * @param callUUID Unique identifier of the call to play media into (required)
     * @param sounds Comma separated list of file paths/URIs to be played (required)
     * @param time Time (in seconds) after which the media will be playedback (required)
     * @param legs Call leg(s) for which the media will be played; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param length Maximum amount of time (in seconds) to playback the media (optional, default to 3600)
     * @param loop Loops the media file(s) indefinitely (optional, default to false)
     * @param mix Whether the media should be mixed with the call&#39;s audio stream (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SchedulePlayPostAsync(String callUUID, String sounds, Integer time, String legs, Integer length, Boolean loop, Boolean mix, final ApiCallback<SchedulePlayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01SchedulePlayPostValidateBeforeCall(callUUID, sounds, time, legs, length, loop, mix, _callback);
        Type localVarReturnType = new TypeToken<SchedulePlayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01SendDigitsPost
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param digits DTMF tones to be sent; each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (required)
     * @param leg Call leg(s) to which DTMFs will be sent; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SendDigitsPostCall(String callUUID, String digits, String leg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/SendDigits/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (digits != null) {
            localVarFormParams.put("Digits", digits);
        }

        if (leg != null) {
            localVarFormParams.put("Leg", leg);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01SendDigitsPostValidateBeforeCall(String callUUID, String digits, String leg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01SendDigitsPost(Async)");
        }

        // verify the required parameter 'digits' is set
        if (digits == null) {
            throw new ApiException("Missing the required parameter 'digits' when calling v01SendDigitsPost(Async)");
        }

        return v01SendDigitsPostCall(callUUID, digits, leg, _callback);

    }

    /**
     * /v0.1/SendDigits/
     * Emits DMTF tones to a call
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param digits DTMF tones to be sent; each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (required)
     * @param leg Call leg(s) to which DTMFs will be sent; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @return SendDigitsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public SendDigitsResponse v01SendDigitsPost(String callUUID, String digits, String leg) throws ApiException {
        ApiResponse<SendDigitsResponse> localVarResp = v01SendDigitsPostWithHttpInfo(callUUID, digits, leg);
        return localVarResp.getData();
    }

    /**
     * /v0.1/SendDigits/
     * Emits DMTF tones to a call
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param digits DTMF tones to be sent; each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (required)
     * @param leg Call leg(s) to which DTMFs will be sent; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @return ApiResponse&lt;SendDigitsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendDigitsResponse> v01SendDigitsPostWithHttpInfo(String callUUID, String digits, String leg) throws ApiException {
        okhttp3.Call localVarCall = v01SendDigitsPostValidateBeforeCall(callUUID, digits, leg, null);
        Type localVarReturnType = new TypeToken<SendDigitsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/SendDigits/ (asynchronously)
     * Emits DMTF tones to a call
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param digits DTMF tones to be sent; each occurrence of &#x60;w&#x60; implies a 0.5 seconds delay whereas &#x60;W&#x60; will apply a whole second delay. To alter the tone duration (by default, 2000ms), append &#x60;@&#x60; and the length in milliseconds at the end of the string (required)
     * @param leg Call leg(s) to which DTMFs will be sent; &#x60;aleg&#x60; refers to the initial call leg, &#x60;bleg&#x60; refers to the bridged call leg, if applicable. (optional, default to aleg)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SendDigitsPostAsync(String callUUID, String digits, String leg, final ApiCallback<SendDigitsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01SendDigitsPostValidateBeforeCall(callUUID, digits, leg, _callback);
        Type localVarReturnType = new TypeToken<SendDigitsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01SoundTouchPost
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param audioDirection Media stream to be altered, incoming or outgoing (optional, default to out)
     * @param pitch Adjust the pitch (optional, default to 1)
     * @param pitchOctaves Adjust the pitch in octaves (optional)
     * @param pitchSemiTones Adjust the pitch in semitones (optional)
     * @param rate Adjust the rate (optional, default to 1)
     * @param tempo Adjust the tempo (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SoundTouchPostCall(String callUUID, String audioDirection, Float pitch, Float pitchOctaves, Float pitchSemiTones, Float rate, Float tempo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/SoundTouch/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (audioDirection != null) {
            localVarFormParams.put("AudioDirection", audioDirection);
        }

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (pitch != null) {
            localVarFormParams.put("Pitch", pitch);
        }

        if (pitchOctaves != null) {
            localVarFormParams.put("PitchOctaves", pitchOctaves);
        }

        if (pitchSemiTones != null) {
            localVarFormParams.put("PitchSemiTones", pitchSemiTones);
        }

        if (rate != null) {
            localVarFormParams.put("Rate", rate);
        }

        if (tempo != null) {
            localVarFormParams.put("Tempo", tempo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01SoundTouchPostValidateBeforeCall(String callUUID, String audioDirection, Float pitch, Float pitchOctaves, Float pitchSemiTones, Float rate, Float tempo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01SoundTouchPost(Async)");
        }

        return v01SoundTouchPostCall(callUUID, audioDirection, pitch, pitchOctaves, pitchSemiTones, rate, tempo, _callback);

    }

    /**
     * /v0.1/SoundTouch/
     * Applies SoundTouch effects to a live call
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param audioDirection Media stream to be altered, incoming or outgoing (optional, default to out)
     * @param pitch Adjust the pitch (optional, default to 1)
     * @param pitchOctaves Adjust the pitch in octaves (optional)
     * @param pitchSemiTones Adjust the pitch in semitones (optional)
     * @param rate Adjust the rate (optional, default to 1)
     * @param tempo Adjust the tempo (optional, default to 1)
     * @return SoundTouchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public SoundTouchResponse v01SoundTouchPost(String callUUID, String audioDirection, Float pitch, Float pitchOctaves, Float pitchSemiTones, Float rate, Float tempo) throws ApiException {
        ApiResponse<SoundTouchResponse> localVarResp = v01SoundTouchPostWithHttpInfo(callUUID, audioDirection, pitch, pitchOctaves, pitchSemiTones, rate, tempo);
        return localVarResp.getData();
    }

    /**
     * /v0.1/SoundTouch/
     * Applies SoundTouch effects to a live call
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param audioDirection Media stream to be altered, incoming or outgoing (optional, default to out)
     * @param pitch Adjust the pitch (optional, default to 1)
     * @param pitchOctaves Adjust the pitch in octaves (optional)
     * @param pitchSemiTones Adjust the pitch in semitones (optional)
     * @param rate Adjust the rate (optional, default to 1)
     * @param tempo Adjust the tempo (optional, default to 1)
     * @return ApiResponse&lt;SoundTouchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoundTouchResponse> v01SoundTouchPostWithHttpInfo(String callUUID, String audioDirection, Float pitch, Float pitchOctaves, Float pitchSemiTones, Float rate, Float tempo) throws ApiException {
        okhttp3.Call localVarCall = v01SoundTouchPostValidateBeforeCall(callUUID, audioDirection, pitch, pitchOctaves, pitchSemiTones, rate, tempo, null);
        Type localVarReturnType = new TypeToken<SoundTouchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/SoundTouch/ (asynchronously)
     * Applies SoundTouch effects to a live call
     * @param callUUID Unique identifier of the call to send DTMF to (required)
     * @param audioDirection Media stream to be altered, incoming or outgoing (optional, default to out)
     * @param pitch Adjust the pitch (optional, default to 1)
     * @param pitchOctaves Adjust the pitch in octaves (optional)
     * @param pitchSemiTones Adjust the pitch in semitones (optional)
     * @param rate Adjust the rate (optional, default to 1)
     * @param tempo Adjust the tempo (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SoundTouchPostAsync(String callUUID, String audioDirection, Float pitch, Float pitchOctaves, Float pitchSemiTones, Float rate, Float tempo, final ApiCallback<SoundTouchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01SoundTouchPostValidateBeforeCall(callUUID, audioDirection, pitch, pitchOctaves, pitchSemiTones, rate, tempo, _callback);
        Type localVarReturnType = new TypeToken<SoundTouchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01SoundTouchStopPost
     * @param callUUID Unique identifier of the call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SoundTouchStopPostCall(String callUUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/SoundTouchStop/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01SoundTouchStopPostValidateBeforeCall(String callUUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01SoundTouchStopPost(Async)");
        }

        return v01SoundTouchStopPostCall(callUUID, _callback);

    }

    /**
     * /v0.1/SoundTouchStop/
     * Removes SoundTouch effects from a given call
     * @param callUUID Unique identifier of the call (required)
     * @return SoundTouchStopResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public SoundTouchStopResponse v01SoundTouchStopPost(String callUUID) throws ApiException {
        ApiResponse<SoundTouchStopResponse> localVarResp = v01SoundTouchStopPostWithHttpInfo(callUUID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/SoundTouchStop/
     * Removes SoundTouch effects from a given call
     * @param callUUID Unique identifier of the call (required)
     * @return ApiResponse&lt;SoundTouchStopResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoundTouchStopResponse> v01SoundTouchStopPostWithHttpInfo(String callUUID) throws ApiException {
        okhttp3.Call localVarCall = v01SoundTouchStopPostValidateBeforeCall(callUUID, null);
        Type localVarReturnType = new TypeToken<SoundTouchStopResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/SoundTouchStop/ (asynchronously)
     * Removes SoundTouch effects from a given call
     * @param callUUID Unique identifier of the call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01SoundTouchStopPostAsync(String callUUID, final ApiCallback<SoundTouchStopResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01SoundTouchStopPostValidateBeforeCall(callUUID, _callback);
        Type localVarReturnType = new TypeToken<SoundTouchStopResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01TransferCallPost
     * @param callUUID Unique identifier of the call (required)
     * @param url Absolute URL which will return the updated RestXML flow (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01TransferCallPostCall(String callUUID, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/TransferCall/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUID != null) {
            localVarFormParams.put("CallUUID", callUUID);
        }

        if (url != null) {
            localVarFormParams.put("Url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01TransferCallPostValidateBeforeCall(String callUUID, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callUUID' is set
        if (callUUID == null) {
            throw new ApiException("Missing the required parameter 'callUUID' when calling v01TransferCallPost(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling v01TransferCallPost(Async)");
        }

        return v01TransferCallPostCall(callUUID, url, _callback);

    }

    /**
     * /v0.1/TransferCall/
     * Replaces the RestXML flow of a live call
     * @param callUUID Unique identifier of the call (required)
     * @param url Absolute URL which will return the updated RestXML flow (required)
     * @return TransferCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public TransferCallResponse v01TransferCallPost(String callUUID, String url) throws ApiException {
        ApiResponse<TransferCallResponse> localVarResp = v01TransferCallPostWithHttpInfo(callUUID, url);
        return localVarResp.getData();
    }

    /**
     * /v0.1/TransferCall/
     * Replaces the RestXML flow of a live call
     * @param callUUID Unique identifier of the call (required)
     * @param url Absolute URL which will return the updated RestXML flow (required)
     * @return ApiResponse&lt;TransferCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferCallResponse> v01TransferCallPostWithHttpInfo(String callUUID, String url) throws ApiException {
        okhttp3.Call localVarCall = v01TransferCallPostValidateBeforeCall(callUUID, url, null);
        Type localVarReturnType = new TypeToken<TransferCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/TransferCall/ (asynchronously)
     * Replaces the RestXML flow of a live call
     * @param callUUID Unique identifier of the call (required)
     * @param url Absolute URL which will return the updated RestXML flow (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01TransferCallPostAsync(String callUUID, String url, final ApiCallback<TransferCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01TransferCallPostValidateBeforeCall(callUUID, url, _callback);
        Type localVarReturnType = new TypeToken<TransferCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
