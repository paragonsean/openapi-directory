/*
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConferenceDeafResponse;
import org.openapitools.client.model.ConferenceHangupResponse;
import org.openapitools.client.model.ConferenceKickResponse;
import org.openapitools.client.model.ConferenceListMembersResponse;
import org.openapitools.client.model.ConferenceListResponse;
import org.openapitools.client.model.ConferenceMuteResponse;
import org.openapitools.client.model.ConferencePlayResponse;
import org.openapitools.client.model.ConferenceRecordStartResponse;
import org.openapitools.client.model.ConferenceRecordStopResponse;
import org.openapitools.client.model.ConferenceSpeakResponse;
import org.openapitools.client.model.ConferenceUndeafResponse;
import org.openapitools.client.model.ConferenceUnmuteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConferenceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConferenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConferenceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v01ConferenceDeafPost
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceDeafPostCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceDeaf/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceDeafPostValidateBeforeCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceDeafPost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferenceDeafPost(Async)");
        }

        return v01ConferenceDeafPostCall(conferenceName, memberID, _callback);

    }

    /**
     * /v0.1/ConferenceDeaf/
     * Blocks audio to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ConferenceDeafResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceDeafResponse v01ConferenceDeafPost(String conferenceName, String memberID) throws ApiException {
        ApiResponse<ConferenceDeafResponse> localVarResp = v01ConferenceDeafPostWithHttpInfo(conferenceName, memberID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceDeaf/
     * Blocks audio to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ApiResponse&lt;ConferenceDeafResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceDeafResponse> v01ConferenceDeafPostWithHttpInfo(String conferenceName, String memberID) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceDeafPostValidateBeforeCall(conferenceName, memberID, null);
        Type localVarReturnType = new TypeToken<ConferenceDeafResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceDeaf/ (asynchronously)
     * Blocks audio to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceDeafPostAsync(String conferenceName, String memberID, final ApiCallback<ConferenceDeafResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceDeafPostValidateBeforeCall(conferenceName, memberID, _callback);
        Type localVarReturnType = new TypeToken<ConferenceDeafResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceHangupPost
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceHangupPostCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceHangup/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceHangupPostValidateBeforeCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceHangupPost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferenceHangupPost(Async)");
        }

        return v01ConferenceHangupPostCall(conferenceName, memberID, _callback);

    }

    /**
     * /v0.1/ConferenceHangup/
     * Kicks one or more conference members, without playing the kick sound
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ConferenceHangupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceHangupResponse v01ConferenceHangupPost(String conferenceName, String memberID) throws ApiException {
        ApiResponse<ConferenceHangupResponse> localVarResp = v01ConferenceHangupPostWithHttpInfo(conferenceName, memberID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceHangup/
     * Kicks one or more conference members, without playing the kick sound
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ApiResponse&lt;ConferenceHangupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceHangupResponse> v01ConferenceHangupPostWithHttpInfo(String conferenceName, String memberID) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceHangupPostValidateBeforeCall(conferenceName, memberID, null);
        Type localVarReturnType = new TypeToken<ConferenceHangupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceHangup/ (asynchronously)
     * Kicks one or more conference members, without playing the kick sound
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceHangupPostAsync(String conferenceName, String memberID, final ApiCallback<ConferenceHangupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceHangupPostValidateBeforeCall(conferenceName, memberID, _callback);
        Type localVarReturnType = new TypeToken<ConferenceHangupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceKickPost
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceKickPostCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceKick/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceKickPostValidateBeforeCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceKickPost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferenceKickPost(Async)");
        }

        return v01ConferenceKickPostCall(conferenceName, memberID, _callback);

    }

    /**
     * /v0.1/ConferenceKick/
     * Kicks one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ConferenceKickResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceKickResponse v01ConferenceKickPost(String conferenceName, String memberID) throws ApiException {
        ApiResponse<ConferenceKickResponse> localVarResp = v01ConferenceKickPostWithHttpInfo(conferenceName, memberID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceKick/
     * Kicks one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ApiResponse&lt;ConferenceKickResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceKickResponse> v01ConferenceKickPostWithHttpInfo(String conferenceName, String memberID) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceKickPostValidateBeforeCall(conferenceName, memberID, null);
        Type localVarReturnType = new TypeToken<ConferenceKickResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceKick/ (asynchronously)
     * Kicks one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceKickPostAsync(String conferenceName, String memberID, final ApiCallback<ConferenceKickResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceKickPostValidateBeforeCall(conferenceName, memberID, _callback);
        Type localVarReturnType = new TypeToken<ConferenceKickResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceListMembersPost
     * @param conferenceName Name of the conference (required)
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceListMembersPostCall(String conferenceName, String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceListMembers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUIDFilter != null) {
            localVarFormParams.put("CallUUIDFilter", callUUIDFilter);
        }

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (deafFilter != null) {
            localVarFormParams.put("DeafFilter", deafFilter);
        }

        if (memberFilter != null) {
            localVarFormParams.put("MemberFilter", memberFilter);
        }

        if (mutedFilter != null) {
            localVarFormParams.put("MutedFilter", mutedFilter);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceListMembersPostValidateBeforeCall(String conferenceName, String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceListMembersPost(Async)");
        }

        return v01ConferenceListMembersPostCall(conferenceName, callUUIDFilter, deafFilter, memberFilter, mutedFilter, _callback);

    }

    /**
     * /v0.1/ConferenceListMembers/
     * Retrieves the member list for a given conference
     * @param conferenceName Name of the conference (required)
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @return ConferenceListMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceListMembersResponse v01ConferenceListMembersPost(String conferenceName, String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter) throws ApiException {
        ApiResponse<ConferenceListMembersResponse> localVarResp = v01ConferenceListMembersPostWithHttpInfo(conferenceName, callUUIDFilter, deafFilter, memberFilter, mutedFilter);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceListMembers/
     * Retrieves the member list for a given conference
     * @param conferenceName Name of the conference (required)
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @return ApiResponse&lt;ConferenceListMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceListMembersResponse> v01ConferenceListMembersPostWithHttpInfo(String conferenceName, String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceListMembersPostValidateBeforeCall(conferenceName, callUUIDFilter, deafFilter, memberFilter, mutedFilter, null);
        Type localVarReturnType = new TypeToken<ConferenceListMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceListMembers/ (asynchronously)
     * Retrieves the member list for a given conference
     * @param conferenceName Name of the conference (required)
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceListMembersPostAsync(String conferenceName, String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter, final ApiCallback<ConferenceListMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceListMembersPostValidateBeforeCall(conferenceName, callUUIDFilter, deafFilter, memberFilter, mutedFilter, _callback);
        Type localVarReturnType = new TypeToken<ConferenceListMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceListPost
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceListPostCall(String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceList/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callUUIDFilter != null) {
            localVarFormParams.put("CallUUIDFilter", callUUIDFilter);
        }

        if (deafFilter != null) {
            localVarFormParams.put("DeafFilter", deafFilter);
        }

        if (memberFilter != null) {
            localVarFormParams.put("MemberFilter", memberFilter);
        }

        if (mutedFilter != null) {
            localVarFormParams.put("MutedFilter", mutedFilter);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceListPostValidateBeforeCall(String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter, final ApiCallback _callback) throws ApiException {
        return v01ConferenceListPostCall(callUUIDFilter, deafFilter, memberFilter, mutedFilter, _callback);

    }

    /**
     * /v0.1/ConferenceList/
     * Returns a list of all established conferences
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @return ConferenceListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceListResponse v01ConferenceListPost(String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter) throws ApiException {
        ApiResponse<ConferenceListResponse> localVarResp = v01ConferenceListPostWithHttpInfo(callUUIDFilter, deafFilter, memberFilter, mutedFilter);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceList/
     * Returns a list of all established conferences
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @return ApiResponse&lt;ConferenceListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceListResponse> v01ConferenceListPostWithHttpInfo(String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceListPostValidateBeforeCall(callUUIDFilter, deafFilter, memberFilter, mutedFilter, null);
        Type localVarReturnType = new TypeToken<ConferenceListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceList/ (asynchronously)
     * Returns a list of all established conferences
     * @param callUUIDFilter Restricts listed calls to the provided values (comma separated call UUID list) (optional)
     * @param deafFilter Restricts listed members to deaf ones (optional, default to false)
     * @param memberFilter Restricts listed members to the provided values (comma separated member ID list) (optional)
     * @param mutedFilter Restricts listed members to muted ones (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceListPostAsync(String callUUIDFilter, Boolean deafFilter, String memberFilter, Boolean mutedFilter, final ApiCallback<ConferenceListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceListPostValidateBeforeCall(callUUIDFilter, deafFilter, memberFilter, mutedFilter, _callback);
        Type localVarReturnType = new TypeToken<ConferenceListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceMutePost
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceMutePostCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceMute/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceMutePostValidateBeforeCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceMutePost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferenceMutePost(Async)");
        }

        return v01ConferenceMutePostCall(conferenceName, memberID, _callback);

    }

    /**
     * /v0.1/ConferenceMute/
     * Blocks audio from one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ConferenceMuteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceMuteResponse v01ConferenceMutePost(String conferenceName, String memberID) throws ApiException {
        ApiResponse<ConferenceMuteResponse> localVarResp = v01ConferenceMutePostWithHttpInfo(conferenceName, memberID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceMute/
     * Blocks audio from one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ApiResponse&lt;ConferenceMuteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceMuteResponse> v01ConferenceMutePostWithHttpInfo(String conferenceName, String memberID) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceMutePostValidateBeforeCall(conferenceName, memberID, null);
        Type localVarReturnType = new TypeToken<ConferenceMuteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceMute/ (asynchronously)
     * Blocks audio from one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceMutePostAsync(String conferenceName, String memberID, final ApiCallback<ConferenceMuteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceMutePostValidateBeforeCall(conferenceName, memberID, _callback);
        Type localVarReturnType = new TypeToken<ConferenceMuteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferencePlayPost
     * @param conferenceName Name of the conference in question (required)
     * @param filePath Path/URI of the media file to be played (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferencePlayPostCall(String conferenceName, String filePath, String memberID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferencePlay/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (filePath != null) {
            localVarFormParams.put("FilePath", filePath);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferencePlayPostValidateBeforeCall(String conferenceName, String filePath, String memberID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferencePlayPost(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling v01ConferencePlayPost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferencePlayPost(Async)");
        }

        return v01ConferencePlayPostCall(conferenceName, filePath, memberID, _callback);

    }

    /**
     * /v0.1/ConferencePlay/
     * Plays media to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param filePath Path/URI of the media file to be played (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ConferencePlayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferencePlayResponse v01ConferencePlayPost(String conferenceName, String filePath, String memberID) throws ApiException {
        ApiResponse<ConferencePlayResponse> localVarResp = v01ConferencePlayPostWithHttpInfo(conferenceName, filePath, memberID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferencePlay/
     * Plays media to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param filePath Path/URI of the media file to be played (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ApiResponse&lt;ConferencePlayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferencePlayResponse> v01ConferencePlayPostWithHttpInfo(String conferenceName, String filePath, String memberID) throws ApiException {
        okhttp3.Call localVarCall = v01ConferencePlayPostValidateBeforeCall(conferenceName, filePath, memberID, null);
        Type localVarReturnType = new TypeToken<ConferencePlayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferencePlay/ (asynchronously)
     * Plays media to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param filePath Path/URI of the media file to be played (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferencePlayPostAsync(String conferenceName, String filePath, String memberID, final ApiCallback<ConferencePlayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferencePlayPostValidateBeforeCall(conferenceName, filePath, memberID, _callback);
        Type localVarReturnType = new TypeToken<ConferencePlayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceRecordStartPost
     * @param conferenceName Name of the conference in question (required)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceRecordStartPostCall(String conferenceName, String fileFormat, String fileName, String filePath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceRecordStart/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (fileFormat != null) {
            localVarFormParams.put("FileFormat", fileFormat);
        }

        if (fileName != null) {
            localVarFormParams.put("FileName", fileName);
        }

        if (filePath != null) {
            localVarFormParams.put("FilePath", filePath);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceRecordStartPostValidateBeforeCall(String conferenceName, String fileFormat, String fileName, String filePath, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceRecordStartPost(Async)");
        }

        return v01ConferenceRecordStartPostCall(conferenceName, fileFormat, fileName, filePath, _callback);

    }

    /**
     * /v0.1/ConferenceRecordStart/
     * Initiates a conference recording
     * @param conferenceName Name of the conference in question (required)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @return ConferenceRecordStartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceRecordStartResponse v01ConferenceRecordStartPost(String conferenceName, String fileFormat, String fileName, String filePath) throws ApiException {
        ApiResponse<ConferenceRecordStartResponse> localVarResp = v01ConferenceRecordStartPostWithHttpInfo(conferenceName, fileFormat, fileName, filePath);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceRecordStart/
     * Initiates a conference recording
     * @param conferenceName Name of the conference in question (required)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @return ApiResponse&lt;ConferenceRecordStartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceRecordStartResponse> v01ConferenceRecordStartPostWithHttpInfo(String conferenceName, String fileFormat, String fileName, String filePath) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceRecordStartPostValidateBeforeCall(conferenceName, fileFormat, fileName, filePath, null);
        Type localVarReturnType = new TypeToken<ConferenceRecordStartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceRecordStart/ (asynchronously)
     * Initiates a conference recording
     * @param conferenceName Name of the conference in question (required)
     * @param fileFormat File format (extension) (optional, default to mp3)
     * @param fileName Recording file name (without extension); if empty, a timestamp based file name will be generated (optional, default to )
     * @param filePath Directory path/URI where the recording file will be saved (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceRecordStartPostAsync(String conferenceName, String fileFormat, String fileName, String filePath, final ApiCallback<ConferenceRecordStartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceRecordStartPostValidateBeforeCall(conferenceName, fileFormat, fileName, filePath, _callback);
        Type localVarReturnType = new TypeToken<ConferenceRecordStartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceRecordStopPost
     * @param conferenceName Name of the conference in question (required)
     * @param recordFile Full path to recording file, as returned by ConferenceRecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceRecordStopPostCall(String conferenceName, String recordFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceRecordStop/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (recordFile != null) {
            localVarFormParams.put("RecordFile", recordFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceRecordStopPostValidateBeforeCall(String conferenceName, String recordFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceRecordStopPost(Async)");
        }

        // verify the required parameter 'recordFile' is set
        if (recordFile == null) {
            throw new ApiException("Missing the required parameter 'recordFile' when calling v01ConferenceRecordStopPost(Async)");
        }

        return v01ConferenceRecordStopPostCall(conferenceName, recordFile, _callback);

    }

    /**
     * /v0.1/ConferenceRecordStop/
     * Stops a conference recording
     * @param conferenceName Name of the conference in question (required)
     * @param recordFile Full path to recording file, as returned by ConferenceRecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @return ConferenceRecordStopResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceRecordStopResponse v01ConferenceRecordStopPost(String conferenceName, String recordFile) throws ApiException {
        ApiResponse<ConferenceRecordStopResponse> localVarResp = v01ConferenceRecordStopPostWithHttpInfo(conferenceName, recordFile);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceRecordStop/
     * Stops a conference recording
     * @param conferenceName Name of the conference in question (required)
     * @param recordFile Full path to recording file, as returned by ConferenceRecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @return ApiResponse&lt;ConferenceRecordStopResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceRecordStopResponse> v01ConferenceRecordStopPostWithHttpInfo(String conferenceName, String recordFile) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceRecordStopPostValidateBeforeCall(conferenceName, recordFile, null);
        Type localVarReturnType = new TypeToken<ConferenceRecordStopResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceRecordStop/ (asynchronously)
     * Stops a conference recording
     * @param conferenceName Name of the conference in question (required)
     * @param recordFile Full path to recording file, as returned by ConferenceRecordStart; &#x60;all&#x60; shorthand is also available (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceRecordStopPostAsync(String conferenceName, String recordFile, final ApiCallback<ConferenceRecordStopResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceRecordStopPostValidateBeforeCall(conferenceName, recordFile, _callback);
        Type localVarReturnType = new TypeToken<ConferenceRecordStopResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceSpeakPost
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param text Text to be synthesized (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceSpeakPostCall(String conferenceName, String memberID, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceSpeak/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        if (text != null) {
            localVarFormParams.put("Text", text);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceSpeakPostValidateBeforeCall(String conferenceName, String memberID, String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceSpeakPost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferenceSpeakPost(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling v01ConferenceSpeakPost(Async)");
        }

        return v01ConferenceSpeakPostCall(conferenceName, memberID, text, _callback);

    }

    /**
     * /v0.1/ConferenceSpeak/
     * Plays synthesized speech into a conference
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param text Text to be synthesized (required)
     * @return ConferenceSpeakResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceSpeakResponse v01ConferenceSpeakPost(String conferenceName, String memberID, String text) throws ApiException {
        ApiResponse<ConferenceSpeakResponse> localVarResp = v01ConferenceSpeakPostWithHttpInfo(conferenceName, memberID, text);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceSpeak/
     * Plays synthesized speech into a conference
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param text Text to be synthesized (required)
     * @return ApiResponse&lt;ConferenceSpeakResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceSpeakResponse> v01ConferenceSpeakPostWithHttpInfo(String conferenceName, String memberID, String text) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceSpeakPostValidateBeforeCall(conferenceName, memberID, text, null);
        Type localVarReturnType = new TypeToken<ConferenceSpeakResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceSpeak/ (asynchronously)
     * Plays synthesized speech into a conference
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param text Text to be synthesized (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceSpeakPostAsync(String conferenceName, String memberID, String text, final ApiCallback<ConferenceSpeakResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceSpeakPostValidateBeforeCall(conferenceName, memberID, text, _callback);
        Type localVarReturnType = new TypeToken<ConferenceSpeakResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceUndeafPost
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceUndeafPostCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceUndeaf/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceUndeafPostValidateBeforeCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceUndeafPost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferenceUndeafPost(Async)");
        }

        return v01ConferenceUndeafPostCall(conferenceName, memberID, _callback);

    }

    /**
     * /v0.1/ConferenceUndeaf/
     * Restores audio to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ConferenceUndeafResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceUndeafResponse v01ConferenceUndeafPost(String conferenceName, String memberID) throws ApiException {
        ApiResponse<ConferenceUndeafResponse> localVarResp = v01ConferenceUndeafPostWithHttpInfo(conferenceName, memberID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceUndeaf/
     * Restores audio to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ApiResponse&lt;ConferenceUndeafResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceUndeafResponse> v01ConferenceUndeafPostWithHttpInfo(String conferenceName, String memberID) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceUndeafPostValidateBeforeCall(conferenceName, memberID, null);
        Type localVarReturnType = new TypeToken<ConferenceUndeafResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceUndeaf/ (asynchronously)
     * Restores audio to one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceUndeafPostAsync(String conferenceName, String memberID, final ApiCallback<ConferenceUndeafResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceUndeafPostValidateBeforeCall(conferenceName, memberID, _callback);
        Type localVarReturnType = new TypeToken<ConferenceUndeafResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v01ConferenceUnmutePost
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceUnmutePostCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/ConferenceUnmute/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conferenceName != null) {
            localVarFormParams.put("ConferenceName", conferenceName);
        }

        if (memberID != null) {
            localVarFormParams.put("MemberID", memberID);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v01ConferenceUnmutePostValidateBeforeCall(String conferenceName, String memberID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conferenceName' is set
        if (conferenceName == null) {
            throw new ApiException("Missing the required parameter 'conferenceName' when calling v01ConferenceUnmutePost(Async)");
        }

        // verify the required parameter 'memberID' is set
        if (memberID == null) {
            throw new ApiException("Missing the required parameter 'memberID' when calling v01ConferenceUnmutePost(Async)");
        }

        return v01ConferenceUnmutePostCall(conferenceName, memberID, _callback);

    }

    /**
     * /v0.1/ConferenceUnmute/
     * Restores audio from one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ConferenceUnmuteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ConferenceUnmuteResponse v01ConferenceUnmutePost(String conferenceName, String memberID) throws ApiException {
        ApiResponse<ConferenceUnmuteResponse> localVarResp = v01ConferenceUnmutePostWithHttpInfo(conferenceName, memberID);
        return localVarResp.getData();
    }

    /**
     * /v0.1/ConferenceUnmute/
     * Restores audio from one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @return ApiResponse&lt;ConferenceUnmuteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConferenceUnmuteResponse> v01ConferenceUnmutePostWithHttpInfo(String conferenceName, String memberID) throws ApiException {
        okhttp3.Call localVarCall = v01ConferenceUnmutePostValidateBeforeCall(conferenceName, memberID, null);
        Type localVarReturnType = new TypeToken<ConferenceUnmuteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v0.1/ConferenceUnmute/ (asynchronously)
     * Restores audio from one or more conference members
     * @param conferenceName Name of the conference in question (required)
     * @param memberID List of comma separated member IDs to be affected; &#x60;all&#x60; shorthand is available too. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v01ConferenceUnmutePostAsync(String conferenceName, String memberID, final ApiCallback<ConferenceUnmuteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v01ConferenceUnmutePostValidateBeforeCall(conferenceName, memberID, _callback);
        Type localVarReturnType = new TypeToken<ConferenceUnmuteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
