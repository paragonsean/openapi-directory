/*
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CallNotificationParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:35.073755-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallNotificationParameters {
  public static final String SERIALIZED_NAME_ALEG_REQUEST_U_U_I_D = "ALegRequestUUID";
  @SerializedName(SERIALIZED_NAME_ALEG_REQUEST_U_U_I_D)
  private String alegRequestUUID;

  public static final String SERIALIZED_NAME_ALEG_U_U_I_D = "ALegUUID";
  @SerializedName(SERIALIZED_NAME_ALEG_U_U_I_D)
  private String alegUUID;

  /**
   * Answering actor, when answering machine detection is enabled
   */
  @JsonAdapter(AnsweredByEnum.Adapter.class)
  public enum AnsweredByEnum {
    MACHINE_START("machine_start"),
    
    MACHINE_END_BEEP("machine_end_beep"),
    
    MACHINE_END_OTHER("machine_end_other"),
    
    HUMAN("human"),
    
    UNKNOWN("unknown");

    private String value;

    AnsweredByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnsweredByEnum fromValue(String value) {
      for (AnsweredByEnum b : AnsweredByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnsweredByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnsweredByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnsweredByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnsweredByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnsweredByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANSWERED_BY = "AnsweredBy";
  @SerializedName(SERIALIZED_NAME_ANSWERED_BY)
  private AnsweredByEnum answeredBy;

  /**
   * Call&#39;s current status
   */
  @JsonAdapter(CallStatusEnum.Adapter.class)
  public enum CallStatusEnum {
    RINGING("ringing"),
    
    EARLY_MEDIA("early-media"),
    
    ANSWER("answer"),
    
    IN_PROGRESS("in-progress"),
    
    COMPLETED("completed");

    private String value;

    CallStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallStatusEnum fromValue(String value) {
      for (CallStatusEnum b : CallStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALL_STATUS = "CallStatus";
  @SerializedName(SERIALIZED_NAME_CALL_STATUS)
  private CallStatusEnum callStatus;

  public static final String SERIALIZED_NAME_CALL_U_U_I_D = "CallUUID";
  @SerializedName(SERIALIZED_NAME_CALL_U_U_I_D)
  private String callUUID;

  public static final String SERIALIZED_NAME_CALLER_NAME = "CallerName";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME)
  private String callerName;

  public static final String SERIALIZED_NAME_CORE_U_U_I_D = "CoreUUID";
  @SerializedName(SERIALIZED_NAME_CORE_U_U_I_D)
  private String coreUUID;

  /**
   * Call&#39;s direction
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INBOUND("inbound"),
    
    OUTBOUND("outbound");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "Direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_FORWARDED_FROM = "ForwardedFrom";
  @SerializedName(SERIALIZED_NAME_FORWARDED_FROM)
  private String forwardedFrom;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_MACHINE_DETECTION_DURATION = "MachineDetectionDuration";
  @SerializedName(SERIALIZED_NAME_MACHINE_DETECTION_DURATION)
  private Integer machineDetectionDuration;

  public static final String SERIALIZED_NAME_REST_API_SERVER = "RestApiServer";
  @SerializedName(SERIALIZED_NAME_REST_API_SERVER)
  private String restApiServer;

  public static final String SERIALIZED_NAME_SCHEDULED_HANGUP_ID = "ScheduledHangupId";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_HANGUP_ID)
  private String scheduledHangupId;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public CallNotificationParameters() {
  }

  public CallNotificationParameters alegRequestUUID(String alegRequestUUID) {
    this.alegRequestUUID = alegRequestUUID;
    return this;
  }

  /**
   * A leg call request&#39;s unique identifier
   * @return alegRequestUUID
   */
  @javax.annotation.Nullable
  public String getAlegRequestUUID() {
    return alegRequestUUID;
  }

  public void setAlegRequestUUID(String alegRequestUUID) {
    this.alegRequestUUID = alegRequestUUID;
  }


  public CallNotificationParameters alegUUID(String alegUUID) {
    this.alegUUID = alegUUID;
    return this;
  }

  /**
   * A leg call&#39;s unique identifier, assigned by FreeSWITCH
   * @return alegUUID
   */
  @javax.annotation.Nullable
  public String getAlegUUID() {
    return alegUUID;
  }

  public void setAlegUUID(String alegUUID) {
    this.alegUUID = alegUUID;
  }


  public CallNotificationParameters answeredBy(AnsweredByEnum answeredBy) {
    this.answeredBy = answeredBy;
    return this;
  }

  /**
   * Answering actor, when answering machine detection is enabled
   * @return answeredBy
   */
  @javax.annotation.Nullable
  public AnsweredByEnum getAnsweredBy() {
    return answeredBy;
  }

  public void setAnsweredBy(AnsweredByEnum answeredBy) {
    this.answeredBy = answeredBy;
  }


  public CallNotificationParameters callStatus(CallStatusEnum callStatus) {
    this.callStatus = callStatus;
    return this;
  }

  /**
   * Call&#39;s current status
   * @return callStatus
   */
  @javax.annotation.Nonnull
  public CallStatusEnum getCallStatus() {
    return callStatus;
  }

  public void setCallStatus(CallStatusEnum callStatus) {
    this.callStatus = callStatus;
  }


  public CallNotificationParameters callUUID(String callUUID) {
    this.callUUID = callUUID;
    return this;
  }

  /**
   * Call&#39;s unique identifier, assigned by FreeSWITCH
   * @return callUUID
   */
  @javax.annotation.Nonnull
  public String getCallUUID() {
    return callUUID;
  }

  public void setCallUUID(String callUUID) {
    this.callUUID = callUUID;
  }


  public CallNotificationParameters callerName(String callerName) {
    this.callerName = callerName;
    return this;
  }

  /**
   * Caller name set for the call
   * @return callerName
   */
  @javax.annotation.Nonnull
  public String getCallerName() {
    return callerName;
  }

  public void setCallerName(String callerName) {
    this.callerName = callerName;
  }


  public CallNotificationParameters coreUUID(String coreUUID) {
    this.coreUUID = coreUUID;
    return this;
  }

  /**
   * FreeSWITCH&#39;s instance unique identifier (Eqivo extension)
   * @return coreUUID
   */
  @javax.annotation.Nonnull
  public String getCoreUUID() {
    return coreUUID;
  }

  public void setCoreUUID(String coreUUID) {
    this.coreUUID = coreUUID;
  }


  public CallNotificationParameters direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Call&#39;s direction
   * @return direction
   */
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public CallNotificationParameters forwardedFrom(String forwardedFrom) {
    this.forwardedFrom = forwardedFrom;
    return this;
  }

  /**
   * Original call destination (before diversion)
   * @return forwardedFrom
   */
  @javax.annotation.Nullable
  public String getForwardedFrom() {
    return forwardedFrom;
  }

  public void setForwardedFrom(String forwardedFrom) {
    this.forwardedFrom = forwardedFrom;
  }


  public CallNotificationParameters from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Caller ID set for the call
   * @return from
   */
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public CallNotificationParameters machineDetectionDuration(Integer machineDetectionDuration) {
    this.machineDetectionDuration = machineDetectionDuration;
    return this;
  }

  /**
   * Actual answering machine detection assessment duration (in milliseconds)
   * @return machineDetectionDuration
   */
  @javax.annotation.Nullable
  public Integer getMachineDetectionDuration() {
    return machineDetectionDuration;
  }

  public void setMachineDetectionDuration(Integer machineDetectionDuration) {
    this.machineDetectionDuration = machineDetectionDuration;
  }


  public CallNotificationParameters restApiServer(String restApiServer) {
    this.restApiServer = restApiServer;
    return this;
  }

  /**
   * Eqivo Rest API server which controls the call (Eqivo extension)
   * @return restApiServer
   */
  @javax.annotation.Nonnull
  public String getRestApiServer() {
    return restApiServer;
  }

  public void setRestApiServer(String restApiServer) {
    this.restApiServer = restApiServer;
  }


  public CallNotificationParameters scheduledHangupId(String scheduledHangupId) {
    this.scheduledHangupId = scheduledHangupId;
    return this;
  }

  /**
   * Unique identifier of the scheduled hangup task
   * @return scheduledHangupId
   */
  @javax.annotation.Nullable
  public String getScheduledHangupId() {
    return scheduledHangupId;
  }

  public void setScheduledHangupId(String scheduledHangupId) {
    this.scheduledHangupId = scheduledHangupId;
  }


  public CallNotificationParameters to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Called phone number
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallNotificationParameters callNotificationParameters = (CallNotificationParameters) o;
    return Objects.equals(this.alegRequestUUID, callNotificationParameters.alegRequestUUID) &&
        Objects.equals(this.alegUUID, callNotificationParameters.alegUUID) &&
        Objects.equals(this.answeredBy, callNotificationParameters.answeredBy) &&
        Objects.equals(this.callStatus, callNotificationParameters.callStatus) &&
        Objects.equals(this.callUUID, callNotificationParameters.callUUID) &&
        Objects.equals(this.callerName, callNotificationParameters.callerName) &&
        Objects.equals(this.coreUUID, callNotificationParameters.coreUUID) &&
        Objects.equals(this.direction, callNotificationParameters.direction) &&
        Objects.equals(this.forwardedFrom, callNotificationParameters.forwardedFrom) &&
        Objects.equals(this.from, callNotificationParameters.from) &&
        Objects.equals(this.machineDetectionDuration, callNotificationParameters.machineDetectionDuration) &&
        Objects.equals(this.restApiServer, callNotificationParameters.restApiServer) &&
        Objects.equals(this.scheduledHangupId, callNotificationParameters.scheduledHangupId) &&
        Objects.equals(this.to, callNotificationParameters.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alegRequestUUID, alegUUID, answeredBy, callStatus, callUUID, callerName, coreUUID, direction, forwardedFrom, from, machineDetectionDuration, restApiServer, scheduledHangupId, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallNotificationParameters {\n");
    sb.append("    alegRequestUUID: ").append(toIndentedString(alegRequestUUID)).append("\n");
    sb.append("    alegUUID: ").append(toIndentedString(alegUUID)).append("\n");
    sb.append("    answeredBy: ").append(toIndentedString(answeredBy)).append("\n");
    sb.append("    callStatus: ").append(toIndentedString(callStatus)).append("\n");
    sb.append("    callUUID: ").append(toIndentedString(callUUID)).append("\n");
    sb.append("    callerName: ").append(toIndentedString(callerName)).append("\n");
    sb.append("    coreUUID: ").append(toIndentedString(coreUUID)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    forwardedFrom: ").append(toIndentedString(forwardedFrom)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    machineDetectionDuration: ").append(toIndentedString(machineDetectionDuration)).append("\n");
    sb.append("    restApiServer: ").append(toIndentedString(restApiServer)).append("\n");
    sb.append("    scheduledHangupId: ").append(toIndentedString(scheduledHangupId)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ALegRequestUUID");
    openapiFields.add("ALegUUID");
    openapiFields.add("AnsweredBy");
    openapiFields.add("CallStatus");
    openapiFields.add("CallUUID");
    openapiFields.add("CallerName");
    openapiFields.add("CoreUUID");
    openapiFields.add("Direction");
    openapiFields.add("ForwardedFrom");
    openapiFields.add("From");
    openapiFields.add("MachineDetectionDuration");
    openapiFields.add("RestApiServer");
    openapiFields.add("ScheduledHangupId");
    openapiFields.add("To");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CallStatus");
    openapiRequiredFields.add("CallUUID");
    openapiRequiredFields.add("CallerName");
    openapiRequiredFields.add("CoreUUID");
    openapiRequiredFields.add("Direction");
    openapiRequiredFields.add("From");
    openapiRequiredFields.add("RestApiServer");
    openapiRequiredFields.add("To");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallNotificationParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallNotificationParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallNotificationParameters is not found in the empty JSON string", CallNotificationParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallNotificationParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallNotificationParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CallNotificationParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ALegRequestUUID") != null && !jsonObj.get("ALegRequestUUID").isJsonNull()) && !jsonObj.get("ALegRequestUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ALegRequestUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ALegRequestUUID").toString()));
      }
      if ((jsonObj.get("ALegUUID") != null && !jsonObj.get("ALegUUID").isJsonNull()) && !jsonObj.get("ALegUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ALegUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ALegUUID").toString()));
      }
      if ((jsonObj.get("AnsweredBy") != null && !jsonObj.get("AnsweredBy").isJsonNull()) && !jsonObj.get("AnsweredBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnsweredBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnsweredBy").toString()));
      }
      // validate the optional field `AnsweredBy`
      if (jsonObj.get("AnsweredBy") != null && !jsonObj.get("AnsweredBy").isJsonNull()) {
        AnsweredByEnum.validateJsonElement(jsonObj.get("AnsweredBy"));
      }
      if (!jsonObj.get("CallStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallStatus").toString()));
      }
      // validate the required field `CallStatus`
      CallStatusEnum.validateJsonElement(jsonObj.get("CallStatus"));
      if (!jsonObj.get("CallUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallUUID").toString()));
      }
      if (!jsonObj.get("CallerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallerName").toString()));
      }
      if (!jsonObj.get("CoreUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CoreUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CoreUUID").toString()));
      }
      if (!jsonObj.get("Direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Direction").toString()));
      }
      // validate the required field `Direction`
      DirectionEnum.validateJsonElement(jsonObj.get("Direction"));
      if ((jsonObj.get("ForwardedFrom") != null && !jsonObj.get("ForwardedFrom").isJsonNull()) && !jsonObj.get("ForwardedFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ForwardedFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ForwardedFrom").toString()));
      }
      if (!jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      if (!jsonObj.get("RestApiServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RestApiServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RestApiServer").toString()));
      }
      if ((jsonObj.get("ScheduledHangupId") != null && !jsonObj.get("ScheduledHangupId").isJsonNull()) && !jsonObj.get("ScheduledHangupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScheduledHangupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScheduledHangupId").toString()));
      }
      if (!jsonObj.get("To").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `To` to be a primitive type in the JSON string but got `%s`", jsonObj.get("To").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallNotificationParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallNotificationParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallNotificationParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallNotificationParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CallNotificationParameters>() {
           @Override
           public void write(JsonWriter out, CallNotificationParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallNotificationParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallNotificationParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallNotificationParameters
   * @throws IOException if the JSON string is invalid with respect to CallNotificationParameters
   */
  public static CallNotificationParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallNotificationParameters.class);
  }

  /**
   * Convert an instance of CallNotificationParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

