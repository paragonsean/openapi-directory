/*
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupCallResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:35.073755-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupCallResponse {
  /**
   * Response message
   */
  @JsonAdapter(MessageEnum.Adapter.class)
  public enum MessageEnum {
    GROUP_CALL_REQUEST_EXECUTED("GroupCall Request Executed"),
    
    MANDATORY_PARAMETERS_MISSING("Mandatory Parameters Missing"),
    
    THIS_DELIMITER_IS_NOT_ALLOWED("This Delimiter is not allowed"),
    
    GROUP_CALL_SHOULD_BE_USED_FOR_AT_LEAST_2_NUMBERS("GroupCall should be used for at least 2 numbers"),
    
    _TO_PARAMETER_LENGTH_DOES_NOT_MATCH_GATEWAYS_LENGTH("'To' parameter length does not match 'Gateways' Length"),
    
    ANSWER_URL_IS_NOT_VALID("AnswerUrl is not Valid"),
    
    HANGUP_URL_IS_NOT_VALID("HangupUrl is not Valid"),
    
    RING_URL_IS_NOT_VALID("RingUrl is not Valid"),
    
    CONFIRM_SOUND_IS_NOT_VALID("ConfirmSound is not Valid"),
    
    UNKNOWN_CORE_UUID("Unknown Core UUID"),
    
    GROUP_CALL_REQUEST_FAILED("GroupCall Request Failed");

    private String value;

    MessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageEnum fromValue(String value) {
      for (MessageEnum b : MessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private MessageEnum message;

  public static final String SERIALIZED_NAME_REQUEST_U_U_I_D = "RequestUUID";
  @SerializedName(SERIALIZED_NAME_REQUEST_U_U_I_D)
  private String requestUUID;

  public static final String SERIALIZED_NAME_REST_API_SERVER = "RestApiServer";
  @SerializedName(SERIALIZED_NAME_REST_API_SERVER)
  private String restApiServer;

  public static final String SERIALIZED_NAME_SUCCESS = "Success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public GroupCallResponse() {
  }

  public GroupCallResponse message(MessageEnum message) {
    this.message = message;
    return this;
  }

  /**
   * Response message
   * @return message
   */
  @javax.annotation.Nonnull
  public MessageEnum getMessage() {
    return message;
  }

  public void setMessage(MessageEnum message) {
    this.message = message;
  }


  public GroupCallResponse requestUUID(String requestUUID) {
    this.requestUUID = requestUUID;
    return this;
  }

  /**
   * Unique identifier of the Call request (UUIDv4)
   * @return requestUUID
   */
  @javax.annotation.Nonnull
  public String getRequestUUID() {
    return requestUUID;
  }

  public void setRequestUUID(String requestUUID) {
    this.requestUUID = requestUUID;
  }


  public GroupCallResponse restApiServer(String restApiServer) {
    this.restApiServer = restApiServer;
    return this;
  }

  /**
   * API server which handled this request (an Eqivo extension)
   * @return restApiServer
   */
  @javax.annotation.Nonnull
  public String getRestApiServer() {
    return restApiServer;
  }

  public void setRestApiServer(String restApiServer) {
    this.restApiServer = restApiServer;
  }


  public GroupCallResponse success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Whether the request was successful or not
   * @return success
   */
  @javax.annotation.Nonnull
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupCallResponse groupCallResponse = (GroupCallResponse) o;
    return Objects.equals(this.message, groupCallResponse.message) &&
        Objects.equals(this.requestUUID, groupCallResponse.requestUUID) &&
        Objects.equals(this.restApiServer, groupCallResponse.restApiServer) &&
        Objects.equals(this.success, groupCallResponse.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, requestUUID, restApiServer, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupCallResponse {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    requestUUID: ").append(toIndentedString(requestUUID)).append("\n");
    sb.append("    restApiServer: ").append(toIndentedString(restApiServer)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Message");
    openapiFields.add("RequestUUID");
    openapiFields.add("RestApiServer");
    openapiFields.add("Success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Message");
    openapiRequiredFields.add("RequestUUID");
    openapiRequiredFields.add("RestApiServer");
    openapiRequiredFields.add("Success");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupCallResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupCallResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupCallResponse is not found in the empty JSON string", GroupCallResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupCallResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupCallResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupCallResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      // validate the required field `Message`
      MessageEnum.validateJsonElement(jsonObj.get("Message"));
      if (!jsonObj.get("RequestUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestUUID").toString()));
      }
      if (!jsonObj.get("RestApiServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RestApiServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RestApiServer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupCallResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupCallResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupCallResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupCallResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupCallResponse>() {
           @Override
           public void write(JsonWriter out, GroupCallResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupCallResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupCallResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupCallResponse
   * @throws IOException if the JSON string is invalid with respect to GroupCallResponse
   */
  public static GroupCallResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupCallResponse.class);
  }

  /**
   * Convert an instance of GroupCallResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

