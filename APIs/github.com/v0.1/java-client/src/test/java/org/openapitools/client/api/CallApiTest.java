/*
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BulkCallResponse;
import org.openapitools.client.model.CallResponse;
import org.openapitools.client.model.CancelScheduledHangupResponse;
import org.openapitools.client.model.CancelScheduledPlayResponse;
import org.openapitools.client.model.GroupCallResponse;
import org.openapitools.client.model.HangupAllCallsResponse;
import org.openapitools.client.model.HangupCallResponse;
import org.openapitools.client.model.PlayResponse;
import org.openapitools.client.model.PlayStopResponse;
import org.openapitools.client.model.RecordStartResponse;
import org.openapitools.client.model.RecordStopResponse;
import org.openapitools.client.model.ScheduleHangupResponse;
import org.openapitools.client.model.SchedulePlayResponse;
import org.openapitools.client.model.SendDigitsResponse;
import org.openapitools.client.model.SoundTouchResponse;
import org.openapitools.client.model.SoundTouchStopResponse;
import org.openapitools.client.model.TransferCallResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CallApi
 */
@Disabled
public class CallApiTest {

    private final CallApi api = new CallApi();

    /**
     * /v0.1/BulkCall/
     *
     * Initiates multiple concurrent outbound calls
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01BulkCallPostTest() throws ApiException {
        String answerUrl = null;
        String delimiter = null;
        String from = null;
        String gateways = null;
        String to = null;
        String callerName = null;
        String confirmKey = null;
        String confirmSound = null;
        String coreUUID = null;
        String extraDialString = null;
        String gatewayCodecs = null;
        String gatewayRetries = null;
        String gatewayTimeouts = null;
        Integer hangupOnRing = null;
        String hangupUrl = null;
        String rejectCauses = null;
        String ringUrl = null;
        String sendDigits = null;
        Boolean sendOnPreanswer = null;
        Integer timeLimit = null;
        BulkCallResponse response = api.v01BulkCallPost(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit);
        // TODO: test validations
    }

    /**
     * /v0.1/Call/
     *
     * Initiates an outbound call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01CallPostTest() throws ApiException {
        String answerUrl = null;
        String from = null;
        String gateways = null;
        String to = null;
        Boolean asyncAMD = null;
        String asyncAmdStatusCallback = null;
        String asyncAmdStatusCallbackMethod = null;
        String callerName = null;
        String coreUUID = null;
        String extraDialString = null;
        String gatewayCodecs = null;
        String gatewayRetries = null;
        String gatewayTimeouts = null;
        Integer hangupOnRing = null;
        String hangupUrl = null;
        String machineDetection = null;
        Integer machineDetectionSilenceTimeout = null;
        Integer machineDetectionSpeechEndThreshold = null;
        Integer machineDetectionSpeechThreshold = null;
        Integer machineDetectionTimeout = null;
        String ringUrl = null;
        String sendDigits = null;
        Boolean sendOnPreanswer = null;
        Integer timeLimit = null;
        CallResponse response = api.v01CallPost(answerUrl, from, gateways, to, asyncAMD, asyncAmdStatusCallback, asyncAmdStatusCallbackMethod, callerName, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, machineDetection, machineDetectionSilenceTimeout, machineDetectionSpeechEndThreshold, machineDetectionSpeechThreshold, machineDetectionTimeout, ringUrl, sendDigits, sendOnPreanswer, timeLimit);
        // TODO: test validations
    }

    /**
     * /v0.1/CancelScheduledHangup/
     *
     * Cancels a scheduled hangup for a call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01CancelScheduledHangupPostTest() throws ApiException {
        String schedHangupId = null;
        CancelScheduledHangupResponse response = api.v01CancelScheduledHangupPost(schedHangupId);
        // TODO: test validations
    }

    /**
     * /v0.1/CancelScheduledPlay/
     *
     * Cancels a scheduled playback request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01CancelScheduledPlayPostTest() throws ApiException {
        String schedPlayId = null;
        CancelScheduledPlayResponse response = api.v01CancelScheduledPlayPost(schedPlayId);
        // TODO: test validations
    }

    /**
     * /v0.1/GroupCall/
     *
     * Initiate multiple racing outbound calls
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01GroupCallPostTest() throws ApiException {
        String answerUrl = null;
        String delimiter = null;
        String from = null;
        String gateways = null;
        String to = null;
        String callerName = null;
        String confirmKey = null;
        String confirmSound = null;
        String coreUUID = null;
        String extraDialString = null;
        String gatewayCodecs = null;
        String gatewayRetries = null;
        String gatewayTimeouts = null;
        Integer hangupOnRing = null;
        String hangupUrl = null;
        String rejectCauses = null;
        String ringUrl = null;
        String sendDigits = null;
        Boolean sendOnPreanswer = null;
        Integer timeLimit = null;
        GroupCallResponse response = api.v01GroupCallPost(answerUrl, delimiter, from, gateways, to, callerName, confirmKey, confirmSound, coreUUID, extraDialString, gatewayCodecs, gatewayRetries, gatewayTimeouts, hangupOnRing, hangupUrl, rejectCauses, ringUrl, sendDigits, sendOnPreanswer, timeLimit);
        // TODO: test validations
    }

    /**
     * /v0.1/HangupAllCalls/
     *
     * Hangs up all established calls
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01HangupAllCallsPostTest() throws ApiException {
        HangupAllCallsResponse response = api.v01HangupAllCallsPost();
        // TODO: test validations
    }

    /**
     * /v0.1/HangupCall/
     *
     * Hangs up a specific call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01HangupCallPostTest() throws ApiException {
        String callUUID = null;
        String requestUUID = null;
        HangupCallResponse response = api.v01HangupCallPost(callUUID, requestUUID);
        // TODO: test validations
    }

    /**
     * /v0.1/Play/
     *
     * Plays media into a live call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01PlayPostTest() throws ApiException {
        String callUUID = null;
        String sounds = null;
        String legs = null;
        Integer length = null;
        Boolean loop = null;
        Boolean mix = null;
        PlayResponse response = api.v01PlayPost(callUUID, sounds, legs, length, loop, mix);
        // TODO: test validations
    }

    /**
     * /v0.1/PlayStop/
     *
     * Interrupts media playback on a given call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01PlayStopPostTest() throws ApiException {
        String callUUID = null;
        PlayStopResponse response = api.v01PlayStopPost(callUUID);
        // TODO: test validations
    }

    /**
     * /v0.1/RecordStart/
     *
     * Initiates recording of a given call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01RecordStartPostTest() throws ApiException {
        String callUUID = null;
        String fileFormat = null;
        String fileName = null;
        String filePath = null;
        Integer timeLimit = null;
        RecordStartResponse response = api.v01RecordStartPost(callUUID, fileFormat, fileName, filePath, timeLimit);
        // TODO: test validations
    }

    /**
     * /v0.1/RecordStop/
     *
     * Stops the recording of a given call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01RecordStopPostTest() throws ApiException {
        String callUUID = null;
        String recordFile = null;
        RecordStopResponse response = api.v01RecordStopPost(callUUID, recordFile);
        // TODO: test validations
    }

    /**
     * /v0.1/ScheduleHangup/
     *
     * Schedules a hangup for a specific call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ScheduleHangupPostTest() throws ApiException {
        String callUUID = null;
        Integer time = null;
        ScheduleHangupResponse response = api.v01ScheduleHangupPost(callUUID, time);
        // TODO: test validations
    }

    /**
     * /v0.1/SchedulePlay/
     *
     * Schedules media playback for a specific call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01SchedulePlayPostTest() throws ApiException {
        String callUUID = null;
        String sounds = null;
        Integer time = null;
        String legs = null;
        Integer length = null;
        Boolean loop = null;
        Boolean mix = null;
        SchedulePlayResponse response = api.v01SchedulePlayPost(callUUID, sounds, time, legs, length, loop, mix);
        // TODO: test validations
    }

    /**
     * /v0.1/SendDigits/
     *
     * Emits DMTF tones to a call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01SendDigitsPostTest() throws ApiException {
        String callUUID = null;
        String digits = null;
        String leg = null;
        SendDigitsResponse response = api.v01SendDigitsPost(callUUID, digits, leg);
        // TODO: test validations
    }

    /**
     * /v0.1/SoundTouch/
     *
     * Applies SoundTouch effects to a live call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01SoundTouchPostTest() throws ApiException {
        String callUUID = null;
        String audioDirection = null;
        Float pitch = null;
        Float pitchOctaves = null;
        Float pitchSemiTones = null;
        Float rate = null;
        Float tempo = null;
        SoundTouchResponse response = api.v01SoundTouchPost(callUUID, audioDirection, pitch, pitchOctaves, pitchSemiTones, rate, tempo);
        // TODO: test validations
    }

    /**
     * /v0.1/SoundTouchStop/
     *
     * Removes SoundTouch effects from a given call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01SoundTouchStopPostTest() throws ApiException {
        String callUUID = null;
        SoundTouchStopResponse response = api.v01SoundTouchStopPost(callUUID);
        // TODO: test validations
    }

    /**
     * /v0.1/TransferCall/
     *
     * Replaces the RestXML flow of a live call
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01TransferCallPostTest() throws ApiException {
        String callUUID = null;
        String url = null;
        TransferCallResponse response = api.v01TransferCallPost(callUUID, url);
        // TODO: test validations
    }

}
