/*
 * Eqivo API
 * Eqivo OpenApi Specification
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConferenceDeafResponse;
import org.openapitools.client.model.ConferenceHangupResponse;
import org.openapitools.client.model.ConferenceKickResponse;
import org.openapitools.client.model.ConferenceListMembersResponse;
import org.openapitools.client.model.ConferenceListResponse;
import org.openapitools.client.model.ConferenceMuteResponse;
import org.openapitools.client.model.ConferencePlayResponse;
import org.openapitools.client.model.ConferenceRecordStartResponse;
import org.openapitools.client.model.ConferenceRecordStopResponse;
import org.openapitools.client.model.ConferenceSpeakResponse;
import org.openapitools.client.model.ConferenceUndeafResponse;
import org.openapitools.client.model.ConferenceUnmuteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConferenceApi
 */
@Disabled
public class ConferenceApiTest {

    private final ConferenceApi api = new ConferenceApi();

    /**
     * /v0.1/ConferenceDeaf/
     *
     * Blocks audio to one or more conference members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceDeafPostTest() throws ApiException {
        String conferenceName = null;
        String memberID = null;
        ConferenceDeafResponse response = api.v01ConferenceDeafPost(conferenceName, memberID);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceHangup/
     *
     * Kicks one or more conference members, without playing the kick sound
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceHangupPostTest() throws ApiException {
        String conferenceName = null;
        String memberID = null;
        ConferenceHangupResponse response = api.v01ConferenceHangupPost(conferenceName, memberID);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceKick/
     *
     * Kicks one or more conference members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceKickPostTest() throws ApiException {
        String conferenceName = null;
        String memberID = null;
        ConferenceKickResponse response = api.v01ConferenceKickPost(conferenceName, memberID);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceListMembers/
     *
     * Retrieves the member list for a given conference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceListMembersPostTest() throws ApiException {
        String conferenceName = null;
        String callUUIDFilter = null;
        Boolean deafFilter = null;
        String memberFilter = null;
        Boolean mutedFilter = null;
        ConferenceListMembersResponse response = api.v01ConferenceListMembersPost(conferenceName, callUUIDFilter, deafFilter, memberFilter, mutedFilter);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceList/
     *
     * Returns a list of all established conferences
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceListPostTest() throws ApiException {
        String callUUIDFilter = null;
        Boolean deafFilter = null;
        String memberFilter = null;
        Boolean mutedFilter = null;
        ConferenceListResponse response = api.v01ConferenceListPost(callUUIDFilter, deafFilter, memberFilter, mutedFilter);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceMute/
     *
     * Blocks audio from one or more conference members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceMutePostTest() throws ApiException {
        String conferenceName = null;
        String memberID = null;
        ConferenceMuteResponse response = api.v01ConferenceMutePost(conferenceName, memberID);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferencePlay/
     *
     * Plays media to one or more conference members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferencePlayPostTest() throws ApiException {
        String conferenceName = null;
        String filePath = null;
        String memberID = null;
        ConferencePlayResponse response = api.v01ConferencePlayPost(conferenceName, filePath, memberID);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceRecordStart/
     *
     * Initiates a conference recording
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceRecordStartPostTest() throws ApiException {
        String conferenceName = null;
        String fileFormat = null;
        String fileName = null;
        String filePath = null;
        ConferenceRecordStartResponse response = api.v01ConferenceRecordStartPost(conferenceName, fileFormat, fileName, filePath);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceRecordStop/
     *
     * Stops a conference recording
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceRecordStopPostTest() throws ApiException {
        String conferenceName = null;
        String recordFile = null;
        ConferenceRecordStopResponse response = api.v01ConferenceRecordStopPost(conferenceName, recordFile);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceSpeak/
     *
     * Plays synthesized speech into a conference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceSpeakPostTest() throws ApiException {
        String conferenceName = null;
        String memberID = null;
        String text = null;
        ConferenceSpeakResponse response = api.v01ConferenceSpeakPost(conferenceName, memberID, text);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceUndeaf/
     *
     * Restores audio to one or more conference members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceUndeafPostTest() throws ApiException {
        String conferenceName = null;
        String memberID = null;
        ConferenceUndeafResponse response = api.v01ConferenceUndeafPost(conferenceName, memberID);
        // TODO: test validations
    }

    /**
     * /v0.1/ConferenceUnmute/
     *
     * Restores audio from one or more conference members
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v01ConferenceUnmutePostTest() throws ApiException {
        String conferenceName = null;
        String memberID = null;
        ConferenceUnmuteResponse response = api.v01ConferenceUnmutePost(conferenceName, memberID);
        // TODO: test validations
    }

}
