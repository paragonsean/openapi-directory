/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_issue_overview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_issue_overview::OAIEnterprise_issue_overview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_issue_overview::OAIEnterprise_issue_overview() {
    this->initializeModel();
}

OAIEnterprise_issue_overview::~OAIEnterprise_issue_overview() {}

void OAIEnterprise_issue_overview::initializeModel() {

    m_closed_issues_isSet = false;
    m_closed_issues_isValid = false;

    m_open_issues_isSet = false;
    m_open_issues_isValid = false;

    m_total_issues_isSet = false;
    m_total_issues_isValid = false;
}

void OAIEnterprise_issue_overview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_issue_overview::fromJsonObject(QJsonObject json) {

    m_closed_issues_isValid = ::OpenAPI::fromJsonValue(m_closed_issues, json[QString("closed_issues")]);
    m_closed_issues_isSet = !json[QString("closed_issues")].isNull() && m_closed_issues_isValid;

    m_open_issues_isValid = ::OpenAPI::fromJsonValue(m_open_issues, json[QString("open_issues")]);
    m_open_issues_isSet = !json[QString("open_issues")].isNull() && m_open_issues_isValid;

    m_total_issues_isValid = ::OpenAPI::fromJsonValue(m_total_issues, json[QString("total_issues")]);
    m_total_issues_isSet = !json[QString("total_issues")].isNull() && m_total_issues_isValid;
}

QString OAIEnterprise_issue_overview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_issue_overview::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_issues_isSet) {
        obj.insert(QString("closed_issues"), ::OpenAPI::toJsonValue(m_closed_issues));
    }
    if (m_open_issues_isSet) {
        obj.insert(QString("open_issues"), ::OpenAPI::toJsonValue(m_open_issues));
    }
    if (m_total_issues_isSet) {
        obj.insert(QString("total_issues"), ::OpenAPI::toJsonValue(m_total_issues));
    }
    return obj;
}

qint32 OAIEnterprise_issue_overview::getClosedIssues() const {
    return m_closed_issues;
}
void OAIEnterprise_issue_overview::setClosedIssues(const qint32 &closed_issues) {
    m_closed_issues = closed_issues;
    m_closed_issues_isSet = true;
}

bool OAIEnterprise_issue_overview::is_closed_issues_Set() const{
    return m_closed_issues_isSet;
}

bool OAIEnterprise_issue_overview::is_closed_issues_Valid() const{
    return m_closed_issues_isValid;
}

qint32 OAIEnterprise_issue_overview::getOpenIssues() const {
    return m_open_issues;
}
void OAIEnterprise_issue_overview::setOpenIssues(const qint32 &open_issues) {
    m_open_issues = open_issues;
    m_open_issues_isSet = true;
}

bool OAIEnterprise_issue_overview::is_open_issues_Set() const{
    return m_open_issues_isSet;
}

bool OAIEnterprise_issue_overview::is_open_issues_Valid() const{
    return m_open_issues_isValid;
}

qint32 OAIEnterprise_issue_overview::getTotalIssues() const {
    return m_total_issues;
}
void OAIEnterprise_issue_overview::setTotalIssues(const qint32 &total_issues) {
    m_total_issues = total_issues;
    m_total_issues_isSet = true;
}

bool OAIEnterprise_issue_overview::is_total_issues_Set() const{
    return m_total_issues_isSet;
}

bool OAIEnterprise_issue_overview::is_total_issues_Valid() const{
    return m_total_issues_isValid;
}

bool OAIEnterprise_issue_overview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_issues_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_issue_overview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_closed_issues_isValid && m_open_issues_isValid && m_total_issues_isValid && true;
}

} // namespace OpenAPI
