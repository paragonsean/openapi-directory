/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepos_create_commit_status_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepos_create_commit_status_request::OAIRepos_create_commit_status_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepos_create_commit_status_request::OAIRepos_create_commit_status_request() {
    this->initializeModel();
}

OAIRepos_create_commit_status_request::~OAIRepos_create_commit_status_request() {}

void OAIRepos_create_commit_status_request::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;
}

void OAIRepos_create_commit_status_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepos_create_commit_status_request::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("target_url")]);
    m_target_url_isSet = !json[QString("target_url")].isNull() && m_target_url_isValid;
}

QString OAIRepos_create_commit_status_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepos_create_commit_status_request::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("target_url"), ::OpenAPI::toJsonValue(m_target_url));
    }
    return obj;
}

QString OAIRepos_create_commit_status_request::getContext() const {
    return m_context;
}
void OAIRepos_create_commit_status_request::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIRepos_create_commit_status_request::is_context_Set() const{
    return m_context_isSet;
}

bool OAIRepos_create_commit_status_request::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIRepos_create_commit_status_request::getDescription() const {
    return m_description;
}
void OAIRepos_create_commit_status_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepos_create_commit_status_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepos_create_commit_status_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRepos_create_commit_status_request::getState() const {
    return m_state;
}
void OAIRepos_create_commit_status_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRepos_create_commit_status_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRepos_create_commit_status_request::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRepos_create_commit_status_request::getTargetUrl() const {
    return m_target_url;
}
void OAIRepos_create_commit_status_request::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAIRepos_create_commit_status_request::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAIRepos_create_commit_status_request::is_target_url_Valid() const{
    return m_target_url_isValid;
}

bool OAIRepos_create_commit_status_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepos_create_commit_status_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
