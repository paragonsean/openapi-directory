/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINullable_scoped_installation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINullable_scoped_installation::OAINullable_scoped_installation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINullable_scoped_installation::OAINullable_scoped_installation() {
    this->initializeModel();
}

OAINullable_scoped_installation::~OAINullable_scoped_installation() {}

void OAINullable_scoped_installation::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_has_multiple_single_files_isSet = false;
    m_has_multiple_single_files_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_repositories_url_isSet = false;
    m_repositories_url_isValid = false;

    m_repository_selection_isSet = false;
    m_repository_selection_isValid = false;

    m_single_file_name_isSet = false;
    m_single_file_name_isValid = false;

    m_single_file_paths_isSet = false;
    m_single_file_paths_isValid = false;
}

void OAINullable_scoped_installation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINullable_scoped_installation::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_has_multiple_single_files_isValid = ::OpenAPI::fromJsonValue(m_has_multiple_single_files, json[QString("has_multiple_single_files")]);
    m_has_multiple_single_files_isSet = !json[QString("has_multiple_single_files")].isNull() && m_has_multiple_single_files_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_repositories_url_isValid = ::OpenAPI::fromJsonValue(m_repositories_url, json[QString("repositories_url")]);
    m_repositories_url_isSet = !json[QString("repositories_url")].isNull() && m_repositories_url_isValid;

    m_repository_selection_isValid = ::OpenAPI::fromJsonValue(m_repository_selection, json[QString("repository_selection")]);
    m_repository_selection_isSet = !json[QString("repository_selection")].isNull() && m_repository_selection_isValid;

    m_single_file_name_isValid = ::OpenAPI::fromJsonValue(m_single_file_name, json[QString("single_file_name")]);
    m_single_file_name_isSet = !json[QString("single_file_name")].isNull() && m_single_file_name_isValid;

    m_single_file_paths_isValid = ::OpenAPI::fromJsonValue(m_single_file_paths, json[QString("single_file_paths")]);
    m_single_file_paths_isSet = !json[QString("single_file_paths")].isNull() && m_single_file_paths_isValid;
}

QString OAINullable_scoped_installation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINullable_scoped_installation::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_has_multiple_single_files_isSet) {
        obj.insert(QString("has_multiple_single_files"), ::OpenAPI::toJsonValue(m_has_multiple_single_files));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_repositories_url_isSet) {
        obj.insert(QString("repositories_url"), ::OpenAPI::toJsonValue(m_repositories_url));
    }
    if (m_repository_selection_isSet) {
        obj.insert(QString("repository_selection"), ::OpenAPI::toJsonValue(m_repository_selection));
    }
    if (m_single_file_name_isSet) {
        obj.insert(QString("single_file_name"), ::OpenAPI::toJsonValue(m_single_file_name));
    }
    if (m_single_file_paths.size() > 0) {
        obj.insert(QString("single_file_paths"), ::OpenAPI::toJsonValue(m_single_file_paths));
    }
    return obj;
}

OAISimple_user OAINullable_scoped_installation::getAccount() const {
    return m_account;
}
void OAINullable_scoped_installation::setAccount(const OAISimple_user &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAINullable_scoped_installation::is_account_Set() const{
    return m_account_isSet;
}

bool OAINullable_scoped_installation::is_account_Valid() const{
    return m_account_isValid;
}

bool OAINullable_scoped_installation::isHasMultipleSingleFiles() const {
    return m_has_multiple_single_files;
}
void OAINullable_scoped_installation::setHasMultipleSingleFiles(const bool &has_multiple_single_files) {
    m_has_multiple_single_files = has_multiple_single_files;
    m_has_multiple_single_files_isSet = true;
}

bool OAINullable_scoped_installation::is_has_multiple_single_files_Set() const{
    return m_has_multiple_single_files_isSet;
}

bool OAINullable_scoped_installation::is_has_multiple_single_files_Valid() const{
    return m_has_multiple_single_files_isValid;
}

OAIApp_permissions OAINullable_scoped_installation::getPermissions() const {
    return m_permissions;
}
void OAINullable_scoped_installation::setPermissions(const OAIApp_permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAINullable_scoped_installation::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAINullable_scoped_installation::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAINullable_scoped_installation::getRepositoriesUrl() const {
    return m_repositories_url;
}
void OAINullable_scoped_installation::setRepositoriesUrl(const QString &repositories_url) {
    m_repositories_url = repositories_url;
    m_repositories_url_isSet = true;
}

bool OAINullable_scoped_installation::is_repositories_url_Set() const{
    return m_repositories_url_isSet;
}

bool OAINullable_scoped_installation::is_repositories_url_Valid() const{
    return m_repositories_url_isValid;
}

QString OAINullable_scoped_installation::getRepositorySelection() const {
    return m_repository_selection;
}
void OAINullable_scoped_installation::setRepositorySelection(const QString &repository_selection) {
    m_repository_selection = repository_selection;
    m_repository_selection_isSet = true;
}

bool OAINullable_scoped_installation::is_repository_selection_Set() const{
    return m_repository_selection_isSet;
}

bool OAINullable_scoped_installation::is_repository_selection_Valid() const{
    return m_repository_selection_isValid;
}

QString OAINullable_scoped_installation::getSingleFileName() const {
    return m_single_file_name;
}
void OAINullable_scoped_installation::setSingleFileName(const QString &single_file_name) {
    m_single_file_name = single_file_name;
    m_single_file_name_isSet = true;
}

bool OAINullable_scoped_installation::is_single_file_name_Set() const{
    return m_single_file_name_isSet;
}

bool OAINullable_scoped_installation::is_single_file_name_Valid() const{
    return m_single_file_name_isValid;
}

QList<QString> OAINullable_scoped_installation::getSingleFilePaths() const {
    return m_single_file_paths;
}
void OAINullable_scoped_installation::setSingleFilePaths(const QList<QString> &single_file_paths) {
    m_single_file_paths = single_file_paths;
    m_single_file_paths_isSet = true;
}

bool OAINullable_scoped_installation::is_single_file_paths_Set() const{
    return m_single_file_paths_isSet;
}

bool OAINullable_scoped_installation::is_single_file_paths_Valid() const{
    return m_single_file_paths_isValid;
}

bool OAINullable_scoped_installation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_multiple_single_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_file_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINullable_scoped_installation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_isValid && m_permissions_isValid && m_repositories_url_isValid && m_repository_selection_isValid && m_single_file_name_isValid && true;
}

} // namespace OpenAPI
