/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBase_gist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBase_gist::OAIBase_gist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBase_gist::OAIBase_gist() {
    this->initializeModel();
}

OAIBase_gist::~OAIBase_gist() {}

void OAIBase_gist::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_comments_url_isSet = false;
    m_comments_url_isValid = false;

    m_commits_url_isSet = false;
    m_commits_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_forks_isSet = false;
    m_forks_isValid = false;

    m_forks_url_isSet = false;
    m_forks_url_isValid = false;

    m_git_pull_url_isSet = false;
    m_git_pull_url_isValid = false;

    m_git_push_url_isSet = false;
    m_git_push_url_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIBase_gist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBase_gist::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_comments_url_isValid = ::OpenAPI::fromJsonValue(m_comments_url, json[QString("comments_url")]);
    m_comments_url_isSet = !json[QString("comments_url")].isNull() && m_comments_url_isValid;

    m_commits_url_isValid = ::OpenAPI::fromJsonValue(m_commits_url, json[QString("commits_url")]);
    m_commits_url_isSet = !json[QString("commits_url")].isNull() && m_commits_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_forks_isValid = ::OpenAPI::fromJsonValue(m_forks, json[QString("forks")]);
    m_forks_isSet = !json[QString("forks")].isNull() && m_forks_isValid;

    m_forks_url_isValid = ::OpenAPI::fromJsonValue(m_forks_url, json[QString("forks_url")]);
    m_forks_url_isSet = !json[QString("forks_url")].isNull() && m_forks_url_isValid;

    m_git_pull_url_isValid = ::OpenAPI::fromJsonValue(m_git_pull_url, json[QString("git_pull_url")]);
    m_git_pull_url_isSet = !json[QString("git_pull_url")].isNull() && m_git_pull_url_isValid;

    m_git_push_url_isValid = ::OpenAPI::fromJsonValue(m_git_push_url, json[QString("git_push_url")]);
    m_git_push_url_isSet = !json[QString("git_push_url")].isNull() && m_git_push_url_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("history")]);
    m_history_isSet = !json[QString("history")].isNull() && m_history_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIBase_gist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBase_gist::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_comments_url_isSet) {
        obj.insert(QString("comments_url"), ::OpenAPI::toJsonValue(m_comments_url));
    }
    if (m_commits_url_isSet) {
        obj.insert(QString("commits_url"), ::OpenAPI::toJsonValue(m_commits_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_forks.size() > 0) {
        obj.insert(QString("forks"), ::OpenAPI::toJsonValue(m_forks));
    }
    if (m_forks_url_isSet) {
        obj.insert(QString("forks_url"), ::OpenAPI::toJsonValue(m_forks_url));
    }
    if (m_git_pull_url_isSet) {
        obj.insert(QString("git_pull_url"), ::OpenAPI::toJsonValue(m_git_pull_url));
    }
    if (m_git_push_url_isSet) {
        obj.insert(QString("git_push_url"), ::OpenAPI::toJsonValue(m_git_push_url));
    }
    if (m_history.size() > 0) {
        obj.insert(QString("history"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAIBase_gist::getComments() const {
    return m_comments;
}
void OAIBase_gist::setComments(const qint32 &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIBase_gist::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIBase_gist::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIBase_gist::getCommentsUrl() const {
    return m_comments_url;
}
void OAIBase_gist::setCommentsUrl(const QString &comments_url) {
    m_comments_url = comments_url;
    m_comments_url_isSet = true;
}

bool OAIBase_gist::is_comments_url_Set() const{
    return m_comments_url_isSet;
}

bool OAIBase_gist::is_comments_url_Valid() const{
    return m_comments_url_isValid;
}

QString OAIBase_gist::getCommitsUrl() const {
    return m_commits_url;
}
void OAIBase_gist::setCommitsUrl(const QString &commits_url) {
    m_commits_url = commits_url;
    m_commits_url_isSet = true;
}

bool OAIBase_gist::is_commits_url_Set() const{
    return m_commits_url_isSet;
}

bool OAIBase_gist::is_commits_url_Valid() const{
    return m_commits_url_isValid;
}

QDateTime OAIBase_gist::getCreatedAt() const {
    return m_created_at;
}
void OAIBase_gist::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBase_gist::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBase_gist::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBase_gist::getDescription() const {
    return m_description;
}
void OAIBase_gist::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBase_gist::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBase_gist::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, OAIBase_gist_files_value> OAIBase_gist::getFiles() const {
    return m_files;
}
void OAIBase_gist::setFiles(const QMap<QString, OAIBase_gist_files_value> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIBase_gist::is_files_Set() const{
    return m_files_isSet;
}

bool OAIBase_gist::is_files_Valid() const{
    return m_files_isValid;
}

QList<QJsonValue> OAIBase_gist::getForks() const {
    return m_forks;
}
void OAIBase_gist::setForks(const QList<QJsonValue> &forks) {
    m_forks = forks;
    m_forks_isSet = true;
}

bool OAIBase_gist::is_forks_Set() const{
    return m_forks_isSet;
}

bool OAIBase_gist::is_forks_Valid() const{
    return m_forks_isValid;
}

QString OAIBase_gist::getForksUrl() const {
    return m_forks_url;
}
void OAIBase_gist::setForksUrl(const QString &forks_url) {
    m_forks_url = forks_url;
    m_forks_url_isSet = true;
}

bool OAIBase_gist::is_forks_url_Set() const{
    return m_forks_url_isSet;
}

bool OAIBase_gist::is_forks_url_Valid() const{
    return m_forks_url_isValid;
}

QString OAIBase_gist::getGitPullUrl() const {
    return m_git_pull_url;
}
void OAIBase_gist::setGitPullUrl(const QString &git_pull_url) {
    m_git_pull_url = git_pull_url;
    m_git_pull_url_isSet = true;
}

bool OAIBase_gist::is_git_pull_url_Set() const{
    return m_git_pull_url_isSet;
}

bool OAIBase_gist::is_git_pull_url_Valid() const{
    return m_git_pull_url_isValid;
}

QString OAIBase_gist::getGitPushUrl() const {
    return m_git_push_url;
}
void OAIBase_gist::setGitPushUrl(const QString &git_push_url) {
    m_git_push_url = git_push_url;
    m_git_push_url_isSet = true;
}

bool OAIBase_gist::is_git_push_url_Set() const{
    return m_git_push_url_isSet;
}

bool OAIBase_gist::is_git_push_url_Valid() const{
    return m_git_push_url_isValid;
}

QList<QJsonValue> OAIBase_gist::getHistory() const {
    return m_history;
}
void OAIBase_gist::setHistory(const QList<QJsonValue> &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIBase_gist::is_history_Set() const{
    return m_history_isSet;
}

bool OAIBase_gist::is_history_Valid() const{
    return m_history_isValid;
}

QString OAIBase_gist::getHtmlUrl() const {
    return m_html_url;
}
void OAIBase_gist::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIBase_gist::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIBase_gist::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIBase_gist::getId() const {
    return m_id;
}
void OAIBase_gist::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBase_gist::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBase_gist::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBase_gist::getNodeId() const {
    return m_node_id;
}
void OAIBase_gist::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIBase_gist::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIBase_gist::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAISimple_user OAIBase_gist::getOwner() const {
    return m_owner;
}
void OAIBase_gist::setOwner(const OAISimple_user &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIBase_gist::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIBase_gist::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIBase_gist::isRPublic() const {
    return m_r_public;
}
void OAIBase_gist::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIBase_gist::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIBase_gist::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAIBase_gist::isTruncated() const {
    return m_truncated;
}
void OAIBase_gist::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIBase_gist::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIBase_gist::is_truncated_Valid() const{
    return m_truncated_isValid;
}

QDateTime OAIBase_gist::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBase_gist::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBase_gist::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBase_gist::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIBase_gist::getUrl() const {
    return m_url;
}
void OAIBase_gist::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBase_gist::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBase_gist::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIBase_gist::getUser() const {
    return m_user;
}
void OAIBase_gist::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIBase_gist::is_user_Set() const{
    return m_user_isSet;
}

bool OAIBase_gist::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIBase_gist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_pull_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_push_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBase_gist::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comments_isValid && m_comments_url_isValid && m_commits_url_isValid && m_created_at_isValid && m_description_isValid && m_files_isValid && m_forks_url_isValid && m_git_pull_url_isValid && m_git_push_url_isValid && m_html_url_isValid && m_id_isValid && m_node_id_isValid && m_r_public_isValid && m_updated_at_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
