/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOauthAuthorizationsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIOauthAuthorizationsApi::OAIOauthAuthorizationsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIOauthAuthorizationsApi::~OAIOauthAuthorizationsApi() {
}

void OAIOauthAuthorizationsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}/api/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server or Enterprise Cloud hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server or Enterprise Cloud protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("oauthAuthorizations_createAuthorization", defaultConf);
    _serverIndices.insert("oauthAuthorizations_createAuthorization", 0);
    _serverConfigs.insert("oauthAuthorizations_deleteAuthorization", defaultConf);
    _serverIndices.insert("oauthAuthorizations_deleteAuthorization", 0);
    _serverConfigs.insert("oauthAuthorizations_deleteGrant", defaultConf);
    _serverIndices.insert("oauthAuthorizations_deleteGrant", 0);
    _serverConfigs.insert("oauthAuthorizations_getAuthorization", defaultConf);
    _serverIndices.insert("oauthAuthorizations_getAuthorization", 0);
    _serverConfigs.insert("oauthAuthorizations_getGrant", defaultConf);
    _serverIndices.insert("oauthAuthorizations_getGrant", 0);
    _serverConfigs.insert("oauthAuthorizations_getOrCreateAuthorizationForApp", defaultConf);
    _serverIndices.insert("oauthAuthorizations_getOrCreateAuthorizationForApp", 0);
    _serverConfigs.insert("oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprint", defaultConf);
    _serverIndices.insert("oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprint", 0);
    _serverConfigs.insert("oauthAuthorizations_listAuthorizations", defaultConf);
    _serverIndices.insert("oauthAuthorizations_listAuthorizations", 0);
    _serverConfigs.insert("oauthAuthorizations_listGrants", defaultConf);
    _serverIndices.insert("oauthAuthorizations_listGrants", 0);
    _serverConfigs.insert("oauthAuthorizations_updateAuthorization", defaultConf);
    _serverIndices.insert("oauthAuthorizations_updateAuthorization", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIOauthAuthorizationsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIOauthAuthorizationsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIOauthAuthorizationsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIOauthAuthorizationsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIOauthAuthorizationsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIOauthAuthorizationsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIOauthAuthorizationsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIOauthAuthorizationsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIOauthAuthorizationsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIOauthAuthorizationsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOauthAuthorizationsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIOauthAuthorizationsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIOauthAuthorizationsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIOauthAuthorizationsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIOauthAuthorizationsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIOauthAuthorizationsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIOauthAuthorizationsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIOauthAuthorizationsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIOauthAuthorizationsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_createAuthorization(const ::OpenAPI::OptionalParam<OAIOauth_authorizations_create_authorization_request> &oai_oauth_authorizations_create_authorization_request) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_createAuthorization"][_serverIndices.value("oauthAuthorizations_createAuthorization")].URL()+"/authorizations");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_oauth_authorizations_create_authorization_request.hasValue()){

        
        QByteArray output = oai_oauth_authorizations_create_authorization_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_createAuthorizationCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_createAuthorizationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_createAuthorizationSignal(output);
        Q_EMIT oauthAuthorizations_createAuthorizationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_createAuthorizationSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_createAuthorizationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_createAuthorizationSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_createAuthorizationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_deleteAuthorization(const qint32 &authorization_id) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_deleteAuthorization"][_serverIndices.value("oauthAuthorizations_deleteAuthorization")].URL()+"/authorizations/{authorization_id}");
    
    
    {
        QString authorization_idPathParam("{");
        authorization_idPathParam.append("authorization_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorization_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorization_id"+pathSuffix : pathPrefix;
        fullPath.replace(authorization_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorization_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_deleteAuthorizationCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_deleteAuthorizationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_deleteAuthorizationSignal();
        Q_EMIT oauthAuthorizations_deleteAuthorizationSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_deleteAuthorizationSignalE(error_type, error_str);
        Q_EMIT oauthAuthorizations_deleteAuthorizationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_deleteAuthorizationSignalError(error_type, error_str);
        Q_EMIT oauthAuthorizations_deleteAuthorizationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_deleteGrant(const qint32 &grant_id) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_deleteGrant"][_serverIndices.value("oauthAuthorizations_deleteGrant")].URL()+"/applications/grants/{grant_id}");
    
    
    {
        QString grant_idPathParam("{");
        grant_idPathParam.append("grant_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "grant_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"grant_id"+pathSuffix : pathPrefix;
        fullPath.replace(grant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(grant_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_deleteGrantCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_deleteGrantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_deleteGrantSignal();
        Q_EMIT oauthAuthorizations_deleteGrantSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_deleteGrantSignalE(error_type, error_str);
        Q_EMIT oauthAuthorizations_deleteGrantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_deleteGrantSignalError(error_type, error_str);
        Q_EMIT oauthAuthorizations_deleteGrantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getAuthorization(const qint32 &authorization_id) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_getAuthorization"][_serverIndices.value("oauthAuthorizations_getAuthorization")].URL()+"/authorizations/{authorization_id}");
    
    
    {
        QString authorization_idPathParam("{");
        authorization_idPathParam.append("authorization_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorization_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorization_id"+pathSuffix : pathPrefix;
        fullPath.replace(authorization_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorization_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_getAuthorizationCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getAuthorizationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_getAuthorizationSignal(output);
        Q_EMIT oauthAuthorizations_getAuthorizationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_getAuthorizationSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getAuthorizationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_getAuthorizationSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getAuthorizationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getGrant(const qint32 &grant_id) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_getGrant"][_serverIndices.value("oauthAuthorizations_getGrant")].URL()+"/applications/grants/{grant_id}");
    
    
    {
        QString grant_idPathParam("{");
        grant_idPathParam.append("grant_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "grant_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"grant_id"+pathSuffix : pathPrefix;
        fullPath.replace(grant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(grant_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_getGrantCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getGrantCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApplication_grant output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_getGrantSignal(output);
        Q_EMIT oauthAuthorizations_getGrantSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_getGrantSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getGrantSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_getGrantSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getGrantSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getOrCreateAuthorizationForApp(const QString &client_id, const OAIOauth_authorizations_get_or_create_authorization_for_app_request &oai_oauth_authorizations_get_or_create_authorization_for_app_request) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_getOrCreateAuthorizationForApp"][_serverIndices.value("oauthAuthorizations_getOrCreateAuthorizationForApp")].URL()+"/authorizations/clients/{client_id}");
    
    
    {
        QString client_idPathParam("{");
        client_idPathParam.append("client_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client_id"+pathSuffix : pathPrefix;
        fullPath.replace(client_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_oauth_authorizations_get_or_create_authorization_for_app_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_getOrCreateAuthorizationForAppCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getOrCreateAuthorizationForAppCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppSignal(output);
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprint(const QString &client_id, const QString &fingerprint, const OAIOauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request &oai_oauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprint"][_serverIndices.value("oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprint")].URL()+"/authorizations/clients/{client_id}/{fingerprint}");
    
    
    {
        QString client_idPathParam("{");
        client_idPathParam.append("client_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client_id"+pathSuffix : pathPrefix;
        fullPath.replace(client_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_id)));
    }
    
    {
        QString fingerprintPathParam("{");
        fingerprintPathParam.append("fingerprint").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "fingerprint", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"fingerprint"+pathSuffix : pathPrefix;
        fullPath.replace(fingerprintPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(fingerprint)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_oauth_authorizations_get_or_create_authorization_for_app_and_fingerprint_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignal(output);
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_getOrCreateAuthorizationForAppAndFingerprintSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_listAuthorizations(const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_listAuthorizations"][_serverIndices.value("oauthAuthorizations_listAuthorizations")].URL()+"/authorizations");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (client_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_id")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_listAuthorizationsCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_listAuthorizationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAuthorization> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAuthorization val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_listAuthorizationsSignal(output);
        Q_EMIT oauthAuthorizations_listAuthorizationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_listAuthorizationsSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_listAuthorizationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_listAuthorizationsSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_listAuthorizationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_listGrants(const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &client_id) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_listGrants"][_serverIndices.value("oauthAuthorizations_listGrants")].URL()+"/applications/grants");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (client_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_id")).append(querySuffix).append(QUrl::toPercentEncoding(client_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_listGrantsCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_listGrantsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIApplication_grant> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIApplication_grant val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_listGrantsSignal(output);
        Q_EMIT oauthAuthorizations_listGrantsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_listGrantsSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_listGrantsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_listGrantsSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_listGrantsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_updateAuthorization(const qint32 &authorization_id, const ::OpenAPI::OptionalParam<OAIOauth_authorizations_update_authorization_request> &oai_oauth_authorizations_update_authorization_request) {
    QString fullPath = QString(_serverConfigs["oauthAuthorizations_updateAuthorization"][_serverIndices.value("oauthAuthorizations_updateAuthorization")].URL()+"/authorizations/{authorization_id}");
    
    
    {
        QString authorization_idPathParam("{");
        authorization_idPathParam.append("authorization_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorization_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorization_id"+pathSuffix : pathPrefix;
        fullPath.replace(authorization_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorization_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_oauth_authorizations_update_authorization_request.hasValue()){

        
        QByteArray output = oai_oauth_authorizations_update_authorization_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIOauthAuthorizationsApi::oauthAuthorizations_updateAuthorizationCallback);
    connect(this, &OAIOauthAuthorizationsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIOauthAuthorizationsApi::oauthAuthorizations_updateAuthorizationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT oauthAuthorizations_updateAuthorizationSignal(output);
        Q_EMIT oauthAuthorizations_updateAuthorizationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT oauthAuthorizations_updateAuthorizationSignalE(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_updateAuthorizationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT oauthAuthorizations_updateAuthorizationSignalError(output, error_type, error_str);
        Q_EMIT oauthAuthorizations_updateAuthorizationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIOauthAuthorizationsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
