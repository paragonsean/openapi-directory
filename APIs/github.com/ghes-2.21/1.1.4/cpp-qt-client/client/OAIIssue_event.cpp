/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_event::OAIIssue_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_event::OAIIssue_event() {
    this->initializeModel();
}

OAIIssue_event::~OAIIssue_event() {}

void OAIIssue_event::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assigner_isSet = false;
    m_assigner_isValid = false;

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dismissed_review_isSet = false;
    m_dismissed_review_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_lock_reason_isSet = false;
    m_lock_reason_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_performed_via_github_app_isSet = false;
    m_performed_via_github_app_isValid = false;

    m_project_card_isSet = false;
    m_project_card_isValid = false;

    m_rename_isSet = false;
    m_rename_isValid = false;

    m_requested_reviewer_isSet = false;
    m_requested_reviewer_isValid = false;

    m_requested_team_isSet = false;
    m_requested_team_isValid = false;

    m_review_requester_isSet = false;
    m_review_requester_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIIssue_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_event::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assigner_isValid = ::OpenAPI::fromJsonValue(m_assigner, json[QString("assigner")]);
    m_assigner_isSet = !json[QString("assigner")].isNull() && m_assigner_isValid;

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commit_url")]);
    m_commit_url_isSet = !json[QString("commit_url")].isNull() && m_commit_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dismissed_review_isValid = ::OpenAPI::fromJsonValue(m_dismissed_review, json[QString("dismissed_review")]);
    m_dismissed_review_isSet = !json[QString("dismissed_review")].isNull() && m_dismissed_review_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_lock_reason_isValid = ::OpenAPI::fromJsonValue(m_lock_reason, json[QString("lock_reason")]);
    m_lock_reason_isSet = !json[QString("lock_reason")].isNull() && m_lock_reason_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_performed_via_github_app_isValid = ::OpenAPI::fromJsonValue(m_performed_via_github_app, json[QString("performed_via_github_app")]);
    m_performed_via_github_app_isSet = !json[QString("performed_via_github_app")].isNull() && m_performed_via_github_app_isValid;

    m_project_card_isValid = ::OpenAPI::fromJsonValue(m_project_card, json[QString("project_card")]);
    m_project_card_isSet = !json[QString("project_card")].isNull() && m_project_card_isValid;

    m_rename_isValid = ::OpenAPI::fromJsonValue(m_rename, json[QString("rename")]);
    m_rename_isSet = !json[QString("rename")].isNull() && m_rename_isValid;

    m_requested_reviewer_isValid = ::OpenAPI::fromJsonValue(m_requested_reviewer, json[QString("requested_reviewer")]);
    m_requested_reviewer_isSet = !json[QString("requested_reviewer")].isNull() && m_requested_reviewer_isValid;

    m_requested_team_isValid = ::OpenAPI::fromJsonValue(m_requested_team, json[QString("requested_team")]);
    m_requested_team_isSet = !json[QString("requested_team")].isNull() && m_requested_team_isValid;

    m_review_requester_isValid = ::OpenAPI::fromJsonValue(m_review_requester, json[QString("review_requester")]);
    m_review_requester_isSet = !json[QString("review_requester")].isNull() && m_review_requester_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIIssue_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_event::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assigner.isSet()) {
        obj.insert(QString("assigner"), ::OpenAPI::toJsonValue(m_assigner));
    }
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_commit_url_isSet) {
        obj.insert(QString("commit_url"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dismissed_review.isSet()) {
        obj.insert(QString("dismissed_review"), ::OpenAPI::toJsonValue(m_dismissed_review));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_label.isSet()) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_lock_reason_isSet) {
        obj.insert(QString("lock_reason"), ::OpenAPI::toJsonValue(m_lock_reason));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_performed_via_github_app.isSet()) {
        obj.insert(QString("performed_via_github_app"), ::OpenAPI::toJsonValue(m_performed_via_github_app));
    }
    if (m_project_card.isSet()) {
        obj.insert(QString("project_card"), ::OpenAPI::toJsonValue(m_project_card));
    }
    if (m_rename.isSet()) {
        obj.insert(QString("rename"), ::OpenAPI::toJsonValue(m_rename));
    }
    if (m_requested_reviewer.isSet()) {
        obj.insert(QString("requested_reviewer"), ::OpenAPI::toJsonValue(m_requested_reviewer));
    }
    if (m_requested_team.isSet()) {
        obj.insert(QString("requested_team"), ::OpenAPI::toJsonValue(m_requested_team));
    }
    if (m_review_requester.isSet()) {
        obj.insert(QString("review_requester"), ::OpenAPI::toJsonValue(m_review_requester));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAINullable_simple_user OAIIssue_event::getActor() const {
    return m_actor;
}
void OAIIssue_event::setActor(const OAINullable_simple_user &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIIssue_event::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIIssue_event::is_actor_Valid() const{
    return m_actor_isValid;
}

OAINullable_simple_user OAIIssue_event::getAssignee() const {
    return m_assignee;
}
void OAIIssue_event::setAssignee(const OAINullable_simple_user &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIIssue_event::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIIssue_event::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAINullable_simple_user OAIIssue_event::getAssigner() const {
    return m_assigner;
}
void OAIIssue_event::setAssigner(const OAINullable_simple_user &assigner) {
    m_assigner = assigner;
    m_assigner_isSet = true;
}

bool OAIIssue_event::is_assigner_Set() const{
    return m_assigner_isSet;
}

bool OAIIssue_event::is_assigner_Valid() const{
    return m_assigner_isValid;
}

OAIAuthor_association OAIIssue_event::getAuthorAssociation() const {
    return m_author_association;
}
void OAIIssue_event::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAIIssue_event::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAIIssue_event::is_author_association_Valid() const{
    return m_author_association_isValid;
}

QString OAIIssue_event::getCommitId() const {
    return m_commit_id;
}
void OAIIssue_event::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIIssue_event::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIIssue_event::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAIIssue_event::getCommitUrl() const {
    return m_commit_url;
}
void OAIIssue_event::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAIIssue_event::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAIIssue_event::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

QDateTime OAIIssue_event::getCreatedAt() const {
    return m_created_at;
}
void OAIIssue_event::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIIssue_event::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIIssue_event::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIIssue_event_dismissed_review OAIIssue_event::getDismissedReview() const {
    return m_dismissed_review;
}
void OAIIssue_event::setDismissedReview(const OAIIssue_event_dismissed_review &dismissed_review) {
    m_dismissed_review = dismissed_review;
    m_dismissed_review_isSet = true;
}

bool OAIIssue_event::is_dismissed_review_Set() const{
    return m_dismissed_review_isSet;
}

bool OAIIssue_event::is_dismissed_review_Valid() const{
    return m_dismissed_review_isValid;
}

QString OAIIssue_event::getEvent() const {
    return m_event;
}
void OAIIssue_event::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIIssue_event::is_event_Set() const{
    return m_event_isSet;
}

bool OAIIssue_event::is_event_Valid() const{
    return m_event_isValid;
}

qint32 OAIIssue_event::getId() const {
    return m_id;
}
void OAIIssue_event::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssue_event::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssue_event::is_id_Valid() const{
    return m_id_isValid;
}

OAIIssue_simple OAIIssue_event::getIssue() const {
    return m_issue;
}
void OAIIssue_event::setIssue(const OAIIssue_simple &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIIssue_event::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIIssue_event::is_issue_Valid() const{
    return m_issue_isValid;
}

OAIIssue_event_label OAIIssue_event::getLabel() const {
    return m_label;
}
void OAIIssue_event::setLabel(const OAIIssue_event_label &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIIssue_event::is_label_Set() const{
    return m_label_isSet;
}

bool OAIIssue_event::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIIssue_event::getLockReason() const {
    return m_lock_reason;
}
void OAIIssue_event::setLockReason(const QString &lock_reason) {
    m_lock_reason = lock_reason;
    m_lock_reason_isSet = true;
}

bool OAIIssue_event::is_lock_reason_Set() const{
    return m_lock_reason_isSet;
}

bool OAIIssue_event::is_lock_reason_Valid() const{
    return m_lock_reason_isValid;
}

OAIIssue_event_milestone OAIIssue_event::getMilestone() const {
    return m_milestone;
}
void OAIIssue_event::setMilestone(const OAIIssue_event_milestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIIssue_event::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIIssue_event::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAIIssue_event::getNodeId() const {
    return m_node_id;
}
void OAIIssue_event::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIIssue_event::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIIssue_event::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAINullable_integration OAIIssue_event::getPerformedViaGithubApp() const {
    return m_performed_via_github_app;
}
void OAIIssue_event::setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app) {
    m_performed_via_github_app = performed_via_github_app;
    m_performed_via_github_app_isSet = true;
}

bool OAIIssue_event::is_performed_via_github_app_Set() const{
    return m_performed_via_github_app_isSet;
}

bool OAIIssue_event::is_performed_via_github_app_Valid() const{
    return m_performed_via_github_app_isValid;
}

OAIIssue_event_project_card OAIIssue_event::getProjectCard() const {
    return m_project_card;
}
void OAIIssue_event::setProjectCard(const OAIIssue_event_project_card &project_card) {
    m_project_card = project_card;
    m_project_card_isSet = true;
}

bool OAIIssue_event::is_project_card_Set() const{
    return m_project_card_isSet;
}

bool OAIIssue_event::is_project_card_Valid() const{
    return m_project_card_isValid;
}

OAIIssue_event_rename OAIIssue_event::getRename() const {
    return m_rename;
}
void OAIIssue_event::setRename(const OAIIssue_event_rename &rename) {
    m_rename = rename;
    m_rename_isSet = true;
}

bool OAIIssue_event::is_rename_Set() const{
    return m_rename_isSet;
}

bool OAIIssue_event::is_rename_Valid() const{
    return m_rename_isValid;
}

OAINullable_simple_user OAIIssue_event::getRequestedReviewer() const {
    return m_requested_reviewer;
}
void OAIIssue_event::setRequestedReviewer(const OAINullable_simple_user &requested_reviewer) {
    m_requested_reviewer = requested_reviewer;
    m_requested_reviewer_isSet = true;
}

bool OAIIssue_event::is_requested_reviewer_Set() const{
    return m_requested_reviewer_isSet;
}

bool OAIIssue_event::is_requested_reviewer_Valid() const{
    return m_requested_reviewer_isValid;
}

OAITeam OAIIssue_event::getRequestedTeam() const {
    return m_requested_team;
}
void OAIIssue_event::setRequestedTeam(const OAITeam &requested_team) {
    m_requested_team = requested_team;
    m_requested_team_isSet = true;
}

bool OAIIssue_event::is_requested_team_Set() const{
    return m_requested_team_isSet;
}

bool OAIIssue_event::is_requested_team_Valid() const{
    return m_requested_team_isValid;
}

OAINullable_simple_user OAIIssue_event::getReviewRequester() const {
    return m_review_requester;
}
void OAIIssue_event::setReviewRequester(const OAINullable_simple_user &review_requester) {
    m_review_requester = review_requester;
    m_review_requester_isSet = true;
}

bool OAIIssue_event::is_review_requester_Set() const{
    return m_review_requester_isSet;
}

bool OAIIssue_event::is_review_requester_Valid() const{
    return m_review_requester_isValid;
}

QString OAIIssue_event::getUrl() const {
    return m_url;
}
void OAIIssue_event::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIssue_event::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIssue_event::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIIssue_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismissed_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performed_via_github_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rename.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_reviewer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_requester.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actor_isValid && m_commit_id_isValid && m_commit_url_isValid && m_created_at_isValid && m_event_isValid && m_id_isValid && m_node_id_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
