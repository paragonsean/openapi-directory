/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_result_text_matches_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_result_text_matches_inner::OAISearch_result_text_matches_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_result_text_matches_inner::OAISearch_result_text_matches_inner() {
    this->initializeModel();
}

OAISearch_result_text_matches_inner::~OAISearch_result_text_matches_inner() {}

void OAISearch_result_text_matches_inner::initializeModel() {

    m_fragment_isSet = false;
    m_fragment_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_object_url_isSet = false;
    m_object_url_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;
}

void OAISearch_result_text_matches_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_result_text_matches_inner::fromJsonObject(QJsonObject json) {

    m_fragment_isValid = ::OpenAPI::fromJsonValue(m_fragment, json[QString("fragment")]);
    m_fragment_isSet = !json[QString("fragment")].isNull() && m_fragment_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("object_type")]);
    m_object_type_isSet = !json[QString("object_type")].isNull() && m_object_type_isValid;

    m_object_url_isValid = ::OpenAPI::fromJsonValue(m_object_url, json[QString("object_url")]);
    m_object_url_isSet = !json[QString("object_url")].isNull() && m_object_url_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;
}

QString OAISearch_result_text_matches_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_result_text_matches_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_fragment_isSet) {
        obj.insert(QString("fragment"), ::OpenAPI::toJsonValue(m_fragment));
    }
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("object_type"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_object_url_isSet) {
        obj.insert(QString("object_url"), ::OpenAPI::toJsonValue(m_object_url));
    }
    if (m_property_isSet) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    return obj;
}

QString OAISearch_result_text_matches_inner::getFragment() const {
    return m_fragment;
}
void OAISearch_result_text_matches_inner::setFragment(const QString &fragment) {
    m_fragment = fragment;
    m_fragment_isSet = true;
}

bool OAISearch_result_text_matches_inner::is_fragment_Set() const{
    return m_fragment_isSet;
}

bool OAISearch_result_text_matches_inner::is_fragment_Valid() const{
    return m_fragment_isValid;
}

QList<OAISearch_result_text_matches_inner_matches_inner> OAISearch_result_text_matches_inner::getMatches() const {
    return m_matches;
}
void OAISearch_result_text_matches_inner::setMatches(const QList<OAISearch_result_text_matches_inner_matches_inner> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAISearch_result_text_matches_inner::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAISearch_result_text_matches_inner::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAISearch_result_text_matches_inner::getObjectType() const {
    return m_object_type;
}
void OAISearch_result_text_matches_inner::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAISearch_result_text_matches_inner::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAISearch_result_text_matches_inner::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAISearch_result_text_matches_inner::getObjectUrl() const {
    return m_object_url;
}
void OAISearch_result_text_matches_inner::setObjectUrl(const QString &object_url) {
    m_object_url = object_url;
    m_object_url_isSet = true;
}

bool OAISearch_result_text_matches_inner::is_object_url_Set() const{
    return m_object_url_isSet;
}

bool OAISearch_result_text_matches_inner::is_object_url_Valid() const{
    return m_object_url_isValid;
}

QString OAISearch_result_text_matches_inner::getProperty() const {
    return m_property;
}
void OAISearch_result_text_matches_inner::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAISearch_result_text_matches_inner::is_property_Set() const{
    return m_property_isSet;
}

bool OAISearch_result_text_matches_inner::is_property_Valid() const{
    return m_property_isValid;
}

bool OAISearch_result_text_matches_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fragment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_result_text_matches_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
