/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAIEmail.h"
#include "OAIGpg_key.h"
#include "OAIHovercard.h"
#include "OAIKey.h"
#include "OAIKey_simple.h"
#include "OAIObject.h"
#include "OAIPrivate_user.h"
#include "OAISimple_user.h"
#include "OAIUsers_add_email_for_authenticated_request.h"
#include "OAIUsers_create_gpg_key_for_authenticated_request.h"
#include "OAIUsers_create_public_ssh_key_for_authenticated_request.h"
#include "OAIUsers_delete_email_for_authenticated_request.h"
#include "OAIUsers_get_authenticated_200_response.h"
#include "OAIUsers_update_authenticated_request.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_users_add_email_for_authenticated_request OAIUsers_add_email_for_authenticated_request [optional]
    */
    virtual void users_addEmailForAuthenticated(const ::OpenAPI::OptionalParam<OAIUsers_add_email_for_authenticated_request> &oai_users_add_email_for_authenticated_request = ::OpenAPI::OptionalParam<OAIUsers_add_email_for_authenticated_request>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  target_user QString [required]
    */
    virtual void users_checkFollowingForUser(const QString &username, const QString &target_user);

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_checkPersonIsFollowedByAuthenticated(const QString &username);

    /**
    * @param[in]  oai_users_create_gpg_key_for_authenticated_request OAIUsers_create_gpg_key_for_authenticated_request [required]
    */
    virtual void users_createGpgKeyForAuthenticated(const OAIUsers_create_gpg_key_for_authenticated_request &oai_users_create_gpg_key_for_authenticated_request);

    /**
    * @param[in]  oai_users_create_public_ssh_key_for_authenticated_request OAIUsers_create_public_ssh_key_for_authenticated_request [required]
    */
    virtual void users_createPublicSshKeyForAuthenticated(const OAIUsers_create_public_ssh_key_for_authenticated_request &oai_users_create_public_ssh_key_for_authenticated_request);

    /**
    * @param[in]  oai_users_delete_email_for_authenticated_request OAIUsers_delete_email_for_authenticated_request [optional]
    */
    virtual void users_deleteEmailForAuthenticated(const ::OpenAPI::OptionalParam<OAIUsers_delete_email_for_authenticated_request> &oai_users_delete_email_for_authenticated_request = ::OpenAPI::OptionalParam<OAIUsers_delete_email_for_authenticated_request>());

    /**
    * @param[in]  gpg_key_id qint32 [required]
    */
    virtual void users_deleteGpgKeyForAuthenticated(const qint32 &gpg_key_id);

    /**
    * @param[in]  key_id qint32 [required]
    */
    virtual void users_deletePublicSshKeyForAuthenticated(const qint32 &key_id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_follow(const QString &username);


    virtual void users_getAuthenticated();

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_getByUsername(const QString &username);

    /**
    * @param[in]  username QString [required]
    * @param[in]  subject_type QString [optional]
    * @param[in]  subject_id QString [optional]
    */
    virtual void users_getContextForUser(const QString &username, const ::OpenAPI::OptionalParam<QString> &subject_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  gpg_key_id qint32 [required]
    */
    virtual void users_getGpgKeyForAuthenticated(const qint32 &gpg_key_id);

    /**
    * @param[in]  key_id qint32 [required]
    */
    virtual void users_getPublicSshKeyForAuthenticated(const qint32 &key_id);

    /**
    * @param[in]  since qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void users_list(const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listEmailsForAuthenticated(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowedByAuthenticated(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowersForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowersForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowingForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listGpgKeysForAuthenticated(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listGpgKeysForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listPublicEmailsForAuthenticated(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listPublicKeysForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listPublicSshKeysForAuthenticated(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_unfollow(const QString &username);

    /**
    * @param[in]  oai_users_update_authenticated_request OAIUsers_update_authenticated_request [optional]
    */
    virtual void users_updateAuthenticated(const ::OpenAPI::OptionalParam<OAIUsers_update_authenticated_request> &oai_users_update_authenticated_request = ::OpenAPI::OptionalParam<OAIUsers_update_authenticated_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void users_addEmailForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_checkFollowingForUserCallback(OAIHttpRequestWorker *worker);
    void users_checkPersonIsFollowedByAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_createGpgKeyForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_createPublicSshKeyForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_deleteEmailForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_deleteGpgKeyForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_deletePublicSshKeyForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_followCallback(OAIHttpRequestWorker *worker);
    void users_getAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_getByUsernameCallback(OAIHttpRequestWorker *worker);
    void users_getContextForUserCallback(OAIHttpRequestWorker *worker);
    void users_getGpgKeyForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_getPublicSshKeyForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_listCallback(OAIHttpRequestWorker *worker);
    void users_listEmailsForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_listFollowedByAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_listFollowersForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_listFollowersForUserCallback(OAIHttpRequestWorker *worker);
    void users_listFollowingForUserCallback(OAIHttpRequestWorker *worker);
    void users_listGpgKeysForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_listGpgKeysForUserCallback(OAIHttpRequestWorker *worker);
    void users_listPublicEmailsForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_listPublicKeysForUserCallback(OAIHttpRequestWorker *worker);
    void users_listPublicSshKeysForAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_unfollowCallback(OAIHttpRequestWorker *worker);
    void users_updateAuthenticatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void users_addEmailForAuthenticatedSignal(QList<OAIEmail> summary);
    void users_checkFollowingForUserSignal();
    void users_checkPersonIsFollowedByAuthenticatedSignal();
    void users_createGpgKeyForAuthenticatedSignal(OAIGpg_key summary);
    void users_createPublicSshKeyForAuthenticatedSignal(OAIKey summary);
    void users_deleteEmailForAuthenticatedSignal();
    void users_deleteGpgKeyForAuthenticatedSignal();
    void users_deletePublicSshKeyForAuthenticatedSignal();
    void users_followSignal();
    void users_getAuthenticatedSignal(OAIUsers_get_authenticated_200_response summary);
    void users_getByUsernameSignal(OAIUsers_get_authenticated_200_response summary);
    void users_getContextForUserSignal(OAIHovercard summary);
    void users_getGpgKeyForAuthenticatedSignal(OAIGpg_key summary);
    void users_getPublicSshKeyForAuthenticatedSignal(OAIKey summary);
    void users_listSignal(QList<OAISimple_user> summary);
    void users_listEmailsForAuthenticatedSignal(QList<OAIEmail> summary);
    void users_listFollowedByAuthenticatedSignal(QList<OAISimple_user> summary);
    void users_listFollowersForAuthenticatedUserSignal(QList<OAISimple_user> summary);
    void users_listFollowersForUserSignal(QList<OAISimple_user> summary);
    void users_listFollowingForUserSignal(QList<OAISimple_user> summary);
    void users_listGpgKeysForAuthenticatedSignal(QList<OAIGpg_key> summary);
    void users_listGpgKeysForUserSignal(QList<OAIGpg_key> summary);
    void users_listPublicEmailsForAuthenticatedSignal(QList<OAIEmail> summary);
    void users_listPublicKeysForUserSignal(QList<OAIKey_simple> summary);
    void users_listPublicSshKeysForAuthenticatedSignal(QList<OAIKey> summary);
    void users_unfollowSignal();
    void users_updateAuthenticatedSignal(OAIPrivate_user summary);


    void users_addEmailForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void users_checkFollowingForUserSignalFull(OAIHttpRequestWorker *worker);
    void users_checkPersonIsFollowedByAuthenticatedSignalFull(OAIHttpRequestWorker *worker);
    void users_createGpgKeyForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIGpg_key summary);
    void users_createPublicSshKeyForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIKey summary);
    void users_deleteEmailForAuthenticatedSignalFull(OAIHttpRequestWorker *worker);
    void users_deleteGpgKeyForAuthenticatedSignalFull(OAIHttpRequestWorker *worker);
    void users_deletePublicSshKeyForAuthenticatedSignalFull(OAIHttpRequestWorker *worker);
    void users_followSignalFull(OAIHttpRequestWorker *worker);
    void users_getAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIUsers_get_authenticated_200_response summary);
    void users_getByUsernameSignalFull(OAIHttpRequestWorker *worker, OAIUsers_get_authenticated_200_response summary);
    void users_getContextForUserSignalFull(OAIHttpRequestWorker *worker, OAIHovercard summary);
    void users_getGpgKeyForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIGpg_key summary);
    void users_getPublicSshKeyForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIKey summary);
    void users_listSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listEmailsForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void users_listFollowedByAuthenticatedSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listFollowersForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listFollowersForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listFollowingForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listGpgKeysForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, QList<OAIGpg_key> summary);
    void users_listGpgKeysForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIGpg_key> summary);
    void users_listPublicEmailsForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void users_listPublicKeysForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey_simple> summary);
    void users_listPublicSshKeysForAuthenticatedSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey> summary);
    void users_unfollowSignalFull(OAIHttpRequestWorker *worker);
    void users_updateAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIPrivate_user summary);

    Q_DECL_DEPRECATED_X("Use users_addEmailForAuthenticatedSignalError() instead")
    void users_addEmailForAuthenticatedSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_addEmailForAuthenticatedSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkFollowingForUserSignalError() instead")
    void users_checkFollowingForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkFollowingForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkPersonIsFollowedByAuthenticatedSignalError() instead")
    void users_checkPersonIsFollowedByAuthenticatedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkPersonIsFollowedByAuthenticatedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createGpgKeyForAuthenticatedSignalError() instead")
    void users_createGpgKeyForAuthenticatedSignalE(OAIGpg_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createGpgKeyForAuthenticatedSignalError(OAIGpg_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createPublicSshKeyForAuthenticatedSignalError() instead")
    void users_createPublicSshKeyForAuthenticatedSignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createPublicSshKeyForAuthenticatedSignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteEmailForAuthenticatedSignalError() instead")
    void users_deleteEmailForAuthenticatedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteEmailForAuthenticatedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteGpgKeyForAuthenticatedSignalError() instead")
    void users_deleteGpgKeyForAuthenticatedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteGpgKeyForAuthenticatedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deletePublicSshKeyForAuthenticatedSignalError() instead")
    void users_deletePublicSshKeyForAuthenticatedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_deletePublicSshKeyForAuthenticatedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_followSignalError() instead")
    void users_followSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_followSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getAuthenticatedSignalError() instead")
    void users_getAuthenticatedSignalE(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getAuthenticatedSignalError(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getByUsernameSignalError() instead")
    void users_getByUsernameSignalE(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getByUsernameSignalError(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getContextForUserSignalError() instead")
    void users_getContextForUserSignalE(OAIHovercard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getContextForUserSignalError(OAIHovercard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getGpgKeyForAuthenticatedSignalError() instead")
    void users_getGpgKeyForAuthenticatedSignalE(OAIGpg_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getGpgKeyForAuthenticatedSignalError(OAIGpg_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getPublicSshKeyForAuthenticatedSignalError() instead")
    void users_getPublicSshKeyForAuthenticatedSignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getPublicSshKeyForAuthenticatedSignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listSignalError() instead")
    void users_listSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listEmailsForAuthenticatedSignalError() instead")
    void users_listEmailsForAuthenticatedSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listEmailsForAuthenticatedSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowedByAuthenticatedSignalError() instead")
    void users_listFollowedByAuthenticatedSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowedByAuthenticatedSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForAuthenticatedUserSignalError() instead")
    void users_listFollowersForAuthenticatedUserSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForAuthenticatedUserSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForUserSignalError() instead")
    void users_listFollowersForUserSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForUserSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowingForUserSignalError() instead")
    void users_listFollowingForUserSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowingForUserSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForAuthenticatedSignalError() instead")
    void users_listGpgKeysForAuthenticatedSignalE(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForAuthenticatedSignalError(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForUserSignalError() instead")
    void users_listGpgKeysForUserSignalE(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForUserSignalError(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicEmailsForAuthenticatedSignalError() instead")
    void users_listPublicEmailsForAuthenticatedSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicEmailsForAuthenticatedSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicKeysForUserSignalError() instead")
    void users_listPublicKeysForUserSignalE(QList<OAIKey_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicKeysForUserSignalError(QList<OAIKey_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicSshKeysForAuthenticatedSignalError() instead")
    void users_listPublicSshKeysForAuthenticatedSignalE(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicSshKeysForAuthenticatedSignalError(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_unfollowSignalError() instead")
    void users_unfollowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_unfollowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_updateAuthenticatedSignalError() instead")
    void users_updateAuthenticatedSignalE(OAIPrivate_user summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_updateAuthenticatedSignalError(OAIPrivate_user summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use users_addEmailForAuthenticatedSignalErrorFull() instead")
    void users_addEmailForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_addEmailForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkFollowingForUserSignalErrorFull() instead")
    void users_checkFollowingForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkFollowingForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkPersonIsFollowedByAuthenticatedSignalErrorFull() instead")
    void users_checkPersonIsFollowedByAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkPersonIsFollowedByAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createGpgKeyForAuthenticatedSignalErrorFull() instead")
    void users_createGpgKeyForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createGpgKeyForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createPublicSshKeyForAuthenticatedSignalErrorFull() instead")
    void users_createPublicSshKeyForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createPublicSshKeyForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteEmailForAuthenticatedSignalErrorFull() instead")
    void users_deleteEmailForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteEmailForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteGpgKeyForAuthenticatedSignalErrorFull() instead")
    void users_deleteGpgKeyForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteGpgKeyForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deletePublicSshKeyForAuthenticatedSignalErrorFull() instead")
    void users_deletePublicSshKeyForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_deletePublicSshKeyForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_followSignalErrorFull() instead")
    void users_followSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_followSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getAuthenticatedSignalErrorFull() instead")
    void users_getAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getByUsernameSignalErrorFull() instead")
    void users_getByUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getByUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getContextForUserSignalErrorFull() instead")
    void users_getContextForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getContextForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getGpgKeyForAuthenticatedSignalErrorFull() instead")
    void users_getGpgKeyForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getGpgKeyForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getPublicSshKeyForAuthenticatedSignalErrorFull() instead")
    void users_getPublicSshKeyForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getPublicSshKeyForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listSignalErrorFull() instead")
    void users_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listEmailsForAuthenticatedSignalErrorFull() instead")
    void users_listEmailsForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listEmailsForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowedByAuthenticatedSignalErrorFull() instead")
    void users_listFollowedByAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowedByAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForAuthenticatedUserSignalErrorFull() instead")
    void users_listFollowersForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForUserSignalErrorFull() instead")
    void users_listFollowersForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowingForUserSignalErrorFull() instead")
    void users_listFollowingForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowingForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForAuthenticatedSignalErrorFull() instead")
    void users_listGpgKeysForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForUserSignalErrorFull() instead")
    void users_listGpgKeysForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicEmailsForAuthenticatedSignalErrorFull() instead")
    void users_listPublicEmailsForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicEmailsForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicKeysForUserSignalErrorFull() instead")
    void users_listPublicKeysForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicKeysForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicSshKeysForAuthenticatedSignalErrorFull() instead")
    void users_listPublicSshKeysForAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicSshKeysForAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_unfollowSignalErrorFull() instead")
    void users_unfollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_unfollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_updateAuthenticatedSignalErrorFull() instead")
    void users_updateAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_updateAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
