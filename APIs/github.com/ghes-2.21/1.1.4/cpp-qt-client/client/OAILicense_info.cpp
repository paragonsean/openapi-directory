/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicense_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicense_info::OAILicense_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicense_info::OAILicense_info() {
    this->initializeModel();
}

OAILicense_info::~OAILicense_info() {}

void OAILicense_info::initializeModel() {

    m_days_until_expiration_isSet = false;
    m_days_until_expiration_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;

    m_seats_available_isSet = false;
    m_seats_available_isValid = false;

    m_seats_used_isSet = false;
    m_seats_used_isValid = false;
}

void OAILicense_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicense_info::fromJsonObject(QJsonObject json) {

    m_days_until_expiration_isValid = ::OpenAPI::fromJsonValue(m_days_until_expiration, json[QString("days_until_expiration")]);
    m_days_until_expiration_isSet = !json[QString("days_until_expiration")].isNull() && m_days_until_expiration_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expire_at")]);
    m_expire_at_isSet = !json[QString("expire_at")].isNull() && m_expire_at_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;

    m_seats_available_isValid = ::OpenAPI::fromJsonValue(m_seats_available, json[QString("seats_available")]);
    m_seats_available_isSet = !json[QString("seats_available")].isNull() && m_seats_available_isValid;

    m_seats_used_isValid = ::OpenAPI::fromJsonValue(m_seats_used, json[QString("seats_used")]);
    m_seats_used_isSet = !json[QString("seats_used")].isNull() && m_seats_used_isValid;
}

QString OAILicense_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicense_info::asJsonObject() const {
    QJsonObject obj;
    if (m_days_until_expiration_isSet) {
        obj.insert(QString("days_until_expiration"), ::OpenAPI::toJsonValue(m_days_until_expiration));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expire_at"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_seats.isSet()) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    if (m_seats_available.isSet()) {
        obj.insert(QString("seats_available"), ::OpenAPI::toJsonValue(m_seats_available));
    }
    if (m_seats_used_isSet) {
        obj.insert(QString("seats_used"), ::OpenAPI::toJsonValue(m_seats_used));
    }
    return obj;
}

qint32 OAILicense_info::getDaysUntilExpiration() const {
    return m_days_until_expiration;
}
void OAILicense_info::setDaysUntilExpiration(const qint32 &days_until_expiration) {
    m_days_until_expiration = days_until_expiration;
    m_days_until_expiration_isSet = true;
}

bool OAILicense_info::is_days_until_expiration_Set() const{
    return m_days_until_expiration_isSet;
}

bool OAILicense_info::is_days_until_expiration_Valid() const{
    return m_days_until_expiration_isValid;
}

QString OAILicense_info::getExpireAt() const {
    return m_expire_at;
}
void OAILicense_info::setExpireAt(const QString &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAILicense_info::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAILicense_info::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

QString OAILicense_info::getKind() const {
    return m_kind;
}
void OAILicense_info::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILicense_info::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILicense_info::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILicense_info_seats OAILicense_info::getSeats() const {
    return m_seats;
}
void OAILicense_info::setSeats(const OAILicense_info_seats &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAILicense_info::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAILicense_info::is_seats_Valid() const{
    return m_seats_isValid;
}

OAILicense_info_seats OAILicense_info::getSeatsAvailable() const {
    return m_seats_available;
}
void OAILicense_info::setSeatsAvailable(const OAILicense_info_seats &seats_available) {
    m_seats_available = seats_available;
    m_seats_available_isSet = true;
}

bool OAILicense_info::is_seats_available_Set() const{
    return m_seats_available_isSet;
}

bool OAILicense_info::is_seats_available_Valid() const{
    return m_seats_available_isValid;
}

qint32 OAILicense_info::getSeatsUsed() const {
    return m_seats_used;
}
void OAILicense_info::setSeatsUsed(const qint32 &seats_used) {
    m_seats_used = seats_used;
    m_seats_used_isSet = true;
}

bool OAILicense_info::is_seats_used_Set() const{
    return m_seats_used_isSet;
}

bool OAILicense_info::is_seats_used_Valid() const{
    return m_seats_used_isValid;
}

bool OAILicense_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_until_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats_available.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicense_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
