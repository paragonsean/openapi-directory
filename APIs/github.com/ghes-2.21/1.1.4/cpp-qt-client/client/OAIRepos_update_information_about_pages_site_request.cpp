/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepos_update_information_about_pages_site_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepos_update_information_about_pages_site_request::OAIRepos_update_information_about_pages_site_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepos_update_information_about_pages_site_request::OAIRepos_update_information_about_pages_site_request() {
    this->initializeModel();
}

OAIRepos_update_information_about_pages_site_request::~OAIRepos_update_information_about_pages_site_request() {}

void OAIRepos_update_information_about_pages_site_request::initializeModel() {

    m_https_enforced_isSet = false;
    m_https_enforced_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIRepos_update_information_about_pages_site_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepos_update_information_about_pages_site_request::fromJsonObject(QJsonObject json) {

    m_https_enforced_isValid = ::OpenAPI::fromJsonValue(m_https_enforced, json[QString("https_enforced")]);
    m_https_enforced_isSet = !json[QString("https_enforced")].isNull() && m_https_enforced_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIRepos_update_information_about_pages_site_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepos_update_information_about_pages_site_request::asJsonObject() const {
    QJsonObject obj;
    if (m_https_enforced_isSet) {
        obj.insert(QString("https_enforced"), ::OpenAPI::toJsonValue(m_https_enforced));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

bool OAIRepos_update_information_about_pages_site_request::isHttpsEnforced() const {
    return m_https_enforced;
}
void OAIRepos_update_information_about_pages_site_request::setHttpsEnforced(const bool &https_enforced) {
    m_https_enforced = https_enforced;
    m_https_enforced_isSet = true;
}

bool OAIRepos_update_information_about_pages_site_request::is_https_enforced_Set() const{
    return m_https_enforced_isSet;
}

bool OAIRepos_update_information_about_pages_site_request::is_https_enforced_Valid() const{
    return m_https_enforced_isValid;
}

bool OAIRepos_update_information_about_pages_site_request::isRPublic() const {
    return m_r_public;
}
void OAIRepos_update_information_about_pages_site_request::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIRepos_update_information_about_pages_site_request::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIRepos_update_information_about_pages_site_request::is_r_public_Valid() const{
    return m_r_public_isValid;
}

OAIRepos_update_information_about_pages_site_request_source OAIRepos_update_information_about_pages_site_request::getSource() const {
    return m_source;
}
void OAIRepos_update_information_about_pages_site_request::setSource(const OAIRepos_update_information_about_pages_site_request_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRepos_update_information_about_pages_site_request::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRepos_update_information_about_pages_site_request::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIRepos_update_information_about_pages_site_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_https_enforced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepos_update_information_about_pages_site_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
