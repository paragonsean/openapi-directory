/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRate_limit_overview_resources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRate_limit_overview_resources::OAIRate_limit_overview_resources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRate_limit_overview_resources::OAIRate_limit_overview_resources() {
    this->initializeModel();
}

OAIRate_limit_overview_resources::~OAIRate_limit_overview_resources() {}

void OAIRate_limit_overview_resources::initializeModel() {

    m_code_scanning_upload_isSet = false;
    m_code_scanning_upload_isValid = false;

    m_core_isSet = false;
    m_core_isValid = false;

    m_graphql_isSet = false;
    m_graphql_isValid = false;

    m_integration_manifest_isSet = false;
    m_integration_manifest_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_source_import_isSet = false;
    m_source_import_isValid = false;
}

void OAIRate_limit_overview_resources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRate_limit_overview_resources::fromJsonObject(QJsonObject json) {

    m_code_scanning_upload_isValid = ::OpenAPI::fromJsonValue(m_code_scanning_upload, json[QString("code_scanning_upload")]);
    m_code_scanning_upload_isSet = !json[QString("code_scanning_upload")].isNull() && m_code_scanning_upload_isValid;

    m_core_isValid = ::OpenAPI::fromJsonValue(m_core, json[QString("core")]);
    m_core_isSet = !json[QString("core")].isNull() && m_core_isValid;

    m_graphql_isValid = ::OpenAPI::fromJsonValue(m_graphql, json[QString("graphql")]);
    m_graphql_isSet = !json[QString("graphql")].isNull() && m_graphql_isValid;

    m_integration_manifest_isValid = ::OpenAPI::fromJsonValue(m_integration_manifest, json[QString("integration_manifest")]);
    m_integration_manifest_isSet = !json[QString("integration_manifest")].isNull() && m_integration_manifest_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_source_import_isValid = ::OpenAPI::fromJsonValue(m_source_import, json[QString("source_import")]);
    m_source_import_isSet = !json[QString("source_import")].isNull() && m_source_import_isValid;
}

QString OAIRate_limit_overview_resources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRate_limit_overview_resources::asJsonObject() const {
    QJsonObject obj;
    if (m_code_scanning_upload.isSet()) {
        obj.insert(QString("code_scanning_upload"), ::OpenAPI::toJsonValue(m_code_scanning_upload));
    }
    if (m_core.isSet()) {
        obj.insert(QString("core"), ::OpenAPI::toJsonValue(m_core));
    }
    if (m_graphql.isSet()) {
        obj.insert(QString("graphql"), ::OpenAPI::toJsonValue(m_graphql));
    }
    if (m_integration_manifest.isSet()) {
        obj.insert(QString("integration_manifest"), ::OpenAPI::toJsonValue(m_integration_manifest));
    }
    if (m_search.isSet()) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_source_import.isSet()) {
        obj.insert(QString("source_import"), ::OpenAPI::toJsonValue(m_source_import));
    }
    return obj;
}

OAIRate_limit OAIRate_limit_overview_resources::getCodeScanningUpload() const {
    return m_code_scanning_upload;
}
void OAIRate_limit_overview_resources::setCodeScanningUpload(const OAIRate_limit &code_scanning_upload) {
    m_code_scanning_upload = code_scanning_upload;
    m_code_scanning_upload_isSet = true;
}

bool OAIRate_limit_overview_resources::is_code_scanning_upload_Set() const{
    return m_code_scanning_upload_isSet;
}

bool OAIRate_limit_overview_resources::is_code_scanning_upload_Valid() const{
    return m_code_scanning_upload_isValid;
}

OAIRate_limit OAIRate_limit_overview_resources::getCore() const {
    return m_core;
}
void OAIRate_limit_overview_resources::setCore(const OAIRate_limit &core) {
    m_core = core;
    m_core_isSet = true;
}

bool OAIRate_limit_overview_resources::is_core_Set() const{
    return m_core_isSet;
}

bool OAIRate_limit_overview_resources::is_core_Valid() const{
    return m_core_isValid;
}

OAIRate_limit OAIRate_limit_overview_resources::getGraphql() const {
    return m_graphql;
}
void OAIRate_limit_overview_resources::setGraphql(const OAIRate_limit &graphql) {
    m_graphql = graphql;
    m_graphql_isSet = true;
}

bool OAIRate_limit_overview_resources::is_graphql_Set() const{
    return m_graphql_isSet;
}

bool OAIRate_limit_overview_resources::is_graphql_Valid() const{
    return m_graphql_isValid;
}

OAIRate_limit OAIRate_limit_overview_resources::getIntegrationManifest() const {
    return m_integration_manifest;
}
void OAIRate_limit_overview_resources::setIntegrationManifest(const OAIRate_limit &integration_manifest) {
    m_integration_manifest = integration_manifest;
    m_integration_manifest_isSet = true;
}

bool OAIRate_limit_overview_resources::is_integration_manifest_Set() const{
    return m_integration_manifest_isSet;
}

bool OAIRate_limit_overview_resources::is_integration_manifest_Valid() const{
    return m_integration_manifest_isValid;
}

OAIRate_limit OAIRate_limit_overview_resources::getSearch() const {
    return m_search;
}
void OAIRate_limit_overview_resources::setSearch(const OAIRate_limit &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAIRate_limit_overview_resources::is_search_Set() const{
    return m_search_isSet;
}

bool OAIRate_limit_overview_resources::is_search_Valid() const{
    return m_search_isValid;
}

OAIRate_limit OAIRate_limit_overview_resources::getSourceImport() const {
    return m_source_import;
}
void OAIRate_limit_overview_resources::setSourceImport(const OAIRate_limit &source_import) {
    m_source_import = source_import;
    m_source_import_isSet = true;
}

bool OAIRate_limit_overview_resources::is_source_import_Set() const{
    return m_source_import_isSet;
}

bool OAIRate_limit_overview_resources::is_source_import_Valid() const{
    return m_source_import_isValid;
}

bool OAIRate_limit_overview_resources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_scanning_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_core.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphql.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_import.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRate_limit_overview_resources::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_core_isValid && m_search_isValid && true;
}

} // namespace OpenAPI
