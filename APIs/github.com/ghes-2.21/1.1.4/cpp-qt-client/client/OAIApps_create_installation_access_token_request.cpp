/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApps_create_installation_access_token_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApps_create_installation_access_token_request::OAIApps_create_installation_access_token_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApps_create_installation_access_token_request::OAIApps_create_installation_access_token_request() {
    this->initializeModel();
}

OAIApps_create_installation_access_token_request::~OAIApps_create_installation_access_token_request() {}

void OAIApps_create_installation_access_token_request::initializeModel() {

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_repository_ids_isSet = false;
    m_repository_ids_isValid = false;
}

void OAIApps_create_installation_access_token_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApps_create_installation_access_token_request::fromJsonObject(QJsonObject json) {

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_repository_ids_isValid = ::OpenAPI::fromJsonValue(m_repository_ids, json[QString("repository_ids")]);
    m_repository_ids_isSet = !json[QString("repository_ids")].isNull() && m_repository_ids_isValid;
}

QString OAIApps_create_installation_access_token_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApps_create_installation_access_token_request::asJsonObject() const {
    QJsonObject obj;
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_repository_ids.size() > 0) {
        obj.insert(QString("repository_ids"), ::OpenAPI::toJsonValue(m_repository_ids));
    }
    return obj;
}

OAIApp_permissions OAIApps_create_installation_access_token_request::getPermissions() const {
    return m_permissions;
}
void OAIApps_create_installation_access_token_request::setPermissions(const OAIApp_permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIApps_create_installation_access_token_request::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIApps_create_installation_access_token_request::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList<QString> OAIApps_create_installation_access_token_request::getRepositories() const {
    return m_repositories;
}
void OAIApps_create_installation_access_token_request::setRepositories(const QList<QString> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIApps_create_installation_access_token_request::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIApps_create_installation_access_token_request::is_repositories_Valid() const{
    return m_repositories_isValid;
}

QList<qint32> OAIApps_create_installation_access_token_request::getRepositoryIds() const {
    return m_repository_ids;
}
void OAIApps_create_installation_access_token_request::setRepositoryIds(const QList<qint32> &repository_ids) {
    m_repository_ids = repository_ids;
    m_repository_ids_isSet = true;
}

bool OAIApps_create_installation_access_token_request::is_repository_ids_Set() const{
    return m_repository_ids_isSet;
}

bool OAIApps_create_installation_access_token_request::is_repository_ids_Valid() const{
    return m_repository_ids_isValid;
}

bool OAIApps_create_installation_access_token_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApps_create_installation_access_token_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
