/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPre_receive_hook_script_repository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPre_receive_hook_script_repository::OAIPre_receive_hook_script_repository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPre_receive_hook_script_repository::OAIPre_receive_hook_script_repository() {
    this->initializeModel();
}

OAIPre_receive_hook_script_repository::~OAIPre_receive_hook_script_repository() {}

void OAIPre_receive_hook_script_repository::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPre_receive_hook_script_repository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPre_receive_hook_script_repository::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPre_receive_hook_script_repository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPre_receive_hook_script_repository::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPre_receive_hook_script_repository::getFullName() const {
    return m_full_name;
}
void OAIPre_receive_hook_script_repository::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIPre_receive_hook_script_repository::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIPre_receive_hook_script_repository::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIPre_receive_hook_script_repository::getHtmlUrl() const {
    return m_html_url;
}
void OAIPre_receive_hook_script_repository::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPre_receive_hook_script_repository::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPre_receive_hook_script_repository::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIPre_receive_hook_script_repository::getId() const {
    return m_id;
}
void OAIPre_receive_hook_script_repository::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPre_receive_hook_script_repository::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPre_receive_hook_script_repository::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPre_receive_hook_script_repository::getUrl() const {
    return m_url;
}
void OAIPre_receive_hook_script_repository::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPre_receive_hook_script_repository::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPre_receive_hook_script_repository::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPre_receive_hook_script_repository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPre_receive_hook_script_repository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
