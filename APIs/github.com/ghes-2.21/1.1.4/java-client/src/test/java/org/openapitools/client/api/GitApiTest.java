/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Blob;
import org.openapitools.client.model.GitCommit;
import org.openapitools.client.model.GitCreateBlobRequest;
import org.openapitools.client.model.GitCreateCommitRequest;
import org.openapitools.client.model.GitCreateRefRequest;
import org.openapitools.client.model.GitCreateTagRequest;
import org.openapitools.client.model.GitCreateTreeRequest;
import org.openapitools.client.model.GitRef;
import org.openapitools.client.model.GitTag;
import org.openapitools.client.model.GitTree;
import org.openapitools.client.model.GitUpdateRefRequest;
import org.openapitools.client.model.ShortBlob;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GitApi
 */
@Disabled
public class GitApiTest {

    private final GitApi api = new GitApi();

    /**
     * Create a blob
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitCreateBlobTest() throws ApiException {
        String owner = null;
        String repo = null;
        GitCreateBlobRequest gitCreateBlobRequest = null;
        ShortBlob response = api.gitCreateBlob(owner, repo, gitCreateBlobRequest);
        // TODO: test validations
    }

    /**
     * Create a commit
     *
     * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitCreateCommitTest() throws ApiException {
        String owner = null;
        String repo = null;
        GitCreateCommitRequest gitCreateCommitRequest = null;
        GitCommit response = api.gitCreateCommit(owner, repo, gitCreateCommitRequest);
        // TODO: test validations
    }

    /**
     * Create a reference
     *
     * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitCreateRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        GitCreateRefRequest gitCreateRefRequest = null;
        GitRef response = api.gitCreateRef(owner, repo, gitCreateRefRequest);
        // TODO: test validations
    }

    /**
     * Create a tag object
     *
     * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@2.21/rest/reference/git#create-a-reference) the &#x60;refs/tags/[tag]&#x60; reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@2.21/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitCreateTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        GitCreateTagRequest gitCreateTagRequest = null;
        GitTag response = api.gitCreateTag(owner, repo, gitCreateTagRequest);
        // TODO: test validations
    }

    /**
     * Create a tree
     *
     * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.  If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \&quot;[Create a commit](https://docs.github.com/enterprise-server@2.21/rest/reference/git#create-a-commit)\&quot; and \&quot;[Update a reference](https://docs.github.com/enterprise-server@2.21/rest/reference/git#update-a-reference).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitCreateTreeTest() throws ApiException {
        String owner = null;
        String repo = null;
        GitCreateTreeRequest gitCreateTreeRequest = null;
        GitTree response = api.gitCreateTree(owner, repo, gitCreateTreeRequest);
        // TODO: test validations
    }

    /**
     * Delete a reference
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitDeleteRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        api.gitDeleteRef(owner, repo, ref);
        // TODO: test validations
    }

    /**
     * Get a blob
     *
     * The &#x60;content&#x60; in the response will always be Base64 encoded.  _Note_: This API supports blobs up to 100 megabytes in size.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitGetBlobTest() throws ApiException {
        String owner = null;
        String repo = null;
        String fileSha = null;
        Blob response = api.gitGetBlob(owner, repo, fileSha);
        // TODO: test validations
    }

    /**
     * Get a commit
     *
     * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitGetCommitTest() throws ApiException {
        String owner = null;
        String repo = null;
        String commitSha = null;
        GitCommit response = api.gitGetCommit(owner, repo, commitSha);
        // TODO: test validations
    }

    /**
     * Get a reference
     *
     * Returns a single reference from your Git database. The &#x60;:ref&#x60; in the URL must be formatted as &#x60;heads/&lt;branch name&gt;&#x60; for branches and &#x60;tags/&lt;tag name&gt;&#x60; for tags. If the &#x60;:ref&#x60; doesn&#39;t match an existing ref, a &#x60;404&#x60; is returned.  **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.21/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitGetRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        GitRef response = api.gitGetRef(owner, repo, ref);
        // TODO: test validations
    }

    /**
     * Get a tag
     *
     * **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on her/his account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitGetTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        String tagSha = null;
        GitTag response = api.gitGetTag(owner, repo, tagSha);
        // TODO: test validations
    }

    /**
     * Get a tree
     *
     * Returns a single tree using the SHA1 value for that tree.  If &#x60;truncated&#x60; is &#x60;true&#x60; in the response then the number of items in the &#x60;tree&#x60; array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitGetTreeTest() throws ApiException {
        String owner = null;
        String repo = null;
        String treeSha = null;
        String recursive = null;
        GitTree response = api.gitGetTree(owner, repo, treeSha, recursive);
        // TODO: test validations
    }

    /**
     * List matching references
     *
     * Returns an array of references from your Git database that match the supplied name. The &#x60;:ref&#x60; in the URL must be formatted as &#x60;heads/&lt;branch name&gt;&#x60; for branches and &#x60;tags/&lt;tag name&gt;&#x60; for tags. If the &#x60;:ref&#x60; doesn&#39;t exist in the repository, but existing refs start with &#x60;:ref&#x60;, they will be returned as an array.  When you use this endpoint without providing a &#x60;:ref&#x60;, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just &#x60;heads&#x60; and &#x60;tags&#x60;.  **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@2.21/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.  If you request matching references for a branch named &#x60;feature&#x60; but the branch &#x60;feature&#x60; doesn&#39;t exist, the response can still include other matching head refs that start with the word &#x60;feature&#x60;, such as &#x60;featureA&#x60; and &#x60;featureB&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitListMatchingRefsTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        Integer perPage = null;
        Integer page = null;
        List<GitRef> response = api.gitListMatchingRefs(owner, repo, ref, perPage, page);
        // TODO: test validations
    }

    /**
     * Update a reference
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gitUpdateRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        GitUpdateRefRequest gitUpdateRefRequest = null;
        GitRef response = api.gitUpdateRef(owner, repo, ref, gitUpdateRefRequest);
        // TODO: test validations
    }

}
