/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullsMergeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:59.486661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullsMergeRequest {
  public static final String SERIALIZED_NAME_COMMIT_MESSAGE = "commit_message";
  @SerializedName(SERIALIZED_NAME_COMMIT_MESSAGE)
  private String commitMessage;

  public static final String SERIALIZED_NAME_COMMIT_TITLE = "commit_title";
  @SerializedName(SERIALIZED_NAME_COMMIT_TITLE)
  private String commitTitle;

  /**
   * Merge method to use. Possible values are &#x60;merge&#x60;, &#x60;squash&#x60; or &#x60;rebase&#x60;. Default is &#x60;merge&#x60;.
   */
  @JsonAdapter(MergeMethodEnum.Adapter.class)
  public enum MergeMethodEnum {
    MERGE("merge"),
    
    SQUASH("squash"),
    
    REBASE("rebase");

    private String value;

    MergeMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeMethodEnum fromValue(String value) {
      for (MergeMethodEnum b : MergeMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MergeMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MERGE_METHOD = "merge_method";
  @SerializedName(SERIALIZED_NAME_MERGE_METHOD)
  private MergeMethodEnum mergeMethod;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public PullsMergeRequest() {
  }

  public PullsMergeRequest commitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

  /**
   * Extra detail to append to automatic commit message.
   * @return commitMessage
   */
  @javax.annotation.Nullable
  public String getCommitMessage() {
    return commitMessage;
  }

  public void setCommitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
  }


  public PullsMergeRequest commitTitle(String commitTitle) {
    this.commitTitle = commitTitle;
    return this;
  }

  /**
   * Title for the automatic commit message.
   * @return commitTitle
   */
  @javax.annotation.Nullable
  public String getCommitTitle() {
    return commitTitle;
  }

  public void setCommitTitle(String commitTitle) {
    this.commitTitle = commitTitle;
  }


  public PullsMergeRequest mergeMethod(MergeMethodEnum mergeMethod) {
    this.mergeMethod = mergeMethod;
    return this;
  }

  /**
   * Merge method to use. Possible values are &#x60;merge&#x60;, &#x60;squash&#x60; or &#x60;rebase&#x60;. Default is &#x60;merge&#x60;.
   * @return mergeMethod
   */
  @javax.annotation.Nullable
  public MergeMethodEnum getMergeMethod() {
    return mergeMethod;
  }

  public void setMergeMethod(MergeMethodEnum mergeMethod) {
    this.mergeMethod = mergeMethod;
  }


  public PullsMergeRequest sha(String sha) {
    this.sha = sha;
    return this;
  }

  /**
   * SHA that pull request head must match to allow merge.
   * @return sha
   */
  @javax.annotation.Nullable
  public String getSha() {
    return sha;
  }

  public void setSha(String sha) {
    this.sha = sha;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullsMergeRequest pullsMergeRequest = (PullsMergeRequest) o;
    return Objects.equals(this.commitMessage, pullsMergeRequest.commitMessage) &&
        Objects.equals(this.commitTitle, pullsMergeRequest.commitTitle) &&
        Objects.equals(this.mergeMethod, pullsMergeRequest.mergeMethod) &&
        Objects.equals(this.sha, pullsMergeRequest.sha);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitMessage, commitTitle, mergeMethod, sha);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullsMergeRequest {\n");
    sb.append("    commitMessage: ").append(toIndentedString(commitMessage)).append("\n");
    sb.append("    commitTitle: ").append(toIndentedString(commitTitle)).append("\n");
    sb.append("    mergeMethod: ").append(toIndentedString(mergeMethod)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commit_message");
    openapiFields.add("commit_title");
    openapiFields.add("merge_method");
    openapiFields.add("sha");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullsMergeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullsMergeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullsMergeRequest is not found in the empty JSON string", PullsMergeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullsMergeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullsMergeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commit_message") != null && !jsonObj.get("commit_message").isJsonNull()) && !jsonObj.get("commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_message").toString()));
      }
      if ((jsonObj.get("commit_title") != null && !jsonObj.get("commit_title").isJsonNull()) && !jsonObj.get("commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_title").toString()));
      }
      if ((jsonObj.get("merge_method") != null && !jsonObj.get("merge_method").isJsonNull()) && !jsonObj.get("merge_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_method").toString()));
      }
      // validate the optional field `merge_method`
      if (jsonObj.get("merge_method") != null && !jsonObj.get("merge_method").isJsonNull()) {
        MergeMethodEnum.validateJsonElement(jsonObj.get("merge_method"));
      }
      if ((jsonObj.get("sha") != null && !jsonObj.get("sha").isJsonNull()) && !jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullsMergeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullsMergeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullsMergeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullsMergeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PullsMergeRequest>() {
           @Override
           public void write(JsonWriter out, PullsMergeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullsMergeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullsMergeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullsMergeRequest
   * @throws IOException if the JSON string is invalid with respect to PullsMergeRequest
   */
  public static PullsMergeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullsMergeRequest.class);
  }

  /**
   * Convert an instance of PullsMergeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

