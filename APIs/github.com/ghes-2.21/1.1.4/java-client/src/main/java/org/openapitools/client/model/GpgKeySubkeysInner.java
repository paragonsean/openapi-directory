/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GpgKeySubkeysInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:59.486661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GpgKeySubkeysInner {
  public static final String SERIALIZED_NAME_CAN_CERTIFY = "can_certify";
  @SerializedName(SERIALIZED_NAME_CAN_CERTIFY)
  private Boolean canCertify;

  public static final String SERIALIZED_NAME_CAN_ENCRYPT_COMMS = "can_encrypt_comms";
  @SerializedName(SERIALIZED_NAME_CAN_ENCRYPT_COMMS)
  private Boolean canEncryptComms;

  public static final String SERIALIZED_NAME_CAN_ENCRYPT_STORAGE = "can_encrypt_storage";
  @SerializedName(SERIALIZED_NAME_CAN_ENCRYPT_STORAGE)
  private Boolean canEncryptStorage;

  public static final String SERIALIZED_NAME_CAN_SIGN = "can_sign";
  @SerializedName(SERIALIZED_NAME_CAN_SIGN)
  private Boolean canSign;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<Object> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_KEY_ID = "key_id";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  public static final String SERIALIZED_NAME_PRIMARY_KEY_ID = "primary_key_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY_ID)
  private Integer primaryKeyId;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_RAW_KEY = "raw_key";
  @SerializedName(SERIALIZED_NAME_RAW_KEY)
  private String rawKey;

  public static final String SERIALIZED_NAME_SUBKEYS = "subkeys";
  @SerializedName(SERIALIZED_NAME_SUBKEYS)
  private List<Object> subkeys = new ArrayList<>();

  public GpgKeySubkeysInner() {
  }

  public GpgKeySubkeysInner canCertify(Boolean canCertify) {
    this.canCertify = canCertify;
    return this;
  }

  /**
   * Get canCertify
   * @return canCertify
   */
  @javax.annotation.Nullable
  public Boolean getCanCertify() {
    return canCertify;
  }

  public void setCanCertify(Boolean canCertify) {
    this.canCertify = canCertify;
  }


  public GpgKeySubkeysInner canEncryptComms(Boolean canEncryptComms) {
    this.canEncryptComms = canEncryptComms;
    return this;
  }

  /**
   * Get canEncryptComms
   * @return canEncryptComms
   */
  @javax.annotation.Nullable
  public Boolean getCanEncryptComms() {
    return canEncryptComms;
  }

  public void setCanEncryptComms(Boolean canEncryptComms) {
    this.canEncryptComms = canEncryptComms;
  }


  public GpgKeySubkeysInner canEncryptStorage(Boolean canEncryptStorage) {
    this.canEncryptStorage = canEncryptStorage;
    return this;
  }

  /**
   * Get canEncryptStorage
   * @return canEncryptStorage
   */
  @javax.annotation.Nullable
  public Boolean getCanEncryptStorage() {
    return canEncryptStorage;
  }

  public void setCanEncryptStorage(Boolean canEncryptStorage) {
    this.canEncryptStorage = canEncryptStorage;
  }


  public GpgKeySubkeysInner canSign(Boolean canSign) {
    this.canSign = canSign;
    return this;
  }

  /**
   * Get canSign
   * @return canSign
   */
  @javax.annotation.Nullable
  public Boolean getCanSign() {
    return canSign;
  }

  public void setCanSign(Boolean canSign) {
    this.canSign = canSign;
  }


  public GpgKeySubkeysInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GpgKeySubkeysInner emails(List<Object> emails) {
    this.emails = emails;
    return this;
  }

  public GpgKeySubkeysInner addEmailsItem(Object emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * Get emails
   * @return emails
   */
  @javax.annotation.Nullable
  public List<Object> getEmails() {
    return emails;
  }

  public void setEmails(List<Object> emails) {
    this.emails = emails;
  }


  public GpgKeySubkeysInner expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public GpgKeySubkeysInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GpgKeySubkeysInner keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * Get keyId
   * @return keyId
   */
  @javax.annotation.Nullable
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public GpgKeySubkeysInner primaryKeyId(Integer primaryKeyId) {
    this.primaryKeyId = primaryKeyId;
    return this;
  }

  /**
   * Get primaryKeyId
   * @return primaryKeyId
   */
  @javax.annotation.Nullable
  public Integer getPrimaryKeyId() {
    return primaryKeyId;
  }

  public void setPrimaryKeyId(Integer primaryKeyId) {
    this.primaryKeyId = primaryKeyId;
  }


  public GpgKeySubkeysInner publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public GpgKeySubkeysInner rawKey(String rawKey) {
    this.rawKey = rawKey;
    return this;
  }

  /**
   * Get rawKey
   * @return rawKey
   */
  @javax.annotation.Nullable
  public String getRawKey() {
    return rawKey;
  }

  public void setRawKey(String rawKey) {
    this.rawKey = rawKey;
  }


  public GpgKeySubkeysInner subkeys(List<Object> subkeys) {
    this.subkeys = subkeys;
    return this;
  }

  public GpgKeySubkeysInner addSubkeysItem(Object subkeysItem) {
    if (this.subkeys == null) {
      this.subkeys = new ArrayList<>();
    }
    this.subkeys.add(subkeysItem);
    return this;
  }

  /**
   * Get subkeys
   * @return subkeys
   */
  @javax.annotation.Nullable
  public List<Object> getSubkeys() {
    return subkeys;
  }

  public void setSubkeys(List<Object> subkeys) {
    this.subkeys = subkeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GpgKeySubkeysInner gpgKeySubkeysInner = (GpgKeySubkeysInner) o;
    return Objects.equals(this.canCertify, gpgKeySubkeysInner.canCertify) &&
        Objects.equals(this.canEncryptComms, gpgKeySubkeysInner.canEncryptComms) &&
        Objects.equals(this.canEncryptStorage, gpgKeySubkeysInner.canEncryptStorage) &&
        Objects.equals(this.canSign, gpgKeySubkeysInner.canSign) &&
        Objects.equals(this.createdAt, gpgKeySubkeysInner.createdAt) &&
        Objects.equals(this.emails, gpgKeySubkeysInner.emails) &&
        Objects.equals(this.expiresAt, gpgKeySubkeysInner.expiresAt) &&
        Objects.equals(this.id, gpgKeySubkeysInner.id) &&
        Objects.equals(this.keyId, gpgKeySubkeysInner.keyId) &&
        Objects.equals(this.primaryKeyId, gpgKeySubkeysInner.primaryKeyId) &&
        Objects.equals(this.publicKey, gpgKeySubkeysInner.publicKey) &&
        Objects.equals(this.rawKey, gpgKeySubkeysInner.rawKey) &&
        Objects.equals(this.subkeys, gpgKeySubkeysInner.subkeys);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(canCertify, canEncryptComms, canEncryptStorage, canSign, createdAt, emails, expiresAt, id, keyId, primaryKeyId, publicKey, rawKey, subkeys);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GpgKeySubkeysInner {\n");
    sb.append("    canCertify: ").append(toIndentedString(canCertify)).append("\n");
    sb.append("    canEncryptComms: ").append(toIndentedString(canEncryptComms)).append("\n");
    sb.append("    canEncryptStorage: ").append(toIndentedString(canEncryptStorage)).append("\n");
    sb.append("    canSign: ").append(toIndentedString(canSign)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    primaryKeyId: ").append(toIndentedString(primaryKeyId)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    rawKey: ").append(toIndentedString(rawKey)).append("\n");
    sb.append("    subkeys: ").append(toIndentedString(subkeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_certify");
    openapiFields.add("can_encrypt_comms");
    openapiFields.add("can_encrypt_storage");
    openapiFields.add("can_sign");
    openapiFields.add("created_at");
    openapiFields.add("emails");
    openapiFields.add("expires_at");
    openapiFields.add("id");
    openapiFields.add("key_id");
    openapiFields.add("primary_key_id");
    openapiFields.add("public_key");
    openapiFields.add("raw_key");
    openapiFields.add("subkeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GpgKeySubkeysInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GpgKeySubkeysInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GpgKeySubkeysInner is not found in the empty JSON string", GpgKeySubkeysInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GpgKeySubkeysInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GpgKeySubkeysInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if ((jsonObj.get("key_id") != null && !jsonObj.get("key_id").isJsonNull()) && !jsonObj.get("key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_id").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if ((jsonObj.get("raw_key") != null && !jsonObj.get("raw_key").isJsonNull()) && !jsonObj.get("raw_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_key").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subkeys") != null && !jsonObj.get("subkeys").isJsonNull() && !jsonObj.get("subkeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subkeys` to be an array in the JSON string but got `%s`", jsonObj.get("subkeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GpgKeySubkeysInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GpgKeySubkeysInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GpgKeySubkeysInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GpgKeySubkeysInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GpgKeySubkeysInner>() {
           @Override
           public void write(JsonWriter out, GpgKeySubkeysInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GpgKeySubkeysInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GpgKeySubkeysInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GpgKeySubkeysInner
   * @throws IOException if the JSON string is invalid with respect to GpgKeySubkeysInner
   */
  public static GpgKeySubkeysInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GpgKeySubkeysInner.class);
  }

  /**
   * Convert an instance of GpgKeySubkeysInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

