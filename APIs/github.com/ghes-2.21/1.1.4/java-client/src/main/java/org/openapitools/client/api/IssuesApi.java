/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityListPublicEvents503Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.IssueComment;
import org.openapitools.client.model.IssueEvent;
import org.openapitools.client.model.IssueEventForIssue;
import org.openapitools.client.model.IssueSimple;
import org.openapitools.client.model.IssuesAddAssigneesRequest;
import org.openapitools.client.model.IssuesCreateLabelRequest;
import org.openapitools.client.model.IssuesCreateMilestoneRequest;
import org.openapitools.client.model.IssuesCreateRequest;
import org.openapitools.client.model.IssuesLockRequest;
import org.openapitools.client.model.IssuesRemoveAssigneesRequest;
import org.openapitools.client.model.IssuesSetLabelsRequest;
import org.openapitools.client.model.IssuesUpdateCommentRequest;
import org.openapitools.client.model.IssuesUpdateLabelRequest;
import org.openapitools.client.model.IssuesUpdateMilestoneRequest;
import org.openapitools.client.model.IssuesUpdateRequest;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Milestone;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.TimelineIssueEvents;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssuesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssuesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for issuesAddAssignees
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesAddAssigneesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-assignees-to-an-issue">Add assignees to an issue Documentation</a>
     */
    public okhttp3.Call issuesAddAssigneesCall(String owner, String repo, Integer issueNumber, IssuesAddAssigneesRequest issuesAddAssigneesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesAddAssigneesRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/assignees"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesAddAssigneesValidateBeforeCall(String owner, String repo, Integer issueNumber, IssuesAddAssigneesRequest issuesAddAssigneesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesAddAssignees(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesAddAssignees(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesAddAssignees(Async)");
        }

        return issuesAddAssigneesCall(owner, repo, issueNumber, issuesAddAssigneesRequest, _callback);

    }

    /**
     * Add assignees to an issue
     * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesAddAssigneesRequest  (optional)
     * @return IssueSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-assignees-to-an-issue">Add assignees to an issue Documentation</a>
     */
    public IssueSimple issuesAddAssignees(String owner, String repo, Integer issueNumber, IssuesAddAssigneesRequest issuesAddAssigneesRequest) throws ApiException {
        ApiResponse<IssueSimple> localVarResp = issuesAddAssigneesWithHttpInfo(owner, repo, issueNumber, issuesAddAssigneesRequest);
        return localVarResp.getData();
    }

    /**
     * Add assignees to an issue
     * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesAddAssigneesRequest  (optional)
     * @return ApiResponse&lt;IssueSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-assignees-to-an-issue">Add assignees to an issue Documentation</a>
     */
    public ApiResponse<IssueSimple> issuesAddAssigneesWithHttpInfo(String owner, String repo, Integer issueNumber, IssuesAddAssigneesRequest issuesAddAssigneesRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesAddAssigneesValidateBeforeCall(owner, repo, issueNumber, issuesAddAssigneesRequest, null);
        Type localVarReturnType = new TypeToken<IssueSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add assignees to an issue (asynchronously)
     * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesAddAssigneesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-assignees-to-an-issue">Add assignees to an issue Documentation</a>
     */
    public okhttp3.Call issuesAddAssigneesAsync(String owner, String repo, Integer issueNumber, IssuesAddAssigneesRequest issuesAddAssigneesRequest, final ApiCallback<IssueSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesAddAssigneesValidateBeforeCall(owner, repo, issueNumber, issuesAddAssigneesRequest, _callback);
        Type localVarReturnType = new TypeToken<IssueSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesAddLabels
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-labels-to-an-issue">Add labels to an issue Documentation</a>
     */
    public okhttp3.Call issuesAddLabelsCall(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesSetLabelsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesAddLabelsValidateBeforeCall(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesAddLabels(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesAddLabels(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesAddLabels(Async)");
        }

        return issuesAddLabelsCall(owner, repo, issueNumber, issuesSetLabelsRequest, _callback);

    }

    /**
     * Add labels to an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-labels-to-an-issue">Add labels to an issue Documentation</a>
     */
    public List<Label> issuesAddLabels(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issuesAddLabelsWithHttpInfo(owner, repo, issueNumber, issuesSetLabelsRequest);
        return localVarResp.getData();
    }

    /**
     * Add labels to an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-labels-to-an-issue">Add labels to an issue Documentation</a>
     */
    public ApiResponse<List<Label>> issuesAddLabelsWithHttpInfo(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesAddLabelsValidateBeforeCall(owner, repo, issueNumber, issuesSetLabelsRequest, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add labels to an issue (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#add-labels-to-an-issue">Add labels to an issue Documentation</a>
     */
    public okhttp3.Call issuesAddLabelsAsync(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesAddLabelsValidateBeforeCall(owner, repo, issueNumber, issuesSetLabelsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesCheckUserCanBeAssigned
     * @param owner  (required)
     * @param repo  (required)
     * @param assignee  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Otherwise a &#x60;404&#x60; status code is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#check-if-a-user-can-be-assigned">Check if a user can be assigned Documentation</a>
     */
    public okhttp3.Call issuesCheckUserCanBeAssignedCall(String owner, String repo, String assignee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/assignees/{assignee}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "assignee" + "}", localVarApiClient.escapeString(assignee.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesCheckUserCanBeAssignedValidateBeforeCall(String owner, String repo, String assignee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesCheckUserCanBeAssigned(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesCheckUserCanBeAssigned(Async)");
        }

        // verify the required parameter 'assignee' is set
        if (assignee == null) {
            throw new ApiException("Missing the required parameter 'assignee' when calling issuesCheckUserCanBeAssigned(Async)");
        }

        return issuesCheckUserCanBeAssignedCall(owner, repo, assignee, _callback);

    }

    /**
     * Check if a user can be assigned
     * Checks if a user has permission to be assigned to an issue in this repository.  If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned.  Otherwise a &#x60;404&#x60; status code is returned.
     * @param owner  (required)
     * @param repo  (required)
     * @param assignee  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Otherwise a &#x60;404&#x60; status code is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#check-if-a-user-can-be-assigned">Check if a user can be assigned Documentation</a>
     */
    public void issuesCheckUserCanBeAssigned(String owner, String repo, String assignee) throws ApiException {
        issuesCheckUserCanBeAssignedWithHttpInfo(owner, repo, assignee);
    }

    /**
     * Check if a user can be assigned
     * Checks if a user has permission to be assigned to an issue in this repository.  If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned.  Otherwise a &#x60;404&#x60; status code is returned.
     * @param owner  (required)
     * @param repo  (required)
     * @param assignee  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Otherwise a &#x60;404&#x60; status code is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#check-if-a-user-can-be-assigned">Check if a user can be assigned Documentation</a>
     */
    public ApiResponse<Void> issuesCheckUserCanBeAssignedWithHttpInfo(String owner, String repo, String assignee) throws ApiException {
        okhttp3.Call localVarCall = issuesCheckUserCanBeAssignedValidateBeforeCall(owner, repo, assignee, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user can be assigned (asynchronously)
     * Checks if a user has permission to be assigned to an issue in this repository.  If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned.  Otherwise a &#x60;404&#x60; status code is returned.
     * @param owner  (required)
     * @param repo  (required)
     * @param assignee  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Otherwise a &#x60;404&#x60; status code is returned. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#check-if-a-user-can-be-assigned">Check if a user can be assigned Documentation</a>
     */
    public okhttp3.Call issuesCheckUserCanBeAssignedAsync(String owner, String repo, String assignee, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesCheckUserCanBeAssignedValidateBeforeCall(owner, repo, assignee, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesCreate
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue">Create an issue Documentation</a>
     */
    public okhttp3.Call issuesCreateCall(String owner, String repo, IssuesCreateRequest issuesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesCreateRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesCreateValidateBeforeCall(String owner, String repo, IssuesCreateRequest issuesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesCreate(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesCreate(Async)");
        }

        // verify the required parameter 'issuesCreateRequest' is set
        if (issuesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'issuesCreateRequest' when calling issuesCreate(Async)");
        }

        return issuesCreateCall(owner, repo, issuesCreateRequest, _callback);

    }

    /**
     * Create an issue
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a &#x60;410 Gone&#x60; status.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateRequest  (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue">Create an issue Documentation</a>
     */
    public Issue issuesCreate(String owner, String repo, IssuesCreateRequest issuesCreateRequest) throws ApiException {
        ApiResponse<Issue> localVarResp = issuesCreateWithHttpInfo(owner, repo, issuesCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create an issue
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a &#x60;410 Gone&#x60; status.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateRequest  (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue">Create an issue Documentation</a>
     */
    public ApiResponse<Issue> issuesCreateWithHttpInfo(String owner, String repo, IssuesCreateRequest issuesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesCreateValidateBeforeCall(owner, repo, issuesCreateRequest, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an issue (asynchronously)
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a &#x60;410 Gone&#x60; status.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue">Create an issue Documentation</a>
     */
    public okhttp3.Call issuesCreateAsync(String owner, String repo, IssuesCreateRequest issuesCreateRequest, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesCreateValidateBeforeCall(owner, repo, issuesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesCreateComment
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue-comment">Create an issue comment Documentation</a>
     */
    public okhttp3.Call issuesCreateCommentCall(String owner, String repo, Integer issueNumber, IssuesUpdateCommentRequest issuesUpdateCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesUpdateCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesCreateCommentValidateBeforeCall(String owner, String repo, Integer issueNumber, IssuesUpdateCommentRequest issuesUpdateCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesCreateComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesCreateComment(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesCreateComment(Async)");
        }

        // verify the required parameter 'issuesUpdateCommentRequest' is set
        if (issuesUpdateCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'issuesUpdateCommentRequest' when calling issuesCreateComment(Async)");
        }

        return issuesCreateCommentCall(owner, repo, issueNumber, issuesUpdateCommentRequest, _callback);

    }

    /**
     * Create an issue comment
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @return IssueComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue-comment">Create an issue comment Documentation</a>
     */
    public IssueComment issuesCreateComment(String owner, String repo, Integer issueNumber, IssuesUpdateCommentRequest issuesUpdateCommentRequest) throws ApiException {
        ApiResponse<IssueComment> localVarResp = issuesCreateCommentWithHttpInfo(owner, repo, issueNumber, issuesUpdateCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create an issue comment
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @return ApiResponse&lt;IssueComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue-comment">Create an issue comment Documentation</a>
     */
    public ApiResponse<IssueComment> issuesCreateCommentWithHttpInfo(String owner, String repo, Integer issueNumber, IssuesUpdateCommentRequest issuesUpdateCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesCreateCommentValidateBeforeCall(owner, repo, issueNumber, issuesUpdateCommentRequest, null);
        Type localVarReturnType = new TypeToken<IssueComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an issue comment (asynchronously)
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.21/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-an-issue-comment">Create an issue comment Documentation</a>
     */
    public okhttp3.Call issuesCreateCommentAsync(String owner, String repo, Integer issueNumber, IssuesUpdateCommentRequest issuesUpdateCommentRequest, final ApiCallback<IssueComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesCreateCommentValidateBeforeCall(owner, repo, issueNumber, issuesUpdateCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<IssueComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesCreateLabel
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateLabelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-label">Create a label Documentation</a>
     */
    public okhttp3.Call issuesCreateLabelCall(String owner, String repo, IssuesCreateLabelRequest issuesCreateLabelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesCreateLabelRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesCreateLabelValidateBeforeCall(String owner, String repo, IssuesCreateLabelRequest issuesCreateLabelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesCreateLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesCreateLabel(Async)");
        }

        // verify the required parameter 'issuesCreateLabelRequest' is set
        if (issuesCreateLabelRequest == null) {
            throw new ApiException("Missing the required parameter 'issuesCreateLabelRequest' when calling issuesCreateLabel(Async)");
        }

        return issuesCreateLabelCall(owner, repo, issuesCreateLabelRequest, _callback);

    }

    /**
     * Create a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateLabelRequest  (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-label">Create a label Documentation</a>
     */
    public Label issuesCreateLabel(String owner, String repo, IssuesCreateLabelRequest issuesCreateLabelRequest) throws ApiException {
        ApiResponse<Label> localVarResp = issuesCreateLabelWithHttpInfo(owner, repo, issuesCreateLabelRequest);
        return localVarResp.getData();
    }

    /**
     * Create a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateLabelRequest  (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-label">Create a label Documentation</a>
     */
    public ApiResponse<Label> issuesCreateLabelWithHttpInfo(String owner, String repo, IssuesCreateLabelRequest issuesCreateLabelRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesCreateLabelValidateBeforeCall(owner, repo, issuesCreateLabelRequest, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a label (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateLabelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-label">Create a label Documentation</a>
     */
    public okhttp3.Call issuesCreateLabelAsync(String owner, String repo, IssuesCreateLabelRequest issuesCreateLabelRequest, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesCreateLabelValidateBeforeCall(owner, repo, issuesCreateLabelRequest, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesCreateMilestone
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateMilestoneRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-milestone">Create a milestone Documentation</a>
     */
    public okhttp3.Call issuesCreateMilestoneCall(String owner, String repo, IssuesCreateMilestoneRequest issuesCreateMilestoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesCreateMilestoneRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesCreateMilestoneValidateBeforeCall(String owner, String repo, IssuesCreateMilestoneRequest issuesCreateMilestoneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesCreateMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesCreateMilestone(Async)");
        }

        // verify the required parameter 'issuesCreateMilestoneRequest' is set
        if (issuesCreateMilestoneRequest == null) {
            throw new ApiException("Missing the required parameter 'issuesCreateMilestoneRequest' when calling issuesCreateMilestone(Async)");
        }

        return issuesCreateMilestoneCall(owner, repo, issuesCreateMilestoneRequest, _callback);

    }

    /**
     * Create a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateMilestoneRequest  (required)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-milestone">Create a milestone Documentation</a>
     */
    public Milestone issuesCreateMilestone(String owner, String repo, IssuesCreateMilestoneRequest issuesCreateMilestoneRequest) throws ApiException {
        ApiResponse<Milestone> localVarResp = issuesCreateMilestoneWithHttpInfo(owner, repo, issuesCreateMilestoneRequest);
        return localVarResp.getData();
    }

    /**
     * Create a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateMilestoneRequest  (required)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-milestone">Create a milestone Documentation</a>
     */
    public ApiResponse<Milestone> issuesCreateMilestoneWithHttpInfo(String owner, String repo, IssuesCreateMilestoneRequest issuesCreateMilestoneRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesCreateMilestoneValidateBeforeCall(owner, repo, issuesCreateMilestoneRequest, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a milestone (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issuesCreateMilestoneRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#create-a-milestone">Create a milestone Documentation</a>
     */
    public okhttp3.Call issuesCreateMilestoneAsync(String owner, String repo, IssuesCreateMilestoneRequest issuesCreateMilestoneRequest, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesCreateMilestoneValidateBeforeCall(owner, repo, issuesCreateMilestoneRequest, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesDeleteComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-an-issue-comment">Delete an issue comment Documentation</a>
     */
    public okhttp3.Call issuesDeleteCommentCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesDeleteCommentValidateBeforeCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesDeleteComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesDeleteComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling issuesDeleteComment(Async)");
        }

        return issuesDeleteCommentCall(owner, repo, commentId, _callback);

    }

    /**
     * Delete an issue comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-an-issue-comment">Delete an issue comment Documentation</a>
     */
    public void issuesDeleteComment(String owner, String repo, Integer commentId) throws ApiException {
        issuesDeleteCommentWithHttpInfo(owner, repo, commentId);
    }

    /**
     * Delete an issue comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-an-issue-comment">Delete an issue comment Documentation</a>
     */
    public ApiResponse<Void> issuesDeleteCommentWithHttpInfo(String owner, String repo, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = issuesDeleteCommentValidateBeforeCall(owner, repo, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an issue comment (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-an-issue-comment">Delete an issue comment Documentation</a>
     */
    public okhttp3.Call issuesDeleteCommentAsync(String owner, String repo, Integer commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesDeleteCommentValidateBeforeCall(owner, repo, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesDeleteLabel
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-label">Delete a label Documentation</a>
     */
    public okhttp3.Call issuesDeleteLabelCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesDeleteLabelValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesDeleteLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesDeleteLabel(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling issuesDeleteLabel(Async)");
        }

        return issuesDeleteLabelCall(owner, repo, name, _callback);

    }

    /**
     * Delete a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-label">Delete a label Documentation</a>
     */
    public void issuesDeleteLabel(String owner, String repo, String name) throws ApiException {
        issuesDeleteLabelWithHttpInfo(owner, repo, name);
    }

    /**
     * Delete a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-label">Delete a label Documentation</a>
     */
    public ApiResponse<Void> issuesDeleteLabelWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = issuesDeleteLabelValidateBeforeCall(owner, repo, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a label (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-label">Delete a label Documentation</a>
     */
    public okhttp3.Call issuesDeleteLabelAsync(String owner, String repo, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesDeleteLabelValidateBeforeCall(owner, repo, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesDeleteMilestone
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-milestone">Delete a milestone Documentation</a>
     */
    public okhttp3.Call issuesDeleteMilestoneCall(String owner, String repo, Integer milestoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones/{milestone_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "milestone_number" + "}", localVarApiClient.escapeString(milestoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesDeleteMilestoneValidateBeforeCall(String owner, String repo, Integer milestoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesDeleteMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesDeleteMilestone(Async)");
        }

        // verify the required parameter 'milestoneNumber' is set
        if (milestoneNumber == null) {
            throw new ApiException("Missing the required parameter 'milestoneNumber' when calling issuesDeleteMilestone(Async)");
        }

        return issuesDeleteMilestoneCall(owner, repo, milestoneNumber, _callback);

    }

    /**
     * Delete a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-milestone">Delete a milestone Documentation</a>
     */
    public void issuesDeleteMilestone(String owner, String repo, Integer milestoneNumber) throws ApiException {
        issuesDeleteMilestoneWithHttpInfo(owner, repo, milestoneNumber);
    }

    /**
     * Delete a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-milestone">Delete a milestone Documentation</a>
     */
    public ApiResponse<Void> issuesDeleteMilestoneWithHttpInfo(String owner, String repo, Integer milestoneNumber) throws ApiException {
        okhttp3.Call localVarCall = issuesDeleteMilestoneValidateBeforeCall(owner, repo, milestoneNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a milestone (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#delete-a-milestone">Delete a milestone Documentation</a>
     */
    public okhttp3.Call issuesDeleteMilestoneAsync(String owner, String repo, Integer milestoneNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesDeleteMilestoneValidateBeforeCall(owner, repo, milestoneNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesGet
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue">Get an issue Documentation</a>
     */
    public okhttp3.Call issuesGetCall(String owner, String repo, Integer issueNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesGetValidateBeforeCall(String owner, String repo, Integer issueNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesGet(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesGet(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesGet(Async)");
        }

        return issuesGetCall(owner, repo, issueNumber, _callback);

    }

    /**
     * Get an issue
     * The API returns a [&#x60;301 Moved Permanently&#x60; status](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a &#x60;404 Not Found&#x60; status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a &#x60;410 Gone&#x60; status. To receive webhook events for transferred and deleted issues, subscribe to the [&#x60;issues&#x60;](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue">Get an issue Documentation</a>
     */
    public Issue issuesGet(String owner, String repo, Integer issueNumber) throws ApiException {
        ApiResponse<Issue> localVarResp = issuesGetWithHttpInfo(owner, repo, issueNumber);
        return localVarResp.getData();
    }

    /**
     * Get an issue
     * The API returns a [&#x60;301 Moved Permanently&#x60; status](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a &#x60;404 Not Found&#x60; status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a &#x60;410 Gone&#x60; status. To receive webhook events for transferred and deleted issues, subscribe to the [&#x60;issues&#x60;](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue">Get an issue Documentation</a>
     */
    public ApiResponse<Issue> issuesGetWithHttpInfo(String owner, String repo, Integer issueNumber) throws ApiException {
        okhttp3.Call localVarCall = issuesGetValidateBeforeCall(owner, repo, issueNumber, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an issue (asynchronously)
     * The API returns a [&#x60;301 Moved Permanently&#x60; status](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a &#x60;404 Not Found&#x60; status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a &#x60;410 Gone&#x60; status. To receive webhook events for transferred and deleted issues, subscribe to the [&#x60;issues&#x60;](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue">Get an issue Documentation</a>
     */
    public okhttp3.Call issuesGetAsync(String owner, String repo, Integer issueNumber, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesGetValidateBeforeCall(owner, repo, issueNumber, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesGetComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-comment">Get an issue comment Documentation</a>
     */
    public okhttp3.Call issuesGetCommentCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesGetCommentValidateBeforeCall(String owner, String repo, Integer commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesGetComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesGetComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling issuesGetComment(Async)");
        }

        return issuesGetCommentCall(owner, repo, commentId, _callback);

    }

    /**
     * Get an issue comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return IssueComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-comment">Get an issue comment Documentation</a>
     */
    public IssueComment issuesGetComment(String owner, String repo, Integer commentId) throws ApiException {
        ApiResponse<IssueComment> localVarResp = issuesGetCommentWithHttpInfo(owner, repo, commentId);
        return localVarResp.getData();
    }

    /**
     * Get an issue comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @return ApiResponse&lt;IssueComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-comment">Get an issue comment Documentation</a>
     */
    public ApiResponse<IssueComment> issuesGetCommentWithHttpInfo(String owner, String repo, Integer commentId) throws ApiException {
        okhttp3.Call localVarCall = issuesGetCommentValidateBeforeCall(owner, repo, commentId, null);
        Type localVarReturnType = new TypeToken<IssueComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an issue comment (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-comment">Get an issue comment Documentation</a>
     */
    public okhttp3.Call issuesGetCommentAsync(String owner, String repo, Integer commentId, final ApiCallback<IssueComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesGetCommentValidateBeforeCall(owner, repo, commentId, _callback);
        Type localVarReturnType = new TypeToken<IssueComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesGetEvent
     * @param owner  (required)
     * @param repo  (required)
     * @param eventId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-event">Get an issue event Documentation</a>
     */
    public okhttp3.Call issuesGetEventCall(String owner, String repo, Integer eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/events/{event_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesGetEventValidateBeforeCall(String owner, String repo, Integer eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesGetEvent(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesGetEvent(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling issuesGetEvent(Async)");
        }

        return issuesGetEventCall(owner, repo, eventId, _callback);

    }

    /**
     * Get an issue event
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param eventId  (required)
     * @return IssueEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-event">Get an issue event Documentation</a>
     */
    public IssueEvent issuesGetEvent(String owner, String repo, Integer eventId) throws ApiException {
        ApiResponse<IssueEvent> localVarResp = issuesGetEventWithHttpInfo(owner, repo, eventId);
        return localVarResp.getData();
    }

    /**
     * Get an issue event
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param eventId  (required)
     * @return ApiResponse&lt;IssueEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-event">Get an issue event Documentation</a>
     */
    public ApiResponse<IssueEvent> issuesGetEventWithHttpInfo(String owner, String repo, Integer eventId) throws ApiException {
        okhttp3.Call localVarCall = issuesGetEventValidateBeforeCall(owner, repo, eventId, null);
        Type localVarReturnType = new TypeToken<IssueEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an issue event (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param eventId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-an-issue-event">Get an issue event Documentation</a>
     */
    public okhttp3.Call issuesGetEventAsync(String owner, String repo, Integer eventId, final ApiCallback<IssueEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesGetEventValidateBeforeCall(owner, repo, eventId, _callback);
        Type localVarReturnType = new TypeToken<IssueEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesGetLabel
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-label">Get a label Documentation</a>
     */
    public okhttp3.Call issuesGetLabelCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesGetLabelValidateBeforeCall(String owner, String repo, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesGetLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesGetLabel(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling issuesGetLabel(Async)");
        }

        return issuesGetLabelCall(owner, repo, name, _callback);

    }

    /**
     * Get a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-label">Get a label Documentation</a>
     */
    public Label issuesGetLabel(String owner, String repo, String name) throws ApiException {
        ApiResponse<Label> localVarResp = issuesGetLabelWithHttpInfo(owner, repo, name);
        return localVarResp.getData();
    }

    /**
     * Get a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-label">Get a label Documentation</a>
     */
    public ApiResponse<Label> issuesGetLabelWithHttpInfo(String owner, String repo, String name) throws ApiException {
        okhttp3.Call localVarCall = issuesGetLabelValidateBeforeCall(owner, repo, name, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a label (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-label">Get a label Documentation</a>
     */
    public okhttp3.Call issuesGetLabelAsync(String owner, String repo, String name, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesGetLabelValidateBeforeCall(owner, repo, name, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesGetMilestone
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-milestone">Get a milestone Documentation</a>
     */
    public okhttp3.Call issuesGetMilestoneCall(String owner, String repo, Integer milestoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones/{milestone_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "milestone_number" + "}", localVarApiClient.escapeString(milestoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesGetMilestoneValidateBeforeCall(String owner, String repo, Integer milestoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesGetMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesGetMilestone(Async)");
        }

        // verify the required parameter 'milestoneNumber' is set
        if (milestoneNumber == null) {
            throw new ApiException("Missing the required parameter 'milestoneNumber' when calling issuesGetMilestone(Async)");
        }

        return issuesGetMilestoneCall(owner, repo, milestoneNumber, _callback);

    }

    /**
     * Get a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-milestone">Get a milestone Documentation</a>
     */
    public Milestone issuesGetMilestone(String owner, String repo, Integer milestoneNumber) throws ApiException {
        ApiResponse<Milestone> localVarResp = issuesGetMilestoneWithHttpInfo(owner, repo, milestoneNumber);
        return localVarResp.getData();
    }

    /**
     * Get a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-milestone">Get a milestone Documentation</a>
     */
    public ApiResponse<Milestone> issuesGetMilestoneWithHttpInfo(String owner, String repo, Integer milestoneNumber) throws ApiException {
        okhttp3.Call localVarCall = issuesGetMilestoneValidateBeforeCall(owner, repo, milestoneNumber, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a milestone (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#get-a-milestone">Get a milestone Documentation</a>
     */
    public okhttp3.Call issuesGetMilestoneAsync(String owner, String repo, Integer milestoneNumber, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesGetMilestoneValidateBeforeCall(owner, repo, milestoneNumber, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesList
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param collab  (optional)
     * @param orgs  (optional)
     * @param owned  (optional)
     * @param pulls  (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issues-assigned-to-the-authenticated-user">List issues assigned to the authenticated user Documentation</a>
     */
    public okhttp3.Call issuesListCall(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Boolean collab, Boolean orgs, Boolean owned, Boolean pulls, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (collab != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collab", collab));
        }

        if (orgs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgs", orgs));
        }

        if (owned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owned", owned));
        }

        if (pulls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pulls", pulls));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListValidateBeforeCall(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Boolean collab, Boolean orgs, Boolean owned, Boolean pulls, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return issuesListCall(filter, state, labels, sort, direction, since, collab, orgs, owned, pulls, perPage, page, _callback);

    }

    /**
     * List issues assigned to the authenticated user
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the &#x60;filter&#x60; query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param collab  (optional)
     * @param orgs  (optional)
     * @param owned  (optional)
     * @param pulls  (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issues-assigned-to-the-authenticated-user">List issues assigned to the authenticated user Documentation</a>
     */
    public List<Issue> issuesList(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Boolean collab, Boolean orgs, Boolean owned, Boolean pulls, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Issue>> localVarResp = issuesListWithHttpInfo(filter, state, labels, sort, direction, since, collab, orgs, owned, pulls, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List issues assigned to the authenticated user
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the &#x60;filter&#x60; query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param collab  (optional)
     * @param orgs  (optional)
     * @param owned  (optional)
     * @param pulls  (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Issue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issues-assigned-to-the-authenticated-user">List issues assigned to the authenticated user Documentation</a>
     */
    public ApiResponse<List<Issue>> issuesListWithHttpInfo(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Boolean collab, Boolean orgs, Boolean owned, Boolean pulls, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListValidateBeforeCall(filter, state, labels, sort, direction, since, collab, orgs, owned, pulls, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issues assigned to the authenticated user (asynchronously)
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the &#x60;filter&#x60; query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param collab  (optional)
     * @param orgs  (optional)
     * @param owned  (optional)
     * @param pulls  (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issues-assigned-to-the-authenticated-user">List issues assigned to the authenticated user Documentation</a>
     */
    public okhttp3.Call issuesListAsync(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Boolean collab, Boolean orgs, Boolean owned, Boolean pulls, Integer perPage, Integer page, final ApiCallback<List<Issue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListValidateBeforeCall(filter, state, labels, sort, direction, since, collab, orgs, owned, pulls, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListAssignees
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-assignees">List assignees Documentation</a>
     */
    public okhttp3.Call issuesListAssigneesCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/assignees"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListAssigneesValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListAssignees(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListAssignees(Async)");
        }

        return issuesListAssigneesCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List assignees
     * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-assignees">List assignees Documentation</a>
     */
    public List<SimpleUser> issuesListAssignees(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = issuesListAssigneesWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List assignees
     * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-assignees">List assignees Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> issuesListAssigneesWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListAssigneesValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List assignees (asynchronously)
     * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-assignees">List assignees Documentation</a>
     */
    public okhttp3.Call issuesListAssigneesAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListAssigneesValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListComments
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments">List issue comments Documentation</a>
     */
    public okhttp3.Call issuesListCommentsCall(String owner, String repo, Integer issueNumber, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListCommentsValidateBeforeCall(String owner, String repo, Integer issueNumber, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListComments(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListComments(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesListComments(Async)");
        }

        return issuesListCommentsCall(owner, repo, issueNumber, since, perPage, page, _callback);

    }

    /**
     * List issue comments
     * Issue Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;IssueComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments">List issue comments Documentation</a>
     */
    public List<IssueComment> issuesListComments(String owner, String repo, Integer issueNumber, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<IssueComment>> localVarResp = issuesListCommentsWithHttpInfo(owner, repo, issueNumber, since, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List issue comments
     * Issue Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;IssueComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments">List issue comments Documentation</a>
     */
    public ApiResponse<List<IssueComment>> issuesListCommentsWithHttpInfo(String owner, String repo, Integer issueNumber, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListCommentsValidateBeforeCall(owner, repo, issueNumber, since, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<IssueComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issue comments (asynchronously)
     * Issue Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments">List issue comments Documentation</a>
     */
    public okhttp3.Call issuesListCommentsAsync(String owner, String repo, Integer issueNumber, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback<List<IssueComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListCommentsValidateBeforeCall(owner, repo, issueNumber, since, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<IssueComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListCommentsForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments-for-a-repository">List issue comments for a repository Documentation</a>
     */
    public okhttp3.Call issuesListCommentsForRepoCall(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListCommentsForRepoValidateBeforeCall(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListCommentsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListCommentsForRepo(Async)");
        }

        return issuesListCommentsForRepoCall(owner, repo, sort, direction, since, perPage, page, _callback);

    }

    /**
     * List issue comments for a repository
     * By default, Issue Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;IssueComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments-for-a-repository">List issue comments for a repository Documentation</a>
     */
    public List<IssueComment> issuesListCommentsForRepo(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<IssueComment>> localVarResp = issuesListCommentsForRepoWithHttpInfo(owner, repo, sort, direction, since, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List issue comments for a repository
     * By default, Issue Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;IssueComment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments-for-a-repository">List issue comments for a repository Documentation</a>
     */
    public ApiResponse<List<IssueComment>> issuesListCommentsForRepoWithHttpInfo(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListCommentsForRepoValidateBeforeCall(owner, repo, sort, direction, since, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<IssueComment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issue comments for a repository (asynchronously)
     * By default, Issue Comments are ordered by ascending ID.
     * @param owner  (required)
     * @param repo  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction Either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without the &#x60;sort&#x60; parameter. (optional)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-comments-for-a-repository">List issue comments for a repository Documentation</a>
     */
    public okhttp3.Call issuesListCommentsForRepoAsync(String owner, String repo, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback<List<IssueComment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListCommentsForRepoValidateBeforeCall(owner, repo, sort, direction, since, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<IssueComment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListEvents
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events">List issue events Documentation</a>
     */
    public okhttp3.Call issuesListEventsCall(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/events"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListEventsValidateBeforeCall(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListEvents(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListEvents(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesListEvents(Async)");
        }

        return issuesListEventsCall(owner, repo, issueNumber, perPage, page, _callback);

    }

    /**
     * List issue events
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;IssueEventForIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events">List issue events Documentation</a>
     */
    public List<IssueEventForIssue> issuesListEvents(String owner, String repo, Integer issueNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<IssueEventForIssue>> localVarResp = issuesListEventsWithHttpInfo(owner, repo, issueNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List issue events
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;IssueEventForIssue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events">List issue events Documentation</a>
     */
    public ApiResponse<List<IssueEventForIssue>> issuesListEventsWithHttpInfo(String owner, String repo, Integer issueNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListEventsValidateBeforeCall(owner, repo, issueNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<IssueEventForIssue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issue events (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events">List issue events Documentation</a>
     */
    public okhttp3.Call issuesListEventsAsync(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback<List<IssueEventForIssue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListEventsValidateBeforeCall(owner, repo, issueNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<IssueEventForIssue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListEventsForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events-for-a-repository">List issue events for a repository Documentation</a>
     */
    public okhttp3.Call issuesListEventsForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/events"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListEventsForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListEventsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListEventsForRepo(Async)");
        }

        return issuesListEventsForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List issue events for a repository
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;IssueEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events-for-a-repository">List issue events for a repository Documentation</a>
     */
    public List<IssueEvent> issuesListEventsForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<IssueEvent>> localVarResp = issuesListEventsForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List issue events for a repository
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;IssueEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events-for-a-repository">List issue events for a repository Documentation</a>
     */
    public ApiResponse<List<IssueEvent>> issuesListEventsForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListEventsForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<IssueEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List issue events for a repository (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-issue-events-for-a-repository">List issue events for a repository Documentation</a>
     */
    public okhttp3.Call issuesListEventsForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<IssueEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListEventsForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<IssueEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListEventsForTimeline
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-timeline-events-for-an-issue">List timeline events for an issue Documentation</a>
     */
    public okhttp3.Call issuesListEventsForTimelineCall(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/timeline"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListEventsForTimelineValidateBeforeCall(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListEventsForTimeline(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListEventsForTimeline(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesListEventsForTimeline(Async)");
        }

        return issuesListEventsForTimelineCall(owner, repo, issueNumber, perPage, page, _callback);

    }

    /**
     * List timeline events for an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;TimelineIssueEvents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-timeline-events-for-an-issue">List timeline events for an issue Documentation</a>
     */
    public List<TimelineIssueEvents> issuesListEventsForTimeline(String owner, String repo, Integer issueNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<TimelineIssueEvents>> localVarResp = issuesListEventsForTimelineWithHttpInfo(owner, repo, issueNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List timeline events for an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;TimelineIssueEvents&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-timeline-events-for-an-issue">List timeline events for an issue Documentation</a>
     */
    public ApiResponse<List<TimelineIssueEvents>> issuesListEventsForTimelineWithHttpInfo(String owner, String repo, Integer issueNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListEventsForTimelineValidateBeforeCall(owner, repo, issueNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<TimelineIssueEvents>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List timeline events for an issue (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-timeline-events-for-an-issue">List timeline events for an issue Documentation</a>
     */
    public okhttp3.Call issuesListEventsForTimelineAsync(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback<List<TimelineIssueEvents>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListEventsForTimelineValidateBeforeCall(owner, repo, issueNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<TimelineIssueEvents>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListForAuthenticatedUser
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user">List user account issues assigned to the authenticated user Documentation</a>
     */
    public okhttp3.Call issuesListForAuthenticatedUserCall(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListForAuthenticatedUserValidateBeforeCall(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return issuesListForAuthenticatedUserCall(filter, state, labels, sort, direction, since, perPage, page, _callback);

    }

    /**
     * List user account issues assigned to the authenticated user
     * List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user">List user account issues assigned to the authenticated user Documentation</a>
     */
    public List<Issue> issuesListForAuthenticatedUser(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Issue>> localVarResp = issuesListForAuthenticatedUserWithHttpInfo(filter, state, labels, sort, direction, since, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List user account issues assigned to the authenticated user
     * List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Issue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user">List user account issues assigned to the authenticated user Documentation</a>
     */
    public ApiResponse<List<Issue>> issuesListForAuthenticatedUserWithHttpInfo(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListForAuthenticatedUserValidateBeforeCall(filter, state, labels, sort, direction, since, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List user account issues assigned to the authenticated user (asynchronously)
     * List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user">List user account issues assigned to the authenticated user Documentation</a>
     */
    public okhttp3.Call issuesListForAuthenticatedUserAsync(String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback<List<Issue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListForAuthenticatedUserValidateBeforeCall(filter, state, labels, sort, direction, since, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListForOrg
     * @param org  (required)
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user">List organization issues assigned to the authenticated user Documentation</a>
     */
    public okhttp3.Call issuesListForOrgCall(String org, String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/issues"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListForOrgValidateBeforeCall(String org, String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling issuesListForOrg(Async)");
        }

        return issuesListForOrgCall(org, filter, state, labels, sort, direction, since, perPage, page, _callback);

    }

    /**
     * List organization issues assigned to the authenticated user
     * List issues in an organization assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param org  (required)
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user">List organization issues assigned to the authenticated user Documentation</a>
     */
    public List<Issue> issuesListForOrg(String org, String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Issue>> localVarResp = issuesListForOrgWithHttpInfo(org, filter, state, labels, sort, direction, since, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization issues assigned to the authenticated user
     * List issues in an organization assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param org  (required)
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Issue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user">List organization issues assigned to the authenticated user Documentation</a>
     */
    public ApiResponse<List<Issue>> issuesListForOrgWithHttpInfo(String org, String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListForOrgValidateBeforeCall(org, filter, state, labels, sort, direction, since, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization issues assigned to the authenticated user (asynchronously)
     * List issues in an organization assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param org  (required)
     * @param filter Indicates which sorts of issues to return. Can be one of:   \\* &#x60;assigned&#x60;: Issues assigned to you   \\* &#x60;created&#x60;: Issues created by you   \\* &#x60;mentioned&#x60;: Issues mentioning you   \\* &#x60;subscribed&#x60;: Issues you&#39;re subscribed to updates for   \\* &#x60;all&#x60; or &#x60;repos&#x60;: All issues the authenticated user can see, regardless of participation or creation (optional, default to assigned)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user">List organization issues assigned to the authenticated user Documentation</a>
     */
    public okhttp3.Call issuesListForOrgAsync(String org, String filter, String state, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback<List<Issue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListForOrgValidateBeforeCall(org, filter, state, labels, sort, direction, since, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Issue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param milestone If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned. (optional)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param assignee Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user. (optional)
     * @param creator The user that created the issue. (optional)
     * @param mentioned A user that&#39;s mentioned in the issue. (optional)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-repository-issues">List repository issues Documentation</a>
     */
    public okhttp3.Call issuesListForRepoCall(String owner, String repo, String milestone, String state, String assignee, String creator, String mentioned, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (milestone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("milestone", milestone));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        if (creator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creator", creator));
        }

        if (mentioned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mentioned", mentioned));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListForRepoValidateBeforeCall(String owner, String repo, String milestone, String state, String assignee, String creator, String mentioned, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListForRepo(Async)");
        }

        return issuesListForRepoCall(owner, repo, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, perPage, page, _callback);

    }

    /**
     * List repository issues
     * List issues in a repository.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param milestone If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned. (optional)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param assignee Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user. (optional)
     * @param creator The user that created the issue. (optional)
     * @param mentioned A user that&#39;s mentioned in the issue. (optional)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;IssueSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-repository-issues">List repository issues Documentation</a>
     */
    public List<IssueSimple> issuesListForRepo(String owner, String repo, String milestone, String state, String assignee, String creator, String mentioned, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<IssueSimple>> localVarResp = issuesListForRepoWithHttpInfo(owner, repo, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository issues
     * List issues in a repository.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param milestone If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned. (optional)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param assignee Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user. (optional)
     * @param creator The user that created the issue. (optional)
     * @param mentioned A user that&#39;s mentioned in the issue. (optional)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;IssueSimple&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-repository-issues">List repository issues Documentation</a>
     */
    public ApiResponse<List<IssueSimple>> issuesListForRepoWithHttpInfo(String owner, String repo, String milestone, String state, String assignee, String creator, String mentioned, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListForRepoValidateBeforeCall(owner, repo, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<IssueSimple>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository issues (asynchronously)
     * List issues in a repository.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.21/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     * @param owner  (required)
     * @param repo  (required)
     * @param milestone If an &#x60;integer&#x60; is passed, it should refer to a milestone by its &#x60;number&#x60; field. If the string &#x60;*&#x60; is passed, issues with any milestone are accepted. If the string &#x60;none&#x60; is passed, issues without milestones are returned. (optional)
     * @param state Indicates the state of the issues to return. Can be either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param assignee Can be the name of a user. Pass in &#x60;none&#x60; for issues with no assigned user, and &#x60;*&#x60; for issues assigned to any user. (optional)
     * @param creator The user that created the issue. (optional)
     * @param mentioned A user that&#39;s mentioned in the issue. (optional)
     * @param labels A list of comma separated label names. Example: &#x60;bug,ui,@high&#x60; (optional)
     * @param sort What to sort results by. Can be either &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;comments&#x60;. (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-repository-issues">List repository issues Documentation</a>
     */
    public okhttp3.Call issuesListForRepoAsync(String owner, String repo, String milestone, String state, String assignee, String creator, String mentioned, String labels, String sort, String direction, OffsetDateTime since, Integer perPage, Integer page, final ApiCallback<List<IssueSimple>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListForRepoValidateBeforeCall(owner, repo, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<IssueSimple>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListLabelsForMilestone
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-issues-in-a-milestone">List labels for issues in a milestone Documentation</a>
     */
    public okhttp3.Call issuesListLabelsForMilestoneCall(String owner, String repo, Integer milestoneNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones/{milestone_number}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "milestone_number" + "}", localVarApiClient.escapeString(milestoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListLabelsForMilestoneValidateBeforeCall(String owner, String repo, Integer milestoneNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListLabelsForMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListLabelsForMilestone(Async)");
        }

        // verify the required parameter 'milestoneNumber' is set
        if (milestoneNumber == null) {
            throw new ApiException("Missing the required parameter 'milestoneNumber' when calling issuesListLabelsForMilestone(Async)");
        }

        return issuesListLabelsForMilestoneCall(owner, repo, milestoneNumber, perPage, page, _callback);

    }

    /**
     * List labels for issues in a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-issues-in-a-milestone">List labels for issues in a milestone Documentation</a>
     */
    public List<Label> issuesListLabelsForMilestone(String owner, String repo, Integer milestoneNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issuesListLabelsForMilestoneWithHttpInfo(owner, repo, milestoneNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List labels for issues in a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-issues-in-a-milestone">List labels for issues in a milestone Documentation</a>
     */
    public ApiResponse<List<Label>> issuesListLabelsForMilestoneWithHttpInfo(String owner, String repo, Integer milestoneNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListLabelsForMilestoneValidateBeforeCall(owner, repo, milestoneNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List labels for issues in a milestone (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-issues-in-a-milestone">List labels for issues in a milestone Documentation</a>
     */
    public okhttp3.Call issuesListLabelsForMilestoneAsync(String owner, String repo, Integer milestoneNumber, Integer perPage, Integer page, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListLabelsForMilestoneValidateBeforeCall(owner, repo, milestoneNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListLabelsForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-a-repository">List labels for a repository Documentation</a>
     */
    public okhttp3.Call issuesListLabelsForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListLabelsForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListLabelsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListLabelsForRepo(Async)");
        }

        return issuesListLabelsForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List labels for a repository
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-a-repository">List labels for a repository Documentation</a>
     */
    public List<Label> issuesListLabelsForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issuesListLabelsForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List labels for a repository
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-a-repository">List labels for a repository Documentation</a>
     */
    public ApiResponse<List<Label>> issuesListLabelsForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListLabelsForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List labels for a repository (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-a-repository">List labels for a repository Documentation</a>
     */
    public okhttp3.Call issuesListLabelsForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListLabelsForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListLabelsOnIssue
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-an-issue">List labels for an issue Documentation</a>
     */
    public okhttp3.Call issuesListLabelsOnIssueCall(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListLabelsOnIssueValidateBeforeCall(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListLabelsOnIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListLabelsOnIssue(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesListLabelsOnIssue(Async)");
        }

        return issuesListLabelsOnIssueCall(owner, repo, issueNumber, perPage, page, _callback);

    }

    /**
     * List labels for an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-an-issue">List labels for an issue Documentation</a>
     */
    public List<Label> issuesListLabelsOnIssue(String owner, String repo, Integer issueNumber, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issuesListLabelsOnIssueWithHttpInfo(owner, repo, issueNumber, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List labels for an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-an-issue">List labels for an issue Documentation</a>
     */
    public ApiResponse<List<Label>> issuesListLabelsOnIssueWithHttpInfo(String owner, String repo, Integer issueNumber, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListLabelsOnIssueValidateBeforeCall(owner, repo, issueNumber, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List labels for an issue (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-labels-for-an-issue">List labels for an issue Documentation</a>
     */
    public okhttp3.Call issuesListLabelsOnIssueAsync(String owner, String repo, Integer issueNumber, Integer perPage, Integer page, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListLabelsOnIssueValidateBeforeCall(owner, repo, issueNumber, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesListMilestones
     * @param owner  (required)
     * @param repo  (required)
     * @param state The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param sort What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (optional, default to due_on)
     * @param direction The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to asc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-milestones">List milestones Documentation</a>
     */
    public okhttp3.Call issuesListMilestonesCall(String owner, String repo, String state, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesListMilestonesValidateBeforeCall(String owner, String repo, String state, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesListMilestones(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesListMilestones(Async)");
        }

        return issuesListMilestonesCall(owner, repo, state, sort, direction, perPage, page, _callback);

    }

    /**
     * List milestones
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param state The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param sort What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (optional, default to due_on)
     * @param direction The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to asc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-milestones">List milestones Documentation</a>
     */
    public List<Milestone> issuesListMilestones(String owner, String repo, String state, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Milestone>> localVarResp = issuesListMilestonesWithHttpInfo(owner, repo, state, sort, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List milestones
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param state The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param sort What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (optional, default to due_on)
     * @param direction The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to asc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Milestone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-milestones">List milestones Documentation</a>
     */
    public ApiResponse<List<Milestone>> issuesListMilestonesWithHttpInfo(String owner, String repo, String state, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = issuesListMilestonesValidateBeforeCall(owner, repo, state, sort, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Milestone>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List milestones (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param state The state of the milestone. Either &#x60;open&#x60;, &#x60;closed&#x60;, or &#x60;all&#x60;. (optional, default to open)
     * @param sort What to sort results by. Either &#x60;due_on&#x60; or &#x60;completeness&#x60;. (optional, default to due_on)
     * @param direction The direction of the sort. Either &#x60;asc&#x60; or &#x60;desc&#x60;. (optional, default to asc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#list-milestones">List milestones Documentation</a>
     */
    public okhttp3.Call issuesListMilestonesAsync(String owner, String repo, String state, String sort, String direction, Integer perPage, Integer page, final ApiCallback<List<Milestone>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesListMilestonesValidateBeforeCall(owner, repo, state, sort, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Milestone>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesLock
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesLockRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#lock-an-issue">Lock an issue Documentation</a>
     */
    public okhttp3.Call issuesLockCall(String owner, String repo, Integer issueNumber, IssuesLockRequest issuesLockRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesLockRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/lock"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesLockValidateBeforeCall(String owner, String repo, Integer issueNumber, IssuesLockRequest issuesLockRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesLock(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesLock(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesLock(Async)");
        }

        return issuesLockCall(owner, repo, issueNumber, issuesLockRequest, _callback);

    }

    /**
     * Lock an issue
     * Users with push access can lock an issue or pull request&#39;s conversation.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesLockRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#lock-an-issue">Lock an issue Documentation</a>
     */
    public void issuesLock(String owner, String repo, Integer issueNumber, IssuesLockRequest issuesLockRequest) throws ApiException {
        issuesLockWithHttpInfo(owner, repo, issueNumber, issuesLockRequest);
    }

    /**
     * Lock an issue
     * Users with push access can lock an issue or pull request&#39;s conversation.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesLockRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#lock-an-issue">Lock an issue Documentation</a>
     */
    public ApiResponse<Void> issuesLockWithHttpInfo(String owner, String repo, Integer issueNumber, IssuesLockRequest issuesLockRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesLockValidateBeforeCall(owner, repo, issueNumber, issuesLockRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Lock an issue (asynchronously)
     * Users with push access can lock an issue or pull request&#39;s conversation.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesLockRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#lock-an-issue">Lock an issue Documentation</a>
     */
    public okhttp3.Call issuesLockAsync(String owner, String repo, Integer issueNumber, IssuesLockRequest issuesLockRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesLockValidateBeforeCall(owner, repo, issueNumber, issuesLockRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesRemoveAllLabels
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-all-labels-from-an-issue">Remove all labels from an issue Documentation</a>
     */
    public okhttp3.Call issuesRemoveAllLabelsCall(String owner, String repo, Integer issueNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesRemoveAllLabelsValidateBeforeCall(String owner, String repo, Integer issueNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesRemoveAllLabels(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesRemoveAllLabels(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesRemoveAllLabels(Async)");
        }

        return issuesRemoveAllLabelsCall(owner, repo, issueNumber, _callback);

    }

    /**
     * Remove all labels from an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-all-labels-from-an-issue">Remove all labels from an issue Documentation</a>
     */
    public void issuesRemoveAllLabels(String owner, String repo, Integer issueNumber) throws ApiException {
        issuesRemoveAllLabelsWithHttpInfo(owner, repo, issueNumber);
    }

    /**
     * Remove all labels from an issue
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-all-labels-from-an-issue">Remove all labels from an issue Documentation</a>
     */
    public ApiResponse<Void> issuesRemoveAllLabelsWithHttpInfo(String owner, String repo, Integer issueNumber) throws ApiException {
        okhttp3.Call localVarCall = issuesRemoveAllLabelsValidateBeforeCall(owner, repo, issueNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove all labels from an issue (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-all-labels-from-an-issue">Remove all labels from an issue Documentation</a>
     */
    public okhttp3.Call issuesRemoveAllLabelsAsync(String owner, String repo, Integer issueNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesRemoveAllLabelsValidateBeforeCall(owner, repo, issueNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesRemoveAssignees
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesRemoveAssigneesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-assignees-from-an-issue">Remove assignees from an issue Documentation</a>
     */
    public okhttp3.Call issuesRemoveAssigneesCall(String owner, String repo, Integer issueNumber, IssuesRemoveAssigneesRequest issuesRemoveAssigneesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesRemoveAssigneesRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/assignees"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesRemoveAssigneesValidateBeforeCall(String owner, String repo, Integer issueNumber, IssuesRemoveAssigneesRequest issuesRemoveAssigneesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesRemoveAssignees(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesRemoveAssignees(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesRemoveAssignees(Async)");
        }

        return issuesRemoveAssigneesCall(owner, repo, issueNumber, issuesRemoveAssigneesRequest, _callback);

    }

    /**
     * Remove assignees from an issue
     * Removes one or more assignees from an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesRemoveAssigneesRequest  (optional)
     * @return IssueSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-assignees-from-an-issue">Remove assignees from an issue Documentation</a>
     */
    public IssueSimple issuesRemoveAssignees(String owner, String repo, Integer issueNumber, IssuesRemoveAssigneesRequest issuesRemoveAssigneesRequest) throws ApiException {
        ApiResponse<IssueSimple> localVarResp = issuesRemoveAssigneesWithHttpInfo(owner, repo, issueNumber, issuesRemoveAssigneesRequest);
        return localVarResp.getData();
    }

    /**
     * Remove assignees from an issue
     * Removes one or more assignees from an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesRemoveAssigneesRequest  (optional)
     * @return ApiResponse&lt;IssueSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-assignees-from-an-issue">Remove assignees from an issue Documentation</a>
     */
    public ApiResponse<IssueSimple> issuesRemoveAssigneesWithHttpInfo(String owner, String repo, Integer issueNumber, IssuesRemoveAssigneesRequest issuesRemoveAssigneesRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesRemoveAssigneesValidateBeforeCall(owner, repo, issueNumber, issuesRemoveAssigneesRequest, null);
        Type localVarReturnType = new TypeToken<IssueSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove assignees from an issue (asynchronously)
     * Removes one or more assignees from an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesRemoveAssigneesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-assignees-from-an-issue">Remove assignees from an issue Documentation</a>
     */
    public okhttp3.Call issuesRemoveAssigneesAsync(String owner, String repo, Integer issueNumber, IssuesRemoveAssigneesRequest issuesRemoveAssigneesRequest, final ApiCallback<IssueSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesRemoveAssigneesValidateBeforeCall(owner, repo, issueNumber, issuesRemoveAssigneesRequest, _callback);
        Type localVarReturnType = new TypeToken<IssueSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesRemoveLabel
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-a-label-from-an-issue">Remove a label from an issue Documentation</a>
     */
    public okhttp3.Call issuesRemoveLabelCall(String owner, String repo, Integer issueNumber, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesRemoveLabelValidateBeforeCall(String owner, String repo, Integer issueNumber, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesRemoveLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesRemoveLabel(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesRemoveLabel(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling issuesRemoveLabel(Async)");
        }

        return issuesRemoveLabelCall(owner, repo, issueNumber, name, _callback);

    }

    /**
     * Remove a label from an issue
     * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a &#x60;404 Not Found&#x60; status if the label does not exist.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param name  (required)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-a-label-from-an-issue">Remove a label from an issue Documentation</a>
     */
    public List<Label> issuesRemoveLabel(String owner, String repo, Integer issueNumber, String name) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issuesRemoveLabelWithHttpInfo(owner, repo, issueNumber, name);
        return localVarResp.getData();
    }

    /**
     * Remove a label from an issue
     * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a &#x60;404 Not Found&#x60; status if the label does not exist.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param name  (required)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-a-label-from-an-issue">Remove a label from an issue Documentation</a>
     */
    public ApiResponse<List<Label>> issuesRemoveLabelWithHttpInfo(String owner, String repo, Integer issueNumber, String name) throws ApiException {
        okhttp3.Call localVarCall = issuesRemoveLabelValidateBeforeCall(owner, repo, issueNumber, name, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a label from an issue (asynchronously)
     * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a &#x60;404 Not Found&#x60; status if the label does not exist.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#remove-a-label-from-an-issue">Remove a label from an issue Documentation</a>
     */
    public okhttp3.Call issuesRemoveLabelAsync(String owner, String repo, Integer issueNumber, String name, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesRemoveLabelValidateBeforeCall(owner, repo, issueNumber, name, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesSetLabels
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#set-labels-for-an-issue">Set labels for an issue Documentation</a>
     */
    public okhttp3.Call issuesSetLabelsCall(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesSetLabelsRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/labels"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesSetLabelsValidateBeforeCall(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesSetLabels(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesSetLabels(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesSetLabels(Async)");
        }

        return issuesSetLabelsCall(owner, repo, issueNumber, issuesSetLabelsRequest, _callback);

    }

    /**
     * Set labels for an issue
     * Removes any previous labels and sets the new labels for an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#set-labels-for-an-issue">Set labels for an issue Documentation</a>
     */
    public List<Label> issuesSetLabels(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest) throws ApiException {
        ApiResponse<List<Label>> localVarResp = issuesSetLabelsWithHttpInfo(owner, repo, issueNumber, issuesSetLabelsRequest);
        return localVarResp.getData();
    }

    /**
     * Set labels for an issue
     * Removes any previous labels and sets the new labels for an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#set-labels-for-an-issue">Set labels for an issue Documentation</a>
     */
    public ApiResponse<List<Label>> issuesSetLabelsWithHttpInfo(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesSetLabelsValidateBeforeCall(owner, repo, issueNumber, issuesSetLabelsRequest, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set labels for an issue (asynchronously)
     * Removes any previous labels and sets the new labels for an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesSetLabelsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#set-labels-for-an-issue">Set labels for an issue Documentation</a>
     */
    public okhttp3.Call issuesSetLabelsAsync(String owner, String repo, Integer issueNumber, IssuesSetLabelsRequest issuesSetLabelsRequest, final ApiCallback<List<Label>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesSetLabelsValidateBeforeCall(owner, repo, issueNumber, issuesSetLabelsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesUnlock
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#unlock-an-issue">Unlock an issue Documentation</a>
     */
    public okhttp3.Call issuesUnlockCall(String owner, String repo, Integer issueNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/lock"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesUnlockValidateBeforeCall(String owner, String repo, Integer issueNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesUnlock(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesUnlock(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesUnlock(Async)");
        }

        return issuesUnlockCall(owner, repo, issueNumber, _callback);

    }

    /**
     * Unlock an issue
     * Users with push access can unlock an issue&#39;s conversation.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#unlock-an-issue">Unlock an issue Documentation</a>
     */
    public void issuesUnlock(String owner, String repo, Integer issueNumber) throws ApiException {
        issuesUnlockWithHttpInfo(owner, repo, issueNumber);
    }

    /**
     * Unlock an issue
     * Users with push access can unlock an issue&#39;s conversation.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#unlock-an-issue">Unlock an issue Documentation</a>
     */
    public ApiResponse<Void> issuesUnlockWithHttpInfo(String owner, String repo, Integer issueNumber) throws ApiException {
        okhttp3.Call localVarCall = issuesUnlockValidateBeforeCall(owner, repo, issueNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlock an issue (asynchronously)
     * Users with push access can unlock an issue&#39;s conversation.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#unlock-an-issue">Unlock an issue Documentation</a>
     */
    public okhttp3.Call issuesUnlockAsync(String owner, String repo, Integer issueNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesUnlockValidateBeforeCall(owner, repo, issueNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesUpdate
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues/#update-an-issue">Update an issue Documentation</a>
     */
    public okhttp3.Call issuesUpdateCall(String owner, String repo, Integer issueNumber, IssuesUpdateRequest issuesUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesUpdateRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesUpdateValidateBeforeCall(String owner, String repo, Integer issueNumber, IssuesUpdateRequest issuesUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesUpdate(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesUpdate(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling issuesUpdate(Async)");
        }

        return issuesUpdateCall(owner, repo, issueNumber, issuesUpdateRequest, _callback);

    }

    /**
     * Update an issue
     * Issue owners and users with push access can edit an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateRequest  (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues/#update-an-issue">Update an issue Documentation</a>
     */
    public Issue issuesUpdate(String owner, String repo, Integer issueNumber, IssuesUpdateRequest issuesUpdateRequest) throws ApiException {
        ApiResponse<Issue> localVarResp = issuesUpdateWithHttpInfo(owner, repo, issueNumber, issuesUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update an issue
     * Issue owners and users with push access can edit an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateRequest  (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues/#update-an-issue">Update an issue Documentation</a>
     */
    public ApiResponse<Issue> issuesUpdateWithHttpInfo(String owner, String repo, Integer issueNumber, IssuesUpdateRequest issuesUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesUpdateValidateBeforeCall(owner, repo, issueNumber, issuesUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an issue (asynchronously)
     * Issue owners and users with push access can edit an issue.
     * @param owner  (required)
     * @param repo  (required)
     * @param issueNumber issue_number parameter (required)
     * @param issuesUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues/#update-an-issue">Update an issue Documentation</a>
     */
    public okhttp3.Call issuesUpdateAsync(String owner, String repo, Integer issueNumber, IssuesUpdateRequest issuesUpdateRequest, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesUpdateValidateBeforeCall(owner, repo, issueNumber, issuesUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesUpdateComment
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-an-issue-comment">Update an issue comment Documentation</a>
     */
    public okhttp3.Call issuesUpdateCommentCall(String owner, String repo, Integer commentId, IssuesUpdateCommentRequest issuesUpdateCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesUpdateCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesUpdateCommentValidateBeforeCall(String owner, String repo, Integer commentId, IssuesUpdateCommentRequest issuesUpdateCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesUpdateComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesUpdateComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling issuesUpdateComment(Async)");
        }

        // verify the required parameter 'issuesUpdateCommentRequest' is set
        if (issuesUpdateCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'issuesUpdateCommentRequest' when calling issuesUpdateComment(Async)");
        }

        return issuesUpdateCommentCall(owner, repo, commentId, issuesUpdateCommentRequest, _callback);

    }

    /**
     * Update an issue comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @return IssueComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-an-issue-comment">Update an issue comment Documentation</a>
     */
    public IssueComment issuesUpdateComment(String owner, String repo, Integer commentId, IssuesUpdateCommentRequest issuesUpdateCommentRequest) throws ApiException {
        ApiResponse<IssueComment> localVarResp = issuesUpdateCommentWithHttpInfo(owner, repo, commentId, issuesUpdateCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Update an issue comment
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @return ApiResponse&lt;IssueComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-an-issue-comment">Update an issue comment Documentation</a>
     */
    public ApiResponse<IssueComment> issuesUpdateCommentWithHttpInfo(String owner, String repo, Integer commentId, IssuesUpdateCommentRequest issuesUpdateCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesUpdateCommentValidateBeforeCall(owner, repo, commentId, issuesUpdateCommentRequest, null);
        Type localVarReturnType = new TypeToken<IssueComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an issue comment (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param commentId comment_id parameter (required)
     * @param issuesUpdateCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-an-issue-comment">Update an issue comment Documentation</a>
     */
    public okhttp3.Call issuesUpdateCommentAsync(String owner, String repo, Integer commentId, IssuesUpdateCommentRequest issuesUpdateCommentRequest, final ApiCallback<IssueComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesUpdateCommentValidateBeforeCall(owner, repo, commentId, issuesUpdateCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<IssueComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesUpdateLabel
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param issuesUpdateLabelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-label">Update a label Documentation</a>
     */
    public okhttp3.Call issuesUpdateLabelCall(String owner, String repo, String name, IssuesUpdateLabelRequest issuesUpdateLabelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesUpdateLabelRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/labels/{name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesUpdateLabelValidateBeforeCall(String owner, String repo, String name, IssuesUpdateLabelRequest issuesUpdateLabelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesUpdateLabel(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesUpdateLabel(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling issuesUpdateLabel(Async)");
        }

        return issuesUpdateLabelCall(owner, repo, name, issuesUpdateLabelRequest, _callback);

    }

    /**
     * Update a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param issuesUpdateLabelRequest  (optional)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-label">Update a label Documentation</a>
     */
    public Label issuesUpdateLabel(String owner, String repo, String name, IssuesUpdateLabelRequest issuesUpdateLabelRequest) throws ApiException {
        ApiResponse<Label> localVarResp = issuesUpdateLabelWithHttpInfo(owner, repo, name, issuesUpdateLabelRequest);
        return localVarResp.getData();
    }

    /**
     * Update a label
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param issuesUpdateLabelRequest  (optional)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-label">Update a label Documentation</a>
     */
    public ApiResponse<Label> issuesUpdateLabelWithHttpInfo(String owner, String repo, String name, IssuesUpdateLabelRequest issuesUpdateLabelRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesUpdateLabelValidateBeforeCall(owner, repo, name, issuesUpdateLabelRequest, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a label (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param name  (required)
     * @param issuesUpdateLabelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-label">Update a label Documentation</a>
     */
    public okhttp3.Call issuesUpdateLabelAsync(String owner, String repo, String name, IssuesUpdateLabelRequest issuesUpdateLabelRequest, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesUpdateLabelValidateBeforeCall(owner, repo, name, issuesUpdateLabelRequest, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuesUpdateMilestone
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param issuesUpdateMilestoneRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-milestone">Update a milestone Documentation</a>
     */
    public okhttp3.Call issuesUpdateMilestoneCall(String owner, String repo, Integer milestoneNumber, IssuesUpdateMilestoneRequest issuesUpdateMilestoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issuesUpdateMilestoneRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/milestones/{milestone_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "milestone_number" + "}", localVarApiClient.escapeString(milestoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuesUpdateMilestoneValidateBeforeCall(String owner, String repo, Integer milestoneNumber, IssuesUpdateMilestoneRequest issuesUpdateMilestoneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling issuesUpdateMilestone(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling issuesUpdateMilestone(Async)");
        }

        // verify the required parameter 'milestoneNumber' is set
        if (milestoneNumber == null) {
            throw new ApiException("Missing the required parameter 'milestoneNumber' when calling issuesUpdateMilestone(Async)");
        }

        return issuesUpdateMilestoneCall(owner, repo, milestoneNumber, issuesUpdateMilestoneRequest, _callback);

    }

    /**
     * Update a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param issuesUpdateMilestoneRequest  (optional)
     * @return Milestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-milestone">Update a milestone Documentation</a>
     */
    public Milestone issuesUpdateMilestone(String owner, String repo, Integer milestoneNumber, IssuesUpdateMilestoneRequest issuesUpdateMilestoneRequest) throws ApiException {
        ApiResponse<Milestone> localVarResp = issuesUpdateMilestoneWithHttpInfo(owner, repo, milestoneNumber, issuesUpdateMilestoneRequest);
        return localVarResp.getData();
    }

    /**
     * Update a milestone
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param issuesUpdateMilestoneRequest  (optional)
     * @return ApiResponse&lt;Milestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-milestone">Update a milestone Documentation</a>
     */
    public ApiResponse<Milestone> issuesUpdateMilestoneWithHttpInfo(String owner, String repo, Integer milestoneNumber, IssuesUpdateMilestoneRequest issuesUpdateMilestoneRequest) throws ApiException {
        okhttp3.Call localVarCall = issuesUpdateMilestoneValidateBeforeCall(owner, repo, milestoneNumber, issuesUpdateMilestoneRequest, null);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a milestone (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param milestoneNumber milestone_number parameter (required)
     * @param issuesUpdateMilestoneRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.21/rest/reference/issues#update-a-milestone">Update a milestone Documentation</a>
     */
    public okhttp3.Call issuesUpdateMilestoneAsync(String owner, String repo, Integer milestoneNumber, IssuesUpdateMilestoneRequest issuesUpdateMilestoneRequest, final ApiCallback<Milestone> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuesUpdateMilestoneValidateBeforeCall(owner, repo, milestoneNumber, issuesUpdateMilestoneRequest, _callback);
        Type localVarReturnType = new TypeToken<Milestone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
