/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorAssociation;
import org.openapitools.client.model.IssueSearchResultItemLabelsInner;
import org.openapitools.client.model.NullableMilestone;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.PullRequestBase;
import org.openapitools.client.model.PullRequestHead;
import org.openapitools.client.model.PullRequestLinks;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.TeamSimple;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pull requests let you tell others about changes you&#39;ve pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:59.486661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullRequest {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PullRequestLinks links;

  public static final String SERIALIZED_NAME_ACTIVE_LOCK_REASON = "active_lock_reason";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOCK_REASON)
  private String activeLockReason;

  public static final String SERIALIZED_NAME_ADDITIONS = "additions";
  @SerializedName(SERIALIZED_NAME_ADDITIONS)
  private Integer additions;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private NullableSimpleUser assignee;

  public static final String SERIALIZED_NAME_ASSIGNEES = "assignees";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES)
  private List<SimpleUser> assignees;

  public static final String SERIALIZED_NAME_AUTHOR_ASSOCIATION = "author_association";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ASSOCIATION)
  private AuthorAssociation authorAssociation;

  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private PullRequestBase base;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CHANGED_FILES = "changed_files";
  @SerializedName(SERIALIZED_NAME_CHANGED_FILES)
  private Integer changedFiles;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Integer comments;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private Integer commits;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private URI commitsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETIONS = "deletions";
  @SerializedName(SERIALIZED_NAME_DELETIONS)
  private Integer deletions;

  public static final String SERIALIZED_NAME_DIFF_URL = "diff_url";
  @SerializedName(SERIALIZED_NAME_DIFF_URL)
  private URI diffUrl;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_HEAD = "head";
  @SerializedName(SERIALIZED_NAME_HEAD)
  private PullRequestHead head;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISSUE_URL = "issue_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_URL)
  private URI issueUrl;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<IssueSearchResultItemLabelsInner> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_MAINTAINER_CAN_MODIFY = "maintainer_can_modify";
  @SerializedName(SERIALIZED_NAME_MAINTAINER_CAN_MODIFY)
  private Boolean maintainerCanModify;

  public static final String SERIALIZED_NAME_MERGE_COMMIT_SHA = "merge_commit_sha";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_SHA)
  private String mergeCommitSha;

  public static final String SERIALIZED_NAME_MERGEABLE = "mergeable";
  @SerializedName(SERIALIZED_NAME_MERGEABLE)
  private Boolean mergeable;

  public static final String SERIALIZED_NAME_MERGEABLE_STATE = "mergeable_state";
  @SerializedName(SERIALIZED_NAME_MERGEABLE_STATE)
  private String mergeableState;

  public static final String SERIALIZED_NAME_MERGED = "merged";
  @SerializedName(SERIALIZED_NAME_MERGED)
  private Boolean merged;

  public static final String SERIALIZED_NAME_MERGED_AT = "merged_at";
  @SerializedName(SERIALIZED_NAME_MERGED_AT)
  private OffsetDateTime mergedAt;

  public static final String SERIALIZED_NAME_MERGED_BY = "merged_by";
  @SerializedName(SERIALIZED_NAME_MERGED_BY)
  private NullableSimpleUser mergedBy;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private NullableMilestone milestone;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PATCH_URL = "patch_url";
  @SerializedName(SERIALIZED_NAME_PATCH_URL)
  private URI patchUrl;

  public static final String SERIALIZED_NAME_REBASEABLE = "rebaseable";
  @SerializedName(SERIALIZED_NAME_REBASEABLE)
  private Boolean rebaseable;

  public static final String SERIALIZED_NAME_REQUESTED_REVIEWERS = "requested_reviewers";
  @SerializedName(SERIALIZED_NAME_REQUESTED_REVIEWERS)
  private List<SimpleUser> requestedReviewers;

  public static final String SERIALIZED_NAME_REQUESTED_TEAMS = "requested_teams";
  @SerializedName(SERIALIZED_NAME_REQUESTED_TEAMS)
  private List<TeamSimple> requestedTeams;

  public static final String SERIALIZED_NAME_REVIEW_COMMENT_URL = "review_comment_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENT_URL)
  private String reviewCommentUrl;

  public static final String SERIALIZED_NAME_REVIEW_COMMENTS = "review_comments";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENTS)
  private Integer reviewComments;

  public static final String SERIALIZED_NAME_REVIEW_COMMENTS_URL = "review_comments_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_COMMENTS_URL)
  private URI reviewCommentsUrl;

  /**
   * State of this Pull Request. Either &#x60;open&#x60; or &#x60;closed&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    OPEN("open"),
    
    CLOSED("closed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private URI statusesUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private NullableSimpleUser user;

  public PullRequest() {
  }

  public PullRequest links(PullRequestLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public PullRequestLinks getLinks() {
    return links;
  }

  public void setLinks(PullRequestLinks links) {
    this.links = links;
  }


  public PullRequest activeLockReason(String activeLockReason) {
    this.activeLockReason = activeLockReason;
    return this;
  }

  /**
   * Get activeLockReason
   * @return activeLockReason
   */
  @javax.annotation.Nullable
  public String getActiveLockReason() {
    return activeLockReason;
  }

  public void setActiveLockReason(String activeLockReason) {
    this.activeLockReason = activeLockReason;
  }


  public PullRequest additions(Integer additions) {
    this.additions = additions;
    return this;
  }

  /**
   * Get additions
   * @return additions
   */
  @javax.annotation.Nonnull
  public Integer getAdditions() {
    return additions;
  }

  public void setAdditions(Integer additions) {
    this.additions = additions;
  }


  public PullRequest assignee(NullableSimpleUser assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getAssignee() {
    return assignee;
  }

  public void setAssignee(NullableSimpleUser assignee) {
    this.assignee = assignee;
  }


  public PullRequest assignees(List<SimpleUser> assignees) {
    this.assignees = assignees;
    return this;
  }

  public PullRequest addAssigneesItem(SimpleUser assigneesItem) {
    if (this.assignees == null) {
      this.assignees = new ArrayList<>();
    }
    this.assignees.add(assigneesItem);
    return this;
  }

  /**
   * Get assignees
   * @return assignees
   */
  @javax.annotation.Nullable
  public List<SimpleUser> getAssignees() {
    return assignees;
  }

  public void setAssignees(List<SimpleUser> assignees) {
    this.assignees = assignees;
  }


  public PullRequest authorAssociation(AuthorAssociation authorAssociation) {
    this.authorAssociation = authorAssociation;
    return this;
  }

  /**
   * Get authorAssociation
   * @return authorAssociation
   */
  @javax.annotation.Nonnull
  public AuthorAssociation getAuthorAssociation() {
    return authorAssociation;
  }

  public void setAuthorAssociation(AuthorAssociation authorAssociation) {
    this.authorAssociation = authorAssociation;
  }


  public PullRequest base(PullRequestBase base) {
    this.base = base;
    return this;
  }

  /**
   * Get base
   * @return base
   */
  @javax.annotation.Nonnull
  public PullRequestBase getBase() {
    return base;
  }

  public void setBase(PullRequestBase base) {
    this.base = base;
  }


  public PullRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public PullRequest changedFiles(Integer changedFiles) {
    this.changedFiles = changedFiles;
    return this;
  }

  /**
   * Get changedFiles
   * @return changedFiles
   */
  @javax.annotation.Nonnull
  public Integer getChangedFiles() {
    return changedFiles;
  }

  public void setChangedFiles(Integer changedFiles) {
    this.changedFiles = changedFiles;
  }


  public PullRequest closedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
    return this;
  }

  /**
   * Get closedAt
   * @return closedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }


  public PullRequest comments(Integer comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nonnull
  public Integer getComments() {
    return comments;
  }

  public void setComments(Integer comments) {
    this.comments = comments;
  }


  public PullRequest commentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
    return this;
  }

  /**
   * Get commentsUrl
   * @return commentsUrl
   */
  @javax.annotation.Nonnull
  public URI getCommentsUrl() {
    return commentsUrl;
  }

  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public PullRequest commits(Integer commits) {
    this.commits = commits;
    return this;
  }

  /**
   * Get commits
   * @return commits
   */
  @javax.annotation.Nonnull
  public Integer getCommits() {
    return commits;
  }

  public void setCommits(Integer commits) {
    this.commits = commits;
  }


  public PullRequest commitsUrl(URI commitsUrl) {
    this.commitsUrl = commitsUrl;
    return this;
  }

  /**
   * Get commitsUrl
   * @return commitsUrl
   */
  @javax.annotation.Nonnull
  public URI getCommitsUrl() {
    return commitsUrl;
  }

  public void setCommitsUrl(URI commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public PullRequest createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PullRequest deletions(Integer deletions) {
    this.deletions = deletions;
    return this;
  }

  /**
   * Get deletions
   * @return deletions
   */
  @javax.annotation.Nonnull
  public Integer getDeletions() {
    return deletions;
  }

  public void setDeletions(Integer deletions) {
    this.deletions = deletions;
  }


  public PullRequest diffUrl(URI diffUrl) {
    this.diffUrl = diffUrl;
    return this;
  }

  /**
   * Get diffUrl
   * @return diffUrl
   */
  @javax.annotation.Nonnull
  public URI getDiffUrl() {
    return diffUrl;
  }

  public void setDiffUrl(URI diffUrl) {
    this.diffUrl = diffUrl;
  }


  public PullRequest draft(Boolean draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Indicates whether or not the pull request is a draft.
   * @return draft
   */
  @javax.annotation.Nullable
  public Boolean getDraft() {
    return draft;
  }

  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public PullRequest head(PullRequestHead head) {
    this.head = head;
    return this;
  }

  /**
   * Get head
   * @return head
   */
  @javax.annotation.Nonnull
  public PullRequestHead getHead() {
    return head;
  }

  public void setHead(PullRequestHead head) {
    this.head = head;
  }


  public PullRequest htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public PullRequest id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PullRequest issueUrl(URI issueUrl) {
    this.issueUrl = issueUrl;
    return this;
  }

  /**
   * Get issueUrl
   * @return issueUrl
   */
  @javax.annotation.Nonnull
  public URI getIssueUrl() {
    return issueUrl;
  }

  public void setIssueUrl(URI issueUrl) {
    this.issueUrl = issueUrl;
  }


  public PullRequest labels(List<IssueSearchResultItemLabelsInner> labels) {
    this.labels = labels;
    return this;
  }

  public PullRequest addLabelsItem(IssueSearchResultItemLabelsInner labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nonnull
  public List<IssueSearchResultItemLabelsInner> getLabels() {
    return labels;
  }

  public void setLabels(List<IssueSearchResultItemLabelsInner> labels) {
    this.labels = labels;
  }


  public PullRequest locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nonnull
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public PullRequest maintainerCanModify(Boolean maintainerCanModify) {
    this.maintainerCanModify = maintainerCanModify;
    return this;
  }

  /**
   * Indicates whether maintainers can modify the pull request.
   * @return maintainerCanModify
   */
  @javax.annotation.Nonnull
  public Boolean getMaintainerCanModify() {
    return maintainerCanModify;
  }

  public void setMaintainerCanModify(Boolean maintainerCanModify) {
    this.maintainerCanModify = maintainerCanModify;
  }


  public PullRequest mergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
    return this;
  }

  /**
   * Get mergeCommitSha
   * @return mergeCommitSha
   */
  @javax.annotation.Nullable
  public String getMergeCommitSha() {
    return mergeCommitSha;
  }

  public void setMergeCommitSha(String mergeCommitSha) {
    this.mergeCommitSha = mergeCommitSha;
  }


  public PullRequest mergeable(Boolean mergeable) {
    this.mergeable = mergeable;
    return this;
  }

  /**
   * Get mergeable
   * @return mergeable
   */
  @javax.annotation.Nullable
  public Boolean getMergeable() {
    return mergeable;
  }

  public void setMergeable(Boolean mergeable) {
    this.mergeable = mergeable;
  }


  public PullRequest mergeableState(String mergeableState) {
    this.mergeableState = mergeableState;
    return this;
  }

  /**
   * Get mergeableState
   * @return mergeableState
   */
  @javax.annotation.Nonnull
  public String getMergeableState() {
    return mergeableState;
  }

  public void setMergeableState(String mergeableState) {
    this.mergeableState = mergeableState;
  }


  public PullRequest merged(Boolean merged) {
    this.merged = merged;
    return this;
  }

  /**
   * Get merged
   * @return merged
   */
  @javax.annotation.Nonnull
  public Boolean getMerged() {
    return merged;
  }

  public void setMerged(Boolean merged) {
    this.merged = merged;
  }


  public PullRequest mergedAt(OffsetDateTime mergedAt) {
    this.mergedAt = mergedAt;
    return this;
  }

  /**
   * Get mergedAt
   * @return mergedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMergedAt() {
    return mergedAt;
  }

  public void setMergedAt(OffsetDateTime mergedAt) {
    this.mergedAt = mergedAt;
  }


  public PullRequest mergedBy(NullableSimpleUser mergedBy) {
    this.mergedBy = mergedBy;
    return this;
  }

  /**
   * Get mergedBy
   * @return mergedBy
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getMergedBy() {
    return mergedBy;
  }

  public void setMergedBy(NullableSimpleUser mergedBy) {
    this.mergedBy = mergedBy;
  }


  public PullRequest milestone(NullableMilestone milestone) {
    this.milestone = milestone;
    return this;
  }

  /**
   * Get milestone
   * @return milestone
   */
  @javax.annotation.Nullable
  public NullableMilestone getMilestone() {
    return milestone;
  }

  public void setMilestone(NullableMilestone milestone) {
    this.milestone = milestone;
  }


  public PullRequest nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public PullRequest number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Number uniquely identifying the pull request within its repository.
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public PullRequest patchUrl(URI patchUrl) {
    this.patchUrl = patchUrl;
    return this;
  }

  /**
   * Get patchUrl
   * @return patchUrl
   */
  @javax.annotation.Nonnull
  public URI getPatchUrl() {
    return patchUrl;
  }

  public void setPatchUrl(URI patchUrl) {
    this.patchUrl = patchUrl;
  }


  public PullRequest rebaseable(Boolean rebaseable) {
    this.rebaseable = rebaseable;
    return this;
  }

  /**
   * Get rebaseable
   * @return rebaseable
   */
  @javax.annotation.Nullable
  public Boolean getRebaseable() {
    return rebaseable;
  }

  public void setRebaseable(Boolean rebaseable) {
    this.rebaseable = rebaseable;
  }


  public PullRequest requestedReviewers(List<SimpleUser> requestedReviewers) {
    this.requestedReviewers = requestedReviewers;
    return this;
  }

  public PullRequest addRequestedReviewersItem(SimpleUser requestedReviewersItem) {
    if (this.requestedReviewers == null) {
      this.requestedReviewers = new ArrayList<>();
    }
    this.requestedReviewers.add(requestedReviewersItem);
    return this;
  }

  /**
   * Get requestedReviewers
   * @return requestedReviewers
   */
  @javax.annotation.Nullable
  public List<SimpleUser> getRequestedReviewers() {
    return requestedReviewers;
  }

  public void setRequestedReviewers(List<SimpleUser> requestedReviewers) {
    this.requestedReviewers = requestedReviewers;
  }


  public PullRequest requestedTeams(List<TeamSimple> requestedTeams) {
    this.requestedTeams = requestedTeams;
    return this;
  }

  public PullRequest addRequestedTeamsItem(TeamSimple requestedTeamsItem) {
    if (this.requestedTeams == null) {
      this.requestedTeams = new ArrayList<>();
    }
    this.requestedTeams.add(requestedTeamsItem);
    return this;
  }

  /**
   * Get requestedTeams
   * @return requestedTeams
   */
  @javax.annotation.Nullable
  public List<TeamSimple> getRequestedTeams() {
    return requestedTeams;
  }

  public void setRequestedTeams(List<TeamSimple> requestedTeams) {
    this.requestedTeams = requestedTeams;
  }


  public PullRequest reviewCommentUrl(String reviewCommentUrl) {
    this.reviewCommentUrl = reviewCommentUrl;
    return this;
  }

  /**
   * Get reviewCommentUrl
   * @return reviewCommentUrl
   */
  @javax.annotation.Nonnull
  public String getReviewCommentUrl() {
    return reviewCommentUrl;
  }

  public void setReviewCommentUrl(String reviewCommentUrl) {
    this.reviewCommentUrl = reviewCommentUrl;
  }


  public PullRequest reviewComments(Integer reviewComments) {
    this.reviewComments = reviewComments;
    return this;
  }

  /**
   * Get reviewComments
   * @return reviewComments
   */
  @javax.annotation.Nonnull
  public Integer getReviewComments() {
    return reviewComments;
  }

  public void setReviewComments(Integer reviewComments) {
    this.reviewComments = reviewComments;
  }


  public PullRequest reviewCommentsUrl(URI reviewCommentsUrl) {
    this.reviewCommentsUrl = reviewCommentsUrl;
    return this;
  }

  /**
   * Get reviewCommentsUrl
   * @return reviewCommentsUrl
   */
  @javax.annotation.Nonnull
  public URI getReviewCommentsUrl() {
    return reviewCommentsUrl;
  }

  public void setReviewCommentsUrl(URI reviewCommentsUrl) {
    this.reviewCommentsUrl = reviewCommentsUrl;
  }


  public PullRequest state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of this Pull Request. Either &#x60;open&#x60; or &#x60;closed&#x60;.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public PullRequest statusesUrl(URI statusesUrl) {
    this.statusesUrl = statusesUrl;
    return this;
  }

  /**
   * Get statusesUrl
   * @return statusesUrl
   */
  @javax.annotation.Nonnull
  public URI getStatusesUrl() {
    return statusesUrl;
  }

  public void setStatusesUrl(URI statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public PullRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the pull request.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PullRequest updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PullRequest url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public PullRequest user(NullableSimpleUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getUser() {
    return user;
  }

  public void setUser(NullableSimpleUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullRequest pullRequest = (PullRequest) o;
    return Objects.equals(this.links, pullRequest.links) &&
        Objects.equals(this.activeLockReason, pullRequest.activeLockReason) &&
        Objects.equals(this.additions, pullRequest.additions) &&
        Objects.equals(this.assignee, pullRequest.assignee) &&
        Objects.equals(this.assignees, pullRequest.assignees) &&
        Objects.equals(this.authorAssociation, pullRequest.authorAssociation) &&
        Objects.equals(this.base, pullRequest.base) &&
        Objects.equals(this.body, pullRequest.body) &&
        Objects.equals(this.changedFiles, pullRequest.changedFiles) &&
        Objects.equals(this.closedAt, pullRequest.closedAt) &&
        Objects.equals(this.comments, pullRequest.comments) &&
        Objects.equals(this.commentsUrl, pullRequest.commentsUrl) &&
        Objects.equals(this.commits, pullRequest.commits) &&
        Objects.equals(this.commitsUrl, pullRequest.commitsUrl) &&
        Objects.equals(this.createdAt, pullRequest.createdAt) &&
        Objects.equals(this.deletions, pullRequest.deletions) &&
        Objects.equals(this.diffUrl, pullRequest.diffUrl) &&
        Objects.equals(this.draft, pullRequest.draft) &&
        Objects.equals(this.head, pullRequest.head) &&
        Objects.equals(this.htmlUrl, pullRequest.htmlUrl) &&
        Objects.equals(this.id, pullRequest.id) &&
        Objects.equals(this.issueUrl, pullRequest.issueUrl) &&
        Objects.equals(this.labels, pullRequest.labels) &&
        Objects.equals(this.locked, pullRequest.locked) &&
        Objects.equals(this.maintainerCanModify, pullRequest.maintainerCanModify) &&
        Objects.equals(this.mergeCommitSha, pullRequest.mergeCommitSha) &&
        Objects.equals(this.mergeable, pullRequest.mergeable) &&
        Objects.equals(this.mergeableState, pullRequest.mergeableState) &&
        Objects.equals(this.merged, pullRequest.merged) &&
        Objects.equals(this.mergedAt, pullRequest.mergedAt) &&
        Objects.equals(this.mergedBy, pullRequest.mergedBy) &&
        Objects.equals(this.milestone, pullRequest.milestone) &&
        Objects.equals(this.nodeId, pullRequest.nodeId) &&
        Objects.equals(this.number, pullRequest.number) &&
        Objects.equals(this.patchUrl, pullRequest.patchUrl) &&
        Objects.equals(this.rebaseable, pullRequest.rebaseable) &&
        Objects.equals(this.requestedReviewers, pullRequest.requestedReviewers) &&
        Objects.equals(this.requestedTeams, pullRequest.requestedTeams) &&
        Objects.equals(this.reviewCommentUrl, pullRequest.reviewCommentUrl) &&
        Objects.equals(this.reviewComments, pullRequest.reviewComments) &&
        Objects.equals(this.reviewCommentsUrl, pullRequest.reviewCommentsUrl) &&
        Objects.equals(this.state, pullRequest.state) &&
        Objects.equals(this.statusesUrl, pullRequest.statusesUrl) &&
        Objects.equals(this.title, pullRequest.title) &&
        Objects.equals(this.updatedAt, pullRequest.updatedAt) &&
        Objects.equals(this.url, pullRequest.url) &&
        Objects.equals(this.user, pullRequest.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, activeLockReason, additions, assignee, assignees, authorAssociation, base, body, changedFiles, closedAt, comments, commentsUrl, commits, commitsUrl, createdAt, deletions, diffUrl, draft, head, htmlUrl, id, issueUrl, labels, locked, maintainerCanModify, mergeCommitSha, mergeable, mergeableState, merged, mergedAt, mergedBy, milestone, nodeId, number, patchUrl, rebaseable, requestedReviewers, requestedTeams, reviewCommentUrl, reviewComments, reviewCommentsUrl, state, statusesUrl, title, updatedAt, url, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullRequest {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    activeLockReason: ").append(toIndentedString(activeLockReason)).append("\n");
    sb.append("    additions: ").append(toIndentedString(additions)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assignees: ").append(toIndentedString(assignees)).append("\n");
    sb.append("    authorAssociation: ").append(toIndentedString(authorAssociation)).append("\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    changedFiles: ").append(toIndentedString(changedFiles)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletions: ").append(toIndentedString(deletions)).append("\n");
    sb.append("    diffUrl: ").append(toIndentedString(diffUrl)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueUrl: ").append(toIndentedString(issueUrl)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    maintainerCanModify: ").append(toIndentedString(maintainerCanModify)).append("\n");
    sb.append("    mergeCommitSha: ").append(toIndentedString(mergeCommitSha)).append("\n");
    sb.append("    mergeable: ").append(toIndentedString(mergeable)).append("\n");
    sb.append("    mergeableState: ").append(toIndentedString(mergeableState)).append("\n");
    sb.append("    merged: ").append(toIndentedString(merged)).append("\n");
    sb.append("    mergedAt: ").append(toIndentedString(mergedAt)).append("\n");
    sb.append("    mergedBy: ").append(toIndentedString(mergedBy)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    patchUrl: ").append(toIndentedString(patchUrl)).append("\n");
    sb.append("    rebaseable: ").append(toIndentedString(rebaseable)).append("\n");
    sb.append("    requestedReviewers: ").append(toIndentedString(requestedReviewers)).append("\n");
    sb.append("    requestedTeams: ").append(toIndentedString(requestedTeams)).append("\n");
    sb.append("    reviewCommentUrl: ").append(toIndentedString(reviewCommentUrl)).append("\n");
    sb.append("    reviewComments: ").append(toIndentedString(reviewComments)).append("\n");
    sb.append("    reviewCommentsUrl: ").append(toIndentedString(reviewCommentsUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("active_lock_reason");
    openapiFields.add("additions");
    openapiFields.add("assignee");
    openapiFields.add("assignees");
    openapiFields.add("author_association");
    openapiFields.add("base");
    openapiFields.add("body");
    openapiFields.add("changed_files");
    openapiFields.add("closed_at");
    openapiFields.add("comments");
    openapiFields.add("comments_url");
    openapiFields.add("commits");
    openapiFields.add("commits_url");
    openapiFields.add("created_at");
    openapiFields.add("deletions");
    openapiFields.add("diff_url");
    openapiFields.add("draft");
    openapiFields.add("head");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("issue_url");
    openapiFields.add("labels");
    openapiFields.add("locked");
    openapiFields.add("maintainer_can_modify");
    openapiFields.add("merge_commit_sha");
    openapiFields.add("mergeable");
    openapiFields.add("mergeable_state");
    openapiFields.add("merged");
    openapiFields.add("merged_at");
    openapiFields.add("merged_by");
    openapiFields.add("milestone");
    openapiFields.add("node_id");
    openapiFields.add("number");
    openapiFields.add("patch_url");
    openapiFields.add("rebaseable");
    openapiFields.add("requested_reviewers");
    openapiFields.add("requested_teams");
    openapiFields.add("review_comment_url");
    openapiFields.add("review_comments");
    openapiFields.add("review_comments_url");
    openapiFields.add("state");
    openapiFields.add("statuses_url");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("additions");
    openapiRequiredFields.add("assignee");
    openapiRequiredFields.add("author_association");
    openapiRequiredFields.add("base");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("changed_files");
    openapiRequiredFields.add("closed_at");
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("commits");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("deletions");
    openapiRequiredFields.add("diff_url");
    openapiRequiredFields.add("head");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issue_url");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("maintainer_can_modify");
    openapiRequiredFields.add("merge_commit_sha");
    openapiRequiredFields.add("mergeable");
    openapiRequiredFields.add("mergeable_state");
    openapiRequiredFields.add("merged");
    openapiRequiredFields.add("merged_at");
    openapiRequiredFields.add("merged_by");
    openapiRequiredFields.add("milestone");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("patch_url");
    openapiRequiredFields.add("review_comment_url");
    openapiRequiredFields.add("review_comments");
    openapiRequiredFields.add("review_comments_url");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullRequest is not found in the empty JSON string", PullRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `_links`
      PullRequestLinks.validateJsonElement(jsonObj.get("_links"));
      if ((jsonObj.get("active_lock_reason") != null && !jsonObj.get("active_lock_reason").isJsonNull()) && !jsonObj.get("active_lock_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_lock_reason").toString()));
      }
      // validate the required field `assignee`
      NullableSimpleUser.validateJsonElement(jsonObj.get("assignee"));
      if (jsonObj.get("assignees") != null && !jsonObj.get("assignees").isJsonNull()) {
        JsonArray jsonArrayassignees = jsonObj.getAsJsonArray("assignees");
        if (jsonArrayassignees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assignees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assignees` to be an array in the JSON string but got `%s`", jsonObj.get("assignees").toString()));
          }

          // validate the optional field `assignees` (array)
          for (int i = 0; i < jsonArrayassignees.size(); i++) {
            SimpleUser.validateJsonElement(jsonArrayassignees.get(i));
          };
        }
      }
      // validate the required field `author_association`
      AuthorAssociation.validateJsonElement(jsonObj.get("author_association"));
      // validate the required field `base`
      PullRequestBase.validateJsonElement(jsonObj.get("base"));
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("diff_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff_url").toString()));
      }
      // validate the required field `head`
      PullRequestHead.validateJsonElement(jsonObj.get("head"));
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("issue_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }

      JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
      // validate the required field `labels` (array)
      for (int i = 0; i < jsonArraylabels.size(); i++) {
        IssueSearchResultItemLabelsInner.validateJsonElement(jsonArraylabels.get(i));
      };
      if ((jsonObj.get("merge_commit_sha") != null && !jsonObj.get("merge_commit_sha").isJsonNull()) && !jsonObj.get("merge_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_sha").toString()));
      }
      if (!jsonObj.get("mergeable_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeable_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeable_state").toString()));
      }
      // validate the required field `merged_by`
      NullableSimpleUser.validateJsonElement(jsonObj.get("merged_by"));
      // validate the required field `milestone`
      NullableMilestone.validateJsonElement(jsonObj.get("milestone"));
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("patch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch_url").toString()));
      }
      if (jsonObj.get("requested_reviewers") != null && !jsonObj.get("requested_reviewers").isJsonNull()) {
        JsonArray jsonArrayrequestedReviewers = jsonObj.getAsJsonArray("requested_reviewers");
        if (jsonArrayrequestedReviewers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requested_reviewers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requested_reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("requested_reviewers").toString()));
          }

          // validate the optional field `requested_reviewers` (array)
          for (int i = 0; i < jsonArrayrequestedReviewers.size(); i++) {
            SimpleUser.validateJsonElement(jsonArrayrequestedReviewers.get(i));
          };
        }
      }
      if (jsonObj.get("requested_teams") != null && !jsonObj.get("requested_teams").isJsonNull()) {
        JsonArray jsonArrayrequestedTeams = jsonObj.getAsJsonArray("requested_teams");
        if (jsonArrayrequestedTeams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requested_teams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requested_teams` to be an array in the JSON string but got `%s`", jsonObj.get("requested_teams").toString()));
          }

          // validate the optional field `requested_teams` (array)
          for (int i = 0; i < jsonArrayrequestedTeams.size(); i++) {
            TeamSimple.validateJsonElement(jsonArrayrequestedTeams.get(i));
          };
        }
      }
      if (!jsonObj.get("review_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comment_url").toString()));
      }
      if (!jsonObj.get("review_comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_comments_url").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `user`
      NullableSimpleUser.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PullRequest>() {
           @Override
           public void write(JsonWriter out, PullRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullRequest
   * @throws IOException if the JSON string is invalid with respect to PullRequest
   */
  public static PullRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullRequest.class);
  }

  /**
   * Convert an instance of PullRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

