/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EnterpriseSettingsEnterpriseLdap', function() {
    it('should create an instance of EnterpriseSettingsEnterpriseLdap', function() {
      // uncomment below and update the code to test EnterpriseSettingsEnterpriseLdap
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be.a(GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap);
    });

    it('should have the property adminGroup (base name: "admin_group")', function() {
      // uncomment below and update the code to test the property adminGroup
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property base (base name: "base")', function() {
      // uncomment below and update the code to test the property base
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property bindDn (base name: "bind_dn")', function() {
      // uncomment below and update the code to test the property bindDn
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "method")', function() {
      // uncomment below and update the code to test the property method
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property posixSupport (base name: "posix_support")', function() {
      // uncomment below and update the code to test the property posixSupport
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property profile (base name: "profile")', function() {
      // uncomment below and update the code to test the property profile
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property reconciliation (base name: "reconciliation")', function() {
      // uncomment below and update the code to test the property reconciliation
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property recursiveGroupSearch (base name: "recursive_group_search")', function() {
      // uncomment below and update the code to test the property recursiveGroupSearch
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property searchStrategy (base name: "search_strategy")', function() {
      // uncomment below and update the code to test the property searchStrategy
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property syncEnabled (base name: "sync_enabled")', function() {
      // uncomment below and update the code to test the property syncEnabled
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property teamSyncInterval (base name: "team_sync_interval")', function() {
      // uncomment below and update the code to test the property teamSyncInterval
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property userGroups (base name: "user_groups")', function() {
      // uncomment below and update the code to test the property userGroups
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property userSyncEmails (base name: "user_sync_emails")', function() {
      // uncomment below and update the code to test the property userSyncEmails
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property userSyncInterval (base name: "user_sync_interval")', function() {
      // uncomment below and update the code to test the property userSyncInterval
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property userSyncKeys (base name: "user_sync_keys")', function() {
      // uncomment below and update the code to test the property userSyncKeys
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

    it('should have the property virtualAttributeEnabled (base name: "virtual_attribute_enabled")', function() {
      // uncomment below and update the code to test the property virtualAttributeEnabled
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterpriseLdap();
      //expect(instance).to.be();
    });

  });

}));
