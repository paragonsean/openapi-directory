/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseGist from '../model/BaseGist';
import BasicError from '../model/BasicError';
import GistComment from '../model/GistComment';
import GistCommit from '../model/GistCommit';
import GistSimple from '../model/GistSimple';
import GistsCreateCommentRequest from '../model/GistsCreateCommentRequest';
import GistsCreateRequest from '../model/GistsCreateRequest';
import GistsGet403Response from '../model/GistsGet403Response';
import GistsUpdateRequest from '../model/GistsUpdateRequest';
import ValidationError from '../model/ValidationError';

/**
* Gists service.
* @module api/GistsApi
* @version 1.1.4
*/
export default class GistsApi {

    /**
    * Constructs a new GistsApi. 
    * @alias module:api/GistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gistsCheckIsStarred operation.
     * @callback module:api/GistsApi~gistsCheckIsStarredCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a gist is starred
     * 
     * @param {String} gistId gist_id parameter
     * @param {module:api/GistsApi~gistsCheckIsStarredCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gistsCheckIsStarred(gistId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsCheckIsStarred");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gists/{gist_id}/star', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsCreate operation.
     * @callback module:api/GistsApi~gistsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GistSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a gist
     * Allows you to add a new gist with one or more files.  **Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     * @param {module:model/GistsCreateRequest} gistsCreateRequest 
     * @param {module:api/GistsApi~gistsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GistSimple}
     */
    gistsCreate(gistsCreateRequest, callback) {
      let postBody = gistsCreateRequest;
      // verify the required parameter 'gistsCreateRequest' is set
      if (gistsCreateRequest === undefined || gistsCreateRequest === null) {
        throw new Error("Missing the required parameter 'gistsCreateRequest' when calling gistsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GistSimple;
      return this.apiClient.callApi(
        '/gists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsCreateComment operation.
     * @callback module:api/GistsApi~gistsCreateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GistComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a gist comment
     * 
     * @param {String} gistId gist_id parameter
     * @param {module:model/GistsCreateCommentRequest} gistsCreateCommentRequest 
     * @param {module:api/GistsApi~gistsCreateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GistComment}
     */
    gistsCreateComment(gistId, gistsCreateCommentRequest, callback) {
      let postBody = gistsCreateCommentRequest;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsCreateComment");
      }
      // verify the required parameter 'gistsCreateCommentRequest' is set
      if (gistsCreateCommentRequest === undefined || gistsCreateCommentRequest === null) {
        throw new Error("Missing the required parameter 'gistsCreateCommentRequest' when calling gistsCreateComment");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GistComment;
      return this.apiClient.callApi(
        '/gists/{gist_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsDelete operation.
     * @callback module:api/GistsApi~gistsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a gist
     * 
     * @param {String} gistId gist_id parameter
     * @param {module:api/GistsApi~gistsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gistsDelete(gistId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsDelete");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gists/{gist_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsDeleteComment operation.
     * @callback module:api/GistsApi~gistsDeleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a gist comment
     * 
     * @param {String} gistId gist_id parameter
     * @param {Number} commentId comment_id parameter
     * @param {module:api/GistsApi~gistsDeleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gistsDeleteComment(gistId, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsDeleteComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling gistsDeleteComment");
      }

      let pathParams = {
        'gist_id': gistId,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gists/{gist_id}/comments/{comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsFork operation.
     * @callback module:api/GistsApi~gistsForkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseGist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork a gist
     * **Note**: This was previously `/gists/:gist_id/fork`.
     * @param {String} gistId gist_id parameter
     * @param {module:api/GistsApi~gistsForkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseGist}
     */
    gistsFork(gistId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsFork");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseGist;
      return this.apiClient.callApi(
        '/gists/{gist_id}/forks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsGet operation.
     * @callback module:api/GistsApi~gistsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GistSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a gist
     * 
     * @param {String} gistId gist_id parameter
     * @param {module:api/GistsApi~gistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GistSimple}
     */
    gistsGet(gistId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsGet");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GistSimple;
      return this.apiClient.callApi(
        '/gists/{gist_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsGetComment operation.
     * @callback module:api/GistsApi~gistsGetCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GistComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a gist comment
     * 
     * @param {String} gistId gist_id parameter
     * @param {Number} commentId comment_id parameter
     * @param {module:api/GistsApi~gistsGetCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GistComment}
     */
    gistsGetComment(gistId, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsGetComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling gistsGetComment");
      }

      let pathParams = {
        'gist_id': gistId,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GistComment;
      return this.apiClient.callApi(
        '/gists/{gist_id}/comments/{comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsGetRevision operation.
     * @callback module:api/GistsApi~gistsGetRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GistSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a gist revision
     * 
     * @param {String} gistId gist_id parameter
     * @param {String} sha 
     * @param {module:api/GistsApi~gistsGetRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GistSimple}
     */
    gistsGetRevision(gistId, sha, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsGetRevision");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling gistsGetRevision");
      }

      let pathParams = {
        'gist_id': gistId,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GistSimple;
      return this.apiClient.callApi(
        '/gists/{gist_id}/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsList operation.
     * @callback module:api/GistsApi~gistsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseGist>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List gists for the authenticated user
     * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
     * @param {Object} opts Optional parameters
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/GistsApi~gistsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseGist>}
     */
    gistsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BaseGist];
      return this.apiClient.callApi(
        '/gists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsListComments operation.
     * @callback module:api/GistsApi~gistsListCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GistComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List gist comments
     * 
     * @param {String} gistId gist_id parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/GistsApi~gistsListCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GistComment>}
     */
    gistsListComments(gistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsListComments");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GistComment];
      return this.apiClient.callApi(
        '/gists/{gist_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsListCommits operation.
     * @callback module:api/GistsApi~gistsListCommitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GistCommit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List gist commits
     * 
     * @param {String} gistId gist_id parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/GistsApi~gistsListCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GistCommit>}
     */
    gistsListCommits(gistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsListCommits");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GistCommit];
      return this.apiClient.callApi(
        '/gists/{gist_id}/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsListForUser operation.
     * @callback module:api/GistsApi~gistsListForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseGist>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List gists for a user
     * Lists public gists for the specified user:
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/GistsApi~gistsListForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseGist>}
     */
    gistsListForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling gistsListForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BaseGist];
      return this.apiClient.callApi(
        '/users/{username}/gists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsListForks operation.
     * @callback module:api/GistsApi~gistsListForksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GistSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List gist forks
     * 
     * @param {String} gistId gist_id parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/GistsApi~gistsListForksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GistSimple>}
     */
    gistsListForks(gistId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsListForks");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GistSimple];
      return this.apiClient.callApi(
        '/gists/{gist_id}/forks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsListPublic operation.
     * @callback module:api/GistsApi~gistsListPublicCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseGist>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public gists
     * List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     * @param {Object} opts Optional parameters
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/GistsApi~gistsListPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseGist>}
     */
    gistsListPublic(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BaseGist];
      return this.apiClient.callApi(
        '/gists/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsListStarred operation.
     * @callback module:api/GistsApi~gistsListStarredCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BaseGist>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List starred gists
     * List the authenticated user's starred gists:
     * @param {Object} opts Optional parameters
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/GistsApi~gistsListStarredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BaseGist>}
     */
    gistsListStarred(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BaseGist];
      return this.apiClient.callApi(
        '/gists/starred', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsStar operation.
     * @callback module:api/GistsApi~gistsStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Star a gist
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@2.21/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {String} gistId gist_id parameter
     * @param {module:api/GistsApi~gistsStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gistsStar(gistId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsStar");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gists/{gist_id}/star', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsUnstar operation.
     * @callback module:api/GistsApi~gistsUnstarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unstar a gist
     * 
     * @param {String} gistId gist_id parameter
     * @param {module:api/GistsApi~gistsUnstarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gistsUnstar(gistId, callback) {
      let postBody = null;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsUnstar");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/gists/{gist_id}/star', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsUpdate operation.
     * @callback module:api/GistsApi~gistsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GistSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a gist
     * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
     * @param {String} gistId gist_id parameter
     * @param {module:model/GistsUpdateRequest} gistsUpdateRequest 
     * @param {module:api/GistsApi~gistsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GistSimple}
     */
    gistsUpdate(gistId, gistsUpdateRequest, callback) {
      let postBody = gistsUpdateRequest;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsUpdate");
      }
      // verify the required parameter 'gistsUpdateRequest' is set
      if (gistsUpdateRequest === undefined || gistsUpdateRequest === null) {
        throw new Error("Missing the required parameter 'gistsUpdateRequest' when calling gistsUpdate");
      }

      let pathParams = {
        'gist_id': gistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GistSimple;
      return this.apiClient.callApi(
        '/gists/{gist_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gistsUpdateComment operation.
     * @callback module:api/GistsApi~gistsUpdateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GistComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a gist comment
     * 
     * @param {String} gistId gist_id parameter
     * @param {Number} commentId comment_id parameter
     * @param {module:model/GistsCreateCommentRequest} gistsCreateCommentRequest 
     * @param {module:api/GistsApi~gistsUpdateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GistComment}
     */
    gistsUpdateComment(gistId, commentId, gistsCreateCommentRequest, callback) {
      let postBody = gistsCreateCommentRequest;
      // verify the required parameter 'gistId' is set
      if (gistId === undefined || gistId === null) {
        throw new Error("Missing the required parameter 'gistId' when calling gistsUpdateComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling gistsUpdateComment");
      }
      // verify the required parameter 'gistsCreateCommentRequest' is set
      if (gistsCreateCommentRequest === undefined || gistsCreateCommentRequest === null) {
        throw new Error("Missing the required parameter 'gistsCreateCommentRequest' when calling gistsUpdateComment");
      }

      let pathParams = {
        'gist_id': gistId,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GistComment;
      return this.apiClient.callApi(
        '/gists/{gist_id}/comments/{comment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
