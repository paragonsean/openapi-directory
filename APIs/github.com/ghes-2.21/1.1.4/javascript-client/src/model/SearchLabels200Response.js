/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelSearchResultItem from './LabelSearchResultItem';

/**
 * The SearchLabels200Response model module.
 * @module model/SearchLabels200Response
 * @version 1.1.4
 */
class SearchLabels200Response {
    /**
     * Constructs a new <code>SearchLabels200Response</code>.
     * @alias module:model/SearchLabels200Response
     * @param incompleteResults {Boolean} 
     * @param items {Array.<module:model/LabelSearchResultItem>} 
     * @param totalCount {Number} 
     */
    constructor(incompleteResults, items, totalCount) { 
        
        SearchLabels200Response.initialize(this, incompleteResults, items, totalCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, incompleteResults, items, totalCount) { 
        obj['incomplete_results'] = incompleteResults;
        obj['items'] = items;
        obj['total_count'] = totalCount;
    }

    /**
     * Constructs a <code>SearchLabels200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchLabels200Response} obj Optional instance to populate.
     * @return {module:model/SearchLabels200Response} The populated <code>SearchLabels200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchLabels200Response();

            if (data.hasOwnProperty('incomplete_results')) {
                obj['incomplete_results'] = ApiClient.convertToType(data['incomplete_results'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [LabelSearchResultItem]);
            }
            if (data.hasOwnProperty('total_count')) {
                obj['total_count'] = ApiClient.convertToType(data['total_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchLabels200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchLabels200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchLabels200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                LabelSearchResultItem.validateJSON(item);
            };
        }

        return true;
    }


}

SearchLabels200Response.RequiredProperties = ["incomplete_results", "items", "total_count"];

/**
 * @member {Boolean} incomplete_results
 */
SearchLabels200Response.prototype['incomplete_results'] = undefined;

/**
 * @member {Array.<module:model/LabelSearchResultItem>} items
 */
SearchLabels200Response.prototype['items'] = undefined;

/**
 * @member {Number} total_count
 */
SearchLabels200Response.prototype['total_count'] = undefined;






export default SearchLabels200Response;

