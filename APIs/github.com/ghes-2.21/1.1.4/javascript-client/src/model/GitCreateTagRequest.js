/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GitCreateTagRequestTagger from './GitCreateTagRequestTagger';

/**
 * The GitCreateTagRequest model module.
 * @module model/GitCreateTagRequest
 * @version 1.1.4
 */
class GitCreateTagRequest {
    /**
     * Constructs a new <code>GitCreateTagRequest</code>.
     * @alias module:model/GitCreateTagRequest
     * @param message {String} The tag message.
     * @param object {String} The SHA of the git object this is tagging.
     * @param tag {String} The tag's name. This is typically a version (e.g., \"v0.0.1\").
     * @param type {module:model/GitCreateTagRequest.TypeEnum} The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
     */
    constructor(message, object, tag, type) { 
        
        GitCreateTagRequest.initialize(this, message, object, tag, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, object, tag, type) { 
        obj['message'] = message;
        obj['object'] = object;
        obj['tag'] = tag;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GitCreateTagRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitCreateTagRequest} obj Optional instance to populate.
     * @return {module:model/GitCreateTagRequest} The populated <code>GitCreateTagRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitCreateTagRequest();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('tagger')) {
                obj['tagger'] = GitCreateTagRequestTagger.constructFromObject(data['tagger']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitCreateTagRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitCreateTagRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GitCreateTagRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // validate the optional field `tagger`
        if (data['tagger']) { // data not null
          GitCreateTagRequestTagger.validateJSON(data['tagger']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GitCreateTagRequest.RequiredProperties = ["message", "object", "tag", "type"];

/**
 * The tag message.
 * @member {String} message
 */
GitCreateTagRequest.prototype['message'] = undefined;

/**
 * The SHA of the git object this is tagging.
 * @member {String} object
 */
GitCreateTagRequest.prototype['object'] = undefined;

/**
 * The tag's name. This is typically a version (e.g., \"v0.0.1\").
 * @member {String} tag
 */
GitCreateTagRequest.prototype['tag'] = undefined;

/**
 * @member {module:model/GitCreateTagRequestTagger} tagger
 */
GitCreateTagRequest.prototype['tagger'] = undefined;

/**
 * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
 * @member {module:model/GitCreateTagRequest.TypeEnum} type
 */
GitCreateTagRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GitCreateTagRequest['TypeEnum'] = {

    /**
     * value: "commit"
     * @const
     */
    "commit": "commit",

    /**
     * value: "tree"
     * @const
     */
    "tree": "tree",

    /**
     * value: "blob"
     * @const
     */
    "blob": "blob"
};



export default GitCreateTagRequest;

