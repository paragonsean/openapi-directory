/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitComment from './CommitComment';

/**
 * The TimelineCommitCommentedEvent model module.
 * @module model/TimelineCommitCommentedEvent
 * @version 1.1.4
 */
class TimelineCommitCommentedEvent {
    /**
     * Constructs a new <code>TimelineCommitCommentedEvent</code>.
     * Timeline Commit Commented Event
     * @alias module:model/TimelineCommitCommentedEvent
     */
    constructor() { 
        
        TimelineCommitCommentedEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimelineCommitCommentedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimelineCommitCommentedEvent} obj Optional instance to populate.
     * @return {module:model/TimelineCommitCommentedEvent} The populated <code>TimelineCommitCommentedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimelineCommitCommentedEvent();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [CommitComment]);
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimelineCommitCommentedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimelineCommitCommentedEvent</code>.
     */
    static validateJSON(data) {
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                CommitComment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['commit_id'] && !(typeof data['commit_id'] === 'string' || data['commit_id'] instanceof String)) {
            throw new Error("Expected the field `commit_id` to be a primitive type in the JSON string but got " + data['commit_id']);
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CommitComment>} comments
 */
TimelineCommitCommentedEvent.prototype['comments'] = undefined;

/**
 * @member {String} commit_id
 */
TimelineCommitCommentedEvent.prototype['commit_id'] = undefined;

/**
 * @member {String} event
 */
TimelineCommitCommentedEvent.prototype['event'] = undefined;

/**
 * @member {String} node_id
 */
TimelineCommitCommentedEvent.prototype['node_id'] = undefined;






export default TimelineCommitCommentedEvent;

