/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReposCreateOrUpdateFileContentsRequestAuthor from './ReposCreateOrUpdateFileContentsRequestAuthor';
import ReposCreateOrUpdateFileContentsRequestCommitter from './ReposCreateOrUpdateFileContentsRequestCommitter';

/**
 * The ReposCreateOrUpdateFileContentsRequest model module.
 * @module model/ReposCreateOrUpdateFileContentsRequest
 * @version 1.1.4
 */
class ReposCreateOrUpdateFileContentsRequest {
    /**
     * Constructs a new <code>ReposCreateOrUpdateFileContentsRequest</code>.
     * @alias module:model/ReposCreateOrUpdateFileContentsRequest
     * @param content {String} The new file content, using Base64 encoding.
     * @param message {String} The commit message.
     */
    constructor(content, message) { 
        
        ReposCreateOrUpdateFileContentsRequest.initialize(this, content, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, message) { 
        obj['content'] = content;
        obj['message'] = message;
    }

    /**
     * Constructs a <code>ReposCreateOrUpdateFileContentsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposCreateOrUpdateFileContentsRequest} obj Optional instance to populate.
     * @return {module:model/ReposCreateOrUpdateFileContentsRequest} The populated <code>ReposCreateOrUpdateFileContentsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposCreateOrUpdateFileContentsRequest();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ReposCreateOrUpdateFileContentsRequestAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = ReposCreateOrUpdateFileContentsRequestCommitter.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposCreateOrUpdateFileContentsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposCreateOrUpdateFileContentsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReposCreateOrUpdateFileContentsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          ReposCreateOrUpdateFileContentsRequestAuthor.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // validate the optional field `committer`
        if (data['committer']) { // data not null
          ReposCreateOrUpdateFileContentsRequestCommitter.validateJSON(data['committer']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }

        return true;
    }


}

ReposCreateOrUpdateFileContentsRequest.RequiredProperties = ["content", "message"];

/**
 * @member {module:model/ReposCreateOrUpdateFileContentsRequestAuthor} author
 */
ReposCreateOrUpdateFileContentsRequest.prototype['author'] = undefined;

/**
 * The branch name. Default: the repositoryâ€™s default branch (usually `master`)
 * @member {String} branch
 */
ReposCreateOrUpdateFileContentsRequest.prototype['branch'] = undefined;

/**
 * @member {module:model/ReposCreateOrUpdateFileContentsRequestCommitter} committer
 */
ReposCreateOrUpdateFileContentsRequest.prototype['committer'] = undefined;

/**
 * The new file content, using Base64 encoding.
 * @member {String} content
 */
ReposCreateOrUpdateFileContentsRequest.prototype['content'] = undefined;

/**
 * The commit message.
 * @member {String} message
 */
ReposCreateOrUpdateFileContentsRequest.prototype['message'] = undefined;

/**
 * **Required if you are updating a file**. The blob SHA of the file being replaced.
 * @member {String} sha
 */
ReposCreateOrUpdateFileContentsRequest.prototype['sha'] = undefined;






export default ReposCreateOrUpdateFileContentsRequest;

