# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pull_request_base_repo import PullRequestBaseRepo
from openapi_server.models.pull_request_base_repo_owner import PullRequestBaseRepoOwner
from openapi_server import util


class PullRequestBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, ref: str=None, repo: PullRequestBaseRepo=None, sha: str=None, user: PullRequestBaseRepoOwner=None):
        """PullRequestBase - a model defined in OpenAPI

        :param label: The label of this PullRequestBase.
        :param ref: The ref of this PullRequestBase.
        :param repo: The repo of this PullRequestBase.
        :param sha: The sha of this PullRequestBase.
        :param user: The user of this PullRequestBase.
        """
        self.openapi_types = {
            'label': str,
            'ref': str,
            'repo': PullRequestBaseRepo,
            'sha': str,
            'user': PullRequestBaseRepoOwner
        }

        self.attribute_map = {
            'label': 'label',
            'ref': 'ref',
            'repo': 'repo',
            'sha': 'sha',
            'user': 'user'
        }

        self._label = label
        self._ref = ref
        self._repo = repo
        self._sha = sha
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullRequestBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pull_request_base of this PullRequestBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this PullRequestBase.


        :return: The label of this PullRequestBase.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PullRequestBase.


        :param label: The label of this PullRequestBase.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def ref(self):
        """Gets the ref of this PullRequestBase.


        :return: The ref of this PullRequestBase.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this PullRequestBase.


        :param ref: The ref of this PullRequestBase.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref

    @property
    def repo(self):
        """Gets the repo of this PullRequestBase.


        :return: The repo of this PullRequestBase.
        :rtype: PullRequestBaseRepo
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this PullRequestBase.


        :param repo: The repo of this PullRequestBase.
        :type repo: PullRequestBaseRepo
        """
        if repo is None:
            raise ValueError("Invalid value for `repo`, must not be `None`")

        self._repo = repo

    @property
    def sha(self):
        """Gets the sha of this PullRequestBase.


        :return: The sha of this PullRequestBase.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this PullRequestBase.


        :param sha: The sha of this PullRequestBase.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def user(self):
        """Gets the user of this PullRequestBase.


        :return: The user of this PullRequestBase.
        :rtype: PullRequestBaseRepoOwner
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PullRequestBase.


        :param user: The user of this PullRequestBase.
        :type user: PullRequestBaseRepoOwner
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
