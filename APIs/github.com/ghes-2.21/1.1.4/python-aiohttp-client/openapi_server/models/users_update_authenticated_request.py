# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsersUpdateAuthenticatedRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bio: str=None, blog: str=None, company: str=None, email: str=None, hireable: bool=None, location: str=None, name: str=None, twitter_username: str=None):
        """UsersUpdateAuthenticatedRequest - a model defined in OpenAPI

        :param bio: The bio of this UsersUpdateAuthenticatedRequest.
        :param blog: The blog of this UsersUpdateAuthenticatedRequest.
        :param company: The company of this UsersUpdateAuthenticatedRequest.
        :param email: The email of this UsersUpdateAuthenticatedRequest.
        :param hireable: The hireable of this UsersUpdateAuthenticatedRequest.
        :param location: The location of this UsersUpdateAuthenticatedRequest.
        :param name: The name of this UsersUpdateAuthenticatedRequest.
        :param twitter_username: The twitter_username of this UsersUpdateAuthenticatedRequest.
        """
        self.openapi_types = {
            'bio': str,
            'blog': str,
            'company': str,
            'email': str,
            'hireable': bool,
            'location': str,
            'name': str,
            'twitter_username': str
        }

        self.attribute_map = {
            'bio': 'bio',
            'blog': 'blog',
            'company': 'company',
            'email': 'email',
            'hireable': 'hireable',
            'location': 'location',
            'name': 'name',
            'twitter_username': 'twitter_username'
        }

        self._bio = bio
        self._blog = blog
        self._company = company
        self._email = email
        self._hireable = hireable
        self._location = location
        self._name = name
        self._twitter_username = twitter_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersUpdateAuthenticatedRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_update_authenticated_request of this UsersUpdateAuthenticatedRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bio(self):
        """Gets the bio of this UsersUpdateAuthenticatedRequest.

        The new short biography of the user.

        :return: The bio of this UsersUpdateAuthenticatedRequest.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this UsersUpdateAuthenticatedRequest.

        The new short biography of the user.

        :param bio: The bio of this UsersUpdateAuthenticatedRequest.
        :type bio: str
        """

        self._bio = bio

    @property
    def blog(self):
        """Gets the blog of this UsersUpdateAuthenticatedRequest.

        The new blog URL of the user.

        :return: The blog of this UsersUpdateAuthenticatedRequest.
        :rtype: str
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this UsersUpdateAuthenticatedRequest.

        The new blog URL of the user.

        :param blog: The blog of this UsersUpdateAuthenticatedRequest.
        :type blog: str
        """

        self._blog = blog

    @property
    def company(self):
        """Gets the company of this UsersUpdateAuthenticatedRequest.

        The new company of the user.

        :return: The company of this UsersUpdateAuthenticatedRequest.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UsersUpdateAuthenticatedRequest.

        The new company of the user.

        :param company: The company of this UsersUpdateAuthenticatedRequest.
        :type company: str
        """

        self._company = company

    @property
    def email(self):
        """Gets the email of this UsersUpdateAuthenticatedRequest.

        The publicly visible email address of the user.

        :return: The email of this UsersUpdateAuthenticatedRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsersUpdateAuthenticatedRequest.

        The publicly visible email address of the user.

        :param email: The email of this UsersUpdateAuthenticatedRequest.
        :type email: str
        """

        self._email = email

    @property
    def hireable(self):
        """Gets the hireable of this UsersUpdateAuthenticatedRequest.

        The new hiring availability of the user.

        :return: The hireable of this UsersUpdateAuthenticatedRequest.
        :rtype: bool
        """
        return self._hireable

    @hireable.setter
    def hireable(self, hireable):
        """Sets the hireable of this UsersUpdateAuthenticatedRequest.

        The new hiring availability of the user.

        :param hireable: The hireable of this UsersUpdateAuthenticatedRequest.
        :type hireable: bool
        """

        self._hireable = hireable

    @property
    def location(self):
        """Gets the location of this UsersUpdateAuthenticatedRequest.

        The new location of the user.

        :return: The location of this UsersUpdateAuthenticatedRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UsersUpdateAuthenticatedRequest.

        The new location of the user.

        :param location: The location of this UsersUpdateAuthenticatedRequest.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this UsersUpdateAuthenticatedRequest.

        The new name of the user.

        :return: The name of this UsersUpdateAuthenticatedRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsersUpdateAuthenticatedRequest.

        The new name of the user.

        :param name: The name of this UsersUpdateAuthenticatedRequest.
        :type name: str
        """

        self._name = name

    @property
    def twitter_username(self):
        """Gets the twitter_username of this UsersUpdateAuthenticatedRequest.

        The new Twitter username of the user.

        :return: The twitter_username of this UsersUpdateAuthenticatedRequest.
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this UsersUpdateAuthenticatedRequest.

        The new Twitter username of the user.

        :param twitter_username: The twitter_username of this UsersUpdateAuthenticatedRequest.
        :type twitter_username: str
        """

        self._twitter_username = twitter_username
