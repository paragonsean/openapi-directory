# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreadSubject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latest_comment_url: str=None, title: str=None, type: str=None, url: str=None):
        """ThreadSubject - a model defined in OpenAPI

        :param latest_comment_url: The latest_comment_url of this ThreadSubject.
        :param title: The title of this ThreadSubject.
        :param type: The type of this ThreadSubject.
        :param url: The url of this ThreadSubject.
        """
        self.openapi_types = {
            'latest_comment_url': str,
            'title': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'latest_comment_url': 'latest_comment_url',
            'title': 'title',
            'type': 'type',
            'url': 'url'
        }

        self._latest_comment_url = latest_comment_url
        self._title = title
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreadSubject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The thread_subject of this ThreadSubject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latest_comment_url(self):
        """Gets the latest_comment_url of this ThreadSubject.


        :return: The latest_comment_url of this ThreadSubject.
        :rtype: str
        """
        return self._latest_comment_url

    @latest_comment_url.setter
    def latest_comment_url(self, latest_comment_url):
        """Sets the latest_comment_url of this ThreadSubject.


        :param latest_comment_url: The latest_comment_url of this ThreadSubject.
        :type latest_comment_url: str
        """
        if latest_comment_url is None:
            raise ValueError("Invalid value for `latest_comment_url`, must not be `None`")

        self._latest_comment_url = latest_comment_url

    @property
    def title(self):
        """Gets the title of this ThreadSubject.


        :return: The title of this ThreadSubject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ThreadSubject.


        :param title: The title of this ThreadSubject.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this ThreadSubject.


        :return: The type of this ThreadSubject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThreadSubject.


        :param type: The type of this ThreadSubject.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this ThreadSubject.


        :return: The url of this ThreadSubject.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ThreadSubject.


        :param url: The url of this ThreadSubject.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
