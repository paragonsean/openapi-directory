# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GitCreateTreeRequestTreeInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, mode: str=None, path: str=None, sha: str=None, type: str=None):
        """GitCreateTreeRequestTreeInner - a model defined in OpenAPI

        :param content: The content of this GitCreateTreeRequestTreeInner.
        :param mode: The mode of this GitCreateTreeRequestTreeInner.
        :param path: The path of this GitCreateTreeRequestTreeInner.
        :param sha: The sha of this GitCreateTreeRequestTreeInner.
        :param type: The type of this GitCreateTreeRequestTreeInner.
        """
        self.openapi_types = {
            'content': str,
            'mode': str,
            'path': str,
            'sha': str,
            'type': str
        }

        self.attribute_map = {
            'content': 'content',
            'mode': 'mode',
            'path': 'path',
            'sha': 'sha',
            'type': 'type'
        }

        self._content = content
        self._mode = mode
        self._path = path
        self._sha = sha
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitCreateTreeRequestTreeInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The git_create_tree_request_tree_inner of this GitCreateTreeRequestTreeInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this GitCreateTreeRequestTreeInner.

        The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.

        :return: The content of this GitCreateTreeRequestTreeInner.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GitCreateTreeRequestTreeInner.

        The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.

        :param content: The content of this GitCreateTreeRequestTreeInner.
        :type content: str
        """

        self._content = content

    @property
    def mode(self):
        """Gets the mode of this GitCreateTreeRequestTreeInner.

        The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.

        :return: The mode of this GitCreateTreeRequestTreeInner.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GitCreateTreeRequestTreeInner.

        The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.

        :param mode: The mode of this GitCreateTreeRequestTreeInner.
        :type mode: str
        """
        allowed_values = ["100644", "100755", "040000", "160000", "120000"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def path(self):
        """Gets the path of this GitCreateTreeRequestTreeInner.

        The file referenced in the tree.

        :return: The path of this GitCreateTreeRequestTreeInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GitCreateTreeRequestTreeInner.

        The file referenced in the tree.

        :param path: The path of this GitCreateTreeRequestTreeInner.
        :type path: str
        """

        self._path = path

    @property
    def sha(self):
        """Gets the sha of this GitCreateTreeRequestTreeInner.

        The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.

        :return: The sha of this GitCreateTreeRequestTreeInner.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this GitCreateTreeRequestTreeInner.

        The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.

        :param sha: The sha of this GitCreateTreeRequestTreeInner.
        :type sha: str
        """

        self._sha = sha

    @property
    def type(self):
        """Gets the type of this GitCreateTreeRequestTreeInner.

        Either `blob`, `tree`, or `commit`.

        :return: The type of this GitCreateTreeRequestTreeInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GitCreateTreeRequestTreeInner.

        Either `blob`, `tree`, or `commit`.

        :param type: The type of this GitCreateTreeRequestTreeInner.
        :type type: str
        """
        allowed_values = ["blob", "tree", "commit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
