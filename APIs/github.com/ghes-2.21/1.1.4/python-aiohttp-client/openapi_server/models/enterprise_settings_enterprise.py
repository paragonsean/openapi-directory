# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.branch_protection_allow_deletions import BranchProtectionAllowDeletions
from openapi_server.models.enterprise_settings_enterprise_avatar import EnterpriseSettingsEnterpriseAvatar
from openapi_server.models.enterprise_settings_enterprise_cas import EnterpriseSettingsEnterpriseCas
from openapi_server.models.enterprise_settings_enterprise_collectd import EnterpriseSettingsEnterpriseCollectd
from openapi_server.models.enterprise_settings_enterprise_customer import EnterpriseSettingsEnterpriseCustomer
from openapi_server.models.enterprise_settings_enterprise_github_oauth import EnterpriseSettingsEnterpriseGithubOauth
from openapi_server.models.enterprise_settings_enterprise_github_ssl import EnterpriseSettingsEnterpriseGithubSsl
from openapi_server.models.enterprise_settings_enterprise_ldap import EnterpriseSettingsEnterpriseLdap
from openapi_server.models.enterprise_settings_enterprise_license import EnterpriseSettingsEnterpriseLicense
from openapi_server.models.enterprise_settings_enterprise_mapping import EnterpriseSettingsEnterpriseMapping
from openapi_server.models.enterprise_settings_enterprise_ntp import EnterpriseSettingsEnterpriseNtp
from openapi_server.models.enterprise_settings_enterprise_saml import EnterpriseSettingsEnterpriseSaml
from openapi_server.models.enterprise_settings_enterprise_smtp import EnterpriseSettingsEnterpriseSmtp
from openapi_server.models.enterprise_settings_enterprise_snmp import EnterpriseSettingsEnterpriseSnmp
from openapi_server.models.enterprise_settings_enterprise_syslog import EnterpriseSettingsEnterpriseSyslog
from openapi_server import util


class EnterpriseSettingsEnterprise(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_password: str=None, assets: str=None, auth_mode: str=None, avatar: EnterpriseSettingsEnterpriseAvatar=None, cas: EnterpriseSettingsEnterpriseCas=None, collectd: EnterpriseSettingsEnterpriseCollectd=None, configuration_id: int=None, configuration_run_count: int=None, customer: EnterpriseSettingsEnterpriseCustomer=None, expire_sessions: bool=None, github_hostname: str=None, github_oauth: EnterpriseSettingsEnterpriseGithubOauth=None, github_ssl: EnterpriseSettingsEnterpriseGithubSsl=None, http_proxy: str=None, identicons_host: str=None, ldap: EnterpriseSettingsEnterpriseLdap=None, license: EnterpriseSettingsEnterpriseLicense=None, load_balancer: str=None, mapping: EnterpriseSettingsEnterpriseMapping=None, ntp: EnterpriseSettingsEnterpriseNtp=None, pages: BranchProtectionAllowDeletions=None, private_mode: bool=None, public_pages: bool=None, saml: EnterpriseSettingsEnterpriseSaml=None, signup_enabled: bool=None, smtp: EnterpriseSettingsEnterpriseSmtp=None, snmp: EnterpriseSettingsEnterpriseSnmp=None, subdomain_isolation: bool=None, syslog: EnterpriseSettingsEnterpriseSyslog=None, timezone: str=None):
        """EnterpriseSettingsEnterprise - a model defined in OpenAPI

        :param admin_password: The admin_password of this EnterpriseSettingsEnterprise.
        :param assets: The assets of this EnterpriseSettingsEnterprise.
        :param auth_mode: The auth_mode of this EnterpriseSettingsEnterprise.
        :param avatar: The avatar of this EnterpriseSettingsEnterprise.
        :param cas: The cas of this EnterpriseSettingsEnterprise.
        :param collectd: The collectd of this EnterpriseSettingsEnterprise.
        :param configuration_id: The configuration_id of this EnterpriseSettingsEnterprise.
        :param configuration_run_count: The configuration_run_count of this EnterpriseSettingsEnterprise.
        :param customer: The customer of this EnterpriseSettingsEnterprise.
        :param expire_sessions: The expire_sessions of this EnterpriseSettingsEnterprise.
        :param github_hostname: The github_hostname of this EnterpriseSettingsEnterprise.
        :param github_oauth: The github_oauth of this EnterpriseSettingsEnterprise.
        :param github_ssl: The github_ssl of this EnterpriseSettingsEnterprise.
        :param http_proxy: The http_proxy of this EnterpriseSettingsEnterprise.
        :param identicons_host: The identicons_host of this EnterpriseSettingsEnterprise.
        :param ldap: The ldap of this EnterpriseSettingsEnterprise.
        :param license: The license of this EnterpriseSettingsEnterprise.
        :param load_balancer: The load_balancer of this EnterpriseSettingsEnterprise.
        :param mapping: The mapping of this EnterpriseSettingsEnterprise.
        :param ntp: The ntp of this EnterpriseSettingsEnterprise.
        :param pages: The pages of this EnterpriseSettingsEnterprise.
        :param private_mode: The private_mode of this EnterpriseSettingsEnterprise.
        :param public_pages: The public_pages of this EnterpriseSettingsEnterprise.
        :param saml: The saml of this EnterpriseSettingsEnterprise.
        :param signup_enabled: The signup_enabled of this EnterpriseSettingsEnterprise.
        :param smtp: The smtp of this EnterpriseSettingsEnterprise.
        :param snmp: The snmp of this EnterpriseSettingsEnterprise.
        :param subdomain_isolation: The subdomain_isolation of this EnterpriseSettingsEnterprise.
        :param syslog: The syslog of this EnterpriseSettingsEnterprise.
        :param timezone: The timezone of this EnterpriseSettingsEnterprise.
        """
        self.openapi_types = {
            'admin_password': str,
            'assets': str,
            'auth_mode': str,
            'avatar': EnterpriseSettingsEnterpriseAvatar,
            'cas': EnterpriseSettingsEnterpriseCas,
            'collectd': EnterpriseSettingsEnterpriseCollectd,
            'configuration_id': int,
            'configuration_run_count': int,
            'customer': EnterpriseSettingsEnterpriseCustomer,
            'expire_sessions': bool,
            'github_hostname': str,
            'github_oauth': EnterpriseSettingsEnterpriseGithubOauth,
            'github_ssl': EnterpriseSettingsEnterpriseGithubSsl,
            'http_proxy': str,
            'identicons_host': str,
            'ldap': EnterpriseSettingsEnterpriseLdap,
            'license': EnterpriseSettingsEnterpriseLicense,
            'load_balancer': str,
            'mapping': EnterpriseSettingsEnterpriseMapping,
            'ntp': EnterpriseSettingsEnterpriseNtp,
            'pages': BranchProtectionAllowDeletions,
            'private_mode': bool,
            'public_pages': bool,
            'saml': EnterpriseSettingsEnterpriseSaml,
            'signup_enabled': bool,
            'smtp': EnterpriseSettingsEnterpriseSmtp,
            'snmp': EnterpriseSettingsEnterpriseSnmp,
            'subdomain_isolation': bool,
            'syslog': EnterpriseSettingsEnterpriseSyslog,
            'timezone': str
        }

        self.attribute_map = {
            'admin_password': 'admin_password',
            'assets': 'assets',
            'auth_mode': 'auth_mode',
            'avatar': 'avatar',
            'cas': 'cas',
            'collectd': 'collectd',
            'configuration_id': 'configuration_id',
            'configuration_run_count': 'configuration_run_count',
            'customer': 'customer',
            'expire_sessions': 'expire_sessions',
            'github_hostname': 'github_hostname',
            'github_oauth': 'github_oauth',
            'github_ssl': 'github_ssl',
            'http_proxy': 'http_proxy',
            'identicons_host': 'identicons_host',
            'ldap': 'ldap',
            'license': 'license',
            'load_balancer': 'load_balancer',
            'mapping': 'mapping',
            'ntp': 'ntp',
            'pages': 'pages',
            'private_mode': 'private_mode',
            'public_pages': 'public_pages',
            'saml': 'saml',
            'signup_enabled': 'signup_enabled',
            'smtp': 'smtp',
            'snmp': 'snmp',
            'subdomain_isolation': 'subdomain_isolation',
            'syslog': 'syslog',
            'timezone': 'timezone'
        }

        self._admin_password = admin_password
        self._assets = assets
        self._auth_mode = auth_mode
        self._avatar = avatar
        self._cas = cas
        self._collectd = collectd
        self._configuration_id = configuration_id
        self._configuration_run_count = configuration_run_count
        self._customer = customer
        self._expire_sessions = expire_sessions
        self._github_hostname = github_hostname
        self._github_oauth = github_oauth
        self._github_ssl = github_ssl
        self._http_proxy = http_proxy
        self._identicons_host = identicons_host
        self._ldap = ldap
        self._license = license
        self._load_balancer = load_balancer
        self._mapping = mapping
        self._ntp = ntp
        self._pages = pages
        self._private_mode = private_mode
        self._public_pages = public_pages
        self._saml = saml
        self._signup_enabled = signup_enabled
        self._smtp = smtp
        self._snmp = snmp
        self._subdomain_isolation = subdomain_isolation
        self._syslog = syslog
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterprise':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise of this EnterpriseSettingsEnterprise.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_password(self):
        """Gets the admin_password of this EnterpriseSettingsEnterprise.


        :return: The admin_password of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this EnterpriseSettingsEnterprise.


        :param admin_password: The admin_password of this EnterpriseSettingsEnterprise.
        :type admin_password: str
        """

        self._admin_password = admin_password

    @property
    def assets(self):
        """Gets the assets of this EnterpriseSettingsEnterprise.


        :return: The assets of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this EnterpriseSettingsEnterprise.


        :param assets: The assets of this EnterpriseSettingsEnterprise.
        :type assets: str
        """

        self._assets = assets

    @property
    def auth_mode(self):
        """Gets the auth_mode of this EnterpriseSettingsEnterprise.


        :return: The auth_mode of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this EnterpriseSettingsEnterprise.


        :param auth_mode: The auth_mode of this EnterpriseSettingsEnterprise.
        :type auth_mode: str
        """

        self._auth_mode = auth_mode

    @property
    def avatar(self):
        """Gets the avatar of this EnterpriseSettingsEnterprise.


        :return: The avatar of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseAvatar
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this EnterpriseSettingsEnterprise.


        :param avatar: The avatar of this EnterpriseSettingsEnterprise.
        :type avatar: EnterpriseSettingsEnterpriseAvatar
        """

        self._avatar = avatar

    @property
    def cas(self):
        """Gets the cas of this EnterpriseSettingsEnterprise.


        :return: The cas of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseCas
        """
        return self._cas

    @cas.setter
    def cas(self, cas):
        """Sets the cas of this EnterpriseSettingsEnterprise.


        :param cas: The cas of this EnterpriseSettingsEnterprise.
        :type cas: EnterpriseSettingsEnterpriseCas
        """

        self._cas = cas

    @property
    def collectd(self):
        """Gets the collectd of this EnterpriseSettingsEnterprise.


        :return: The collectd of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseCollectd
        """
        return self._collectd

    @collectd.setter
    def collectd(self, collectd):
        """Sets the collectd of this EnterpriseSettingsEnterprise.


        :param collectd: The collectd of this EnterpriseSettingsEnterprise.
        :type collectd: EnterpriseSettingsEnterpriseCollectd
        """

        self._collectd = collectd

    @property
    def configuration_id(self):
        """Gets the configuration_id of this EnterpriseSettingsEnterprise.


        :return: The configuration_id of this EnterpriseSettingsEnterprise.
        :rtype: int
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """Sets the configuration_id of this EnterpriseSettingsEnterprise.


        :param configuration_id: The configuration_id of this EnterpriseSettingsEnterprise.
        :type configuration_id: int
        """

        self._configuration_id = configuration_id

    @property
    def configuration_run_count(self):
        """Gets the configuration_run_count of this EnterpriseSettingsEnterprise.


        :return: The configuration_run_count of this EnterpriseSettingsEnterprise.
        :rtype: int
        """
        return self._configuration_run_count

    @configuration_run_count.setter
    def configuration_run_count(self, configuration_run_count):
        """Sets the configuration_run_count of this EnterpriseSettingsEnterprise.


        :param configuration_run_count: The configuration_run_count of this EnterpriseSettingsEnterprise.
        :type configuration_run_count: int
        """

        self._configuration_run_count = configuration_run_count

    @property
    def customer(self):
        """Gets the customer of this EnterpriseSettingsEnterprise.


        :return: The customer of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this EnterpriseSettingsEnterprise.


        :param customer: The customer of this EnterpriseSettingsEnterprise.
        :type customer: EnterpriseSettingsEnterpriseCustomer
        """

        self._customer = customer

    @property
    def expire_sessions(self):
        """Gets the expire_sessions of this EnterpriseSettingsEnterprise.


        :return: The expire_sessions of this EnterpriseSettingsEnterprise.
        :rtype: bool
        """
        return self._expire_sessions

    @expire_sessions.setter
    def expire_sessions(self, expire_sessions):
        """Sets the expire_sessions of this EnterpriseSettingsEnterprise.


        :param expire_sessions: The expire_sessions of this EnterpriseSettingsEnterprise.
        :type expire_sessions: bool
        """

        self._expire_sessions = expire_sessions

    @property
    def github_hostname(self):
        """Gets the github_hostname of this EnterpriseSettingsEnterprise.


        :return: The github_hostname of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._github_hostname

    @github_hostname.setter
    def github_hostname(self, github_hostname):
        """Sets the github_hostname of this EnterpriseSettingsEnterprise.


        :param github_hostname: The github_hostname of this EnterpriseSettingsEnterprise.
        :type github_hostname: str
        """

        self._github_hostname = github_hostname

    @property
    def github_oauth(self):
        """Gets the github_oauth of this EnterpriseSettingsEnterprise.


        :return: The github_oauth of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseGithubOauth
        """
        return self._github_oauth

    @github_oauth.setter
    def github_oauth(self, github_oauth):
        """Sets the github_oauth of this EnterpriseSettingsEnterprise.


        :param github_oauth: The github_oauth of this EnterpriseSettingsEnterprise.
        :type github_oauth: EnterpriseSettingsEnterpriseGithubOauth
        """

        self._github_oauth = github_oauth

    @property
    def github_ssl(self):
        """Gets the github_ssl of this EnterpriseSettingsEnterprise.


        :return: The github_ssl of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseGithubSsl
        """
        return self._github_ssl

    @github_ssl.setter
    def github_ssl(self, github_ssl):
        """Sets the github_ssl of this EnterpriseSettingsEnterprise.


        :param github_ssl: The github_ssl of this EnterpriseSettingsEnterprise.
        :type github_ssl: EnterpriseSettingsEnterpriseGithubSsl
        """

        self._github_ssl = github_ssl

    @property
    def http_proxy(self):
        """Gets the http_proxy of this EnterpriseSettingsEnterprise.


        :return: The http_proxy of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._http_proxy

    @http_proxy.setter
    def http_proxy(self, http_proxy):
        """Sets the http_proxy of this EnterpriseSettingsEnterprise.


        :param http_proxy: The http_proxy of this EnterpriseSettingsEnterprise.
        :type http_proxy: str
        """

        self._http_proxy = http_proxy

    @property
    def identicons_host(self):
        """Gets the identicons_host of this EnterpriseSettingsEnterprise.


        :return: The identicons_host of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._identicons_host

    @identicons_host.setter
    def identicons_host(self, identicons_host):
        """Sets the identicons_host of this EnterpriseSettingsEnterprise.


        :param identicons_host: The identicons_host of this EnterpriseSettingsEnterprise.
        :type identicons_host: str
        """

        self._identicons_host = identicons_host

    @property
    def ldap(self):
        """Gets the ldap of this EnterpriseSettingsEnterprise.


        :return: The ldap of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseLdap
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this EnterpriseSettingsEnterprise.


        :param ldap: The ldap of this EnterpriseSettingsEnterprise.
        :type ldap: EnterpriseSettingsEnterpriseLdap
        """

        self._ldap = ldap

    @property
    def license(self):
        """Gets the license of this EnterpriseSettingsEnterprise.


        :return: The license of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseLicense
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this EnterpriseSettingsEnterprise.


        :param license: The license of this EnterpriseSettingsEnterprise.
        :type license: EnterpriseSettingsEnterpriseLicense
        """

        self._license = license

    @property
    def load_balancer(self):
        """Gets the load_balancer of this EnterpriseSettingsEnterprise.


        :return: The load_balancer of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this EnterpriseSettingsEnterprise.


        :param load_balancer: The load_balancer of this EnterpriseSettingsEnterprise.
        :type load_balancer: str
        """

        self._load_balancer = load_balancer

    @property
    def mapping(self):
        """Gets the mapping of this EnterpriseSettingsEnterprise.


        :return: The mapping of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseMapping
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this EnterpriseSettingsEnterprise.


        :param mapping: The mapping of this EnterpriseSettingsEnterprise.
        :type mapping: EnterpriseSettingsEnterpriseMapping
        """

        self._mapping = mapping

    @property
    def ntp(self):
        """Gets the ntp of this EnterpriseSettingsEnterprise.


        :return: The ntp of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseNtp
        """
        return self._ntp

    @ntp.setter
    def ntp(self, ntp):
        """Sets the ntp of this EnterpriseSettingsEnterprise.


        :param ntp: The ntp of this EnterpriseSettingsEnterprise.
        :type ntp: EnterpriseSettingsEnterpriseNtp
        """

        self._ntp = ntp

    @property
    def pages(self):
        """Gets the pages of this EnterpriseSettingsEnterprise.


        :return: The pages of this EnterpriseSettingsEnterprise.
        :rtype: BranchProtectionAllowDeletions
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this EnterpriseSettingsEnterprise.


        :param pages: The pages of this EnterpriseSettingsEnterprise.
        :type pages: BranchProtectionAllowDeletions
        """

        self._pages = pages

    @property
    def private_mode(self):
        """Gets the private_mode of this EnterpriseSettingsEnterprise.


        :return: The private_mode of this EnterpriseSettingsEnterprise.
        :rtype: bool
        """
        return self._private_mode

    @private_mode.setter
    def private_mode(self, private_mode):
        """Sets the private_mode of this EnterpriseSettingsEnterprise.


        :param private_mode: The private_mode of this EnterpriseSettingsEnterprise.
        :type private_mode: bool
        """

        self._private_mode = private_mode

    @property
    def public_pages(self):
        """Gets the public_pages of this EnterpriseSettingsEnterprise.


        :return: The public_pages of this EnterpriseSettingsEnterprise.
        :rtype: bool
        """
        return self._public_pages

    @public_pages.setter
    def public_pages(self, public_pages):
        """Sets the public_pages of this EnterpriseSettingsEnterprise.


        :param public_pages: The public_pages of this EnterpriseSettingsEnterprise.
        :type public_pages: bool
        """

        self._public_pages = public_pages

    @property
    def saml(self):
        """Gets the saml of this EnterpriseSettingsEnterprise.


        :return: The saml of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseSaml
        """
        return self._saml

    @saml.setter
    def saml(self, saml):
        """Sets the saml of this EnterpriseSettingsEnterprise.


        :param saml: The saml of this EnterpriseSettingsEnterprise.
        :type saml: EnterpriseSettingsEnterpriseSaml
        """

        self._saml = saml

    @property
    def signup_enabled(self):
        """Gets the signup_enabled of this EnterpriseSettingsEnterprise.


        :return: The signup_enabled of this EnterpriseSettingsEnterprise.
        :rtype: bool
        """
        return self._signup_enabled

    @signup_enabled.setter
    def signup_enabled(self, signup_enabled):
        """Sets the signup_enabled of this EnterpriseSettingsEnterprise.


        :param signup_enabled: The signup_enabled of this EnterpriseSettingsEnterprise.
        :type signup_enabled: bool
        """

        self._signup_enabled = signup_enabled

    @property
    def smtp(self):
        """Gets the smtp of this EnterpriseSettingsEnterprise.


        :return: The smtp of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseSmtp
        """
        return self._smtp

    @smtp.setter
    def smtp(self, smtp):
        """Sets the smtp of this EnterpriseSettingsEnterprise.


        :param smtp: The smtp of this EnterpriseSettingsEnterprise.
        :type smtp: EnterpriseSettingsEnterpriseSmtp
        """

        self._smtp = smtp

    @property
    def snmp(self):
        """Gets the snmp of this EnterpriseSettingsEnterprise.


        :return: The snmp of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseSnmp
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """Sets the snmp of this EnterpriseSettingsEnterprise.


        :param snmp: The snmp of this EnterpriseSettingsEnterprise.
        :type snmp: EnterpriseSettingsEnterpriseSnmp
        """

        self._snmp = snmp

    @property
    def subdomain_isolation(self):
        """Gets the subdomain_isolation of this EnterpriseSettingsEnterprise.


        :return: The subdomain_isolation of this EnterpriseSettingsEnterprise.
        :rtype: bool
        """
        return self._subdomain_isolation

    @subdomain_isolation.setter
    def subdomain_isolation(self, subdomain_isolation):
        """Sets the subdomain_isolation of this EnterpriseSettingsEnterprise.


        :param subdomain_isolation: The subdomain_isolation of this EnterpriseSettingsEnterprise.
        :type subdomain_isolation: bool
        """

        self._subdomain_isolation = subdomain_isolation

    @property
    def syslog(self):
        """Gets the syslog of this EnterpriseSettingsEnterprise.


        :return: The syslog of this EnterpriseSettingsEnterprise.
        :rtype: EnterpriseSettingsEnterpriseSyslog
        """
        return self._syslog

    @syslog.setter
    def syslog(self, syslog):
        """Sets the syslog of this EnterpriseSettingsEnterprise.


        :param syslog: The syslog of this EnterpriseSettingsEnterprise.
        :type syslog: EnterpriseSettingsEnterpriseSyslog
        """

        self._syslog = syslog

    @property
    def timezone(self):
        """Gets the timezone of this EnterpriseSettingsEnterprise.


        :return: The timezone of this EnterpriseSettingsEnterprise.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this EnterpriseSettingsEnterprise.


        :param timezone: The timezone of this EnterpriseSettingsEnterprise.
        :type timezone: str
        """

        self._timezone = timezone
