# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseSettingsEnterpriseLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_support: bool=None, evaluation: bool=None, expire_at: str=None, perpetual: bool=None, seats: int=None, ssh_allowed: bool=None, support_key: str=None, unlimited_seating: bool=None):
        """EnterpriseSettingsEnterpriseLicense - a model defined in OpenAPI

        :param cluster_support: The cluster_support of this EnterpriseSettingsEnterpriseLicense.
        :param evaluation: The evaluation of this EnterpriseSettingsEnterpriseLicense.
        :param expire_at: The expire_at of this EnterpriseSettingsEnterpriseLicense.
        :param perpetual: The perpetual of this EnterpriseSettingsEnterpriseLicense.
        :param seats: The seats of this EnterpriseSettingsEnterpriseLicense.
        :param ssh_allowed: The ssh_allowed of this EnterpriseSettingsEnterpriseLicense.
        :param support_key: The support_key of this EnterpriseSettingsEnterpriseLicense.
        :param unlimited_seating: The unlimited_seating of this EnterpriseSettingsEnterpriseLicense.
        """
        self.openapi_types = {
            'cluster_support': bool,
            'evaluation': bool,
            'expire_at': str,
            'perpetual': bool,
            'seats': int,
            'ssh_allowed': bool,
            'support_key': str,
            'unlimited_seating': bool
        }

        self.attribute_map = {
            'cluster_support': 'cluster_support',
            'evaluation': 'evaluation',
            'expire_at': 'expire_at',
            'perpetual': 'perpetual',
            'seats': 'seats',
            'ssh_allowed': 'ssh_allowed',
            'support_key': 'support_key',
            'unlimited_seating': 'unlimited_seating'
        }

        self._cluster_support = cluster_support
        self._evaluation = evaluation
        self._expire_at = expire_at
        self._perpetual = perpetual
        self._seats = seats
        self._ssh_allowed = ssh_allowed
        self._support_key = support_key
        self._unlimited_seating = unlimited_seating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterpriseLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise_license of this EnterpriseSettingsEnterpriseLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_support(self):
        """Gets the cluster_support of this EnterpriseSettingsEnterpriseLicense.


        :return: The cluster_support of this EnterpriseSettingsEnterpriseLicense.
        :rtype: bool
        """
        return self._cluster_support

    @cluster_support.setter
    def cluster_support(self, cluster_support):
        """Sets the cluster_support of this EnterpriseSettingsEnterpriseLicense.


        :param cluster_support: The cluster_support of this EnterpriseSettingsEnterpriseLicense.
        :type cluster_support: bool
        """

        self._cluster_support = cluster_support

    @property
    def evaluation(self):
        """Gets the evaluation of this EnterpriseSettingsEnterpriseLicense.


        :return: The evaluation of this EnterpriseSettingsEnterpriseLicense.
        :rtype: bool
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this EnterpriseSettingsEnterpriseLicense.


        :param evaluation: The evaluation of this EnterpriseSettingsEnterpriseLicense.
        :type evaluation: bool
        """

        self._evaluation = evaluation

    @property
    def expire_at(self):
        """Gets the expire_at of this EnterpriseSettingsEnterpriseLicense.


        :return: The expire_at of this EnterpriseSettingsEnterpriseLicense.
        :rtype: str
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this EnterpriseSettingsEnterpriseLicense.


        :param expire_at: The expire_at of this EnterpriseSettingsEnterpriseLicense.
        :type expire_at: str
        """

        self._expire_at = expire_at

    @property
    def perpetual(self):
        """Gets the perpetual of this EnterpriseSettingsEnterpriseLicense.


        :return: The perpetual of this EnterpriseSettingsEnterpriseLicense.
        :rtype: bool
        """
        return self._perpetual

    @perpetual.setter
    def perpetual(self, perpetual):
        """Sets the perpetual of this EnterpriseSettingsEnterpriseLicense.


        :param perpetual: The perpetual of this EnterpriseSettingsEnterpriseLicense.
        :type perpetual: bool
        """

        self._perpetual = perpetual

    @property
    def seats(self):
        """Gets the seats of this EnterpriseSettingsEnterpriseLicense.


        :return: The seats of this EnterpriseSettingsEnterpriseLicense.
        :rtype: int
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """Sets the seats of this EnterpriseSettingsEnterpriseLicense.


        :param seats: The seats of this EnterpriseSettingsEnterpriseLicense.
        :type seats: int
        """

        self._seats = seats

    @property
    def ssh_allowed(self):
        """Gets the ssh_allowed of this EnterpriseSettingsEnterpriseLicense.


        :return: The ssh_allowed of this EnterpriseSettingsEnterpriseLicense.
        :rtype: bool
        """
        return self._ssh_allowed

    @ssh_allowed.setter
    def ssh_allowed(self, ssh_allowed):
        """Sets the ssh_allowed of this EnterpriseSettingsEnterpriseLicense.


        :param ssh_allowed: The ssh_allowed of this EnterpriseSettingsEnterpriseLicense.
        :type ssh_allowed: bool
        """

        self._ssh_allowed = ssh_allowed

    @property
    def support_key(self):
        """Gets the support_key of this EnterpriseSettingsEnterpriseLicense.


        :return: The support_key of this EnterpriseSettingsEnterpriseLicense.
        :rtype: str
        """
        return self._support_key

    @support_key.setter
    def support_key(self, support_key):
        """Sets the support_key of this EnterpriseSettingsEnterpriseLicense.


        :param support_key: The support_key of this EnterpriseSettingsEnterpriseLicense.
        :type support_key: str
        """

        self._support_key = support_key

    @property
    def unlimited_seating(self):
        """Gets the unlimited_seating of this EnterpriseSettingsEnterpriseLicense.


        :return: The unlimited_seating of this EnterpriseSettingsEnterpriseLicense.
        :rtype: bool
        """
        return self._unlimited_seating

    @unlimited_seating.setter
    def unlimited_seating(self, unlimited_seating):
        """Sets the unlimited_seating of this EnterpriseSettingsEnterpriseLicense.


        :param unlimited_seating: The unlimited_seating of this EnterpriseSettingsEnterpriseLicense.
        :type unlimited_seating: bool
        """

        self._unlimited_seating = unlimited_seating
