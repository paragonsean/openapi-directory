# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NullableLicenseSimple(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, html_url: str=None, key: str=None, name: str=None, node_id: str=None, spdx_id: str=None, url: str=None):
        """NullableLicenseSimple - a model defined in OpenAPI

        :param html_url: The html_url of this NullableLicenseSimple.
        :param key: The key of this NullableLicenseSimple.
        :param name: The name of this NullableLicenseSimple.
        :param node_id: The node_id of this NullableLicenseSimple.
        :param spdx_id: The spdx_id of this NullableLicenseSimple.
        :param url: The url of this NullableLicenseSimple.
        """
        self.openapi_types = {
            'html_url': str,
            'key': str,
            'name': str,
            'node_id': str,
            'spdx_id': str,
            'url': str
        }

        self.attribute_map = {
            'html_url': 'html_url',
            'key': 'key',
            'name': 'name',
            'node_id': 'node_id',
            'spdx_id': 'spdx_id',
            'url': 'url'
        }

        self._html_url = html_url
        self._key = key
        self._name = name
        self._node_id = node_id
        self._spdx_id = spdx_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NullableLicenseSimple':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The nullable-license-simple of this NullableLicenseSimple.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def html_url(self):
        """Gets the html_url of this NullableLicenseSimple.


        :return: The html_url of this NullableLicenseSimple.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this NullableLicenseSimple.


        :param html_url: The html_url of this NullableLicenseSimple.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def key(self):
        """Gets the key of this NullableLicenseSimple.


        :return: The key of this NullableLicenseSimple.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NullableLicenseSimple.


        :param key: The key of this NullableLicenseSimple.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def name(self):
        """Gets the name of this NullableLicenseSimple.


        :return: The name of this NullableLicenseSimple.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NullableLicenseSimple.


        :param name: The name of this NullableLicenseSimple.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this NullableLicenseSimple.


        :return: The node_id of this NullableLicenseSimple.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NullableLicenseSimple.


        :param node_id: The node_id of this NullableLicenseSimple.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def spdx_id(self):
        """Gets the spdx_id of this NullableLicenseSimple.


        :return: The spdx_id of this NullableLicenseSimple.
        :rtype: str
        """
        return self._spdx_id

    @spdx_id.setter
    def spdx_id(self, spdx_id):
        """Sets the spdx_id of this NullableLicenseSimple.


        :param spdx_id: The spdx_id of this NullableLicenseSimple.
        :type spdx_id: str
        """
        if spdx_id is None:
            raise ValueError("Invalid value for `spdx_id`, must not be `None`")

        self._spdx_id = spdx_id

    @property
    def url(self):
        """Gets the url of this NullableLicenseSimple.


        :return: The url of this NullableLicenseSimple.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NullableLicenseSimple.


        :param url: The url of this NullableLicenseSimple.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
