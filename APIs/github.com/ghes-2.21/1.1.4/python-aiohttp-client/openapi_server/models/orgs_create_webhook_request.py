# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orgs_create_webhook_request_config import OrgsCreateWebhookRequestConfig
from openapi_server import util


class OrgsCreateWebhookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=True, config: OrgsCreateWebhookRequestConfig=None, events: List[str]=["push"], name: str=None):
        """OrgsCreateWebhookRequest - a model defined in OpenAPI

        :param active: The active of this OrgsCreateWebhookRequest.
        :param config: The config of this OrgsCreateWebhookRequest.
        :param events: The events of this OrgsCreateWebhookRequest.
        :param name: The name of this OrgsCreateWebhookRequest.
        """
        self.openapi_types = {
            'active': bool,
            'config': OrgsCreateWebhookRequestConfig,
            'events': List[str],
            'name': str
        }

        self.attribute_map = {
            'active': 'active',
            'config': 'config',
            'events': 'events',
            'name': 'name'
        }

        self._active = active
        self._config = config
        self._events = events
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgsCreateWebhookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orgs_create_webhook_request of this OrgsCreateWebhookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this OrgsCreateWebhookRequest.

        Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.

        :return: The active of this OrgsCreateWebhookRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OrgsCreateWebhookRequest.

        Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.

        :param active: The active of this OrgsCreateWebhookRequest.
        :type active: bool
        """

        self._active = active

    @property
    def config(self):
        """Gets the config of this OrgsCreateWebhookRequest.


        :return: The config of this OrgsCreateWebhookRequest.
        :rtype: OrgsCreateWebhookRequestConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this OrgsCreateWebhookRequest.


        :param config: The config of this OrgsCreateWebhookRequest.
        :type config: OrgsCreateWebhookRequestConfig
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def events(self):
        """Gets the events of this OrgsCreateWebhookRequest.

        Determines what [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) the hook is triggered for.

        :return: The events of this OrgsCreateWebhookRequest.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this OrgsCreateWebhookRequest.

        Determines what [events](https://docs.github.com/enterprise-server@2.21/webhooks/event-payloads) the hook is triggered for.

        :param events: The events of this OrgsCreateWebhookRequest.
        :type events: List[str]
        """

        self._events = events

    @property
    def name(self):
        """Gets the name of this OrgsCreateWebhookRequest.

        Must be passed as \"web\".

        :return: The name of this OrgsCreateWebhookRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrgsCreateWebhookRequest.

        Must be passed as \"web\".

        :param name: The name of this OrgsCreateWebhookRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
