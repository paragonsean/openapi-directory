# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.simple_user import SimpleUser
from openapi_server.models.team import Team
from openapi_server import util


class ReviewRequestedIssueEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: SimpleUser=None, commit_id: str=None, commit_url: str=None, created_at: str=None, event: str=None, id: int=None, node_id: str=None, performed_via_github_app: NullableIntegration=None, requested_reviewer: SimpleUser=None, requested_team: Team=None, review_requester: SimpleUser=None, url: str=None):
        """ReviewRequestedIssueEvent - a model defined in OpenAPI

        :param actor: The actor of this ReviewRequestedIssueEvent.
        :param commit_id: The commit_id of this ReviewRequestedIssueEvent.
        :param commit_url: The commit_url of this ReviewRequestedIssueEvent.
        :param created_at: The created_at of this ReviewRequestedIssueEvent.
        :param event: The event of this ReviewRequestedIssueEvent.
        :param id: The id of this ReviewRequestedIssueEvent.
        :param node_id: The node_id of this ReviewRequestedIssueEvent.
        :param performed_via_github_app: The performed_via_github_app of this ReviewRequestedIssueEvent.
        :param requested_reviewer: The requested_reviewer of this ReviewRequestedIssueEvent.
        :param requested_team: The requested_team of this ReviewRequestedIssueEvent.
        :param review_requester: The review_requester of this ReviewRequestedIssueEvent.
        :param url: The url of this ReviewRequestedIssueEvent.
        """
        self.openapi_types = {
            'actor': SimpleUser,
            'commit_id': str,
            'commit_url': str,
            'created_at': str,
            'event': str,
            'id': int,
            'node_id': str,
            'performed_via_github_app': NullableIntegration,
            'requested_reviewer': SimpleUser,
            'requested_team': Team,
            'review_requester': SimpleUser,
            'url': str
        }

        self.attribute_map = {
            'actor': 'actor',
            'commit_id': 'commit_id',
            'commit_url': 'commit_url',
            'created_at': 'created_at',
            'event': 'event',
            'id': 'id',
            'node_id': 'node_id',
            'performed_via_github_app': 'performed_via_github_app',
            'requested_reviewer': 'requested_reviewer',
            'requested_team': 'requested_team',
            'review_requester': 'review_requester',
            'url': 'url'
        }

        self._actor = actor
        self._commit_id = commit_id
        self._commit_url = commit_url
        self._created_at = created_at
        self._event = event
        self._id = id
        self._node_id = node_id
        self._performed_via_github_app = performed_via_github_app
        self._requested_reviewer = requested_reviewer
        self._requested_team = requested_team
        self._review_requester = review_requester
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReviewRequestedIssueEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The review-requested-issue-event of this ReviewRequestedIssueEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this ReviewRequestedIssueEvent.


        :return: The actor of this ReviewRequestedIssueEvent.
        :rtype: SimpleUser
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this ReviewRequestedIssueEvent.


        :param actor: The actor of this ReviewRequestedIssueEvent.
        :type actor: SimpleUser
        """
        if actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")

        self._actor = actor

    @property
    def commit_id(self):
        """Gets the commit_id of this ReviewRequestedIssueEvent.


        :return: The commit_id of this ReviewRequestedIssueEvent.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this ReviewRequestedIssueEvent.


        :param commit_id: The commit_id of this ReviewRequestedIssueEvent.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id

    @property
    def commit_url(self):
        """Gets the commit_url of this ReviewRequestedIssueEvent.


        :return: The commit_url of this ReviewRequestedIssueEvent.
        :rtype: str
        """
        return self._commit_url

    @commit_url.setter
    def commit_url(self, commit_url):
        """Sets the commit_url of this ReviewRequestedIssueEvent.


        :param commit_url: The commit_url of this ReviewRequestedIssueEvent.
        :type commit_url: str
        """
        if commit_url is None:
            raise ValueError("Invalid value for `commit_url`, must not be `None`")

        self._commit_url = commit_url

    @property
    def created_at(self):
        """Gets the created_at of this ReviewRequestedIssueEvent.


        :return: The created_at of this ReviewRequestedIssueEvent.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReviewRequestedIssueEvent.


        :param created_at: The created_at of this ReviewRequestedIssueEvent.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def event(self):
        """Gets the event of this ReviewRequestedIssueEvent.


        :return: The event of this ReviewRequestedIssueEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ReviewRequestedIssueEvent.


        :param event: The event of this ReviewRequestedIssueEvent.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def id(self):
        """Gets the id of this ReviewRequestedIssueEvent.


        :return: The id of this ReviewRequestedIssueEvent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReviewRequestedIssueEvent.


        :param id: The id of this ReviewRequestedIssueEvent.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this ReviewRequestedIssueEvent.


        :return: The node_id of this ReviewRequestedIssueEvent.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ReviewRequestedIssueEvent.


        :param node_id: The node_id of this ReviewRequestedIssueEvent.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def performed_via_github_app(self):
        """Gets the performed_via_github_app of this ReviewRequestedIssueEvent.


        :return: The performed_via_github_app of this ReviewRequestedIssueEvent.
        :rtype: NullableIntegration
        """
        return self._performed_via_github_app

    @performed_via_github_app.setter
    def performed_via_github_app(self, performed_via_github_app):
        """Sets the performed_via_github_app of this ReviewRequestedIssueEvent.


        :param performed_via_github_app: The performed_via_github_app of this ReviewRequestedIssueEvent.
        :type performed_via_github_app: NullableIntegration
        """
        if performed_via_github_app is None:
            raise ValueError("Invalid value for `performed_via_github_app`, must not be `None`")

        self._performed_via_github_app = performed_via_github_app

    @property
    def requested_reviewer(self):
        """Gets the requested_reviewer of this ReviewRequestedIssueEvent.


        :return: The requested_reviewer of this ReviewRequestedIssueEvent.
        :rtype: SimpleUser
        """
        return self._requested_reviewer

    @requested_reviewer.setter
    def requested_reviewer(self, requested_reviewer):
        """Sets the requested_reviewer of this ReviewRequestedIssueEvent.


        :param requested_reviewer: The requested_reviewer of this ReviewRequestedIssueEvent.
        :type requested_reviewer: SimpleUser
        """

        self._requested_reviewer = requested_reviewer

    @property
    def requested_team(self):
        """Gets the requested_team of this ReviewRequestedIssueEvent.


        :return: The requested_team of this ReviewRequestedIssueEvent.
        :rtype: Team
        """
        return self._requested_team

    @requested_team.setter
    def requested_team(self, requested_team):
        """Sets the requested_team of this ReviewRequestedIssueEvent.


        :param requested_team: The requested_team of this ReviewRequestedIssueEvent.
        :type requested_team: Team
        """

        self._requested_team = requested_team

    @property
    def review_requester(self):
        """Gets the review_requester of this ReviewRequestedIssueEvent.


        :return: The review_requester of this ReviewRequestedIssueEvent.
        :rtype: SimpleUser
        """
        return self._review_requester

    @review_requester.setter
    def review_requester(self, review_requester):
        """Sets the review_requester of this ReviewRequestedIssueEvent.


        :param review_requester: The review_requester of this ReviewRequestedIssueEvent.
        :type review_requester: SimpleUser
        """
        if review_requester is None:
            raise ValueError("Invalid value for `review_requester`, must not be `None`")

        self._review_requester = review_requester

    @property
    def url(self):
        """Gets the url of this ReviewRequestedIssueEvent.


        :return: The url of this ReviewRequestedIssueEvent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReviewRequestedIssueEvent.


        :param url: The url of this ReviewRequestedIssueEvent.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
