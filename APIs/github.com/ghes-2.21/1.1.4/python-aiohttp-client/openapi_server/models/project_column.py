# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectColumn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cards_url: str=None, created_at: datetime=None, id: int=None, name: str=None, node_id: str=None, project_url: str=None, updated_at: datetime=None, url: str=None):
        """ProjectColumn - a model defined in OpenAPI

        :param cards_url: The cards_url of this ProjectColumn.
        :param created_at: The created_at of this ProjectColumn.
        :param id: The id of this ProjectColumn.
        :param name: The name of this ProjectColumn.
        :param node_id: The node_id of this ProjectColumn.
        :param project_url: The project_url of this ProjectColumn.
        :param updated_at: The updated_at of this ProjectColumn.
        :param url: The url of this ProjectColumn.
        """
        self.openapi_types = {
            'cards_url': str,
            'created_at': datetime,
            'id': int,
            'name': str,
            'node_id': str,
            'project_url': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'cards_url': 'cards_url',
            'created_at': 'created_at',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'project_url': 'project_url',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._cards_url = cards_url
        self._created_at = created_at
        self._id = id
        self._name = name
        self._node_id = node_id
        self._project_url = project_url
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The project-column of this ProjectColumn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cards_url(self):
        """Gets the cards_url of this ProjectColumn.


        :return: The cards_url of this ProjectColumn.
        :rtype: str
        """
        return self._cards_url

    @cards_url.setter
    def cards_url(self, cards_url):
        """Sets the cards_url of this ProjectColumn.


        :param cards_url: The cards_url of this ProjectColumn.
        :type cards_url: str
        """
        if cards_url is None:
            raise ValueError("Invalid value for `cards_url`, must not be `None`")

        self._cards_url = cards_url

    @property
    def created_at(self):
        """Gets the created_at of this ProjectColumn.


        :return: The created_at of this ProjectColumn.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProjectColumn.


        :param created_at: The created_at of this ProjectColumn.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ProjectColumn.

        The unique identifier of the project column

        :return: The id of this ProjectColumn.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectColumn.

        The unique identifier of the project column

        :param id: The id of this ProjectColumn.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectColumn.

        Name of the project column

        :return: The name of this ProjectColumn.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectColumn.

        Name of the project column

        :param name: The name of this ProjectColumn.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this ProjectColumn.


        :return: The node_id of this ProjectColumn.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ProjectColumn.


        :param node_id: The node_id of this ProjectColumn.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def project_url(self):
        """Gets the project_url of this ProjectColumn.


        :return: The project_url of this ProjectColumn.
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this ProjectColumn.


        :param project_url: The project_url of this ProjectColumn.
        :type project_url: str
        """
        if project_url is None:
            raise ValueError("Invalid value for `project_url`, must not be `None`")

        self._project_url = project_url

    @property
    def updated_at(self):
        """Gets the updated_at of this ProjectColumn.


        :return: The updated_at of this ProjectColumn.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProjectColumn.


        :param updated_at: The updated_at of this ProjectColumn.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this ProjectColumn.


        :return: The url of this ProjectColumn.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProjectColumn.


        :param url: The url of this ProjectColumn.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
