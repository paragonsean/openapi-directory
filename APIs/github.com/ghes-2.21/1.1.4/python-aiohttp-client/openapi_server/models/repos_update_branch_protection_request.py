# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repos_update_branch_protection_request_required_pull_request_reviews import ReposUpdateBranchProtectionRequestRequiredPullRequestReviews
from openapi_server.models.repos_update_branch_protection_request_required_status_checks import ReposUpdateBranchProtectionRequestRequiredStatusChecks
from openapi_server.models.repos_update_branch_protection_request_restrictions import ReposUpdateBranchProtectionRequestRestrictions
from openapi_server import util


class ReposUpdateBranchProtectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_deletions: bool=None, allow_force_pushes: bool=None, enforce_admins: bool=None, required_conversation_resolution: bool=None, required_linear_history: bool=None, required_pull_request_reviews: ReposUpdateBranchProtectionRequestRequiredPullRequestReviews=None, required_status_checks: ReposUpdateBranchProtectionRequestRequiredStatusChecks=None, restrictions: ReposUpdateBranchProtectionRequestRestrictions=None):
        """ReposUpdateBranchProtectionRequest - a model defined in OpenAPI

        :param allow_deletions: The allow_deletions of this ReposUpdateBranchProtectionRequest.
        :param allow_force_pushes: The allow_force_pushes of this ReposUpdateBranchProtectionRequest.
        :param enforce_admins: The enforce_admins of this ReposUpdateBranchProtectionRequest.
        :param required_conversation_resolution: The required_conversation_resolution of this ReposUpdateBranchProtectionRequest.
        :param required_linear_history: The required_linear_history of this ReposUpdateBranchProtectionRequest.
        :param required_pull_request_reviews: The required_pull_request_reviews of this ReposUpdateBranchProtectionRequest.
        :param required_status_checks: The required_status_checks of this ReposUpdateBranchProtectionRequest.
        :param restrictions: The restrictions of this ReposUpdateBranchProtectionRequest.
        """
        self.openapi_types = {
            'allow_deletions': bool,
            'allow_force_pushes': bool,
            'enforce_admins': bool,
            'required_conversation_resolution': bool,
            'required_linear_history': bool,
            'required_pull_request_reviews': ReposUpdateBranchProtectionRequestRequiredPullRequestReviews,
            'required_status_checks': ReposUpdateBranchProtectionRequestRequiredStatusChecks,
            'restrictions': ReposUpdateBranchProtectionRequestRestrictions
        }

        self.attribute_map = {
            'allow_deletions': 'allow_deletions',
            'allow_force_pushes': 'allow_force_pushes',
            'enforce_admins': 'enforce_admins',
            'required_conversation_resolution': 'required_conversation_resolution',
            'required_linear_history': 'required_linear_history',
            'required_pull_request_reviews': 'required_pull_request_reviews',
            'required_status_checks': 'required_status_checks',
            'restrictions': 'restrictions'
        }

        self._allow_deletions = allow_deletions
        self._allow_force_pushes = allow_force_pushes
        self._enforce_admins = enforce_admins
        self._required_conversation_resolution = required_conversation_resolution
        self._required_linear_history = required_linear_history
        self._required_pull_request_reviews = required_pull_request_reviews
        self._required_status_checks = required_status_checks
        self._restrictions = restrictions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateBranchProtectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_branch_protection_request of this ReposUpdateBranchProtectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_deletions(self):
        """Gets the allow_deletions of this ReposUpdateBranchProtectionRequest.

        Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.

        :return: The allow_deletions of this ReposUpdateBranchProtectionRequest.
        :rtype: bool
        """
        return self._allow_deletions

    @allow_deletions.setter
    def allow_deletions(self, allow_deletions):
        """Sets the allow_deletions of this ReposUpdateBranchProtectionRequest.

        Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.

        :param allow_deletions: The allow_deletions of this ReposUpdateBranchProtectionRequest.
        :type allow_deletions: bool
        """

        self._allow_deletions = allow_deletions

    @property
    def allow_force_pushes(self):
        """Gets the allow_force_pushes of this ReposUpdateBranchProtectionRequest.

        Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"

        :return: The allow_force_pushes of this ReposUpdateBranchProtectionRequest.
        :rtype: bool
        """
        return self._allow_force_pushes

    @allow_force_pushes.setter
    def allow_force_pushes(self, allow_force_pushes):
        """Sets the allow_force_pushes of this ReposUpdateBranchProtectionRequest.

        Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"

        :param allow_force_pushes: The allow_force_pushes of this ReposUpdateBranchProtectionRequest.
        :type allow_force_pushes: bool
        """

        self._allow_force_pushes = allow_force_pushes

    @property
    def enforce_admins(self):
        """Gets the enforce_admins of this ReposUpdateBranchProtectionRequest.

        Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.

        :return: The enforce_admins of this ReposUpdateBranchProtectionRequest.
        :rtype: bool
        """
        return self._enforce_admins

    @enforce_admins.setter
    def enforce_admins(self, enforce_admins):
        """Sets the enforce_admins of this ReposUpdateBranchProtectionRequest.

        Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.

        :param enforce_admins: The enforce_admins of this ReposUpdateBranchProtectionRequest.
        :type enforce_admins: bool
        """
        if enforce_admins is None:
            raise ValueError("Invalid value for `enforce_admins`, must not be `None`")

        self._enforce_admins = enforce_admins

    @property
    def required_conversation_resolution(self):
        """Gets the required_conversation_resolution of this ReposUpdateBranchProtectionRequest.

        Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.

        :return: The required_conversation_resolution of this ReposUpdateBranchProtectionRequest.
        :rtype: bool
        """
        return self._required_conversation_resolution

    @required_conversation_resolution.setter
    def required_conversation_resolution(self, required_conversation_resolution):
        """Sets the required_conversation_resolution of this ReposUpdateBranchProtectionRequest.

        Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.

        :param required_conversation_resolution: The required_conversation_resolution of this ReposUpdateBranchProtectionRequest.
        :type required_conversation_resolution: bool
        """

        self._required_conversation_resolution = required_conversation_resolution

    @property
    def required_linear_history(self):
        """Gets the required_linear_history of this ReposUpdateBranchProtectionRequest.

        Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation.

        :return: The required_linear_history of this ReposUpdateBranchProtectionRequest.
        :rtype: bool
        """
        return self._required_linear_history

    @required_linear_history.setter
    def required_linear_history(self, required_linear_history):
        """Sets the required_linear_history of this ReposUpdateBranchProtectionRequest.

        Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation.

        :param required_linear_history: The required_linear_history of this ReposUpdateBranchProtectionRequest.
        :type required_linear_history: bool
        """

        self._required_linear_history = required_linear_history

    @property
    def required_pull_request_reviews(self):
        """Gets the required_pull_request_reviews of this ReposUpdateBranchProtectionRequest.


        :return: The required_pull_request_reviews of this ReposUpdateBranchProtectionRequest.
        :rtype: ReposUpdateBranchProtectionRequestRequiredPullRequestReviews
        """
        return self._required_pull_request_reviews

    @required_pull_request_reviews.setter
    def required_pull_request_reviews(self, required_pull_request_reviews):
        """Sets the required_pull_request_reviews of this ReposUpdateBranchProtectionRequest.


        :param required_pull_request_reviews: The required_pull_request_reviews of this ReposUpdateBranchProtectionRequest.
        :type required_pull_request_reviews: ReposUpdateBranchProtectionRequestRequiredPullRequestReviews
        """
        if required_pull_request_reviews is None:
            raise ValueError("Invalid value for `required_pull_request_reviews`, must not be `None`")

        self._required_pull_request_reviews = required_pull_request_reviews

    @property
    def required_status_checks(self):
        """Gets the required_status_checks of this ReposUpdateBranchProtectionRequest.


        :return: The required_status_checks of this ReposUpdateBranchProtectionRequest.
        :rtype: ReposUpdateBranchProtectionRequestRequiredStatusChecks
        """
        return self._required_status_checks

    @required_status_checks.setter
    def required_status_checks(self, required_status_checks):
        """Sets the required_status_checks of this ReposUpdateBranchProtectionRequest.


        :param required_status_checks: The required_status_checks of this ReposUpdateBranchProtectionRequest.
        :type required_status_checks: ReposUpdateBranchProtectionRequestRequiredStatusChecks
        """
        if required_status_checks is None:
            raise ValueError("Invalid value for `required_status_checks`, must not be `None`")

        self._required_status_checks = required_status_checks

    @property
    def restrictions(self):
        """Gets the restrictions of this ReposUpdateBranchProtectionRequest.


        :return: The restrictions of this ReposUpdateBranchProtectionRequest.
        :rtype: ReposUpdateBranchProtectionRequestRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this ReposUpdateBranchProtectionRequest.


        :param restrictions: The restrictions of this ReposUpdateBranchProtectionRequest.
        :type restrictions: ReposUpdateBranchProtectionRequestRestrictions
        """
        if restrictions is None:
            raise ValueError("Invalid value for `restrictions`, must not be `None`")

        self._restrictions = restrictions
