# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReactionRollup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _1: int=None, _1: int=None, confused: int=None, eyes: int=None, heart: int=None, hooray: int=None, laugh: int=None, rocket: int=None, total_count: int=None, url: str=None):
        """ReactionRollup - a model defined in OpenAPI

        :param _1: The _1 of this ReactionRollup.
        :param _1: The _1 of this ReactionRollup.
        :param confused: The confused of this ReactionRollup.
        :param eyes: The eyes of this ReactionRollup.
        :param heart: The heart of this ReactionRollup.
        :param hooray: The hooray of this ReactionRollup.
        :param laugh: The laugh of this ReactionRollup.
        :param rocket: The rocket of this ReactionRollup.
        :param total_count: The total_count of this ReactionRollup.
        :param url: The url of this ReactionRollup.
        """
        self.openapi_types = {
            '_1': int,
            '_1': int,
            'confused': int,
            'eyes': int,
            'heart': int,
            'hooray': int,
            'laugh': int,
            'rocket': int,
            'total_count': int,
            'url': str
        }

        self.attribute_map = {
            '_1': '+1',
            '_1': '-1',
            'confused': 'confused',
            'eyes': 'eyes',
            'heart': 'heart',
            'hooray': 'hooray',
            'laugh': 'laugh',
            'rocket': 'rocket',
            'total_count': 'total_count',
            'url': 'url'
        }

        self.__1 = _1
        self.__1 = _1
        self._confused = confused
        self._eyes = eyes
        self._heart = heart
        self._hooray = hooray
        self._laugh = laugh
        self._rocket = rocket
        self._total_count = total_count
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReactionRollup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reaction-rollup of this ReactionRollup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _1(self):
        """Gets the _1 of this ReactionRollup.


        :return: The _1 of this ReactionRollup.
        :rtype: int
        """
        return self.__1

    @_1.setter
    def _1(self, _1):
        """Sets the _1 of this ReactionRollup.


        :param _1: The _1 of this ReactionRollup.
        :type _1: int
        """
        if _1 is None:
            raise ValueError("Invalid value for `_1`, must not be `None`")

        self.__1 = _1

    @property
    def _1(self):
        """Gets the _1 of this ReactionRollup.


        :return: The _1 of this ReactionRollup.
        :rtype: int
        """
        return self.__1

    @_1.setter
    def _1(self, _1):
        """Sets the _1 of this ReactionRollup.


        :param _1: The _1 of this ReactionRollup.
        :type _1: int
        """
        if _1 is None:
            raise ValueError("Invalid value for `_1`, must not be `None`")

        self.__1 = _1

    @property
    def confused(self):
        """Gets the confused of this ReactionRollup.


        :return: The confused of this ReactionRollup.
        :rtype: int
        """
        return self._confused

    @confused.setter
    def confused(self, confused):
        """Sets the confused of this ReactionRollup.


        :param confused: The confused of this ReactionRollup.
        :type confused: int
        """
        if confused is None:
            raise ValueError("Invalid value for `confused`, must not be `None`")

        self._confused = confused

    @property
    def eyes(self):
        """Gets the eyes of this ReactionRollup.


        :return: The eyes of this ReactionRollup.
        :rtype: int
        """
        return self._eyes

    @eyes.setter
    def eyes(self, eyes):
        """Sets the eyes of this ReactionRollup.


        :param eyes: The eyes of this ReactionRollup.
        :type eyes: int
        """
        if eyes is None:
            raise ValueError("Invalid value for `eyes`, must not be `None`")

        self._eyes = eyes

    @property
    def heart(self):
        """Gets the heart of this ReactionRollup.


        :return: The heart of this ReactionRollup.
        :rtype: int
        """
        return self._heart

    @heart.setter
    def heart(self, heart):
        """Sets the heart of this ReactionRollup.


        :param heart: The heart of this ReactionRollup.
        :type heart: int
        """
        if heart is None:
            raise ValueError("Invalid value for `heart`, must not be `None`")

        self._heart = heart

    @property
    def hooray(self):
        """Gets the hooray of this ReactionRollup.


        :return: The hooray of this ReactionRollup.
        :rtype: int
        """
        return self._hooray

    @hooray.setter
    def hooray(self, hooray):
        """Sets the hooray of this ReactionRollup.


        :param hooray: The hooray of this ReactionRollup.
        :type hooray: int
        """
        if hooray is None:
            raise ValueError("Invalid value for `hooray`, must not be `None`")

        self._hooray = hooray

    @property
    def laugh(self):
        """Gets the laugh of this ReactionRollup.


        :return: The laugh of this ReactionRollup.
        :rtype: int
        """
        return self._laugh

    @laugh.setter
    def laugh(self, laugh):
        """Sets the laugh of this ReactionRollup.


        :param laugh: The laugh of this ReactionRollup.
        :type laugh: int
        """
        if laugh is None:
            raise ValueError("Invalid value for `laugh`, must not be `None`")

        self._laugh = laugh

    @property
    def rocket(self):
        """Gets the rocket of this ReactionRollup.


        :return: The rocket of this ReactionRollup.
        :rtype: int
        """
        return self._rocket

    @rocket.setter
    def rocket(self, rocket):
        """Sets the rocket of this ReactionRollup.


        :param rocket: The rocket of this ReactionRollup.
        :type rocket: int
        """
        if rocket is None:
            raise ValueError("Invalid value for `rocket`, must not be `None`")

        self._rocket = rocket

    @property
    def total_count(self):
        """Gets the total_count of this ReactionRollup.


        :return: The total_count of this ReactionRollup.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ReactionRollup.


        :param total_count: The total_count of this ReactionRollup.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

    @property
    def url(self):
        """Gets the url of this ReactionRollup.


        :return: The url of this ReactionRollup.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReactionRollup.


        :param url: The url of this ReactionRollup.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
