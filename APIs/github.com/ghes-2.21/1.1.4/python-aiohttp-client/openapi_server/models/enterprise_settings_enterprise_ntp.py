# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseSettingsEnterpriseNtp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, primary_server: str=None, secondary_server: str=None):
        """EnterpriseSettingsEnterpriseNtp - a model defined in OpenAPI

        :param primary_server: The primary_server of this EnterpriseSettingsEnterpriseNtp.
        :param secondary_server: The secondary_server of this EnterpriseSettingsEnterpriseNtp.
        """
        self.openapi_types = {
            'primary_server': str,
            'secondary_server': str
        }

        self.attribute_map = {
            'primary_server': 'primary_server',
            'secondary_server': 'secondary_server'
        }

        self._primary_server = primary_server
        self._secondary_server = secondary_server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterpriseNtp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise_ntp of this EnterpriseSettingsEnterpriseNtp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def primary_server(self):
        """Gets the primary_server of this EnterpriseSettingsEnterpriseNtp.


        :return: The primary_server of this EnterpriseSettingsEnterpriseNtp.
        :rtype: str
        """
        return self._primary_server

    @primary_server.setter
    def primary_server(self, primary_server):
        """Sets the primary_server of this EnterpriseSettingsEnterpriseNtp.


        :param primary_server: The primary_server of this EnterpriseSettingsEnterpriseNtp.
        :type primary_server: str
        """

        self._primary_server = primary_server

    @property
    def secondary_server(self):
        """Gets the secondary_server of this EnterpriseSettingsEnterpriseNtp.


        :return: The secondary_server of this EnterpriseSettingsEnterpriseNtp.
        :rtype: str
        """
        return self._secondary_server

    @secondary_server.setter
    def secondary_server(self, secondary_server):
        """Sets the secondary_server of this EnterpriseSettingsEnterpriseNtp.


        :param secondary_server: The secondary_server of this EnterpriseSettingsEnterpriseNtp.
        :type secondary_server: str
        """

        self._secondary_server = secondary_server
