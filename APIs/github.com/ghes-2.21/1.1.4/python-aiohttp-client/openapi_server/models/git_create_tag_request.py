# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.git_create_tag_request_tagger import GitCreateTagRequestTagger
from openapi_server import util


class GitCreateTagRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, object: str=None, tag: str=None, tagger: GitCreateTagRequestTagger=None, type: str=None):
        """GitCreateTagRequest - a model defined in OpenAPI

        :param message: The message of this GitCreateTagRequest.
        :param object: The object of this GitCreateTagRequest.
        :param tag: The tag of this GitCreateTagRequest.
        :param tagger: The tagger of this GitCreateTagRequest.
        :param type: The type of this GitCreateTagRequest.
        """
        self.openapi_types = {
            'message': str,
            'object': str,
            'tag': str,
            'tagger': GitCreateTagRequestTagger,
            'type': str
        }

        self.attribute_map = {
            'message': 'message',
            'object': 'object',
            'tag': 'tag',
            'tagger': 'tagger',
            'type': 'type'
        }

        self._message = message
        self._object = object
        self._tag = tag
        self._tagger = tagger
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitCreateTagRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The git_create_tag_request of this GitCreateTagRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this GitCreateTagRequest.

        The tag message.

        :return: The message of this GitCreateTagRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GitCreateTagRequest.

        The tag message.

        :param message: The message of this GitCreateTagRequest.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def object(self):
        """Gets the object of this GitCreateTagRequest.

        The SHA of the git object this is tagging.

        :return: The object of this GitCreateTagRequest.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this GitCreateTagRequest.

        The SHA of the git object this is tagging.

        :param object: The object of this GitCreateTagRequest.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")

        self._object = object

    @property
    def tag(self):
        """Gets the tag of this GitCreateTagRequest.

        The tag's name. This is typically a version (e.g., \"v0.0.1\").

        :return: The tag of this GitCreateTagRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this GitCreateTagRequest.

        The tag's name. This is typically a version (e.g., \"v0.0.1\").

        :param tag: The tag of this GitCreateTagRequest.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag

    @property
    def tagger(self):
        """Gets the tagger of this GitCreateTagRequest.


        :return: The tagger of this GitCreateTagRequest.
        :rtype: GitCreateTagRequestTagger
        """
        return self._tagger

    @tagger.setter
    def tagger(self, tagger):
        """Sets the tagger of this GitCreateTagRequest.


        :param tagger: The tagger of this GitCreateTagRequest.
        :type tagger: GitCreateTagRequestTagger
        """

        self._tagger = tagger

    @property
    def type(self):
        """Gets the type of this GitCreateTagRequest.

        The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.

        :return: The type of this GitCreateTagRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GitCreateTagRequest.

        The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.

        :param type: The type of this GitCreateTagRequest.
        :type type: str
        """
        allowed_values = ["commit", "tree", "blob"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
