# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposCreateUsingTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, include_all_branches: bool=False, name: str=None, owner: str=None, private: bool=False):
        """ReposCreateUsingTemplateRequest - a model defined in OpenAPI

        :param description: The description of this ReposCreateUsingTemplateRequest.
        :param include_all_branches: The include_all_branches of this ReposCreateUsingTemplateRequest.
        :param name: The name of this ReposCreateUsingTemplateRequest.
        :param owner: The owner of this ReposCreateUsingTemplateRequest.
        :param private: The private of this ReposCreateUsingTemplateRequest.
        """
        self.openapi_types = {
            'description': str,
            'include_all_branches': bool,
            'name': str,
            'owner': str,
            'private': bool
        }

        self.attribute_map = {
            'description': 'description',
            'include_all_branches': 'include_all_branches',
            'name': 'name',
            'owner': 'owner',
            'private': 'private'
        }

        self._description = description
        self._include_all_branches = include_all_branches
        self._name = name
        self._owner = owner
        self._private = private

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposCreateUsingTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_create_using_template_request of this ReposCreateUsingTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ReposCreateUsingTemplateRequest.

        A short description of the new repository.

        :return: The description of this ReposCreateUsingTemplateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReposCreateUsingTemplateRequest.

        A short description of the new repository.

        :param description: The description of this ReposCreateUsingTemplateRequest.
        :type description: str
        """

        self._description = description

    @property
    def include_all_branches(self):
        """Gets the include_all_branches of this ReposCreateUsingTemplateRequest.

        Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.

        :return: The include_all_branches of this ReposCreateUsingTemplateRequest.
        :rtype: bool
        """
        return self._include_all_branches

    @include_all_branches.setter
    def include_all_branches(self, include_all_branches):
        """Sets the include_all_branches of this ReposCreateUsingTemplateRequest.

        Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.

        :param include_all_branches: The include_all_branches of this ReposCreateUsingTemplateRequest.
        :type include_all_branches: bool
        """

        self._include_all_branches = include_all_branches

    @property
    def name(self):
        """Gets the name of this ReposCreateUsingTemplateRequest.

        The name of the new repository.

        :return: The name of this ReposCreateUsingTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReposCreateUsingTemplateRequest.

        The name of the new repository.

        :param name: The name of this ReposCreateUsingTemplateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this ReposCreateUsingTemplateRequest.

        The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.

        :return: The owner of this ReposCreateUsingTemplateRequest.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ReposCreateUsingTemplateRequest.

        The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.

        :param owner: The owner of this ReposCreateUsingTemplateRequest.
        :type owner: str
        """

        self._owner = owner

    @property
    def private(self):
        """Gets the private of this ReposCreateUsingTemplateRequest.

        Either `true` to create a new private repository or `false` to create a new public one.

        :return: The private of this ReposCreateUsingTemplateRequest.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this ReposCreateUsingTemplateRequest.

        Either `true` to create a new private repository or `false` to create a new public one.

        :param private: The private of this ReposCreateUsingTemplateRequest.
        :type private: bool
        """

        self._private = private
