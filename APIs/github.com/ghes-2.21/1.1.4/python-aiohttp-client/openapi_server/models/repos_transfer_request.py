# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposTransferRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_owner: str=None, team_ids: List[int]=None):
        """ReposTransferRequest - a model defined in OpenAPI

        :param new_owner: The new_owner of this ReposTransferRequest.
        :param team_ids: The team_ids of this ReposTransferRequest.
        """
        self.openapi_types = {
            'new_owner': str,
            'team_ids': List[int]
        }

        self.attribute_map = {
            'new_owner': 'new_owner',
            'team_ids': 'team_ids'
        }

        self._new_owner = new_owner
        self._team_ids = team_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposTransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_transfer_request of this ReposTransferRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_owner(self):
        """Gets the new_owner of this ReposTransferRequest.

        The username or organization name the repository will be transferred to.

        :return: The new_owner of this ReposTransferRequest.
        :rtype: str
        """
        return self._new_owner

    @new_owner.setter
    def new_owner(self, new_owner):
        """Sets the new_owner of this ReposTransferRequest.

        The username or organization name the repository will be transferred to.

        :param new_owner: The new_owner of this ReposTransferRequest.
        :type new_owner: str
        """
        if new_owner is None:
            raise ValueError("Invalid value for `new_owner`, must not be `None`")

        self._new_owner = new_owner

    @property
    def team_ids(self):
        """Gets the team_ids of this ReposTransferRequest.

        ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.

        :return: The team_ids of this ReposTransferRequest.
        :rtype: List[int]
        """
        return self._team_ids

    @team_ids.setter
    def team_ids(self, team_ids):
        """Sets the team_ids of this ReposTransferRequest.

        ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.

        :param team_ids: The team_ids of this ReposTransferRequest.
        :type team_ids: List[int]
        """

        self._team_ids = team_ids
