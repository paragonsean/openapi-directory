# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.users_add_email_for_authenticated_request_one_of import UsersAddEmailForAuthenticatedRequestOneOf
from openapi_server import util


class UsersAddEmailForAuthenticatedRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emails: List[str]=None):
        """UsersAddEmailForAuthenticatedRequest - a model defined in OpenAPI

        :param emails: The emails of this UsersAddEmailForAuthenticatedRequest.
        """
        self.openapi_types = {
            'emails': List[str]
        }

        self.attribute_map = {
            'emails': 'emails'
        }

        self._emails = emails

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersAddEmailForAuthenticatedRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_add_email_for_authenticated_request of this UsersAddEmailForAuthenticatedRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emails(self):
        """Gets the emails of this UsersAddEmailForAuthenticatedRequest.

        Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.

        :return: The emails of this UsersAddEmailForAuthenticatedRequest.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this UsersAddEmailForAuthenticatedRequest.

        Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.

        :param emails: The emails of this UsersAddEmailForAuthenticatedRequest.
        :type emails: List[str]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")

        self._emails = emails
