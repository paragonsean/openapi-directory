# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullRequestMergeResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merged: bool=None, message: str=None, sha: str=None):
        """PullRequestMergeResult - a model defined in OpenAPI

        :param merged: The merged of this PullRequestMergeResult.
        :param message: The message of this PullRequestMergeResult.
        :param sha: The sha of this PullRequestMergeResult.
        """
        self.openapi_types = {
            'merged': bool,
            'message': str,
            'sha': str
        }

        self.attribute_map = {
            'merged': 'merged',
            'message': 'message',
            'sha': 'sha'
        }

        self._merged = merged
        self._message = message
        self._sha = sha

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullRequestMergeResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pull-request-merge-result of this PullRequestMergeResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merged(self):
        """Gets the merged of this PullRequestMergeResult.


        :return: The merged of this PullRequestMergeResult.
        :rtype: bool
        """
        return self._merged

    @merged.setter
    def merged(self, merged):
        """Sets the merged of this PullRequestMergeResult.


        :param merged: The merged of this PullRequestMergeResult.
        :type merged: bool
        """
        if merged is None:
            raise ValueError("Invalid value for `merged`, must not be `None`")

        self._merged = merged

    @property
    def message(self):
        """Gets the message of this PullRequestMergeResult.


        :return: The message of this PullRequestMergeResult.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PullRequestMergeResult.


        :param message: The message of this PullRequestMergeResult.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sha(self):
        """Gets the sha of this PullRequestMergeResult.


        :return: The sha of this PullRequestMergeResult.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this PullRequestMergeResult.


        :param sha: The sha of this PullRequestMergeResult.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha
