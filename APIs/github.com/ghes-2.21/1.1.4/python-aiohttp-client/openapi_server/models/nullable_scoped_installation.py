# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_permissions import AppPermissions
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class NullableScopedInstallation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: SimpleUser=None, has_multiple_single_files: bool=None, permissions: AppPermissions=None, repositories_url: str=None, repository_selection: str=None, single_file_name: str=None, single_file_paths: List[str]=None):
        """NullableScopedInstallation - a model defined in OpenAPI

        :param account: The account of this NullableScopedInstallation.
        :param has_multiple_single_files: The has_multiple_single_files of this NullableScopedInstallation.
        :param permissions: The permissions of this NullableScopedInstallation.
        :param repositories_url: The repositories_url of this NullableScopedInstallation.
        :param repository_selection: The repository_selection of this NullableScopedInstallation.
        :param single_file_name: The single_file_name of this NullableScopedInstallation.
        :param single_file_paths: The single_file_paths of this NullableScopedInstallation.
        """
        self.openapi_types = {
            'account': SimpleUser,
            'has_multiple_single_files': bool,
            'permissions': AppPermissions,
            'repositories_url': str,
            'repository_selection': str,
            'single_file_name': str,
            'single_file_paths': List[str]
        }

        self.attribute_map = {
            'account': 'account',
            'has_multiple_single_files': 'has_multiple_single_files',
            'permissions': 'permissions',
            'repositories_url': 'repositories_url',
            'repository_selection': 'repository_selection',
            'single_file_name': 'single_file_name',
            'single_file_paths': 'single_file_paths'
        }

        self._account = account
        self._has_multiple_single_files = has_multiple_single_files
        self._permissions = permissions
        self._repositories_url = repositories_url
        self._repository_selection = repository_selection
        self._single_file_name = single_file_name
        self._single_file_paths = single_file_paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NullableScopedInstallation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The nullable-scoped-installation of this NullableScopedInstallation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this NullableScopedInstallation.


        :return: The account of this NullableScopedInstallation.
        :rtype: SimpleUser
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this NullableScopedInstallation.


        :param account: The account of this NullableScopedInstallation.
        :type account: SimpleUser
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def has_multiple_single_files(self):
        """Gets the has_multiple_single_files of this NullableScopedInstallation.


        :return: The has_multiple_single_files of this NullableScopedInstallation.
        :rtype: bool
        """
        return self._has_multiple_single_files

    @has_multiple_single_files.setter
    def has_multiple_single_files(self, has_multiple_single_files):
        """Sets the has_multiple_single_files of this NullableScopedInstallation.


        :param has_multiple_single_files: The has_multiple_single_files of this NullableScopedInstallation.
        :type has_multiple_single_files: bool
        """

        self._has_multiple_single_files = has_multiple_single_files

    @property
    def permissions(self):
        """Gets the permissions of this NullableScopedInstallation.


        :return: The permissions of this NullableScopedInstallation.
        :rtype: AppPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this NullableScopedInstallation.


        :param permissions: The permissions of this NullableScopedInstallation.
        :type permissions: AppPermissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def repositories_url(self):
        """Gets the repositories_url of this NullableScopedInstallation.


        :return: The repositories_url of this NullableScopedInstallation.
        :rtype: str
        """
        return self._repositories_url

    @repositories_url.setter
    def repositories_url(self, repositories_url):
        """Sets the repositories_url of this NullableScopedInstallation.


        :param repositories_url: The repositories_url of this NullableScopedInstallation.
        :type repositories_url: str
        """
        if repositories_url is None:
            raise ValueError("Invalid value for `repositories_url`, must not be `None`")

        self._repositories_url = repositories_url

    @property
    def repository_selection(self):
        """Gets the repository_selection of this NullableScopedInstallation.

        Describe whether all repositories have been selected or there's a selection involved

        :return: The repository_selection of this NullableScopedInstallation.
        :rtype: str
        """
        return self._repository_selection

    @repository_selection.setter
    def repository_selection(self, repository_selection):
        """Sets the repository_selection of this NullableScopedInstallation.

        Describe whether all repositories have been selected or there's a selection involved

        :param repository_selection: The repository_selection of this NullableScopedInstallation.
        :type repository_selection: str
        """
        allowed_values = ["all", "selected"]  # noqa: E501
        if repository_selection not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_selection` ({0}), must be one of {1}"
                .format(repository_selection, allowed_values)
            )

        self._repository_selection = repository_selection

    @property
    def single_file_name(self):
        """Gets the single_file_name of this NullableScopedInstallation.


        :return: The single_file_name of this NullableScopedInstallation.
        :rtype: str
        """
        return self._single_file_name

    @single_file_name.setter
    def single_file_name(self, single_file_name):
        """Sets the single_file_name of this NullableScopedInstallation.


        :param single_file_name: The single_file_name of this NullableScopedInstallation.
        :type single_file_name: str
        """
        if single_file_name is None:
            raise ValueError("Invalid value for `single_file_name`, must not be `None`")

        self._single_file_name = single_file_name

    @property
    def single_file_paths(self):
        """Gets the single_file_paths of this NullableScopedInstallation.


        :return: The single_file_paths of this NullableScopedInstallation.
        :rtype: List[str]
        """
        return self._single_file_paths

    @single_file_paths.setter
    def single_file_paths(self, single_file_paths):
        """Sets the single_file_paths of this NullableScopedInstallation.


        :param single_file_paths: The single_file_paths of this NullableScopedInstallation.
        :type single_file_paths: List[str]
        """

        self._single_file_paths = single_file_paths
