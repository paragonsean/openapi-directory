# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateClipRequestDataAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: float=None, media_id: str=None, name: str=None, start_time: float=None):
        """CreateClipRequestDataAttributes - a model defined in OpenAPI

        :param end_time: The end_time of this CreateClipRequestDataAttributes.
        :param media_id: The media_id of this CreateClipRequestDataAttributes.
        :param name: The name of this CreateClipRequestDataAttributes.
        :param start_time: The start_time of this CreateClipRequestDataAttributes.
        """
        self.openapi_types = {
            'end_time': float,
            'media_id': str,
            'name': str,
            'start_time': float
        }

        self.attribute_map = {
            'end_time': 'end_time',
            'media_id': 'media_id',
            'name': 'name',
            'start_time': 'start_time'
        }

        self._end_time = end_time
        self._media_id = media_id
        self._name = name
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClipRequestDataAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createClip_request_data_attributes of this CreateClipRequestDataAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this CreateClipRequestDataAttributes.


        :return: The end_time of this CreateClipRequestDataAttributes.
        :rtype: float
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CreateClipRequestDataAttributes.


        :param end_time: The end_time of this CreateClipRequestDataAttributes.
        :type end_time: float
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def media_id(self):
        """Gets the media_id of this CreateClipRequestDataAttributes.


        :return: The media_id of this CreateClipRequestDataAttributes.
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this CreateClipRequestDataAttributes.


        :param media_id: The media_id of this CreateClipRequestDataAttributes.
        :type media_id: str
        """
        if media_id is None:
            raise ValueError("Invalid value for `media_id`, must not be `None`")

        self._media_id = media_id

    @property
    def name(self):
        """Gets the name of this CreateClipRequestDataAttributes.


        :return: The name of this CreateClipRequestDataAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateClipRequestDataAttributes.


        :param name: The name of this CreateClipRequestDataAttributes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this CreateClipRequestDataAttributes.


        :return: The start_time of this CreateClipRequestDataAttributes.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreateClipRequestDataAttributes.


        :param start_time: The start_time of this CreateClipRequestDataAttributes.
        :type start_time: float
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time
