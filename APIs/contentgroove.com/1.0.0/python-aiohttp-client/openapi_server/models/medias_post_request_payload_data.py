# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.medias_post_request_payload_data_attributes import MediasPostRequestPayloadDataAttributes
from openapi_server.models.medias_post_request_payload_data_relationships import MediasPostRequestPayloadDataRelationships
from openapi_server.models.medias_post_request_payload_data_transcription import MediasPostRequestPayloadDataTranscription
from openapi_server import util


class MediasPostRequestPayloadData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: MediasPostRequestPayloadDataAttributes=None, id: str=None, relationships: MediasPostRequestPayloadDataRelationships=None, transcription: MediasPostRequestPayloadDataTranscription=None, type: str=None):
        """MediasPostRequestPayloadData - a model defined in OpenAPI

        :param attributes: The attributes of this MediasPostRequestPayloadData.
        :param id: The id of this MediasPostRequestPayloadData.
        :param relationships: The relationships of this MediasPostRequestPayloadData.
        :param transcription: The transcription of this MediasPostRequestPayloadData.
        :param type: The type of this MediasPostRequestPayloadData.
        """
        self.openapi_types = {
            'attributes': MediasPostRequestPayloadDataAttributes,
            'id': str,
            'relationships': MediasPostRequestPayloadDataRelationships,
            'transcription': MediasPostRequestPayloadDataTranscription,
            'type': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'id': 'id',
            'relationships': 'relationships',
            'transcription': 'transcription',
            'type': 'type'
        }

        self._attributes = attributes
        self._id = id
        self._relationships = relationships
        self._transcription = transcription
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediasPostRequestPayloadData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _medias_post_request_payload_data of this MediasPostRequestPayloadData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this MediasPostRequestPayloadData.


        :return: The attributes of this MediasPostRequestPayloadData.
        :rtype: MediasPostRequestPayloadDataAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MediasPostRequestPayloadData.


        :param attributes: The attributes of this MediasPostRequestPayloadData.
        :type attributes: MediasPostRequestPayloadDataAttributes
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this MediasPostRequestPayloadData.


        :return: The id of this MediasPostRequestPayloadData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediasPostRequestPayloadData.


        :param id: The id of this MediasPostRequestPayloadData.
        :type id: str
        """

        self._id = id

    @property
    def relationships(self):
        """Gets the relationships of this MediasPostRequestPayloadData.


        :return: The relationships of this MediasPostRequestPayloadData.
        :rtype: MediasPostRequestPayloadDataRelationships
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this MediasPostRequestPayloadData.


        :param relationships: The relationships of this MediasPostRequestPayloadData.
        :type relationships: MediasPostRequestPayloadDataRelationships
        """

        self._relationships = relationships

    @property
    def transcription(self):
        """Gets the transcription of this MediasPostRequestPayloadData.


        :return: The transcription of this MediasPostRequestPayloadData.
        :rtype: MediasPostRequestPayloadDataTranscription
        """
        return self._transcription

    @transcription.setter
    def transcription(self, transcription):
        """Sets the transcription of this MediasPostRequestPayloadData.


        :param transcription: The transcription of this MediasPostRequestPayloadData.
        :type transcription: MediasPostRequestPayloadDataTranscription
        """

        self._transcription = transcription

    @property
    def type(self):
        """Gets the type of this MediasPostRequestPayloadData.


        :return: The type of this MediasPostRequestPayloadData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MediasPostRequestPayloadData.


        :param type: The type of this MediasPostRequestPayloadData.
        :type type: str
        """

        self._type = type
