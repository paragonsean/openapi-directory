/*
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListSyncMapItemResponse;
import org.openapitools.client.model.SyncMapItemEnumQueryFromBoundType;
import org.openapitools.client.model.SyncMapItemEnumQueryResultOrder;
import org.openapitools.client.model.SyncV1ServiceSyncMapSyncMapItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SyncV1SyncMapItemApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SyncV1SyncMapItemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SyncV1SyncMapItemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createSyncMapItem
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Map Item in. (required)
     * @param mapSid The SID of the Sync Map to add the new Map Item to. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (required)
     * @param key The unique, user-defined key for the Map Item. Can be up to 320 characters long. (required)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSyncMapItemCall(String serviceSid, String mapSid, Object data, String key, Integer collectionTtl, Integer itemTtl, Integer ttl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://sync.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "MapSid" + "}", localVarApiClient.escapeString(mapSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (collectionTtl != null) {
            localVarFormParams.put("CollectionTtl", collectionTtl);
        }

        if (data != null) {
            localVarFormParams.put("Data", data);
        }

        if (itemTtl != null) {
            localVarFormParams.put("ItemTtl", itemTtl);
        }

        if (key != null) {
            localVarFormParams.put("Key", key);
        }

        if (ttl != null) {
            localVarFormParams.put("Ttl", ttl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSyncMapItemValidateBeforeCall(String serviceSid, String mapSid, Object data, String key, Integer collectionTtl, Integer itemTtl, Integer ttl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createSyncMapItem(Async)");
        }

        // verify the required parameter 'mapSid' is set
        if (mapSid == null) {
            throw new ApiException("Missing the required parameter 'mapSid' when calling createSyncMapItem(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createSyncMapItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createSyncMapItem(Async)");
        }

        return createSyncMapItemCall(serviceSid, mapSid, data, key, collectionTtl, itemTtl, ttl, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Map Item in. (required)
     * @param mapSid The SID of the Sync Map to add the new Map Item to. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (required)
     * @param key The unique, user-defined key for the Map Item. Can be up to 320 characters long. (required)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @return SyncV1ServiceSyncMapSyncMapItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SyncV1ServiceSyncMapSyncMapItem createSyncMapItem(String serviceSid, String mapSid, Object data, String key, Integer collectionTtl, Integer itemTtl, Integer ttl) throws ApiException {
        ApiResponse<SyncV1ServiceSyncMapSyncMapItem> localVarResp = createSyncMapItemWithHttpInfo(serviceSid, mapSid, data, key, collectionTtl, itemTtl, ttl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Map Item in. (required)
     * @param mapSid The SID of the Sync Map to add the new Map Item to. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (required)
     * @param key The unique, user-defined key for the Map Item. Can be up to 320 characters long. (required)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @return ApiResponse&lt;SyncV1ServiceSyncMapSyncMapItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyncV1ServiceSyncMapSyncMapItem> createSyncMapItemWithHttpInfo(String serviceSid, String mapSid, Object data, String key, Integer collectionTtl, Integer itemTtl, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = createSyncMapItemValidateBeforeCall(serviceSid, mapSid, data, key, collectionTtl, itemTtl, ttl, null);
        Type localVarReturnType = new TypeToken<SyncV1ServiceSyncMapSyncMapItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) to create the Map Item in. (required)
     * @param mapSid The SID of the Sync Map to add the new Map Item to. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (required)
     * @param key The unique, user-defined key for the Map Item. Can be up to 320 characters long. (required)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSyncMapItemAsync(String serviceSid, String mapSid, Object data, String key, Integer collectionTtl, Integer itemTtl, Integer ttl, final ApiCallback<SyncV1ServiceSyncMapSyncMapItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSyncMapItemValidateBeforeCall(serviceSid, mapSid, data, key, collectionTtl, itemTtl, ttl, _callback);
        Type localVarReturnType = new TypeToken<SyncV1ServiceSyncMapSyncMapItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSyncMapItem
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to delete. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to delete. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to delete. (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSyncMapItemCall(String serviceSid, String mapSid, String key, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://sync.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "MapSid" + "}", localVarApiClient.escapeString(mapSid.toString()))
            .replace("{" + "Key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSyncMapItemValidateBeforeCall(String serviceSid, String mapSid, String key, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteSyncMapItem(Async)");
        }

        // verify the required parameter 'mapSid' is set
        if (mapSid == null) {
            throw new ApiException("Missing the required parameter 'mapSid' when calling deleteSyncMapItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteSyncMapItem(Async)");
        }

        return deleteSyncMapItemCall(serviceSid, mapSid, key, ifMatch, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to delete. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to delete. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to delete. (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSyncMapItem(String serviceSid, String mapSid, String key, String ifMatch) throws ApiException {
        deleteSyncMapItemWithHttpInfo(serviceSid, mapSid, key, ifMatch);
    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to delete. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to delete. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to delete. (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSyncMapItemWithHttpInfo(String serviceSid, String mapSid, String key, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteSyncMapItemValidateBeforeCall(serviceSid, mapSid, key, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to delete. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to delete. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to delete. (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSyncMapItemAsync(String serviceSid, String mapSid, String key, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSyncMapItemValidateBeforeCall(serviceSid, mapSid, key, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSyncMapItem
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to fetch. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSyncMapItemCall(String serviceSid, String mapSid, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://sync.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "MapSid" + "}", localVarApiClient.escapeString(mapSid.toString()))
            .replace("{" + "Key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSyncMapItemValidateBeforeCall(String serviceSid, String mapSid, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchSyncMapItem(Async)");
        }

        // verify the required parameter 'mapSid' is set
        if (mapSid == null) {
            throw new ApiException("Missing the required parameter 'mapSid' when calling fetchSyncMapItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling fetchSyncMapItem(Async)");
        }

        return fetchSyncMapItemCall(serviceSid, mapSid, key, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to fetch. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to fetch. (required)
     * @return SyncV1ServiceSyncMapSyncMapItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SyncV1ServiceSyncMapSyncMapItem fetchSyncMapItem(String serviceSid, String mapSid, String key) throws ApiException {
        ApiResponse<SyncV1ServiceSyncMapSyncMapItem> localVarResp = fetchSyncMapItemWithHttpInfo(serviceSid, mapSid, key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to fetch. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to fetch. (required)
     * @return ApiResponse&lt;SyncV1ServiceSyncMapSyncMapItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyncV1ServiceSyncMapSyncMapItem> fetchSyncMapItemWithHttpInfo(String serviceSid, String mapSid, String key) throws ApiException {
        okhttp3.Call localVarCall = fetchSyncMapItemValidateBeforeCall(serviceSid, mapSid, key, null);
        Type localVarReturnType = new TypeToken<SyncV1ServiceSyncMapSyncMapItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to fetch. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSyncMapItemAsync(String serviceSid, String mapSid, String key, final ApiCallback<SyncV1ServiceSyncMapSyncMapItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSyncMapItemValidateBeforeCall(serviceSid, mapSid, key, _callback);
        Type localVarReturnType = new TypeToken<SyncV1ServiceSyncMapSyncMapItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSyncMapItem
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Map Item resources to read. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param order How to order the Map Items returned by their &#x60;key&#x60; value. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) and the default is ascending. Map Items are [ordered lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) by Item key. (optional)
     * @param from The &#x60;key&#x60; of the first Sync Map Item resource to read. See also &#x60;bounds&#x60;. (optional)
     * @param bounds Whether to include the Map Item referenced by the &#x60;from&#x60; parameter. Can be: &#x60;inclusive&#x60; to include the Map Item referenced by the &#x60;from&#x60; parameter or &#x60;exclusive&#x60; to start with the next Map Item. The default value is &#x60;inclusive&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSyncMapItemCall(String serviceSid, String mapSid, SyncMapItemEnumQueryResultOrder order, String from, SyncMapItemEnumQueryFromBoundType bounds, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://sync.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "MapSid" + "}", localVarApiClient.escapeString(mapSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Order", order));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("From", from));
        }

        if (bounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Bounds", bounds));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSyncMapItemValidateBeforeCall(String serviceSid, String mapSid, SyncMapItemEnumQueryResultOrder order, String from, SyncMapItemEnumQueryFromBoundType bounds, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listSyncMapItem(Async)");
        }

        // verify the required parameter 'mapSid' is set
        if (mapSid == null) {
            throw new ApiException("Missing the required parameter 'mapSid' when calling listSyncMapItem(Async)");
        }

        return listSyncMapItemCall(serviceSid, mapSid, order, from, bounds, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Map Item resources to read. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param order How to order the Map Items returned by their &#x60;key&#x60; value. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) and the default is ascending. Map Items are [ordered lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) by Item key. (optional)
     * @param from The &#x60;key&#x60; of the first Sync Map Item resource to read. See also &#x60;bounds&#x60;. (optional)
     * @param bounds Whether to include the Map Item referenced by the &#x60;from&#x60; parameter. Can be: &#x60;inclusive&#x60; to include the Map Item referenced by the &#x60;from&#x60; parameter or &#x60;exclusive&#x60; to start with the next Map Item. The default value is &#x60;inclusive&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSyncMapItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSyncMapItemResponse listSyncMapItem(String serviceSid, String mapSid, SyncMapItemEnumQueryResultOrder order, String from, SyncMapItemEnumQueryFromBoundType bounds, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSyncMapItemResponse> localVarResp = listSyncMapItemWithHttpInfo(serviceSid, mapSid, order, from, bounds, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Map Item resources to read. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param order How to order the Map Items returned by their &#x60;key&#x60; value. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) and the default is ascending. Map Items are [ordered lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) by Item key. (optional)
     * @param from The &#x60;key&#x60; of the first Sync Map Item resource to read. See also &#x60;bounds&#x60;. (optional)
     * @param bounds Whether to include the Map Item referenced by the &#x60;from&#x60; parameter. Can be: &#x60;inclusive&#x60; to include the Map Item referenced by the &#x60;from&#x60; parameter or &#x60;exclusive&#x60; to start with the next Map Item. The default value is &#x60;inclusive&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSyncMapItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSyncMapItemResponse> listSyncMapItemWithHttpInfo(String serviceSid, String mapSid, SyncMapItemEnumQueryResultOrder order, String from, SyncMapItemEnumQueryFromBoundType bounds, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSyncMapItemValidateBeforeCall(serviceSid, mapSid, order, from, bounds, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSyncMapItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Map Item resources to read. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to fetch. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param order How to order the Map Items returned by their &#x60;key&#x60; value. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) and the default is ascending. Map Items are [ordered lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) by Item key. (optional)
     * @param from The &#x60;key&#x60; of the first Sync Map Item resource to read. See also &#x60;bounds&#x60;. (optional)
     * @param bounds Whether to include the Map Item referenced by the &#x60;from&#x60; parameter. Can be: &#x60;inclusive&#x60; to include the Map Item referenced by the &#x60;from&#x60; parameter or &#x60;exclusive&#x60; to start with the next Map Item. The default value is &#x60;inclusive&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSyncMapItemAsync(String serviceSid, String mapSid, SyncMapItemEnumQueryResultOrder order, String from, SyncMapItemEnumQueryFromBoundType bounds, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSyncMapItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSyncMapItemValidateBeforeCall(serviceSid, mapSid, order, from, bounds, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSyncMapItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSyncMapItem
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to update. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to update. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to update.  (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. This parameter can only be used when the Map Item&#39;s &#x60;data&#x60; or &#x60;ttl&#x60; is updated in the same request. (optional)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSyncMapItemCall(String serviceSid, String mapSid, String key, String ifMatch, Integer collectionTtl, Object data, Integer itemTtl, Integer ttl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://sync.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "MapSid" + "}", localVarApiClient.escapeString(mapSid.toString()))
            .replace("{" + "Key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (collectionTtl != null) {
            localVarFormParams.put("CollectionTtl", collectionTtl);
        }

        if (data != null) {
            localVarFormParams.put("Data", data);
        }

        if (itemTtl != null) {
            localVarFormParams.put("ItemTtl", itemTtl);
        }

        if (ttl != null) {
            localVarFormParams.put("Ttl", ttl);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSyncMapItemValidateBeforeCall(String serviceSid, String mapSid, String key, String ifMatch, Integer collectionTtl, Object data, Integer itemTtl, Integer ttl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateSyncMapItem(Async)");
        }

        // verify the required parameter 'mapSid' is set
        if (mapSid == null) {
            throw new ApiException("Missing the required parameter 'mapSid' when calling updateSyncMapItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateSyncMapItem(Async)");
        }

        return updateSyncMapItemCall(serviceSid, mapSid, key, ifMatch, collectionTtl, data, itemTtl, ttl, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to update. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to update. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to update.  (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. This parameter can only be used when the Map Item&#39;s &#x60;data&#x60; or &#x60;ttl&#x60; is updated in the same request. (optional)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @return SyncV1ServiceSyncMapSyncMapItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SyncV1ServiceSyncMapSyncMapItem updateSyncMapItem(String serviceSid, String mapSid, String key, String ifMatch, Integer collectionTtl, Object data, Integer itemTtl, Integer ttl) throws ApiException {
        ApiResponse<SyncV1ServiceSyncMapSyncMapItem> localVarResp = updateSyncMapItemWithHttpInfo(serviceSid, mapSid, key, ifMatch, collectionTtl, data, itemTtl, ttl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to update. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to update. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to update.  (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. This parameter can only be used when the Map Item&#39;s &#x60;data&#x60; or &#x60;ttl&#x60; is updated in the same request. (optional)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @return ApiResponse&lt;SyncV1ServiceSyncMapSyncMapItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyncV1ServiceSyncMapSyncMapItem> updateSyncMapItemWithHttpInfo(String serviceSid, String mapSid, String key, String ifMatch, Integer collectionTtl, Object data, Integer itemTtl, Integer ttl) throws ApiException {
        okhttp3.Call localVarCall = updateSyncMapItemValidateBeforeCall(serviceSid, mapSid, key, ifMatch, collectionTtl, data, itemTtl, ttl, null);
        Type localVarReturnType = new TypeToken<SyncV1ServiceSyncMapSyncMapItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Item resource to update. (required)
     * @param mapSid The SID of the Sync Map with the Sync Map Item resource to update. Can be the Sync Map resource&#39;s &#x60;sid&#x60; or its &#x60;unique_name&#x60;. (required)
     * @param key The &#x60;key&#x60; value of the Sync Map Item resource to update.  (required)
     * @param ifMatch If provided, applies this mutation if (and only if) the “revision” field of this [map item] matches the provided value. This matches the semantics of (and is implemented with) the HTTP [If-Match header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match). (optional)
     * @param collectionTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item&#39;s parent Sync Map expires (time-to-live) and is deleted. This parameter can only be used when the Map Item&#39;s &#x60;data&#x60; or &#x60;ttl&#x60; is updated in the same request. (optional)
     * @param data A JSON string that represents an arbitrary, schema-less object that the Map Item stores. Can be up to 16 KiB in length. (optional)
     * @param itemTtl How long, [in seconds](https://www.twilio.com/docs/sync/limits#sync-payload-limits), before the Map Item expires (time-to-live) and is deleted. (optional)
     * @param ttl An alias for &#x60;item_ttl&#x60;. If both parameters are provided, this value is ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSyncMapItemAsync(String serviceSid, String mapSid, String key, String ifMatch, Integer collectionTtl, Object data, Integer itemTtl, Integer ttl, final ApiCallback<SyncV1ServiceSyncMapSyncMapItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSyncMapItemValidateBeforeCall(serviceSid, mapSid, key, ifMatch, collectionTtl, data, itemTtl, ttl, _callback);
        Type localVarReturnType = new TypeToken<SyncV1ServiceSyncMapSyncMapItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
