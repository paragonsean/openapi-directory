/**
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISyncV1SyncListItemApi_H
#define OAI_OAISyncV1SyncListItemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSyncListItemResponse.h"
#include "OAISync_list_item_enum_query_from_bound_type.h"
#include "OAISync_list_item_enum_query_result_order.h"
#include "OAISync_v1_service_sync_list_sync_list_item.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISyncV1SyncListItemApi : public QObject {
    Q_OBJECT

public:
    OAISyncV1SyncListItemApi(const int timeOut = 0);
    ~OAISyncV1SyncListItemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  data QJsonValue [required]
    * @param[in]  collection_ttl qint32 [optional]
    * @param[in]  item_ttl qint32 [optional]
    * @param[in]  ttl qint32 [optional]
    */
    virtual void createSyncListItem(const QString &service_sid, const QString &list_sid, const QJsonValue &data, const ::OpenAPI::OptionalParam<qint32> &collection_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &item_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  index qint32 [required]
    */
    virtual void fetchSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  order OAISync_list_item_enum_query_result_order [optional]
    * @param[in]  from QString [optional]
    * @param[in]  bounds OAISync_list_item_enum_query_from_bound_type [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSyncListItem(const QString &service_sid, const QString &list_sid, const ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_result_order> &order = ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_result_order>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_from_bound_type> &bounds = ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_from_bound_type>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  list_sid QString [required]
    * @param[in]  index qint32 [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  collection_ttl qint32 [optional]
    * @param[in]  data QJsonValue [optional]
    * @param[in]  item_ttl qint32 [optional]
    * @param[in]  ttl qint32 [optional]
    */
    virtual void updateSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &collection_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QJsonValue> &data = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<qint32> &item_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSyncListItemCallback(OAIHttpRequestWorker *worker);
    void deleteSyncListItemCallback(OAIHttpRequestWorker *worker);
    void fetchSyncListItemCallback(OAIHttpRequestWorker *worker);
    void listSyncListItemCallback(OAIHttpRequestWorker *worker);
    void updateSyncListItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSyncListItemSignal(OAISync_v1_service_sync_list_sync_list_item summary);
    void deleteSyncListItemSignal();
    void fetchSyncListItemSignal(OAISync_v1_service_sync_list_sync_list_item summary);
    void listSyncListItemSignal(OAIListSyncListItemResponse summary);
    void updateSyncListItemSignal(OAISync_v1_service_sync_list_sync_list_item summary);


    void createSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAISync_v1_service_sync_list_sync_list_item summary);
    void deleteSyncListItemSignalFull(OAIHttpRequestWorker *worker);
    void fetchSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAISync_v1_service_sync_list_sync_list_item summary);
    void listSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAIListSyncListItemResponse summary);
    void updateSyncListItemSignalFull(OAIHttpRequestWorker *worker, OAISync_v1_service_sync_list_sync_list_item summary);

    Q_DECL_DEPRECATED_X("Use createSyncListItemSignalError() instead")
    void createSyncListItemSignalE(OAISync_v1_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncListItemSignalError(OAISync_v1_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncListItemSignalError() instead")
    void deleteSyncListItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncListItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncListItemSignalError() instead")
    void fetchSyncListItemSignalE(OAISync_v1_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncListItemSignalError(OAISync_v1_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncListItemSignalError() instead")
    void listSyncListItemSignalE(OAIListSyncListItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncListItemSignalError(OAIListSyncListItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncListItemSignalError() instead")
    void updateSyncListItemSignalE(OAISync_v1_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncListItemSignalError(OAISync_v1_service_sync_list_sync_list_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSyncListItemSignalErrorFull() instead")
    void createSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncListItemSignalErrorFull() instead")
    void deleteSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncListItemSignalErrorFull() instead")
    void fetchSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncListItemSignalErrorFull() instead")
    void listSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncListItemSignalErrorFull() instead")
    void updateSyncListItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncListItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
