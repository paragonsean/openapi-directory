/**
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISyncV1SyncMapItemApi_H
#define OAI_OAISyncV1SyncMapItemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSyncMapItemResponse.h"
#include "OAISync_map_item_enum_query_from_bound_type.h"
#include "OAISync_map_item_enum_query_result_order.h"
#include "OAISync_v1_service_sync_map_sync_map_item.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISyncV1SyncMapItemApi : public QObject {
    Q_OBJECT

public:
    OAISyncV1SyncMapItemApi(const int timeOut = 0);
    ~OAISyncV1SyncMapItemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  data QJsonValue [required]
    * @param[in]  key QString [required]
    * @param[in]  collection_ttl qint32 [optional]
    * @param[in]  item_ttl qint32 [optional]
    * @param[in]  ttl qint32 [optional]
    */
    virtual void createSyncMapItem(const QString &service_sid, const QString &map_sid, const QJsonValue &data, const QString &key, const ::OpenAPI::OptionalParam<qint32> &collection_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &item_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  key QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteSyncMapItem(const QString &service_sid, const QString &map_sid, const QString &key, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  key QString [required]
    */
    virtual void fetchSyncMapItem(const QString &service_sid, const QString &map_sid, const QString &key);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  order OAISync_map_item_enum_query_result_order [optional]
    * @param[in]  from QString [optional]
    * @param[in]  bounds OAISync_map_item_enum_query_from_bound_type [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listSyncMapItem(const QString &service_sid, const QString &map_sid, const ::OpenAPI::OptionalParam<OAISync_map_item_enum_query_result_order> &order = ::OpenAPI::OptionalParam<OAISync_map_item_enum_query_result_order>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISync_map_item_enum_query_from_bound_type> &bounds = ::OpenAPI::OptionalParam<OAISync_map_item_enum_query_from_bound_type>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  map_sid QString [required]
    * @param[in]  key QString [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  collection_ttl qint32 [optional]
    * @param[in]  data QJsonValue [optional]
    * @param[in]  item_ttl qint32 [optional]
    * @param[in]  ttl qint32 [optional]
    */
    virtual void updateSyncMapItem(const QString &service_sid, const QString &map_sid, const QString &key, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &collection_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QJsonValue> &data = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<qint32> &item_ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSyncMapItemCallback(OAIHttpRequestWorker *worker);
    void deleteSyncMapItemCallback(OAIHttpRequestWorker *worker);
    void fetchSyncMapItemCallback(OAIHttpRequestWorker *worker);
    void listSyncMapItemCallback(OAIHttpRequestWorker *worker);
    void updateSyncMapItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSyncMapItemSignal(OAISync_v1_service_sync_map_sync_map_item summary);
    void deleteSyncMapItemSignal();
    void fetchSyncMapItemSignal(OAISync_v1_service_sync_map_sync_map_item summary);
    void listSyncMapItemSignal(OAIListSyncMapItemResponse summary);
    void updateSyncMapItemSignal(OAISync_v1_service_sync_map_sync_map_item summary);


    void createSyncMapItemSignalFull(OAIHttpRequestWorker *worker, OAISync_v1_service_sync_map_sync_map_item summary);
    void deleteSyncMapItemSignalFull(OAIHttpRequestWorker *worker);
    void fetchSyncMapItemSignalFull(OAIHttpRequestWorker *worker, OAISync_v1_service_sync_map_sync_map_item summary);
    void listSyncMapItemSignalFull(OAIHttpRequestWorker *worker, OAIListSyncMapItemResponse summary);
    void updateSyncMapItemSignalFull(OAIHttpRequestWorker *worker, OAISync_v1_service_sync_map_sync_map_item summary);

    Q_DECL_DEPRECATED_X("Use createSyncMapItemSignalError() instead")
    void createSyncMapItemSignalE(OAISync_v1_service_sync_map_sync_map_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncMapItemSignalError(OAISync_v1_service_sync_map_sync_map_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncMapItemSignalError() instead")
    void deleteSyncMapItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncMapItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncMapItemSignalError() instead")
    void fetchSyncMapItemSignalE(OAISync_v1_service_sync_map_sync_map_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncMapItemSignalError(OAISync_v1_service_sync_map_sync_map_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncMapItemSignalError() instead")
    void listSyncMapItemSignalE(OAIListSyncMapItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncMapItemSignalError(OAIListSyncMapItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncMapItemSignalError() instead")
    void updateSyncMapItemSignalE(OAISync_v1_service_sync_map_sync_map_item summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncMapItemSignalError(OAISync_v1_service_sync_map_sync_map_item summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSyncMapItemSignalErrorFull() instead")
    void createSyncMapItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSyncMapItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSyncMapItemSignalErrorFull() instead")
    void deleteSyncMapItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSyncMapItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSyncMapItemSignalErrorFull() instead")
    void fetchSyncMapItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSyncMapItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSyncMapItemSignalErrorFull() instead")
    void listSyncMapItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSyncMapItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyncMapItemSignalErrorFull() instead")
    void updateSyncMapItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyncMapItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
