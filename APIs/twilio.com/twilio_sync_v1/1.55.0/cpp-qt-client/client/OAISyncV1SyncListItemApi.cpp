/**
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncV1SyncListItemApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISyncV1SyncListItemApi::OAISyncV1SyncListItemApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAISyncV1SyncListItemApi::~OAISyncV1SyncListItemApi() {
}

void OAISyncV1SyncListItemApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://sync.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://sync.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createSyncListItem", serverConf);
    _serverIndices.insert("createSyncListItem", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://sync.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteSyncListItem", serverConf);
    _serverIndices.insert("deleteSyncListItem", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://sync.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchSyncListItem", serverConf);
    _serverIndices.insert("fetchSyncListItem", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://sync.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listSyncListItem", serverConf);
    _serverIndices.insert("listSyncListItem", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://sync.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateSyncListItem", serverConf);
    _serverIndices.insert("updateSyncListItem", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAISyncV1SyncListItemApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAISyncV1SyncListItemApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAISyncV1SyncListItemApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAISyncV1SyncListItemApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAISyncV1SyncListItemApi::setUsername(const QString &username) {
    _username = username;
}

void OAISyncV1SyncListItemApi::setPassword(const QString &password) {
    _password = password;
}


void OAISyncV1SyncListItemApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISyncV1SyncListItemApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISyncV1SyncListItemApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAISyncV1SyncListItemApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISyncV1SyncListItemApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISyncV1SyncListItemApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAISyncV1SyncListItemApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAISyncV1SyncListItemApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAISyncV1SyncListItemApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAISyncV1SyncListItemApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAISyncV1SyncListItemApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAISyncV1SyncListItemApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAISyncV1SyncListItemApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAISyncV1SyncListItemApi::createSyncListItem(const QString &service_sid, const QString &list_sid, const QJsonValue &data, const ::OpenAPI::OptionalParam<qint32> &collection_ttl, const ::OpenAPI::OptionalParam<qint32> &item_ttl, const ::OpenAPI::OptionalParam<qint32> &ttl) {
    QString fullPath = QString(_serverConfigs["createSyncListItem"][_serverIndices.value("createSyncListItem")].URL()+"/v1/Services/{ServiceSid}/Lists/{ListSid}/Items");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString list_sidPathParam("{");
        list_sidPathParam.append("ListSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ListSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ListSid"+pathSuffix : pathPrefix;
        fullPath.replace(list_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(list_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (collection_ttl.hasValue())
    {
        input.add_var("CollectionTtl", ::OpenAPI::toStringValue(collection_ttl.value()));
    }
    
    {
        input.add_var("Data", ::OpenAPI::toStringValue(data));
    }
    if (item_ttl.hasValue())
    {
        input.add_var("ItemTtl", ::OpenAPI::toStringValue(item_ttl.value()));
    }
    if (ttl.hasValue())
    {
        input.add_var("Ttl", ::OpenAPI::toStringValue(ttl.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISyncV1SyncListItemApi::createSyncListItemCallback);
    connect(this, &OAISyncV1SyncListItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISyncV1SyncListItemApi::createSyncListItemCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISync_v1_service_sync_list_sync_list_item output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createSyncListItemSignal(output);
        Q_EMIT createSyncListItemSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createSyncListItemSignalE(output, error_type, error_str);
        Q_EMIT createSyncListItemSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createSyncListItemSignalError(output, error_type, error_str);
        Q_EMIT createSyncListItemSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISyncV1SyncListItemApi::deleteSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index, const ::OpenAPI::OptionalParam<QString> &if_match) {
    QString fullPath = QString(_serverConfigs["deleteSyncListItem"][_serverIndices.value("deleteSyncListItem")].URL()+"/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString list_sidPathParam("{");
        list_sidPathParam.append("ListSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ListSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ListSid"+pathSuffix : pathPrefix;
        fullPath.replace(list_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(list_sid)));
    }
    
    {
        QString indexPathParam("{");
        indexPathParam.append("Index").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Index", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Index"+pathSuffix : pathPrefix;
        fullPath.replace(indexPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(index)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("If-Match", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISyncV1SyncListItemApi::deleteSyncListItemCallback);
    connect(this, &OAISyncV1SyncListItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISyncV1SyncListItemApi::deleteSyncListItemCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteSyncListItemSignal();
        Q_EMIT deleteSyncListItemSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteSyncListItemSignalE(error_type, error_str);
        Q_EMIT deleteSyncListItemSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteSyncListItemSignalError(error_type, error_str);
        Q_EMIT deleteSyncListItemSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISyncV1SyncListItemApi::fetchSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index) {
    QString fullPath = QString(_serverConfigs["fetchSyncListItem"][_serverIndices.value("fetchSyncListItem")].URL()+"/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString list_sidPathParam("{");
        list_sidPathParam.append("ListSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ListSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ListSid"+pathSuffix : pathPrefix;
        fullPath.replace(list_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(list_sid)));
    }
    
    {
        QString indexPathParam("{");
        indexPathParam.append("Index").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Index", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Index"+pathSuffix : pathPrefix;
        fullPath.replace(indexPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(index)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISyncV1SyncListItemApi::fetchSyncListItemCallback);
    connect(this, &OAISyncV1SyncListItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISyncV1SyncListItemApi::fetchSyncListItemCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISync_v1_service_sync_list_sync_list_item output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchSyncListItemSignal(output);
        Q_EMIT fetchSyncListItemSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchSyncListItemSignalE(output, error_type, error_str);
        Q_EMIT fetchSyncListItemSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchSyncListItemSignalError(output, error_type, error_str);
        Q_EMIT fetchSyncListItemSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISyncV1SyncListItemApi::listSyncListItem(const QString &service_sid, const QString &list_sid, const ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_result_order> &order, const ::OpenAPI::OptionalParam<QString> &from, const ::OpenAPI::OptionalParam<OAISync_list_item_enum_query_from_bound_type> &bounds, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listSyncListItem"][_serverIndices.value("listSyncListItem")].URL()+"/v1/Services/{ServiceSid}/Lists/{ListSid}/Items");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString list_sidPathParam("{");
        list_sidPathParam.append("ListSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ListSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ListSid"+pathSuffix : pathPrefix;
        fullPath.replace(list_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(list_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Order", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Order")).append(querySuffix).append(QUrl::toPercentEncoding(order.stringValue()));
    }
    if (from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "From", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("From")).append(querySuffix).append(QUrl::toPercentEncoding(from.stringValue()));
    }
    if (bounds.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Bounds", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Bounds")).append(querySuffix).append(QUrl::toPercentEncoding(bounds.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISyncV1SyncListItemApi::listSyncListItemCallback);
    connect(this, &OAISyncV1SyncListItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISyncV1SyncListItemApi::listSyncListItemCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListSyncListItemResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listSyncListItemSignal(output);
        Q_EMIT listSyncListItemSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listSyncListItemSignalE(output, error_type, error_str);
        Q_EMIT listSyncListItemSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listSyncListItemSignalError(output, error_type, error_str);
        Q_EMIT listSyncListItemSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISyncV1SyncListItemApi::updateSyncListItem(const QString &service_sid, const QString &list_sid, const qint32 &index, const ::OpenAPI::OptionalParam<QString> &if_match, const ::OpenAPI::OptionalParam<qint32> &collection_ttl, const ::OpenAPI::OptionalParam<QJsonValue> &data, const ::OpenAPI::OptionalParam<qint32> &item_ttl, const ::OpenAPI::OptionalParam<qint32> &ttl) {
    QString fullPath = QString(_serverConfigs["updateSyncListItem"][_serverIndices.value("updateSyncListItem")].URL()+"/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString list_sidPathParam("{");
        list_sidPathParam.append("ListSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ListSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ListSid"+pathSuffix : pathPrefix;
        fullPath.replace(list_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(list_sid)));
    }
    
    {
        QString indexPathParam("{");
        indexPathParam.append("Index").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Index", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Index"+pathSuffix : pathPrefix;
        fullPath.replace(indexPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(index)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (collection_ttl.hasValue())
    {
        input.add_var("CollectionTtl", ::OpenAPI::toStringValue(collection_ttl.value()));
    }
    if (data.hasValue())
    {
        input.add_var("Data", ::OpenAPI::toStringValue(data.value()));
    }
    if (item_ttl.hasValue())
    {
        input.add_var("ItemTtl", ::OpenAPI::toStringValue(item_ttl.value()));
    }
    if (ttl.hasValue())
    {
        input.add_var("Ttl", ::OpenAPI::toStringValue(ttl.value()));
    }

    if (if_match.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_match.value()).isEmpty()) {
            input.headers.insert("If-Match", ::OpenAPI::toStringValue(if_match.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISyncV1SyncListItemApi::updateSyncListItemCallback);
    connect(this, &OAISyncV1SyncListItemApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISyncV1SyncListItemApi::updateSyncListItemCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISync_v1_service_sync_list_sync_list_item output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateSyncListItemSignal(output);
        Q_EMIT updateSyncListItemSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateSyncListItemSignalE(output, error_type, error_str);
        Q_EMIT updateSyncListItemSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateSyncListItemSignalError(output, error_type, error_str);
        Q_EMIT updateSyncListItemSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISyncV1SyncListItemApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
