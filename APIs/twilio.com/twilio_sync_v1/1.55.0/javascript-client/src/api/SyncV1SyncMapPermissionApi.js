/**
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListSyncMapPermissionResponse from '../model/ListSyncMapPermissionResponse';
import SyncV1ServiceSyncMapSyncMapPermission from '../model/SyncV1ServiceSyncMapSyncMapPermission';

/**
* SyncV1SyncMapPermission service.
* @module api/SyncV1SyncMapPermissionApi
* @version 1.55.0
*/
export default class SyncV1SyncMapPermissionApi {

    /**
    * Constructs a new SyncV1SyncMapPermissionApi. 
    * @alias module:api/SyncV1SyncMapPermissionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSyncMapPermission operation.
     * @callback module:api/SyncV1SyncMapPermissionApi~deleteSyncMapPermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Sync Map Permission.
     * @param {String} serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to delete. Can be the Service's `sid` value or `default`.
     * @param {String} mapSid The SID of the Sync Map with the Sync Map Permission resource to delete. Can be the Sync Map resource's `sid` or its `unique_name`.
     * @param {String} identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to delete.
     * @param {module:api/SyncV1SyncMapPermissionApi~deleteSyncMapPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSyncMapPermission(serviceSid, mapSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteSyncMapPermission");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling deleteSyncMapPermission");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling deleteSyncMapPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://sync.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSyncMapPermission operation.
     * @callback module:api/SyncV1SyncMapPermissionApi~fetchSyncMapPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncV1ServiceSyncMapSyncMapPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific Sync Map Permission.
     * @param {String} serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to fetch. Can be the Service's `sid` value or `default`.
     * @param {String} mapSid The SID of the Sync Map with the Sync Map Permission resource to fetch. Can be the Sync Map resource's `sid` or its `unique_name`.
     * @param {String} identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to fetch.
     * @param {module:api/SyncV1SyncMapPermissionApi~fetchSyncMapPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncV1ServiceSyncMapSyncMapPermission}
     */
    fetchSyncMapPermission(serviceSid, mapSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchSyncMapPermission");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling fetchSyncMapPermission");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling fetchSyncMapPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SyncV1ServiceSyncMapSyncMapPermission;
      let basePaths = ['https://sync.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSyncMapPermission operation.
     * @callback module:api/SyncV1SyncMapPermissionApi~listSyncMapPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSyncMapPermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Permissions applying to a Sync Map.
     * @param {String} serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resources to read. Can be the Service's `sid` value or `default`.
     * @param {String} mapSid The SID of the Sync Map with the Permission resources to read. Can be the Sync Map resource's `sid` or its `unique_name`.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/SyncV1SyncMapPermissionApi~listSyncMapPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSyncMapPermissionResponse}
     */
    listSyncMapPermission(serviceSid, mapSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listSyncMapPermission");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling listSyncMapPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSyncMapPermissionResponse;
      let basePaths = ['https://sync.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSyncMapPermission operation.
     * @callback module:api/SyncV1SyncMapPermissionApi~updateSyncMapPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncV1ServiceSyncMapSyncMapPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an identity's access to a specific Sync Map.
     * @param {String} serviceSid The SID of the [Sync Service](https://www.twilio.com/docs/sync/api/service) with the Sync Map Permission resource to update. Can be the Service's `sid` value or `default`.
     * @param {String} mapSid The SID of the Sync Map with the Sync Map Permission resource to update. Can be the Sync Map resource's `sid` or its `unique_name`.
     * @param {String} identity The application-defined string that uniquely identifies the User's Sync Map Permission resource to update.
     * @param {Boolean} manage Whether the identity can delete the Sync Map. Default value is `false`.
     * @param {Boolean} read Whether the identity can read the Sync Map and its Items. Default value is `false`.
     * @param {Boolean} write Whether the identity can create, update, and delete Items in the Sync Map. Default value is `false`.
     * @param {module:api/SyncV1SyncMapPermissionApi~updateSyncMapPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncV1ServiceSyncMapSyncMapPermission}
     */
    updateSyncMapPermission(serviceSid, mapSid, identity, manage, read, write, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateSyncMapPermission");
      }
      // verify the required parameter 'mapSid' is set
      if (mapSid === undefined || mapSid === null) {
        throw new Error("Missing the required parameter 'mapSid' when calling updateSyncMapPermission");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling updateSyncMapPermission");
      }
      // verify the required parameter 'manage' is set
      if (manage === undefined || manage === null) {
        throw new Error("Missing the required parameter 'manage' when calling updateSyncMapPermission");
      }
      // verify the required parameter 'read' is set
      if (read === undefined || read === null) {
        throw new Error("Missing the required parameter 'read' when calling updateSyncMapPermission");
      }
      // verify the required parameter 'write' is set
      if (write === undefined || write === null) {
        throw new Error("Missing the required parameter 'write' when calling updateSyncMapPermission");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'MapSid': mapSid,
        'Identity': identity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Manage': manage,
        'Read': read,
        'Write': write
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SyncV1ServiceSyncMapSyncMapPermission;
      let basePaths = ['https://sync.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
