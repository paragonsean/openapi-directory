# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SyncV1Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, acl_enabled: bool=None, date_created: datetime=None, date_updated: datetime=None, friendly_name: str=None, links: object=None, reachability_debouncing_enabled: bool=None, reachability_debouncing_window: int=None, reachability_webhooks_enabled: bool=None, sid: str=None, unique_name: str=None, url: str=None, webhook_url: str=None, webhooks_from_rest_enabled: bool=None):
        """SyncV1Service - a model defined in OpenAPI

        :param account_sid: The account_sid of this SyncV1Service.
        :param acl_enabled: The acl_enabled of this SyncV1Service.
        :param date_created: The date_created of this SyncV1Service.
        :param date_updated: The date_updated of this SyncV1Service.
        :param friendly_name: The friendly_name of this SyncV1Service.
        :param links: The links of this SyncV1Service.
        :param reachability_debouncing_enabled: The reachability_debouncing_enabled of this SyncV1Service.
        :param reachability_debouncing_window: The reachability_debouncing_window of this SyncV1Service.
        :param reachability_webhooks_enabled: The reachability_webhooks_enabled of this SyncV1Service.
        :param sid: The sid of this SyncV1Service.
        :param unique_name: The unique_name of this SyncV1Service.
        :param url: The url of this SyncV1Service.
        :param webhook_url: The webhook_url of this SyncV1Service.
        :param webhooks_from_rest_enabled: The webhooks_from_rest_enabled of this SyncV1Service.
        """
        self.openapi_types = {
            'account_sid': str,
            'acl_enabled': bool,
            'date_created': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'links': object,
            'reachability_debouncing_enabled': bool,
            'reachability_debouncing_window': int,
            'reachability_webhooks_enabled': bool,
            'sid': str,
            'unique_name': str,
            'url': str,
            'webhook_url': str,
            'webhooks_from_rest_enabled': bool
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'acl_enabled': 'acl_enabled',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'links': 'links',
            'reachability_debouncing_enabled': 'reachability_debouncing_enabled',
            'reachability_debouncing_window': 'reachability_debouncing_window',
            'reachability_webhooks_enabled': 'reachability_webhooks_enabled',
            'sid': 'sid',
            'unique_name': 'unique_name',
            'url': 'url',
            'webhook_url': 'webhook_url',
            'webhooks_from_rest_enabled': 'webhooks_from_rest_enabled'
        }

        self._account_sid = account_sid
        self._acl_enabled = acl_enabled
        self._date_created = date_created
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._links = links
        self._reachability_debouncing_enabled = reachability_debouncing_enabled
        self._reachability_debouncing_window = reachability_debouncing_window
        self._reachability_webhooks_enabled = reachability_webhooks_enabled
        self._sid = sid
        self._unique_name = unique_name
        self._url = url
        self._webhook_url = webhook_url
        self._webhooks_from_rest_enabled = webhooks_from_rest_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncV1Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sync.v1.service of this SyncV1Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this SyncV1Service.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.

        :return: The account_sid of this SyncV1Service.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this SyncV1Service.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.

        :param account_sid: The account_sid of this SyncV1Service.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def acl_enabled(self):
        """Gets the acl_enabled of this SyncV1Service.

        Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource. It is disabled (false) by default.

        :return: The acl_enabled of this SyncV1Service.
        :rtype: bool
        """
        return self._acl_enabled

    @acl_enabled.setter
    def acl_enabled(self, acl_enabled):
        """Sets the acl_enabled of this SyncV1Service.

        Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource. It is disabled (false) by default.

        :param acl_enabled: The acl_enabled of this SyncV1Service.
        :type acl_enabled: bool
        """

        self._acl_enabled = acl_enabled

    @property
    def date_created(self):
        """Gets the date_created of this SyncV1Service.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this SyncV1Service.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this SyncV1Service.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this SyncV1Service.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this SyncV1Service.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this SyncV1Service.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this SyncV1Service.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this SyncV1Service.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self):
        """Gets the friendly_name of this SyncV1Service.

        The string that you assigned to describe the resource.

        :return: The friendly_name of this SyncV1Service.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this SyncV1Service.

        The string that you assigned to describe the resource.

        :param friendly_name: The friendly_name of this SyncV1Service.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def links(self):
        """Gets the links of this SyncV1Service.

        The URLs of related resources.

        :return: The links of this SyncV1Service.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SyncV1Service.

        The URLs of related resources.

        :param links: The links of this SyncV1Service.
        :type links: object
        """

        self._links = links

    @property
    def reachability_debouncing_enabled(self):
        """Gets the reachability_debouncing_enabled of this SyncV1Service.

        Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event.

        :return: The reachability_debouncing_enabled of this SyncV1Service.
        :rtype: bool
        """
        return self._reachability_debouncing_enabled

    @reachability_debouncing_enabled.setter
    def reachability_debouncing_enabled(self, reachability_debouncing_enabled):
        """Sets the reachability_debouncing_enabled of this SyncV1Service.

        Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event.

        :param reachability_debouncing_enabled: The reachability_debouncing_enabled of this SyncV1Service.
        :type reachability_debouncing_enabled: bool
        """

        self._reachability_debouncing_enabled = reachability_debouncing_enabled

    @property
    def reachability_debouncing_window(self):
        """Gets the reachability_debouncing_window of this SyncV1Service.

        The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before `webhook_url` is called, if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the reachability event from occurring.

        :return: The reachability_debouncing_window of this SyncV1Service.
        :rtype: int
        """
        return self._reachability_debouncing_window

    @reachability_debouncing_window.setter
    def reachability_debouncing_window(self, reachability_debouncing_window):
        """Sets the reachability_debouncing_window of this SyncV1Service.

        The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before `webhook_url` is called, if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the reachability event from occurring.

        :param reachability_debouncing_window: The reachability_debouncing_window of this SyncV1Service.
        :type reachability_debouncing_window: int
        """

        self._reachability_debouncing_window = reachability_debouncing_window

    @property
    def reachability_webhooks_enabled(self):
        """Gets the reachability_webhooks_enabled of this SyncV1Service.

        Whether the service instance calls `webhook_url` when client endpoints connect to Sync. The default is `false`.

        :return: The reachability_webhooks_enabled of this SyncV1Service.
        :rtype: bool
        """
        return self._reachability_webhooks_enabled

    @reachability_webhooks_enabled.setter
    def reachability_webhooks_enabled(self, reachability_webhooks_enabled):
        """Sets the reachability_webhooks_enabled of this SyncV1Service.

        Whether the service instance calls `webhook_url` when client endpoints connect to Sync. The default is `false`.

        :param reachability_webhooks_enabled: The reachability_webhooks_enabled of this SyncV1Service.
        :type reachability_webhooks_enabled: bool
        """

        self._reachability_webhooks_enabled = reachability_webhooks_enabled

    @property
    def sid(self):
        """Gets the sid of this SyncV1Service.

        The unique string that we created to identify the Service resource.

        :return: The sid of this SyncV1Service.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SyncV1Service.

        The unique string that we created to identify the Service resource.

        :param sid: The sid of this SyncV1Service.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def unique_name(self):
        """Gets the unique_name of this SyncV1Service.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource. It is a read-only property, it cannot be assigned using REST API.

        :return: The unique_name of this SyncV1Service.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this SyncV1Service.

        An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource. It is a read-only property, it cannot be assigned using REST API.

        :param unique_name: The unique_name of this SyncV1Service.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def url(self):
        """Gets the url of this SyncV1Service.

        The absolute URL of the Service resource.

        :return: The url of this SyncV1Service.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SyncV1Service.

        The absolute URL of the Service resource.

        :param url: The url of this SyncV1Service.
        :type url: str
        """

        self._url = url

    @property
    def webhook_url(self):
        """Gets the webhook_url of this SyncV1Service.

        The URL we call when Sync objects are manipulated.

        :return: The webhook_url of this SyncV1Service.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this SyncV1Service.

        The URL we call when Sync objects are manipulated.

        :param webhook_url: The webhook_url of this SyncV1Service.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url

    @property
    def webhooks_from_rest_enabled(self):
        """Gets the webhooks_from_rest_enabled of this SyncV1Service.

        Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`.

        :return: The webhooks_from_rest_enabled of this SyncV1Service.
        :rtype: bool
        """
        return self._webhooks_from_rest_enabled

    @webhooks_from_rest_enabled.setter
    def webhooks_from_rest_enabled(self, webhooks_from_rest_enabled):
        """Sets the webhooks_from_rest_enabled of this SyncV1Service.

        Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`.

        :param webhooks_from_rest_enabled: The webhooks_from_rest_enabled of this SyncV1Service.
        :type webhooks_from_rest_enabled: bool
        """

        self._webhooks_from_rest_enabled = webhooks_from_rest_enabled
