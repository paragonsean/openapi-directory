# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.composition_hook_enum_format import CompositionHookEnumFormat
import re
from openapi_server import util


class VideoV1CompositionHook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, audio_sources: List[str]=None, audio_sources_excluded: List[str]=None, date_created: datetime=None, date_updated: datetime=None, enabled: bool=None, format: CompositionHookEnumFormat=None, friendly_name: str=None, resolution: str=None, sid: str=None, status_callback: str=None, status_callback_method: str=None, trim: bool=None, url: str=None, video_layout: object=None):
        """VideoV1CompositionHook - a model defined in OpenAPI

        :param account_sid: The account_sid of this VideoV1CompositionHook.
        :param audio_sources: The audio_sources of this VideoV1CompositionHook.
        :param audio_sources_excluded: The audio_sources_excluded of this VideoV1CompositionHook.
        :param date_created: The date_created of this VideoV1CompositionHook.
        :param date_updated: The date_updated of this VideoV1CompositionHook.
        :param enabled: The enabled of this VideoV1CompositionHook.
        :param format: The format of this VideoV1CompositionHook.
        :param friendly_name: The friendly_name of this VideoV1CompositionHook.
        :param resolution: The resolution of this VideoV1CompositionHook.
        :param sid: The sid of this VideoV1CompositionHook.
        :param status_callback: The status_callback of this VideoV1CompositionHook.
        :param status_callback_method: The status_callback_method of this VideoV1CompositionHook.
        :param trim: The trim of this VideoV1CompositionHook.
        :param url: The url of this VideoV1CompositionHook.
        :param video_layout: The video_layout of this VideoV1CompositionHook.
        """
        self.openapi_types = {
            'account_sid': str,
            'audio_sources': List[str],
            'audio_sources_excluded': List[str],
            'date_created': datetime,
            'date_updated': datetime,
            'enabled': bool,
            'format': CompositionHookEnumFormat,
            'friendly_name': str,
            'resolution': str,
            'sid': str,
            'status_callback': str,
            'status_callback_method': str,
            'trim': bool,
            'url': str,
            'video_layout': object
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'audio_sources': 'audio_sources',
            'audio_sources_excluded': 'audio_sources_excluded',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'enabled': 'enabled',
            'format': 'format',
            'friendly_name': 'friendly_name',
            'resolution': 'resolution',
            'sid': 'sid',
            'status_callback': 'status_callback',
            'status_callback_method': 'status_callback_method',
            'trim': 'trim',
            'url': 'url',
            'video_layout': 'video_layout'
        }

        self._account_sid = account_sid
        self._audio_sources = audio_sources
        self._audio_sources_excluded = audio_sources_excluded
        self._date_created = date_created
        self._date_updated = date_updated
        self._enabled = enabled
        self._format = format
        self._friendly_name = friendly_name
        self._resolution = resolution
        self._sid = sid
        self._status_callback = status_callback
        self._status_callback_method = status_callback_method
        self._trim = trim
        self._url = url
        self._video_layout = video_layout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoV1CompositionHook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video.v1.composition_hook of this VideoV1CompositionHook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VideoV1CompositionHook.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionHook resource.

        :return: The account_sid of this VideoV1CompositionHook.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VideoV1CompositionHook.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionHook resource.

        :param account_sid: The account_sid of this VideoV1CompositionHook.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def audio_sources(self):
        """Gets the audio_sources of this VideoV1CompositionHook.

        The array of track names to include in the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request

        :return: The audio_sources of this VideoV1CompositionHook.
        :rtype: List[str]
        """
        return self._audio_sources

    @audio_sources.setter
    def audio_sources(self, audio_sources):
        """Sets the audio_sources of this VideoV1CompositionHook.

        The array of track names to include in the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request

        :param audio_sources: The audio_sources of this VideoV1CompositionHook.
        :type audio_sources: List[str]
        """

        self._audio_sources = audio_sources

    @property
    def audio_sources_excluded(self):
        """Gets the audio_sources_excluded of this VideoV1CompositionHook.

        The array of track names to exclude from the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.

        :return: The audio_sources_excluded of this VideoV1CompositionHook.
        :rtype: List[str]
        """
        return self._audio_sources_excluded

    @audio_sources_excluded.setter
    def audio_sources_excluded(self, audio_sources_excluded):
        """Sets the audio_sources_excluded of this VideoV1CompositionHook.

        The array of track names to exclude from the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.

        :param audio_sources_excluded: The audio_sources_excluded of this VideoV1CompositionHook.
        :type audio_sources_excluded: List[str]
        """

        self._audio_sources_excluded = audio_sources_excluded

    @property
    def date_created(self):
        """Gets the date_created of this VideoV1CompositionHook.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VideoV1CompositionHook.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VideoV1CompositionHook.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VideoV1CompositionHook.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this VideoV1CompositionHook.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this VideoV1CompositionHook.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this VideoV1CompositionHook.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this VideoV1CompositionHook.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def enabled(self):
        """Gets the enabled of this VideoV1CompositionHook.

        Whether the CompositionHook is active. When `true`, the CompositionHook is triggered for every completed Group Room on the account. When `false`, the CompositionHook is never triggered.

        :return: The enabled of this VideoV1CompositionHook.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VideoV1CompositionHook.

        Whether the CompositionHook is active. When `true`, the CompositionHook is triggered for every completed Group Room on the account. When `false`, the CompositionHook is never triggered.

        :param enabled: The enabled of this VideoV1CompositionHook.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def format(self):
        """Gets the format of this VideoV1CompositionHook.


        :return: The format of this VideoV1CompositionHook.
        :rtype: CompositionHookEnumFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this VideoV1CompositionHook.


        :param format: The format of this VideoV1CompositionHook.
        :type format: CompositionHookEnumFormat
        """

        self._format = format

    @property
    def friendly_name(self):
        """Gets the friendly_name of this VideoV1CompositionHook.

        The string that you assigned to describe the resource. Can be up to 100 characters long and must be unique within the account.

        :return: The friendly_name of this VideoV1CompositionHook.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this VideoV1CompositionHook.

        The string that you assigned to describe the resource. Can be up to 100 characters long and must be unique within the account.

        :param friendly_name: The friendly_name of this VideoV1CompositionHook.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def resolution(self):
        """Gets the resolution of this VideoV1CompositionHook.

        The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string's format is `{width}x{height}`, such as `640x480`.

        :return: The resolution of this VideoV1CompositionHook.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this VideoV1CompositionHook.

        The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string's format is `{width}x{height}`, such as `640x480`.

        :param resolution: The resolution of this VideoV1CompositionHook.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def sid(self):
        """Gets the sid of this VideoV1CompositionHook.

        The unique string that we created to identify the CompositionHook resource.

        :return: The sid of this VideoV1CompositionHook.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VideoV1CompositionHook.

        The unique string that we created to identify the CompositionHook resource.

        :param sid: The sid of this VideoV1CompositionHook.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^HK[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^HK[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status_callback(self):
        """Gets the status_callback of this VideoV1CompositionHook.

        The URL we call using the `status_callback_method` to send status information to your application.

        :return: The status_callback of this VideoV1CompositionHook.
        :rtype: str
        """
        return self._status_callback

    @status_callback.setter
    def status_callback(self, status_callback):
        """Sets the status_callback of this VideoV1CompositionHook.

        The URL we call using the `status_callback_method` to send status information to your application.

        :param status_callback: The status_callback of this VideoV1CompositionHook.
        :type status_callback: str
        """

        self._status_callback = status_callback

    @property
    def status_callback_method(self):
        """Gets the status_callback_method of this VideoV1CompositionHook.

        The HTTP method we should use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.

        :return: The status_callback_method of this VideoV1CompositionHook.
        :rtype: str
        """
        return self._status_callback_method

    @status_callback_method.setter
    def status_callback_method(self, status_callback_method):
        """Sets the status_callback_method of this VideoV1CompositionHook.

        The HTTP method we should use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.

        :param status_callback_method: The status_callback_method of this VideoV1CompositionHook.
        :type status_callback_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if status_callback_method not in allowed_values:
            raise ValueError(
                "Invalid value for `status_callback_method` ({0}), must be one of {1}"
                .format(status_callback_method, allowed_values)
            )

        self._status_callback_method = status_callback_method

    @property
    def trim(self):
        """Gets the trim of this VideoV1CompositionHook.

        Whether intervals with no media are clipped, as specified in the POST request that created the CompositionHook resource. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.

        :return: The trim of this VideoV1CompositionHook.
        :rtype: bool
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this VideoV1CompositionHook.

        Whether intervals with no media are clipped, as specified in the POST request that created the CompositionHook resource. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.

        :param trim: The trim of this VideoV1CompositionHook.
        :type trim: bool
        """

        self._trim = trim

    @property
    def url(self):
        """Gets the url of this VideoV1CompositionHook.

        The absolute URL of the resource.

        :return: The url of this VideoV1CompositionHook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VideoV1CompositionHook.

        The absolute URL of the resource.

        :param url: The url of this VideoV1CompositionHook.
        :type url: str
        """

        self._url = url

    @property
    def video_layout(self):
        """Gets the video_layout of this VideoV1CompositionHook.

        A JSON object that describes the video layout of the composition in terms of regions as specified in the HTTP POST request that created the CompositionHook resource. See [POST Parameters](https://www.twilio.com/docs/video/api/compositions-resource#http-post-parameters) for more information. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request

        :return: The video_layout of this VideoV1CompositionHook.
        :rtype: object
        """
        return self._video_layout

    @video_layout.setter
    def video_layout(self, video_layout):
        """Sets the video_layout of this VideoV1CompositionHook.

        A JSON object that describes the video layout of the composition in terms of regions as specified in the HTTP POST request that created the CompositionHook resource. See [POST Parameters](https://www.twilio.com/docs/video/api/compositions-resource#http-post-parameters) for more information. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request

        :param video_layout: The video_layout of this VideoV1CompositionHook.
        :type video_layout: object
        """

        self._video_layout = video_layout
