# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.room_participant_subscribed_track_enum_kind import RoomParticipantSubscribedTrackEnumKind
import re
from openapi_server import util


class VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_created: datetime=None, date_updated: datetime=None, enabled: bool=None, kind: RoomParticipantSubscribedTrackEnumKind=None, name: str=None, participant_sid: str=None, publisher_sid: str=None, room_sid: str=None, sid: str=None, url: str=None):
        """VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack - a model defined in OpenAPI

        :param date_created: The date_created of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param date_updated: The date_updated of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param enabled: The enabled of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param kind: The kind of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param name: The name of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param participant_sid: The participant_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param publisher_sid: The publisher_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param room_sid: The room_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param sid: The sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :param url: The url of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        """
        self.openapi_types = {
            'date_created': datetime,
            'date_updated': datetime,
            'enabled': bool,
            'kind': RoomParticipantSubscribedTrackEnumKind,
            'name': str,
            'participant_sid': str,
            'publisher_sid': str,
            'room_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'enabled': 'enabled',
            'kind': 'kind',
            'name': 'name',
            'participant_sid': 'participant_sid',
            'publisher_sid': 'publisher_sid',
            'room_sid': 'room_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._date_created = date_created
        self._date_updated = date_updated
        self._enabled = enabled
        self._kind = kind
        self._name = name
        self._participant_sid = participant_sid
        self._publisher_sid = publisher_sid
        self._room_sid = room_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video.v1.room.room_participant.room_participant_subscribed_track of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_created(self):
        """Gets the date_created of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def enabled(self):
        """Gets the enabled of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        Whether the track is enabled.

        :return: The enabled of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        Whether the track is enabled.

        :param enabled: The enabled of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def kind(self):
        """Gets the kind of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.


        :return: The kind of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: RoomParticipantSubscribedTrackEnumKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.


        :param kind: The kind of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type kind: RoomParticipantSubscribedTrackEnumKind
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The track name. Must have no more than 128 characters and be unique among the participant's published tracks.

        :return: The name of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The track name. Must have no more than 128 characters and be unique among the participant's published tracks.

        :param name: The name of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type name: str
        """

        self._name = name

    @property
    def participant_sid(self):
        """Gets the participant_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The SID of the participant that subscribes to the track.

        :return: The participant_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: str
        """
        return self._participant_sid

    @participant_sid.setter
    def participant_sid(self, participant_sid):
        """Sets the participant_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The SID of the participant that subscribes to the track.

        :param participant_sid: The participant_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type participant_sid: str
        """
        if participant_sid is not None and len(participant_sid) > 34:
            raise ValueError("Invalid value for `participant_sid`, length must be less than or equal to `34`")
        if participant_sid is not None and len(participant_sid) < 34:
            raise ValueError("Invalid value for `participant_sid`, length must be greater than or equal to `34`")
        if participant_sid is not None and not re.search(r'^PA[0-9a-fA-F]{32}$', participant_sid):
            raise ValueError("Invalid value for `participant_sid`, must be a follow pattern or equal to `/^PA[0-9a-fA-F]{32}$/`")

        self._participant_sid = participant_sid

    @property
    def publisher_sid(self):
        """Gets the publisher_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The SID of the participant that publishes the track.

        :return: The publisher_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: str
        """
        return self._publisher_sid

    @publisher_sid.setter
    def publisher_sid(self, publisher_sid):
        """Sets the publisher_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The SID of the participant that publishes the track.

        :param publisher_sid: The publisher_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type publisher_sid: str
        """
        if publisher_sid is not None and len(publisher_sid) > 34:
            raise ValueError("Invalid value for `publisher_sid`, length must be less than or equal to `34`")
        if publisher_sid is not None and len(publisher_sid) < 34:
            raise ValueError("Invalid value for `publisher_sid`, length must be greater than or equal to `34`")
        if publisher_sid is not None and not re.search(r'^PA[0-9a-fA-F]{32}$', publisher_sid):
            raise ValueError("Invalid value for `publisher_sid`, must be a follow pattern or equal to `/^PA[0-9a-fA-F]{32}$/`")

        self._publisher_sid = publisher_sid

    @property
    def room_sid(self):
        """Gets the room_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The SID of the room where the track is published.

        :return: The room_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: str
        """
        return self._room_sid

    @room_sid.setter
    def room_sid(self, room_sid):
        """Sets the room_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The SID of the room where the track is published.

        :param room_sid: The room_sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type room_sid: str
        """
        if room_sid is not None and len(room_sid) > 34:
            raise ValueError("Invalid value for `room_sid`, length must be less than or equal to `34`")
        if room_sid is not None and len(room_sid) < 34:
            raise ValueError("Invalid value for `room_sid`, length must be greater than or equal to `34`")
        if room_sid is not None and not re.search(r'^RM[0-9a-fA-F]{32}$', room_sid):
            raise ValueError("Invalid value for `room_sid`, must be a follow pattern or equal to `/^RM[0-9a-fA-F]{32}$/`")

        self._room_sid = room_sid

    @property
    def sid(self):
        """Gets the sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The unique string that we created to identify the RoomParticipantSubscribedTrack resource.

        :return: The sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The unique string that we created to identify the RoomParticipantSubscribedTrack resource.

        :param sid: The sid of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^MT[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^MT[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The absolute URL of the resource.

        :return: The url of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.

        The absolute URL of the resource.

        :param url: The url of this VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.
        :type url: str
        """

        self._url = url
