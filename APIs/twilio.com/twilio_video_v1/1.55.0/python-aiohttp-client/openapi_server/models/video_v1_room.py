# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.room_enum_room_status import RoomEnumRoomStatus
from openapi_server.models.room_enum_room_type import RoomEnumRoomType
from openapi_server.models.room_enum_video_codec import RoomEnumVideoCodec
import re
from openapi_server import util


class VideoV1Room(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, audio_only: bool=None, date_created: datetime=None, date_updated: datetime=None, duration: int=None, empty_room_timeout: int=None, enable_turn: bool=None, end_time: datetime=None, large_room: bool=None, links: object=None, max_concurrent_published_tracks: int=None, max_participant_duration: int=None, max_participants: int=None, media_region: str=None, record_participants_on_connect: bool=None, sid: str=None, status: RoomEnumRoomStatus=None, status_callback: str=None, status_callback_method: str=None, type: RoomEnumRoomType=None, unique_name: str=None, unused_room_timeout: int=None, url: str=None, video_codecs: List[RoomEnumVideoCodec]=None):
        """VideoV1Room - a model defined in OpenAPI

        :param account_sid: The account_sid of this VideoV1Room.
        :param audio_only: The audio_only of this VideoV1Room.
        :param date_created: The date_created of this VideoV1Room.
        :param date_updated: The date_updated of this VideoV1Room.
        :param duration: The duration of this VideoV1Room.
        :param empty_room_timeout: The empty_room_timeout of this VideoV1Room.
        :param enable_turn: The enable_turn of this VideoV1Room.
        :param end_time: The end_time of this VideoV1Room.
        :param large_room: The large_room of this VideoV1Room.
        :param links: The links of this VideoV1Room.
        :param max_concurrent_published_tracks: The max_concurrent_published_tracks of this VideoV1Room.
        :param max_participant_duration: The max_participant_duration of this VideoV1Room.
        :param max_participants: The max_participants of this VideoV1Room.
        :param media_region: The media_region of this VideoV1Room.
        :param record_participants_on_connect: The record_participants_on_connect of this VideoV1Room.
        :param sid: The sid of this VideoV1Room.
        :param status: The status of this VideoV1Room.
        :param status_callback: The status_callback of this VideoV1Room.
        :param status_callback_method: The status_callback_method of this VideoV1Room.
        :param type: The type of this VideoV1Room.
        :param unique_name: The unique_name of this VideoV1Room.
        :param unused_room_timeout: The unused_room_timeout of this VideoV1Room.
        :param url: The url of this VideoV1Room.
        :param video_codecs: The video_codecs of this VideoV1Room.
        """
        self.openapi_types = {
            'account_sid': str,
            'audio_only': bool,
            'date_created': datetime,
            'date_updated': datetime,
            'duration': int,
            'empty_room_timeout': int,
            'enable_turn': bool,
            'end_time': datetime,
            'large_room': bool,
            'links': object,
            'max_concurrent_published_tracks': int,
            'max_participant_duration': int,
            'max_participants': int,
            'media_region': str,
            'record_participants_on_connect': bool,
            'sid': str,
            'status': RoomEnumRoomStatus,
            'status_callback': str,
            'status_callback_method': str,
            'type': RoomEnumRoomType,
            'unique_name': str,
            'unused_room_timeout': int,
            'url': str,
            'video_codecs': List[RoomEnumVideoCodec]
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'audio_only': 'audio_only',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'duration': 'duration',
            'empty_room_timeout': 'empty_room_timeout',
            'enable_turn': 'enable_turn',
            'end_time': 'end_time',
            'large_room': 'large_room',
            'links': 'links',
            'max_concurrent_published_tracks': 'max_concurrent_published_tracks',
            'max_participant_duration': 'max_participant_duration',
            'max_participants': 'max_participants',
            'media_region': 'media_region',
            'record_participants_on_connect': 'record_participants_on_connect',
            'sid': 'sid',
            'status': 'status',
            'status_callback': 'status_callback',
            'status_callback_method': 'status_callback_method',
            'type': 'type',
            'unique_name': 'unique_name',
            'unused_room_timeout': 'unused_room_timeout',
            'url': 'url',
            'video_codecs': 'video_codecs'
        }

        self._account_sid = account_sid
        self._audio_only = audio_only
        self._date_created = date_created
        self._date_updated = date_updated
        self._duration = duration
        self._empty_room_timeout = empty_room_timeout
        self._enable_turn = enable_turn
        self._end_time = end_time
        self._large_room = large_room
        self._links = links
        self._max_concurrent_published_tracks = max_concurrent_published_tracks
        self._max_participant_duration = max_participant_duration
        self._max_participants = max_participants
        self._media_region = media_region
        self._record_participants_on_connect = record_participants_on_connect
        self._sid = sid
        self._status = status
        self._status_callback = status_callback
        self._status_callback_method = status_callback_method
        self._type = type
        self._unique_name = unique_name
        self._unused_room_timeout = unused_room_timeout
        self._url = url
        self._video_codecs = video_codecs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoV1Room':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video.v1.room of this VideoV1Room.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VideoV1Room.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Room resource.

        :return: The account_sid of this VideoV1Room.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VideoV1Room.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Room resource.

        :param account_sid: The account_sid of this VideoV1Room.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def audio_only(self):
        """Gets the audio_only of this VideoV1Room.

        When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only.

        :return: The audio_only of this VideoV1Room.
        :rtype: bool
        """
        return self._audio_only

    @audio_only.setter
    def audio_only(self, audio_only):
        """Sets the audio_only of this VideoV1Room.

        When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only.

        :param audio_only: The audio_only of this VideoV1Room.
        :type audio_only: bool
        """

        self._audio_only = audio_only

    @property
    def date_created(self):
        """Gets the date_created of this VideoV1Room.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VideoV1Room.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VideoV1Room.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VideoV1Room.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this VideoV1Room.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this VideoV1Room.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this VideoV1Room.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this VideoV1Room.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def duration(self):
        """Gets the duration of this VideoV1Room.

        The duration of the room in seconds.

        :return: The duration of this VideoV1Room.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoV1Room.

        The duration of the room in seconds.

        :param duration: The duration of this VideoV1Room.
        :type duration: int
        """

        self._duration = duration

    @property
    def empty_room_timeout(self):
        """Gets the empty_room_timeout of this VideoV1Room.

        Specifies how long (in minutes) a room will remain active after last participant leaves. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.

        :return: The empty_room_timeout of this VideoV1Room.
        :rtype: int
        """
        return self._empty_room_timeout

    @empty_room_timeout.setter
    def empty_room_timeout(self, empty_room_timeout):
        """Sets the empty_room_timeout of this VideoV1Room.

        Specifies how long (in minutes) a room will remain active after last participant leaves. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.

        :param empty_room_timeout: The empty_room_timeout of this VideoV1Room.
        :type empty_room_timeout: int
        """

        self._empty_room_timeout = empty_room_timeout

    @property
    def enable_turn(self):
        """Gets the enable_turn of this VideoV1Room.

        Deprecated, now always considered to be true.

        :return: The enable_turn of this VideoV1Room.
        :rtype: bool
        """
        return self._enable_turn

    @enable_turn.setter
    def enable_turn(self, enable_turn):
        """Sets the enable_turn of this VideoV1Room.

        Deprecated, now always considered to be true.

        :param enable_turn: The enable_turn of this VideoV1Room.
        :type enable_turn: bool
        """

        self._enable_turn = enable_turn

    @property
    def end_time(self):
        """Gets the end_time of this VideoV1Room.

        The UTC end time of the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.

        :return: The end_time of this VideoV1Room.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this VideoV1Room.

        The UTC end time of the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.

        :param end_time: The end_time of this VideoV1Room.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def large_room(self):
        """Gets the large_room of this VideoV1Room.

        Indicates if this is a large room.

        :return: The large_room of this VideoV1Room.
        :rtype: bool
        """
        return self._large_room

    @large_room.setter
    def large_room(self, large_room):
        """Sets the large_room of this VideoV1Room.

        Indicates if this is a large room.

        :param large_room: The large_room of this VideoV1Room.
        :type large_room: bool
        """

        self._large_room = large_room

    @property
    def links(self):
        """Gets the links of this VideoV1Room.

        The URLs of related resources.

        :return: The links of this VideoV1Room.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VideoV1Room.

        The URLs of related resources.

        :param links: The links of this VideoV1Room.
        :type links: object
        """

        self._links = links

    @property
    def max_concurrent_published_tracks(self):
        """Gets the max_concurrent_published_tracks of this VideoV1Room.

        The maximum number of published audio, video, and data tracks all participants combined are allowed to publish in the room at the same time. Check [Programmable Video Limits](https://www.twilio.com/docs/video/programmable-video-limits) for more details. If it is set to 0 it means unconstrained.

        :return: The max_concurrent_published_tracks of this VideoV1Room.
        :rtype: int
        """
        return self._max_concurrent_published_tracks

    @max_concurrent_published_tracks.setter
    def max_concurrent_published_tracks(self, max_concurrent_published_tracks):
        """Sets the max_concurrent_published_tracks of this VideoV1Room.

        The maximum number of published audio, video, and data tracks all participants combined are allowed to publish in the room at the same time. Check [Programmable Video Limits](https://www.twilio.com/docs/video/programmable-video-limits) for more details. If it is set to 0 it means unconstrained.

        :param max_concurrent_published_tracks: The max_concurrent_published_tracks of this VideoV1Room.
        :type max_concurrent_published_tracks: int
        """

        self._max_concurrent_published_tracks = max_concurrent_published_tracks

    @property
    def max_participant_duration(self):
        """Gets the max_participant_duration of this VideoV1Room.

        The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours).

        :return: The max_participant_duration of this VideoV1Room.
        :rtype: int
        """
        return self._max_participant_duration

    @max_participant_duration.setter
    def max_participant_duration(self, max_participant_duration):
        """Sets the max_participant_duration of this VideoV1Room.

        The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours).

        :param max_participant_duration: The max_participant_duration of this VideoV1Room.
        :type max_participant_duration: int
        """

        self._max_participant_duration = max_participant_duration

    @property
    def max_participants(self):
        """Gets the max_participants of this VideoV1Room.

        The maximum number of concurrent Participants allowed in the room. 

        :return: The max_participants of this VideoV1Room.
        :rtype: int
        """
        return self._max_participants

    @max_participants.setter
    def max_participants(self, max_participants):
        """Sets the max_participants of this VideoV1Room.

        The maximum number of concurrent Participants allowed in the room. 

        :param max_participants: The max_participants of this VideoV1Room.
        :type max_participants: int
        """

        self._max_participants = max_participants

    @property
    def media_region(self):
        """Gets the media_region of this VideoV1Room.

        The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-addresses#media-servers). ***This feature is not available in `peer-to-peer` rooms.***

        :return: The media_region of this VideoV1Room.
        :rtype: str
        """
        return self._media_region

    @media_region.setter
    def media_region(self, media_region):
        """Sets the media_region of this VideoV1Room.

        The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-addresses#media-servers). ***This feature is not available in `peer-to-peer` rooms.***

        :param media_region: The media_region of this VideoV1Room.
        :type media_region: str
        """

        self._media_region = media_region

    @property
    def record_participants_on_connect(self):
        """Gets the record_participants_on_connect of this VideoV1Room.

        Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***

        :return: The record_participants_on_connect of this VideoV1Room.
        :rtype: bool
        """
        return self._record_participants_on_connect

    @record_participants_on_connect.setter
    def record_participants_on_connect(self, record_participants_on_connect):
        """Sets the record_participants_on_connect of this VideoV1Room.

        Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***

        :param record_participants_on_connect: The record_participants_on_connect of this VideoV1Room.
        :type record_participants_on_connect: bool
        """

        self._record_participants_on_connect = record_participants_on_connect

    @property
    def sid(self):
        """Gets the sid of this VideoV1Room.

        The unique string that we created to identify the Room resource.

        :return: The sid of this VideoV1Room.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VideoV1Room.

        The unique string that we created to identify the Room resource.

        :param sid: The sid of this VideoV1Room.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^RM[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^RM[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this VideoV1Room.


        :return: The status of this VideoV1Room.
        :rtype: RoomEnumRoomStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VideoV1Room.


        :param status: The status of this VideoV1Room.
        :type status: RoomEnumRoomStatus
        """

        self._status = status

    @property
    def status_callback(self):
        """Gets the status_callback of this VideoV1Room.

        The URL we call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.

        :return: The status_callback of this VideoV1Room.
        :rtype: str
        """
        return self._status_callback

    @status_callback.setter
    def status_callback(self, status_callback):
        """Sets the status_callback of this VideoV1Room.

        The URL we call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.

        :param status_callback: The status_callback of this VideoV1Room.
        :type status_callback: str
        """

        self._status_callback = status_callback

    @property
    def status_callback_method(self):
        """Gets the status_callback_method of this VideoV1Room.

        The HTTP method we use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.

        :return: The status_callback_method of this VideoV1Room.
        :rtype: str
        """
        return self._status_callback_method

    @status_callback_method.setter
    def status_callback_method(self, status_callback_method):
        """Sets the status_callback_method of this VideoV1Room.

        The HTTP method we use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.

        :param status_callback_method: The status_callback_method of this VideoV1Room.
        :type status_callback_method: str
        """
        allowed_values = [None,"HEAD", "GET", "POST", "PATCH", "PUT", "DELETE"]  # noqa: E501
        if status_callback_method not in allowed_values:
            raise ValueError(
                "Invalid value for `status_callback_method` ({0}), must be one of {1}"
                .format(status_callback_method, allowed_values)
            )

        self._status_callback_method = status_callback_method

    @property
    def type(self):
        """Gets the type of this VideoV1Room.


        :return: The type of this VideoV1Room.
        :rtype: RoomEnumRoomType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VideoV1Room.


        :param type: The type of this VideoV1Room.
        :type type: RoomEnumRoomType
        """

        self._type = type

    @property
    def unique_name(self):
        """Gets the unique_name of this VideoV1Room.

        An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.

        :return: The unique_name of this VideoV1Room.
        :rtype: str
        """
        return self._unique_name

    @unique_name.setter
    def unique_name(self, unique_name):
        """Sets the unique_name of this VideoV1Room.

        An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.

        :param unique_name: The unique_name of this VideoV1Room.
        :type unique_name: str
        """

        self._unique_name = unique_name

    @property
    def unused_room_timeout(self):
        """Gets the unused_room_timeout of this VideoV1Room.

        Specifies how long (in minutes) a room will remain active if no one joins. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.

        :return: The unused_room_timeout of this VideoV1Room.
        :rtype: int
        """
        return self._unused_room_timeout

    @unused_room_timeout.setter
    def unused_room_timeout(self, unused_room_timeout):
        """Sets the unused_room_timeout of this VideoV1Room.

        Specifies how long (in minutes) a room will remain active if no one joins. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.

        :param unused_room_timeout: The unused_room_timeout of this VideoV1Room.
        :type unused_room_timeout: int
        """

        self._unused_room_timeout = unused_room_timeout

    @property
    def url(self):
        """Gets the url of this VideoV1Room.

        The absolute URL of the resource.

        :return: The url of this VideoV1Room.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VideoV1Room.

        The absolute URL of the resource.

        :param url: The url of this VideoV1Room.
        :type url: str
        """

        self._url = url

    @property
    def video_codecs(self):
        """Gets the video_codecs of this VideoV1Room.

        An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***

        :return: The video_codecs of this VideoV1Room.
        :rtype: List[RoomEnumVideoCodec]
        """
        return self._video_codecs

    @video_codecs.setter
    def video_codecs(self, video_codecs):
        """Sets the video_codecs of this VideoV1Room.

        An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***

        :param video_codecs: The video_codecs of this VideoV1Room.
        :type video_codecs: List[RoomEnumVideoCodec]
        """

        self._video_codecs = video_codecs
