# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.room_recording_enum_codec import RoomRecordingEnumCodec
from openapi_server.models.room_recording_enum_format import RoomRecordingEnumFormat
from openapi_server.models.room_recording_enum_status import RoomRecordingEnumStatus
from openapi_server.models.room_recording_enum_type import RoomRecordingEnumType
import re
from openapi_server import util


class VideoV1RoomRoomRecording(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, codec: RoomRecordingEnumCodec=None, container_format: RoomRecordingEnumFormat=None, date_created: datetime=None, duration: int=None, grouping_sids: object=None, links: object=None, media_external_location: str=None, offset: int=None, room_sid: str=None, sid: str=None, size: int=None, source_sid: str=None, status: RoomRecordingEnumStatus=None, track_name: str=None, type: RoomRecordingEnumType=None, url: str=None):
        """VideoV1RoomRoomRecording - a model defined in OpenAPI

        :param account_sid: The account_sid of this VideoV1RoomRoomRecording.
        :param codec: The codec of this VideoV1RoomRoomRecording.
        :param container_format: The container_format of this VideoV1RoomRoomRecording.
        :param date_created: The date_created of this VideoV1RoomRoomRecording.
        :param duration: The duration of this VideoV1RoomRoomRecording.
        :param grouping_sids: The grouping_sids of this VideoV1RoomRoomRecording.
        :param links: The links of this VideoV1RoomRoomRecording.
        :param media_external_location: The media_external_location of this VideoV1RoomRoomRecording.
        :param offset: The offset of this VideoV1RoomRoomRecording.
        :param room_sid: The room_sid of this VideoV1RoomRoomRecording.
        :param sid: The sid of this VideoV1RoomRoomRecording.
        :param size: The size of this VideoV1RoomRoomRecording.
        :param source_sid: The source_sid of this VideoV1RoomRoomRecording.
        :param status: The status of this VideoV1RoomRoomRecording.
        :param track_name: The track_name of this VideoV1RoomRoomRecording.
        :param type: The type of this VideoV1RoomRoomRecording.
        :param url: The url of this VideoV1RoomRoomRecording.
        """
        self.openapi_types = {
            'account_sid': str,
            'codec': RoomRecordingEnumCodec,
            'container_format': RoomRecordingEnumFormat,
            'date_created': datetime,
            'duration': int,
            'grouping_sids': object,
            'links': object,
            'media_external_location': str,
            'offset': int,
            'room_sid': str,
            'sid': str,
            'size': int,
            'source_sid': str,
            'status': RoomRecordingEnumStatus,
            'track_name': str,
            'type': RoomRecordingEnumType,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'codec': 'codec',
            'container_format': 'container_format',
            'date_created': 'date_created',
            'duration': 'duration',
            'grouping_sids': 'grouping_sids',
            'links': 'links',
            'media_external_location': 'media_external_location',
            'offset': 'offset',
            'room_sid': 'room_sid',
            'sid': 'sid',
            'size': 'size',
            'source_sid': 'source_sid',
            'status': 'status',
            'track_name': 'track_name',
            'type': 'type',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._codec = codec
        self._container_format = container_format
        self._date_created = date_created
        self._duration = duration
        self._grouping_sids = grouping_sids
        self._links = links
        self._media_external_location = media_external_location
        self._offset = offset
        self._room_sid = room_sid
        self._sid = sid
        self._size = size
        self._source_sid = source_sid
        self._status = status
        self._track_name = track_name
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoV1RoomRoomRecording':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video.v1.room.room_recording of this VideoV1RoomRoomRecording.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VideoV1RoomRoomRecording.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RoomRecording resource.

        :return: The account_sid of this VideoV1RoomRoomRecording.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VideoV1RoomRoomRecording.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RoomRecording resource.

        :param account_sid: The account_sid of this VideoV1RoomRoomRecording.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def codec(self):
        """Gets the codec of this VideoV1RoomRoomRecording.


        :return: The codec of this VideoV1RoomRoomRecording.
        :rtype: RoomRecordingEnumCodec
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this VideoV1RoomRoomRecording.


        :param codec: The codec of this VideoV1RoomRoomRecording.
        :type codec: RoomRecordingEnumCodec
        """

        self._codec = codec

    @property
    def container_format(self):
        """Gets the container_format of this VideoV1RoomRoomRecording.


        :return: The container_format of this VideoV1RoomRoomRecording.
        :rtype: RoomRecordingEnumFormat
        """
        return self._container_format

    @container_format.setter
    def container_format(self, container_format):
        """Sets the container_format of this VideoV1RoomRoomRecording.


        :param container_format: The container_format of this VideoV1RoomRoomRecording.
        :type container_format: RoomRecordingEnumFormat
        """

        self._container_format = container_format

    @property
    def date_created(self):
        """Gets the date_created of this VideoV1RoomRoomRecording.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VideoV1RoomRoomRecording.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VideoV1RoomRoomRecording.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VideoV1RoomRoomRecording.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def duration(self):
        """Gets the duration of this VideoV1RoomRoomRecording.

        The duration of the recording rounded to the nearest second. Sub-second duration tracks have a `duration` of 1 second

        :return: The duration of this VideoV1RoomRoomRecording.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoV1RoomRoomRecording.

        The duration of the recording rounded to the nearest second. Sub-second duration tracks have a `duration` of 1 second

        :param duration: The duration of this VideoV1RoomRoomRecording.
        :type duration: int
        """

        self._duration = duration

    @property
    def grouping_sids(self):
        """Gets the grouping_sids of this VideoV1RoomRoomRecording.

        A list of SIDs related to the Recording. Includes the `room_sid` and `participant_sid`.

        :return: The grouping_sids of this VideoV1RoomRoomRecording.
        :rtype: object
        """
        return self._grouping_sids

    @grouping_sids.setter
    def grouping_sids(self, grouping_sids):
        """Sets the grouping_sids of this VideoV1RoomRoomRecording.

        A list of SIDs related to the Recording. Includes the `room_sid` and `participant_sid`.

        :param grouping_sids: The grouping_sids of this VideoV1RoomRoomRecording.
        :type grouping_sids: object
        """

        self._grouping_sids = grouping_sids

    @property
    def links(self):
        """Gets the links of this VideoV1RoomRoomRecording.

        The URLs of related resources.

        :return: The links of this VideoV1RoomRoomRecording.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this VideoV1RoomRoomRecording.

        The URLs of related resources.

        :param links: The links of this VideoV1RoomRoomRecording.
        :type links: object
        """

        self._links = links

    @property
    def media_external_location(self):
        """Gets the media_external_location of this VideoV1RoomRoomRecording.

        The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.

        :return: The media_external_location of this VideoV1RoomRoomRecording.
        :rtype: str
        """
        return self._media_external_location

    @media_external_location.setter
    def media_external_location(self, media_external_location):
        """Sets the media_external_location of this VideoV1RoomRoomRecording.

        The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.

        :param media_external_location: The media_external_location of this VideoV1RoomRoomRecording.
        :type media_external_location: str
        """

        self._media_external_location = media_external_location

    @property
    def offset(self):
        """Gets the offset of this VideoV1RoomRoomRecording.

        The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.

        :return: The offset of this VideoV1RoomRoomRecording.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this VideoV1RoomRoomRecording.

        The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.

        :param offset: The offset of this VideoV1RoomRoomRecording.
        :type offset: int
        """

        self._offset = offset

    @property
    def room_sid(self):
        """Gets the room_sid of this VideoV1RoomRoomRecording.

        The SID of the Room resource the recording is associated with.

        :return: The room_sid of this VideoV1RoomRoomRecording.
        :rtype: str
        """
        return self._room_sid

    @room_sid.setter
    def room_sid(self, room_sid):
        """Sets the room_sid of this VideoV1RoomRoomRecording.

        The SID of the Room resource the recording is associated with.

        :param room_sid: The room_sid of this VideoV1RoomRoomRecording.
        :type room_sid: str
        """
        if room_sid is not None and len(room_sid) > 34:
            raise ValueError("Invalid value for `room_sid`, length must be less than or equal to `34`")
        if room_sid is not None and len(room_sid) < 34:
            raise ValueError("Invalid value for `room_sid`, length must be greater than or equal to `34`")
        if room_sid is not None and not re.search(r'^RM[0-9a-fA-F]{32}$', room_sid):
            raise ValueError("Invalid value for `room_sid`, must be a follow pattern or equal to `/^RM[0-9a-fA-F]{32}$/`")

        self._room_sid = room_sid

    @property
    def sid(self):
        """Gets the sid of this VideoV1RoomRoomRecording.

        The unique string that we created to identify the RoomRecording resource.

        :return: The sid of this VideoV1RoomRoomRecording.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this VideoV1RoomRoomRecording.

        The unique string that we created to identify the RoomRecording resource.

        :param sid: The sid of this VideoV1RoomRoomRecording.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^RT[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^RT[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def size(self):
        """Gets the size of this VideoV1RoomRoomRecording.

        The size of the recorded track in bytes.

        :return: The size of this VideoV1RoomRoomRecording.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VideoV1RoomRoomRecording.

        The size of the recorded track in bytes.

        :param size: The size of this VideoV1RoomRoomRecording.
        :type size: int
        """

        self._size = size

    @property
    def source_sid(self):
        """Gets the source_sid of this VideoV1RoomRoomRecording.

        The SID of the recording source. For a Room Recording, this value is a `track_sid`.

        :return: The source_sid of this VideoV1RoomRoomRecording.
        :rtype: str
        """
        return self._source_sid

    @source_sid.setter
    def source_sid(self, source_sid):
        """Sets the source_sid of this VideoV1RoomRoomRecording.

        The SID of the recording source. For a Room Recording, this value is a `track_sid`.

        :param source_sid: The source_sid of this VideoV1RoomRoomRecording.
        :type source_sid: str
        """
        if source_sid is not None and len(source_sid) > 34:
            raise ValueError("Invalid value for `source_sid`, length must be less than or equal to `34`")
        if source_sid is not None and len(source_sid) < 34:
            raise ValueError("Invalid value for `source_sid`, length must be greater than or equal to `34`")
        if source_sid is not None and not re.search(r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', source_sid):
            raise ValueError("Invalid value for `source_sid`, must be a follow pattern or equal to `/^[a-zA-Z]{2}[0-9a-fA-F]{32}$/`")

        self._source_sid = source_sid

    @property
    def status(self):
        """Gets the status of this VideoV1RoomRoomRecording.


        :return: The status of this VideoV1RoomRoomRecording.
        :rtype: RoomRecordingEnumStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VideoV1RoomRoomRecording.


        :param status: The status of this VideoV1RoomRoomRecording.
        :type status: RoomRecordingEnumStatus
        """

        self._status = status

    @property
    def track_name(self):
        """Gets the track_name of this VideoV1RoomRoomRecording.

        The name that was given to the source track of the recording. If no name is given, the `source_sid` is used.

        :return: The track_name of this VideoV1RoomRoomRecording.
        :rtype: str
        """
        return self._track_name

    @track_name.setter
    def track_name(self, track_name):
        """Sets the track_name of this VideoV1RoomRoomRecording.

        The name that was given to the source track of the recording. If no name is given, the `source_sid` is used.

        :param track_name: The track_name of this VideoV1RoomRoomRecording.
        :type track_name: str
        """

        self._track_name = track_name

    @property
    def type(self):
        """Gets the type of this VideoV1RoomRoomRecording.


        :return: The type of this VideoV1RoomRoomRecording.
        :rtype: RoomRecordingEnumType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VideoV1RoomRoomRecording.


        :param type: The type of this VideoV1RoomRoomRecording.
        :type type: RoomRecordingEnumType
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this VideoV1RoomRoomRecording.

        The absolute URL of the resource.

        :return: The url of this VideoV1RoomRoomRecording.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VideoV1RoomRoomRecording.

        The absolute URL of the resource.

        :param url: The url of this VideoV1RoomRoomRecording.
        :type url: str
        """

        self._url = url
