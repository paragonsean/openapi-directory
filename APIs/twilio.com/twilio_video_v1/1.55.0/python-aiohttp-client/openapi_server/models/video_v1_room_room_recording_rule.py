# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_v1_room_room_recording_rule_rules_inner import VideoV1RoomRoomRecordingRuleRulesInner
import re
from openapi_server import util


class VideoV1RoomRoomRecordingRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_created: datetime=None, date_updated: datetime=None, room_sid: str=None, rules: List[VideoV1RoomRoomRecordingRuleRulesInner]=None):
        """VideoV1RoomRoomRecordingRule - a model defined in OpenAPI

        :param date_created: The date_created of this VideoV1RoomRoomRecordingRule.
        :param date_updated: The date_updated of this VideoV1RoomRoomRecordingRule.
        :param room_sid: The room_sid of this VideoV1RoomRoomRecordingRule.
        :param rules: The rules of this VideoV1RoomRoomRecordingRule.
        """
        self.openapi_types = {
            'date_created': datetime,
            'date_updated': datetime,
            'room_sid': str,
            'rules': List[VideoV1RoomRoomRecordingRuleRulesInner]
        }

        self.attribute_map = {
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'room_sid': 'room_sid',
            'rules': 'rules'
        }

        self._date_created = date_created
        self._date_updated = date_updated
        self._room_sid = room_sid
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoV1RoomRoomRecordingRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video.v1.room.room_recording_rule of this VideoV1RoomRoomRecordingRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_created(self):
        """Gets the date_created of this VideoV1RoomRoomRecordingRule.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_created of this VideoV1RoomRoomRecordingRule.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this VideoV1RoomRoomRecordingRule.

        The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_created: The date_created of this VideoV1RoomRoomRecordingRule.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this VideoV1RoomRoomRecordingRule.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :return: The date_updated of this VideoV1RoomRoomRecordingRule.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this VideoV1RoomRoomRecordingRule.

        The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.

        :param date_updated: The date_updated of this VideoV1RoomRoomRecordingRule.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def room_sid(self):
        """Gets the room_sid of this VideoV1RoomRoomRecordingRule.

        The SID of the Room resource for the Recording Rules

        :return: The room_sid of this VideoV1RoomRoomRecordingRule.
        :rtype: str
        """
        return self._room_sid

    @room_sid.setter
    def room_sid(self, room_sid):
        """Sets the room_sid of this VideoV1RoomRoomRecordingRule.

        The SID of the Room resource for the Recording Rules

        :param room_sid: The room_sid of this VideoV1RoomRoomRecordingRule.
        :type room_sid: str
        """
        if room_sid is not None and len(room_sid) > 34:
            raise ValueError("Invalid value for `room_sid`, length must be less than or equal to `34`")
        if room_sid is not None and len(room_sid) < 34:
            raise ValueError("Invalid value for `room_sid`, length must be greater than or equal to `34`")
        if room_sid is not None and not re.search(r'^RM[0-9a-fA-F]{32}$', room_sid):
            raise ValueError("Invalid value for `room_sid`, must be a follow pattern or equal to `/^RM[0-9a-fA-F]{32}$/`")

        self._room_sid = room_sid

    @property
    def rules(self):
        """Gets the rules of this VideoV1RoomRoomRecordingRule.

        A collection of Recording Rules that describe how to include or exclude matching tracks for recording

        :return: The rules of this VideoV1RoomRoomRecordingRule.
        :rtype: List[VideoV1RoomRoomRecordingRuleRulesInner]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this VideoV1RoomRoomRecordingRule.

        A collection of Recording Rules that describe how to include or exclude matching tracks for recording

        :param rules: The rules of this VideoV1RoomRoomRecordingRule.
        :type rules: List[VideoV1RoomRoomRecordingRuleRulesInner]
        """

        self._rules = rules
