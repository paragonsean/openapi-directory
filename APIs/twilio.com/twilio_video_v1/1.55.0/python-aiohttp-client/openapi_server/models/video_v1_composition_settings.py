# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class VideoV1CompositionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, aws_credentials_sid: str=None, aws_s3_url: str=None, aws_storage_enabled: bool=None, encryption_enabled: bool=None, encryption_key_sid: str=None, friendly_name: str=None, url: str=None):
        """VideoV1CompositionSettings - a model defined in OpenAPI

        :param account_sid: The account_sid of this VideoV1CompositionSettings.
        :param aws_credentials_sid: The aws_credentials_sid of this VideoV1CompositionSettings.
        :param aws_s3_url: The aws_s3_url of this VideoV1CompositionSettings.
        :param aws_storage_enabled: The aws_storage_enabled of this VideoV1CompositionSettings.
        :param encryption_enabled: The encryption_enabled of this VideoV1CompositionSettings.
        :param encryption_key_sid: The encryption_key_sid of this VideoV1CompositionSettings.
        :param friendly_name: The friendly_name of this VideoV1CompositionSettings.
        :param url: The url of this VideoV1CompositionSettings.
        """
        self.openapi_types = {
            'account_sid': str,
            'aws_credentials_sid': str,
            'aws_s3_url': str,
            'aws_storage_enabled': bool,
            'encryption_enabled': bool,
            'encryption_key_sid': str,
            'friendly_name': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'aws_credentials_sid': 'aws_credentials_sid',
            'aws_s3_url': 'aws_s3_url',
            'aws_storage_enabled': 'aws_storage_enabled',
            'encryption_enabled': 'encryption_enabled',
            'encryption_key_sid': 'encryption_key_sid',
            'friendly_name': 'friendly_name',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._aws_credentials_sid = aws_credentials_sid
        self._aws_s3_url = aws_s3_url
        self._aws_storage_enabled = aws_storage_enabled
        self._encryption_enabled = encryption_enabled
        self._encryption_key_sid = encryption_key_sid
        self._friendly_name = friendly_name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoV1CompositionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video.v1.composition_settings of this VideoV1CompositionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this VideoV1CompositionSettings.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionSettings resource.

        :return: The account_sid of this VideoV1CompositionSettings.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this VideoV1CompositionSettings.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionSettings resource.

        :param account_sid: The account_sid of this VideoV1CompositionSettings.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def aws_credentials_sid(self):
        """Gets the aws_credentials_sid of this VideoV1CompositionSettings.

        The SID of the stored Credential resource.

        :return: The aws_credentials_sid of this VideoV1CompositionSettings.
        :rtype: str
        """
        return self._aws_credentials_sid

    @aws_credentials_sid.setter
    def aws_credentials_sid(self, aws_credentials_sid):
        """Sets the aws_credentials_sid of this VideoV1CompositionSettings.

        The SID of the stored Credential resource.

        :param aws_credentials_sid: The aws_credentials_sid of this VideoV1CompositionSettings.
        :type aws_credentials_sid: str
        """
        if aws_credentials_sid is not None and len(aws_credentials_sid) > 34:
            raise ValueError("Invalid value for `aws_credentials_sid`, length must be less than or equal to `34`")
        if aws_credentials_sid is not None and len(aws_credentials_sid) < 34:
            raise ValueError("Invalid value for `aws_credentials_sid`, length must be greater than or equal to `34`")
        if aws_credentials_sid is not None and not re.search(r'^CR[0-9a-fA-F]{32}$', aws_credentials_sid):
            raise ValueError("Invalid value for `aws_credentials_sid`, must be a follow pattern or equal to `/^CR[0-9a-fA-F]{32}$/`")

        self._aws_credentials_sid = aws_credentials_sid

    @property
    def aws_s3_url(self):
        """Gets the aws_s3_url of this VideoV1CompositionSettings.

        The URL of the AWS S3 bucket where the compositions are stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/compositions`, where `compositions` is the path in which you want the compositions to be stored. This URL accepts only URI-valid characters, as described in the [RFC 3986](https://tools.ietf.org/html/rfc3986#section-2).

        :return: The aws_s3_url of this VideoV1CompositionSettings.
        :rtype: str
        """
        return self._aws_s3_url

    @aws_s3_url.setter
    def aws_s3_url(self, aws_s3_url):
        """Sets the aws_s3_url of this VideoV1CompositionSettings.

        The URL of the AWS S3 bucket where the compositions are stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/compositions`, where `compositions` is the path in which you want the compositions to be stored. This URL accepts only URI-valid characters, as described in the [RFC 3986](https://tools.ietf.org/html/rfc3986#section-2).

        :param aws_s3_url: The aws_s3_url of this VideoV1CompositionSettings.
        :type aws_s3_url: str
        """

        self._aws_s3_url = aws_s3_url

    @property
    def aws_storage_enabled(self):
        """Gets the aws_storage_enabled of this VideoV1CompositionSettings.

        Whether all compositions are written to the `aws_s3_url`. When `false`, all compositions are stored in our cloud.

        :return: The aws_storage_enabled of this VideoV1CompositionSettings.
        :rtype: bool
        """
        return self._aws_storage_enabled

    @aws_storage_enabled.setter
    def aws_storage_enabled(self, aws_storage_enabled):
        """Sets the aws_storage_enabled of this VideoV1CompositionSettings.

        Whether all compositions are written to the `aws_s3_url`. When `false`, all compositions are stored in our cloud.

        :param aws_storage_enabled: The aws_storage_enabled of this VideoV1CompositionSettings.
        :type aws_storage_enabled: bool
        """

        self._aws_storage_enabled = aws_storage_enabled

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this VideoV1CompositionSettings.

        Whether all compositions are stored in an encrypted form. The default is `false`.

        :return: The encryption_enabled of this VideoV1CompositionSettings.
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this VideoV1CompositionSettings.

        Whether all compositions are stored in an encrypted form. The default is `false`.

        :param encryption_enabled: The encryption_enabled of this VideoV1CompositionSettings.
        :type encryption_enabled: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def encryption_key_sid(self):
        """Gets the encryption_key_sid of this VideoV1CompositionSettings.

        The SID of the Public Key resource used for encryption.

        :return: The encryption_key_sid of this VideoV1CompositionSettings.
        :rtype: str
        """
        return self._encryption_key_sid

    @encryption_key_sid.setter
    def encryption_key_sid(self, encryption_key_sid):
        """Sets the encryption_key_sid of this VideoV1CompositionSettings.

        The SID of the Public Key resource used for encryption.

        :param encryption_key_sid: The encryption_key_sid of this VideoV1CompositionSettings.
        :type encryption_key_sid: str
        """
        if encryption_key_sid is not None and len(encryption_key_sid) > 34:
            raise ValueError("Invalid value for `encryption_key_sid`, length must be less than or equal to `34`")
        if encryption_key_sid is not None and len(encryption_key_sid) < 34:
            raise ValueError("Invalid value for `encryption_key_sid`, length must be greater than or equal to `34`")
        if encryption_key_sid is not None and not re.search(r'^CR[0-9a-fA-F]{32}$', encryption_key_sid):
            raise ValueError("Invalid value for `encryption_key_sid`, must be a follow pattern or equal to `/^CR[0-9a-fA-F]{32}$/`")

        self._encryption_key_sid = encryption_key_sid

    @property
    def friendly_name(self):
        """Gets the friendly_name of this VideoV1CompositionSettings.

        The string that you assigned to describe the resource and that will be shown in the console

        :return: The friendly_name of this VideoV1CompositionSettings.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this VideoV1CompositionSettings.

        The string that you assigned to describe the resource and that will be shown in the console

        :param friendly_name: The friendly_name of this VideoV1CompositionSettings.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def url(self):
        """Gets the url of this VideoV1CompositionSettings.

        The absolute URL of the resource.

        :return: The url of this VideoV1CompositionSettings.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VideoV1CompositionSettings.

        The absolute URL of the resource.

        :param url: The url of this VideoV1CompositionSettings.
        :type url: str
        """

        self._url = url
