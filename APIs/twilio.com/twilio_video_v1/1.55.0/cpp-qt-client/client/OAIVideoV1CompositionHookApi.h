/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideoV1CompositionHookApi_H
#define OAI_OAIVideoV1CompositionHookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComposition_hook_enum_format.h"
#include "OAIListCompositionHookResponse.h"
#include "OAIVideo_v1_composition_hook.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideoV1CompositionHookApi : public QObject {
    Q_OBJECT

public:
    OAIVideoV1CompositionHookApi(const int timeOut = 0);
    ~OAIVideoV1CompositionHookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  friendly_name QString [required]
    * @param[in]  audio_sources QList<QString> [optional]
    * @param[in]  audio_sources_excluded QList<QString> [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  format OAIComposition_hook_enum_format [optional]
    * @param[in]  resolution QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  trim bool [optional]
    * @param[in]  video_layout QJsonValue [optional]
    */
    virtual void createCompositionHook(const QString &friendly_name, const ::OpenAPI::OptionalParam<QList<QString>> &audio_sources = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &audio_sources_excluded = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIComposition_hook_enum_format> &format = ::OpenAPI::OptionalParam<OAIComposition_hook_enum_format>(), const ::OpenAPI::OptionalParam<QString> &resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &trim = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QJsonValue> &video_layout = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteCompositionHook(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchCompositionHook(const QString &sid);

    /**
    * @param[in]  enabled bool [optional]
    * @param[in]  date_created_after QDateTime [optional]
    * @param[in]  date_created_before QDateTime [optional]
    * @param[in]  friendly_name QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listCompositionHook(const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &friendly_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  friendly_name QString [required]
    * @param[in]  audio_sources QList<QString> [optional]
    * @param[in]  audio_sources_excluded QList<QString> [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  format OAIComposition_hook_enum_format [optional]
    * @param[in]  resolution QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  trim bool [optional]
    * @param[in]  video_layout QJsonValue [optional]
    */
    virtual void updateCompositionHook(const QString &sid, const QString &friendly_name, const ::OpenAPI::OptionalParam<QList<QString>> &audio_sources = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &audio_sources_excluded = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIComposition_hook_enum_format> &format = ::OpenAPI::OptionalParam<OAIComposition_hook_enum_format>(), const ::OpenAPI::OptionalParam<QString> &resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &trim = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QJsonValue> &video_layout = ::OpenAPI::OptionalParam<QJsonValue>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCompositionHookCallback(OAIHttpRequestWorker *worker);
    void deleteCompositionHookCallback(OAIHttpRequestWorker *worker);
    void fetchCompositionHookCallback(OAIHttpRequestWorker *worker);
    void listCompositionHookCallback(OAIHttpRequestWorker *worker);
    void updateCompositionHookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCompositionHookSignal(OAIVideo_v1_composition_hook summary);
    void deleteCompositionHookSignal();
    void fetchCompositionHookSignal(OAIVideo_v1_composition_hook summary);
    void listCompositionHookSignal(OAIListCompositionHookResponse summary);
    void updateCompositionHookSignal(OAIVideo_v1_composition_hook summary);


    void createCompositionHookSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_composition_hook summary);
    void deleteCompositionHookSignalFull(OAIHttpRequestWorker *worker);
    void fetchCompositionHookSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_composition_hook summary);
    void listCompositionHookSignalFull(OAIHttpRequestWorker *worker, OAIListCompositionHookResponse summary);
    void updateCompositionHookSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_composition_hook summary);

    Q_DECL_DEPRECATED_X("Use createCompositionHookSignalError() instead")
    void createCompositionHookSignalE(OAIVideo_v1_composition_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCompositionHookSignalError(OAIVideo_v1_composition_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCompositionHookSignalError() instead")
    void deleteCompositionHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCompositionHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCompositionHookSignalError() instead")
    void fetchCompositionHookSignalE(OAIVideo_v1_composition_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCompositionHookSignalError(OAIVideo_v1_composition_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCompositionHookSignalError() instead")
    void listCompositionHookSignalE(OAIListCompositionHookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCompositionHookSignalError(OAIListCompositionHookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCompositionHookSignalError() instead")
    void updateCompositionHookSignalE(OAIVideo_v1_composition_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCompositionHookSignalError(OAIVideo_v1_composition_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCompositionHookSignalErrorFull() instead")
    void createCompositionHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCompositionHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCompositionHookSignalErrorFull() instead")
    void deleteCompositionHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCompositionHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCompositionHookSignalErrorFull() instead")
    void fetchCompositionHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCompositionHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCompositionHookSignalErrorFull() instead")
    void listCompositionHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCompositionHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCompositionHookSignalErrorFull() instead")
    void updateCompositionHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCompositionHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
