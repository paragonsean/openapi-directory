/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideoV1CompositionApi_H
#define OAI_OAIVideoV1CompositionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComposition_enum_format.h"
#include "OAIComposition_enum_status.h"
#include "OAIListCompositionResponse.h"
#include "OAIVideo_v1_composition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideoV1CompositionApi : public QObject {
    Q_OBJECT

public:
    OAIVideoV1CompositionApi(const int timeOut = 0);
    ~OAIVideoV1CompositionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  room_sid QString [required]
    * @param[in]  audio_sources QList<QString> [optional]
    * @param[in]  audio_sources_excluded QList<QString> [optional]
    * @param[in]  format OAIComposition_enum_format [optional]
    * @param[in]  resolution QString [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  trim bool [optional]
    * @param[in]  video_layout QJsonValue [optional]
    */
    virtual void createComposition(const QString &room_sid, const ::OpenAPI::OptionalParam<QList<QString>> &audio_sources = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &audio_sources_excluded = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIComposition_enum_format> &format = ::OpenAPI::OptionalParam<OAIComposition_enum_format>(), const ::OpenAPI::OptionalParam<QString> &resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &trim = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QJsonValue> &video_layout = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteComposition(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchComposition(const QString &sid);

    /**
    * @param[in]  status OAIComposition_enum_status [optional]
    * @param[in]  date_created_after QDateTime [optional]
    * @param[in]  date_created_before QDateTime [optional]
    * @param[in]  room_sid QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listComposition(const ::OpenAPI::OptionalParam<OAIComposition_enum_status> &status = ::OpenAPI::OptionalParam<OAIComposition_enum_status>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &room_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCompositionCallback(OAIHttpRequestWorker *worker);
    void deleteCompositionCallback(OAIHttpRequestWorker *worker);
    void fetchCompositionCallback(OAIHttpRequestWorker *worker);
    void listCompositionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCompositionSignal(OAIVideo_v1_composition summary);
    void deleteCompositionSignal();
    void fetchCompositionSignal(OAIVideo_v1_composition summary);
    void listCompositionSignal(OAIListCompositionResponse summary);


    void createCompositionSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_composition summary);
    void deleteCompositionSignalFull(OAIHttpRequestWorker *worker);
    void fetchCompositionSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_composition summary);
    void listCompositionSignalFull(OAIHttpRequestWorker *worker, OAIListCompositionResponse summary);

    Q_DECL_DEPRECATED_X("Use createCompositionSignalError() instead")
    void createCompositionSignalE(OAIVideo_v1_composition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCompositionSignalError(OAIVideo_v1_composition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCompositionSignalError() instead")
    void deleteCompositionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCompositionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCompositionSignalError() instead")
    void fetchCompositionSignalE(OAIVideo_v1_composition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCompositionSignalError(OAIVideo_v1_composition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCompositionSignalError() instead")
    void listCompositionSignalE(OAIListCompositionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCompositionSignalError(OAIListCompositionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCompositionSignalErrorFull() instead")
    void createCompositionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCompositionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCompositionSignalErrorFull() instead")
    void deleteCompositionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCompositionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchCompositionSignalErrorFull() instead")
    void fetchCompositionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchCompositionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCompositionSignalErrorFull() instead")
    void listCompositionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCompositionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
