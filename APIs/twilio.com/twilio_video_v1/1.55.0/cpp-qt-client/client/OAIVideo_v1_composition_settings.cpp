/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_v1_composition_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_v1_composition_settings::OAIVideo_v1_composition_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_v1_composition_settings::OAIVideo_v1_composition_settings() {
    this->initializeModel();
}

OAIVideo_v1_composition_settings::~OAIVideo_v1_composition_settings() {}

void OAIVideo_v1_composition_settings::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_aws_credentials_sid_isSet = false;
    m_aws_credentials_sid_isValid = false;

    m_aws_s3_url_isSet = false;
    m_aws_s3_url_isValid = false;

    m_aws_storage_enabled_isSet = false;
    m_aws_storage_enabled_isValid = false;

    m_encryption_enabled_isSet = false;
    m_encryption_enabled_isValid = false;

    m_encryption_key_sid_isSet = false;
    m_encryption_key_sid_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVideo_v1_composition_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_v1_composition_settings::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_aws_credentials_sid_isValid = ::OpenAPI::fromJsonValue(m_aws_credentials_sid, json[QString("aws_credentials_sid")]);
    m_aws_credentials_sid_isSet = !json[QString("aws_credentials_sid")].isNull() && m_aws_credentials_sid_isValid;

    m_aws_s3_url_isValid = ::OpenAPI::fromJsonValue(m_aws_s3_url, json[QString("aws_s3_url")]);
    m_aws_s3_url_isSet = !json[QString("aws_s3_url")].isNull() && m_aws_s3_url_isValid;

    m_aws_storage_enabled_isValid = ::OpenAPI::fromJsonValue(m_aws_storage_enabled, json[QString("aws_storage_enabled")]);
    m_aws_storage_enabled_isSet = !json[QString("aws_storage_enabled")].isNull() && m_aws_storage_enabled_isValid;

    m_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_enabled, json[QString("encryption_enabled")]);
    m_encryption_enabled_isSet = !json[QString("encryption_enabled")].isNull() && m_encryption_enabled_isValid;

    m_encryption_key_sid_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_sid, json[QString("encryption_key_sid")]);
    m_encryption_key_sid_isSet = !json[QString("encryption_key_sid")].isNull() && m_encryption_key_sid_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVideo_v1_composition_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_v1_composition_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_aws_credentials_sid_isSet) {
        obj.insert(QString("aws_credentials_sid"), ::OpenAPI::toJsonValue(m_aws_credentials_sid));
    }
    if (m_aws_s3_url_isSet) {
        obj.insert(QString("aws_s3_url"), ::OpenAPI::toJsonValue(m_aws_s3_url));
    }
    if (m_aws_storage_enabled_isSet) {
        obj.insert(QString("aws_storage_enabled"), ::OpenAPI::toJsonValue(m_aws_storage_enabled));
    }
    if (m_encryption_enabled_isSet) {
        obj.insert(QString("encryption_enabled"), ::OpenAPI::toJsonValue(m_encryption_enabled));
    }
    if (m_encryption_key_sid_isSet) {
        obj.insert(QString("encryption_key_sid"), ::OpenAPI::toJsonValue(m_encryption_key_sid));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVideo_v1_composition_settings::getAccountSid() const {
    return m_account_sid;
}
void OAIVideo_v1_composition_settings::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVideo_v1_composition_settings::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIVideo_v1_composition_settings::getAwsCredentialsSid() const {
    return m_aws_credentials_sid;
}
void OAIVideo_v1_composition_settings::setAwsCredentialsSid(const QString &aws_credentials_sid) {
    m_aws_credentials_sid = aws_credentials_sid;
    m_aws_credentials_sid_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_aws_credentials_sid_Set() const{
    return m_aws_credentials_sid_isSet;
}

bool OAIVideo_v1_composition_settings::is_aws_credentials_sid_Valid() const{
    return m_aws_credentials_sid_isValid;
}

QString OAIVideo_v1_composition_settings::getAwsS3Url() const {
    return m_aws_s3_url;
}
void OAIVideo_v1_composition_settings::setAwsS3Url(const QString &aws_s3_url) {
    m_aws_s3_url = aws_s3_url;
    m_aws_s3_url_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_aws_s3_url_Set() const{
    return m_aws_s3_url_isSet;
}

bool OAIVideo_v1_composition_settings::is_aws_s3_url_Valid() const{
    return m_aws_s3_url_isValid;
}

bool OAIVideo_v1_composition_settings::isAwsStorageEnabled() const {
    return m_aws_storage_enabled;
}
void OAIVideo_v1_composition_settings::setAwsStorageEnabled(const bool &aws_storage_enabled) {
    m_aws_storage_enabled = aws_storage_enabled;
    m_aws_storage_enabled_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_aws_storage_enabled_Set() const{
    return m_aws_storage_enabled_isSet;
}

bool OAIVideo_v1_composition_settings::is_aws_storage_enabled_Valid() const{
    return m_aws_storage_enabled_isValid;
}

bool OAIVideo_v1_composition_settings::isEncryptionEnabled() const {
    return m_encryption_enabled;
}
void OAIVideo_v1_composition_settings::setEncryptionEnabled(const bool &encryption_enabled) {
    m_encryption_enabled = encryption_enabled;
    m_encryption_enabled_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_encryption_enabled_Set() const{
    return m_encryption_enabled_isSet;
}

bool OAIVideo_v1_composition_settings::is_encryption_enabled_Valid() const{
    return m_encryption_enabled_isValid;
}

QString OAIVideo_v1_composition_settings::getEncryptionKeySid() const {
    return m_encryption_key_sid;
}
void OAIVideo_v1_composition_settings::setEncryptionKeySid(const QString &encryption_key_sid) {
    m_encryption_key_sid = encryption_key_sid;
    m_encryption_key_sid_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_encryption_key_sid_Set() const{
    return m_encryption_key_sid_isSet;
}

bool OAIVideo_v1_composition_settings::is_encryption_key_sid_Valid() const{
    return m_encryption_key_sid_isValid;
}

QString OAIVideo_v1_composition_settings::getFriendlyName() const {
    return m_friendly_name;
}
void OAIVideo_v1_composition_settings::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIVideo_v1_composition_settings::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIVideo_v1_composition_settings::getUrl() const {
    return m_url;
}
void OAIVideo_v1_composition_settings::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideo_v1_composition_settings::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideo_v1_composition_settings::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVideo_v1_composition_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_credentials_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_s3_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_storage_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_v1_composition_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
