/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideoV1RoomApi_H
#define OAI_OAIVideoV1RoomApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListRoomResponse.h"
#include "OAIRoom_enum_room_status.h"
#include "OAIRoom_enum_room_type.h"
#include "OAIRoom_enum_video_codec.h"
#include "OAIVideo_v1_room.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideoV1RoomApi : public QObject {
    Q_OBJECT

public:
    OAIVideoV1RoomApi(const int timeOut = 0);
    ~OAIVideoV1RoomApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  audio_only bool [optional]
    * @param[in]  empty_room_timeout qint32 [optional]
    * @param[in]  enable_turn bool [optional]
    * @param[in]  large_room bool [optional]
    * @param[in]  max_participant_duration qint32 [optional]
    * @param[in]  max_participants qint32 [optional]
    * @param[in]  media_region QString [optional]
    * @param[in]  record_participants_on_connect bool [optional]
    * @param[in]  recording_rules QJsonValue [optional]
    * @param[in]  status_callback QString [optional]
    * @param[in]  status_callback_method QString [optional]
    * @param[in]  type OAIRoom_enum_room_type [optional]
    * @param[in]  unique_name QString [optional]
    * @param[in]  unused_room_timeout qint32 [optional]
    * @param[in]  video_codecs QList<OAIRoom_enum_video_codec> [optional]
    */
    virtual void createRoom(const ::OpenAPI::OptionalParam<bool> &audio_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &empty_room_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &enable_turn = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &large_room = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_participant_duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_participants = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &media_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &record_participants_on_connect = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QJsonValue> &recording_rules = ::OpenAPI::OptionalParam<QJsonValue>(), const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_callback_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRoom_enum_room_type> &type = ::OpenAPI::OptionalParam<OAIRoom_enum_room_type>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &unused_room_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIRoom_enum_video_codec>> &video_codecs = ::OpenAPI::OptionalParam<QList<OAIRoom_enum_video_codec>>());

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchRoom(const QString &sid);

    /**
    * @param[in]  status OAIRoom_enum_room_status [optional]
    * @param[in]  unique_name QString [optional]
    * @param[in]  date_created_after QDateTime [optional]
    * @param[in]  date_created_before QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listRoom(const ::OpenAPI::OptionalParam<OAIRoom_enum_room_status> &status = ::OpenAPI::OptionalParam<OAIRoom_enum_room_status>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sid QString [required]
    * @param[in]  status OAIRoom_enum_room_status [required]
    */
    virtual void updateRoom(const QString &sid, const OAIRoom_enum_room_status &status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRoomCallback(OAIHttpRequestWorker *worker);
    void fetchRoomCallback(OAIHttpRequestWorker *worker);
    void listRoomCallback(OAIHttpRequestWorker *worker);
    void updateRoomCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRoomSignal(OAIVideo_v1_room summary);
    void fetchRoomSignal(OAIVideo_v1_room summary);
    void listRoomSignal(OAIListRoomResponse summary);
    void updateRoomSignal(OAIVideo_v1_room summary);


    void createRoomSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_room summary);
    void fetchRoomSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_room summary);
    void listRoomSignalFull(OAIHttpRequestWorker *worker, OAIListRoomResponse summary);
    void updateRoomSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_room summary);

    Q_DECL_DEPRECATED_X("Use createRoomSignalError() instead")
    void createRoomSignalE(OAIVideo_v1_room summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomSignalError(OAIVideo_v1_room summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRoomSignalError() instead")
    void fetchRoomSignalE(OAIVideo_v1_room summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRoomSignalError(OAIVideo_v1_room summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoomSignalError() instead")
    void listRoomSignalE(OAIListRoomResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoomSignalError(OAIListRoomResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomSignalError() instead")
    void updateRoomSignalE(OAIVideo_v1_room summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomSignalError(OAIVideo_v1_room summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRoomSignalErrorFull() instead")
    void createRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRoomSignalErrorFull() instead")
    void fetchRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoomSignalErrorFull() instead")
    void listRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomSignalErrorFull() instead")
    void updateRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
