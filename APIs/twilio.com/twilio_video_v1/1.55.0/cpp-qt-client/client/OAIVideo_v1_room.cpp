/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_v1_room.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_v1_room::OAIVideo_v1_room(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_v1_room::OAIVideo_v1_room() {
    this->initializeModel();
}

OAIVideo_v1_room::~OAIVideo_v1_room() {}

void OAIVideo_v1_room::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_audio_only_isSet = false;
    m_audio_only_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_empty_room_timeout_isSet = false;
    m_empty_room_timeout_isValid = false;

    m_enable_turn_isSet = false;
    m_enable_turn_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_large_room_isSet = false;
    m_large_room_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_max_concurrent_published_tracks_isSet = false;
    m_max_concurrent_published_tracks_isValid = false;

    m_max_participant_duration_isSet = false;
    m_max_participant_duration_isValid = false;

    m_max_participants_isSet = false;
    m_max_participants_isValid = false;

    m_media_region_isSet = false;
    m_media_region_isValid = false;

    m_record_participants_on_connect_isSet = false;
    m_record_participants_on_connect_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_callback_isSet = false;
    m_status_callback_isValid = false;

    m_status_callback_method_isSet = false;
    m_status_callback_method_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_unused_room_timeout_isSet = false;
    m_unused_room_timeout_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_video_codecs_isSet = false;
    m_video_codecs_isValid = false;
}

void OAIVideo_v1_room::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_v1_room::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_audio_only_isValid = ::OpenAPI::fromJsonValue(m_audio_only, json[QString("audio_only")]);
    m_audio_only_isSet = !json[QString("audio_only")].isNull() && m_audio_only_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_empty_room_timeout_isValid = ::OpenAPI::fromJsonValue(m_empty_room_timeout, json[QString("empty_room_timeout")]);
    m_empty_room_timeout_isSet = !json[QString("empty_room_timeout")].isNull() && m_empty_room_timeout_isValid;

    m_enable_turn_isValid = ::OpenAPI::fromJsonValue(m_enable_turn, json[QString("enable_turn")]);
    m_enable_turn_isSet = !json[QString("enable_turn")].isNull() && m_enable_turn_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_large_room_isValid = ::OpenAPI::fromJsonValue(m_large_room, json[QString("large_room")]);
    m_large_room_isSet = !json[QString("large_room")].isNull() && m_large_room_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_max_concurrent_published_tracks_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_published_tracks, json[QString("max_concurrent_published_tracks")]);
    m_max_concurrent_published_tracks_isSet = !json[QString("max_concurrent_published_tracks")].isNull() && m_max_concurrent_published_tracks_isValid;

    m_max_participant_duration_isValid = ::OpenAPI::fromJsonValue(m_max_participant_duration, json[QString("max_participant_duration")]);
    m_max_participant_duration_isSet = !json[QString("max_participant_duration")].isNull() && m_max_participant_duration_isValid;

    m_max_participants_isValid = ::OpenAPI::fromJsonValue(m_max_participants, json[QString("max_participants")]);
    m_max_participants_isSet = !json[QString("max_participants")].isNull() && m_max_participants_isValid;

    m_media_region_isValid = ::OpenAPI::fromJsonValue(m_media_region, json[QString("media_region")]);
    m_media_region_isSet = !json[QString("media_region")].isNull() && m_media_region_isValid;

    m_record_participants_on_connect_isValid = ::OpenAPI::fromJsonValue(m_record_participants_on_connect, json[QString("record_participants_on_connect")]);
    m_record_participants_on_connect_isSet = !json[QString("record_participants_on_connect")].isNull() && m_record_participants_on_connect_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_callback_isValid = ::OpenAPI::fromJsonValue(m_status_callback, json[QString("status_callback")]);
    m_status_callback_isSet = !json[QString("status_callback")].isNull() && m_status_callback_isValid;

    m_status_callback_method_isValid = ::OpenAPI::fromJsonValue(m_status_callback_method, json[QString("status_callback_method")]);
    m_status_callback_method_isSet = !json[QString("status_callback_method")].isNull() && m_status_callback_method_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_unused_room_timeout_isValid = ::OpenAPI::fromJsonValue(m_unused_room_timeout, json[QString("unused_room_timeout")]);
    m_unused_room_timeout_isSet = !json[QString("unused_room_timeout")].isNull() && m_unused_room_timeout_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_video_codecs_isValid = ::OpenAPI::fromJsonValue(m_video_codecs, json[QString("video_codecs")]);
    m_video_codecs_isSet = !json[QString("video_codecs")].isNull() && m_video_codecs_isValid;
}

QString OAIVideo_v1_room::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_v1_room::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_audio_only_isSet) {
        obj.insert(QString("audio_only"), ::OpenAPI::toJsonValue(m_audio_only));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_empty_room_timeout_isSet) {
        obj.insert(QString("empty_room_timeout"), ::OpenAPI::toJsonValue(m_empty_room_timeout));
    }
    if (m_enable_turn_isSet) {
        obj.insert(QString("enable_turn"), ::OpenAPI::toJsonValue(m_enable_turn));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_large_room_isSet) {
        obj.insert(QString("large_room"), ::OpenAPI::toJsonValue(m_large_room));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_max_concurrent_published_tracks_isSet) {
        obj.insert(QString("max_concurrent_published_tracks"), ::OpenAPI::toJsonValue(m_max_concurrent_published_tracks));
    }
    if (m_max_participant_duration_isSet) {
        obj.insert(QString("max_participant_duration"), ::OpenAPI::toJsonValue(m_max_participant_duration));
    }
    if (m_max_participants_isSet) {
        obj.insert(QString("max_participants"), ::OpenAPI::toJsonValue(m_max_participants));
    }
    if (m_media_region_isSet) {
        obj.insert(QString("media_region"), ::OpenAPI::toJsonValue(m_media_region));
    }
    if (m_record_participants_on_connect_isSet) {
        obj.insert(QString("record_participants_on_connect"), ::OpenAPI::toJsonValue(m_record_participants_on_connect));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_callback_isSet) {
        obj.insert(QString("status_callback"), ::OpenAPI::toJsonValue(m_status_callback));
    }
    if (m_status_callback_method_isSet) {
        obj.insert(QString("status_callback_method"), ::OpenAPI::toJsonValue(m_status_callback_method));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_unused_room_timeout_isSet) {
        obj.insert(QString("unused_room_timeout"), ::OpenAPI::toJsonValue(m_unused_room_timeout));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_video_codecs.size() > 0) {
        obj.insert(QString("video_codecs"), ::OpenAPI::toJsonValue(m_video_codecs));
    }
    return obj;
}

QString OAIVideo_v1_room::getAccountSid() const {
    return m_account_sid;
}
void OAIVideo_v1_room::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVideo_v1_room::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVideo_v1_room::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

bool OAIVideo_v1_room::isAudioOnly() const {
    return m_audio_only;
}
void OAIVideo_v1_room::setAudioOnly(const bool &audio_only) {
    m_audio_only = audio_only;
    m_audio_only_isSet = true;
}

bool OAIVideo_v1_room::is_audio_only_Set() const{
    return m_audio_only_isSet;
}

bool OAIVideo_v1_room::is_audio_only_Valid() const{
    return m_audio_only_isValid;
}

QDateTime OAIVideo_v1_room::getDateCreated() const {
    return m_date_created;
}
void OAIVideo_v1_room::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVideo_v1_room::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVideo_v1_room::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVideo_v1_room::getDateUpdated() const {
    return m_date_updated;
}
void OAIVideo_v1_room::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVideo_v1_room::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVideo_v1_room::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAIVideo_v1_room::getDuration() const {
    return m_duration;
}
void OAIVideo_v1_room::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideo_v1_room::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideo_v1_room::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIVideo_v1_room::getEmptyRoomTimeout() const {
    return m_empty_room_timeout;
}
void OAIVideo_v1_room::setEmptyRoomTimeout(const qint32 &empty_room_timeout) {
    m_empty_room_timeout = empty_room_timeout;
    m_empty_room_timeout_isSet = true;
}

bool OAIVideo_v1_room::is_empty_room_timeout_Set() const{
    return m_empty_room_timeout_isSet;
}

bool OAIVideo_v1_room::is_empty_room_timeout_Valid() const{
    return m_empty_room_timeout_isValid;
}

bool OAIVideo_v1_room::isEnableTurn() const {
    return m_enable_turn;
}
void OAIVideo_v1_room::setEnableTurn(const bool &enable_turn) {
    m_enable_turn = enable_turn;
    m_enable_turn_isSet = true;
}

bool OAIVideo_v1_room::is_enable_turn_Set() const{
    return m_enable_turn_isSet;
}

bool OAIVideo_v1_room::is_enable_turn_Valid() const{
    return m_enable_turn_isValid;
}

QDateTime OAIVideo_v1_room::getEndTime() const {
    return m_end_time;
}
void OAIVideo_v1_room::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIVideo_v1_room::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIVideo_v1_room::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIVideo_v1_room::isLargeRoom() const {
    return m_large_room;
}
void OAIVideo_v1_room::setLargeRoom(const bool &large_room) {
    m_large_room = large_room;
    m_large_room_isSet = true;
}

bool OAIVideo_v1_room::is_large_room_Set() const{
    return m_large_room_isSet;
}

bool OAIVideo_v1_room::is_large_room_Valid() const{
    return m_large_room_isValid;
}

OAIObject OAIVideo_v1_room::getLinks() const {
    return m_links;
}
void OAIVideo_v1_room::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIVideo_v1_room::is_links_Set() const{
    return m_links_isSet;
}

bool OAIVideo_v1_room::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIVideo_v1_room::getMaxConcurrentPublishedTracks() const {
    return m_max_concurrent_published_tracks;
}
void OAIVideo_v1_room::setMaxConcurrentPublishedTracks(const qint32 &max_concurrent_published_tracks) {
    m_max_concurrent_published_tracks = max_concurrent_published_tracks;
    m_max_concurrent_published_tracks_isSet = true;
}

bool OAIVideo_v1_room::is_max_concurrent_published_tracks_Set() const{
    return m_max_concurrent_published_tracks_isSet;
}

bool OAIVideo_v1_room::is_max_concurrent_published_tracks_Valid() const{
    return m_max_concurrent_published_tracks_isValid;
}

qint32 OAIVideo_v1_room::getMaxParticipantDuration() const {
    return m_max_participant_duration;
}
void OAIVideo_v1_room::setMaxParticipantDuration(const qint32 &max_participant_duration) {
    m_max_participant_duration = max_participant_duration;
    m_max_participant_duration_isSet = true;
}

bool OAIVideo_v1_room::is_max_participant_duration_Set() const{
    return m_max_participant_duration_isSet;
}

bool OAIVideo_v1_room::is_max_participant_duration_Valid() const{
    return m_max_participant_duration_isValid;
}

qint32 OAIVideo_v1_room::getMaxParticipants() const {
    return m_max_participants;
}
void OAIVideo_v1_room::setMaxParticipants(const qint32 &max_participants) {
    m_max_participants = max_participants;
    m_max_participants_isSet = true;
}

bool OAIVideo_v1_room::is_max_participants_Set() const{
    return m_max_participants_isSet;
}

bool OAIVideo_v1_room::is_max_participants_Valid() const{
    return m_max_participants_isValid;
}

QString OAIVideo_v1_room::getMediaRegion() const {
    return m_media_region;
}
void OAIVideo_v1_room::setMediaRegion(const QString &media_region) {
    m_media_region = media_region;
    m_media_region_isSet = true;
}

bool OAIVideo_v1_room::is_media_region_Set() const{
    return m_media_region_isSet;
}

bool OAIVideo_v1_room::is_media_region_Valid() const{
    return m_media_region_isValid;
}

bool OAIVideo_v1_room::isRecordParticipantsOnConnect() const {
    return m_record_participants_on_connect;
}
void OAIVideo_v1_room::setRecordParticipantsOnConnect(const bool &record_participants_on_connect) {
    m_record_participants_on_connect = record_participants_on_connect;
    m_record_participants_on_connect_isSet = true;
}

bool OAIVideo_v1_room::is_record_participants_on_connect_Set() const{
    return m_record_participants_on_connect_isSet;
}

bool OAIVideo_v1_room::is_record_participants_on_connect_Valid() const{
    return m_record_participants_on_connect_isValid;
}

QString OAIVideo_v1_room::getSid() const {
    return m_sid;
}
void OAIVideo_v1_room::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVideo_v1_room::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVideo_v1_room::is_sid_Valid() const{
    return m_sid_isValid;
}

OAIRoom_enum_room_status OAIVideo_v1_room::getStatus() const {
    return m_status;
}
void OAIVideo_v1_room::setStatus(const OAIRoom_enum_room_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVideo_v1_room::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVideo_v1_room::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVideo_v1_room::getStatusCallback() const {
    return m_status_callback;
}
void OAIVideo_v1_room::setStatusCallback(const QString &status_callback) {
    m_status_callback = status_callback;
    m_status_callback_isSet = true;
}

bool OAIVideo_v1_room::is_status_callback_Set() const{
    return m_status_callback_isSet;
}

bool OAIVideo_v1_room::is_status_callback_Valid() const{
    return m_status_callback_isValid;
}

QString OAIVideo_v1_room::getStatusCallbackMethod() const {
    return m_status_callback_method;
}
void OAIVideo_v1_room::setStatusCallbackMethod(const QString &status_callback_method) {
    m_status_callback_method = status_callback_method;
    m_status_callback_method_isSet = true;
}

bool OAIVideo_v1_room::is_status_callback_method_Set() const{
    return m_status_callback_method_isSet;
}

bool OAIVideo_v1_room::is_status_callback_method_Valid() const{
    return m_status_callback_method_isValid;
}

OAIRoom_enum_room_type OAIVideo_v1_room::getType() const {
    return m_type;
}
void OAIVideo_v1_room::setType(const OAIRoom_enum_room_type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVideo_v1_room::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVideo_v1_room::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVideo_v1_room::getUniqueName() const {
    return m_unique_name;
}
void OAIVideo_v1_room::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIVideo_v1_room::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIVideo_v1_room::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

qint32 OAIVideo_v1_room::getUnusedRoomTimeout() const {
    return m_unused_room_timeout;
}
void OAIVideo_v1_room::setUnusedRoomTimeout(const qint32 &unused_room_timeout) {
    m_unused_room_timeout = unused_room_timeout;
    m_unused_room_timeout_isSet = true;
}

bool OAIVideo_v1_room::is_unused_room_timeout_Set() const{
    return m_unused_room_timeout_isSet;
}

bool OAIVideo_v1_room::is_unused_room_timeout_Valid() const{
    return m_unused_room_timeout_isValid;
}

QString OAIVideo_v1_room::getUrl() const {
    return m_url;
}
void OAIVideo_v1_room::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideo_v1_room::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideo_v1_room::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIRoom_enum_video_codec> OAIVideo_v1_room::getVideoCodecs() const {
    return m_video_codecs;
}
void OAIVideo_v1_room::setVideoCodecs(const QList<OAIRoom_enum_video_codec> &video_codecs) {
    m_video_codecs = video_codecs;
    m_video_codecs_isSet = true;
}

bool OAIVideo_v1_room::is_video_codecs_Set() const{
    return m_video_codecs_isSet;
}

bool OAIVideo_v1_room::is_video_codecs_Valid() const{
    return m_video_codecs_isValid;
}

bool OAIVideo_v1_room::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_room_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_turn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_published_tracks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_participant_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_participants_on_connect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_room_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_codecs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_v1_room::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
