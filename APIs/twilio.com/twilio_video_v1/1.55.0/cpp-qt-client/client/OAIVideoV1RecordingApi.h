/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideoV1RecordingApi_H
#define OAI_OAIVideoV1RecordingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListRecordingResponse.h"
#include "OAIRecording_enum_status.h"
#include "OAIRecording_enum_type.h"
#include "OAIVideo_v1_recording.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideoV1RecordingApi : public QObject {
    Q_OBJECT

public:
    OAIVideoV1RecordingApi(const int timeOut = 0);
    ~OAIVideoV1RecordingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteRecording(const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchRecording(const QString &sid);

    /**
    * @param[in]  status OAIRecording_enum_status [optional]
    * @param[in]  source_sid QString [optional]
    * @param[in]  grouping_sid QList<QString> [optional]
    * @param[in]  date_created_after QDateTime [optional]
    * @param[in]  date_created_before QDateTime [optional]
    * @param[in]  media_type OAIRecording_enum_type [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listRecording(const ::OpenAPI::OptionalParam<OAIRecording_enum_status> &status = ::OpenAPI::OptionalParam<OAIRecording_enum_status>(), const ::OpenAPI::OptionalParam<QString> &source_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &grouping_sid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIRecording_enum_type> &media_type = ::OpenAPI::OptionalParam<OAIRecording_enum_type>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteRecordingCallback(OAIHttpRequestWorker *worker);
    void fetchRecordingCallback(OAIHttpRequestWorker *worker);
    void listRecordingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteRecordingSignal();
    void fetchRecordingSignal(OAIVideo_v1_recording summary);
    void listRecordingSignal(OAIListRecordingResponse summary);


    void deleteRecordingSignalFull(OAIHttpRequestWorker *worker);
    void fetchRecordingSignalFull(OAIHttpRequestWorker *worker, OAIVideo_v1_recording summary);
    void listRecordingSignalFull(OAIHttpRequestWorker *worker, OAIListRecordingResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteRecordingSignalError() instead")
    void deleteRecordingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRecordingSignalError() instead")
    void fetchRecordingSignalE(OAIVideo_v1_recording summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRecordingSignalError(OAIVideo_v1_recording summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordingSignalError() instead")
    void listRecordingSignalE(OAIListRecordingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordingSignalError(OAIListRecordingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteRecordingSignalErrorFull() instead")
    void deleteRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRecordingSignalErrorFull() instead")
    void fetchRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRecordingSignalErrorFull() instead")
    void listRecordingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRecordingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
