/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_v1_composition_hook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_v1_composition_hook::OAIVideo_v1_composition_hook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_v1_composition_hook::OAIVideo_v1_composition_hook() {
    this->initializeModel();
}

OAIVideo_v1_composition_hook::~OAIVideo_v1_composition_hook() {}

void OAIVideo_v1_composition_hook::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_audio_sources_isSet = false;
    m_audio_sources_isValid = false;

    m_audio_sources_excluded_isSet = false;
    m_audio_sources_excluded_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_status_callback_isSet = false;
    m_status_callback_isValid = false;

    m_status_callback_method_isSet = false;
    m_status_callback_method_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_video_layout_isSet = false;
    m_video_layout_isValid = false;
}

void OAIVideo_v1_composition_hook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_v1_composition_hook::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_audio_sources_isValid = ::OpenAPI::fromJsonValue(m_audio_sources, json[QString("audio_sources")]);
    m_audio_sources_isSet = !json[QString("audio_sources")].isNull() && m_audio_sources_isValid;

    m_audio_sources_excluded_isValid = ::OpenAPI::fromJsonValue(m_audio_sources_excluded, json[QString("audio_sources_excluded")]);
    m_audio_sources_excluded_isSet = !json[QString("audio_sources_excluded")].isNull() && m_audio_sources_excluded_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_status_callback_isValid = ::OpenAPI::fromJsonValue(m_status_callback, json[QString("status_callback")]);
    m_status_callback_isSet = !json[QString("status_callback")].isNull() && m_status_callback_isValid;

    m_status_callback_method_isValid = ::OpenAPI::fromJsonValue(m_status_callback_method, json[QString("status_callback_method")]);
    m_status_callback_method_isSet = !json[QString("status_callback_method")].isNull() && m_status_callback_method_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_video_layout_isValid = ::OpenAPI::fromJsonValue(m_video_layout, json[QString("video_layout")]);
    m_video_layout_isSet = !json[QString("video_layout")].isNull() && m_video_layout_isValid;
}

QString OAIVideo_v1_composition_hook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_v1_composition_hook::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_audio_sources.size() > 0) {
        obj.insert(QString("audio_sources"), ::OpenAPI::toJsonValue(m_audio_sources));
    }
    if (m_audio_sources_excluded.size() > 0) {
        obj.insert(QString("audio_sources_excluded"), ::OpenAPI::toJsonValue(m_audio_sources_excluded));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_status_callback_isSet) {
        obj.insert(QString("status_callback"), ::OpenAPI::toJsonValue(m_status_callback));
    }
    if (m_status_callback_method_isSet) {
        obj.insert(QString("status_callback_method"), ::OpenAPI::toJsonValue(m_status_callback_method));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_video_layout_isSet) {
        obj.insert(QString("video_layout"), ::OpenAPI::toJsonValue(m_video_layout));
    }
    return obj;
}

QString OAIVideo_v1_composition_hook::getAccountSid() const {
    return m_account_sid;
}
void OAIVideo_v1_composition_hook::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVideo_v1_composition_hook::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<QString> OAIVideo_v1_composition_hook::getAudioSources() const {
    return m_audio_sources;
}
void OAIVideo_v1_composition_hook::setAudioSources(const QList<QString> &audio_sources) {
    m_audio_sources = audio_sources;
    m_audio_sources_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_audio_sources_Set() const{
    return m_audio_sources_isSet;
}

bool OAIVideo_v1_composition_hook::is_audio_sources_Valid() const{
    return m_audio_sources_isValid;
}

QList<QString> OAIVideo_v1_composition_hook::getAudioSourcesExcluded() const {
    return m_audio_sources_excluded;
}
void OAIVideo_v1_composition_hook::setAudioSourcesExcluded(const QList<QString> &audio_sources_excluded) {
    m_audio_sources_excluded = audio_sources_excluded;
    m_audio_sources_excluded_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_audio_sources_excluded_Set() const{
    return m_audio_sources_excluded_isSet;
}

bool OAIVideo_v1_composition_hook::is_audio_sources_excluded_Valid() const{
    return m_audio_sources_excluded_isValid;
}

QDateTime OAIVideo_v1_composition_hook::getDateCreated() const {
    return m_date_created;
}
void OAIVideo_v1_composition_hook::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVideo_v1_composition_hook::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVideo_v1_composition_hook::getDateUpdated() const {
    return m_date_updated;
}
void OAIVideo_v1_composition_hook::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIVideo_v1_composition_hook::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

bool OAIVideo_v1_composition_hook::isEnabled() const {
    return m_enabled;
}
void OAIVideo_v1_composition_hook::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIVideo_v1_composition_hook::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIComposition_hook_enum_format OAIVideo_v1_composition_hook::getFormat() const {
    return m_format;
}
void OAIVideo_v1_composition_hook::setFormat(const OAIComposition_hook_enum_format &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_format_Set() const{
    return m_format_isSet;
}

bool OAIVideo_v1_composition_hook::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIVideo_v1_composition_hook::getFriendlyName() const {
    return m_friendly_name;
}
void OAIVideo_v1_composition_hook::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIVideo_v1_composition_hook::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIVideo_v1_composition_hook::getResolution() const {
    return m_resolution;
}
void OAIVideo_v1_composition_hook::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIVideo_v1_composition_hook::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIVideo_v1_composition_hook::getSid() const {
    return m_sid;
}
void OAIVideo_v1_composition_hook::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVideo_v1_composition_hook::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIVideo_v1_composition_hook::getStatusCallback() const {
    return m_status_callback;
}
void OAIVideo_v1_composition_hook::setStatusCallback(const QString &status_callback) {
    m_status_callback = status_callback;
    m_status_callback_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_status_callback_Set() const{
    return m_status_callback_isSet;
}

bool OAIVideo_v1_composition_hook::is_status_callback_Valid() const{
    return m_status_callback_isValid;
}

QString OAIVideo_v1_composition_hook::getStatusCallbackMethod() const {
    return m_status_callback_method;
}
void OAIVideo_v1_composition_hook::setStatusCallbackMethod(const QString &status_callback_method) {
    m_status_callback_method = status_callback_method;
    m_status_callback_method_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_status_callback_method_Set() const{
    return m_status_callback_method_isSet;
}

bool OAIVideo_v1_composition_hook::is_status_callback_method_Valid() const{
    return m_status_callback_method_isValid;
}

bool OAIVideo_v1_composition_hook::isTrim() const {
    return m_trim;
}
void OAIVideo_v1_composition_hook::setTrim(const bool &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIVideo_v1_composition_hook::is_trim_Valid() const{
    return m_trim_isValid;
}

QString OAIVideo_v1_composition_hook::getUrl() const {
    return m_url;
}
void OAIVideo_v1_composition_hook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideo_v1_composition_hook::is_url_Valid() const{
    return m_url_isValid;
}

QJsonValue OAIVideo_v1_composition_hook::getVideoLayout() const {
    return m_video_layout;
}
void OAIVideo_v1_composition_hook::setVideoLayout(const QJsonValue &video_layout) {
    m_video_layout = video_layout;
    m_video_layout_isSet = true;
}

bool OAIVideo_v1_composition_hook::is_video_layout_Set() const{
    return m_video_layout_isSet;
}

bool OAIVideo_v1_composition_hook::is_video_layout_Valid() const{
    return m_video_layout_isValid;
}

bool OAIVideo_v1_composition_hook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_sources_excluded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_layout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_v1_composition_hook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
