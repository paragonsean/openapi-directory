/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideo_v1_room.h
 *
 * 
 */

#ifndef OAIVideo_v1_room_H
#define OAIVideo_v1_room_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIRoom_enum_room_status.h"
#include "OAIRoom_enum_room_type.h"
#include "OAIRoom_enum_video_codec.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVideo_v1_room : public OAIObject {
public:
    OAIVideo_v1_room();
    OAIVideo_v1_room(QString json);
    ~OAIVideo_v1_room() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    bool isAudioOnly() const;
    void setAudioOnly(const bool &audio_only);
    bool is_audio_only_Set() const;
    bool is_audio_only_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    qint32 getEmptyRoomTimeout() const;
    void setEmptyRoomTimeout(const qint32 &empty_room_timeout);
    bool is_empty_room_timeout_Set() const;
    bool is_empty_room_timeout_Valid() const;

    bool isEnableTurn() const;
    void setEnableTurn(const bool &enable_turn);
    bool is_enable_turn_Set() const;
    bool is_enable_turn_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    bool isLargeRoom() const;
    void setLargeRoom(const bool &large_room);
    bool is_large_room_Set() const;
    bool is_large_room_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    qint32 getMaxConcurrentPublishedTracks() const;
    void setMaxConcurrentPublishedTracks(const qint32 &max_concurrent_published_tracks);
    bool is_max_concurrent_published_tracks_Set() const;
    bool is_max_concurrent_published_tracks_Valid() const;

    qint32 getMaxParticipantDuration() const;
    void setMaxParticipantDuration(const qint32 &max_participant_duration);
    bool is_max_participant_duration_Set() const;
    bool is_max_participant_duration_Valid() const;

    qint32 getMaxParticipants() const;
    void setMaxParticipants(const qint32 &max_participants);
    bool is_max_participants_Set() const;
    bool is_max_participants_Valid() const;

    QString getMediaRegion() const;
    void setMediaRegion(const QString &media_region);
    bool is_media_region_Set() const;
    bool is_media_region_Valid() const;

    bool isRecordParticipantsOnConnect() const;
    void setRecordParticipantsOnConnect(const bool &record_participants_on_connect);
    bool is_record_participants_on_connect_Set() const;
    bool is_record_participants_on_connect_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    OAIRoom_enum_room_status getStatus() const;
    void setStatus(const OAIRoom_enum_room_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusCallback() const;
    void setStatusCallback(const QString &status_callback);
    bool is_status_callback_Set() const;
    bool is_status_callback_Valid() const;

    QString getStatusCallbackMethod() const;
    void setStatusCallbackMethod(const QString &status_callback_method);
    bool is_status_callback_method_Set() const;
    bool is_status_callback_method_Valid() const;

    OAIRoom_enum_room_type getType() const;
    void setType(const OAIRoom_enum_room_type &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUniqueName() const;
    void setUniqueName(const QString &unique_name);
    bool is_unique_name_Set() const;
    bool is_unique_name_Valid() const;

    qint32 getUnusedRoomTimeout() const;
    void setUnusedRoomTimeout(const qint32 &unused_room_timeout);
    bool is_unused_room_timeout_Set() const;
    bool is_unused_room_timeout_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QList<OAIRoom_enum_video_codec> getVideoCodecs() const;
    void setVideoCodecs(const QList<OAIRoom_enum_video_codec> &video_codecs);
    bool is_video_codecs_Set() const;
    bool is_video_codecs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    bool m_audio_only;
    bool m_audio_only_isSet;
    bool m_audio_only_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    qint32 m_empty_room_timeout;
    bool m_empty_room_timeout_isSet;
    bool m_empty_room_timeout_isValid;

    bool m_enable_turn;
    bool m_enable_turn_isSet;
    bool m_enable_turn_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    bool m_large_room;
    bool m_large_room_isSet;
    bool m_large_room_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    qint32 m_max_concurrent_published_tracks;
    bool m_max_concurrent_published_tracks_isSet;
    bool m_max_concurrent_published_tracks_isValid;

    qint32 m_max_participant_duration;
    bool m_max_participant_duration_isSet;
    bool m_max_participant_duration_isValid;

    qint32 m_max_participants;
    bool m_max_participants_isSet;
    bool m_max_participants_isValid;

    QString m_media_region;
    bool m_media_region_isSet;
    bool m_media_region_isValid;

    bool m_record_participants_on_connect;
    bool m_record_participants_on_connect_isSet;
    bool m_record_participants_on_connect_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    OAIRoom_enum_room_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_callback;
    bool m_status_callback_isSet;
    bool m_status_callback_isValid;

    QString m_status_callback_method;
    bool m_status_callback_method_isSet;
    bool m_status_callback_method_isValid;

    OAIRoom_enum_room_type m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_unique_name;
    bool m_unique_name_isSet;
    bool m_unique_name_isValid;

    qint32 m_unused_room_timeout;
    bool m_unused_room_timeout_isSet;
    bool m_unused_room_timeout_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QList<OAIRoom_enum_video_codec> m_video_codecs;
    bool m_video_codecs_isSet;
    bool m_video_codecs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideo_v1_room)

#endif // OAIVideo_v1_room_H
