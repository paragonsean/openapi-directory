/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_v1_composition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_v1_composition::OAIVideo_v1_composition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_v1_composition::OAIVideo_v1_composition() {
    this->initializeModel();
}

OAIVideo_v1_composition::~OAIVideo_v1_composition() {}

void OAIVideo_v1_composition::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_audio_sources_isSet = false;
    m_audio_sources_isValid = false;

    m_audio_sources_excluded_isSet = false;
    m_audio_sources_excluded_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_date_completed_isSet = false;
    m_date_completed_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_deleted_isSet = false;
    m_date_deleted_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_media_external_location_isSet = false;
    m_media_external_location_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_room_sid_isSet = false;
    m_room_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_callback_isSet = false;
    m_status_callback_isValid = false;

    m_status_callback_method_isSet = false;
    m_status_callback_method_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_video_layout_isSet = false;
    m_video_layout_isValid = false;
}

void OAIVideo_v1_composition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_v1_composition::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_audio_sources_isValid = ::OpenAPI::fromJsonValue(m_audio_sources, json[QString("audio_sources")]);
    m_audio_sources_isSet = !json[QString("audio_sources")].isNull() && m_audio_sources_isValid;

    m_audio_sources_excluded_isValid = ::OpenAPI::fromJsonValue(m_audio_sources_excluded, json[QString("audio_sources_excluded")]);
    m_audio_sources_excluded_isSet = !json[QString("audio_sources_excluded")].isNull() && m_audio_sources_excluded_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_date_completed_isValid = ::OpenAPI::fromJsonValue(m_date_completed, json[QString("date_completed")]);
    m_date_completed_isSet = !json[QString("date_completed")].isNull() && m_date_completed_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_deleted_isValid = ::OpenAPI::fromJsonValue(m_date_deleted, json[QString("date_deleted")]);
    m_date_deleted_isSet = !json[QString("date_deleted")].isNull() && m_date_deleted_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_media_external_location_isValid = ::OpenAPI::fromJsonValue(m_media_external_location, json[QString("media_external_location")]);
    m_media_external_location_isSet = !json[QString("media_external_location")].isNull() && m_media_external_location_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_room_sid_isValid = ::OpenAPI::fromJsonValue(m_room_sid, json[QString("room_sid")]);
    m_room_sid_isSet = !json[QString("room_sid")].isNull() && m_room_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_callback_isValid = ::OpenAPI::fromJsonValue(m_status_callback, json[QString("status_callback")]);
    m_status_callback_isSet = !json[QString("status_callback")].isNull() && m_status_callback_isValid;

    m_status_callback_method_isValid = ::OpenAPI::fromJsonValue(m_status_callback_method, json[QString("status_callback_method")]);
    m_status_callback_method_isSet = !json[QString("status_callback_method")].isNull() && m_status_callback_method_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_video_layout_isValid = ::OpenAPI::fromJsonValue(m_video_layout, json[QString("video_layout")]);
    m_video_layout_isSet = !json[QString("video_layout")].isNull() && m_video_layout_isValid;
}

QString OAIVideo_v1_composition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_v1_composition::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_audio_sources.size() > 0) {
        obj.insert(QString("audio_sources"), ::OpenAPI::toJsonValue(m_audio_sources));
    }
    if (m_audio_sources_excluded.size() > 0) {
        obj.insert(QString("audio_sources_excluded"), ::OpenAPI::toJsonValue(m_audio_sources_excluded));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_date_completed_isSet) {
        obj.insert(QString("date_completed"), ::OpenAPI::toJsonValue(m_date_completed));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_deleted_isSet) {
        obj.insert(QString("date_deleted"), ::OpenAPI::toJsonValue(m_date_deleted));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_media_external_location_isSet) {
        obj.insert(QString("media_external_location"), ::OpenAPI::toJsonValue(m_media_external_location));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_room_sid_isSet) {
        obj.insert(QString("room_sid"), ::OpenAPI::toJsonValue(m_room_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_callback_isSet) {
        obj.insert(QString("status_callback"), ::OpenAPI::toJsonValue(m_status_callback));
    }
    if (m_status_callback_method_isSet) {
        obj.insert(QString("status_callback_method"), ::OpenAPI::toJsonValue(m_status_callback_method));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_video_layout_isSet) {
        obj.insert(QString("video_layout"), ::OpenAPI::toJsonValue(m_video_layout));
    }
    return obj;
}

QString OAIVideo_v1_composition::getAccountSid() const {
    return m_account_sid;
}
void OAIVideo_v1_composition::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVideo_v1_composition::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVideo_v1_composition::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QList<QString> OAIVideo_v1_composition::getAudioSources() const {
    return m_audio_sources;
}
void OAIVideo_v1_composition::setAudioSources(const QList<QString> &audio_sources) {
    m_audio_sources = audio_sources;
    m_audio_sources_isSet = true;
}

bool OAIVideo_v1_composition::is_audio_sources_Set() const{
    return m_audio_sources_isSet;
}

bool OAIVideo_v1_composition::is_audio_sources_Valid() const{
    return m_audio_sources_isValid;
}

QList<QString> OAIVideo_v1_composition::getAudioSourcesExcluded() const {
    return m_audio_sources_excluded;
}
void OAIVideo_v1_composition::setAudioSourcesExcluded(const QList<QString> &audio_sources_excluded) {
    m_audio_sources_excluded = audio_sources_excluded;
    m_audio_sources_excluded_isSet = true;
}

bool OAIVideo_v1_composition::is_audio_sources_excluded_Set() const{
    return m_audio_sources_excluded_isSet;
}

bool OAIVideo_v1_composition::is_audio_sources_excluded_Valid() const{
    return m_audio_sources_excluded_isValid;
}

qint32 OAIVideo_v1_composition::getBitrate() const {
    return m_bitrate;
}
void OAIVideo_v1_composition::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIVideo_v1_composition::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIVideo_v1_composition::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

QDateTime OAIVideo_v1_composition::getDateCompleted() const {
    return m_date_completed;
}
void OAIVideo_v1_composition::setDateCompleted(const QDateTime &date_completed) {
    m_date_completed = date_completed;
    m_date_completed_isSet = true;
}

bool OAIVideo_v1_composition::is_date_completed_Set() const{
    return m_date_completed_isSet;
}

bool OAIVideo_v1_composition::is_date_completed_Valid() const{
    return m_date_completed_isValid;
}

QDateTime OAIVideo_v1_composition::getDateCreated() const {
    return m_date_created;
}
void OAIVideo_v1_composition::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVideo_v1_composition::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVideo_v1_composition::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIVideo_v1_composition::getDateDeleted() const {
    return m_date_deleted;
}
void OAIVideo_v1_composition::setDateDeleted(const QDateTime &date_deleted) {
    m_date_deleted = date_deleted;
    m_date_deleted_isSet = true;
}

bool OAIVideo_v1_composition::is_date_deleted_Set() const{
    return m_date_deleted_isSet;
}

bool OAIVideo_v1_composition::is_date_deleted_Valid() const{
    return m_date_deleted_isValid;
}

qint32 OAIVideo_v1_composition::getDuration() const {
    return m_duration;
}
void OAIVideo_v1_composition::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideo_v1_composition::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideo_v1_composition::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIComposition_enum_format OAIVideo_v1_composition::getFormat() const {
    return m_format;
}
void OAIVideo_v1_composition::setFormat(const OAIComposition_enum_format &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIVideo_v1_composition::is_format_Set() const{
    return m_format_isSet;
}

bool OAIVideo_v1_composition::is_format_Valid() const{
    return m_format_isValid;
}

OAIObject OAIVideo_v1_composition::getLinks() const {
    return m_links;
}
void OAIVideo_v1_composition::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIVideo_v1_composition::is_links_Set() const{
    return m_links_isSet;
}

bool OAIVideo_v1_composition::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIVideo_v1_composition::getMediaExternalLocation() const {
    return m_media_external_location;
}
void OAIVideo_v1_composition::setMediaExternalLocation(const QString &media_external_location) {
    m_media_external_location = media_external_location;
    m_media_external_location_isSet = true;
}

bool OAIVideo_v1_composition::is_media_external_location_Set() const{
    return m_media_external_location_isSet;
}

bool OAIVideo_v1_composition::is_media_external_location_Valid() const{
    return m_media_external_location_isValid;
}

QString OAIVideo_v1_composition::getResolution() const {
    return m_resolution;
}
void OAIVideo_v1_composition::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIVideo_v1_composition::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIVideo_v1_composition::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIVideo_v1_composition::getRoomSid() const {
    return m_room_sid;
}
void OAIVideo_v1_composition::setRoomSid(const QString &room_sid) {
    m_room_sid = room_sid;
    m_room_sid_isSet = true;
}

bool OAIVideo_v1_composition::is_room_sid_Set() const{
    return m_room_sid_isSet;
}

bool OAIVideo_v1_composition::is_room_sid_Valid() const{
    return m_room_sid_isValid;
}

QString OAIVideo_v1_composition::getSid() const {
    return m_sid;
}
void OAIVideo_v1_composition::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVideo_v1_composition::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVideo_v1_composition::is_sid_Valid() const{
    return m_sid_isValid;
}

qint64 OAIVideo_v1_composition::getSize() const {
    return m_size;
}
void OAIVideo_v1_composition::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIVideo_v1_composition::is_size_Set() const{
    return m_size_isSet;
}

bool OAIVideo_v1_composition::is_size_Valid() const{
    return m_size_isValid;
}

OAIComposition_enum_status OAIVideo_v1_composition::getStatus() const {
    return m_status;
}
void OAIVideo_v1_composition::setStatus(const OAIComposition_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVideo_v1_composition::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVideo_v1_composition::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVideo_v1_composition::getStatusCallback() const {
    return m_status_callback;
}
void OAIVideo_v1_composition::setStatusCallback(const QString &status_callback) {
    m_status_callback = status_callback;
    m_status_callback_isSet = true;
}

bool OAIVideo_v1_composition::is_status_callback_Set() const{
    return m_status_callback_isSet;
}

bool OAIVideo_v1_composition::is_status_callback_Valid() const{
    return m_status_callback_isValid;
}

QString OAIVideo_v1_composition::getStatusCallbackMethod() const {
    return m_status_callback_method;
}
void OAIVideo_v1_composition::setStatusCallbackMethod(const QString &status_callback_method) {
    m_status_callback_method = status_callback_method;
    m_status_callback_method_isSet = true;
}

bool OAIVideo_v1_composition::is_status_callback_method_Set() const{
    return m_status_callback_method_isSet;
}

bool OAIVideo_v1_composition::is_status_callback_method_Valid() const{
    return m_status_callback_method_isValid;
}

bool OAIVideo_v1_composition::isTrim() const {
    return m_trim;
}
void OAIVideo_v1_composition::setTrim(const bool &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIVideo_v1_composition::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIVideo_v1_composition::is_trim_Valid() const{
    return m_trim_isValid;
}

QString OAIVideo_v1_composition::getUrl() const {
    return m_url;
}
void OAIVideo_v1_composition::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideo_v1_composition::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideo_v1_composition::is_url_Valid() const{
    return m_url_isValid;
}

QJsonValue OAIVideo_v1_composition::getVideoLayout() const {
    return m_video_layout;
}
void OAIVideo_v1_composition::setVideoLayout(const QJsonValue &video_layout) {
    m_video_layout = video_layout;
    m_video_layout_isSet = true;
}

bool OAIVideo_v1_composition::is_video_layout_Set() const{
    return m_video_layout_isSet;
}

bool OAIVideo_v1_composition::is_video_layout_Valid() const{
    return m_video_layout_isValid;
}

bool OAIVideo_v1_composition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_sources_excluded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_external_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_layout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_v1_composition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
