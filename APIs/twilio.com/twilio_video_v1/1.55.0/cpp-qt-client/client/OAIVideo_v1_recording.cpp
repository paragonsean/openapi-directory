/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_v1_recording.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_v1_recording::OAIVideo_v1_recording(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_v1_recording::OAIVideo_v1_recording() {
    this->initializeModel();
}

OAIVideo_v1_recording::~OAIVideo_v1_recording() {}

void OAIVideo_v1_recording::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_container_format_isSet = false;
    m_container_format_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_grouping_sids_isSet = false;
    m_grouping_sids_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_media_external_location_isSet = false;
    m_media_external_location_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_source_sid_isSet = false;
    m_source_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_callback_isSet = false;
    m_status_callback_isValid = false;

    m_status_callback_method_isSet = false;
    m_status_callback_method_isValid = false;

    m_track_name_isSet = false;
    m_track_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVideo_v1_recording::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_v1_recording::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("codec")]);
    m_codec_isSet = !json[QString("codec")].isNull() && m_codec_isValid;

    m_container_format_isValid = ::OpenAPI::fromJsonValue(m_container_format, json[QString("container_format")]);
    m_container_format_isSet = !json[QString("container_format")].isNull() && m_container_format_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_grouping_sids_isValid = ::OpenAPI::fromJsonValue(m_grouping_sids, json[QString("grouping_sids")]);
    m_grouping_sids_isSet = !json[QString("grouping_sids")].isNull() && m_grouping_sids_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_media_external_location_isValid = ::OpenAPI::fromJsonValue(m_media_external_location, json[QString("media_external_location")]);
    m_media_external_location_isSet = !json[QString("media_external_location")].isNull() && m_media_external_location_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_source_sid_isValid = ::OpenAPI::fromJsonValue(m_source_sid, json[QString("source_sid")]);
    m_source_sid_isSet = !json[QString("source_sid")].isNull() && m_source_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_callback_isValid = ::OpenAPI::fromJsonValue(m_status_callback, json[QString("status_callback")]);
    m_status_callback_isSet = !json[QString("status_callback")].isNull() && m_status_callback_isValid;

    m_status_callback_method_isValid = ::OpenAPI::fromJsonValue(m_status_callback_method, json[QString("status_callback_method")]);
    m_status_callback_method_isSet = !json[QString("status_callback_method")].isNull() && m_status_callback_method_isValid;

    m_track_name_isValid = ::OpenAPI::fromJsonValue(m_track_name, json[QString("track_name")]);
    m_track_name_isSet = !json[QString("track_name")].isNull() && m_track_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVideo_v1_recording::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_v1_recording::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_codec.isSet()) {
        obj.insert(QString("codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_container_format.isSet()) {
        obj.insert(QString("container_format"), ::OpenAPI::toJsonValue(m_container_format));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_grouping_sids_isSet) {
        obj.insert(QString("grouping_sids"), ::OpenAPI::toJsonValue(m_grouping_sids));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_media_external_location_isSet) {
        obj.insert(QString("media_external_location"), ::OpenAPI::toJsonValue(m_media_external_location));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_source_sid_isSet) {
        obj.insert(QString("source_sid"), ::OpenAPI::toJsonValue(m_source_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_callback_isSet) {
        obj.insert(QString("status_callback"), ::OpenAPI::toJsonValue(m_status_callback));
    }
    if (m_status_callback_method_isSet) {
        obj.insert(QString("status_callback_method"), ::OpenAPI::toJsonValue(m_status_callback_method));
    }
    if (m_track_name_isSet) {
        obj.insert(QString("track_name"), ::OpenAPI::toJsonValue(m_track_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVideo_v1_recording::getAccountSid() const {
    return m_account_sid;
}
void OAIVideo_v1_recording::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVideo_v1_recording::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVideo_v1_recording::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

OAIRecording_enum_codec OAIVideo_v1_recording::getCodec() const {
    return m_codec;
}
void OAIVideo_v1_recording::setCodec(const OAIRecording_enum_codec &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIVideo_v1_recording::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIVideo_v1_recording::is_codec_Valid() const{
    return m_codec_isValid;
}

OAIRecording_enum_format OAIVideo_v1_recording::getContainerFormat() const {
    return m_container_format;
}
void OAIVideo_v1_recording::setContainerFormat(const OAIRecording_enum_format &container_format) {
    m_container_format = container_format;
    m_container_format_isSet = true;
}

bool OAIVideo_v1_recording::is_container_format_Set() const{
    return m_container_format_isSet;
}

bool OAIVideo_v1_recording::is_container_format_Valid() const{
    return m_container_format_isValid;
}

QDateTime OAIVideo_v1_recording::getDateCreated() const {
    return m_date_created;
}
void OAIVideo_v1_recording::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVideo_v1_recording::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVideo_v1_recording::is_date_created_Valid() const{
    return m_date_created_isValid;
}

qint32 OAIVideo_v1_recording::getDuration() const {
    return m_duration;
}
void OAIVideo_v1_recording::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideo_v1_recording::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideo_v1_recording::is_duration_Valid() const{
    return m_duration_isValid;
}

QJsonValue OAIVideo_v1_recording::getGroupingSids() const {
    return m_grouping_sids;
}
void OAIVideo_v1_recording::setGroupingSids(const QJsonValue &grouping_sids) {
    m_grouping_sids = grouping_sids;
    m_grouping_sids_isSet = true;
}

bool OAIVideo_v1_recording::is_grouping_sids_Set() const{
    return m_grouping_sids_isSet;
}

bool OAIVideo_v1_recording::is_grouping_sids_Valid() const{
    return m_grouping_sids_isValid;
}

OAIObject OAIVideo_v1_recording::getLinks() const {
    return m_links;
}
void OAIVideo_v1_recording::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIVideo_v1_recording::is_links_Set() const{
    return m_links_isSet;
}

bool OAIVideo_v1_recording::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIVideo_v1_recording::getMediaExternalLocation() const {
    return m_media_external_location;
}
void OAIVideo_v1_recording::setMediaExternalLocation(const QString &media_external_location) {
    m_media_external_location = media_external_location;
    m_media_external_location_isSet = true;
}

bool OAIVideo_v1_recording::is_media_external_location_Set() const{
    return m_media_external_location_isSet;
}

bool OAIVideo_v1_recording::is_media_external_location_Valid() const{
    return m_media_external_location_isValid;
}

qint64 OAIVideo_v1_recording::getOffset() const {
    return m_offset;
}
void OAIVideo_v1_recording::setOffset(const qint64 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIVideo_v1_recording::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIVideo_v1_recording::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIVideo_v1_recording::getSid() const {
    return m_sid;
}
void OAIVideo_v1_recording::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVideo_v1_recording::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVideo_v1_recording::is_sid_Valid() const{
    return m_sid_isValid;
}

qint64 OAIVideo_v1_recording::getSize() const {
    return m_size;
}
void OAIVideo_v1_recording::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIVideo_v1_recording::is_size_Set() const{
    return m_size_isSet;
}

bool OAIVideo_v1_recording::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIVideo_v1_recording::getSourceSid() const {
    return m_source_sid;
}
void OAIVideo_v1_recording::setSourceSid(const QString &source_sid) {
    m_source_sid = source_sid;
    m_source_sid_isSet = true;
}

bool OAIVideo_v1_recording::is_source_sid_Set() const{
    return m_source_sid_isSet;
}

bool OAIVideo_v1_recording::is_source_sid_Valid() const{
    return m_source_sid_isValid;
}

OAIRecording_enum_status OAIVideo_v1_recording::getStatus() const {
    return m_status;
}
void OAIVideo_v1_recording::setStatus(const OAIRecording_enum_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVideo_v1_recording::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVideo_v1_recording::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVideo_v1_recording::getStatusCallback() const {
    return m_status_callback;
}
void OAIVideo_v1_recording::setStatusCallback(const QString &status_callback) {
    m_status_callback = status_callback;
    m_status_callback_isSet = true;
}

bool OAIVideo_v1_recording::is_status_callback_Set() const{
    return m_status_callback_isSet;
}

bool OAIVideo_v1_recording::is_status_callback_Valid() const{
    return m_status_callback_isValid;
}

QString OAIVideo_v1_recording::getStatusCallbackMethod() const {
    return m_status_callback_method;
}
void OAIVideo_v1_recording::setStatusCallbackMethod(const QString &status_callback_method) {
    m_status_callback_method = status_callback_method;
    m_status_callback_method_isSet = true;
}

bool OAIVideo_v1_recording::is_status_callback_method_Set() const{
    return m_status_callback_method_isSet;
}

bool OAIVideo_v1_recording::is_status_callback_method_Valid() const{
    return m_status_callback_method_isValid;
}

QString OAIVideo_v1_recording::getTrackName() const {
    return m_track_name;
}
void OAIVideo_v1_recording::setTrackName(const QString &track_name) {
    m_track_name = track_name;
    m_track_name_isSet = true;
}

bool OAIVideo_v1_recording::is_track_name_Set() const{
    return m_track_name_isSet;
}

bool OAIVideo_v1_recording::is_track_name_Valid() const{
    return m_track_name_isValid;
}

OAIRecording_enum_type OAIVideo_v1_recording::getType() const {
    return m_type;
}
void OAIVideo_v1_recording::setType(const OAIRecording_enum_type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVideo_v1_recording::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVideo_v1_recording::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVideo_v1_recording::getUrl() const {
    return m_url;
}
void OAIVideo_v1_recording::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideo_v1_recording::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideo_v1_recording::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVideo_v1_recording::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouping_sids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_external_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_callback_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_v1_recording::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
