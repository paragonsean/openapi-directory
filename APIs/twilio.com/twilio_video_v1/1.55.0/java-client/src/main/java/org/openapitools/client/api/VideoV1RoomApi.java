/*
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListRoomResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RoomEnumRoomStatus;
import org.openapitools.client.model.RoomEnumRoomType;
import org.openapitools.client.model.RoomEnumVideoCodec;
import java.net.URI;
import org.openapitools.client.model.VideoV1Room;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoV1RoomApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideoV1RoomApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoV1RoomApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRoom
     * @param audioOnly When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only. (optional)
     * @param emptyRoomTimeout Configures how long (in minutes) a room will remain active after last participant leaves. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param enableTurn Deprecated, now always considered to be true. (optional)
     * @param largeRoom When set to true, indicated that this is the large room. (optional)
     * @param maxParticipantDuration The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours). (optional)
     * @param maxParticipants The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants. (optional)
     * @param mediaRegion The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-addresses#group-rooms-media-servers). ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordParticipantsOnConnect Whether to start recording when Participants connect. ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordingRules A collection of Recording Rules that describe how to include or exclude matching tracks for recording (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be &#x60;POST&#x60; or &#x60;GET&#x60;. (optional)
     * @param type  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used as a &#x60;room_sid&#x60; in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for &#x60;in-progress&#x60; rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is &#x60;in-progress&#x60;. (optional)
     * @param unusedRoomTimeout Configures how long (in minutes) a room will remain active if no one joins. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param videoCodecs An array of the video codecs that are supported when publishing a track in the room.  Can be: &#x60;VP8&#x60; and &#x60;H264&#x60;.  ***This feature is not available in &#x60;peer-to-peer&#x60; rooms*** (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoomCall(Boolean audioOnly, Integer emptyRoomTimeout, Boolean enableTurn, Boolean largeRoom, Integer maxParticipantDuration, Integer maxParticipants, String mediaRegion, Boolean recordParticipantsOnConnect, Object recordingRules, URI statusCallback, String statusCallbackMethod, RoomEnumRoomType type, String uniqueName, Integer unusedRoomTimeout, List<RoomEnumVideoCodec> videoCodecs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://video.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Rooms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (audioOnly != null) {
            localVarFormParams.put("AudioOnly", audioOnly);
        }

        if (emptyRoomTimeout != null) {
            localVarFormParams.put("EmptyRoomTimeout", emptyRoomTimeout);
        }

        if (enableTurn != null) {
            localVarFormParams.put("EnableTurn", enableTurn);
        }

        if (largeRoom != null) {
            localVarFormParams.put("LargeRoom", largeRoom);
        }

        if (maxParticipantDuration != null) {
            localVarFormParams.put("MaxParticipantDuration", maxParticipantDuration);
        }

        if (maxParticipants != null) {
            localVarFormParams.put("MaxParticipants", maxParticipants);
        }

        if (mediaRegion != null) {
            localVarFormParams.put("MediaRegion", mediaRegion);
        }

        if (recordParticipantsOnConnect != null) {
            localVarFormParams.put("RecordParticipantsOnConnect", recordParticipantsOnConnect);
        }

        if (recordingRules != null) {
            localVarFormParams.put("RecordingRules", recordingRules);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        if (statusCallbackMethod != null) {
            localVarFormParams.put("StatusCallbackMethod", statusCallbackMethod);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (unusedRoomTimeout != null) {
            localVarFormParams.put("UnusedRoomTimeout", unusedRoomTimeout);
        }

        if (videoCodecs != null) {
            localVarFormParams.put("VideoCodecs", videoCodecs);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoomValidateBeforeCall(Boolean audioOnly, Integer emptyRoomTimeout, Boolean enableTurn, Boolean largeRoom, Integer maxParticipantDuration, Integer maxParticipants, String mediaRegion, Boolean recordParticipantsOnConnect, Object recordingRules, URI statusCallback, String statusCallbackMethod, RoomEnumRoomType type, String uniqueName, Integer unusedRoomTimeout, List<RoomEnumVideoCodec> videoCodecs, final ApiCallback _callback) throws ApiException {
        return createRoomCall(audioOnly, emptyRoomTimeout, enableTurn, largeRoom, maxParticipantDuration, maxParticipants, mediaRegion, recordParticipantsOnConnect, recordingRules, statusCallback, statusCallbackMethod, type, uniqueName, unusedRoomTimeout, videoCodecs, _callback);

    }

    /**
     * 
     * 
     * @param audioOnly When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only. (optional)
     * @param emptyRoomTimeout Configures how long (in minutes) a room will remain active after last participant leaves. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param enableTurn Deprecated, now always considered to be true. (optional)
     * @param largeRoom When set to true, indicated that this is the large room. (optional)
     * @param maxParticipantDuration The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours). (optional)
     * @param maxParticipants The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants. (optional)
     * @param mediaRegion The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-addresses#group-rooms-media-servers). ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordParticipantsOnConnect Whether to start recording when Participants connect. ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordingRules A collection of Recording Rules that describe how to include or exclude matching tracks for recording (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be &#x60;POST&#x60; or &#x60;GET&#x60;. (optional)
     * @param type  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used as a &#x60;room_sid&#x60; in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for &#x60;in-progress&#x60; rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is &#x60;in-progress&#x60;. (optional)
     * @param unusedRoomTimeout Configures how long (in minutes) a room will remain active if no one joins. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param videoCodecs An array of the video codecs that are supported when publishing a track in the room.  Can be: &#x60;VP8&#x60; and &#x60;H264&#x60;.  ***This feature is not available in &#x60;peer-to-peer&#x60; rooms*** (optional)
     * @return VideoV1Room
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VideoV1Room createRoom(Boolean audioOnly, Integer emptyRoomTimeout, Boolean enableTurn, Boolean largeRoom, Integer maxParticipantDuration, Integer maxParticipants, String mediaRegion, Boolean recordParticipantsOnConnect, Object recordingRules, URI statusCallback, String statusCallbackMethod, RoomEnumRoomType type, String uniqueName, Integer unusedRoomTimeout, List<RoomEnumVideoCodec> videoCodecs) throws ApiException {
        ApiResponse<VideoV1Room> localVarResp = createRoomWithHttpInfo(audioOnly, emptyRoomTimeout, enableTurn, largeRoom, maxParticipantDuration, maxParticipants, mediaRegion, recordParticipantsOnConnect, recordingRules, statusCallback, statusCallbackMethod, type, uniqueName, unusedRoomTimeout, videoCodecs);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param audioOnly When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only. (optional)
     * @param emptyRoomTimeout Configures how long (in minutes) a room will remain active after last participant leaves. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param enableTurn Deprecated, now always considered to be true. (optional)
     * @param largeRoom When set to true, indicated that this is the large room. (optional)
     * @param maxParticipantDuration The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours). (optional)
     * @param maxParticipants The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants. (optional)
     * @param mediaRegion The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-addresses#group-rooms-media-servers). ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordParticipantsOnConnect Whether to start recording when Participants connect. ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordingRules A collection of Recording Rules that describe how to include or exclude matching tracks for recording (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be &#x60;POST&#x60; or &#x60;GET&#x60;. (optional)
     * @param type  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used as a &#x60;room_sid&#x60; in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for &#x60;in-progress&#x60; rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is &#x60;in-progress&#x60;. (optional)
     * @param unusedRoomTimeout Configures how long (in minutes) a room will remain active if no one joins. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param videoCodecs An array of the video codecs that are supported when publishing a track in the room.  Can be: &#x60;VP8&#x60; and &#x60;H264&#x60;.  ***This feature is not available in &#x60;peer-to-peer&#x60; rooms*** (optional)
     * @return ApiResponse&lt;VideoV1Room&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoV1Room> createRoomWithHttpInfo(Boolean audioOnly, Integer emptyRoomTimeout, Boolean enableTurn, Boolean largeRoom, Integer maxParticipantDuration, Integer maxParticipants, String mediaRegion, Boolean recordParticipantsOnConnect, Object recordingRules, URI statusCallback, String statusCallbackMethod, RoomEnumRoomType type, String uniqueName, Integer unusedRoomTimeout, List<RoomEnumVideoCodec> videoCodecs) throws ApiException {
        okhttp3.Call localVarCall = createRoomValidateBeforeCall(audioOnly, emptyRoomTimeout, enableTurn, largeRoom, maxParticipantDuration, maxParticipants, mediaRegion, recordParticipantsOnConnect, recordingRules, statusCallback, statusCallbackMethod, type, uniqueName, unusedRoomTimeout, videoCodecs, null);
        Type localVarReturnType = new TypeToken<VideoV1Room>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param audioOnly When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only. (optional)
     * @param emptyRoomTimeout Configures how long (in minutes) a room will remain active after last participant leaves. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param enableTurn Deprecated, now always considered to be true. (optional)
     * @param largeRoom When set to true, indicated that this is the large room. (optional)
     * @param maxParticipantDuration The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours). (optional)
     * @param maxParticipants The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants. (optional)
     * @param mediaRegion The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-addresses#group-rooms-media-servers). ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordParticipantsOnConnect Whether to start recording when Participants connect. ***This feature is not available in &#x60;peer-to-peer&#x60; rooms.*** (optional)
     * @param recordingRules A collection of Recording Rules that describe how to include or exclude matching tracks for recording (optional)
     * @param statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info. (optional)
     * @param statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be &#x60;POST&#x60; or &#x60;GET&#x60;. (optional)
     * @param type  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used as a &#x60;room_sid&#x60; in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for &#x60;in-progress&#x60; rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is &#x60;in-progress&#x60;. (optional)
     * @param unusedRoomTimeout Configures how long (in minutes) a room will remain active if no one joins. Valid values range from 1 to 60 minutes (no fractions). (optional)
     * @param videoCodecs An array of the video codecs that are supported when publishing a track in the room.  Can be: &#x60;VP8&#x60; and &#x60;H264&#x60;.  ***This feature is not available in &#x60;peer-to-peer&#x60; rooms*** (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoomAsync(Boolean audioOnly, Integer emptyRoomTimeout, Boolean enableTurn, Boolean largeRoom, Integer maxParticipantDuration, Integer maxParticipants, String mediaRegion, Boolean recordParticipantsOnConnect, Object recordingRules, URI statusCallback, String statusCallbackMethod, RoomEnumRoomType type, String uniqueName, Integer unusedRoomTimeout, List<RoomEnumVideoCodec> videoCodecs, final ApiCallback<VideoV1Room> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoomValidateBeforeCall(audioOnly, emptyRoomTimeout, enableTurn, largeRoom, maxParticipantDuration, maxParticipants, mediaRegion, recordParticipantsOnConnect, recordingRules, statusCallback, statusCallbackMethod, type, uniqueName, unusedRoomTimeout, videoCodecs, _callback);
        Type localVarReturnType = new TypeToken<VideoV1Room>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRoom
     * @param sid The SID of the Room resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRoomCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://video.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Rooms/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRoomValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchRoom(Async)");
        }

        return fetchRoomCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid The SID of the Room resource to fetch. (required)
     * @return VideoV1Room
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VideoV1Room fetchRoom(String sid) throws ApiException {
        ApiResponse<VideoV1Room> localVarResp = fetchRoomWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The SID of the Room resource to fetch. (required)
     * @return ApiResponse&lt;VideoV1Room&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoV1Room> fetchRoomWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchRoomValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<VideoV1Room>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The SID of the Room resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRoomAsync(String sid, final ApiCallback<VideoV1Room> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRoomValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<VideoV1Room>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoom
     * @param status Read only the rooms with this status. Can be: &#x60;in-progress&#x60; (default) or &#x60;completed&#x60; (optional)
     * @param uniqueName Read only rooms with the this &#x60;unique_name&#x60;. (optional)
     * @param dateCreatedAfter Read only rooms that started on or after this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param dateCreatedBefore Read only rooms that started before this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoomCall(RoomEnumRoomStatus status, String uniqueName, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://video.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Rooms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (uniqueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UniqueName", uniqueName));
        }

        if (dateCreatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreatedAfter", dateCreatedAfter));
        }

        if (dateCreatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DateCreatedBefore", dateCreatedBefore));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoomValidateBeforeCall(RoomEnumRoomStatus status, String uniqueName, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listRoomCall(status, uniqueName, dateCreatedAfter, dateCreatedBefore, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param status Read only the rooms with this status. Can be: &#x60;in-progress&#x60; (default) or &#x60;completed&#x60; (optional)
     * @param uniqueName Read only rooms with the this &#x60;unique_name&#x60;. (optional)
     * @param dateCreatedAfter Read only rooms that started on or after this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param dateCreatedBefore Read only rooms that started before this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListRoomResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRoomResponse listRoom(RoomEnumRoomStatus status, String uniqueName, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListRoomResponse> localVarResp = listRoomWithHttpInfo(status, uniqueName, dateCreatedAfter, dateCreatedBefore, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param status Read only the rooms with this status. Can be: &#x60;in-progress&#x60; (default) or &#x60;completed&#x60; (optional)
     * @param uniqueName Read only rooms with the this &#x60;unique_name&#x60;. (optional)
     * @param dateCreatedAfter Read only rooms that started on or after this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param dateCreatedBefore Read only rooms that started before this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListRoomResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRoomResponse> listRoomWithHttpInfo(RoomEnumRoomStatus status, String uniqueName, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listRoomValidateBeforeCall(status, uniqueName, dateCreatedAfter, dateCreatedBefore, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListRoomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param status Read only the rooms with this status. Can be: &#x60;in-progress&#x60; (default) or &#x60;completed&#x60; (optional)
     * @param uniqueName Read only rooms with the this &#x60;unique_name&#x60;. (optional)
     * @param dateCreatedAfter Read only rooms that started on or after this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param dateCreatedBefore Read only rooms that started before this date, given as &#x60;YYYY-MM-DD&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoomAsync(RoomEnumRoomStatus status, String uniqueName, OffsetDateTime dateCreatedAfter, OffsetDateTime dateCreatedBefore, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListRoomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoomValidateBeforeCall(status, uniqueName, dateCreatedAfter, dateCreatedBefore, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListRoomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRoom
     * @param sid The SID of the Room resource to update. (required)
     * @param status  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoomCall(String sid, RoomEnumRoomStatus status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://video.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Rooms/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoomValidateBeforeCall(String sid, RoomEnumRoomStatus status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateRoom(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateRoom(Async)");
        }

        return updateRoomCall(sid, status, _callback);

    }

    /**
     * 
     * 
     * @param sid The SID of the Room resource to update. (required)
     * @param status  (required)
     * @return VideoV1Room
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VideoV1Room updateRoom(String sid, RoomEnumRoomStatus status) throws ApiException {
        ApiResponse<VideoV1Room> localVarResp = updateRoomWithHttpInfo(sid, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid The SID of the Room resource to update. (required)
     * @param status  (required)
     * @return ApiResponse&lt;VideoV1Room&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoV1Room> updateRoomWithHttpInfo(String sid, RoomEnumRoomStatus status) throws ApiException {
        okhttp3.Call localVarCall = updateRoomValidateBeforeCall(sid, status, null);
        Type localVarReturnType = new TypeToken<VideoV1Room>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid The SID of the Room resource to update. (required)
     * @param status  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoomAsync(String sid, RoomEnumRoomStatus status, final ApiCallback<VideoV1Room> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoomValidateBeforeCall(sid, status, _callback);
        Type localVarReturnType = new TypeToken<VideoV1Room>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
