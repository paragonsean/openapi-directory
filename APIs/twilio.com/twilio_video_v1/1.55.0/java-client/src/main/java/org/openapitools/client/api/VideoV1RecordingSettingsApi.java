/*
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.net.URI;
import org.openapitools.client.model.VideoV1RecordingSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideoV1RecordingSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideoV1RecordingSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideoV1RecordingSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRecordingSettings
     * @param friendlyName A descriptive string that you create to describe the resource and be shown to users in the console (required)
     * @param awsCredentialsSid The SID of the stored Credential resource. (optional)
     * @param awsS3Url The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like &#x60;https://documentation-example-twilio-bucket/recordings&#x60;, where &#x60;recordings&#x60; is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the [RFC 3986](https://tools.ietf.org/html/rfc3986#section-2). (optional)
     * @param awsStorageEnabled Whether all recordings should be written to the &#x60;aws_s3_url&#x60;. When &#x60;false&#x60;, all recordings are stored in our cloud. (optional)
     * @param encryptionEnabled Whether all recordings should be stored in an encrypted form. The default is &#x60;false&#x60;. (optional)
     * @param encryptionKeySid The SID of the Public Key resource to use for encryption. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordingSettingsCall(String friendlyName, String awsCredentialsSid, URI awsS3Url, Boolean awsStorageEnabled, Boolean encryptionEnabled, String encryptionKeySid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://video.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/RecordingSettings/Default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awsCredentialsSid != null) {
            localVarFormParams.put("AwsCredentialsSid", awsCredentialsSid);
        }

        if (awsS3Url != null) {
            localVarFormParams.put("AwsS3Url", awsS3Url);
        }

        if (awsStorageEnabled != null) {
            localVarFormParams.put("AwsStorageEnabled", awsStorageEnabled);
        }

        if (encryptionEnabled != null) {
            localVarFormParams.put("EncryptionEnabled", encryptionEnabled);
        }

        if (encryptionKeySid != null) {
            localVarFormParams.put("EncryptionKeySid", encryptionKeySid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecordingSettingsValidateBeforeCall(String friendlyName, String awsCredentialsSid, URI awsS3Url, Boolean awsStorageEnabled, Boolean encryptionEnabled, String encryptionKeySid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createRecordingSettings(Async)");
        }

        return createRecordingSettingsCall(friendlyName, awsCredentialsSid, awsS3Url, awsStorageEnabled, encryptionEnabled, encryptionKeySid, _callback);

    }

    /**
     * 
     * 
     * @param friendlyName A descriptive string that you create to describe the resource and be shown to users in the console (required)
     * @param awsCredentialsSid The SID of the stored Credential resource. (optional)
     * @param awsS3Url The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like &#x60;https://documentation-example-twilio-bucket/recordings&#x60;, where &#x60;recordings&#x60; is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the [RFC 3986](https://tools.ietf.org/html/rfc3986#section-2). (optional)
     * @param awsStorageEnabled Whether all recordings should be written to the &#x60;aws_s3_url&#x60;. When &#x60;false&#x60;, all recordings are stored in our cloud. (optional)
     * @param encryptionEnabled Whether all recordings should be stored in an encrypted form. The default is &#x60;false&#x60;. (optional)
     * @param encryptionKeySid The SID of the Public Key resource to use for encryption. (optional)
     * @return VideoV1RecordingSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public VideoV1RecordingSettings createRecordingSettings(String friendlyName, String awsCredentialsSid, URI awsS3Url, Boolean awsStorageEnabled, Boolean encryptionEnabled, String encryptionKeySid) throws ApiException {
        ApiResponse<VideoV1RecordingSettings> localVarResp = createRecordingSettingsWithHttpInfo(friendlyName, awsCredentialsSid, awsS3Url, awsStorageEnabled, encryptionEnabled, encryptionKeySid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param friendlyName A descriptive string that you create to describe the resource and be shown to users in the console (required)
     * @param awsCredentialsSid The SID of the stored Credential resource. (optional)
     * @param awsS3Url The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like &#x60;https://documentation-example-twilio-bucket/recordings&#x60;, where &#x60;recordings&#x60; is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the [RFC 3986](https://tools.ietf.org/html/rfc3986#section-2). (optional)
     * @param awsStorageEnabled Whether all recordings should be written to the &#x60;aws_s3_url&#x60;. When &#x60;false&#x60;, all recordings are stored in our cloud. (optional)
     * @param encryptionEnabled Whether all recordings should be stored in an encrypted form. The default is &#x60;false&#x60;. (optional)
     * @param encryptionKeySid The SID of the Public Key resource to use for encryption. (optional)
     * @return ApiResponse&lt;VideoV1RecordingSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoV1RecordingSettings> createRecordingSettingsWithHttpInfo(String friendlyName, String awsCredentialsSid, URI awsS3Url, Boolean awsStorageEnabled, Boolean encryptionEnabled, String encryptionKeySid) throws ApiException {
        okhttp3.Call localVarCall = createRecordingSettingsValidateBeforeCall(friendlyName, awsCredentialsSid, awsS3Url, awsStorageEnabled, encryptionEnabled, encryptionKeySid, null);
        Type localVarReturnType = new TypeToken<VideoV1RecordingSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param friendlyName A descriptive string that you create to describe the resource and be shown to users in the console (required)
     * @param awsCredentialsSid The SID of the stored Credential resource. (optional)
     * @param awsS3Url The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like &#x60;https://documentation-example-twilio-bucket/recordings&#x60;, where &#x60;recordings&#x60; is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the [RFC 3986](https://tools.ietf.org/html/rfc3986#section-2). (optional)
     * @param awsStorageEnabled Whether all recordings should be written to the &#x60;aws_s3_url&#x60;. When &#x60;false&#x60;, all recordings are stored in our cloud. (optional)
     * @param encryptionEnabled Whether all recordings should be stored in an encrypted form. The default is &#x60;false&#x60;. (optional)
     * @param encryptionKeySid The SID of the Public Key resource to use for encryption. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordingSettingsAsync(String friendlyName, String awsCredentialsSid, URI awsS3Url, Boolean awsStorageEnabled, Boolean encryptionEnabled, String encryptionKeySid, final ApiCallback<VideoV1RecordingSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecordingSettingsValidateBeforeCall(friendlyName, awsCredentialsSid, awsS3Url, awsStorageEnabled, encryptionEnabled, encryptionKeySid, _callback);
        Type localVarReturnType = new TypeToken<VideoV1RecordingSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRecordingSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRecordingSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://video.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/RecordingSettings/Default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRecordingSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return fetchRecordingSettingsCall(_callback);

    }

    /**
     * 
     * 
     * @return VideoV1RecordingSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VideoV1RecordingSettings fetchRecordingSettings() throws ApiException {
        ApiResponse<VideoV1RecordingSettings> localVarResp = fetchRecordingSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;VideoV1RecordingSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoV1RecordingSettings> fetchRecordingSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = fetchRecordingSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VideoV1RecordingSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRecordingSettingsAsync(final ApiCallback<VideoV1RecordingSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRecordingSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VideoV1RecordingSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
