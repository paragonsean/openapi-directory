/*
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompositionHookEnumFormat;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoV1CompositionHook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:06.985861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoV1CompositionHook {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_AUDIO_SOURCES = "audio_sources";
  @SerializedName(SERIALIZED_NAME_AUDIO_SOURCES)
  private List<String> audioSources;

  public static final String SERIALIZED_NAME_AUDIO_SOURCES_EXCLUDED = "audio_sources_excluded";
  @SerializedName(SERIALIZED_NAME_AUDIO_SOURCES_EXCLUDED)
  private List<String> audioSourcesExcluded;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private CompositionHookEnumFormat format;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private String resolution;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_STATUS_CALLBACK = "status_callback";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK)
  private URI statusCallback;

  /**
   * The HTTP method we should use to call &#x60;status_callback&#x60;. Can be &#x60;POST&#x60; or &#x60;GET&#x60; and defaults to &#x60;POST&#x60;.
   */
  @JsonAdapter(StatusCallbackMethodEnum.Adapter.class)
  public enum StatusCallbackMethodEnum {
    HEAD("HEAD"),
    
    GET("GET"),
    
    POST("POST"),
    
    PATCH("PATCH"),
    
    PUT("PUT"),
    
    DELETE("DELETE");

    private String value;

    StatusCallbackMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCallbackMethodEnum fromValue(String value) {
      for (StatusCallbackMethodEnum b : StatusCallbackMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusCallbackMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCallbackMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCallbackMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCallbackMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCallbackMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CALLBACK_METHOD = "status_callback_method";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK_METHOD)
  private StatusCallbackMethodEnum statusCallbackMethod;

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private Boolean trim;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VIDEO_LAYOUT = "video_layout";
  @SerializedName(SERIALIZED_NAME_VIDEO_LAYOUT)
  private Object videoLayout = null;

  public VideoV1CompositionHook() {
  }

  public VideoV1CompositionHook accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionHook resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public VideoV1CompositionHook audioSources(List<String> audioSources) {
    this.audioSources = audioSources;
    return this;
  }

  public VideoV1CompositionHook addAudioSourcesItem(String audioSourcesItem) {
    if (this.audioSources == null) {
      this.audioSources = new ArrayList<>();
    }
    this.audioSources.add(audioSourcesItem);
    return this;
  }

  /**
   * The array of track names to include in the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in &#x60;audio_sources&#x60; except those specified in &#x60;audio_sources_excluded&#x60;. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, &#x60;student*&#x60; includes tracks named &#x60;student&#x60; as well as &#x60;studentTeam&#x60;. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
   * @return audioSources
   */
  @javax.annotation.Nullable
  public List<String> getAudioSources() {
    return audioSources;
  }

  public void setAudioSources(List<String> audioSources) {
    this.audioSources = audioSources;
  }


  public VideoV1CompositionHook audioSourcesExcluded(List<String> audioSourcesExcluded) {
    this.audioSourcesExcluded = audioSourcesExcluded;
    return this;
  }

  public VideoV1CompositionHook addAudioSourcesExcludedItem(String audioSourcesExcludedItem) {
    if (this.audioSourcesExcluded == null) {
      this.audioSourcesExcluded = new ArrayList<>();
    }
    this.audioSourcesExcluded.add(audioSourcesExcludedItem);
    return this;
  }

  /**
   * The array of track names to exclude from the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in &#x60;audio_sources&#x60; except for those specified in &#x60;audio_sources_excluded&#x60;. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, &#x60;student*&#x60; excludes &#x60;student&#x60; as well as &#x60;studentTeam&#x60;. This parameter can also be empty.
   * @return audioSourcesExcluded
   */
  @javax.annotation.Nullable
  public List<String> getAudioSourcesExcluded() {
    return audioSourcesExcluded;
  }

  public void setAudioSourcesExcluded(List<String> audioSourcesExcluded) {
    this.audioSourcesExcluded = audioSourcesExcluded;
  }


  public VideoV1CompositionHook dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public VideoV1CompositionHook dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public VideoV1CompositionHook enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether the CompositionHook is active. When &#x60;true&#x60;, the CompositionHook is triggered for every completed Group Room on the account. When &#x60;false&#x60;, the CompositionHook is never triggered.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public VideoV1CompositionHook format(CompositionHookEnumFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public CompositionHookEnumFormat getFormat() {
    return format;
  }

  public void setFormat(CompositionHookEnumFormat format) {
    this.format = format;
  }


  public VideoV1CompositionHook friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The string that you assigned to describe the resource. Can be up to 100 characters long and must be unique within the account.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public VideoV1CompositionHook resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string&#39;s format is &#x60;{width}x{height}&#x60;, such as &#x60;640x480&#x60;.
   * @return resolution
   */
  @javax.annotation.Nullable
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }


  public VideoV1CompositionHook sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the CompositionHook resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public VideoV1CompositionHook statusCallback(URI statusCallback) {
    this.statusCallback = statusCallback;
    return this;
  }

  /**
   * The URL we call using the &#x60;status_callback_method&#x60; to send status information to your application.
   * @return statusCallback
   */
  @javax.annotation.Nullable
  public URI getStatusCallback() {
    return statusCallback;
  }

  public void setStatusCallback(URI statusCallback) {
    this.statusCallback = statusCallback;
  }


  public VideoV1CompositionHook statusCallbackMethod(StatusCallbackMethodEnum statusCallbackMethod) {
    this.statusCallbackMethod = statusCallbackMethod;
    return this;
  }

  /**
   * The HTTP method we should use to call &#x60;status_callback&#x60;. Can be &#x60;POST&#x60; or &#x60;GET&#x60; and defaults to &#x60;POST&#x60;.
   * @return statusCallbackMethod
   */
  @javax.annotation.Nullable
  public StatusCallbackMethodEnum getStatusCallbackMethod() {
    return statusCallbackMethod;
  }

  public void setStatusCallbackMethod(StatusCallbackMethodEnum statusCallbackMethod) {
    this.statusCallbackMethod = statusCallbackMethod;
  }


  public VideoV1CompositionHook trim(Boolean trim) {
    this.trim = trim;
    return this;
  }

  /**
   * Whether intervals with no media are clipped, as specified in the POST request that created the CompositionHook resource. Compositions with &#x60;trim&#x60; enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
   * @return trim
   */
  @javax.annotation.Nullable
  public Boolean getTrim() {
    return trim;
  }

  public void setTrim(Boolean trim) {
    this.trim = trim;
  }


  public VideoV1CompositionHook url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public VideoV1CompositionHook videoLayout(Object videoLayout) {
    this.videoLayout = videoLayout;
    return this;
  }

  /**
   * A JSON object that describes the video layout of the composition in terms of regions as specified in the HTTP POST request that created the CompositionHook resource. See [POST Parameters](https://www.twilio.com/docs/video/api/compositions-resource#http-post-parameters) for more information. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
   * @return videoLayout
   */
  @javax.annotation.Nullable
  public Object getVideoLayout() {
    return videoLayout;
  }

  public void setVideoLayout(Object videoLayout) {
    this.videoLayout = videoLayout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoV1CompositionHook videoV1CompositionHook = (VideoV1CompositionHook) o;
    return Objects.equals(this.accountSid, videoV1CompositionHook.accountSid) &&
        Objects.equals(this.audioSources, videoV1CompositionHook.audioSources) &&
        Objects.equals(this.audioSourcesExcluded, videoV1CompositionHook.audioSourcesExcluded) &&
        Objects.equals(this.dateCreated, videoV1CompositionHook.dateCreated) &&
        Objects.equals(this.dateUpdated, videoV1CompositionHook.dateUpdated) &&
        Objects.equals(this.enabled, videoV1CompositionHook.enabled) &&
        Objects.equals(this.format, videoV1CompositionHook.format) &&
        Objects.equals(this.friendlyName, videoV1CompositionHook.friendlyName) &&
        Objects.equals(this.resolution, videoV1CompositionHook.resolution) &&
        Objects.equals(this.sid, videoV1CompositionHook.sid) &&
        Objects.equals(this.statusCallback, videoV1CompositionHook.statusCallback) &&
        Objects.equals(this.statusCallbackMethod, videoV1CompositionHook.statusCallbackMethod) &&
        Objects.equals(this.trim, videoV1CompositionHook.trim) &&
        Objects.equals(this.url, videoV1CompositionHook.url) &&
        Objects.equals(this.videoLayout, videoV1CompositionHook.videoLayout);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, audioSources, audioSourcesExcluded, dateCreated, dateUpdated, enabled, format, friendlyName, resolution, sid, statusCallback, statusCallbackMethod, trim, url, videoLayout);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoV1CompositionHook {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    audioSources: ").append(toIndentedString(audioSources)).append("\n");
    sb.append("    audioSourcesExcluded: ").append(toIndentedString(audioSourcesExcluded)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    statusCallback: ").append(toIndentedString(statusCallback)).append("\n");
    sb.append("    statusCallbackMethod: ").append(toIndentedString(statusCallbackMethod)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    videoLayout: ").append(toIndentedString(videoLayout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("audio_sources");
    openapiFields.add("audio_sources_excluded");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("enabled");
    openapiFields.add("format");
    openapiFields.add("friendly_name");
    openapiFields.add("resolution");
    openapiFields.add("sid");
    openapiFields.add("status_callback");
    openapiFields.add("status_callback_method");
    openapiFields.add("trim");
    openapiFields.add("url");
    openapiFields.add("video_layout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoV1CompositionHook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoV1CompositionHook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoV1CompositionHook is not found in the empty JSON string", VideoV1CompositionHook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoV1CompositionHook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoV1CompositionHook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audio_sources") != null && !jsonObj.get("audio_sources").isJsonNull() && !jsonObj.get("audio_sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_sources` to be an array in the JSON string but got `%s`", jsonObj.get("audio_sources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audio_sources_excluded") != null && !jsonObj.get("audio_sources_excluded").isJsonNull() && !jsonObj.get("audio_sources_excluded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_sources_excluded` to be an array in the JSON string but got `%s`", jsonObj.get("audio_sources_excluded").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        CompositionHookEnumFormat.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("status_callback") != null && !jsonObj.get("status_callback").isJsonNull()) && !jsonObj.get("status_callback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_callback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_callback").toString()));
      }
      if ((jsonObj.get("status_callback_method") != null && !jsonObj.get("status_callback_method").isJsonNull()) && !jsonObj.get("status_callback_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_callback_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_callback_method").toString()));
      }
      // validate the optional field `status_callback_method`
      if (jsonObj.get("status_callback_method") != null && !jsonObj.get("status_callback_method").isJsonNull()) {
        StatusCallbackMethodEnum.validateJsonElement(jsonObj.get("status_callback_method"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoV1CompositionHook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoV1CompositionHook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoV1CompositionHook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoV1CompositionHook.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoV1CompositionHook>() {
           @Override
           public void write(JsonWriter out, VideoV1CompositionHook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoV1CompositionHook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoV1CompositionHook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoV1CompositionHook
   * @throws IOException if the JSON string is invalid with respect to VideoV1CompositionHook
   */
  public static VideoV1CompositionHook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoV1CompositionHook.class);
  }

  /**
   * Convert an instance of VideoV1CompositionHook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

