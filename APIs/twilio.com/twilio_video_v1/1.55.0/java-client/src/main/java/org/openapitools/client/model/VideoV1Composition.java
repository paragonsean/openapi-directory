/*
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompositionEnumFormat;
import org.openapitools.client.model.CompositionEnumStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoV1Composition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:06.985861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoV1Composition {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_AUDIO_SOURCES = "audio_sources";
  @SerializedName(SERIALIZED_NAME_AUDIO_SOURCES)
  private List<String> audioSources;

  public static final String SERIALIZED_NAME_AUDIO_SOURCES_EXCLUDED = "audio_sources_excluded";
  @SerializedName(SERIALIZED_NAME_AUDIO_SOURCES_EXCLUDED)
  private List<String> audioSourcesExcluded;

  public static final String SERIALIZED_NAME_BITRATE = "bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "date_completed";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_DELETED = "date_deleted";
  @SerializedName(SERIALIZED_NAME_DATE_DELETED)
  private OffsetDateTime dateDeleted;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private CompositionEnumFormat format;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MEDIA_EXTERNAL_LOCATION = "media_external_location";
  @SerializedName(SERIALIZED_NAME_MEDIA_EXTERNAL_LOCATION)
  private URI mediaExternalLocation;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private String resolution;

  public static final String SERIALIZED_NAME_ROOM_SID = "room_sid";
  @SerializedName(SERIALIZED_NAME_ROOM_SID)
  private String roomSid;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CompositionEnumStatus status;

  public static final String SERIALIZED_NAME_STATUS_CALLBACK = "status_callback";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK)
  private URI statusCallback;

  /**
   * The HTTP method used to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;, defaults to &#x60;POST&#x60;.
   */
  @JsonAdapter(StatusCallbackMethodEnum.Adapter.class)
  public enum StatusCallbackMethodEnum {
    HEAD("HEAD"),
    
    GET("GET"),
    
    POST("POST"),
    
    PATCH("PATCH"),
    
    PUT("PUT"),
    
    DELETE("DELETE");

    private String value;

    StatusCallbackMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCallbackMethodEnum fromValue(String value) {
      for (StatusCallbackMethodEnum b : StatusCallbackMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusCallbackMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCallbackMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCallbackMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCallbackMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCallbackMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CALLBACK_METHOD = "status_callback_method";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK_METHOD)
  private StatusCallbackMethodEnum statusCallbackMethod;

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private Boolean trim;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VIDEO_LAYOUT = "video_layout";
  @SerializedName(SERIALIZED_NAME_VIDEO_LAYOUT)
  private Object videoLayout = null;

  public VideoV1Composition() {
  }

  public VideoV1Composition accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Composition resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public VideoV1Composition audioSources(List<String> audioSources) {
    this.audioSources = audioSources;
    return this;
  }

  public VideoV1Composition addAudioSourcesItem(String audioSourcesItem) {
    if (this.audioSources == null) {
      this.audioSources = new ArrayList<>();
    }
    this.audioSources.add(audioSourcesItem);
    return this;
  }

  /**
   * The array of track names to include in the composition. The composition includes all audio sources specified in &#x60;audio_sources&#x60; except those specified in &#x60;audio_sources_excluded&#x60;. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, &#x60;student*&#x60; includes tracks named &#x60;student&#x60; as well as &#x60;studentTeam&#x60;.
   * @return audioSources
   */
  @javax.annotation.Nullable
  public List<String> getAudioSources() {
    return audioSources;
  }

  public void setAudioSources(List<String> audioSources) {
    this.audioSources = audioSources;
  }


  public VideoV1Composition audioSourcesExcluded(List<String> audioSourcesExcluded) {
    this.audioSourcesExcluded = audioSourcesExcluded;
    return this;
  }

  public VideoV1Composition addAudioSourcesExcludedItem(String audioSourcesExcludedItem) {
    if (this.audioSourcesExcluded == null) {
      this.audioSourcesExcluded = new ArrayList<>();
    }
    this.audioSourcesExcluded.add(audioSourcesExcludedItem);
    return this;
  }

  /**
   * The array of track names to exclude from the composition. The composition includes all audio sources specified in &#x60;audio_sources&#x60; except for those specified in &#x60;audio_sources_excluded&#x60;. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, &#x60;student*&#x60; excludes &#x60;student&#x60; as well as &#x60;studentTeam&#x60;. This parameter can also be empty.
   * @return audioSourcesExcluded
   */
  @javax.annotation.Nullable
  public List<String> getAudioSourcesExcluded() {
    return audioSourcesExcluded;
  }

  public void setAudioSourcesExcluded(List<String> audioSourcesExcluded) {
    this.audioSourcesExcluded = audioSourcesExcluded;
  }


  public VideoV1Composition bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * The average bit rate of the composition&#39;s media.
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public VideoV1Composition dateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
    return this;
  }

  /**
   * The date and time in GMT when the composition&#39;s media processing task finished, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }

  public void setDateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public VideoV1Composition dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public VideoV1Composition dateDeleted(OffsetDateTime dateDeleted) {
    this.dateDeleted = dateDeleted;
    return this;
  }

  /**
   * The date and time in GMT when the composition generated media was deleted, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateDeleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateDeleted() {
    return dateDeleted;
  }

  public void setDateDeleted(OffsetDateTime dateDeleted) {
    this.dateDeleted = dateDeleted;
  }


  public VideoV1Composition duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the composition&#39;s media file in seconds.
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public VideoV1Composition format(CompositionEnumFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public CompositionEnumFormat getFormat() {
    return format;
  }

  public void setFormat(CompositionEnumFormat format) {
    this.format = format;
  }


  public VideoV1Composition links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The URL of the media file associated with the composition.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public VideoV1Composition mediaExternalLocation(URI mediaExternalLocation) {
    this.mediaExternalLocation = mediaExternalLocation;
    return this;
  }

  /**
   * The URL of the media file associated with the composition when stored externally. See [External S3 Compositions](/docs/video/api/external-s3-compositions) for more details.
   * @return mediaExternalLocation
   */
  @javax.annotation.Nullable
  public URI getMediaExternalLocation() {
    return mediaExternalLocation;
  }

  public void setMediaExternalLocation(URI mediaExternalLocation) {
    this.mediaExternalLocation = mediaExternalLocation;
  }


  public VideoV1Composition resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string&#39;s format is &#x60;{width}x{height}&#x60;, such as &#x60;640x480&#x60;.
   * @return resolution
   */
  @javax.annotation.Nullable
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }


  public VideoV1Composition roomSid(String roomSid) {
    this.roomSid = roomSid;
    return this;
  }

  /**
   * The SID of the Group Room that generated the audio and video tracks used in the composition. All media sources included in a composition must belong to the same Group Room.
   * @return roomSid
   */
  @javax.annotation.Nullable
  public String getRoomSid() {
    return roomSid;
  }

  public void setRoomSid(String roomSid) {
    this.roomSid = roomSid;
  }


  public VideoV1Composition sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Composition resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public VideoV1Composition size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the composed media file in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public VideoV1Composition status(CompositionEnumStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CompositionEnumStatus getStatus() {
    return status;
  }

  public void setStatus(CompositionEnumStatus status) {
    this.status = status;
  }


  public VideoV1Composition statusCallback(URI statusCallback) {
    this.statusCallback = statusCallback;
    return this;
  }

  /**
   * The URL called using the &#x60;status_callback_method&#x60; to send status information on every composition event.
   * @return statusCallback
   */
  @javax.annotation.Nullable
  public URI getStatusCallback() {
    return statusCallback;
  }

  public void setStatusCallback(URI statusCallback) {
    this.statusCallback = statusCallback;
  }


  public VideoV1Composition statusCallbackMethod(StatusCallbackMethodEnum statusCallbackMethod) {
    this.statusCallbackMethod = statusCallbackMethod;
    return this;
  }

  /**
   * The HTTP method used to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;, defaults to &#x60;POST&#x60;.
   * @return statusCallbackMethod
   */
  @javax.annotation.Nullable
  public StatusCallbackMethodEnum getStatusCallbackMethod() {
    return statusCallbackMethod;
  }

  public void setStatusCallbackMethod(StatusCallbackMethodEnum statusCallbackMethod) {
    this.statusCallbackMethod = statusCallbackMethod;
  }


  public VideoV1Composition trim(Boolean trim) {
    this.trim = trim;
    return this;
  }

  /**
   * Whether to remove intervals with no media, as specified in the POST request that created the composition. Compositions with &#x60;trim&#x60; enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
   * @return trim
   */
  @javax.annotation.Nullable
  public Boolean getTrim() {
    return trim;
  }

  public void setTrim(Boolean trim) {
    this.trim = trim;
  }


  public VideoV1Composition url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public VideoV1Composition videoLayout(Object videoLayout) {
    this.videoLayout = videoLayout;
    return this;
  }

  /**
   * An object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
   * @return videoLayout
   */
  @javax.annotation.Nullable
  public Object getVideoLayout() {
    return videoLayout;
  }

  public void setVideoLayout(Object videoLayout) {
    this.videoLayout = videoLayout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoV1Composition videoV1Composition = (VideoV1Composition) o;
    return Objects.equals(this.accountSid, videoV1Composition.accountSid) &&
        Objects.equals(this.audioSources, videoV1Composition.audioSources) &&
        Objects.equals(this.audioSourcesExcluded, videoV1Composition.audioSourcesExcluded) &&
        Objects.equals(this.bitrate, videoV1Composition.bitrate) &&
        Objects.equals(this.dateCompleted, videoV1Composition.dateCompleted) &&
        Objects.equals(this.dateCreated, videoV1Composition.dateCreated) &&
        Objects.equals(this.dateDeleted, videoV1Composition.dateDeleted) &&
        Objects.equals(this.duration, videoV1Composition.duration) &&
        Objects.equals(this.format, videoV1Composition.format) &&
        Objects.equals(this.links, videoV1Composition.links) &&
        Objects.equals(this.mediaExternalLocation, videoV1Composition.mediaExternalLocation) &&
        Objects.equals(this.resolution, videoV1Composition.resolution) &&
        Objects.equals(this.roomSid, videoV1Composition.roomSid) &&
        Objects.equals(this.sid, videoV1Composition.sid) &&
        Objects.equals(this.size, videoV1Composition.size) &&
        Objects.equals(this.status, videoV1Composition.status) &&
        Objects.equals(this.statusCallback, videoV1Composition.statusCallback) &&
        Objects.equals(this.statusCallbackMethod, videoV1Composition.statusCallbackMethod) &&
        Objects.equals(this.trim, videoV1Composition.trim) &&
        Objects.equals(this.url, videoV1Composition.url) &&
        Objects.equals(this.videoLayout, videoV1Composition.videoLayout);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, audioSources, audioSourcesExcluded, bitrate, dateCompleted, dateCreated, dateDeleted, duration, format, links, mediaExternalLocation, resolution, roomSid, sid, size, status, statusCallback, statusCallbackMethod, trim, url, videoLayout);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoV1Composition {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    audioSources: ").append(toIndentedString(audioSources)).append("\n");
    sb.append("    audioSourcesExcluded: ").append(toIndentedString(audioSourcesExcluded)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateDeleted: ").append(toIndentedString(dateDeleted)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mediaExternalLocation: ").append(toIndentedString(mediaExternalLocation)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    roomSid: ").append(toIndentedString(roomSid)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusCallback: ").append(toIndentedString(statusCallback)).append("\n");
    sb.append("    statusCallbackMethod: ").append(toIndentedString(statusCallbackMethod)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    videoLayout: ").append(toIndentedString(videoLayout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("audio_sources");
    openapiFields.add("audio_sources_excluded");
    openapiFields.add("bitrate");
    openapiFields.add("date_completed");
    openapiFields.add("date_created");
    openapiFields.add("date_deleted");
    openapiFields.add("duration");
    openapiFields.add("format");
    openapiFields.add("links");
    openapiFields.add("media_external_location");
    openapiFields.add("resolution");
    openapiFields.add("room_sid");
    openapiFields.add("sid");
    openapiFields.add("size");
    openapiFields.add("status");
    openapiFields.add("status_callback");
    openapiFields.add("status_callback_method");
    openapiFields.add("trim");
    openapiFields.add("url");
    openapiFields.add("video_layout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoV1Composition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoV1Composition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoV1Composition is not found in the empty JSON string", VideoV1Composition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoV1Composition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoV1Composition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audio_sources") != null && !jsonObj.get("audio_sources").isJsonNull() && !jsonObj.get("audio_sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_sources` to be an array in the JSON string but got `%s`", jsonObj.get("audio_sources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("audio_sources_excluded") != null && !jsonObj.get("audio_sources_excluded").isJsonNull() && !jsonObj.get("audio_sources_excluded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_sources_excluded` to be an array in the JSON string but got `%s`", jsonObj.get("audio_sources_excluded").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        CompositionEnumFormat.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("media_external_location") != null && !jsonObj.get("media_external_location").isJsonNull()) && !jsonObj.get("media_external_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_external_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_external_location").toString()));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      if ((jsonObj.get("room_sid") != null && !jsonObj.get("room_sid").isJsonNull()) && !jsonObj.get("room_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room_sid").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CompositionEnumStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("status_callback") != null && !jsonObj.get("status_callback").isJsonNull()) && !jsonObj.get("status_callback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_callback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_callback").toString()));
      }
      if ((jsonObj.get("status_callback_method") != null && !jsonObj.get("status_callback_method").isJsonNull()) && !jsonObj.get("status_callback_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_callback_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_callback_method").toString()));
      }
      // validate the optional field `status_callback_method`
      if (jsonObj.get("status_callback_method") != null && !jsonObj.get("status_callback_method").isJsonNull()) {
        StatusCallbackMethodEnum.validateJsonElement(jsonObj.get("status_callback_method"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoV1Composition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoV1Composition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoV1Composition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoV1Composition.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoV1Composition>() {
           @Override
           public void write(JsonWriter out, VideoV1Composition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoV1Composition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoV1Composition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoV1Composition
   * @throws IOException if the JSON string is invalid with respect to VideoV1Composition
   */
  public static VideoV1Composition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoV1Composition.class);
  }

  /**
   * Convert an instance of VideoV1Composition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

