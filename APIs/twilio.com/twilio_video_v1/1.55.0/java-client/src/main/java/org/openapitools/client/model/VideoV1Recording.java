/*
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.RecordingEnumCodec;
import org.openapitools.client.model.RecordingEnumFormat;
import org.openapitools.client.model.RecordingEnumStatus;
import org.openapitools.client.model.RecordingEnumType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoV1Recording
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:06.985861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoV1Recording {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CODEC = "codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private RecordingEnumCodec codec;

  public static final String SERIALIZED_NAME_CONTAINER_FORMAT = "container_format";
  @SerializedName(SERIALIZED_NAME_CONTAINER_FORMAT)
  private RecordingEnumFormat containerFormat;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_GROUPING_SIDS = "grouping_sids";
  @SerializedName(SERIALIZED_NAME_GROUPING_SIDS)
  private Object groupingSids = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MEDIA_EXTERNAL_LOCATION = "media_external_location";
  @SerializedName(SERIALIZED_NAME_MEDIA_EXTERNAL_LOCATION)
  private URI mediaExternalLocation;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Long offset;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_SOURCE_SID = "source_sid";
  @SerializedName(SERIALIZED_NAME_SOURCE_SID)
  private String sourceSid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RecordingEnumStatus status;

  public static final String SERIALIZED_NAME_STATUS_CALLBACK = "status_callback";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK)
  private URI statusCallback;

  /**
   * The HTTP method used to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;, defaults to &#x60;POST&#x60;.
   */
  @JsonAdapter(StatusCallbackMethodEnum.Adapter.class)
  public enum StatusCallbackMethodEnum {
    HEAD("HEAD"),
    
    GET("GET"),
    
    POST("POST"),
    
    PATCH("PATCH"),
    
    PUT("PUT"),
    
    DELETE("DELETE");

    private String value;

    StatusCallbackMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCallbackMethodEnum fromValue(String value) {
      for (StatusCallbackMethodEnum b : StatusCallbackMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusCallbackMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCallbackMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCallbackMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCallbackMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCallbackMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CALLBACK_METHOD = "status_callback_method";
  @SerializedName(SERIALIZED_NAME_STATUS_CALLBACK_METHOD)
  private StatusCallbackMethodEnum statusCallbackMethod;

  public static final String SERIALIZED_NAME_TRACK_NAME = "track_name";
  @SerializedName(SERIALIZED_NAME_TRACK_NAME)
  private String trackName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RecordingEnumType type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public VideoV1Recording() {
  }

  public VideoV1Recording accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public VideoV1Recording codec(RecordingEnumCodec codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Get codec
   * @return codec
   */
  @javax.annotation.Nullable
  public RecordingEnumCodec getCodec() {
    return codec;
  }

  public void setCodec(RecordingEnumCodec codec) {
    this.codec = codec;
  }


  public VideoV1Recording containerFormat(RecordingEnumFormat containerFormat) {
    this.containerFormat = containerFormat;
    return this;
  }

  /**
   * Get containerFormat
   * @return containerFormat
   */
  @javax.annotation.Nullable
  public RecordingEnumFormat getContainerFormat() {
    return containerFormat;
  }

  public void setContainerFormat(RecordingEnumFormat containerFormat) {
    this.containerFormat = containerFormat;
  }


  public VideoV1Recording dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public VideoV1Recording duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the recording in seconds rounded to the nearest second. Sub-second tracks have a &#x60;Duration&#x60; property of 1 second
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public VideoV1Recording groupingSids(Object groupingSids) {
    this.groupingSids = groupingSids;
    return this;
  }

  /**
   * A list of SIDs related to the recording. Includes the &#x60;room_sid&#x60; and &#x60;participant_sid&#x60;.
   * @return groupingSids
   */
  @javax.annotation.Nullable
  public Object getGroupingSids() {
    return groupingSids;
  }

  public void setGroupingSids(Object groupingSids) {
    this.groupingSids = groupingSids;
  }


  public VideoV1Recording links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The URLs of related resources.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public VideoV1Recording mediaExternalLocation(URI mediaExternalLocation) {
    this.mediaExternalLocation = mediaExternalLocation;
    return this;
  }

  /**
   * The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.
   * @return mediaExternalLocation
   */
  @javax.annotation.Nullable
  public URI getMediaExternalLocation() {
    return mediaExternalLocation;
  }

  public void setMediaExternalLocation(URI mediaExternalLocation) {
    this.mediaExternalLocation = mediaExternalLocation;
  }


  public VideoV1Recording offset(Long offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.
   * @return offset
   */
  @javax.annotation.Nullable
  public Long getOffset() {
    return offset;
  }

  public void setOffset(Long offset) {
    this.offset = offset;
  }


  public VideoV1Recording sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Recording resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public VideoV1Recording size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the recorded track, in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public VideoV1Recording sourceSid(String sourceSid) {
    this.sourceSid = sourceSid;
    return this;
  }

  /**
   * The SID of the recording source. For a Room Recording, this value is a &#x60;track_sid&#x60;.
   * @return sourceSid
   */
  @javax.annotation.Nullable
  public String getSourceSid() {
    return sourceSid;
  }

  public void setSourceSid(String sourceSid) {
    this.sourceSid = sourceSid;
  }


  public VideoV1Recording status(RecordingEnumStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public RecordingEnumStatus getStatus() {
    return status;
  }

  public void setStatus(RecordingEnumStatus status) {
    this.status = status;
  }


  public VideoV1Recording statusCallback(URI statusCallback) {
    this.statusCallback = statusCallback;
    return this;
  }

  /**
   * The URL called using the &#x60;status_callback_method&#x60; to send status information on every recording event.
   * @return statusCallback
   */
  @javax.annotation.Nullable
  public URI getStatusCallback() {
    return statusCallback;
  }

  public void setStatusCallback(URI statusCallback) {
    this.statusCallback = statusCallback;
  }


  public VideoV1Recording statusCallbackMethod(StatusCallbackMethodEnum statusCallbackMethod) {
    this.statusCallbackMethod = statusCallbackMethod;
    return this;
  }

  /**
   * The HTTP method used to call &#x60;status_callback&#x60;. Can be: &#x60;POST&#x60; or &#x60;GET&#x60;, defaults to &#x60;POST&#x60;.
   * @return statusCallbackMethod
   */
  @javax.annotation.Nullable
  public StatusCallbackMethodEnum getStatusCallbackMethod() {
    return statusCallbackMethod;
  }

  public void setStatusCallbackMethod(StatusCallbackMethodEnum statusCallbackMethod) {
    this.statusCallbackMethod = statusCallbackMethod;
  }


  public VideoV1Recording trackName(String trackName) {
    this.trackName = trackName;
    return this;
  }

  /**
   * The name that was given to the source track of the recording. If no name is given, the &#x60;source_sid&#x60; is used.
   * @return trackName
   */
  @javax.annotation.Nullable
  public String getTrackName() {
    return trackName;
  }

  public void setTrackName(String trackName) {
    this.trackName = trackName;
  }


  public VideoV1Recording type(RecordingEnumType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public RecordingEnumType getType() {
    return type;
  }

  public void setType(RecordingEnumType type) {
    this.type = type;
  }


  public VideoV1Recording url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoV1Recording videoV1Recording = (VideoV1Recording) o;
    return Objects.equals(this.accountSid, videoV1Recording.accountSid) &&
        Objects.equals(this.codec, videoV1Recording.codec) &&
        Objects.equals(this.containerFormat, videoV1Recording.containerFormat) &&
        Objects.equals(this.dateCreated, videoV1Recording.dateCreated) &&
        Objects.equals(this.duration, videoV1Recording.duration) &&
        Objects.equals(this.groupingSids, videoV1Recording.groupingSids) &&
        Objects.equals(this.links, videoV1Recording.links) &&
        Objects.equals(this.mediaExternalLocation, videoV1Recording.mediaExternalLocation) &&
        Objects.equals(this.offset, videoV1Recording.offset) &&
        Objects.equals(this.sid, videoV1Recording.sid) &&
        Objects.equals(this.size, videoV1Recording.size) &&
        Objects.equals(this.sourceSid, videoV1Recording.sourceSid) &&
        Objects.equals(this.status, videoV1Recording.status) &&
        Objects.equals(this.statusCallback, videoV1Recording.statusCallback) &&
        Objects.equals(this.statusCallbackMethod, videoV1Recording.statusCallbackMethod) &&
        Objects.equals(this.trackName, videoV1Recording.trackName) &&
        Objects.equals(this.type, videoV1Recording.type) &&
        Objects.equals(this.url, videoV1Recording.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, codec, containerFormat, dateCreated, duration, groupingSids, links, mediaExternalLocation, offset, sid, size, sourceSid, status, statusCallback, statusCallbackMethod, trackName, type, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoV1Recording {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    containerFormat: ").append(toIndentedString(containerFormat)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    groupingSids: ").append(toIndentedString(groupingSids)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mediaExternalLocation: ").append(toIndentedString(mediaExternalLocation)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sourceSid: ").append(toIndentedString(sourceSid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusCallback: ").append(toIndentedString(statusCallback)).append("\n");
    sb.append("    statusCallbackMethod: ").append(toIndentedString(statusCallbackMethod)).append("\n");
    sb.append("    trackName: ").append(toIndentedString(trackName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("codec");
    openapiFields.add("container_format");
    openapiFields.add("date_created");
    openapiFields.add("duration");
    openapiFields.add("grouping_sids");
    openapiFields.add("links");
    openapiFields.add("media_external_location");
    openapiFields.add("offset");
    openapiFields.add("sid");
    openapiFields.add("size");
    openapiFields.add("source_sid");
    openapiFields.add("status");
    openapiFields.add("status_callback");
    openapiFields.add("status_callback_method");
    openapiFields.add("track_name");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoV1Recording
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoV1Recording.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoV1Recording is not found in the empty JSON string", VideoV1Recording.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoV1Recording.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoV1Recording` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("codec") != null && !jsonObj.get("codec").isJsonNull()) && !jsonObj.get("codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codec").toString()));
      }
      // validate the optional field `codec`
      if (jsonObj.get("codec") != null && !jsonObj.get("codec").isJsonNull()) {
        RecordingEnumCodec.validateJsonElement(jsonObj.get("codec"));
      }
      if ((jsonObj.get("container_format") != null && !jsonObj.get("container_format").isJsonNull()) && !jsonObj.get("container_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container_format").toString()));
      }
      // validate the optional field `container_format`
      if (jsonObj.get("container_format") != null && !jsonObj.get("container_format").isJsonNull()) {
        RecordingEnumFormat.validateJsonElement(jsonObj.get("container_format"));
      }
      if ((jsonObj.get("media_external_location") != null && !jsonObj.get("media_external_location").isJsonNull()) && !jsonObj.get("media_external_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_external_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_external_location").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("source_sid") != null && !jsonObj.get("source_sid").isJsonNull()) && !jsonObj.get("source_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        RecordingEnumStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("status_callback") != null && !jsonObj.get("status_callback").isJsonNull()) && !jsonObj.get("status_callback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_callback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_callback").toString()));
      }
      if ((jsonObj.get("status_callback_method") != null && !jsonObj.get("status_callback_method").isJsonNull()) && !jsonObj.get("status_callback_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_callback_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_callback_method").toString()));
      }
      // validate the optional field `status_callback_method`
      if (jsonObj.get("status_callback_method") != null && !jsonObj.get("status_callback_method").isJsonNull()) {
        StatusCallbackMethodEnum.validateJsonElement(jsonObj.get("status_callback_method"));
      }
      if ((jsonObj.get("track_name") != null && !jsonObj.get("track_name").isJsonNull()) && !jsonObj.get("track_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        RecordingEnumType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoV1Recording.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoV1Recording' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoV1Recording> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoV1Recording.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoV1Recording>() {
           @Override
           public void write(JsonWriter out, VideoV1Recording value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoV1Recording read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoV1Recording given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoV1Recording
   * @throws IOException if the JSON string is invalid with respect to VideoV1Recording
   */
  public static VideoV1Recording fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoV1Recording.class);
  }

  /**
   * Convert an instance of VideoV1Recording to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

