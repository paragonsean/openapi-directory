/*
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VideoV1RoomRoomRecordingRuleRulesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoV1RoomRoomRecordingRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:06.985861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoV1RoomRoomRecordingRule {
  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_ROOM_SID = "room_sid";
  @SerializedName(SERIALIZED_NAME_ROOM_SID)
  private String roomSid;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<VideoV1RoomRoomRecordingRuleRulesInner> rules;

  public VideoV1RoomRoomRecordingRule() {
  }

  public VideoV1RoomRoomRecordingRule dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public VideoV1RoomRoomRecordingRule dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public VideoV1RoomRoomRecordingRule roomSid(String roomSid) {
    this.roomSid = roomSid;
    return this;
  }

  /**
   * The SID of the Room resource for the Recording Rules
   * @return roomSid
   */
  @javax.annotation.Nullable
  public String getRoomSid() {
    return roomSid;
  }

  public void setRoomSid(String roomSid) {
    this.roomSid = roomSid;
  }


  public VideoV1RoomRoomRecordingRule rules(List<VideoV1RoomRoomRecordingRuleRulesInner> rules) {
    this.rules = rules;
    return this;
  }

  public VideoV1RoomRoomRecordingRule addRulesItem(VideoV1RoomRoomRecordingRuleRulesInner rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * A collection of Recording Rules that describe how to include or exclude matching tracks for recording
   * @return rules
   */
  @javax.annotation.Nullable
  public List<VideoV1RoomRoomRecordingRuleRulesInner> getRules() {
    return rules;
  }

  public void setRules(List<VideoV1RoomRoomRecordingRuleRulesInner> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoV1RoomRoomRecordingRule videoV1RoomRoomRecordingRule = (VideoV1RoomRoomRecordingRule) o;
    return Objects.equals(this.dateCreated, videoV1RoomRoomRecordingRule.dateCreated) &&
        Objects.equals(this.dateUpdated, videoV1RoomRoomRecordingRule.dateUpdated) &&
        Objects.equals(this.roomSid, videoV1RoomRoomRecordingRule.roomSid) &&
        Objects.equals(this.rules, videoV1RoomRoomRecordingRule.rules);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateUpdated, roomSid, rules);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoV1RoomRoomRecordingRule {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    roomSid: ").append(toIndentedString(roomSid)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("room_sid");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoV1RoomRoomRecordingRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoV1RoomRoomRecordingRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoV1RoomRoomRecordingRule is not found in the empty JSON string", VideoV1RoomRoomRecordingRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoV1RoomRoomRecordingRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoV1RoomRoomRecordingRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("room_sid") != null && !jsonObj.get("room_sid").isJsonNull()) && !jsonObj.get("room_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room_sid").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            VideoV1RoomRoomRecordingRuleRulesInner.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoV1RoomRoomRecordingRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoV1RoomRoomRecordingRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoV1RoomRoomRecordingRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoV1RoomRoomRecordingRule.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoV1RoomRoomRecordingRule>() {
           @Override
           public void write(JsonWriter out, VideoV1RoomRoomRecordingRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoV1RoomRoomRecordingRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoV1RoomRoomRecordingRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoV1RoomRoomRecordingRule
   * @throws IOException if the JSON string is invalid with respect to VideoV1RoomRoomRecordingRule
   */
  public static VideoV1RoomRoomRecordingRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoV1RoomRoomRecordingRule.class);
  }

  /**
   * Convert an instance of VideoV1RoomRoomRecordingRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

