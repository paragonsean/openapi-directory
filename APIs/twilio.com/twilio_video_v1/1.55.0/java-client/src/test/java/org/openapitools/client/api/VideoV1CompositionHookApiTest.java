/*
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CompositionHookEnumFormat;
import org.openapitools.client.model.ListCompositionHookResponse;
import java.time.OffsetDateTime;
import java.net.URI;
import org.openapitools.client.model.VideoV1CompositionHook;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideoV1CompositionHookApi
 */
@Disabled
public class VideoV1CompositionHookApiTest {

    private final VideoV1CompositionHookApi api = new VideoV1CompositionHookApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompositionHookTest() throws ApiException {
        String friendlyName = null;
        List<String> audioSources = null;
        List<String> audioSourcesExcluded = null;
        Boolean enabled = null;
        CompositionHookEnumFormat format = null;
        String resolution = null;
        URI statusCallback = null;
        String statusCallbackMethod = null;
        Boolean trim = null;
        Object videoLayout = null;
        VideoV1CompositionHook response = api.createCompositionHook(friendlyName, audioSources, audioSourcesExcluded, enabled, format, resolution, statusCallback, statusCallbackMethod, trim, videoLayout);
        // TODO: test validations
    }

    /**
     * Delete a Recording CompositionHook resource identified by a &#x60;CompositionHook SID&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCompositionHookTest() throws ApiException {
        String sid = null;
        api.deleteCompositionHook(sid);
        // TODO: test validations
    }

    /**
     * Returns a single CompositionHook resource identified by a CompositionHook SID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCompositionHookTest() throws ApiException {
        String sid = null;
        VideoV1CompositionHook response = api.fetchCompositionHook(sid);
        // TODO: test validations
    }

    /**
     * List of all Recording CompositionHook resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompositionHookTest() throws ApiException {
        Boolean enabled = null;
        OffsetDateTime dateCreatedAfter = null;
        OffsetDateTime dateCreatedBefore = null;
        String friendlyName = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCompositionHookResponse response = api.listCompositionHook(enabled, dateCreatedAfter, dateCreatedBefore, friendlyName, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompositionHookTest() throws ApiException {
        String sid = null;
        String friendlyName = null;
        List<String> audioSources = null;
        List<String> audioSourcesExcluded = null;
        Boolean enabled = null;
        CompositionHookEnumFormat format = null;
        String resolution = null;
        URI statusCallback = null;
        String statusCallbackMethod = null;
        Boolean trim = null;
        Object videoLayout = null;
        VideoV1CompositionHook response = api.updateCompositionHook(sid, friendlyName, audioSources, audioSourcesExcluded, enabled, format, resolution, statusCallback, statusCallbackMethod, trim, videoLayout);
        // TODO: test validations
    }

}
