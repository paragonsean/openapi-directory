/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListRoomRecordingResponse from '../model/ListRoomRecordingResponse';
import RoomRecordingEnumStatus from '../model/RoomRecordingEnumStatus';
import VideoV1RoomRoomRecording from '../model/VideoV1RoomRoomRecording';

/**
* VideoV1RoomRecording service.
* @module api/VideoV1RoomRecordingApi
* @version 1.55.0
*/
export default class VideoV1RoomRecordingApi {

    /**
    * Constructs a new VideoV1RoomRecordingApi. 
    * @alias module:api/VideoV1RoomRecordingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteRoomRecording operation.
     * @callback module:api/VideoV1RoomRecordingApi~deleteRoomRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} roomSid The SID of the room with the RoomRecording resource to delete.
     * @param {String} sid The SID of the RoomRecording resource to delete.
     * @param {module:api/VideoV1RoomRecordingApi~deleteRoomRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoomRecording(roomSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomSid' is set
      if (roomSid === undefined || roomSid === null) {
        throw new Error("Missing the required parameter 'roomSid' when calling deleteRoomRecording");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteRoomRecording");
      }

      let pathParams = {
        'RoomSid': roomSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Rooms/{RoomSid}/Recordings/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchRoomRecording operation.
     * @callback module:api/VideoV1RoomRecordingApi~fetchRoomRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1RoomRoomRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} roomSid The SID of the Room resource with the recording to fetch.
     * @param {String} sid The SID of the RoomRecording resource to fetch.
     * @param {module:api/VideoV1RoomRecordingApi~fetchRoomRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1RoomRoomRecording}
     */
    fetchRoomRecording(roomSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomSid' is set
      if (roomSid === undefined || roomSid === null) {
        throw new Error("Missing the required parameter 'roomSid' when calling fetchRoomRecording");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchRoomRecording");
      }

      let pathParams = {
        'RoomSid': roomSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoV1RoomRoomRecording;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Rooms/{RoomSid}/Recordings/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoomRecording operation.
     * @callback module:api/VideoV1RoomRecordingApi~listRoomRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRoomRecordingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} roomSid The SID of the room with the RoomRecording resources to read.
     * @param {Object} opts Optional parameters
     * @param {module:model/RoomRecordingEnumStatus} [status] Read only the recordings with this status. Can be: `processing`, `completed`, or `deleted`.
     * @param {String} [sourceSid] Read only the recordings that have this `source_sid`.
     * @param {Date} [dateCreatedAfter] Read only recordings that started on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
     * @param {Date} [dateCreatedBefore] Read only Recordings that started before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with time zone.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VideoV1RoomRecordingApi~listRoomRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRoomRecordingResponse}
     */
    listRoomRecording(roomSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomSid' is set
      if (roomSid === undefined || roomSid === null) {
        throw new Error("Missing the required parameter 'roomSid' when calling listRoomRecording");
      }

      let pathParams = {
        'RoomSid': roomSid
      };
      let queryParams = {
        'Status': opts['status'],
        'SourceSid': opts['sourceSid'],
        'DateCreatedAfter': opts['dateCreatedAfter'],
        'DateCreatedBefore': opts['dateCreatedBefore'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRoomRecordingResponse;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Rooms/{RoomSid}/Recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
