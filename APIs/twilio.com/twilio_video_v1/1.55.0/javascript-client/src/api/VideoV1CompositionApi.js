/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompositionEnumFormat from '../model/CompositionEnumFormat';
import CompositionEnumStatus from '../model/CompositionEnumStatus';
import ListCompositionResponse from '../model/ListCompositionResponse';
import VideoV1Composition from '../model/VideoV1Composition';

/**
* VideoV1Composition service.
* @module api/VideoV1CompositionApi
* @version 1.55.0
*/
export default class VideoV1CompositionApi {

    /**
    * Constructs a new VideoV1CompositionApi. 
    * @alias module:api/VideoV1CompositionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComposition operation.
     * @callback module:api/VideoV1CompositionApi~createCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1Composition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} roomSid The SID of the Group Room with the media tracks to be used as composition sources.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [audioSources] An array of track names from the same group room to merge into the new composition. Can include zero or more track names. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` includes `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
     * @param {Array.<String>} [audioSourcesExcluded] An array of track names to exclude. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
     * @param {module:model/CompositionEnumFormat} [format] 
     * @param {String} [resolution] A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`.  The string's format is `{width}x{height}` where:   * 16 <= `{width}` <= 1280 * 16 <= `{height}` <= 1280 * `{width}` * `{height}` <= 921,600  Typical values are:   * HD = `1280x720` * PAL = `1024x576` * VGA = `640x480` * CIF = `320x240`  Note that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     * @param {String} [statusCallback] The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.
     * @param {Boolean} [trim] Whether to clip the intervals where there is no active media in the composition. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     * @param {Object} [videoLayout] An object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
     * @param {module:api/VideoV1CompositionApi~createCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1Composition}
     */
    createComposition(roomSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomSid' is set
      if (roomSid === undefined || roomSid === null) {
        throw new Error("Missing the required parameter 'roomSid' when calling createComposition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AudioSources': this.apiClient.buildCollectionParam(opts['audioSources'], 'csv'),
        'AudioSourcesExcluded': this.apiClient.buildCollectionParam(opts['audioSourcesExcluded'], 'csv'),
        'Format': opts['format'],
        'Resolution': opts['resolution'],
        'RoomSid': roomSid,
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'Trim': opts['trim'],
        'VideoLayout': opts['videoLayout']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VideoV1Composition;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Compositions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComposition operation.
     * @callback module:api/VideoV1CompositionApi~deleteCompositionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Recording Composition resource identified by a Composition SID.
     * @param {String} sid The SID of the Composition resource to delete.
     * @param {module:api/VideoV1CompositionApi~deleteCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComposition(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteComposition");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Compositions/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchComposition operation.
     * @callback module:api/VideoV1CompositionApi~fetchCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1Composition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single Composition resource identified by a Composition SID.
     * @param {String} sid The SID of the Composition resource to fetch.
     * @param {module:api/VideoV1CompositionApi~fetchCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1Composition}
     */
    fetchComposition(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchComposition");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoV1Composition;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Compositions/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listComposition operation.
     * @callback module:api/VideoV1CompositionApi~listCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCompositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all Recording compositions.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompositionEnumStatus} [status] Read only Composition resources with this status. Can be: `enqueued`, `processing`, `completed`, `deleted`, or `failed`.
     * @param {Date} [dateCreatedAfter] Read only Composition resources created on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone.
     * @param {Date} [dateCreatedBefore] Read only Composition resources created before this ISO 8601 date-time with time zone.
     * @param {String} [roomSid] Read only Composition resources with this Room SID.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VideoV1CompositionApi~listCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCompositionResponse}
     */
    listComposition(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Status': opts['status'],
        'DateCreatedAfter': opts['dateCreatedAfter'],
        'DateCreatedBefore': opts['dateCreatedBefore'],
        'RoomSid': opts['roomSid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCompositionResponse;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Compositions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
