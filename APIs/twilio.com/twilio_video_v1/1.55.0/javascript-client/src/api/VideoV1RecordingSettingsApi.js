/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VideoV1RecordingSettings from '../model/VideoV1RecordingSettings';

/**
* VideoV1RecordingSettings service.
* @module api/VideoV1RecordingSettingsApi
* @version 1.55.0
*/
export default class VideoV1RecordingSettingsApi {

    /**
    * Constructs a new VideoV1RecordingSettingsApi. 
    * @alias module:api/VideoV1RecordingSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRecordingSettings operation.
     * @callback module:api/VideoV1RecordingSettingsApi~createRecordingSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1RecordingSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} friendlyName A descriptive string that you create to describe the resource and be shown to users in the console
     * @param {Object} opts Optional parameters
     * @param {String} [awsCredentialsSid] The SID of the stored Credential resource.
     * @param {String} [awsS3Url] The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/recordings`, where `recordings` is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the [RFC 3986](https://tools.ietf.org/html/rfc3986#section-2).
     * @param {Boolean} [awsStorageEnabled] Whether all recordings should be written to the `aws_s3_url`. When `false`, all recordings are stored in our cloud.
     * @param {Boolean} [encryptionEnabled] Whether all recordings should be stored in an encrypted form. The default is `false`.
     * @param {String} [encryptionKeySid] The SID of the Public Key resource to use for encryption.
     * @param {module:api/VideoV1RecordingSettingsApi~createRecordingSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1RecordingSettings}
     */
    createRecordingSettings(friendlyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'friendlyName' is set
      if (friendlyName === undefined || friendlyName === null) {
        throw new Error("Missing the required parameter 'friendlyName' when calling createRecordingSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AwsCredentialsSid': opts['awsCredentialsSid'],
        'AwsS3Url': opts['awsS3Url'],
        'AwsStorageEnabled': opts['awsStorageEnabled'],
        'EncryptionEnabled': opts['encryptionEnabled'],
        'EncryptionKeySid': opts['encryptionKeySid'],
        'FriendlyName': friendlyName
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VideoV1RecordingSettings;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/RecordingSettings/Default', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchRecordingSettings operation.
     * @callback module:api/VideoV1RecordingSettingsApi~fetchRecordingSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1RecordingSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/VideoV1RecordingSettingsApi~fetchRecordingSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1RecordingSettings}
     */
    fetchRecordingSettings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoV1RecordingSettings;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/RecordingSettings/Default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
