/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListRoomResponse from '../model/ListRoomResponse';
import RoomEnumRoomStatus from '../model/RoomEnumRoomStatus';
import RoomEnumRoomType from '../model/RoomEnumRoomType';
import RoomEnumVideoCodec from '../model/RoomEnumVideoCodec';
import VideoV1Room from '../model/VideoV1Room';

/**
* VideoV1Room service.
* @module api/VideoV1RoomApi
* @version 1.55.0
*/
export default class VideoV1RoomApi {

    /**
    * Constructs a new VideoV1RoomApi. 
    * @alias module:api/VideoV1RoomApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRoom operation.
     * @callback module:api/VideoV1RoomApi~createRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1Room} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [audioOnly] When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only.
     * @param {Number} [emptyRoomTimeout] Configures how long (in minutes) a room will remain active after last participant leaves. Valid values range from 1 to 60 minutes (no fractions).
     * @param {Boolean} [enableTurn] Deprecated, now always considered to be true.
     * @param {Boolean} [largeRoom] When set to true, indicated that this is the large room.
     * @param {Number} [maxParticipantDuration] The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours).
     * @param {Number} [maxParticipants] The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants.
     * @param {String} [mediaRegion] The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-addresses#group-rooms-media-servers). ***This feature is not available in `peer-to-peer` rooms.***
     * @param {Boolean} [recordParticipantsOnConnect] Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***
     * @param {Object} [recordingRules] A collection of Recording Rules that describe how to include or exclude matching tracks for recording
     * @param {String} [statusCallback] The URL we should call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.
     * @param {module:model/String} [statusCallbackMethod] The HTTP method we should use to call `status_callback`. Can be `POST` or `GET`.
     * @param {module:model/RoomEnumRoomType} [type] 
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.
     * @param {Number} [unusedRoomTimeout] Configures how long (in minutes) a room will remain active if no one joins. Valid values range from 1 to 60 minutes (no fractions).
     * @param {Array.<module:model/RoomEnumVideoCodec>} [videoCodecs] An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***
     * @param {module:api/VideoV1RoomApi~createRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1Room}
     */
    createRoom(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'AudioOnly': opts['audioOnly'],
        'EmptyRoomTimeout': opts['emptyRoomTimeout'],
        'EnableTurn': opts['enableTurn'],
        'LargeRoom': opts['largeRoom'],
        'MaxParticipantDuration': opts['maxParticipantDuration'],
        'MaxParticipants': opts['maxParticipants'],
        'MediaRegion': opts['mediaRegion'],
        'RecordParticipantsOnConnect': opts['recordParticipantsOnConnect'],
        'RecordingRules': opts['recordingRules'],
        'StatusCallback': opts['statusCallback'],
        'StatusCallbackMethod': opts['statusCallbackMethod'],
        'Type': opts['type'],
        'UniqueName': opts['uniqueName'],
        'UnusedRoomTimeout': opts['unusedRoomTimeout'],
        'VideoCodecs': this.apiClient.buildCollectionParam(opts['videoCodecs'], 'csv')
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VideoV1Room;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Rooms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchRoom operation.
     * @callback module:api/VideoV1RoomApi~fetchRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1Room} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Room resource to fetch.
     * @param {module:api/VideoV1RoomApi~fetchRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1Room}
     */
    fetchRoom(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchRoom");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoV1Room;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Rooms/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoom operation.
     * @callback module:api/VideoV1RoomApi~listRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRoomResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/RoomEnumRoomStatus} [status] Read only the rooms with this status. Can be: `in-progress` (default) or `completed`
     * @param {String} [uniqueName] Read only rooms with the this `unique_name`.
     * @param {Date} [dateCreatedAfter] Read only rooms that started on or after this date, given as `YYYY-MM-DD`.
     * @param {Date} [dateCreatedBefore] Read only rooms that started before this date, given as `YYYY-MM-DD`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/VideoV1RoomApi~listRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRoomResponse}
     */
    listRoom(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Status': opts['status'],
        'UniqueName': opts['uniqueName'],
        'DateCreatedAfter': opts['dateCreatedAfter'],
        'DateCreatedBefore': opts['dateCreatedBefore'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRoomResponse;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Rooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoom operation.
     * @callback module:api/VideoV1RoomApi~updateRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoV1Room} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} sid The SID of the Room resource to update.
     * @param {module:model/RoomEnumRoomStatus} status 
     * @param {module:api/VideoV1RoomApi~updateRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoV1Room}
     */
    updateRoom(sid, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateRoom");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateRoom");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Status': status
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VideoV1Room;
      let basePaths = ['https://video.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Rooms/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
