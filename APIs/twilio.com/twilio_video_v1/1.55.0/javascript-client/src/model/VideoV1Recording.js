/**
 * Twilio - Video
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecordingEnumCodec from './RecordingEnumCodec';
import RecordingEnumFormat from './RecordingEnumFormat';
import RecordingEnumStatus from './RecordingEnumStatus';
import RecordingEnumType from './RecordingEnumType';

/**
 * The VideoV1Recording model module.
 * @module model/VideoV1Recording
 * @version 1.55.0
 */
class VideoV1Recording {
    /**
     * Constructs a new <code>VideoV1Recording</code>.
     * @alias module:model/VideoV1Recording
     */
    constructor() { 
        
        VideoV1Recording.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoV1Recording</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoV1Recording} obj Optional instance to populate.
     * @return {module:model/VideoV1Recording} The populated <code>VideoV1Recording</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoV1Recording();

            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('codec')) {
                obj['codec'] = RecordingEnumCodec.constructFromObject(data['codec']);
            }
            if (data.hasOwnProperty('container_format')) {
                obj['container_format'] = RecordingEnumFormat.constructFromObject(data['container_format']);
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('grouping_sids')) {
                obj['grouping_sids'] = ApiClient.convertToType(data['grouping_sids'], Object);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], Object);
            }
            if (data.hasOwnProperty('media_external_location')) {
                obj['media_external_location'] = ApiClient.convertToType(data['media_external_location'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('source_sid')) {
                obj['source_sid'] = ApiClient.convertToType(data['source_sid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = RecordingEnumStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('status_callback')) {
                obj['status_callback'] = ApiClient.convertToType(data['status_callback'], 'String');
            }
            if (data.hasOwnProperty('status_callback_method')) {
                obj['status_callback_method'] = ApiClient.convertToType(data['status_callback_method'], 'String');
            }
            if (data.hasOwnProperty('track_name')) {
                obj['track_name'] = ApiClient.convertToType(data['track_name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = RecordingEnumType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoV1Recording</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoV1Recording</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is a string
        if (data['codec'] && !(typeof data['codec'] === 'string' || data['codec'] instanceof String)) {
            throw new Error("Expected the field `codec` to be a primitive type in the JSON string but got " + data['codec']);
        }
        // ensure the json data is a string
        if (data['container_format'] && !(typeof data['container_format'] === 'string' || data['container_format'] instanceof String)) {
            throw new Error("Expected the field `container_format` to be a primitive type in the JSON string but got " + data['container_format']);
        }
        // ensure the json data is a string
        if (data['media_external_location'] && !(typeof data['media_external_location'] === 'string' || data['media_external_location'] instanceof String)) {
            throw new Error("Expected the field `media_external_location` to be a primitive type in the JSON string but got " + data['media_external_location']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['source_sid'] && !(typeof data['source_sid'] === 'string' || data['source_sid'] instanceof String)) {
            throw new Error("Expected the field `source_sid` to be a primitive type in the JSON string but got " + data['source_sid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['status_callback'] && !(typeof data['status_callback'] === 'string' || data['status_callback'] instanceof String)) {
            throw new Error("Expected the field `status_callback` to be a primitive type in the JSON string but got " + data['status_callback']);
        }
        // ensure the json data is a string
        if (data['status_callback_method'] && !(typeof data['status_callback_method'] === 'string' || data['status_callback_method'] instanceof String)) {
            throw new Error("Expected the field `status_callback_method` to be a primitive type in the JSON string but got " + data['status_callback_method']);
        }
        // ensure the json data is a string
        if (data['track_name'] && !(typeof data['track_name'] === 'string' || data['track_name'] instanceof String)) {
            throw new Error("Expected the field `track_name` to be a primitive type in the JSON string but got " + data['track_name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource.
 * @member {String} account_sid
 */
VideoV1Recording.prototype['account_sid'] = undefined;

/**
 * @member {module:model/RecordingEnumCodec} codec
 */
VideoV1Recording.prototype['codec'] = undefined;

/**
 * @member {module:model/RecordingEnumFormat} container_format
 */
VideoV1Recording.prototype['container_format'] = undefined;

/**
 * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_created
 */
VideoV1Recording.prototype['date_created'] = undefined;

/**
 * The duration of the recording in seconds rounded to the nearest second. Sub-second tracks have a `Duration` property of 1 second
 * @member {Number} duration
 */
VideoV1Recording.prototype['duration'] = undefined;

/**
 * A list of SIDs related to the recording. Includes the `room_sid` and `participant_sid`.
 * @member {Object} grouping_sids
 */
VideoV1Recording.prototype['grouping_sids'] = undefined;

/**
 * The URLs of related resources.
 * @member {Object} links
 */
VideoV1Recording.prototype['links'] = undefined;

/**
 * The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.
 * @member {String} media_external_location
 */
VideoV1Recording.prototype['media_external_location'] = undefined;

/**
 * The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.
 * @member {Number} offset
 */
VideoV1Recording.prototype['offset'] = undefined;

/**
 * The unique string that we created to identify the Recording resource.
 * @member {String} sid
 */
VideoV1Recording.prototype['sid'] = undefined;

/**
 * The size of the recorded track, in bytes.
 * @member {Number} size
 */
VideoV1Recording.prototype['size'] = undefined;

/**
 * The SID of the recording source. For a Room Recording, this value is a `track_sid`.
 * @member {String} source_sid
 */
VideoV1Recording.prototype['source_sid'] = undefined;

/**
 * @member {module:model/RecordingEnumStatus} status
 */
VideoV1Recording.prototype['status'] = undefined;

/**
 * The URL called using the `status_callback_method` to send status information on every recording event.
 * @member {String} status_callback
 */
VideoV1Recording.prototype['status_callback'] = undefined;

/**
 * The HTTP method used to call `status_callback`. Can be: `POST` or `GET`, defaults to `POST`.
 * @member {module:model/VideoV1Recording.StatusCallbackMethodEnum} status_callback_method
 */
VideoV1Recording.prototype['status_callback_method'] = undefined;

/**
 * The name that was given to the source track of the recording. If no name is given, the `source_sid` is used.
 * @member {String} track_name
 */
VideoV1Recording.prototype['track_name'] = undefined;

/**
 * @member {module:model/RecordingEnumType} type
 */
VideoV1Recording.prototype['type'] = undefined;

/**
 * The absolute URL of the resource.
 * @member {String} url
 */
VideoV1Recording.prototype['url'] = undefined;





/**
 * Allowed values for the <code>status_callback_method</code> property.
 * @enum {String}
 * @readonly
 */
VideoV1Recording['StatusCallbackMethodEnum'] = {

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE"
};



export default VideoV1Recording;

