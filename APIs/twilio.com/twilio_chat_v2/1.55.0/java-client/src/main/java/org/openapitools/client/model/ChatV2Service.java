/*
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChatV2Service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:26:34.757951-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChatV2Service {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_CONSUMPTION_REPORT_INTERVAL = "consumption_report_interval";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_REPORT_INTERVAL)
  private Integer consumptionReportInterval;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_DEFAULT_CHANNEL_CREATOR_ROLE_SID = "default_channel_creator_role_sid";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CHANNEL_CREATOR_ROLE_SID)
  private String defaultChannelCreatorRoleSid;

  public static final String SERIALIZED_NAME_DEFAULT_CHANNEL_ROLE_SID = "default_channel_role_sid";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CHANNEL_ROLE_SID)
  private String defaultChannelRoleSid;

  public static final String SERIALIZED_NAME_DEFAULT_SERVICE_ROLE_SID = "default_service_role_sid";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SERVICE_ROLE_SID)
  private String defaultServiceRoleSid;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private Object limits = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private Object media = null;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private Object notifications = null;

  public static final String SERIALIZED_NAME_POST_WEBHOOK_RETRY_COUNT = "post_webhook_retry_count";
  @SerializedName(SERIALIZED_NAME_POST_WEBHOOK_RETRY_COUNT)
  private Integer postWebhookRetryCount;

  public static final String SERIALIZED_NAME_POST_WEBHOOK_URL = "post_webhook_url";
  @SerializedName(SERIALIZED_NAME_POST_WEBHOOK_URL)
  private String postWebhookUrl;

  public static final String SERIALIZED_NAME_PRE_WEBHOOK_RETRY_COUNT = "pre_webhook_retry_count";
  @SerializedName(SERIALIZED_NAME_PRE_WEBHOOK_RETRY_COUNT)
  private Integer preWebhookRetryCount;

  public static final String SERIALIZED_NAME_PRE_WEBHOOK_URL = "pre_webhook_url";
  @SerializedName(SERIALIZED_NAME_PRE_WEBHOOK_URL)
  private String preWebhookUrl;

  public static final String SERIALIZED_NAME_REACHABILITY_ENABLED = "reachability_enabled";
  @SerializedName(SERIALIZED_NAME_REACHABILITY_ENABLED)
  private Boolean reachabilityEnabled;

  public static final String SERIALIZED_NAME_READ_STATUS_ENABLED = "read_status_enabled";
  @SerializedName(SERIALIZED_NAME_READ_STATUS_ENABLED)
  private Boolean readStatusEnabled;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_TYPING_INDICATOR_TIMEOUT = "typing_indicator_timeout";
  @SerializedName(SERIALIZED_NAME_TYPING_INDICATOR_TIMEOUT)
  private Integer typingIndicatorTimeout;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_WEBHOOK_FILTERS = "webhook_filters";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_FILTERS)
  private List<String> webhookFilters;

  public static final String SERIALIZED_NAME_WEBHOOK_METHOD = "webhook_method";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_METHOD)
  private String webhookMethod;

  public ChatV2Service() {
  }

  public ChatV2Service accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public ChatV2Service consumptionReportInterval(Integer consumptionReportInterval) {
    this.consumptionReportInterval = consumptionReportInterval;
    return this;
  }

  /**
   * DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
   * @return consumptionReportInterval
   */
  @javax.annotation.Nullable
  public Integer getConsumptionReportInterval() {
    return consumptionReportInterval;
  }

  public void setConsumptionReportInterval(Integer consumptionReportInterval) {
    this.consumptionReportInterval = consumptionReportInterval;
  }


  public ChatV2Service dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ChatV2Service dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public ChatV2Service defaultChannelCreatorRoleSid(String defaultChannelCreatorRoleSid) {
    this.defaultChannelCreatorRoleSid = defaultChannelCreatorRoleSid;
    return this;
  }

  /**
   * The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
   * @return defaultChannelCreatorRoleSid
   */
  @javax.annotation.Nullable
  public String getDefaultChannelCreatorRoleSid() {
    return defaultChannelCreatorRoleSid;
  }

  public void setDefaultChannelCreatorRoleSid(String defaultChannelCreatorRoleSid) {
    this.defaultChannelCreatorRoleSid = defaultChannelCreatorRoleSid;
  }


  public ChatV2Service defaultChannelRoleSid(String defaultChannelRoleSid) {
    this.defaultChannelRoleSid = defaultChannelRoleSid;
    return this;
  }

  /**
   * The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
   * @return defaultChannelRoleSid
   */
  @javax.annotation.Nullable
  public String getDefaultChannelRoleSid() {
    return defaultChannelRoleSid;
  }

  public void setDefaultChannelRoleSid(String defaultChannelRoleSid) {
    this.defaultChannelRoleSid = defaultChannelRoleSid;
  }


  public ChatV2Service defaultServiceRoleSid(String defaultServiceRoleSid) {
    this.defaultServiceRoleSid = defaultServiceRoleSid;
    return this;
  }

  /**
   * The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
   * @return defaultServiceRoleSid
   */
  @javax.annotation.Nullable
  public String getDefaultServiceRoleSid() {
    return defaultServiceRoleSid;
  }

  public void setDefaultServiceRoleSid(String defaultServiceRoleSid) {
    this.defaultServiceRoleSid = defaultServiceRoleSid;
  }


  public ChatV2Service friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The string that you assigned to describe the resource.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ChatV2Service limits(Object limits) {
    this.limits = limits;
    return this;
  }

  /**
   * An object that describes the limits of the service instance. The &#x60;limits&#x60; object contains  &#x60;channel_members&#x60; to describe the members/channel limit and &#x60;user_channels&#x60; to describe the channels/user limit. &#x60;channel_members&#x60; can be 1,000 or less, with a default of 250. &#x60;user_channels&#x60; can be 1,000 or less, with a default value of 100.
   * @return limits
   */
  @javax.annotation.Nullable
  public Object getLimits() {
    return limits;
  }

  public void setLimits(Object limits) {
    this.limits = limits;
  }


  public ChatV2Service links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The absolute URLs of the Service&#39;s [Channels](https://www.twilio.com/docs/chat/channels), [Roles](https://www.twilio.com/docs/chat/rest/role-resource), [Bindings](https://www.twilio.com/docs/chat/rest/binding-resource), and [Users](https://www.twilio.com/docs/chat/rest/user-resource).
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public ChatV2Service media(Object media) {
    this.media = media;
    return this;
  }

  /**
   * An object that describes the properties of media that the service supports. The object contains the &#x60;size_limit_mb&#x60; property, which describes the size of the largest media file in MB; and the &#x60;compatibility_message&#x60; property, which contains the message text to send when a media message does not have any text.
   * @return media
   */
  @javax.annotation.Nullable
  public Object getMedia() {
    return media;
  }

  public void setMedia(Object media) {
    this.media = media;
  }


  public ChatV2Service notifications(Object notifications) {
    this.notifications = notifications;
    return this;
  }

  /**
   * The notification configuration for the Service instance. See [Push Notification Configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
   * @return notifications
   */
  @javax.annotation.Nullable
  public Object getNotifications() {
    return notifications;
  }

  public void setNotifications(Object notifications) {
    this.notifications = notifications;
  }


  public ChatV2Service postWebhookRetryCount(Integer postWebhookRetryCount) {
    this.postWebhookRetryCount = postWebhookRetryCount;
    return this;
  }

  /**
   * The number of times to retry a call to the &#x60;post_webhook_url&#x60; if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won&#39;t be retried.
   * @return postWebhookRetryCount
   */
  @javax.annotation.Nullable
  public Integer getPostWebhookRetryCount() {
    return postWebhookRetryCount;
  }

  public void setPostWebhookRetryCount(Integer postWebhookRetryCount) {
    this.postWebhookRetryCount = postWebhookRetryCount;
  }


  public ChatV2Service postWebhookUrl(String postWebhookUrl) {
    this.postWebhookUrl = postWebhookUrl;
    return this;
  }

  /**
   * The URL for post-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   * @return postWebhookUrl
   */
  @javax.annotation.Nullable
  public String getPostWebhookUrl() {
    return postWebhookUrl;
  }

  public void setPostWebhookUrl(String postWebhookUrl) {
    this.postWebhookUrl = postWebhookUrl;
  }


  public ChatV2Service preWebhookRetryCount(Integer preWebhookRetryCount) {
    this.preWebhookRetryCount = preWebhookRetryCount;
    return this;
  }

  /**
   * The number of times to retry a call to the &#x60;pre_webhook_url&#x60; if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won&#39;t be retried.
   * @return preWebhookRetryCount
   */
  @javax.annotation.Nullable
  public Integer getPreWebhookRetryCount() {
    return preWebhookRetryCount;
  }

  public void setPreWebhookRetryCount(Integer preWebhookRetryCount) {
    this.preWebhookRetryCount = preWebhookRetryCount;
  }


  public ChatV2Service preWebhookUrl(String preWebhookUrl) {
    this.preWebhookUrl = preWebhookUrl;
    return this;
  }

  /**
   * The URL for pre-event webhooks, which are called by using the &#x60;webhook_method&#x60;. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   * @return preWebhookUrl
   */
  @javax.annotation.Nullable
  public String getPreWebhookUrl() {
    return preWebhookUrl;
  }

  public void setPreWebhookUrl(String preWebhookUrl) {
    this.preWebhookUrl = preWebhookUrl;
  }


  public ChatV2Service reachabilityEnabled(Boolean reachabilityEnabled) {
    this.reachabilityEnabled = reachabilityEnabled;
    return this;
  }

  /**
   * Whether the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) is enabled for this Service instance. The default is &#x60;false&#x60;.
   * @return reachabilityEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReachabilityEnabled() {
    return reachabilityEnabled;
  }

  public void setReachabilityEnabled(Boolean reachabilityEnabled) {
    this.reachabilityEnabled = reachabilityEnabled;
  }


  public ChatV2Service readStatusEnabled(Boolean readStatusEnabled) {
    this.readStatusEnabled = readStatusEnabled;
    return this;
  }

  /**
   * Whether the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature is enabled. The default is &#x60;true&#x60;.
   * @return readStatusEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReadStatusEnabled() {
    return readStatusEnabled;
  }

  public void setReadStatusEnabled(Boolean readStatusEnabled) {
    this.readStatusEnabled = readStatusEnabled;
  }


  public ChatV2Service sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that we created to identify the Service resource.
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public ChatV2Service typingIndicatorTimeout(Integer typingIndicatorTimeout) {
    this.typingIndicatorTimeout = typingIndicatorTimeout;
    return this;
  }

  /**
   * How long in seconds after a &#x60;started typing&#x60; event until clients should assume that user is no longer typing, even if no &#x60;ended typing&#x60; message was received.  The default is 5 seconds.
   * @return typingIndicatorTimeout
   */
  @javax.annotation.Nullable
  public Integer getTypingIndicatorTimeout() {
    return typingIndicatorTimeout;
  }

  public void setTypingIndicatorTimeout(Integer typingIndicatorTimeout) {
    this.typingIndicatorTimeout = typingIndicatorTimeout;
  }


  public ChatV2Service url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the Service resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public ChatV2Service webhookFilters(List<String> webhookFilters) {
    this.webhookFilters = webhookFilters;
    return this;
  }

  public ChatV2Service addWebhookFiltersItem(String webhookFiltersItem) {
    if (this.webhookFilters == null) {
      this.webhookFilters = new ArrayList<>();
    }
    this.webhookFilters.add(webhookFiltersItem);
    return this;
  }

  /**
   * The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   * @return webhookFilters
   */
  @javax.annotation.Nullable
  public List<String> getWebhookFilters() {
    return webhookFilters;
  }

  public void setWebhookFilters(List<String> webhookFilters) {
    this.webhookFilters = webhookFilters;
  }


  public ChatV2Service webhookMethod(String webhookMethod) {
    this.webhookMethod = webhookMethod;
    return this;
  }

  /**
   * The HTTP method to use for calls to the &#x60;pre_webhook_url&#x60; and &#x60;post_webhook_url&#x60; webhooks.  Can be: &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   * @return webhookMethod
   */
  @javax.annotation.Nullable
  public String getWebhookMethod() {
    return webhookMethod;
  }

  public void setWebhookMethod(String webhookMethod) {
    this.webhookMethod = webhookMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatV2Service chatV2Service = (ChatV2Service) o;
    return Objects.equals(this.accountSid, chatV2Service.accountSid) &&
        Objects.equals(this.consumptionReportInterval, chatV2Service.consumptionReportInterval) &&
        Objects.equals(this.dateCreated, chatV2Service.dateCreated) &&
        Objects.equals(this.dateUpdated, chatV2Service.dateUpdated) &&
        Objects.equals(this.defaultChannelCreatorRoleSid, chatV2Service.defaultChannelCreatorRoleSid) &&
        Objects.equals(this.defaultChannelRoleSid, chatV2Service.defaultChannelRoleSid) &&
        Objects.equals(this.defaultServiceRoleSid, chatV2Service.defaultServiceRoleSid) &&
        Objects.equals(this.friendlyName, chatV2Service.friendlyName) &&
        Objects.equals(this.limits, chatV2Service.limits) &&
        Objects.equals(this.links, chatV2Service.links) &&
        Objects.equals(this.media, chatV2Service.media) &&
        Objects.equals(this.notifications, chatV2Service.notifications) &&
        Objects.equals(this.postWebhookRetryCount, chatV2Service.postWebhookRetryCount) &&
        Objects.equals(this.postWebhookUrl, chatV2Service.postWebhookUrl) &&
        Objects.equals(this.preWebhookRetryCount, chatV2Service.preWebhookRetryCount) &&
        Objects.equals(this.preWebhookUrl, chatV2Service.preWebhookUrl) &&
        Objects.equals(this.reachabilityEnabled, chatV2Service.reachabilityEnabled) &&
        Objects.equals(this.readStatusEnabled, chatV2Service.readStatusEnabled) &&
        Objects.equals(this.sid, chatV2Service.sid) &&
        Objects.equals(this.typingIndicatorTimeout, chatV2Service.typingIndicatorTimeout) &&
        Objects.equals(this.url, chatV2Service.url) &&
        Objects.equals(this.webhookFilters, chatV2Service.webhookFilters) &&
        Objects.equals(this.webhookMethod, chatV2Service.webhookMethod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, consumptionReportInterval, dateCreated, dateUpdated, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limits, links, media, notifications, postWebhookRetryCount, postWebhookUrl, preWebhookRetryCount, preWebhookUrl, reachabilityEnabled, readStatusEnabled, sid, typingIndicatorTimeout, url, webhookFilters, webhookMethod);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatV2Service {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    consumptionReportInterval: ").append(toIndentedString(consumptionReportInterval)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    defaultChannelCreatorRoleSid: ").append(toIndentedString(defaultChannelCreatorRoleSid)).append("\n");
    sb.append("    defaultChannelRoleSid: ").append(toIndentedString(defaultChannelRoleSid)).append("\n");
    sb.append("    defaultServiceRoleSid: ").append(toIndentedString(defaultServiceRoleSid)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    postWebhookRetryCount: ").append(toIndentedString(postWebhookRetryCount)).append("\n");
    sb.append("    postWebhookUrl: ").append(toIndentedString(postWebhookUrl)).append("\n");
    sb.append("    preWebhookRetryCount: ").append(toIndentedString(preWebhookRetryCount)).append("\n");
    sb.append("    preWebhookUrl: ").append(toIndentedString(preWebhookUrl)).append("\n");
    sb.append("    reachabilityEnabled: ").append(toIndentedString(reachabilityEnabled)).append("\n");
    sb.append("    readStatusEnabled: ").append(toIndentedString(readStatusEnabled)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    typingIndicatorTimeout: ").append(toIndentedString(typingIndicatorTimeout)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    webhookFilters: ").append(toIndentedString(webhookFilters)).append("\n");
    sb.append("    webhookMethod: ").append(toIndentedString(webhookMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("consumption_report_interval");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("default_channel_creator_role_sid");
    openapiFields.add("default_channel_role_sid");
    openapiFields.add("default_service_role_sid");
    openapiFields.add("friendly_name");
    openapiFields.add("limits");
    openapiFields.add("links");
    openapiFields.add("media");
    openapiFields.add("notifications");
    openapiFields.add("post_webhook_retry_count");
    openapiFields.add("post_webhook_url");
    openapiFields.add("pre_webhook_retry_count");
    openapiFields.add("pre_webhook_url");
    openapiFields.add("reachability_enabled");
    openapiFields.add("read_status_enabled");
    openapiFields.add("sid");
    openapiFields.add("typing_indicator_timeout");
    openapiFields.add("url");
    openapiFields.add("webhook_filters");
    openapiFields.add("webhook_method");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChatV2Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChatV2Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChatV2Service is not found in the empty JSON string", ChatV2Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChatV2Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChatV2Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("default_channel_creator_role_sid") != null && !jsonObj.get("default_channel_creator_role_sid").isJsonNull()) && !jsonObj.get("default_channel_creator_role_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_channel_creator_role_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_channel_creator_role_sid").toString()));
      }
      if ((jsonObj.get("default_channel_role_sid") != null && !jsonObj.get("default_channel_role_sid").isJsonNull()) && !jsonObj.get("default_channel_role_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_channel_role_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_channel_role_sid").toString()));
      }
      if ((jsonObj.get("default_service_role_sid") != null && !jsonObj.get("default_service_role_sid").isJsonNull()) && !jsonObj.get("default_service_role_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_service_role_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_service_role_sid").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("post_webhook_url") != null && !jsonObj.get("post_webhook_url").isJsonNull()) && !jsonObj.get("post_webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_webhook_url").toString()));
      }
      if ((jsonObj.get("pre_webhook_url") != null && !jsonObj.get("pre_webhook_url").isJsonNull()) && !jsonObj.get("pre_webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_webhook_url").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webhook_filters") != null && !jsonObj.get("webhook_filters").isJsonNull() && !jsonObj.get("webhook_filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_filters` to be an array in the JSON string but got `%s`", jsonObj.get("webhook_filters").toString()));
      }
      if ((jsonObj.get("webhook_method") != null && !jsonObj.get("webhook_method").isJsonNull()) && !jsonObj.get("webhook_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChatV2Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChatV2Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChatV2Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChatV2Service.class));

       return (TypeAdapter<T>) new TypeAdapter<ChatV2Service>() {
           @Override
           public void write(JsonWriter out, ChatV2Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChatV2Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChatV2Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChatV2Service
   * @throws IOException if the JSON string is invalid with respect to ChatV2Service
   */
  public static ChatV2Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChatV2Service.class);
  }

  /**
   * Convert an instance of ChatV2Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

