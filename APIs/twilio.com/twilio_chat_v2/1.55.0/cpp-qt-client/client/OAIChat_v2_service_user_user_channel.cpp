/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChat_v2_service_user_user_channel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChat_v2_service_user_user_channel::OAIChat_v2_service_user_user_channel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChat_v2_service_user_user_channel::OAIChat_v2_service_user_user_channel() {
    this->initializeModel();
}

OAIChat_v2_service_user_user_channel::~OAIChat_v2_service_user_user_channel() {}

void OAIChat_v2_service_user_user_channel::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_channel_sid_isSet = false;
    m_channel_sid_isValid = false;

    m_last_consumed_message_index_isSet = false;
    m_last_consumed_message_index_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_member_sid_isSet = false;
    m_member_sid_isValid = false;

    m_notification_level_isSet = false;
    m_notification_level_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_unread_messages_count_isSet = false;
    m_unread_messages_count_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_sid_isSet = false;
    m_user_sid_isValid = false;
}

void OAIChat_v2_service_user_user_channel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChat_v2_service_user_user_channel::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_channel_sid_isValid = ::OpenAPI::fromJsonValue(m_channel_sid, json[QString("channel_sid")]);
    m_channel_sid_isSet = !json[QString("channel_sid")].isNull() && m_channel_sid_isValid;

    m_last_consumed_message_index_isValid = ::OpenAPI::fromJsonValue(m_last_consumed_message_index, json[QString("last_consumed_message_index")]);
    m_last_consumed_message_index_isSet = !json[QString("last_consumed_message_index")].isNull() && m_last_consumed_message_index_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_member_sid_isValid = ::OpenAPI::fromJsonValue(m_member_sid, json[QString("member_sid")]);
    m_member_sid_isSet = !json[QString("member_sid")].isNull() && m_member_sid_isValid;

    m_notification_level_isValid = ::OpenAPI::fromJsonValue(m_notification_level, json[QString("notification_level")]);
    m_notification_level_isSet = !json[QString("notification_level")].isNull() && m_notification_level_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_unread_messages_count_isValid = ::OpenAPI::fromJsonValue(m_unread_messages_count, json[QString("unread_messages_count")]);
    m_unread_messages_count_isSet = !json[QString("unread_messages_count")].isNull() && m_unread_messages_count_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_sid_isValid = ::OpenAPI::fromJsonValue(m_user_sid, json[QString("user_sid")]);
    m_user_sid_isSet = !json[QString("user_sid")].isNull() && m_user_sid_isValid;
}

QString OAIChat_v2_service_user_user_channel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChat_v2_service_user_user_channel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_channel_sid_isSet) {
        obj.insert(QString("channel_sid"), ::OpenAPI::toJsonValue(m_channel_sid));
    }
    if (m_last_consumed_message_index_isSet) {
        obj.insert(QString("last_consumed_message_index"), ::OpenAPI::toJsonValue(m_last_consumed_message_index));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_member_sid_isSet) {
        obj.insert(QString("member_sid"), ::OpenAPI::toJsonValue(m_member_sid));
    }
    if (m_notification_level.isSet()) {
        obj.insert(QString("notification_level"), ::OpenAPI::toJsonValue(m_notification_level));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_unread_messages_count_isSet) {
        obj.insert(QString("unread_messages_count"), ::OpenAPI::toJsonValue(m_unread_messages_count));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_sid_isSet) {
        obj.insert(QString("user_sid"), ::OpenAPI::toJsonValue(m_user_sid));
    }
    return obj;
}

QString OAIChat_v2_service_user_user_channel::getAccountSid() const {
    return m_account_sid;
}
void OAIChat_v2_service_user_user_channel::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIChat_v2_service_user_user_channel::getChannelSid() const {
    return m_channel_sid;
}
void OAIChat_v2_service_user_user_channel::setChannelSid(const QString &channel_sid) {
    m_channel_sid = channel_sid;
    m_channel_sid_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_channel_sid_Set() const{
    return m_channel_sid_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_channel_sid_Valid() const{
    return m_channel_sid_isValid;
}

qint32 OAIChat_v2_service_user_user_channel::getLastConsumedMessageIndex() const {
    return m_last_consumed_message_index;
}
void OAIChat_v2_service_user_user_channel::setLastConsumedMessageIndex(const qint32 &last_consumed_message_index) {
    m_last_consumed_message_index = last_consumed_message_index;
    m_last_consumed_message_index_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_last_consumed_message_index_Set() const{
    return m_last_consumed_message_index_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_last_consumed_message_index_Valid() const{
    return m_last_consumed_message_index_isValid;
}

OAIObject OAIChat_v2_service_user_user_channel::getLinks() const {
    return m_links;
}
void OAIChat_v2_service_user_user_channel::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_links_Set() const{
    return m_links_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIChat_v2_service_user_user_channel::getMemberSid() const {
    return m_member_sid;
}
void OAIChat_v2_service_user_user_channel::setMemberSid(const QString &member_sid) {
    m_member_sid = member_sid;
    m_member_sid_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_member_sid_Set() const{
    return m_member_sid_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_member_sid_Valid() const{
    return m_member_sid_isValid;
}

OAIUser_channel_enum_notification_level OAIChat_v2_service_user_user_channel::getNotificationLevel() const {
    return m_notification_level;
}
void OAIChat_v2_service_user_user_channel::setNotificationLevel(const OAIUser_channel_enum_notification_level &notification_level) {
    m_notification_level = notification_level;
    m_notification_level_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_notification_level_Set() const{
    return m_notification_level_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_notification_level_Valid() const{
    return m_notification_level_isValid;
}

QString OAIChat_v2_service_user_user_channel::getServiceSid() const {
    return m_service_sid;
}
void OAIChat_v2_service_user_user_channel::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

OAIUser_channel_enum_channel_status OAIChat_v2_service_user_user_channel::getStatus() const {
    return m_status;
}
void OAIChat_v2_service_user_user_channel::setStatus(const OAIUser_channel_enum_channel_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIChat_v2_service_user_user_channel::getUnreadMessagesCount() const {
    return m_unread_messages_count;
}
void OAIChat_v2_service_user_user_channel::setUnreadMessagesCount(const qint32 &unread_messages_count) {
    m_unread_messages_count = unread_messages_count;
    m_unread_messages_count_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_unread_messages_count_Set() const{
    return m_unread_messages_count_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_unread_messages_count_Valid() const{
    return m_unread_messages_count_isValid;
}

QString OAIChat_v2_service_user_user_channel::getUrl() const {
    return m_url;
}
void OAIChat_v2_service_user_user_channel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIChat_v2_service_user_user_channel::getUserSid() const {
    return m_user_sid;
}
void OAIChat_v2_service_user_user_channel::setUserSid(const QString &user_sid) {
    m_user_sid = user_sid;
    m_user_sid_isSet = true;
}

bool OAIChat_v2_service_user_user_channel::is_user_sid_Set() const{
    return m_user_sid_isSet;
}

bool OAIChat_v2_service_user_user_channel::is_user_sid_Valid() const{
    return m_user_sid_isValid;
}

bool OAIChat_v2_service_user_user_channel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_consumed_message_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_messages_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_sid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChat_v2_service_user_user_channel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
