/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChat_v2_service_channel_member.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChat_v2_service_channel_member::OAIChat_v2_service_channel_member(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChat_v2_service_channel_member::OAIChat_v2_service_channel_member() {
    this->initializeModel();
}

OAIChat_v2_service_channel_member::~OAIChat_v2_service_channel_member() {}

void OAIChat_v2_service_channel_member::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_channel_sid_isSet = false;
    m_channel_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_last_consumed_message_index_isSet = false;
    m_last_consumed_message_index_isValid = false;

    m_last_consumption_timestamp_isSet = false;
    m_last_consumption_timestamp_isValid = false;

    m_role_sid_isSet = false;
    m_role_sid_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIChat_v2_service_channel_member::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChat_v2_service_channel_member::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_channel_sid_isValid = ::OpenAPI::fromJsonValue(m_channel_sid, json[QString("channel_sid")]);
    m_channel_sid_isSet = !json[QString("channel_sid")].isNull() && m_channel_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_last_consumed_message_index_isValid = ::OpenAPI::fromJsonValue(m_last_consumed_message_index, json[QString("last_consumed_message_index")]);
    m_last_consumed_message_index_isSet = !json[QString("last_consumed_message_index")].isNull() && m_last_consumed_message_index_isValid;

    m_last_consumption_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_consumption_timestamp, json[QString("last_consumption_timestamp")]);
    m_last_consumption_timestamp_isSet = !json[QString("last_consumption_timestamp")].isNull() && m_last_consumption_timestamp_isValid;

    m_role_sid_isValid = ::OpenAPI::fromJsonValue(m_role_sid, json[QString("role_sid")]);
    m_role_sid_isSet = !json[QString("role_sid")].isNull() && m_role_sid_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIChat_v2_service_channel_member::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChat_v2_service_channel_member::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_channel_sid_isSet) {
        obj.insert(QString("channel_sid"), ::OpenAPI::toJsonValue(m_channel_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_last_consumed_message_index_isSet) {
        obj.insert(QString("last_consumed_message_index"), ::OpenAPI::toJsonValue(m_last_consumed_message_index));
    }
    if (m_last_consumption_timestamp_isSet) {
        obj.insert(QString("last_consumption_timestamp"), ::OpenAPI::toJsonValue(m_last_consumption_timestamp));
    }
    if (m_role_sid_isSet) {
        obj.insert(QString("role_sid"), ::OpenAPI::toJsonValue(m_role_sid));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIChat_v2_service_channel_member::getAccountSid() const {
    return m_account_sid;
}
void OAIChat_v2_service_channel_member::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIChat_v2_service_channel_member::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIChat_v2_service_channel_member::getAttributes() const {
    return m_attributes;
}
void OAIChat_v2_service_channel_member::setAttributes(const QString &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIChat_v2_service_channel_member::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIChat_v2_service_channel_member::getChannelSid() const {
    return m_channel_sid;
}
void OAIChat_v2_service_channel_member::setChannelSid(const QString &channel_sid) {
    m_channel_sid = channel_sid;
    m_channel_sid_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_channel_sid_Set() const{
    return m_channel_sid_isSet;
}

bool OAIChat_v2_service_channel_member::is_channel_sid_Valid() const{
    return m_channel_sid_isValid;
}

QDateTime OAIChat_v2_service_channel_member::getDateCreated() const {
    return m_date_created;
}
void OAIChat_v2_service_channel_member::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIChat_v2_service_channel_member::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIChat_v2_service_channel_member::getDateUpdated() const {
    return m_date_updated;
}
void OAIChat_v2_service_channel_member::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIChat_v2_service_channel_member::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIChat_v2_service_channel_member::getIdentity() const {
    return m_identity;
}
void OAIChat_v2_service_channel_member::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIChat_v2_service_channel_member::is_identity_Valid() const{
    return m_identity_isValid;
}

qint32 OAIChat_v2_service_channel_member::getLastConsumedMessageIndex() const {
    return m_last_consumed_message_index;
}
void OAIChat_v2_service_channel_member::setLastConsumedMessageIndex(const qint32 &last_consumed_message_index) {
    m_last_consumed_message_index = last_consumed_message_index;
    m_last_consumed_message_index_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_last_consumed_message_index_Set() const{
    return m_last_consumed_message_index_isSet;
}

bool OAIChat_v2_service_channel_member::is_last_consumed_message_index_Valid() const{
    return m_last_consumed_message_index_isValid;
}

QDateTime OAIChat_v2_service_channel_member::getLastConsumptionTimestamp() const {
    return m_last_consumption_timestamp;
}
void OAIChat_v2_service_channel_member::setLastConsumptionTimestamp(const QDateTime &last_consumption_timestamp) {
    m_last_consumption_timestamp = last_consumption_timestamp;
    m_last_consumption_timestamp_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_last_consumption_timestamp_Set() const{
    return m_last_consumption_timestamp_isSet;
}

bool OAIChat_v2_service_channel_member::is_last_consumption_timestamp_Valid() const{
    return m_last_consumption_timestamp_isValid;
}

QString OAIChat_v2_service_channel_member::getRoleSid() const {
    return m_role_sid;
}
void OAIChat_v2_service_channel_member::setRoleSid(const QString &role_sid) {
    m_role_sid = role_sid;
    m_role_sid_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_role_sid_Set() const{
    return m_role_sid_isSet;
}

bool OAIChat_v2_service_channel_member::is_role_sid_Valid() const{
    return m_role_sid_isValid;
}

QString OAIChat_v2_service_channel_member::getServiceSid() const {
    return m_service_sid;
}
void OAIChat_v2_service_channel_member::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIChat_v2_service_channel_member::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIChat_v2_service_channel_member::getSid() const {
    return m_sid;
}
void OAIChat_v2_service_channel_member::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIChat_v2_service_channel_member::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIChat_v2_service_channel_member::getUrl() const {
    return m_url;
}
void OAIChat_v2_service_channel_member::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIChat_v2_service_channel_member::is_url_Set() const{
    return m_url_isSet;
}

bool OAIChat_v2_service_channel_member::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIChat_v2_service_channel_member::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_consumed_message_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_consumption_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChat_v2_service_channel_member::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
