/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChat_v2_service.h
 *
 * 
 */

#ifndef OAIChat_v2_service_H
#define OAIChat_v2_service_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChat_v2_service : public OAIObject {
public:
    OAIChat_v2_service();
    OAIChat_v2_service(QString json);
    ~OAIChat_v2_service() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountSid() const;
    void setAccountSid(const QString &account_sid);
    bool is_account_sid_Set() const;
    bool is_account_sid_Valid() const;

    qint32 getConsumptionReportInterval() const;
    void setConsumptionReportInterval(const qint32 &consumption_report_interval);
    bool is_consumption_report_interval_Set() const;
    bool is_consumption_report_interval_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getDefaultChannelCreatorRoleSid() const;
    void setDefaultChannelCreatorRoleSid(const QString &default_channel_creator_role_sid);
    bool is_default_channel_creator_role_sid_Set() const;
    bool is_default_channel_creator_role_sid_Valid() const;

    QString getDefaultChannelRoleSid() const;
    void setDefaultChannelRoleSid(const QString &default_channel_role_sid);
    bool is_default_channel_role_sid_Set() const;
    bool is_default_channel_role_sid_Valid() const;

    QString getDefaultServiceRoleSid() const;
    void setDefaultServiceRoleSid(const QString &default_service_role_sid);
    bool is_default_service_role_sid_Set() const;
    bool is_default_service_role_sid_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QJsonValue getLimits() const;
    void setLimits(const QJsonValue &limits);
    bool is_limits_Set() const;
    bool is_limits_Valid() const;

    OAIObject getLinks() const;
    void setLinks(const OAIObject &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QJsonValue getMedia() const;
    void setMedia(const QJsonValue &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    QJsonValue getNotifications() const;
    void setNotifications(const QJsonValue &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    qint32 getPostWebhookRetryCount() const;
    void setPostWebhookRetryCount(const qint32 &post_webhook_retry_count);
    bool is_post_webhook_retry_count_Set() const;
    bool is_post_webhook_retry_count_Valid() const;

    QString getPostWebhookUrl() const;
    void setPostWebhookUrl(const QString &post_webhook_url);
    bool is_post_webhook_url_Set() const;
    bool is_post_webhook_url_Valid() const;

    qint32 getPreWebhookRetryCount() const;
    void setPreWebhookRetryCount(const qint32 &pre_webhook_retry_count);
    bool is_pre_webhook_retry_count_Set() const;
    bool is_pre_webhook_retry_count_Valid() const;

    QString getPreWebhookUrl() const;
    void setPreWebhookUrl(const QString &pre_webhook_url);
    bool is_pre_webhook_url_Set() const;
    bool is_pre_webhook_url_Valid() const;

    bool isReachabilityEnabled() const;
    void setReachabilityEnabled(const bool &reachability_enabled);
    bool is_reachability_enabled_Set() const;
    bool is_reachability_enabled_Valid() const;

    bool isReadStatusEnabled() const;
    void setReadStatusEnabled(const bool &read_status_enabled);
    bool is_read_status_enabled_Set() const;
    bool is_read_status_enabled_Valid() const;

    QString getSid() const;
    void setSid(const QString &sid);
    bool is_sid_Set() const;
    bool is_sid_Valid() const;

    qint32 getTypingIndicatorTimeout() const;
    void setTypingIndicatorTimeout(const qint32 &typing_indicator_timeout);
    bool is_typing_indicator_timeout_Set() const;
    bool is_typing_indicator_timeout_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QList<QString> getWebhookFilters() const;
    void setWebhookFilters(const QList<QString> &webhook_filters);
    bool is_webhook_filters_Set() const;
    bool is_webhook_filters_Valid() const;

    QString getWebhookMethod() const;
    void setWebhookMethod(const QString &webhook_method);
    bool is_webhook_method_Set() const;
    bool is_webhook_method_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_sid;
    bool m_account_sid_isSet;
    bool m_account_sid_isValid;

    qint32 m_consumption_report_interval;
    bool m_consumption_report_interval_isSet;
    bool m_consumption_report_interval_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_default_channel_creator_role_sid;
    bool m_default_channel_creator_role_sid_isSet;
    bool m_default_channel_creator_role_sid_isValid;

    QString m_default_channel_role_sid;
    bool m_default_channel_role_sid_isSet;
    bool m_default_channel_role_sid_isValid;

    QString m_default_service_role_sid;
    bool m_default_service_role_sid_isSet;
    bool m_default_service_role_sid_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QJsonValue m_limits;
    bool m_limits_isSet;
    bool m_limits_isValid;

    OAIObject m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QJsonValue m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    QJsonValue m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;

    qint32 m_post_webhook_retry_count;
    bool m_post_webhook_retry_count_isSet;
    bool m_post_webhook_retry_count_isValid;

    QString m_post_webhook_url;
    bool m_post_webhook_url_isSet;
    bool m_post_webhook_url_isValid;

    qint32 m_pre_webhook_retry_count;
    bool m_pre_webhook_retry_count_isSet;
    bool m_pre_webhook_retry_count_isValid;

    QString m_pre_webhook_url;
    bool m_pre_webhook_url_isSet;
    bool m_pre_webhook_url_isValid;

    bool m_reachability_enabled;
    bool m_reachability_enabled_isSet;
    bool m_reachability_enabled_isValid;

    bool m_read_status_enabled;
    bool m_read_status_enabled_isSet;
    bool m_read_status_enabled_isValid;

    QString m_sid;
    bool m_sid_isSet;
    bool m_sid_isValid;

    qint32 m_typing_indicator_timeout;
    bool m_typing_indicator_timeout_isSet;
    bool m_typing_indicator_timeout_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QList<QString> m_webhook_filters;
    bool m_webhook_filters_isSet;
    bool m_webhook_filters_isValid;

    QString m_webhook_method;
    bool m_webhook_method_isSet;
    bool m_webhook_method_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChat_v2_service)

#endif // OAIChat_v2_service_H
