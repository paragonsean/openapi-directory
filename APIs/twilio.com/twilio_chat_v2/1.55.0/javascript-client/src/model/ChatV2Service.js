/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatV2Service model module.
 * @module model/ChatV2Service
 * @version 1.55.0
 */
class ChatV2Service {
    /**
     * Constructs a new <code>ChatV2Service</code>.
     * @alias module:model/ChatV2Service
     */
    constructor() { 
        
        ChatV2Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChatV2Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatV2Service} obj Optional instance to populate.
     * @return {module:model/ChatV2Service} The populated <code>ChatV2Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatV2Service();

            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('consumption_report_interval')) {
                obj['consumption_report_interval'] = ApiClient.convertToType(data['consumption_report_interval'], 'Number');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_updated')) {
                obj['date_updated'] = ApiClient.convertToType(data['date_updated'], 'Date');
            }
            if (data.hasOwnProperty('default_channel_creator_role_sid')) {
                obj['default_channel_creator_role_sid'] = ApiClient.convertToType(data['default_channel_creator_role_sid'], 'String');
            }
            if (data.hasOwnProperty('default_channel_role_sid')) {
                obj['default_channel_role_sid'] = ApiClient.convertToType(data['default_channel_role_sid'], 'String');
            }
            if (data.hasOwnProperty('default_service_role_sid')) {
                obj['default_service_role_sid'] = ApiClient.convertToType(data['default_service_role_sid'], 'String');
            }
            if (data.hasOwnProperty('friendly_name')) {
                obj['friendly_name'] = ApiClient.convertToType(data['friendly_name'], 'String');
            }
            if (data.hasOwnProperty('limits')) {
                obj['limits'] = ApiClient.convertToType(data['limits'], Object);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], Object);
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], Object);
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], Object);
            }
            if (data.hasOwnProperty('post_webhook_retry_count')) {
                obj['post_webhook_retry_count'] = ApiClient.convertToType(data['post_webhook_retry_count'], 'Number');
            }
            if (data.hasOwnProperty('post_webhook_url')) {
                obj['post_webhook_url'] = ApiClient.convertToType(data['post_webhook_url'], 'String');
            }
            if (data.hasOwnProperty('pre_webhook_retry_count')) {
                obj['pre_webhook_retry_count'] = ApiClient.convertToType(data['pre_webhook_retry_count'], 'Number');
            }
            if (data.hasOwnProperty('pre_webhook_url')) {
                obj['pre_webhook_url'] = ApiClient.convertToType(data['pre_webhook_url'], 'String');
            }
            if (data.hasOwnProperty('reachability_enabled')) {
                obj['reachability_enabled'] = ApiClient.convertToType(data['reachability_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('read_status_enabled')) {
                obj['read_status_enabled'] = ApiClient.convertToType(data['read_status_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
            if (data.hasOwnProperty('typing_indicator_timeout')) {
                obj['typing_indicator_timeout'] = ApiClient.convertToType(data['typing_indicator_timeout'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('webhook_filters')) {
                obj['webhook_filters'] = ApiClient.convertToType(data['webhook_filters'], ['String']);
            }
            if (data.hasOwnProperty('webhook_method')) {
                obj['webhook_method'] = ApiClient.convertToType(data['webhook_method'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatV2Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatV2Service</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is a string
        if (data['default_channel_creator_role_sid'] && !(typeof data['default_channel_creator_role_sid'] === 'string' || data['default_channel_creator_role_sid'] instanceof String)) {
            throw new Error("Expected the field `default_channel_creator_role_sid` to be a primitive type in the JSON string but got " + data['default_channel_creator_role_sid']);
        }
        // ensure the json data is a string
        if (data['default_channel_role_sid'] && !(typeof data['default_channel_role_sid'] === 'string' || data['default_channel_role_sid'] instanceof String)) {
            throw new Error("Expected the field `default_channel_role_sid` to be a primitive type in the JSON string but got " + data['default_channel_role_sid']);
        }
        // ensure the json data is a string
        if (data['default_service_role_sid'] && !(typeof data['default_service_role_sid'] === 'string' || data['default_service_role_sid'] instanceof String)) {
            throw new Error("Expected the field `default_service_role_sid` to be a primitive type in the JSON string but got " + data['default_service_role_sid']);
        }
        // ensure the json data is a string
        if (data['friendly_name'] && !(typeof data['friendly_name'] === 'string' || data['friendly_name'] instanceof String)) {
            throw new Error("Expected the field `friendly_name` to be a primitive type in the JSON string but got " + data['friendly_name']);
        }
        // ensure the json data is a string
        if (data['post_webhook_url'] && !(typeof data['post_webhook_url'] === 'string' || data['post_webhook_url'] instanceof String)) {
            throw new Error("Expected the field `post_webhook_url` to be a primitive type in the JSON string but got " + data['post_webhook_url']);
        }
        // ensure the json data is a string
        if (data['pre_webhook_url'] && !(typeof data['pre_webhook_url'] === 'string' || data['pre_webhook_url'] instanceof String)) {
            throw new Error("Expected the field `pre_webhook_url` to be a primitive type in the JSON string but got " + data['pre_webhook_url']);
        }
        // ensure the json data is a string
        if (data['sid'] && !(typeof data['sid'] === 'string' || data['sid'] instanceof String)) {
            throw new Error("Expected the field `sid` to be a primitive type in the JSON string but got " + data['sid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['webhook_filters'])) {
            throw new Error("Expected the field `webhook_filters` to be an array in the JSON data but got " + data['webhook_filters']);
        }
        // ensure the json data is a string
        if (data['webhook_method'] && !(typeof data['webhook_method'] === 'string' || data['webhook_method'] instanceof String)) {
            throw new Error("Expected the field `webhook_method` to be a primitive type in the JSON string but got " + data['webhook_method']);
        }

        return true;
    }


}



/**
 * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.
 * @member {String} account_sid
 */
ChatV2Service.prototype['account_sid'] = undefined;

/**
 * DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
 * @member {Number} consumption_report_interval
 */
ChatV2Service.prototype['consumption_report_interval'] = undefined;

/**
 * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_created
 */
ChatV2Service.prototype['date_created'] = undefined;

/**
 * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} date_updated
 */
ChatV2Service.prototype['date_updated'] = undefined;

/**
 * The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
 * @member {String} default_channel_creator_role_sid
 */
ChatV2Service.prototype['default_channel_creator_role_sid'] = undefined;

/**
 * The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
 * @member {String} default_channel_role_sid
 */
ChatV2Service.prototype['default_channel_role_sid'] = undefined;

/**
 * The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
 * @member {String} default_service_role_sid
 */
ChatV2Service.prototype['default_service_role_sid'] = undefined;

/**
 * The string that you assigned to describe the resource.
 * @member {String} friendly_name
 */
ChatV2Service.prototype['friendly_name'] = undefined;

/**
 * An object that describes the limits of the service instance. The `limits` object contains  `channel_members` to describe the members/channel limit and `user_channels` to describe the channels/user limit. `channel_members` can be 1,000 or less, with a default of 250. `user_channels` can be 1,000 or less, with a default value of 100.
 * @member {Object} limits
 */
ChatV2Service.prototype['limits'] = undefined;

/**
 * The absolute URLs of the Service's [Channels](https://www.twilio.com/docs/chat/channels), [Roles](https://www.twilio.com/docs/chat/rest/role-resource), [Bindings](https://www.twilio.com/docs/chat/rest/binding-resource), and [Users](https://www.twilio.com/docs/chat/rest/user-resource).
 * @member {Object} links
 */
ChatV2Service.prototype['links'] = undefined;

/**
 * An object that describes the properties of media that the service supports. The object contains the `size_limit_mb` property, which describes the size of the largest media file in MB; and the `compatibility_message` property, which contains the message text to send when a media message does not have any text.
 * @member {Object} media
 */
ChatV2Service.prototype['media'] = undefined;

/**
 * The notification configuration for the Service instance. See [Push Notification Configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more info.
 * @member {Object} notifications
 */
ChatV2Service.prototype['notifications'] = undefined;

/**
 * The number of times to retry a call to the `post_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won't be retried.
 * @member {Number} post_webhook_retry_count
 */
ChatV2Service.prototype['post_webhook_retry_count'] = undefined;

/**
 * The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @member {String} post_webhook_url
 */
ChatV2Service.prototype['post_webhook_url'] = undefined;

/**
 * The number of times to retry a call to the `pre_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won't be retried.
 * @member {Number} pre_webhook_retry_count
 */
ChatV2Service.prototype['pre_webhook_retry_count'] = undefined;

/**
 * The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @member {String} pre_webhook_url
 */
ChatV2Service.prototype['pre_webhook_url'] = undefined;

/**
 * Whether the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) is enabled for this Service instance. The default is `false`.
 * @member {Boolean} reachability_enabled
 */
ChatV2Service.prototype['reachability_enabled'] = undefined;

/**
 * Whether the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature is enabled. The default is `true`.
 * @member {Boolean} read_status_enabled
 */
ChatV2Service.prototype['read_status_enabled'] = undefined;

/**
 * The unique string that we created to identify the Service resource.
 * @member {String} sid
 */
ChatV2Service.prototype['sid'] = undefined;

/**
 * How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
 * @member {Number} typing_indicator_timeout
 */
ChatV2Service.prototype['typing_indicator_timeout'] = undefined;

/**
 * The absolute URL of the Service resource.
 * @member {String} url
 */
ChatV2Service.prototype['url'] = undefined;

/**
 * The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @member {Array.<String>} webhook_filters
 */
ChatV2Service.prototype['webhook_filters'] = undefined;

/**
 * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 * @member {String} webhook_method
 */
ChatV2Service.prototype['webhook_method'] = undefined;






export default ChatV2Service;

