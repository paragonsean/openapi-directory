/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatV2ServiceChannelMember from '../model/ChatV2ServiceChannelMember';
import ListMemberResponse from '../model/ListMemberResponse';
import MemberEnumWebhookEnabledType from '../model/MemberEnumWebhookEnabledType';

/**
* ChatV2Member service.
* @module api/ChatV2MemberApi
* @version 1.55.0
*/
export default class ChatV2MemberApi {

    /**
    * Constructs a new ChatV2MemberApi. 
    * @alias module:api/ChatV2MemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMember operation.
     * @callback module:api/ChatV2MemberApi~createMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV2ServiceChannelMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Member resource under.
     * @param {String} channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the new Member resource belongs to. This value can be the Channel resource's `sid` or `unique_name`.
     * @param {String} identity The `identity` value that uniquely identifies the new resource's [User](https://www.twilio.com/docs/chat/rest/user-resource) within the [Service](https://www.twilio.com/docs/chat/rest/service-resource). See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more info.
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A valid JSON string that contains application-specific data.
     * @param {Date} [dateCreated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this parameter should only be used when a Member is being recreated from a backup/separate source.
     * @param {Date} [dateUpdated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated. The default value is `null`. Note that this parameter should only be used when a Member is being recreated from a backup/separate source and where a Member was previously updated.
     * @param {Number} [lastConsumedMessageIndex] The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) in the [Channel](https://www.twilio.com/docs/chat/channels) that the Member has read. This parameter should only be used when recreating a Member from a backup/separate source.
     * @param {Date} [lastConsumptionTimestamp] The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
     * @param {String} [roleSid] The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/rest/service-resource).
     * @param {module:api/ChatV2MemberApi~createMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV2ServiceChannelMember}
     */
    createMember(serviceSid, channelSid, identity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createMember");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling createMember");
      }
      // verify the required parameter 'identity' is set
      if (identity === undefined || identity === null) {
        throw new Error("Missing the required parameter 'identity' when calling createMember");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'Identity': identity,
        'LastConsumedMessageIndex': opts['lastConsumedMessageIndex'],
        'LastConsumptionTimestamp': opts['lastConsumptionTimestamp'],
        'RoleSid': opts['roleSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatV2ServiceChannelMember;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMember operation.
     * @callback module:api/ChatV2MemberApi~deleteMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the Member resource from.
     * @param {String} channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to delete belongs to. This value can be the Channel resource's `sid` or `unique_name`.
     * @param {String} sid The SID of the Member resource to delete. This value can be either the Member's `sid` or its `identity` value.
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ChatV2MemberApi~deleteMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMember(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteMember");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling deleteMember");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteMember");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchMember operation.
     * @callback module:api/ChatV2MemberApi~fetchMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV2ServiceChannelMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Member resource from.
     * @param {String} channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to fetch belongs to. This value can be the Channel resource's `sid` or `unique_name`.
     * @param {String} sid The SID of the Member resource to fetch. This value can be either the Member's `sid` or its `identity` value.
     * @param {module:api/ChatV2MemberApi~fetchMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV2ServiceChannelMember}
     */
    fetchMember(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchMember");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling fetchMember");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchMember");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatV2ServiceChannelMember;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMember operation.
     * @callback module:api/ChatV2MemberApi~listMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Member resources from.
     * @param {String} channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resources to read belong to. This value can be the Channel resource's `sid` or `unique_name`.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [identity] The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s `identity` value of the Member resources to read. See [access tokens](https://www.twilio.com/docs/chat/create-tokens) for more details.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ChatV2MemberApi~listMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMemberResponse}
     */
    listMember(serviceSid, channelSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listMember");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling listMember");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid
      };
      let queryParams = {
        'Identity': this.apiClient.buildCollectionParam(opts['identity'], 'multi'),
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMemberResponse;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMember operation.
     * @callback module:api/ChatV2MemberApi~updateMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV2ServiceChannelMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Member resource in.
     * @param {String} channelSid The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the Member resource to update belongs to. This value can be the Channel resource's `sid` or `unique_name`.
     * @param {String} sid The SID of the Member resource to update. This value can be either the Member's `sid` or its `identity` value.
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A valid JSON string that contains application-specific data.
     * @param {Date} [dateCreated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this parameter should only be used when a Member is being recreated from a backup/separate source.
     * @param {Date} [dateUpdated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
     * @param {Number} [lastConsumedMessageIndex] The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) that the Member has read within the [Channel](https://www.twilio.com/docs/chat/channels).
     * @param {Date} [lastConsumptionTimestamp] The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) read event for the Member within the [Channel](https://www.twilio.com/docs/chat/channels).
     * @param {String} [roleSid] The SID of the [Role](https://www.twilio.com/docs/chat/rest/role-resource) to assign to the member. The default roles are those specified on the [Service](https://www.twilio.com/docs/chat/rest/service-resource).
     * @param {module:api/ChatV2MemberApi~updateMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV2ServiceChannelMember}
     */
    updateMember(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateMember");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling updateMember");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateMember");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'LastConsumedMessageIndex': opts['lastConsumedMessageIndex'],
        'LastConsumptionTimestamp': opts['lastConsumptionTimestamp'],
        'RoleSid': opts['roleSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatV2ServiceChannelMember;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
