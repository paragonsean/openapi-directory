/**
 * Twilio - Chat
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChannelEnumChannelType from '../model/ChannelEnumChannelType';
import ChannelEnumWebhookEnabledType from '../model/ChannelEnumWebhookEnabledType';
import ChatV2ServiceChannel from '../model/ChatV2ServiceChannel';
import ListChannelResponse from '../model/ListChannelResponse';

/**
* ChatV2Channel service.
* @module api/ChatV2ChannelApi
* @version 1.55.0
*/
export default class ChatV2ChannelApi {

    /**
    * Constructs a new ChatV2ChannelApi. 
    * @alias module:api/ChatV2ChannelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:api/ChatV2ChannelApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV2ServiceChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to create the Channel resource under.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A valid JSON string that contains application-specific data.
     * @param {String} [createdBy] The `identity` of the User that created the channel. Default is: `system`.
     * @param {Date} [dateCreated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this should only be used in cases where a Channel is being recreated from a backup/separate source.
     * @param {Date} [dateUpdated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated. The default value is `null`. Note that this parameter should only be used in cases where a Channel is being recreated from a backup/separate source  and where a Message was previously updated.
     * @param {String} [friendlyName] A descriptive string that you create to describe the new resource. It can be up to 64 characters long.
     * @param {module:model/ChannelEnumChannelType} [type] 
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the Channel resource's `sid` in the URL. This value must be 64 characters or less in length and be unique within the Service.
     * @param {module:api/ChatV2ChannelApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV2ServiceChannel}
     */
    createChannel(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'CreatedBy': opts['createdBy'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'FriendlyName': opts['friendlyName'],
        'Type': opts['type'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatV2ServiceChannel;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/ChatV2ChannelApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to delete the resource from.
     * @param {String} sid The SID of the Channel resource to delete.  This value can be either the `sid` or the `unique_name` of the Channel resource to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/ChatV2ChannelApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannel(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchChannel operation.
     * @callback module:api/ChatV2ChannelApi~fetchChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV2ServiceChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to fetch the Channel resource from.
     * @param {String} sid The SID of the Channel resource to fetch. This value can be either the `sid` or the `unique_name` of the Channel resource to fetch.
     * @param {module:api/ChatV2ChannelApi~fetchChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV2ServiceChannel}
     */
    fetchChannel(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatV2ServiceChannel;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannel operation.
     * @callback module:api/ChatV2ChannelApi~listChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to read the Channel resources from.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ChannelEnumChannelType>} [type] The visibility of the Channels to read. Can be: `public` or `private` and defaults to `public`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/ChatV2ChannelApi~listChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelResponse}
     */
    listChannel(serviceSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid
      };
      let queryParams = {
        'Type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelResponse;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/ChatV2ChannelApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatV2ServiceChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) to update the Channel resource in.
     * @param {String} sid The SID of the Channel resource to update. This value can be either the `sid` or the `unique_name` of the Channel resource to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] A valid JSON string that contains application-specific data.
     * @param {String} [createdBy] The `identity` of the User that created the channel. Default is: `system`.
     * @param {Date} [dateCreated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was created. The default value is the current time set by the Chat service.  Note that this should only be used in cases where a Channel is being recreated from a backup/separate source.
     * @param {Date} [dateUpdated] The date, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, to assign to the resource as the date it was last updated.
     * @param {String} [friendlyName] A descriptive string that you create to describe the resource. It can be up to 256 characters long.
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL. This value must be 256 characters or less in length and unique within the Service.
     * @param {module:api/ChatV2ChannelApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatV2ServiceChannel}
     */
    updateChannel(serviceSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateChannel");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateChannel");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'CreatedBy': opts['createdBy'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'FriendlyName': opts['friendlyName'],
        'UniqueName': opts['uniqueName']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatV2ServiceChannel;
      let basePaths = ['https://chat.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
