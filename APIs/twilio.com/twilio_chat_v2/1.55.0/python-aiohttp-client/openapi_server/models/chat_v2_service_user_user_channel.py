# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_channel_enum_channel_status import UserChannelEnumChannelStatus
from openapi_server.models.user_channel_enum_notification_level import UserChannelEnumNotificationLevel
import re
from openapi_server import util


class ChatV2ServiceUserUserChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, channel_sid: str=None, last_consumed_message_index: int=None, links: object=None, member_sid: str=None, notification_level: UserChannelEnumNotificationLevel=None, service_sid: str=None, status: UserChannelEnumChannelStatus=None, unread_messages_count: int=None, url: str=None, user_sid: str=None):
        """ChatV2ServiceUserUserChannel - a model defined in OpenAPI

        :param account_sid: The account_sid of this ChatV2ServiceUserUserChannel.
        :param channel_sid: The channel_sid of this ChatV2ServiceUserUserChannel.
        :param last_consumed_message_index: The last_consumed_message_index of this ChatV2ServiceUserUserChannel.
        :param links: The links of this ChatV2ServiceUserUserChannel.
        :param member_sid: The member_sid of this ChatV2ServiceUserUserChannel.
        :param notification_level: The notification_level of this ChatV2ServiceUserUserChannel.
        :param service_sid: The service_sid of this ChatV2ServiceUserUserChannel.
        :param status: The status of this ChatV2ServiceUserUserChannel.
        :param unread_messages_count: The unread_messages_count of this ChatV2ServiceUserUserChannel.
        :param url: The url of this ChatV2ServiceUserUserChannel.
        :param user_sid: The user_sid of this ChatV2ServiceUserUserChannel.
        """
        self.openapi_types = {
            'account_sid': str,
            'channel_sid': str,
            'last_consumed_message_index': int,
            'links': object,
            'member_sid': str,
            'notification_level': UserChannelEnumNotificationLevel,
            'service_sid': str,
            'status': UserChannelEnumChannelStatus,
            'unread_messages_count': int,
            'url': str,
            'user_sid': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'channel_sid': 'channel_sid',
            'last_consumed_message_index': 'last_consumed_message_index',
            'links': 'links',
            'member_sid': 'member_sid',
            'notification_level': 'notification_level',
            'service_sid': 'service_sid',
            'status': 'status',
            'unread_messages_count': 'unread_messages_count',
            'url': 'url',
            'user_sid': 'user_sid'
        }

        self._account_sid = account_sid
        self._channel_sid = channel_sid
        self._last_consumed_message_index = last_consumed_message_index
        self._links = links
        self._member_sid = member_sid
        self._notification_level = notification_level
        self._service_sid = service_sid
        self._status = status
        self._unread_messages_count = unread_messages_count
        self._url = url
        self._user_sid = user_sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatV2ServiceUserUserChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chat.v2.service.user.user_channel of this ChatV2ServiceUserUserChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the User Channel resource.

        :return: The account_sid of this ChatV2ServiceUserUserChannel.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the User Channel resource.

        :param account_sid: The account_sid of this ChatV2ServiceUserUserChannel.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def channel_sid(self):
        """Gets the channel_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the User Channel resource belongs to.

        :return: The channel_sid of this ChatV2ServiceUserUserChannel.
        :rtype: str
        """
        return self._channel_sid

    @channel_sid.setter
    def channel_sid(self, channel_sid):
        """Sets the channel_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [Channel](https://www.twilio.com/docs/chat/channels) the User Channel resource belongs to.

        :param channel_sid: The channel_sid of this ChatV2ServiceUserUserChannel.
        :type channel_sid: str
        """
        if channel_sid is not None and len(channel_sid) > 34:
            raise ValueError("Invalid value for `channel_sid`, length must be less than or equal to `34`")
        if channel_sid is not None and len(channel_sid) < 34:
            raise ValueError("Invalid value for `channel_sid`, length must be greater than or equal to `34`")
        if channel_sid is not None and not re.search(r'^CH[0-9a-fA-F]{32}$', channel_sid):
            raise ValueError("Invalid value for `channel_sid`, must be a follow pattern or equal to `/^CH[0-9a-fA-F]{32}$/`")

        self._channel_sid = channel_sid

    @property
    def last_consumed_message_index(self):
        """Gets the last_consumed_message_index of this ChatV2ServiceUserUserChannel.

        The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) in the [Channel](https://www.twilio.com/docs/chat/channels) that the Member has read.

        :return: The last_consumed_message_index of this ChatV2ServiceUserUserChannel.
        :rtype: int
        """
        return self._last_consumed_message_index

    @last_consumed_message_index.setter
    def last_consumed_message_index(self, last_consumed_message_index):
        """Sets the last_consumed_message_index of this ChatV2ServiceUserUserChannel.

        The index of the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) in the [Channel](https://www.twilio.com/docs/chat/channels) that the Member has read.

        :param last_consumed_message_index: The last_consumed_message_index of this ChatV2ServiceUserUserChannel.
        :type last_consumed_message_index: int
        """

        self._last_consumed_message_index = last_consumed_message_index

    @property
    def links(self):
        """Gets the links of this ChatV2ServiceUserUserChannel.

        The absolute URLs of the [Members](https://www.twilio.com/docs/chat/rest/member-resource), [Messages](https://www.twilio.com/docs/chat/rest/message-resource) , [Invites](https://www.twilio.com/docs/chat/rest/invite-resource) and, if it exists, the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) for the Channel.

        :return: The links of this ChatV2ServiceUserUserChannel.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChatV2ServiceUserUserChannel.

        The absolute URLs of the [Members](https://www.twilio.com/docs/chat/rest/member-resource), [Messages](https://www.twilio.com/docs/chat/rest/message-resource) , [Invites](https://www.twilio.com/docs/chat/rest/invite-resource) and, if it exists, the last [Message](https://www.twilio.com/docs/chat/rest/message-resource) for the Channel.

        :param links: The links of this ChatV2ServiceUserUserChannel.
        :type links: object
        """

        self._links = links

    @property
    def member_sid(self):
        """Gets the member_sid of this ChatV2ServiceUserUserChannel.

        The SID of a [Member](https://www.twilio.com/docs/chat/rest/member-resource) that represents the User on the Channel.

        :return: The member_sid of this ChatV2ServiceUserUserChannel.
        :rtype: str
        """
        return self._member_sid

    @member_sid.setter
    def member_sid(self, member_sid):
        """Sets the member_sid of this ChatV2ServiceUserUserChannel.

        The SID of a [Member](https://www.twilio.com/docs/chat/rest/member-resource) that represents the User on the Channel.

        :param member_sid: The member_sid of this ChatV2ServiceUserUserChannel.
        :type member_sid: str
        """
        if member_sid is not None and len(member_sid) > 34:
            raise ValueError("Invalid value for `member_sid`, length must be less than or equal to `34`")
        if member_sid is not None and len(member_sid) < 34:
            raise ValueError("Invalid value for `member_sid`, length must be greater than or equal to `34`")
        if member_sid is not None and not re.search(r'^MB[0-9a-fA-F]{32}$', member_sid):
            raise ValueError("Invalid value for `member_sid`, must be a follow pattern or equal to `/^MB[0-9a-fA-F]{32}$/`")

        self._member_sid = member_sid

    @property
    def notification_level(self):
        """Gets the notification_level of this ChatV2ServiceUserUserChannel.


        :return: The notification_level of this ChatV2ServiceUserUserChannel.
        :rtype: UserChannelEnumNotificationLevel
        """
        return self._notification_level

    @notification_level.setter
    def notification_level(self, notification_level):
        """Sets the notification_level of this ChatV2ServiceUserUserChannel.


        :param notification_level: The notification_level of this ChatV2ServiceUserUserChannel.
        :type notification_level: UserChannelEnumNotificationLevel
        """

        self._notification_level = notification_level

    @property
    def service_sid(self):
        """Gets the service_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the User Channel resource is associated with.

        :return: The service_sid of this ChatV2ServiceUserUserChannel.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the User Channel resource is associated with.

        :param service_sid: The service_sid of this ChatV2ServiceUserUserChannel.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def status(self):
        """Gets the status of this ChatV2ServiceUserUserChannel.


        :return: The status of this ChatV2ServiceUserUserChannel.
        :rtype: UserChannelEnumChannelStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChatV2ServiceUserUserChannel.


        :param status: The status of this ChatV2ServiceUserUserChannel.
        :type status: UserChannelEnumChannelStatus
        """

        self._status = status

    @property
    def unread_messages_count(self):
        """Gets the unread_messages_count of this ChatV2ServiceUserUserChannel.

        The number of unread Messages in the Channel for the User. Note that retrieving messages on a client endpoint does not mean that messages are consumed or read. See [Consumption Horizon feature](https://www.twilio.com/docs/chat/consumption-horizon) to learn how to mark messages as consumed.

        :return: The unread_messages_count of this ChatV2ServiceUserUserChannel.
        :rtype: int
        """
        return self._unread_messages_count

    @unread_messages_count.setter
    def unread_messages_count(self, unread_messages_count):
        """Sets the unread_messages_count of this ChatV2ServiceUserUserChannel.

        The number of unread Messages in the Channel for the User. Note that retrieving messages on a client endpoint does not mean that messages are consumed or read. See [Consumption Horizon feature](https://www.twilio.com/docs/chat/consumption-horizon) to learn how to mark messages as consumed.

        :param unread_messages_count: The unread_messages_count of this ChatV2ServiceUserUserChannel.
        :type unread_messages_count: int
        """

        self._unread_messages_count = unread_messages_count

    @property
    def url(self):
        """Gets the url of this ChatV2ServiceUserUserChannel.

        The absolute URL of the User Channel resource.

        :return: The url of this ChatV2ServiceUserUserChannel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ChatV2ServiceUserUserChannel.

        The absolute URL of the User Channel resource.

        :param url: The url of this ChatV2ServiceUserUserChannel.
        :type url: str
        """

        self._url = url

    @property
    def user_sid(self):
        """Gets the user_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) the User Channel belongs to.

        :return: The user_sid of this ChatV2ServiceUserUserChannel.
        :rtype: str
        """
        return self._user_sid

    @user_sid.setter
    def user_sid(self, user_sid):
        """Sets the user_sid of this ChatV2ServiceUserUserChannel.

        The SID of the [User](https://www.twilio.com/docs/chat/rest/user-resource) the User Channel belongs to.

        :param user_sid: The user_sid of this ChatV2ServiceUserUserChannel.
        :type user_sid: str
        """
        if user_sid is not None and len(user_sid) > 34:
            raise ValueError("Invalid value for `user_sid`, length must be less than or equal to `34`")
        if user_sid is not None and len(user_sid) < 34:
            raise ValueError("Invalid value for `user_sid`, length must be greater than or equal to `34`")
        if user_sid is not None and not re.search(r'^US[0-9a-fA-F]{32}$', user_sid):
            raise ValueError("Invalid value for `user_sid`, must be a follow pattern or equal to `/^US[0-9a-fA-F]{32}$/`")

        self._user_sid = user_sid
