/**
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricingV1CountryApi_H
#define OAI_OAIPricingV1CountryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListMessagingCountryResponse.h"
#include "OAIListPhoneNumberCountryResponse.h"
#include "OAIListVoiceCountryResponse.h"
#include "OAIPricing_v1_messaging_messaging_country_instance.h"
#include "OAIPricing_v1_phone_number_phone_number_country_instance.h"
#include "OAIPricing_v1_voice_voice_country_instance.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPricingV1CountryApi : public QObject {
    Q_OBJECT

public:
    OAIPricingV1CountryApi(const int timeOut = 0);
    ~OAIPricingV1CountryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  iso_country QString [required]
    */
    virtual void fetchMessagingCountry(const QString &iso_country);

    /**
    * @param[in]  iso_country QString [required]
    */
    virtual void fetchPhoneNumberCountry(const QString &iso_country);

    /**
    * @param[in]  iso_country QString [required]
    */
    virtual void fetchVoiceCountry(const QString &iso_country);

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listMessagingCountry(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listPhoneNumberCountry(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listVoiceCountry(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fetchMessagingCountryCallback(OAIHttpRequestWorker *worker);
    void fetchPhoneNumberCountryCallback(OAIHttpRequestWorker *worker);
    void fetchVoiceCountryCallback(OAIHttpRequestWorker *worker);
    void listMessagingCountryCallback(OAIHttpRequestWorker *worker);
    void listPhoneNumberCountryCallback(OAIHttpRequestWorker *worker);
    void listVoiceCountryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fetchMessagingCountrySignal(OAIPricing_v1_messaging_messaging_country_instance summary);
    void fetchPhoneNumberCountrySignal(OAIPricing_v1_phone_number_phone_number_country_instance summary);
    void fetchVoiceCountrySignal(OAIPricing_v1_voice_voice_country_instance summary);
    void listMessagingCountrySignal(OAIListMessagingCountryResponse summary);
    void listPhoneNumberCountrySignal(OAIListPhoneNumberCountryResponse summary);
    void listVoiceCountrySignal(OAIListVoiceCountryResponse summary);


    void fetchMessagingCountrySignalFull(OAIHttpRequestWorker *worker, OAIPricing_v1_messaging_messaging_country_instance summary);
    void fetchPhoneNumberCountrySignalFull(OAIHttpRequestWorker *worker, OAIPricing_v1_phone_number_phone_number_country_instance summary);
    void fetchVoiceCountrySignalFull(OAIHttpRequestWorker *worker, OAIPricing_v1_voice_voice_country_instance summary);
    void listMessagingCountrySignalFull(OAIHttpRequestWorker *worker, OAIListMessagingCountryResponse summary);
    void listPhoneNumberCountrySignalFull(OAIHttpRequestWorker *worker, OAIListPhoneNumberCountryResponse summary);
    void listVoiceCountrySignalFull(OAIHttpRequestWorker *worker, OAIListVoiceCountryResponse summary);

    Q_DECL_DEPRECATED_X("Use fetchMessagingCountrySignalError() instead")
    void fetchMessagingCountrySignalE(OAIPricing_v1_messaging_messaging_country_instance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchMessagingCountrySignalError(OAIPricing_v1_messaging_messaging_country_instance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchPhoneNumberCountrySignalError() instead")
    void fetchPhoneNumberCountrySignalE(OAIPricing_v1_phone_number_phone_number_country_instance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchPhoneNumberCountrySignalError(OAIPricing_v1_phone_number_phone_number_country_instance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchVoiceCountrySignalError() instead")
    void fetchVoiceCountrySignalE(OAIPricing_v1_voice_voice_country_instance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVoiceCountrySignalError(OAIPricing_v1_voice_voice_country_instance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMessagingCountrySignalError() instead")
    void listMessagingCountrySignalE(OAIListMessagingCountryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMessagingCountrySignalError(OAIListMessagingCountryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumberCountrySignalError() instead")
    void listPhoneNumberCountrySignalE(OAIListPhoneNumberCountryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumberCountrySignalError(OAIListPhoneNumberCountryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceCountrySignalError() instead")
    void listVoiceCountrySignalE(OAIListVoiceCountryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceCountrySignalError(OAIListVoiceCountryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fetchMessagingCountrySignalErrorFull() instead")
    void fetchMessagingCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchMessagingCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchPhoneNumberCountrySignalErrorFull() instead")
    void fetchPhoneNumberCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchPhoneNumberCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchVoiceCountrySignalErrorFull() instead")
    void fetchVoiceCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchVoiceCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMessagingCountrySignalErrorFull() instead")
    void listMessagingCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMessagingCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumberCountrySignalErrorFull() instead")
    void listPhoneNumberCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumberCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceCountrySignalErrorFull() instead")
    void listVoiceCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
