/*
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutopilotV1AssistantWebhook;
import org.openapitools.client.model.ListWebhookResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutopilotV1WebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutopilotV1WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutopilotV1WebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWebhook
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (required)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookCall(String assistantSid, String events, String uniqueName, URI webhookUrl, String webhookMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Webhooks"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (events != null) {
            localVarFormParams.put("Events", events);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (webhookMethod != null) {
            localVarFormParams.put("WebhookMethod", webhookMethod);
        }

        if (webhookUrl != null) {
            localVarFormParams.put("WebhookUrl", webhookUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(String assistantSid, String events, String uniqueName, URI webhookUrl, String webhookMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling createWebhook(Async)");
        }

        // verify the required parameter 'events' is set
        if (events == null) {
            throw new ApiException("Missing the required parameter 'events' when calling createWebhook(Async)");
        }

        // verify the required parameter 'uniqueName' is set
        if (uniqueName == null) {
            throw new ApiException("Missing the required parameter 'uniqueName' when calling createWebhook(Async)");
        }

        // verify the required parameter 'webhookUrl' is set
        if (webhookUrl == null) {
            throw new ApiException("Missing the required parameter 'webhookUrl' when calling createWebhook(Async)");
        }

        return createWebhookCall(assistantSid, events, uniqueName, webhookUrl, webhookMethod, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (required)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @return AutopilotV1AssistantWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public AutopilotV1AssistantWebhook createWebhook(String assistantSid, String events, String uniqueName, URI webhookUrl, String webhookMethod) throws ApiException {
        ApiResponse<AutopilotV1AssistantWebhook> localVarResp = createWebhookWithHttpInfo(assistantSid, events, uniqueName, webhookUrl, webhookMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (required)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @return ApiResponse&lt;AutopilotV1AssistantWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutopilotV1AssistantWebhook> createWebhookWithHttpInfo(String assistantSid, String events, String uniqueName, URI webhookUrl, String webhookMethod) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(assistantSid, events, uniqueName, webhookUrl, webhookMethod, null);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (required)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (required)
     * @param webhookUrl The URL associated with this Webhook. (required)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookAsync(String assistantSid, String events, String uniqueName, URI webhookUrl, String webhookMethod, final ApiCallback<AutopilotV1AssistantWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(assistantSid, events, uniqueName, webhookUrl, webhookMethod, _callback);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWebhook
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling deleteWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteWebhook(Async)");
        }

        return deleteWebhookCall(assistantSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWebhook(String assistantSid, String sid) throws ApiException {
        deleteWebhookWithHttpInfo(assistantSid, sid);
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWebhookWithHttpInfo(String assistantSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(assistantSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWebhookAsync(String assistantSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(assistantSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchWebhook
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWebhookCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWebhookValidateBeforeCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling fetchWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchWebhook(Async)");
        }

        return fetchWebhookCall(assistantSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @return AutopilotV1AssistantWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AutopilotV1AssistantWebhook fetchWebhook(String assistantSid, String sid) throws ApiException {
        ApiResponse<AutopilotV1AssistantWebhook> localVarResp = fetchWebhookWithHttpInfo(assistantSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @return ApiResponse&lt;AutopilotV1AssistantWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutopilotV1AssistantWebhook> fetchWebhookWithHttpInfo(String assistantSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchWebhookValidateBeforeCall(assistantSid, sid, null);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchWebhookAsync(String assistantSid, String sid, final ApiCallback<AutopilotV1AssistantWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchWebhookValidateBeforeCall(assistantSid, sid, _callback);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebhook
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhookCall(String assistantSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Webhooks"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebhookValidateBeforeCall(String assistantSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling listWebhook(Async)");
        }

        return listWebhookCall(assistantSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListWebhookResponse listWebhook(String assistantSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListWebhookResponse> localVarResp = listWebhookWithHttpInfo(assistantSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListWebhookResponse> listWebhookWithHttpInfo(String assistantSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listWebhookValidateBeforeCall(assistantSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhookAsync(String assistantSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebhookValidateBeforeCall(assistantSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebhook
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (optional)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookCall(String assistantSid, String sid, String events, String uniqueName, String webhookMethod, URI webhookUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (events != null) {
            localVarFormParams.put("Events", events);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        if (webhookMethod != null) {
            localVarFormParams.put("WebhookMethod", webhookMethod);
        }

        if (webhookUrl != null) {
            localVarFormParams.put("WebhookUrl", webhookUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookValidateBeforeCall(String assistantSid, String sid, String events, String uniqueName, String webhookMethod, URI webhookUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling updateWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateWebhook(Async)");
        }

        return updateWebhookCall(assistantSid, sid, events, uniqueName, webhookMethod, webhookUrl, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (optional)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @return AutopilotV1AssistantWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AutopilotV1AssistantWebhook updateWebhook(String assistantSid, String sid, String events, String uniqueName, String webhookMethod, URI webhookUrl) throws ApiException {
        ApiResponse<AutopilotV1AssistantWebhook> localVarResp = updateWebhookWithHttpInfo(assistantSid, sid, events, uniqueName, webhookMethod, webhookUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (optional)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @return ApiResponse&lt;AutopilotV1AssistantWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutopilotV1AssistantWebhook> updateWebhookWithHttpInfo(String assistantSid, String sid, String events, String uniqueName, String webhookMethod, URI webhookUrl) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(assistantSid, sid, events, uniqueName, webhookMethod, webhookUrl, null);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Webhook resource to update. (required)
     * @param events The list of space-separated events that this Webhook will subscribe to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the &#x60;sid&#x60; in the URL path to address the resource. This value must be unique and 64 characters or less in length. (optional)
     * @param webhookMethod The method to be used when calling the webhook&#39;s URL. (optional)
     * @param webhookUrl The URL associated with this Webhook. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebhookAsync(String assistantSid, String sid, String events, String uniqueName, String webhookMethod, URI webhookUrl, final ApiCallback<AutopilotV1AssistantWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(assistantSid, sid, events, uniqueName, webhookMethod, webhookUrl, _callback);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
