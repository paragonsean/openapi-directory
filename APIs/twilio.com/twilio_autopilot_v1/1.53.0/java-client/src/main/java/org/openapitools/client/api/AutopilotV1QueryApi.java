/*
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutopilotV1AssistantQuery;
import org.openapitools.client.model.ListQueryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutopilotV1QueryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutopilotV1QueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutopilotV1QueryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createQuery
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new query. For example: &#x60;en-US&#x60;. (required)
     * @param query The end-user&#39;s natural language input. It can be up to 2048 characters long. (required)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param tasks The list of tasks to limit the new query to. Tasks are expressed as a comma-separated list of task &#x60;unique_name&#x60; values. For example, &#x60;task-unique_name-1, task-unique_name-2&#x60;. Listing specific tasks is useful to constrain the paths that a user can take. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQueryCall(String assistantSid, String language, String query, String modelBuild, String tasks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Queries"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarFormParams.put("Language", language);
        }

        if (modelBuild != null) {
            localVarFormParams.put("ModelBuild", modelBuild);
        }

        if (query != null) {
            localVarFormParams.put("Query", query);
        }

        if (tasks != null) {
            localVarFormParams.put("Tasks", tasks);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQueryValidateBeforeCall(String assistantSid, String language, String query, String modelBuild, String tasks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling createQuery(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling createQuery(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling createQuery(Async)");
        }

        return createQueryCall(assistantSid, language, query, modelBuild, tasks, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new query. For example: &#x60;en-US&#x60;. (required)
     * @param query The end-user&#39;s natural language input. It can be up to 2048 characters long. (required)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param tasks The list of tasks to limit the new query to. Tasks are expressed as a comma-separated list of task &#x60;unique_name&#x60; values. For example, &#x60;task-unique_name-1, task-unique_name-2&#x60;. Listing specific tasks is useful to constrain the paths that a user can take. (optional)
     * @return AutopilotV1AssistantQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public AutopilotV1AssistantQuery createQuery(String assistantSid, String language, String query, String modelBuild, String tasks) throws ApiException {
        ApiResponse<AutopilotV1AssistantQuery> localVarResp = createQueryWithHttpInfo(assistantSid, language, query, modelBuild, tasks);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new query. For example: &#x60;en-US&#x60;. (required)
     * @param query The end-user&#39;s natural language input. It can be up to 2048 characters long. (required)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param tasks The list of tasks to limit the new query to. Tasks are expressed as a comma-separated list of task &#x60;unique_name&#x60; values. For example, &#x60;task-unique_name-1, task-unique_name-2&#x60;. Listing specific tasks is useful to constrain the paths that a user can take. (optional)
     * @return ApiResponse&lt;AutopilotV1AssistantQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutopilotV1AssistantQuery> createQueryWithHttpInfo(String assistantSid, String language, String query, String modelBuild, String tasks) throws ApiException {
        okhttp3.Call localVarCall = createQueryValidateBeforeCall(assistantSid, language, query, modelBuild, tasks, null);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new query. For example: &#x60;en-US&#x60;. (required)
     * @param query The end-user&#39;s natural language input. It can be up to 2048 characters long. (required)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param tasks The list of tasks to limit the new query to. Tasks are expressed as a comma-separated list of task &#x60;unique_name&#x60; values. For example, &#x60;task-unique_name-1, task-unique_name-2&#x60;. Listing specific tasks is useful to constrain the paths that a user can take. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQueryAsync(String assistantSid, String language, String query, String modelBuild, String tasks, final ApiCallback<AutopilotV1AssistantQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQueryValidateBeforeCall(assistantSid, language, query, modelBuild, tasks, _callback);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteQuery
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQueryCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Queries/{Sid}"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteQueryValidateBeforeCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling deleteQuery(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteQuery(Async)");
        }

        return deleteQueryCall(assistantSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteQuery(String assistantSid, String sid) throws ApiException {
        deleteQueryWithHttpInfo(assistantSid, sid);
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteQueryWithHttpInfo(String assistantSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteQueryValidateBeforeCall(assistantSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQueryAsync(String assistantSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteQueryValidateBeforeCall(assistantSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchQuery
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchQueryCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Queries/{Sid}"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchQueryValidateBeforeCall(String assistantSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling fetchQuery(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchQuery(Async)");
        }

        return fetchQueryCall(assistantSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to fetch. (required)
     * @return AutopilotV1AssistantQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AutopilotV1AssistantQuery fetchQuery(String assistantSid, String sid) throws ApiException {
        ApiResponse<AutopilotV1AssistantQuery> localVarResp = fetchQueryWithHttpInfo(assistantSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to fetch. (required)
     * @return ApiResponse&lt;AutopilotV1AssistantQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutopilotV1AssistantQuery> fetchQueryWithHttpInfo(String assistantSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchQueryValidateBeforeCall(assistantSid, sid, null);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchQueryAsync(String assistantSid, String sid, final ApiCallback<AutopilotV1AssistantQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchQueryValidateBeforeCall(assistantSid, sid, _callback);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listQuery
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query resources to read. For example: &#x60;en-US&#x60;. (optional)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param status The status of the resources to read. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @param dialogueSid The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue). (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listQueryCall(String assistantSid, String language, String modelBuild, String status, String dialogueSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Queries"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Language", language));
        }

        if (modelBuild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ModelBuild", modelBuild));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (dialogueSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DialogueSid", dialogueSid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listQueryValidateBeforeCall(String assistantSid, String language, String modelBuild, String status, String dialogueSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling listQuery(Async)");
        }

        return listQueryCall(assistantSid, language, modelBuild, status, dialogueSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query resources to read. For example: &#x60;en-US&#x60;. (optional)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param status The status of the resources to read. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @param dialogueSid The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue). (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListQueryResponse listQuery(String assistantSid, String language, String modelBuild, String status, String dialogueSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListQueryResponse> localVarResp = listQueryWithHttpInfo(assistantSid, language, modelBuild, status, dialogueSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query resources to read. For example: &#x60;en-US&#x60;. (optional)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param status The status of the resources to read. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @param dialogueSid The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue). (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListQueryResponse> listQueryWithHttpInfo(String assistantSid, String language, String modelBuild, String status, String dialogueSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listQueryValidateBeforeCall(assistantSid, language, modelBuild, status, dialogueSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read. (required)
     * @param language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query resources to read. For example: &#x60;en-US&#x60;. (optional)
     * @param modelBuild The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried. (optional)
     * @param status The status of the resources to read. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @param dialogueSid The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue). (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listQueryAsync(String assistantSid, String language, String modelBuild, String status, String dialogueSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listQueryValidateBeforeCall(assistantSid, language, modelBuild, status, dialogueSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateQuery
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to update. (required)
     * @param sampleSid The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query. (optional)
     * @param status The new status of the resource. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQueryCall(String assistantSid, String sid, String sampleSid, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://autopilot.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Assistants/{AssistantSid}/Queries/{Sid}"
            .replace("{" + "AssistantSid" + "}", localVarApiClient.escapeString(assistantSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sampleSid != null) {
            localVarFormParams.put("SampleSid", sampleSid);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateQueryValidateBeforeCall(String assistantSid, String sid, String sampleSid, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantSid' is set
        if (assistantSid == null) {
            throw new ApiException("Missing the required parameter 'assistantSid' when calling updateQuery(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateQuery(Async)");
        }

        return updateQueryCall(assistantSid, sid, sampleSid, status, _callback);

    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to update. (required)
     * @param sampleSid The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query. (optional)
     * @param status The new status of the resource. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @return AutopilotV1AssistantQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AutopilotV1AssistantQuery updateQuery(String assistantSid, String sid, String sampleSid, String status) throws ApiException {
        ApiResponse<AutopilotV1AssistantQuery> localVarResp = updateQueryWithHttpInfo(assistantSid, sid, sampleSid, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to update. (required)
     * @param sampleSid The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query. (optional)
     * @param status The new status of the resource. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @return ApiResponse&lt;AutopilotV1AssistantQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutopilotV1AssistantQuery> updateQueryWithHttpInfo(String assistantSid, String sid, String sampleSid, String status) throws ApiException {
        okhttp3.Call localVarCall = updateQueryValidateBeforeCall(assistantSid, sid, sampleSid, status, null);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update. (required)
     * @param sid The Twilio-provided string that uniquely identifies the Query resource to update. (required)
     * @param sampleSid The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query. (optional)
     * @param status The new status of the resource. Can be: &#x60;pending-review&#x60;, &#x60;reviewed&#x60;, or &#x60;discarded&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQueryAsync(String assistantSid, String sid, String sampleSid, String status, final ApiCallback<AutopilotV1AssistantQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateQueryValidateBeforeCall(assistantSid, sid, sampleSid, status, _callback);
        Type localVarReturnType = new TypeToken<AutopilotV1AssistantQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
