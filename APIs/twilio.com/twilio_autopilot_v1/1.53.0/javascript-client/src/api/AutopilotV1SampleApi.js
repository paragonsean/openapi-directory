/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutopilotV1AssistantTaskSample from '../model/AutopilotV1AssistantTaskSample';
import ListSampleResponse from '../model/ListSampleResponse';

/**
* AutopilotV1Sample service.
* @module api/AutopilotV1SampleApi
* @version 1.53.0
*/
export default class AutopilotV1SampleApi {

    /**
    * Constructs a new AutopilotV1SampleApi. 
    * @alias module:api/AutopilotV1SampleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSample operation.
     * @callback module:api/AutopilotV1SampleApi~createSampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantTaskSample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the new resource.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to create.
     * @param {String} language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new sample. For example: `en-US`.
     * @param {String} taggedText The text example of how end users might express the task. The sample can contain [Field tag blocks](https://www.twilio.com/docs/autopilot/api/task-sample#field-tagging).
     * @param {Object} opts Optional parameters
     * @param {String} [sourceChannel] The communication channel from which the new sample was captured. Can be: `voice`, `sms`, `chat`, `alexa`, `google-assistant`, `slack`, or null if not included.
     * @param {module:api/AutopilotV1SampleApi~createSampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantTaskSample}
     */
    createSample(assistantSid, taskSid, language, taggedText, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling createSample");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling createSample");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling createSample");
      }
      // verify the required parameter 'taggedText' is set
      if (taggedText === undefined || taggedText === null) {
        throw new Error("Missing the required parameter 'taggedText' when calling createSample");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Language': language,
        'SourceChannel': opts['sourceChannel'],
        'TaggedText': taggedText
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantTaskSample;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSample operation.
     * @callback module:api/AutopilotV1SampleApi~deleteSampleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to delete.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to delete.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Sample resource to delete.
     * @param {module:api/AutopilotV1SampleApi~deleteSampleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSample(assistantSid, taskSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling deleteSample");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling deleteSample");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteSample");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchSample operation.
     * @callback module:api/AutopilotV1SampleApi~fetchSampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantTaskSample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource to fetch.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to create.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Sample resource to fetch.
     * @param {module:api/AutopilotV1SampleApi~fetchSampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantTaskSample}
     */
    fetchSample(assistantSid, taskSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling fetchSample");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling fetchSample");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchSample");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantTaskSample;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listSample operation.
     * @callback module:api/AutopilotV1SampleApi~listSampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSampleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to read.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resources to read.
     * @param {Object} opts Optional parameters
     * @param {String} [language] The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the sample. For example: `en-US`.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/AutopilotV1SampleApi~listSampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSampleResponse}
     */
    listSample(assistantSid, taskSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling listSample");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling listSample");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid
      };
      let queryParams = {
        'Language': opts['language'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSampleResponse;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSample operation.
     * @callback module:api/AutopilotV1SampleApi~updateSampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantTaskSample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource to update.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the Sample resource to update.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Sample resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [language] The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the sample. For example: `en-US`.
     * @param {String} [sourceChannel] The communication channel from which the sample was captured. Can be: `voice`, `sms`, `chat`, `alexa`, `google-assistant`, `slack`, or null if not included.
     * @param {String} [taggedText] The text example of how end users might express the task. The sample can contain [Field tag blocks](https://www.twilio.com/docs/autopilot/api/task-sample#field-tagging).
     * @param {module:api/AutopilotV1SampleApi~updateSampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantTaskSample}
     */
    updateSample(assistantSid, taskSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling updateSample");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling updateSample");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateSample");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Language': opts['language'],
        'SourceChannel': opts['sourceChannel'],
        'TaggedText': opts['taggedText']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantTaskSample;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
