/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutopilotV1AssistantWebhook from '../model/AutopilotV1AssistantWebhook';
import ListWebhookResponse from '../model/ListWebhookResponse';

/**
* AutopilotV1Webhook service.
* @module api/AutopilotV1WebhookApi
* @version 1.53.0
*/
export default class AutopilotV1WebhookApi {

    /**
    * Constructs a new AutopilotV1WebhookApi. 
    * @alias module:api/AutopilotV1WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWebhook operation.
     * @callback module:api/AutopilotV1WebhookApi~createWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource.
     * @param {String} events The list of space-separated events that this Webhook will subscribe to.
     * @param {String} uniqueName An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the `sid` in the URL path to address the resource. This value must be unique and 64 characters or less in length.
     * @param {String} webhookUrl The URL associated with this Webhook.
     * @param {Object} opts Optional parameters
     * @param {String} [webhookMethod] The method to be used when calling the webhook's URL.
     * @param {module:api/AutopilotV1WebhookApi~createWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantWebhook}
     */
    createWebhook(assistantSid, events, uniqueName, webhookUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling createWebhook");
      }
      // verify the required parameter 'events' is set
      if (events === undefined || events === null) {
        throw new Error("Missing the required parameter 'events' when calling createWebhook");
      }
      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling createWebhook");
      }
      // verify the required parameter 'webhookUrl' is set
      if (webhookUrl === undefined || webhookUrl === null) {
        throw new Error("Missing the required parameter 'webhookUrl' when calling createWebhook");
      }

      let pathParams = {
        'AssistantSid': assistantSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Events': events,
        'UniqueName': uniqueName,
        'WebhookMethod': opts['webhookMethod'],
        'WebhookUrl': webhookUrl
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantWebhook;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebhook operation.
     * @callback module:api/AutopilotV1WebhookApi~deleteWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Webhook resource to delete.
     * @param {module:api/AutopilotV1WebhookApi~deleteWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhook(assistantSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling deleteWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteWebhook");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchWebhook operation.
     * @callback module:api/AutopilotV1WebhookApi~fetchWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Webhook resource to fetch.
     * @param {module:api/AutopilotV1WebhookApi~fetchWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantWebhook}
     */
    fetchWebhook(assistantSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling fetchWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchWebhook");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantWebhook;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listWebhook operation.
     * @callback module:api/AutopilotV1WebhookApi~listWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/AutopilotV1WebhookApi~listWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWebhookResponse}
     */
    listWebhook(assistantSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling listWebhook");
      }

      let pathParams = {
        'AssistantSid': assistantSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWebhookResponse;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhook operation.
     * @callback module:api/AutopilotV1WebhookApi~updateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Webhook resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [events] The list of space-separated events that this Webhook will subscribe to.
     * @param {String} [uniqueName] An application-defined string that uniquely identifies the new resource. It can be used as an alternative to the `sid` in the URL path to address the resource. This value must be unique and 64 characters or less in length.
     * @param {String} [webhookMethod] The method to be used when calling the webhook's URL.
     * @param {String} [webhookUrl] The URL associated with this Webhook.
     * @param {module:api/AutopilotV1WebhookApi~updateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantWebhook}
     */
    updateWebhook(assistantSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling updateWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateWebhook");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Events': opts['events'],
        'UniqueName': opts['uniqueName'],
        'WebhookMethod': opts['webhookMethod'],
        'WebhookUrl': opts['webhookUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantWebhook;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
