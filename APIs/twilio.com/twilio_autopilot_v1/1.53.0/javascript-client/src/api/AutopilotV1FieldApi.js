/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutopilotV1AssistantTaskField from '../model/AutopilotV1AssistantTaskField';
import ListFieldResponse from '../model/ListFieldResponse';

/**
* AutopilotV1Field service.
* @module api/AutopilotV1FieldApi
* @version 1.53.0
*/
export default class AutopilotV1FieldApi {

    /**
    * Constructs a new AutopilotV1FieldApi. 
    * @alias module:api/AutopilotV1FieldApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createField operation.
     * @callback module:api/AutopilotV1FieldApi~createFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantTaskField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the new resource.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the new Field resource.
     * @param {String} fieldType The Field Type of the new field. Can be: a [Built-in Field Type](https://www.twilio.com/docs/autopilot/built-in-field-types), the `unique_name`, or the `sid` of a custom Field Type.
     * @param {String} uniqueName An application-defined string that uniquely identifies the new resource. This value must be a unique string of no more than 64 characters. It can be used as an alternative to the `sid` in the URL path to address the resource.
     * @param {module:api/AutopilotV1FieldApi~createFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantTaskField}
     */
    createField(assistantSid, taskSid, fieldType, uniqueName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling createField");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling createField");
      }
      // verify the required parameter 'fieldType' is set
      if (fieldType === undefined || fieldType === null) {
        throw new Error("Missing the required parameter 'fieldType' when calling createField");
      }
      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling createField");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'FieldType': fieldType,
        'UniqueName': uniqueName
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantTaskField;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteField operation.
     * @callback module:api/AutopilotV1FieldApi~deleteFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to delete.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the Field resource to delete.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Field resource to delete.
     * @param {module:api/AutopilotV1FieldApi~deleteFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteField(assistantSid, taskSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling deleteField");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling deleteField");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteField");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchField operation.
     * @callback module:api/AutopilotV1FieldApi~fetchFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantTaskField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource to fetch.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the Field resource to fetch.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Field resource to fetch.
     * @param {module:api/AutopilotV1FieldApi~fetchFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantTaskField}
     */
    fetchField(assistantSid, taskSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling fetchField");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling fetchField");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchField");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantTaskField;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listField operation.
     * @callback module:api/AutopilotV1FieldApi~listFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFieldResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resources to read.
     * @param {String} taskSid The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) resource associated with the Field resources to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/AutopilotV1FieldApi~listFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFieldResponse}
     */
    listField(assistantSid, taskSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling listField");
      }
      // verify the required parameter 'taskSid' is set
      if (taskSid === undefined || taskSid === null) {
        throw new Error("Missing the required parameter 'taskSid' when calling listField");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'TaskSid': taskSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFieldResponse;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
