/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutopilotV1AssistantQuery from '../model/AutopilotV1AssistantQuery';
import ListQueryResponse from '../model/ListQueryResponse';

/**
* AutopilotV1Query service.
* @module api/AutopilotV1QueryApi
* @version 1.53.0
*/
export default class AutopilotV1QueryApi {

    /**
    * Constructs a new AutopilotV1QueryApi. 
    * @alias module:api/AutopilotV1QueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createQuery operation.
     * @callback module:api/AutopilotV1QueryApi~createQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the new resource.
     * @param {String} language The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the new query. For example: `en-US`.
     * @param {String} query The end-user's natural language input. It can be up to 2048 characters long.
     * @param {Object} opts Optional parameters
     * @param {String} [modelBuild] The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried.
     * @param {String} [tasks] The list of tasks to limit the new query to. Tasks are expressed as a comma-separated list of task `unique_name` values. For example, `task-unique_name-1, task-unique_name-2`. Listing specific tasks is useful to constrain the paths that a user can take.
     * @param {module:api/AutopilotV1QueryApi~createQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantQuery}
     */
    createQuery(assistantSid, language, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling createQuery");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling createQuery");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling createQuery");
      }

      let pathParams = {
        'AssistantSid': assistantSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Language': language,
        'ModelBuild': opts['modelBuild'],
        'Query': query,
        'Tasks': opts['tasks']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantQuery;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Queries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuery operation.
     * @callback module:api/AutopilotV1QueryApi~deleteQueryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to delete.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Query resource to delete.
     * @param {module:api/AutopilotV1QueryApi~deleteQueryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteQuery(assistantSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling deleteQuery");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteQuery");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Queries/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchQuery operation.
     * @callback module:api/AutopilotV1QueryApi~fetchQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to fetch.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Query resource to fetch.
     * @param {module:api/AutopilotV1QueryApi~fetchQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantQuery}
     */
    fetchQuery(assistantSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling fetchQuery");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchQuery");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantQuery;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Queries/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listQuery operation.
     * @callback module:api/AutopilotV1QueryApi~listQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resources to read.
     * @param {Object} opts Optional parameters
     * @param {String} [language] The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query resources to read. For example: `en-US`.
     * @param {String} [modelBuild] The SID or unique name of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) to be queried.
     * @param {String} [status] The status of the resources to read. Can be: `pending-review`, `reviewed`, or `discarded`
     * @param {String} [dialogueSid] The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue).
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/AutopilotV1QueryApi~listQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListQueryResponse}
     */
    listQuery(assistantSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling listQuery");
      }

      let pathParams = {
        'AssistantSid': assistantSid
      };
      let queryParams = {
        'Language': opts['language'],
        'ModelBuild': opts['modelBuild'],
        'Status': opts['status'],
        'DialogueSid': opts['dialogueSid'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListQueryResponse;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Queries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuery operation.
     * @callback module:api/AutopilotV1QueryApi~updateQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutopilotV1AssistantQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} assistantSid The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource to update.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Query resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [sampleSid] The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query.
     * @param {String} [status] The new status of the resource. Can be: `pending-review`, `reviewed`, or `discarded`
     * @param {module:api/AutopilotV1QueryApi~updateQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutopilotV1AssistantQuery}
     */
    updateQuery(assistantSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assistantSid' is set
      if (assistantSid === undefined || assistantSid === null) {
        throw new Error("Missing the required parameter 'assistantSid' when calling updateQuery");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateQuery");
      }

      let pathParams = {
        'AssistantSid': assistantSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'SampleSid': opts['sampleSid'],
        'Status': opts['status']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AutopilotV1AssistantQuery;
      let basePaths = ['https://autopilot.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Assistants/{AssistantSid}/Queries/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
