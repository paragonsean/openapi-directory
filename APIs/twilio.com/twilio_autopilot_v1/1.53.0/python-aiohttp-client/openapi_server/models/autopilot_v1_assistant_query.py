# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AutopilotV1AssistantQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, assistant_sid: str=None, date_created: datetime=None, date_updated: datetime=None, dialogue_sid: str=None, language: str=None, model_build_sid: str=None, query: str=None, results: object=None, sample_sid: str=None, sid: str=None, source_channel: str=None, status: str=None, url: str=None):
        """AutopilotV1AssistantQuery - a model defined in OpenAPI

        :param account_sid: The account_sid of this AutopilotV1AssistantQuery.
        :param assistant_sid: The assistant_sid of this AutopilotV1AssistantQuery.
        :param date_created: The date_created of this AutopilotV1AssistantQuery.
        :param date_updated: The date_updated of this AutopilotV1AssistantQuery.
        :param dialogue_sid: The dialogue_sid of this AutopilotV1AssistantQuery.
        :param language: The language of this AutopilotV1AssistantQuery.
        :param model_build_sid: The model_build_sid of this AutopilotV1AssistantQuery.
        :param query: The query of this AutopilotV1AssistantQuery.
        :param results: The results of this AutopilotV1AssistantQuery.
        :param sample_sid: The sample_sid of this AutopilotV1AssistantQuery.
        :param sid: The sid of this AutopilotV1AssistantQuery.
        :param source_channel: The source_channel of this AutopilotV1AssistantQuery.
        :param status: The status of this AutopilotV1AssistantQuery.
        :param url: The url of this AutopilotV1AssistantQuery.
        """
        self.openapi_types = {
            'account_sid': str,
            'assistant_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'dialogue_sid': str,
            'language': str,
            'model_build_sid': str,
            'query': str,
            'results': object,
            'sample_sid': str,
            'sid': str,
            'source_channel': str,
            'status': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'assistant_sid': 'assistant_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'dialogue_sid': 'dialogue_sid',
            'language': 'language',
            'model_build_sid': 'model_build_sid',
            'query': 'query',
            'results': 'results',
            'sample_sid': 'sample_sid',
            'sid': 'sid',
            'source_channel': 'source_channel',
            'status': 'status',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._assistant_sid = assistant_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._dialogue_sid = dialogue_sid
        self._language = language
        self._model_build_sid = model_build_sid
        self._query = query
        self._results = results
        self._sample_sid = sample_sid
        self._sid = sid
        self._source_channel = source_channel
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutopilotV1AssistantQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The autopilot.v1.assistant.query of this AutopilotV1AssistantQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this AutopilotV1AssistantQuery.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Query resource.

        :return: The account_sid of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this AutopilotV1AssistantQuery.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Query resource.

        :param account_sid: The account_sid of this AutopilotV1AssistantQuery.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def assistant_sid(self):
        """Gets the assistant_sid of this AutopilotV1AssistantQuery.

        The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource.

        :return: The assistant_sid of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._assistant_sid

    @assistant_sid.setter
    def assistant_sid(self, assistant_sid):
        """Sets the assistant_sid of this AutopilotV1AssistantQuery.

        The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the resource.

        :param assistant_sid: The assistant_sid of this AutopilotV1AssistantQuery.
        :type assistant_sid: str
        """
        if assistant_sid is not None and len(assistant_sid) > 34:
            raise ValueError("Invalid value for `assistant_sid`, length must be less than or equal to `34`")
        if assistant_sid is not None and len(assistant_sid) < 34:
            raise ValueError("Invalid value for `assistant_sid`, length must be greater than or equal to `34`")
        if assistant_sid is not None and not re.search(r'^UA[0-9a-fA-F]{32}$', assistant_sid):
            raise ValueError("Invalid value for `assistant_sid`, must be a follow pattern or equal to `/^UA[0-9a-fA-F]{32}$/`")

        self._assistant_sid = assistant_sid

    @property
    def date_created(self):
        """Gets the date_created of this AutopilotV1AssistantQuery.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this AutopilotV1AssistantQuery.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AutopilotV1AssistantQuery.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this AutopilotV1AssistantQuery.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this AutopilotV1AssistantQuery.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this AutopilotV1AssistantQuery.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this AutopilotV1AssistantQuery.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this AutopilotV1AssistantQuery.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def dialogue_sid(self):
        """Gets the dialogue_sid of this AutopilotV1AssistantQuery.

        The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue).

        :return: The dialogue_sid of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._dialogue_sid

    @dialogue_sid.setter
    def dialogue_sid(self, dialogue_sid):
        """Sets the dialogue_sid of this AutopilotV1AssistantQuery.

        The SID of the [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue).

        :param dialogue_sid: The dialogue_sid of this AutopilotV1AssistantQuery.
        :type dialogue_sid: str
        """
        if dialogue_sid is not None and len(dialogue_sid) > 34:
            raise ValueError("Invalid value for `dialogue_sid`, length must be less than or equal to `34`")
        if dialogue_sid is not None and len(dialogue_sid) < 34:
            raise ValueError("Invalid value for `dialogue_sid`, length must be greater than or equal to `34`")
        if dialogue_sid is not None and not re.search(r'^UK[0-9a-fA-F]{32}$', dialogue_sid):
            raise ValueError("Invalid value for `dialogue_sid`, must be a follow pattern or equal to `/^UK[0-9a-fA-F]{32}$/`")

        self._dialogue_sid = dialogue_sid

    @property
    def language(self):
        """Gets the language of this AutopilotV1AssistantQuery.

        The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query. For example: `en-US`.

        :return: The language of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AutopilotV1AssistantQuery.

        The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used by the Query. For example: `en-US`.

        :param language: The language of this AutopilotV1AssistantQuery.
        :type language: str
        """

        self._language = language

    @property
    def model_build_sid(self):
        """Gets the model_build_sid of this AutopilotV1AssistantQuery.

        The SID of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) queried.

        :return: The model_build_sid of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._model_build_sid

    @model_build_sid.setter
    def model_build_sid(self, model_build_sid):
        """Sets the model_build_sid of this AutopilotV1AssistantQuery.

        The SID of the [Model Build](https://www.twilio.com/docs/autopilot/api/model-build) queried.

        :param model_build_sid: The model_build_sid of this AutopilotV1AssistantQuery.
        :type model_build_sid: str
        """
        if model_build_sid is not None and len(model_build_sid) > 34:
            raise ValueError("Invalid value for `model_build_sid`, length must be less than or equal to `34`")
        if model_build_sid is not None and len(model_build_sid) < 34:
            raise ValueError("Invalid value for `model_build_sid`, length must be greater than or equal to `34`")
        if model_build_sid is not None and not re.search(r'^UG[0-9a-fA-F]{32}$', model_build_sid):
            raise ValueError("Invalid value for `model_build_sid`, must be a follow pattern or equal to `/^UG[0-9a-fA-F]{32}$/`")

        self._model_build_sid = model_build_sid

    @property
    def query(self):
        """Gets the query of this AutopilotV1AssistantQuery.

        The end-user's natural language input.

        :return: The query of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this AutopilotV1AssistantQuery.

        The end-user's natural language input.

        :param query: The query of this AutopilotV1AssistantQuery.
        :type query: str
        """

        self._query = query

    @property
    def results(self):
        """Gets the results of this AutopilotV1AssistantQuery.

        The natural language analysis results that include the [Task](https://www.twilio.com/docs/autopilot/api/task) recognized and a list of identified [Fields](https://www.twilio.com/docs/autopilot/api/task-field).

        :return: The results of this AutopilotV1AssistantQuery.
        :rtype: object
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AutopilotV1AssistantQuery.

        The natural language analysis results that include the [Task](https://www.twilio.com/docs/autopilot/api/task) recognized and a list of identified [Fields](https://www.twilio.com/docs/autopilot/api/task-field).

        :param results: The results of this AutopilotV1AssistantQuery.
        :type results: object
        """

        self._results = results

    @property
    def sample_sid(self):
        """Gets the sample_sid of this AutopilotV1AssistantQuery.

        The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query.

        :return: The sample_sid of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._sample_sid

    @sample_sid.setter
    def sample_sid(self, sample_sid):
        """Sets the sample_sid of this AutopilotV1AssistantQuery.

        The SID of an optional reference to the [Sample](https://www.twilio.com/docs/autopilot/api/task-sample) created from the query.

        :param sample_sid: The sample_sid of this AutopilotV1AssistantQuery.
        :type sample_sid: str
        """
        if sample_sid is not None and len(sample_sid) > 34:
            raise ValueError("Invalid value for `sample_sid`, length must be less than or equal to `34`")
        if sample_sid is not None and len(sample_sid) < 34:
            raise ValueError("Invalid value for `sample_sid`, length must be greater than or equal to `34`")
        if sample_sid is not None and not re.search(r'^UF[0-9a-fA-F]{32}$', sample_sid):
            raise ValueError("Invalid value for `sample_sid`, must be a follow pattern or equal to `/^UF[0-9a-fA-F]{32}$/`")

        self._sample_sid = sample_sid

    @property
    def sid(self):
        """Gets the sid of this AutopilotV1AssistantQuery.

        The unique string that we created to identify the Query resource.

        :return: The sid of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this AutopilotV1AssistantQuery.

        The unique string that we created to identify the Query resource.

        :param sid: The sid of this AutopilotV1AssistantQuery.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^UH[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^UH[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def source_channel(self):
        """Gets the source_channel of this AutopilotV1AssistantQuery.

        The communication channel from where the end-user input came.

        :return: The source_channel of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._source_channel

    @source_channel.setter
    def source_channel(self, source_channel):
        """Sets the source_channel of this AutopilotV1AssistantQuery.

        The communication channel from where the end-user input came.

        :param source_channel: The source_channel of this AutopilotV1AssistantQuery.
        :type source_channel: str
        """

        self._source_channel = source_channel

    @property
    def status(self):
        """Gets the status of this AutopilotV1AssistantQuery.

        The status of the Query. Can be: `pending-review`, `reviewed`, or `discarded`

        :return: The status of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutopilotV1AssistantQuery.

        The status of the Query. Can be: `pending-review`, `reviewed`, or `discarded`

        :param status: The status of this AutopilotV1AssistantQuery.
        :type status: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this AutopilotV1AssistantQuery.

        The absolute URL of the Query resource.

        :return: The url of this AutopilotV1AssistantQuery.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AutopilotV1AssistantQuery.

        The absolute URL of the Query resource.

        :param url: The url of this AutopilotV1AssistantQuery.
        :type url: str
        """

        self._url = url
