# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AutopilotV1AssistantFieldTypeFieldValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, assistant_sid: str=None, date_created: datetime=None, date_updated: datetime=None, field_type_sid: str=None, language: str=None, sid: str=None, synonym_of: str=None, url: str=None, value: str=None):
        """AutopilotV1AssistantFieldTypeFieldValue - a model defined in OpenAPI

        :param account_sid: The account_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :param assistant_sid: The assistant_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :param date_created: The date_created of this AutopilotV1AssistantFieldTypeFieldValue.
        :param date_updated: The date_updated of this AutopilotV1AssistantFieldTypeFieldValue.
        :param field_type_sid: The field_type_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :param language: The language of this AutopilotV1AssistantFieldTypeFieldValue.
        :param sid: The sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :param synonym_of: The synonym_of of this AutopilotV1AssistantFieldTypeFieldValue.
        :param url: The url of this AutopilotV1AssistantFieldTypeFieldValue.
        :param value: The value of this AutopilotV1AssistantFieldTypeFieldValue.
        """
        self.openapi_types = {
            'account_sid': str,
            'assistant_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'field_type_sid': str,
            'language': str,
            'sid': str,
            'synonym_of': str,
            'url': str,
            'value': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'assistant_sid': 'assistant_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'field_type_sid': 'field_type_sid',
            'language': 'language',
            'sid': 'sid',
            'synonym_of': 'synonym_of',
            'url': 'url',
            'value': 'value'
        }

        self._account_sid = account_sid
        self._assistant_sid = assistant_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._field_type_sid = field_type_sid
        self._language = language
        self._sid = sid
        self._synonym_of = synonym_of
        self._url = url
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutopilotV1AssistantFieldTypeFieldValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The autopilot.v1.assistant.field_type.field_value of this AutopilotV1AssistantFieldTypeFieldValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the FieldValue resource.

        :return: The account_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the FieldValue resource.

        :param account_sid: The account_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def assistant_sid(self):
        """Gets the assistant_sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the FieldType associated with the resource.

        :return: The assistant_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._assistant_sid

    @assistant_sid.setter
    def assistant_sid(self, assistant_sid):
        """Sets the assistant_sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the FieldType associated with the resource.

        :param assistant_sid: The assistant_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :type assistant_sid: str
        """
        if assistant_sid is not None and len(assistant_sid) > 34:
            raise ValueError("Invalid value for `assistant_sid`, length must be less than or equal to `34`")
        if assistant_sid is not None and len(assistant_sid) < 34:
            raise ValueError("Invalid value for `assistant_sid`, length must be greater than or equal to `34`")
        if assistant_sid is not None and not re.search(r'^UA[0-9a-fA-F]{32}$', assistant_sid):
            raise ValueError("Invalid value for `assistant_sid`, must be a follow pattern or equal to `/^UA[0-9a-fA-F]{32}$/`")

        self._assistant_sid = assistant_sid

    @property
    def date_created(self):
        """Gets the date_created of this AutopilotV1AssistantFieldTypeFieldValue.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AutopilotV1AssistantFieldTypeFieldValue.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this AutopilotV1AssistantFieldTypeFieldValue.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this AutopilotV1AssistantFieldTypeFieldValue.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this AutopilotV1AssistantFieldTypeFieldValue.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this AutopilotV1AssistantFieldTypeFieldValue.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def field_type_sid(self):
        """Gets the field_type_sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The SID of the Field Type associated with the Field Value.

        :return: The field_type_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._field_type_sid

    @field_type_sid.setter
    def field_type_sid(self, field_type_sid):
        """Sets the field_type_sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The SID of the Field Type associated with the Field Value.

        :param field_type_sid: The field_type_sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :type field_type_sid: str
        """
        if field_type_sid is not None and len(field_type_sid) > 34:
            raise ValueError("Invalid value for `field_type_sid`, length must be less than or equal to `34`")
        if field_type_sid is not None and len(field_type_sid) < 34:
            raise ValueError("Invalid value for `field_type_sid`, length must be greater than or equal to `34`")
        if field_type_sid is not None and not re.search(r'^UB[0-9a-fA-F]{32}$', field_type_sid):
            raise ValueError("Invalid value for `field_type_sid`, must be a follow pattern or equal to `/^UB[0-9a-fA-F]{32}$/`")

        self._field_type_sid = field_type_sid

    @property
    def language(self):
        """Gets the language of this AutopilotV1AssistantFieldTypeFieldValue.

        The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) tag that specifies the language of the value. Currently supported tags: `en-US`

        :return: The language of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AutopilotV1AssistantFieldTypeFieldValue.

        The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) tag that specifies the language of the value. Currently supported tags: `en-US`

        :param language: The language of this AutopilotV1AssistantFieldTypeFieldValue.
        :type language: str
        """

        self._language = language

    @property
    def sid(self):
        """Gets the sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The unique string that we created to identify the FieldValue resource.

        :return: The sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this AutopilotV1AssistantFieldTypeFieldValue.

        The unique string that we created to identify the FieldValue resource.

        :param sid: The sid of this AutopilotV1AssistantFieldTypeFieldValue.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^UC[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^UC[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def synonym_of(self):
        """Gets the synonym_of of this AutopilotV1AssistantFieldTypeFieldValue.

        The word for which the field value is a synonym of.

        :return: The synonym_of of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._synonym_of

    @synonym_of.setter
    def synonym_of(self, synonym_of):
        """Sets the synonym_of of this AutopilotV1AssistantFieldTypeFieldValue.

        The word for which the field value is a synonym of.

        :param synonym_of: The synonym_of of this AutopilotV1AssistantFieldTypeFieldValue.
        :type synonym_of: str
        """
        if synonym_of is not None and len(synonym_of) > 34:
            raise ValueError("Invalid value for `synonym_of`, length must be less than or equal to `34`")
        if synonym_of is not None and len(synonym_of) < 34:
            raise ValueError("Invalid value for `synonym_of`, length must be greater than or equal to `34`")
        if synonym_of is not None and not re.search(r'^UC[0-9a-fA-F]{32}$', synonym_of):
            raise ValueError("Invalid value for `synonym_of`, must be a follow pattern or equal to `/^UC[0-9a-fA-F]{32}$/`")

        self._synonym_of = synonym_of

    @property
    def url(self):
        """Gets the url of this AutopilotV1AssistantFieldTypeFieldValue.

        The absolute URL of the FieldValue resource.

        :return: The url of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AutopilotV1AssistantFieldTypeFieldValue.

        The absolute URL of the FieldValue resource.

        :param url: The url of this AutopilotV1AssistantFieldTypeFieldValue.
        :type url: str
        """

        self._url = url

    @property
    def value(self):
        """Gets the value of this AutopilotV1AssistantFieldTypeFieldValue.

        The Field Value data.

        :return: The value of this AutopilotV1AssistantFieldTypeFieldValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AutopilotV1AssistantFieldTypeFieldValue.

        The Field Value data.

        :param value: The value of this AutopilotV1AssistantFieldTypeFieldValue.
        :type value: str
        """

        self._value = value
