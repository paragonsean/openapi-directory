# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AutopilotV1AssistantTaskSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, assistant_sid: str=None, date_created: datetime=None, date_updated: datetime=None, language: str=None, sid: str=None, source_channel: str=None, tagged_text: str=None, task_sid: str=None, url: str=None):
        """AutopilotV1AssistantTaskSample - a model defined in OpenAPI

        :param account_sid: The account_sid of this AutopilotV1AssistantTaskSample.
        :param assistant_sid: The assistant_sid of this AutopilotV1AssistantTaskSample.
        :param date_created: The date_created of this AutopilotV1AssistantTaskSample.
        :param date_updated: The date_updated of this AutopilotV1AssistantTaskSample.
        :param language: The language of this AutopilotV1AssistantTaskSample.
        :param sid: The sid of this AutopilotV1AssistantTaskSample.
        :param source_channel: The source_channel of this AutopilotV1AssistantTaskSample.
        :param tagged_text: The tagged_text of this AutopilotV1AssistantTaskSample.
        :param task_sid: The task_sid of this AutopilotV1AssistantTaskSample.
        :param url: The url of this AutopilotV1AssistantTaskSample.
        """
        self.openapi_types = {
            'account_sid': str,
            'assistant_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'language': str,
            'sid': str,
            'source_channel': str,
            'tagged_text': str,
            'task_sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'assistant_sid': 'assistant_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'language': 'language',
            'sid': 'sid',
            'source_channel': 'source_channel',
            'tagged_text': 'tagged_text',
            'task_sid': 'task_sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._assistant_sid = assistant_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._language = language
        self._sid = sid
        self._source_channel = source_channel
        self._tagged_text = tagged_text
        self._task_sid = task_sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutopilotV1AssistantTaskSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The autopilot.v1.assistant.task.sample of this AutopilotV1AssistantTaskSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this AutopilotV1AssistantTaskSample.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Sample resource.

        :return: The account_sid of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this AutopilotV1AssistantTaskSample.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Sample resource.

        :param account_sid: The account_sid of this AutopilotV1AssistantTaskSample.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def assistant_sid(self):
        """Gets the assistant_sid of this AutopilotV1AssistantTaskSample.

        The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource.

        :return: The assistant_sid of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._assistant_sid

    @assistant_sid.setter
    def assistant_sid(self, assistant_sid):
        """Sets the assistant_sid of this AutopilotV1AssistantTaskSample.

        The SID of the [Assistant](https://www.twilio.com/docs/autopilot/api/assistant) that is the parent of the Task associated with the resource.

        :param assistant_sid: The assistant_sid of this AutopilotV1AssistantTaskSample.
        :type assistant_sid: str
        """
        if assistant_sid is not None and len(assistant_sid) > 34:
            raise ValueError("Invalid value for `assistant_sid`, length must be less than or equal to `34`")
        if assistant_sid is not None and len(assistant_sid) < 34:
            raise ValueError("Invalid value for `assistant_sid`, length must be greater than or equal to `34`")
        if assistant_sid is not None and not re.search(r'^UA[0-9a-fA-F]{32}$', assistant_sid):
            raise ValueError("Invalid value for `assistant_sid`, must be a follow pattern or equal to `/^UA[0-9a-fA-F]{32}$/`")

        self._assistant_sid = assistant_sid

    @property
    def date_created(self):
        """Gets the date_created of this AutopilotV1AssistantTaskSample.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this AutopilotV1AssistantTaskSample.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this AutopilotV1AssistantTaskSample.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this AutopilotV1AssistantTaskSample.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this AutopilotV1AssistantTaskSample.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this AutopilotV1AssistantTaskSample.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this AutopilotV1AssistantTaskSample.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this AutopilotV1AssistantTaskSample.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def language(self):
        """Gets the language of this AutopilotV1AssistantTaskSample.

        The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the sample. For example: `en-US`.

        :return: The language of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AutopilotV1AssistantTaskSample.

        The [ISO language-country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html) string that specifies the language used for the sample. For example: `en-US`.

        :param language: The language of this AutopilotV1AssistantTaskSample.
        :type language: str
        """

        self._language = language

    @property
    def sid(self):
        """Gets the sid of this AutopilotV1AssistantTaskSample.

        The unique string that we created to identify the Sample resource.

        :return: The sid of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this AutopilotV1AssistantTaskSample.

        The unique string that we created to identify the Sample resource.

        :param sid: The sid of this AutopilotV1AssistantTaskSample.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^UF[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^UF[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def source_channel(self):
        """Gets the source_channel of this AutopilotV1AssistantTaskSample.

        The communication channel from which the sample was captured. Can be: `voice`, `sms`, `chat`, `alexa`, `google-assistant`, `slack`, or null if not included.

        :return: The source_channel of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._source_channel

    @source_channel.setter
    def source_channel(self, source_channel):
        """Sets the source_channel of this AutopilotV1AssistantTaskSample.

        The communication channel from which the sample was captured. Can be: `voice`, `sms`, `chat`, `alexa`, `google-assistant`, `slack`, or null if not included.

        :param source_channel: The source_channel of this AutopilotV1AssistantTaskSample.
        :type source_channel: str
        """

        self._source_channel = source_channel

    @property
    def tagged_text(self):
        """Gets the tagged_text of this AutopilotV1AssistantTaskSample.

        The text example of how end users might express the task. The sample can contain [Field tag blocks](https://www.twilio.com/docs/autopilot/api/task-sample#field-tagging).

        :return: The tagged_text of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._tagged_text

    @tagged_text.setter
    def tagged_text(self, tagged_text):
        """Sets the tagged_text of this AutopilotV1AssistantTaskSample.

        The text example of how end users might express the task. The sample can contain [Field tag blocks](https://www.twilio.com/docs/autopilot/api/task-sample#field-tagging).

        :param tagged_text: The tagged_text of this AutopilotV1AssistantTaskSample.
        :type tagged_text: str
        """

        self._tagged_text = tagged_text

    @property
    def task_sid(self):
        """Gets the task_sid of this AutopilotV1AssistantTaskSample.

        The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the resource.

        :return: The task_sid of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._task_sid

    @task_sid.setter
    def task_sid(self, task_sid):
        """Sets the task_sid of this AutopilotV1AssistantTaskSample.

        The SID of the [Task](https://www.twilio.com/docs/autopilot/api/task) associated with the resource.

        :param task_sid: The task_sid of this AutopilotV1AssistantTaskSample.
        :type task_sid: str
        """
        if task_sid is not None and len(task_sid) > 34:
            raise ValueError("Invalid value for `task_sid`, length must be less than or equal to `34`")
        if task_sid is not None and len(task_sid) < 34:
            raise ValueError("Invalid value for `task_sid`, length must be greater than or equal to `34`")
        if task_sid is not None and not re.search(r'^UD[0-9a-fA-F]{32}$', task_sid):
            raise ValueError("Invalid value for `task_sid`, must be a follow pattern or equal to `/^UD[0-9a-fA-F]{32}$/`")

        self._task_sid = task_sid

    @property
    def url(self):
        """Gets the url of this AutopilotV1AssistantTaskSample.

        The absolute URL of the Sample resource.

        :return: The url of this AutopilotV1AssistantTaskSample.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AutopilotV1AssistantTaskSample.

        The absolute URL of the Sample resource.

        :param url: The url of this AutopilotV1AssistantTaskSample.
        :type url: str
        """

        self._url = url
