/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutopilot_v1_assistant_task_task_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutopilot_v1_assistant_task_task_statistics::OAIAutopilot_v1_assistant_task_task_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutopilot_v1_assistant_task_task_statistics::OAIAutopilot_v1_assistant_task_task_statistics() {
    this->initializeModel();
}

OAIAutopilot_v1_assistant_task_task_statistics::~OAIAutopilot_v1_assistant_task_task_statistics() {}

void OAIAutopilot_v1_assistant_task_task_statistics::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_assistant_sid_isSet = false;
    m_assistant_sid_isValid = false;

    m_fields_count_isSet = false;
    m_fields_count_isValid = false;

    m_samples_count_isSet = false;
    m_samples_count_isValid = false;

    m_task_sid_isSet = false;
    m_task_sid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAutopilot_v1_assistant_task_task_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutopilot_v1_assistant_task_task_statistics::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_assistant_sid_isValid = ::OpenAPI::fromJsonValue(m_assistant_sid, json[QString("assistant_sid")]);
    m_assistant_sid_isSet = !json[QString("assistant_sid")].isNull() && m_assistant_sid_isValid;

    m_fields_count_isValid = ::OpenAPI::fromJsonValue(m_fields_count, json[QString("fields_count")]);
    m_fields_count_isSet = !json[QString("fields_count")].isNull() && m_fields_count_isValid;

    m_samples_count_isValid = ::OpenAPI::fromJsonValue(m_samples_count, json[QString("samples_count")]);
    m_samples_count_isSet = !json[QString("samples_count")].isNull() && m_samples_count_isValid;

    m_task_sid_isValid = ::OpenAPI::fromJsonValue(m_task_sid, json[QString("task_sid")]);
    m_task_sid_isSet = !json[QString("task_sid")].isNull() && m_task_sid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAutopilot_v1_assistant_task_task_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutopilot_v1_assistant_task_task_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_assistant_sid_isSet) {
        obj.insert(QString("assistant_sid"), ::OpenAPI::toJsonValue(m_assistant_sid));
    }
    if (m_fields_count_isSet) {
        obj.insert(QString("fields_count"), ::OpenAPI::toJsonValue(m_fields_count));
    }
    if (m_samples_count_isSet) {
        obj.insert(QString("samples_count"), ::OpenAPI::toJsonValue(m_samples_count));
    }
    if (m_task_sid_isSet) {
        obj.insert(QString("task_sid"), ::OpenAPI::toJsonValue(m_task_sid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAutopilot_v1_assistant_task_task_statistics::getAccountSid() const {
    return m_account_sid;
}
void OAIAutopilot_v1_assistant_task_task_statistics::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIAutopilot_v1_assistant_task_task_statistics::getAssistantSid() const {
    return m_assistant_sid;
}
void OAIAutopilot_v1_assistant_task_task_statistics::setAssistantSid(const QString &assistant_sid) {
    m_assistant_sid = assistant_sid;
    m_assistant_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_assistant_sid_Set() const{
    return m_assistant_sid_isSet;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_assistant_sid_Valid() const{
    return m_assistant_sid_isValid;
}

qint32 OAIAutopilot_v1_assistant_task_task_statistics::getFieldsCount() const {
    return m_fields_count;
}
void OAIAutopilot_v1_assistant_task_task_statistics::setFieldsCount(const qint32 &fields_count) {
    m_fields_count = fields_count;
    m_fields_count_isSet = true;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_fields_count_Set() const{
    return m_fields_count_isSet;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_fields_count_Valid() const{
    return m_fields_count_isValid;
}

qint32 OAIAutopilot_v1_assistant_task_task_statistics::getSamplesCount() const {
    return m_samples_count;
}
void OAIAutopilot_v1_assistant_task_task_statistics::setSamplesCount(const qint32 &samples_count) {
    m_samples_count = samples_count;
    m_samples_count_isSet = true;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_samples_count_Set() const{
    return m_samples_count_isSet;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_samples_count_Valid() const{
    return m_samples_count_isValid;
}

QString OAIAutopilot_v1_assistant_task_task_statistics::getTaskSid() const {
    return m_task_sid;
}
void OAIAutopilot_v1_assistant_task_task_statistics::setTaskSid(const QString &task_sid) {
    m_task_sid = task_sid;
    m_task_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_task_sid_Set() const{
    return m_task_sid_isSet;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_task_sid_Valid() const{
    return m_task_sid_isValid;
}

QString OAIAutopilot_v1_assistant_task_task_statistics::getUrl() const {
    return m_url;
}
void OAIAutopilot_v1_assistant_task_task_statistics::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samples_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutopilot_v1_assistant_task_task_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
