/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutopilot_v1_assistant_query.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutopilot_v1_assistant_query::OAIAutopilot_v1_assistant_query(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutopilot_v1_assistant_query::OAIAutopilot_v1_assistant_query() {
    this->initializeModel();
}

OAIAutopilot_v1_assistant_query::~OAIAutopilot_v1_assistant_query() {}

void OAIAutopilot_v1_assistant_query::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_assistant_sid_isSet = false;
    m_assistant_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_dialogue_sid_isSet = false;
    m_dialogue_sid_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_model_build_sid_isSet = false;
    m_model_build_sid_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_sample_sid_isSet = false;
    m_sample_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_source_channel_isSet = false;
    m_source_channel_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAutopilot_v1_assistant_query::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutopilot_v1_assistant_query::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_assistant_sid_isValid = ::OpenAPI::fromJsonValue(m_assistant_sid, json[QString("assistant_sid")]);
    m_assistant_sid_isSet = !json[QString("assistant_sid")].isNull() && m_assistant_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_dialogue_sid_isValid = ::OpenAPI::fromJsonValue(m_dialogue_sid, json[QString("dialogue_sid")]);
    m_dialogue_sid_isSet = !json[QString("dialogue_sid")].isNull() && m_dialogue_sid_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_model_build_sid_isValid = ::OpenAPI::fromJsonValue(m_model_build_sid, json[QString("model_build_sid")]);
    m_model_build_sid_isSet = !json[QString("model_build_sid")].isNull() && m_model_build_sid_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_sample_sid_isValid = ::OpenAPI::fromJsonValue(m_sample_sid, json[QString("sample_sid")]);
    m_sample_sid_isSet = !json[QString("sample_sid")].isNull() && m_sample_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_source_channel_isValid = ::OpenAPI::fromJsonValue(m_source_channel, json[QString("source_channel")]);
    m_source_channel_isSet = !json[QString("source_channel")].isNull() && m_source_channel_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAutopilot_v1_assistant_query::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutopilot_v1_assistant_query::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_assistant_sid_isSet) {
        obj.insert(QString("assistant_sid"), ::OpenAPI::toJsonValue(m_assistant_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_dialogue_sid_isSet) {
        obj.insert(QString("dialogue_sid"), ::OpenAPI::toJsonValue(m_dialogue_sid));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_model_build_sid_isSet) {
        obj.insert(QString("model_build_sid"), ::OpenAPI::toJsonValue(m_model_build_sid));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_results_isSet) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_sample_sid_isSet) {
        obj.insert(QString("sample_sid"), ::OpenAPI::toJsonValue(m_sample_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_source_channel_isSet) {
        obj.insert(QString("source_channel"), ::OpenAPI::toJsonValue(m_source_channel));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAutopilot_v1_assistant_query::getAccountSid() const {
    return m_account_sid;
}
void OAIAutopilot_v1_assistant_query::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIAutopilot_v1_assistant_query::getAssistantSid() const {
    return m_assistant_sid;
}
void OAIAutopilot_v1_assistant_query::setAssistantSid(const QString &assistant_sid) {
    m_assistant_sid = assistant_sid;
    m_assistant_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_assistant_sid_Set() const{
    return m_assistant_sid_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_assistant_sid_Valid() const{
    return m_assistant_sid_isValid;
}

QDateTime OAIAutopilot_v1_assistant_query::getDateCreated() const {
    return m_date_created;
}
void OAIAutopilot_v1_assistant_query::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAutopilot_v1_assistant_query::getDateUpdated() const {
    return m_date_updated;
}
void OAIAutopilot_v1_assistant_query::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIAutopilot_v1_assistant_query::getDialogueSid() const {
    return m_dialogue_sid;
}
void OAIAutopilot_v1_assistant_query::setDialogueSid(const QString &dialogue_sid) {
    m_dialogue_sid = dialogue_sid;
    m_dialogue_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_dialogue_sid_Set() const{
    return m_dialogue_sid_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_dialogue_sid_Valid() const{
    return m_dialogue_sid_isValid;
}

QString OAIAutopilot_v1_assistant_query::getLanguage() const {
    return m_language;
}
void OAIAutopilot_v1_assistant_query::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_language_Set() const{
    return m_language_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIAutopilot_v1_assistant_query::getModelBuildSid() const {
    return m_model_build_sid;
}
void OAIAutopilot_v1_assistant_query::setModelBuildSid(const QString &model_build_sid) {
    m_model_build_sid = model_build_sid;
    m_model_build_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_model_build_sid_Set() const{
    return m_model_build_sid_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_model_build_sid_Valid() const{
    return m_model_build_sid_isValid;
}

QString OAIAutopilot_v1_assistant_query::getQuery() const {
    return m_query;
}
void OAIAutopilot_v1_assistant_query::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_query_Set() const{
    return m_query_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_query_Valid() const{
    return m_query_isValid;
}

QJsonValue OAIAutopilot_v1_assistant_query::getResults() const {
    return m_results;
}
void OAIAutopilot_v1_assistant_query::setResults(const QJsonValue &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_results_Set() const{
    return m_results_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_results_Valid() const{
    return m_results_isValid;
}

QString OAIAutopilot_v1_assistant_query::getSampleSid() const {
    return m_sample_sid;
}
void OAIAutopilot_v1_assistant_query::setSampleSid(const QString &sample_sid) {
    m_sample_sid = sample_sid;
    m_sample_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_sample_sid_Set() const{
    return m_sample_sid_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_sample_sid_Valid() const{
    return m_sample_sid_isValid;
}

QString OAIAutopilot_v1_assistant_query::getSid() const {
    return m_sid;
}
void OAIAutopilot_v1_assistant_query::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIAutopilot_v1_assistant_query::getSourceChannel() const {
    return m_source_channel;
}
void OAIAutopilot_v1_assistant_query::setSourceChannel(const QString &source_channel) {
    m_source_channel = source_channel;
    m_source_channel_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_source_channel_Set() const{
    return m_source_channel_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_source_channel_Valid() const{
    return m_source_channel_isValid;
}

QString OAIAutopilot_v1_assistant_query::getStatus() const {
    return m_status;
}
void OAIAutopilot_v1_assistant_query::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAutopilot_v1_assistant_query::getUrl() const {
    return m_url;
}
void OAIAutopilot_v1_assistant_query::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAutopilot_v1_assistant_query::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAutopilot_v1_assistant_query::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAutopilot_v1_assistant_query::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assistant_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialogue_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_build_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutopilot_v1_assistant_query::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
