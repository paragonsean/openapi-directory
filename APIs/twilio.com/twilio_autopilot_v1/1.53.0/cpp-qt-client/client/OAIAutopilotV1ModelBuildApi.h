/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAutopilotV1ModelBuildApi_H
#define OAI_OAIAutopilotV1ModelBuildApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutopilot_v1_assistant_model_build.h"
#include "OAIListModelBuildResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAutopilotV1ModelBuildApi : public QObject {
    Q_OBJECT

public:
    OAIAutopilotV1ModelBuildApi(const int timeOut = 0);
    ~OAIAutopilotV1ModelBuildApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  assistant_sid QString [required]
    * @param[in]  status_callback QString [optional]
    * @param[in]  unique_name QString [optional]
    */
    virtual void createModelBuild(const QString &assistant_sid, const ::OpenAPI::OptionalParam<QString> &status_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assistant_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteModelBuild(const QString &assistant_sid, const QString &sid);

    /**
    * @param[in]  assistant_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchModelBuild(const QString &assistant_sid, const QString &sid);

    /**
    * @param[in]  assistant_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listModelBuild(const QString &assistant_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assistant_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  unique_name QString [optional]
    */
    virtual void updateModelBuild(const QString &assistant_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &unique_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createModelBuildCallback(OAIHttpRequestWorker *worker);
    void deleteModelBuildCallback(OAIHttpRequestWorker *worker);
    void fetchModelBuildCallback(OAIHttpRequestWorker *worker);
    void listModelBuildCallback(OAIHttpRequestWorker *worker);
    void updateModelBuildCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createModelBuildSignal(OAIAutopilot_v1_assistant_model_build summary);
    void deleteModelBuildSignal();
    void fetchModelBuildSignal(OAIAutopilot_v1_assistant_model_build summary);
    void listModelBuildSignal(OAIListModelBuildResponse summary);
    void updateModelBuildSignal(OAIAutopilot_v1_assistant_model_build summary);


    void createModelBuildSignalFull(OAIHttpRequestWorker *worker, OAIAutopilot_v1_assistant_model_build summary);
    void deleteModelBuildSignalFull(OAIHttpRequestWorker *worker);
    void fetchModelBuildSignalFull(OAIHttpRequestWorker *worker, OAIAutopilot_v1_assistant_model_build summary);
    void listModelBuildSignalFull(OAIHttpRequestWorker *worker, OAIListModelBuildResponse summary);
    void updateModelBuildSignalFull(OAIHttpRequestWorker *worker, OAIAutopilot_v1_assistant_model_build summary);

    Q_DECL_DEPRECATED_X("Use createModelBuildSignalError() instead")
    void createModelBuildSignalE(OAIAutopilot_v1_assistant_model_build summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createModelBuildSignalError(OAIAutopilot_v1_assistant_model_build summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteModelBuildSignalError() instead")
    void deleteModelBuildSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModelBuildSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchModelBuildSignalError() instead")
    void fetchModelBuildSignalE(OAIAutopilot_v1_assistant_model_build summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchModelBuildSignalError(OAIAutopilot_v1_assistant_model_build summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelBuildSignalError() instead")
    void listModelBuildSignalE(OAIListModelBuildResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelBuildSignalError(OAIListModelBuildResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateModelBuildSignalError() instead")
    void updateModelBuildSignalE(OAIAutopilot_v1_assistant_model_build summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateModelBuildSignalError(OAIAutopilot_v1_assistant_model_build summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createModelBuildSignalErrorFull() instead")
    void createModelBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createModelBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteModelBuildSignalErrorFull() instead")
    void deleteModelBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModelBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchModelBuildSignalErrorFull() instead")
    void fetchModelBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchModelBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listModelBuildSignalErrorFull() instead")
    void listModelBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listModelBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateModelBuildSignalErrorFull() instead")
    void updateModelBuildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateModelBuildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
