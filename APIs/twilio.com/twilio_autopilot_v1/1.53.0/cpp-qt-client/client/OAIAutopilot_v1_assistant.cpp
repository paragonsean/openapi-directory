/**
 * Twilio - Autopilot
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.53.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutopilot_v1_assistant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutopilot_v1_assistant::OAIAutopilot_v1_assistant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutopilot_v1_assistant::OAIAutopilot_v1_assistant() {
    this->initializeModel();
}

OAIAutopilot_v1_assistant::~OAIAutopilot_v1_assistant() {}

void OAIAutopilot_v1_assistant::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_callback_events_isSet = false;
    m_callback_events_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_development_stage_isSet = false;
    m_development_stage_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_latest_model_build_sid_isSet = false;
    m_latest_model_build_sid_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_log_queries_isSet = false;
    m_log_queries_isValid = false;

    m_needs_model_build_isSet = false;
    m_needs_model_build_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAutopilot_v1_assistant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutopilot_v1_assistant::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_callback_events_isValid = ::OpenAPI::fromJsonValue(m_callback_events, json[QString("callback_events")]);
    m_callback_events_isSet = !json[QString("callback_events")].isNull() && m_callback_events_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;

    m_development_stage_isValid = ::OpenAPI::fromJsonValue(m_development_stage, json[QString("development_stage")]);
    m_development_stage_isSet = !json[QString("development_stage")].isNull() && m_development_stage_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_latest_model_build_sid_isValid = ::OpenAPI::fromJsonValue(m_latest_model_build_sid, json[QString("latest_model_build_sid")]);
    m_latest_model_build_sid_isSet = !json[QString("latest_model_build_sid")].isNull() && m_latest_model_build_sid_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_log_queries_isValid = ::OpenAPI::fromJsonValue(m_log_queries, json[QString("log_queries")]);
    m_log_queries_isSet = !json[QString("log_queries")].isNull() && m_log_queries_isValid;

    m_needs_model_build_isValid = ::OpenAPI::fromJsonValue(m_needs_model_build, json[QString("needs_model_build")]);
    m_needs_model_build_isSet = !json[QString("needs_model_build")].isNull() && m_needs_model_build_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("unique_name")]);
    m_unique_name_isSet = !json[QString("unique_name")].isNull() && m_unique_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAutopilot_v1_assistant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutopilot_v1_assistant::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_callback_events_isSet) {
        obj.insert(QString("callback_events"), ::OpenAPI::toJsonValue(m_callback_events));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_development_stage_isSet) {
        obj.insert(QString("development_stage"), ::OpenAPI::toJsonValue(m_development_stage));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_latest_model_build_sid_isSet) {
        obj.insert(QString("latest_model_build_sid"), ::OpenAPI::toJsonValue(m_latest_model_build_sid));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_log_queries_isSet) {
        obj.insert(QString("log_queries"), ::OpenAPI::toJsonValue(m_log_queries));
    }
    if (m_needs_model_build_isSet) {
        obj.insert(QString("needs_model_build"), ::OpenAPI::toJsonValue(m_needs_model_build));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("unique_name"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAutopilot_v1_assistant::getAccountSid() const {
    return m_account_sid;
}
void OAIAutopilot_v1_assistant::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIAutopilot_v1_assistant::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QString OAIAutopilot_v1_assistant::getCallbackEvents() const {
    return m_callback_events;
}
void OAIAutopilot_v1_assistant::setCallbackEvents(const QString &callback_events) {
    m_callback_events = callback_events;
    m_callback_events_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_callback_events_Set() const{
    return m_callback_events_isSet;
}

bool OAIAutopilot_v1_assistant::is_callback_events_Valid() const{
    return m_callback_events_isValid;
}

QString OAIAutopilot_v1_assistant::getCallbackUrl() const {
    return m_callback_url;
}
void OAIAutopilot_v1_assistant::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIAutopilot_v1_assistant::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDateTime OAIAutopilot_v1_assistant::getDateCreated() const {
    return m_date_created;
}
void OAIAutopilot_v1_assistant::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAutopilot_v1_assistant::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAutopilot_v1_assistant::getDateUpdated() const {
    return m_date_updated;
}
void OAIAutopilot_v1_assistant::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIAutopilot_v1_assistant::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIAutopilot_v1_assistant::getDevelopmentStage() const {
    return m_development_stage;
}
void OAIAutopilot_v1_assistant::setDevelopmentStage(const QString &development_stage) {
    m_development_stage = development_stage;
    m_development_stage_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_development_stage_Set() const{
    return m_development_stage_isSet;
}

bool OAIAutopilot_v1_assistant::is_development_stage_Valid() const{
    return m_development_stage_isValid;
}

QString OAIAutopilot_v1_assistant::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAutopilot_v1_assistant::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAutopilot_v1_assistant::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAutopilot_v1_assistant::getLatestModelBuildSid() const {
    return m_latest_model_build_sid;
}
void OAIAutopilot_v1_assistant::setLatestModelBuildSid(const QString &latest_model_build_sid) {
    m_latest_model_build_sid = latest_model_build_sid;
    m_latest_model_build_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_latest_model_build_sid_Set() const{
    return m_latest_model_build_sid_isSet;
}

bool OAIAutopilot_v1_assistant::is_latest_model_build_sid_Valid() const{
    return m_latest_model_build_sid_isValid;
}

OAIObject OAIAutopilot_v1_assistant::getLinks() const {
    return m_links;
}
void OAIAutopilot_v1_assistant::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_links_Set() const{
    return m_links_isSet;
}

bool OAIAutopilot_v1_assistant::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIAutopilot_v1_assistant::isLogQueries() const {
    return m_log_queries;
}
void OAIAutopilot_v1_assistant::setLogQueries(const bool &log_queries) {
    m_log_queries = log_queries;
    m_log_queries_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_log_queries_Set() const{
    return m_log_queries_isSet;
}

bool OAIAutopilot_v1_assistant::is_log_queries_Valid() const{
    return m_log_queries_isValid;
}

bool OAIAutopilot_v1_assistant::isNeedsModelBuild() const {
    return m_needs_model_build;
}
void OAIAutopilot_v1_assistant::setNeedsModelBuild(const bool &needs_model_build) {
    m_needs_model_build = needs_model_build;
    m_needs_model_build_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_needs_model_build_Set() const{
    return m_needs_model_build_isSet;
}

bool OAIAutopilot_v1_assistant::is_needs_model_build_Valid() const{
    return m_needs_model_build_isValid;
}

QString OAIAutopilot_v1_assistant::getSid() const {
    return m_sid;
}
void OAIAutopilot_v1_assistant::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIAutopilot_v1_assistant::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIAutopilot_v1_assistant::getUniqueName() const {
    return m_unique_name;
}
void OAIAutopilot_v1_assistant::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIAutopilot_v1_assistant::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

QString OAIAutopilot_v1_assistant::getUrl() const {
    return m_url;
}
void OAIAutopilot_v1_assistant::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAutopilot_v1_assistant::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAutopilot_v1_assistant::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAutopilot_v1_assistant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_development_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_model_build_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_needs_model_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutopilot_v1_assistant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
