/**
 * Twilio - Fax
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.29.1
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFax_v1_fax.h"
#include "OAIFax_v1_fax_fax_media.h"
#include "OAIListFaxMediaResponse.h"
#include "OAIListFaxResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void deleteFax(const QString &sid);

    /**
    * @param[in]  fax_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteFaxMedia(const QString &fax_sid, const QString &sid);

    /**
    * @param[in]  sid QString [required]
    */
    virtual void fetchFax(const QString &sid);

    /**
    * @param[in]  fax_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchFaxMedia(const QString &fax_sid, const QString &sid);

    /**
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  date_created_on_or_before QDateTime [optional]
    * @param[in]  date_created_after QDateTime [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void listFax(const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_on_or_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_created_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  fax_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void listFaxMedia(const QString &fax_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteFaxCallback(OAIHttpRequestWorker *worker);
    void deleteFaxMediaCallback(OAIHttpRequestWorker *worker);
    void fetchFaxCallback(OAIHttpRequestWorker *worker);
    void fetchFaxMediaCallback(OAIHttpRequestWorker *worker);
    void listFaxCallback(OAIHttpRequestWorker *worker);
    void listFaxMediaCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteFaxSignal();
    void deleteFaxMediaSignal();
    void fetchFaxSignal(OAIFax_v1_fax summary);
    void fetchFaxMediaSignal(OAIFax_v1_fax_fax_media summary);
    void listFaxSignal(OAIListFaxResponse summary);
    void listFaxMediaSignal(OAIListFaxMediaResponse summary);


    void deleteFaxSignalFull(OAIHttpRequestWorker *worker);
    void deleteFaxMediaSignalFull(OAIHttpRequestWorker *worker);
    void fetchFaxSignalFull(OAIHttpRequestWorker *worker, OAIFax_v1_fax summary);
    void fetchFaxMediaSignalFull(OAIHttpRequestWorker *worker, OAIFax_v1_fax_fax_media summary);
    void listFaxSignalFull(OAIHttpRequestWorker *worker, OAIListFaxResponse summary);
    void listFaxMediaSignalFull(OAIHttpRequestWorker *worker, OAIListFaxMediaResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteFaxSignalError() instead")
    void deleteFaxSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFaxSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFaxMediaSignalError() instead")
    void deleteFaxMediaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFaxMediaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchFaxSignalError() instead")
    void fetchFaxSignalE(OAIFax_v1_fax summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchFaxSignalError(OAIFax_v1_fax summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchFaxMediaSignalError() instead")
    void fetchFaxMediaSignalE(OAIFax_v1_fax_fax_media summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchFaxMediaSignalError(OAIFax_v1_fax_fax_media summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFaxSignalError() instead")
    void listFaxSignalE(OAIListFaxResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFaxSignalError(OAIListFaxResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFaxMediaSignalError() instead")
    void listFaxMediaSignalE(OAIListFaxMediaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFaxMediaSignalError(OAIListFaxMediaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteFaxSignalErrorFull() instead")
    void deleteFaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFaxMediaSignalErrorFull() instead")
    void deleteFaxMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFaxMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchFaxSignalErrorFull() instead")
    void fetchFaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchFaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchFaxMediaSignalErrorFull() instead")
    void fetchFaxMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchFaxMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFaxSignalErrorFull() instead")
    void listFaxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFaxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFaxMediaSignalErrorFull() instead")
    void listFaxMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFaxMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
