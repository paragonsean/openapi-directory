/*
 * Twilio - Fax
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.29.1
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FaxV1Fax
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:27:34.972096-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FaxV1Fax {
  public static final String SERIALIZED_NAME_ACCOUNT_SID = "account_sid";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SID)
  private String accountSid;

  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  /**
   * The direction of the fax
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INBOUND("inbound"),
    
    OUTBOUND("outbound");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_MEDIA_SID = "media_sid";
  @SerializedName(SERIALIZED_NAME_MEDIA_SID)
  private String mediaSid;

  public static final String SERIALIZED_NAME_MEDIA_URL = "media_url";
  @SerializedName(SERIALIZED_NAME_MEDIA_URL)
  private String mediaUrl;

  public static final String SERIALIZED_NAME_NUM_PAGES = "num_pages";
  @SerializedName(SERIALIZED_NAME_NUM_PAGES)
  private Integer numPages;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_UNIT = "price_unit";
  @SerializedName(SERIALIZED_NAME_PRICE_UNIT)
  private String priceUnit;

  /**
   * The quality of the fax
   */
  @JsonAdapter(QualityEnum.Adapter.class)
  public enum QualityEnum {
    STANDARD("standard"),
    
    FINE("fine"),
    
    SUPERFINE("superfine");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QualityEnum fromValue(String value) {
      for (QualityEnum b : QualityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<QualityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QualityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QualityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QualityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QualityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private QualityEnum quality;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  /**
   * The status of the fax
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("queued"),
    
    PROCESSING("processing"),
    
    SENDING("sending"),
    
    DELIVERED("delivered"),
    
    RECEIVING("receiving"),
    
    RECEIVED("received"),
    
    NO_ANSWER("no-answer"),
    
    BUSY("busy"),
    
    FAILED("failed"),
    
    CANCELED("canceled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public FaxV1Fax() {
  }

  public FaxV1Fax accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The SID of the Account that created the resource
   * @return accountSid
   */
  @javax.annotation.Nullable
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }


  public FaxV1Fax apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * The API version used to transmit the fax
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public FaxV1Fax dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The ISO 8601 formatted date and time in GMT when the resource was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public FaxV1Fax dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The ISO 8601 formatted date and time in GMT when the resource was last updated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public FaxV1Fax direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * The direction of the fax
   * @return direction
   */
  @javax.annotation.Nullable
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public FaxV1Fax duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The time it took to transmit the fax
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public FaxV1Fax from(String from) {
    this.from = from;
    return this;
  }

  /**
   * The number the fax was sent from
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public FaxV1Fax links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * The URLs of the fax&#39;s related resources
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public FaxV1Fax mediaSid(String mediaSid) {
    this.mediaSid = mediaSid;
    return this;
  }

  /**
   * The SID of the FaxMedia resource that is associated with the Fax
   * @return mediaSid
   */
  @javax.annotation.Nullable
  public String getMediaSid() {
    return mediaSid;
  }

  public void setMediaSid(String mediaSid) {
    this.mediaSid = mediaSid;
  }


  public FaxV1Fax mediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
    return this;
  }

  /**
   * The Twilio-hosted URL that can be used to download fax media
   * @return mediaUrl
   */
  @javax.annotation.Nullable
  public String getMediaUrl() {
    return mediaUrl;
  }

  public void setMediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
  }


  public FaxV1Fax numPages(Integer numPages) {
    this.numPages = numPages;
    return this;
  }

  /**
   * The number of pages contained in the fax document
   * @return numPages
   */
  @javax.annotation.Nullable
  public Integer getNumPages() {
    return numPages;
  }

  public void setNumPages(Integer numPages) {
    this.numPages = numPages;
  }


  public FaxV1Fax price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * The fax transmission price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public FaxV1Fax priceUnit(String priceUnit) {
    this.priceUnit = priceUnit;
    return this;
  }

  /**
   * The ISO 4217 currency used for billing
   * @return priceUnit
   */
  @javax.annotation.Nullable
  public String getPriceUnit() {
    return priceUnit;
  }

  public void setPriceUnit(String priceUnit) {
    this.priceUnit = priceUnit;
  }


  public FaxV1Fax quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

  /**
   * The quality of the fax
   * @return quality
   */
  @javax.annotation.Nullable
  public QualityEnum getQuality() {
    return quality;
  }

  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }


  public FaxV1Fax sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The unique string that identifies the resource
   * @return sid
   */
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public FaxV1Fax status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the fax
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public FaxV1Fax to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The phone number that received the fax
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public FaxV1Fax url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The absolute URL of the fax resource
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaxV1Fax faxV1Fax = (FaxV1Fax) o;
    return Objects.equals(this.accountSid, faxV1Fax.accountSid) &&
        Objects.equals(this.apiVersion, faxV1Fax.apiVersion) &&
        Objects.equals(this.dateCreated, faxV1Fax.dateCreated) &&
        Objects.equals(this.dateUpdated, faxV1Fax.dateUpdated) &&
        Objects.equals(this.direction, faxV1Fax.direction) &&
        Objects.equals(this.duration, faxV1Fax.duration) &&
        Objects.equals(this.from, faxV1Fax.from) &&
        Objects.equals(this.links, faxV1Fax.links) &&
        Objects.equals(this.mediaSid, faxV1Fax.mediaSid) &&
        Objects.equals(this.mediaUrl, faxV1Fax.mediaUrl) &&
        Objects.equals(this.numPages, faxV1Fax.numPages) &&
        Objects.equals(this.price, faxV1Fax.price) &&
        Objects.equals(this.priceUnit, faxV1Fax.priceUnit) &&
        Objects.equals(this.quality, faxV1Fax.quality) &&
        Objects.equals(this.sid, faxV1Fax.sid) &&
        Objects.equals(this.status, faxV1Fax.status) &&
        Objects.equals(this.to, faxV1Fax.to) &&
        Objects.equals(this.url, faxV1Fax.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountSid, apiVersion, dateCreated, dateUpdated, direction, duration, from, links, mediaSid, mediaUrl, numPages, price, priceUnit, quality, sid, status, to, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaxV1Fax {\n");
    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mediaSid: ").append(toIndentedString(mediaSid)).append("\n");
    sb.append("    mediaUrl: ").append(toIndentedString(mediaUrl)).append("\n");
    sb.append("    numPages: ").append(toIndentedString(numPages)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceUnit: ").append(toIndentedString(priceUnit)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_sid");
    openapiFields.add("api_version");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("direction");
    openapiFields.add("duration");
    openapiFields.add("from");
    openapiFields.add("links");
    openapiFields.add("media_sid");
    openapiFields.add("media_url");
    openapiFields.add("num_pages");
    openapiFields.add("price");
    openapiFields.add("price_unit");
    openapiFields.add("quality");
    openapiFields.add("sid");
    openapiFields.add("status");
    openapiFields.add("to");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaxV1Fax
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FaxV1Fax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FaxV1Fax is not found in the empty JSON string", FaxV1Fax.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FaxV1Fax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FaxV1Fax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_sid") != null && !jsonObj.get("account_sid").isJsonNull()) && !jsonObj.get("account_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_sid").toString()));
      }
      if ((jsonObj.get("api_version") != null && !jsonObj.get("api_version").isJsonNull()) && !jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("media_sid") != null && !jsonObj.get("media_sid").isJsonNull()) && !jsonObj.get("media_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_sid").toString()));
      }
      if ((jsonObj.get("media_url") != null && !jsonObj.get("media_url").isJsonNull()) && !jsonObj.get("media_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_url").toString()));
      }
      if ((jsonObj.get("price_unit") != null && !jsonObj.get("price_unit").isJsonNull()) && !jsonObj.get("price_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_unit").toString()));
      }
      if ((jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) && !jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      // validate the optional field `quality`
      if (jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) {
        QualityEnum.validateJsonElement(jsonObj.get("quality"));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FaxV1Fax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FaxV1Fax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FaxV1Fax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FaxV1Fax.class));

       return (TypeAdapter<T>) new TypeAdapter<FaxV1Fax>() {
           @Override
           public void write(JsonWriter out, FaxV1Fax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FaxV1Fax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FaxV1Fax given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaxV1Fax
   * @throws IOException if the JSON string is invalid with respect to FaxV1Fax
   */
  public static FaxV1Fax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaxV1Fax.class);
  }

  /**
   * Convert an instance of FaxV1Fax to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

