# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FaxV1Fax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, api_version: str=None, date_created: datetime=None, date_updated: datetime=None, direction: str=None, duration: int=None, _from: str=None, links: object=None, media_sid: str=None, media_url: str=None, num_pages: int=None, price: float=None, price_unit: str=None, quality: str=None, sid: str=None, status: str=None, to: str=None, url: str=None):
        """FaxV1Fax - a model defined in OpenAPI

        :param account_sid: The account_sid of this FaxV1Fax.
        :param api_version: The api_version of this FaxV1Fax.
        :param date_created: The date_created of this FaxV1Fax.
        :param date_updated: The date_updated of this FaxV1Fax.
        :param direction: The direction of this FaxV1Fax.
        :param duration: The duration of this FaxV1Fax.
        :param _from: The _from of this FaxV1Fax.
        :param links: The links of this FaxV1Fax.
        :param media_sid: The media_sid of this FaxV1Fax.
        :param media_url: The media_url of this FaxV1Fax.
        :param num_pages: The num_pages of this FaxV1Fax.
        :param price: The price of this FaxV1Fax.
        :param price_unit: The price_unit of this FaxV1Fax.
        :param quality: The quality of this FaxV1Fax.
        :param sid: The sid of this FaxV1Fax.
        :param status: The status of this FaxV1Fax.
        :param to: The to of this FaxV1Fax.
        :param url: The url of this FaxV1Fax.
        """
        self.openapi_types = {
            'account_sid': str,
            'api_version': str,
            'date_created': datetime,
            'date_updated': datetime,
            'direction': str,
            'duration': int,
            '_from': str,
            'links': object,
            'media_sid': str,
            'media_url': str,
            'num_pages': int,
            'price': float,
            'price_unit': str,
            'quality': str,
            'sid': str,
            'status': str,
            'to': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'api_version': 'api_version',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'direction': 'direction',
            'duration': 'duration',
            '_from': 'from',
            'links': 'links',
            'media_sid': 'media_sid',
            'media_url': 'media_url',
            'num_pages': 'num_pages',
            'price': 'price',
            'price_unit': 'price_unit',
            'quality': 'quality',
            'sid': 'sid',
            'status': 'status',
            'to': 'to',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._api_version = api_version
        self._date_created = date_created
        self._date_updated = date_updated
        self._direction = direction
        self._duration = duration
        self.__from = _from
        self._links = links
        self._media_sid = media_sid
        self._media_url = media_url
        self._num_pages = num_pages
        self._price = price
        self._price_unit = price_unit
        self._quality = quality
        self._sid = sid
        self._status = status
        self._to = to
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaxV1Fax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The fax.v1.fax of this FaxV1Fax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this FaxV1Fax.

        The SID of the Account that created the resource

        :return: The account_sid of this FaxV1Fax.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this FaxV1Fax.

        The SID of the Account that created the resource

        :param account_sid: The account_sid of this FaxV1Fax.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def api_version(self):
        """Gets the api_version of this FaxV1Fax.

        The API version used to transmit the fax

        :return: The api_version of this FaxV1Fax.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this FaxV1Fax.

        The API version used to transmit the fax

        :param api_version: The api_version of this FaxV1Fax.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def date_created(self):
        """Gets the date_created of this FaxV1Fax.

        The ISO 8601 formatted date and time in GMT when the resource was created

        :return: The date_created of this FaxV1Fax.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this FaxV1Fax.

        The ISO 8601 formatted date and time in GMT when the resource was created

        :param date_created: The date_created of this FaxV1Fax.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this FaxV1Fax.

        The ISO 8601 formatted date and time in GMT when the resource was last updated

        :return: The date_updated of this FaxV1Fax.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this FaxV1Fax.

        The ISO 8601 formatted date and time in GMT when the resource was last updated

        :param date_updated: The date_updated of this FaxV1Fax.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def direction(self):
        """Gets the direction of this FaxV1Fax.

        The direction of the fax

        :return: The direction of this FaxV1Fax.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this FaxV1Fax.

        The direction of the fax

        :param direction: The direction of this FaxV1Fax.
        :type direction: str
        """
        allowed_values = [None,"inbound", "outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this FaxV1Fax.

        The time it took to transmit the fax

        :return: The duration of this FaxV1Fax.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this FaxV1Fax.

        The time it took to transmit the fax

        :param duration: The duration of this FaxV1Fax.
        :type duration: int
        """

        self._duration = duration

    @property
    def _from(self):
        """Gets the _from of this FaxV1Fax.

        The number the fax was sent from

        :return: The _from of this FaxV1Fax.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this FaxV1Fax.

        The number the fax was sent from

        :param _from: The _from of this FaxV1Fax.
        :type _from: str
        """

        self.__from = _from

    @property
    def links(self):
        """Gets the links of this FaxV1Fax.

        The URLs of the fax's related resources

        :return: The links of this FaxV1Fax.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FaxV1Fax.

        The URLs of the fax's related resources

        :param links: The links of this FaxV1Fax.
        :type links: object
        """

        self._links = links

    @property
    def media_sid(self):
        """Gets the media_sid of this FaxV1Fax.

        The SID of the FaxMedia resource that is associated with the Fax

        :return: The media_sid of this FaxV1Fax.
        :rtype: str
        """
        return self._media_sid

    @media_sid.setter
    def media_sid(self, media_sid):
        """Sets the media_sid of this FaxV1Fax.

        The SID of the FaxMedia resource that is associated with the Fax

        :param media_sid: The media_sid of this FaxV1Fax.
        :type media_sid: str
        """
        if media_sid is not None and len(media_sid) > 34:
            raise ValueError("Invalid value for `media_sid`, length must be less than or equal to `34`")
        if media_sid is not None and len(media_sid) < 34:
            raise ValueError("Invalid value for `media_sid`, length must be greater than or equal to `34`")
        if media_sid is not None and not re.search(r'^ME[0-9a-fA-F]{32}$', media_sid):
            raise ValueError("Invalid value for `media_sid`, must be a follow pattern or equal to `/^ME[0-9a-fA-F]{32}$/`")

        self._media_sid = media_sid

    @property
    def media_url(self):
        """Gets the media_url of this FaxV1Fax.

        The Twilio-hosted URL that can be used to download fax media

        :return: The media_url of this FaxV1Fax.
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this FaxV1Fax.

        The Twilio-hosted URL that can be used to download fax media

        :param media_url: The media_url of this FaxV1Fax.
        :type media_url: str
        """

        self._media_url = media_url

    @property
    def num_pages(self):
        """Gets the num_pages of this FaxV1Fax.

        The number of pages contained in the fax document

        :return: The num_pages of this FaxV1Fax.
        :rtype: int
        """
        return self._num_pages

    @num_pages.setter
    def num_pages(self, num_pages):
        """Sets the num_pages of this FaxV1Fax.

        The number of pages contained in the fax document

        :param num_pages: The num_pages of this FaxV1Fax.
        :type num_pages: int
        """

        self._num_pages = num_pages

    @property
    def price(self):
        """Gets the price of this FaxV1Fax.

        The fax transmission price

        :return: The price of this FaxV1Fax.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this FaxV1Fax.

        The fax transmission price

        :param price: The price of this FaxV1Fax.
        :type price: float
        """

        self._price = price

    @property
    def price_unit(self):
        """Gets the price_unit of this FaxV1Fax.

        The ISO 4217 currency used for billing

        :return: The price_unit of this FaxV1Fax.
        :rtype: str
        """
        return self._price_unit

    @price_unit.setter
    def price_unit(self, price_unit):
        """Sets the price_unit of this FaxV1Fax.

        The ISO 4217 currency used for billing

        :param price_unit: The price_unit of this FaxV1Fax.
        :type price_unit: str
        """

        self._price_unit = price_unit

    @property
    def quality(self):
        """Gets the quality of this FaxV1Fax.

        The quality of the fax

        :return: The quality of this FaxV1Fax.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this FaxV1Fax.

        The quality of the fax

        :param quality: The quality of this FaxV1Fax.
        :type quality: str
        """
        allowed_values = [None,"standard", "fine", "superfine"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality

    @property
    def sid(self):
        """Gets the sid of this FaxV1Fax.

        The unique string that identifies the resource

        :return: The sid of this FaxV1Fax.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this FaxV1Fax.

        The unique string that identifies the resource

        :param sid: The sid of this FaxV1Fax.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^FX[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^FX[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def status(self):
        """Gets the status of this FaxV1Fax.

        The status of the fax

        :return: The status of this FaxV1Fax.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FaxV1Fax.

        The status of the fax

        :param status: The status of this FaxV1Fax.
        :type status: str
        """
        allowed_values = [None,"queued", "processing", "sending", "delivered", "receiving", "received", "no-answer", "busy", "failed", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def to(self):
        """Gets the to of this FaxV1Fax.

        The phone number that received the fax

        :return: The to of this FaxV1Fax.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this FaxV1Fax.

        The phone number that received the fax

        :param to: The to of this FaxV1Fax.
        :type to: str
        """

        self._to = to

    @property
    def url(self):
        """Gets the url of this FaxV1Fax.

        The absolute URL of the fax resource

        :return: The url of this FaxV1Fax.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FaxV1Fax.

        The absolute URL of the fax resource

        :param url: The url of this FaxV1Fax.
        :type url: str
        """

        self._url = url
