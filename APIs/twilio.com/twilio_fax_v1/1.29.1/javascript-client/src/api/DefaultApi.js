/**
 * Twilio - Fax
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.29.1
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FaxV1Fax from '../model/FaxV1Fax';
import FaxV1FaxFaxMedia from '../model/FaxV1FaxFaxMedia';
import ListFaxMediaResponse from '../model/ListFaxMediaResponse';
import ListFaxResponse from '../model/ListFaxResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.29.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFax operation.
     * @callback module:api/DefaultApi~deleteFaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific fax and its associated media.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Fax resource to delete.
     * @param {module:api/DefaultApi~deleteFaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFax(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteFax");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://fax.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Faxes/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFaxMedia operation.
     * @callback module:api/DefaultApi~deleteFaxMediaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific fax media instance.
     * @param {String} faxSid The SID of the fax with the FaxMedia resource to delete.
     * @param {String} sid The Twilio-provided string that uniquely identifies the FaxMedia resource to delete.
     * @param {module:api/DefaultApi~deleteFaxMediaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFaxMedia(faxSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'faxSid' is set
      if (faxSid === undefined || faxSid === null) {
        throw new Error("Missing the required parameter 'faxSid' when calling deleteFaxMedia");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteFaxMedia");
      }

      let pathParams = {
        'FaxSid': faxSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://fax.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Faxes/{FaxSid}/Media/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchFax operation.
     * @callback module:api/DefaultApi~fetchFaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FaxV1Fax} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific fax.
     * @param {String} sid The Twilio-provided string that uniquely identifies the Fax resource to fetch.
     * @param {module:api/DefaultApi~fetchFaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FaxV1Fax}
     */
    fetchFax(sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchFax");
      }

      let pathParams = {
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FaxV1Fax;
      let basePaths = ['https://fax.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Faxes/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchFaxMedia operation.
     * @callback module:api/DefaultApi~fetchFaxMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FaxV1FaxFaxMedia} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a specific fax media instance.
     * @param {String} faxSid The SID of the fax with the FaxMedia resource to fetch.
     * @param {String} sid The Twilio-provided string that uniquely identifies the FaxMedia resource to fetch.
     * @param {module:api/DefaultApi~fetchFaxMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FaxV1FaxFaxMedia}
     */
    fetchFaxMedia(faxSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'faxSid' is set
      if (faxSid === undefined || faxSid === null) {
        throw new Error("Missing the required parameter 'faxSid' when calling fetchFaxMedia");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchFaxMedia");
      }

      let pathParams = {
        'FaxSid': faxSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FaxV1FaxFaxMedia;
      let basePaths = ['https://fax.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Faxes/{FaxSid}/Media/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listFax operation.
     * @callback module:api/DefaultApi~listFaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFaxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all faxes.
     * @param {Object} opts Optional parameters
     * @param {String} [from] Retrieve only those faxes sent from this phone number, specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.
     * @param {String} [to] Retrieve only those faxes sent to this phone number, specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.
     * @param {Date} [dateCreatedOnOrBefore] Retrieve only those faxes with a `date_created` that is before or equal to this value, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * @param {Date} [dateCreatedAfter] Retrieve only those faxes with a `date_created` that is later than this value, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {module:api/DefaultApi~listFaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFaxResponse}
     */
    listFax(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'From': opts['from'],
        'To': opts['to'],
        'DateCreatedOnOrBefore': opts['dateCreatedOnOrBefore'],
        'DateCreatedAfter': opts['dateCreatedAfter'],
        'PageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFaxResponse;
      let basePaths = ['https://fax.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Faxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listFaxMedia operation.
     * @callback module:api/DefaultApi~listFaxMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFaxMediaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all fax media instances for the specified fax.
     * @param {String} faxSid The SID of the fax with the FaxMedia resources to read.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {module:api/DefaultApi~listFaxMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFaxMediaResponse}
     */
    listFaxMedia(faxSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'faxSid' is set
      if (faxSid === undefined || faxSid === null) {
        throw new Error("Missing the required parameter 'faxSid' when calling listFaxMedia");
      }

      let pathParams = {
        'FaxSid': faxSid
      };
      let queryParams = {
        'PageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFaxMediaResponse;
      let basePaths = ['https://fax.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/Faxes/{FaxSid}/Media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
