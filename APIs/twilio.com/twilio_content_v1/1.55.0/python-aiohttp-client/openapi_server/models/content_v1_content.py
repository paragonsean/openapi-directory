# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ContentV1Content(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, date_created: datetime=None, date_updated: datetime=None, friendly_name: str=None, language: str=None, links: object=None, sid: str=None, types: object=None, url: str=None, variables: object=None):
        """ContentV1Content - a model defined in OpenAPI

        :param account_sid: The account_sid of this ContentV1Content.
        :param date_created: The date_created of this ContentV1Content.
        :param date_updated: The date_updated of this ContentV1Content.
        :param friendly_name: The friendly_name of this ContentV1Content.
        :param language: The language of this ContentV1Content.
        :param links: The links of this ContentV1Content.
        :param sid: The sid of this ContentV1Content.
        :param types: The types of this ContentV1Content.
        :param url: The url of this ContentV1Content.
        :param variables: The variables of this ContentV1Content.
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'language': str,
            'links': object,
            'sid': str,
            'types': object,
            'url': str,
            'variables': object
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'language': 'language',
            'links': 'links',
            'sid': 'sid',
            'types': 'types',
            'url': 'url',
            'variables': 'variables'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._language = language
        self._links = links
        self._sid = sid
        self._types = types
        self._url = url
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentV1Content':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The content.v1.content of this ContentV1Content.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this ContentV1Content.

        The SID of the [Account](https://www.twilio.com/docs/usage/api/account) that created Content resource.

        :return: The account_sid of this ContentV1Content.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this ContentV1Content.

        The SID of the [Account](https://www.twilio.com/docs/usage/api/account) that created Content resource.

        :param account_sid: The account_sid of this ContentV1Content.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def date_created(self):
        """Gets the date_created of this ContentV1Content.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_created of this ContentV1Content.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ContentV1Content.

        The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_created: The date_created of this ContentV1Content.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this ContentV1Content.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :return: The date_updated of this ContentV1Content.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ContentV1Content.

        The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.

        :param date_updated: The date_updated of this ContentV1Content.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ContentV1Content.

        A string name used to describe the Content resource. Not visible to the end recipient.

        :return: The friendly_name of this ContentV1Content.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ContentV1Content.

        A string name used to describe the Content resource. Not visible to the end recipient.

        :param friendly_name: The friendly_name of this ContentV1Content.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def language(self):
        """Gets the language of this ContentV1Content.

        Two-letter (ISO 639-1) language code (e.g., en) identifying the language the Content resource is in.

        :return: The language of this ContentV1Content.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ContentV1Content.

        Two-letter (ISO 639-1) language code (e.g., en) identifying the language the Content resource is in.

        :param language: The language of this ContentV1Content.
        :type language: str
        """

        self._language = language

    @property
    def links(self):
        """Gets the links of this ContentV1Content.

        A list of links related to the Content resource, such as approval_fetch and approval_create

        :return: The links of this ContentV1Content.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ContentV1Content.

        A list of links related to the Content resource, such as approval_fetch and approval_create

        :param links: The links of this ContentV1Content.
        :type links: object
        """

        self._links = links

    @property
    def sid(self):
        """Gets the sid of this ContentV1Content.

        The unique string that that we created to identify the Content resource.

        :return: The sid of this ContentV1Content.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ContentV1Content.

        The unique string that that we created to identify the Content resource.

        :param sid: The sid of this ContentV1Content.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^HX[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^HX[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def types(self):
        """Gets the types of this ContentV1Content.

        The [Content types](https://www.twilio.com/docs/content/content-types-overview) (e.g. twilio/text) for this Content resource.

        :return: The types of this ContentV1Content.
        :rtype: object
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this ContentV1Content.

        The [Content types](https://www.twilio.com/docs/content/content-types-overview) (e.g. twilio/text) for this Content resource.

        :param types: The types of this ContentV1Content.
        :type types: object
        """

        self._types = types

    @property
    def url(self):
        """Gets the url of this ContentV1Content.

        The URL of the resource, relative to `https://content.twilio.com`.

        :return: The url of this ContentV1Content.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContentV1Content.

        The URL of the resource, relative to `https://content.twilio.com`.

        :param url: The url of this ContentV1Content.
        :type url: str
        """

        self._url = url

    @property
    def variables(self):
        """Gets the variables of this ContentV1Content.

        Defines the default placeholder values for variables included in the Content resource. e.g. {\"1\": \"Customer_Name\"}.

        :return: The variables of this ContentV1Content.
        :rtype: object
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this ContentV1Content.

        Defines the default placeholder values for variables included in the Content resource. e.g. {\"1\": \"Customer_Name\"}.

        :param variables: The variables of this ContentV1Content.
        :type variables: object
        """

        self._variables = variables
