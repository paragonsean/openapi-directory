/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IpMessagingV2ServiceChannelMessage from '../model/IpMessagingV2ServiceChannelMessage';
import ListMessageResponse from '../model/ListMessageResponse';
import MessageEnumOrderType from '../model/MessageEnumOrderType';
import MessageEnumWebhookEnabledType from '../model/MessageEnumWebhookEnabledType';

/**
* IpMessagingV2Message service.
* @module api/IpMessagingV2MessageApi
* @version 1.55.0
*/
export default class IpMessagingV2MessageApi {

    /**
    * Constructs a new IpMessagingV2MessageApi. 
    * @alias module:api/IpMessagingV2MessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessage operation.
     * @callback module:api/IpMessagingV2MessageApi~createMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV2ServiceChannelMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {Object} opts Optional parameters
     * @param {module:model/MessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] 
     * @param {String} [body] 
     * @param {Date} [dateCreated] 
     * @param {Date} [dateUpdated] 
     * @param {String} [from] 
     * @param {String} [lastUpdatedBy] 
     * @param {String} [mediaSid] 
     * @param {module:api/IpMessagingV2MessageApi~createMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV2ServiceChannelMessage}
     */
    createMessage(serviceSid, channelSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createMessage");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling createMessage");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Body': opts['body'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'From': opts['from'],
        'LastUpdatedBy': opts['lastUpdatedBy'],
        'MediaSid': opts['mediaSid']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IpMessagingV2ServiceChannelMessage;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessage operation.
     * @callback module:api/IpMessagingV2MessageApi~deleteMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {String} sid 
     * @param {Object} opts Optional parameters
     * @param {module:model/MessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {module:api/IpMessagingV2MessageApi~deleteMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessage(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteMessage");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling deleteMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteMessage");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchMessage operation.
     * @callback module:api/IpMessagingV2MessageApi~fetchMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV2ServiceChannelMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {String} sid 
     * @param {module:api/IpMessagingV2MessageApi~fetchMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV2ServiceChannelMessage}
     */
    fetchMessage(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchMessage");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling fetchMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchMessage");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpMessagingV2ServiceChannelMessage;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listMessage operation.
     * @callback module:api/IpMessagingV2MessageApi~listMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {Object} opts Optional parameters
     * @param {module:model/MessageEnumOrderType} [order] 
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/IpMessagingV2MessageApi~listMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMessageResponse}
     */
    listMessage(serviceSid, channelSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listMessage");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling listMessage");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid
      };
      let queryParams = {
        'Order': opts['order'],
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMessageResponse;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessage operation.
     * @callback module:api/IpMessagingV2MessageApi~updateMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV2ServiceChannelMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {String} sid 
     * @param {Object} opts Optional parameters
     * @param {module:model/MessageEnumWebhookEnabledType} [xTwilioWebhookEnabled] The X-Twilio-Webhook-Enabled HTTP request header
     * @param {String} [attributes] 
     * @param {String} [body] 
     * @param {Date} [dateCreated] 
     * @param {Date} [dateUpdated] 
     * @param {String} [from] 
     * @param {String} [lastUpdatedBy] 
     * @param {module:api/IpMessagingV2MessageApi~updateMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV2ServiceChannelMessage}
     */
    updateMessage(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateMessage");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling updateMessage");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateMessage");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Twilio-Webhook-Enabled': opts['xTwilioWebhookEnabled']
      };
      let formParams = {
        'Attributes': opts['attributes'],
        'Body': opts['body'],
        'DateCreated': opts['dateCreated'],
        'DateUpdated': opts['dateUpdated'],
        'From': opts['from'],
        'LastUpdatedBy': opts['lastUpdatedBy']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IpMessagingV2ServiceChannelMessage;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
