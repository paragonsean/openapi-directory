/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChannelWebhookEnumMethod from '../model/ChannelWebhookEnumMethod';
import ChannelWebhookEnumType from '../model/ChannelWebhookEnumType';
import IpMessagingV2ServiceChannelChannelWebhook from '../model/IpMessagingV2ServiceChannelChannelWebhook';
import ListChannelWebhookResponse from '../model/ListChannelWebhookResponse';

/**
* IpMessagingV2Webhook service.
* @module api/IpMessagingV2WebhookApi
* @version 1.55.0
*/
export default class IpMessagingV2WebhookApi {

    /**
    * Constructs a new IpMessagingV2WebhookApi. 
    * @alias module:api/IpMessagingV2WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChannelWebhook operation.
     * @callback module:api/IpMessagingV2WebhookApi~createChannelWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV2ServiceChannelChannelWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {module:model/ChannelWebhookEnumType} type 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [configurationFilters] 
     * @param {String} [configurationFlowSid] 
     * @param {module:model/ChannelWebhookEnumMethod} [configurationMethod] 
     * @param {Number} [configurationRetryCount] 
     * @param {Array.<String>} [configurationTriggers] 
     * @param {String} [configurationUrl] 
     * @param {module:api/IpMessagingV2WebhookApi~createChannelWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV2ServiceChannelChannelWebhook}
     */
    createChannelWebhook(serviceSid, channelSid, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling createChannelWebhook");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling createChannelWebhook");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createChannelWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Configuration.Filters': this.apiClient.buildCollectionParam(opts['configurationFilters'], 'csv'),
        'Configuration.FlowSid': opts['configurationFlowSid'],
        'Configuration.Method': opts['configurationMethod'],
        'Configuration.RetryCount': opts['configurationRetryCount'],
        'Configuration.Triggers': this.apiClient.buildCollectionParam(opts['configurationTriggers'], 'csv'),
        'Configuration.Url': opts['configurationUrl'],
        'Type': type
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IpMessagingV2ServiceChannelChannelWebhook;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelWebhook operation.
     * @callback module:api/IpMessagingV2WebhookApi~deleteChannelWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {String} sid 
     * @param {module:api/IpMessagingV2WebhookApi~deleteChannelWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannelWebhook(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling deleteChannelWebhook");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling deleteChannelWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling deleteChannelWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchChannelWebhook operation.
     * @callback module:api/IpMessagingV2WebhookApi~fetchChannelWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV2ServiceChannelChannelWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {String} sid 
     * @param {module:api/IpMessagingV2WebhookApi~fetchChannelWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV2ServiceChannelChannelWebhook}
     */
    fetchChannelWebhook(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling fetchChannelWebhook");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling fetchChannelWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling fetchChannelWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpMessagingV2ServiceChannelChannelWebhook;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelWebhook operation.
     * @callback module:api/IpMessagingV2WebhookApi~listChannelWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] How many resources to return in each list page. The default is 50, and the maximum is 1000.
     * @param {Number} [page] The page index. This value is simply for client state.
     * @param {String} [pageToken] The page token. This is provided by the API.
     * @param {module:api/IpMessagingV2WebhookApi~listChannelWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelWebhookResponse}
     */
    listChannelWebhook(serviceSid, channelSid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling listChannelWebhook");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling listChannelWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'Page': opts['page'],
        'PageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelWebhookResponse;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelWebhook operation.
     * @callback module:api/IpMessagingV2WebhookApi~updateChannelWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpMessagingV2ServiceChannelChannelWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} serviceSid 
     * @param {String} channelSid 
     * @param {String} sid 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [configurationFilters] 
     * @param {String} [configurationFlowSid] 
     * @param {module:model/ChannelWebhookEnumMethod} [configurationMethod] 
     * @param {Number} [configurationRetryCount] 
     * @param {Array.<String>} [configurationTriggers] 
     * @param {String} [configurationUrl] 
     * @param {module:api/IpMessagingV2WebhookApi~updateChannelWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpMessagingV2ServiceChannelChannelWebhook}
     */
    updateChannelWebhook(serviceSid, channelSid, sid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceSid' is set
      if (serviceSid === undefined || serviceSid === null) {
        throw new Error("Missing the required parameter 'serviceSid' when calling updateChannelWebhook");
      }
      // verify the required parameter 'channelSid' is set
      if (channelSid === undefined || channelSid === null) {
        throw new Error("Missing the required parameter 'channelSid' when calling updateChannelWebhook");
      }
      // verify the required parameter 'sid' is set
      if (sid === undefined || sid === null) {
        throw new Error("Missing the required parameter 'sid' when calling updateChannelWebhook");
      }

      let pathParams = {
        'ServiceSid': serviceSid,
        'ChannelSid': channelSid,
        'Sid': sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Configuration.Filters': this.apiClient.buildCollectionParam(opts['configurationFilters'], 'csv'),
        'Configuration.FlowSid': opts['configurationFlowSid'],
        'Configuration.Method': opts['configurationMethod'],
        'Configuration.RetryCount': opts['configurationRetryCount'],
        'Configuration.Triggers': this.apiClient.buildCollectionParam(opts['configurationTriggers'], 'csv'),
        'Configuration.Url': opts['configurationUrl']
      };

      let authNames = ['accountSid_authToken'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = IpMessagingV2ServiceChannelChannelWebhook;
      let basePaths = ['https://ip-messaging.twilio.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
