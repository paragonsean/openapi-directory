/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserChannelEnumChannelStatus from './UserChannelEnumChannelStatus';
import UserChannelEnumNotificationLevel from './UserChannelEnumNotificationLevel';

/**
 * The IpMessagingV2ServiceUserUserChannel model module.
 * @module model/IpMessagingV2ServiceUserUserChannel
 * @version 1.55.0
 */
class IpMessagingV2ServiceUserUserChannel {
    /**
     * Constructs a new <code>IpMessagingV2ServiceUserUserChannel</code>.
     * @alias module:model/IpMessagingV2ServiceUserUserChannel
     */
    constructor() { 
        
        IpMessagingV2ServiceUserUserChannel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IpMessagingV2ServiceUserUserChannel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpMessagingV2ServiceUserUserChannel} obj Optional instance to populate.
     * @return {module:model/IpMessagingV2ServiceUserUserChannel} The populated <code>IpMessagingV2ServiceUserUserChannel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpMessagingV2ServiceUserUserChannel();

            if (data.hasOwnProperty('account_sid')) {
                obj['account_sid'] = ApiClient.convertToType(data['account_sid'], 'String');
            }
            if (data.hasOwnProperty('channel_sid')) {
                obj['channel_sid'] = ApiClient.convertToType(data['channel_sid'], 'String');
            }
            if (data.hasOwnProperty('last_consumed_message_index')) {
                obj['last_consumed_message_index'] = ApiClient.convertToType(data['last_consumed_message_index'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], Object);
            }
            if (data.hasOwnProperty('member_sid')) {
                obj['member_sid'] = ApiClient.convertToType(data['member_sid'], 'String');
            }
            if (data.hasOwnProperty('notification_level')) {
                obj['notification_level'] = UserChannelEnumNotificationLevel.constructFromObject(data['notification_level']);
            }
            if (data.hasOwnProperty('service_sid')) {
                obj['service_sid'] = ApiClient.convertToType(data['service_sid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = UserChannelEnumChannelStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('unread_messages_count')) {
                obj['unread_messages_count'] = ApiClient.convertToType(data['unread_messages_count'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user_sid')) {
                obj['user_sid'] = ApiClient.convertToType(data['user_sid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpMessagingV2ServiceUserUserChannel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpMessagingV2ServiceUserUserChannel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_sid'] && !(typeof data['account_sid'] === 'string' || data['account_sid'] instanceof String)) {
            throw new Error("Expected the field `account_sid` to be a primitive type in the JSON string but got " + data['account_sid']);
        }
        // ensure the json data is a string
        if (data['channel_sid'] && !(typeof data['channel_sid'] === 'string' || data['channel_sid'] instanceof String)) {
            throw new Error("Expected the field `channel_sid` to be a primitive type in the JSON string but got " + data['channel_sid']);
        }
        // ensure the json data is a string
        if (data['member_sid'] && !(typeof data['member_sid'] === 'string' || data['member_sid'] instanceof String)) {
            throw new Error("Expected the field `member_sid` to be a primitive type in the JSON string but got " + data['member_sid']);
        }
        // ensure the json data is a string
        if (data['notification_level'] && !(typeof data['notification_level'] === 'string' || data['notification_level'] instanceof String)) {
            throw new Error("Expected the field `notification_level` to be a primitive type in the JSON string but got " + data['notification_level']);
        }
        // ensure the json data is a string
        if (data['service_sid'] && !(typeof data['service_sid'] === 'string' || data['service_sid'] instanceof String)) {
            throw new Error("Expected the field `service_sid` to be a primitive type in the JSON string but got " + data['service_sid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['user_sid'] && !(typeof data['user_sid'] === 'string' || data['user_sid'] instanceof String)) {
            throw new Error("Expected the field `user_sid` to be a primitive type in the JSON string but got " + data['user_sid']);
        }

        return true;
    }


}



/**
 * @member {String} account_sid
 */
IpMessagingV2ServiceUserUserChannel.prototype['account_sid'] = undefined;

/**
 * @member {String} channel_sid
 */
IpMessagingV2ServiceUserUserChannel.prototype['channel_sid'] = undefined;

/**
 * @member {Number} last_consumed_message_index
 */
IpMessagingV2ServiceUserUserChannel.prototype['last_consumed_message_index'] = undefined;

/**
 * @member {Object} links
 */
IpMessagingV2ServiceUserUserChannel.prototype['links'] = undefined;

/**
 * @member {String} member_sid
 */
IpMessagingV2ServiceUserUserChannel.prototype['member_sid'] = undefined;

/**
 * @member {module:model/UserChannelEnumNotificationLevel} notification_level
 */
IpMessagingV2ServiceUserUserChannel.prototype['notification_level'] = undefined;

/**
 * @member {String} service_sid
 */
IpMessagingV2ServiceUserUserChannel.prototype['service_sid'] = undefined;

/**
 * @member {module:model/UserChannelEnumChannelStatus} status
 */
IpMessagingV2ServiceUserUserChannel.prototype['status'] = undefined;

/**
 * @member {Number} unread_messages_count
 */
IpMessagingV2ServiceUserUserChannel.prototype['unread_messages_count'] = undefined;

/**
 * @member {String} url
 */
IpMessagingV2ServiceUserUserChannel.prototype['url'] = undefined;

/**
 * @member {String} user_sid
 */
IpMessagingV2ServiceUserUserChannel.prototype['user_sid'] = undefined;






export default IpMessagingV2ServiceUserUserChannel;

