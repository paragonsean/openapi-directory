/*
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IpMessagingV2Service;
import org.openapitools.client.model.ListServiceResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpMessagingV2ServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpMessagingV2ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpMessagingV2ServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createService
     * @param friendlyName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceCall(String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceValidateBeforeCall(String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createService(Async)");
        }

        return createServiceCall(friendlyName, _callback);

    }

    /**
     * 
     * 
     * @param friendlyName  (required)
     * @return IpMessagingV2Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV2Service createService(String friendlyName) throws ApiException {
        ApiResponse<IpMessagingV2Service> localVarResp = createServiceWithHttpInfo(friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param friendlyName  (required)
     * @return ApiResponse&lt;IpMessagingV2Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV2Service> createServiceWithHttpInfo(String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, null);
        Type localVarReturnType = new TypeToken<IpMessagingV2Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param friendlyName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAsync(String friendlyName, final ApiCallback<IpMessagingV2Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV2Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteService
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteService(Async)");
        }

        return deleteServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteService(String sid) throws ApiException {
        deleteServiceWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchService
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchService(Async)");
        }

        return fetchServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return IpMessagingV2Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV2Service fetchService(String sid) throws ApiException {
        ApiResponse<IpMessagingV2Service> localVarResp = fetchServiceWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV2Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV2Service> fetchServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV2Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceAsync(String sid, final ApiCallback<IpMessagingV2Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV2Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listService
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listServiceCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceResponse listService(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceResponse> localVarResp = listServiceWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceResponse> listServiceWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateService
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param mediaCompatibilityMessage  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelSound  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelSound  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsLogEnabled  (optional)
     * @param notificationsNewMessageBadgeCountEnabled  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageSound  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelSound  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookRetryCount  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookRetryCount  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceCall(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, String mediaCompatibilityMessage, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelSound, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelSound, String notificationsInvitedToChannelTemplate, Boolean notificationsLogEnabled, Boolean notificationsNewMessageBadgeCountEnabled, Boolean notificationsNewMessageEnabled, String notificationsNewMessageSound, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelSound, String notificationsRemovedFromChannelTemplate, Integer postWebhookRetryCount, URI postWebhookUrl, Integer preWebhookRetryCount, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consumptionReportInterval != null) {
            localVarFormParams.put("ConsumptionReportInterval", consumptionReportInterval);
        }

        if (defaultChannelCreatorRoleSid != null) {
            localVarFormParams.put("DefaultChannelCreatorRoleSid", defaultChannelCreatorRoleSid);
        }

        if (defaultChannelRoleSid != null) {
            localVarFormParams.put("DefaultChannelRoleSid", defaultChannelRoleSid);
        }

        if (defaultServiceRoleSid != null) {
            localVarFormParams.put("DefaultServiceRoleSid", defaultServiceRoleSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (limitsChannelMembers != null) {
            localVarFormParams.put("Limits.ChannelMembers", limitsChannelMembers);
        }

        if (limitsUserChannels != null) {
            localVarFormParams.put("Limits.UserChannels", limitsUserChannels);
        }

        if (mediaCompatibilityMessage != null) {
            localVarFormParams.put("Media.CompatibilityMessage", mediaCompatibilityMessage);
        }

        if (notificationsAddedToChannelEnabled != null) {
            localVarFormParams.put("Notifications.AddedToChannel.Enabled", notificationsAddedToChannelEnabled);
        }

        if (notificationsAddedToChannelSound != null) {
            localVarFormParams.put("Notifications.AddedToChannel.Sound", notificationsAddedToChannelSound);
        }

        if (notificationsAddedToChannelTemplate != null) {
            localVarFormParams.put("Notifications.AddedToChannel.Template", notificationsAddedToChannelTemplate);
        }

        if (notificationsInvitedToChannelEnabled != null) {
            localVarFormParams.put("Notifications.InvitedToChannel.Enabled", notificationsInvitedToChannelEnabled);
        }

        if (notificationsInvitedToChannelSound != null) {
            localVarFormParams.put("Notifications.InvitedToChannel.Sound", notificationsInvitedToChannelSound);
        }

        if (notificationsInvitedToChannelTemplate != null) {
            localVarFormParams.put("Notifications.InvitedToChannel.Template", notificationsInvitedToChannelTemplate);
        }

        if (notificationsLogEnabled != null) {
            localVarFormParams.put("Notifications.LogEnabled", notificationsLogEnabled);
        }

        if (notificationsNewMessageBadgeCountEnabled != null) {
            localVarFormParams.put("Notifications.NewMessage.BadgeCountEnabled", notificationsNewMessageBadgeCountEnabled);
        }

        if (notificationsNewMessageEnabled != null) {
            localVarFormParams.put("Notifications.NewMessage.Enabled", notificationsNewMessageEnabled);
        }

        if (notificationsNewMessageSound != null) {
            localVarFormParams.put("Notifications.NewMessage.Sound", notificationsNewMessageSound);
        }

        if (notificationsNewMessageTemplate != null) {
            localVarFormParams.put("Notifications.NewMessage.Template", notificationsNewMessageTemplate);
        }

        if (notificationsRemovedFromChannelEnabled != null) {
            localVarFormParams.put("Notifications.RemovedFromChannel.Enabled", notificationsRemovedFromChannelEnabled);
        }

        if (notificationsRemovedFromChannelSound != null) {
            localVarFormParams.put("Notifications.RemovedFromChannel.Sound", notificationsRemovedFromChannelSound);
        }

        if (notificationsRemovedFromChannelTemplate != null) {
            localVarFormParams.put("Notifications.RemovedFromChannel.Template", notificationsRemovedFromChannelTemplate);
        }

        if (postWebhookRetryCount != null) {
            localVarFormParams.put("PostWebhookRetryCount", postWebhookRetryCount);
        }

        if (postWebhookUrl != null) {
            localVarFormParams.put("PostWebhookUrl", postWebhookUrl);
        }

        if (preWebhookRetryCount != null) {
            localVarFormParams.put("PreWebhookRetryCount", preWebhookRetryCount);
        }

        if (preWebhookUrl != null) {
            localVarFormParams.put("PreWebhookUrl", preWebhookUrl);
        }

        if (reachabilityEnabled != null) {
            localVarFormParams.put("ReachabilityEnabled", reachabilityEnabled);
        }

        if (readStatusEnabled != null) {
            localVarFormParams.put("ReadStatusEnabled", readStatusEnabled);
        }

        if (typingIndicatorTimeout != null) {
            localVarFormParams.put("TypingIndicatorTimeout", typingIndicatorTimeout);
        }

        if (webhookFilters != null) {
            localVarFormParams.put("WebhookFilters", webhookFilters);
        }

        if (webhookMethod != null) {
            localVarFormParams.put("WebhookMethod", webhookMethod);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceValidateBeforeCall(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, String mediaCompatibilityMessage, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelSound, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelSound, String notificationsInvitedToChannelTemplate, Boolean notificationsLogEnabled, Boolean notificationsNewMessageBadgeCountEnabled, Boolean notificationsNewMessageEnabled, String notificationsNewMessageSound, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelSound, String notificationsRemovedFromChannelTemplate, Integer postWebhookRetryCount, URI postWebhookUrl, Integer preWebhookRetryCount, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateService(Async)");
        }

        return updateServiceCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, mediaCompatibilityMessage, notificationsAddedToChannelEnabled, notificationsAddedToChannelSound, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelSound, notificationsInvitedToChannelTemplate, notificationsLogEnabled, notificationsNewMessageBadgeCountEnabled, notificationsNewMessageEnabled, notificationsNewMessageSound, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelSound, notificationsRemovedFromChannelTemplate, postWebhookRetryCount, postWebhookUrl, preWebhookRetryCount, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param mediaCompatibilityMessage  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelSound  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelSound  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsLogEnabled  (optional)
     * @param notificationsNewMessageBadgeCountEnabled  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageSound  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelSound  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookRetryCount  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookRetryCount  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @return IpMessagingV2Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV2Service updateService(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, String mediaCompatibilityMessage, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelSound, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelSound, String notificationsInvitedToChannelTemplate, Boolean notificationsLogEnabled, Boolean notificationsNewMessageBadgeCountEnabled, Boolean notificationsNewMessageEnabled, String notificationsNewMessageSound, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelSound, String notificationsRemovedFromChannelTemplate, Integer postWebhookRetryCount, URI postWebhookUrl, Integer preWebhookRetryCount, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod) throws ApiException {
        ApiResponse<IpMessagingV2Service> localVarResp = updateServiceWithHttpInfo(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, mediaCompatibilityMessage, notificationsAddedToChannelEnabled, notificationsAddedToChannelSound, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelSound, notificationsInvitedToChannelTemplate, notificationsLogEnabled, notificationsNewMessageBadgeCountEnabled, notificationsNewMessageEnabled, notificationsNewMessageSound, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelSound, notificationsRemovedFromChannelTemplate, postWebhookRetryCount, postWebhookUrl, preWebhookRetryCount, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param mediaCompatibilityMessage  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelSound  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelSound  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsLogEnabled  (optional)
     * @param notificationsNewMessageBadgeCountEnabled  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageSound  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelSound  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookRetryCount  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookRetryCount  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @return ApiResponse&lt;IpMessagingV2Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV2Service> updateServiceWithHttpInfo(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, String mediaCompatibilityMessage, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelSound, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelSound, String notificationsInvitedToChannelTemplate, Boolean notificationsLogEnabled, Boolean notificationsNewMessageBadgeCountEnabled, Boolean notificationsNewMessageEnabled, String notificationsNewMessageSound, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelSound, String notificationsRemovedFromChannelTemplate, Integer postWebhookRetryCount, URI postWebhookUrl, Integer preWebhookRetryCount, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod) throws ApiException {
        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, mediaCompatibilityMessage, notificationsAddedToChannelEnabled, notificationsAddedToChannelSound, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelSound, notificationsInvitedToChannelTemplate, notificationsLogEnabled, notificationsNewMessageBadgeCountEnabled, notificationsNewMessageEnabled, notificationsNewMessageSound, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelSound, notificationsRemovedFromChannelTemplate, postWebhookRetryCount, postWebhookUrl, preWebhookRetryCount, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, null);
        Type localVarReturnType = new TypeToken<IpMessagingV2Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param mediaCompatibilityMessage  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelSound  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelSound  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsLogEnabled  (optional)
     * @param notificationsNewMessageBadgeCountEnabled  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageSound  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelSound  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookRetryCount  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookRetryCount  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceAsync(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, String mediaCompatibilityMessage, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelSound, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelSound, String notificationsInvitedToChannelTemplate, Boolean notificationsLogEnabled, Boolean notificationsNewMessageBadgeCountEnabled, Boolean notificationsNewMessageEnabled, String notificationsNewMessageSound, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelSound, String notificationsRemovedFromChannelTemplate, Integer postWebhookRetryCount, URI postWebhookUrl, Integer preWebhookRetryCount, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, final ApiCallback<IpMessagingV2Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, mediaCompatibilityMessage, notificationsAddedToChannelEnabled, notificationsAddedToChannelSound, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelSound, notificationsInvitedToChannelTemplate, notificationsLogEnabled, notificationsNewMessageBadgeCountEnabled, notificationsNewMessageEnabled, notificationsNewMessageSound, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelSound, notificationsRemovedFromChannelTemplate, postWebhookRetryCount, postWebhookUrl, preWebhookRetryCount, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV2Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
