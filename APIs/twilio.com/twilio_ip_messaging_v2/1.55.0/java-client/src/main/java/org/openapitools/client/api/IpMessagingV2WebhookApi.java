/*
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChannelWebhookEnumMethod;
import org.openapitools.client.model.ChannelWebhookEnumType;
import org.openapitools.client.model.IpMessagingV2ServiceChannelChannelWebhook;
import org.openapitools.client.model.ListChannelWebhookResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpMessagingV2WebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpMessagingV2WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpMessagingV2WebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createChannelWebhook
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param type  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelWebhookCall(String serviceSid, String channelSid, ChannelWebhookEnumType type, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationFilters != null) {
            localVarFormParams.put("Configuration.Filters", configurationFilters);
        }

        if (configurationFlowSid != null) {
            localVarFormParams.put("Configuration.FlowSid", configurationFlowSid);
        }

        if (configurationMethod != null) {
            localVarFormParams.put("Configuration.Method", configurationMethod);
        }

        if (configurationRetryCount != null) {
            localVarFormParams.put("Configuration.RetryCount", configurationRetryCount);
        }

        if (configurationTriggers != null) {
            localVarFormParams.put("Configuration.Triggers", configurationTriggers);
        }

        if (configurationUrl != null) {
            localVarFormParams.put("Configuration.Url", configurationUrl);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelWebhookValidateBeforeCall(String serviceSid, String channelSid, ChannelWebhookEnumType type, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createChannelWebhook(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling createChannelWebhook(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createChannelWebhook(Async)");
        }

        return createChannelWebhookCall(serviceSid, channelSid, type, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param type  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @return IpMessagingV2ServiceChannelChannelWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV2ServiceChannelChannelWebhook createChannelWebhook(String serviceSid, String channelSid, ChannelWebhookEnumType type, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        ApiResponse<IpMessagingV2ServiceChannelChannelWebhook> localVarResp = createChannelWebhookWithHttpInfo(serviceSid, channelSid, type, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param type  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @return ApiResponse&lt;IpMessagingV2ServiceChannelChannelWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV2ServiceChannelChannelWebhook> createChannelWebhookWithHttpInfo(String serviceSid, String channelSid, ChannelWebhookEnumType type, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        okhttp3.Call localVarCall = createChannelWebhookValidateBeforeCall(serviceSid, channelSid, type, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl, null);
        Type localVarReturnType = new TypeToken<IpMessagingV2ServiceChannelChannelWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param type  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelWebhookAsync(String serviceSid, String channelSid, ChannelWebhookEnumType type, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl, final ApiCallback<IpMessagingV2ServiceChannelChannelWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelWebhookValidateBeforeCall(serviceSid, channelSid, type, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV2ServiceChannelChannelWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelWebhook
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelWebhookCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelWebhookValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteChannelWebhook(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling deleteChannelWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteChannelWebhook(Async)");
        }

        return deleteChannelWebhookCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelWebhook(String serviceSid, String channelSid, String sid) throws ApiException {
        deleteChannelWebhookWithHttpInfo(serviceSid, channelSid, sid);
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelWebhookWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelWebhookValidateBeforeCall(serviceSid, channelSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelWebhookAsync(String serviceSid, String channelSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelWebhookValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchChannelWebhook
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChannelWebhookCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchChannelWebhookValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchChannelWebhook(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling fetchChannelWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchChannelWebhook(Async)");
        }

        return fetchChannelWebhookCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return IpMessagingV2ServiceChannelChannelWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV2ServiceChannelChannelWebhook fetchChannelWebhook(String serviceSid, String channelSid, String sid) throws ApiException {
        ApiResponse<IpMessagingV2ServiceChannelChannelWebhook> localVarResp = fetchChannelWebhookWithHttpInfo(serviceSid, channelSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV2ServiceChannelChannelWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV2ServiceChannelChannelWebhook> fetchChannelWebhookWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchChannelWebhookValidateBeforeCall(serviceSid, channelSid, sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV2ServiceChannelChannelWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChannelWebhookAsync(String serviceSid, String channelSid, String sid, final ApiCallback<IpMessagingV2ServiceChannelChannelWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchChannelWebhookValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV2ServiceChannelChannelWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelWebhook
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelWebhookCall(String serviceSid, String channelSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelWebhookValidateBeforeCall(String serviceSid, String channelSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listChannelWebhook(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling listChannelWebhook(Async)");
        }

        return listChannelWebhookCall(serviceSid, channelSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListChannelWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelWebhookResponse listChannelWebhook(String serviceSid, String channelSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListChannelWebhookResponse> localVarResp = listChannelWebhookWithHttpInfo(serviceSid, channelSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListChannelWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelWebhookResponse> listChannelWebhookWithHttpInfo(String serviceSid, String channelSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listChannelWebhookValidateBeforeCall(serviceSid, channelSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListChannelWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelWebhookAsync(String serviceSid, String channelSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListChannelWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelWebhookValidateBeforeCall(serviceSid, channelSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListChannelWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannelWebhook
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelWebhookCall(String serviceSid, String channelSid, String sid, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationFilters != null) {
            localVarFormParams.put("Configuration.Filters", configurationFilters);
        }

        if (configurationFlowSid != null) {
            localVarFormParams.put("Configuration.FlowSid", configurationFlowSid);
        }

        if (configurationMethod != null) {
            localVarFormParams.put("Configuration.Method", configurationMethod);
        }

        if (configurationRetryCount != null) {
            localVarFormParams.put("Configuration.RetryCount", configurationRetryCount);
        }

        if (configurationTriggers != null) {
            localVarFormParams.put("Configuration.Triggers", configurationTriggers);
        }

        if (configurationUrl != null) {
            localVarFormParams.put("Configuration.Url", configurationUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelWebhookValidateBeforeCall(String serviceSid, String channelSid, String sid, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateChannelWebhook(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling updateChannelWebhook(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateChannelWebhook(Async)");
        }

        return updateChannelWebhookCall(serviceSid, channelSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @return IpMessagingV2ServiceChannelChannelWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV2ServiceChannelChannelWebhook updateChannelWebhook(String serviceSid, String channelSid, String sid, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        ApiResponse<IpMessagingV2ServiceChannelChannelWebhook> localVarResp = updateChannelWebhookWithHttpInfo(serviceSid, channelSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @return ApiResponse&lt;IpMessagingV2ServiceChannelChannelWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV2ServiceChannelChannelWebhook> updateChannelWebhookWithHttpInfo(String serviceSid, String channelSid, String sid, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl) throws ApiException {
        okhttp3.Call localVarCall = updateChannelWebhookValidateBeforeCall(serviceSid, channelSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl, null);
        Type localVarReturnType = new TypeToken<IpMessagingV2ServiceChannelChannelWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param configurationFilters  (optional)
     * @param configurationFlowSid  (optional)
     * @param configurationMethod  (optional)
     * @param configurationRetryCount  (optional)
     * @param configurationTriggers  (optional)
     * @param configurationUrl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelWebhookAsync(String serviceSid, String channelSid, String sid, List<String> configurationFilters, String configurationFlowSid, ChannelWebhookEnumMethod configurationMethod, Integer configurationRetryCount, List<String> configurationTriggers, String configurationUrl, final ApiCallback<IpMessagingV2ServiceChannelChannelWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelWebhookValidateBeforeCall(serviceSid, channelSid, sid, configurationFilters, configurationFlowSid, configurationMethod, configurationRetryCount, configurationTriggers, configurationUrl, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV2ServiceChannelChannelWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
