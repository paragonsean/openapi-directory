/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpMessagingV2MemberApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIIpMessagingV2MemberApi::OAIIpMessagingV2MemberApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIIpMessagingV2MemberApi::~OAIIpMessagingV2MemberApi() {
}

void OAIIpMessagingV2MemberApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://ip-messaging.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("https://ip-messaging.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createMember", serverConf);
    _serverIndices.insert("createMember", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://ip-messaging.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteMember", serverConf);
    _serverIndices.insert("deleteMember", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://ip-messaging.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fetchMember", serverConf);
    _serverIndices.insert("fetchMember", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://ip-messaging.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("listMember", serverConf);
    _serverIndices.insert("listMember", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("https://ip-messaging.twilio.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("updateMember", serverConf);
    _serverIndices.insert("updateMember", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIIpMessagingV2MemberApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIIpMessagingV2MemberApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIIpMessagingV2MemberApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIIpMessagingV2MemberApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIIpMessagingV2MemberApi::setUsername(const QString &username) {
    _username = username;
}

void OAIIpMessagingV2MemberApi::setPassword(const QString &password) {
    _password = password;
}


void OAIIpMessagingV2MemberApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIIpMessagingV2MemberApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIIpMessagingV2MemberApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIIpMessagingV2MemberApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIpMessagingV2MemberApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIpMessagingV2MemberApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIIpMessagingV2MemberApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIIpMessagingV2MemberApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIIpMessagingV2MemberApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIIpMessagingV2MemberApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIIpMessagingV2MemberApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIIpMessagingV2MemberApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIIpMessagingV2MemberApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIIpMessagingV2MemberApi::createMember(const QString &service_sid, const QString &channel_sid, const QString &identity, const ::OpenAPI::OptionalParam<OAIMember_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<qint32> &last_consumed_message_index, const ::OpenAPI::OptionalParam<QDateTime> &last_consumption_timestamp, const ::OpenAPI::OptionalParam<QString> &role_sid) {
    QString fullPath = QString(_serverConfigs["createMember"][_serverIndices.value("createMember")].URL()+"/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString channel_sidPathParam("{");
        channel_sidPathParam.append("ChannelSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChannelSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChannelSid"+pathSuffix : pathPrefix;
        fullPath.replace(channel_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    
    {
        input.add_var("Identity", ::OpenAPI::toStringValue(identity));
    }
    if (last_consumed_message_index.hasValue())
    {
        input.add_var("LastConsumedMessageIndex", ::OpenAPI::toStringValue(last_consumed_message_index.value()));
    }
    if (last_consumption_timestamp.hasValue())
    {
        input.add_var("LastConsumptionTimestamp", ::OpenAPI::toStringValue(last_consumption_timestamp.value()));
    }
    if (role_sid.hasValue())
    {
        input.add_var("RoleSid", ::OpenAPI::toStringValue(role_sid.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIpMessagingV2MemberApi::createMemberCallback);
    connect(this, &OAIIpMessagingV2MemberApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIpMessagingV2MemberApi::createMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIIp_messaging_v2_service_channel_member output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createMemberSignal(output);
        Q_EMIT createMemberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createMemberSignalE(output, error_type, error_str);
        Q_EMIT createMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createMemberSignalError(output, error_type, error_str);
        Q_EMIT createMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIpMessagingV2MemberApi::deleteMember(const QString &service_sid, const QString &channel_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIMember_enum_webhook_enabled_type> &x_twilio_webhook_enabled) {
    QString fullPath = QString(_serverConfigs["deleteMember"][_serverIndices.value("deleteMember")].URL()+"/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString channel_sidPathParam("{");
        channel_sidPathParam.append("ChannelSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChannelSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChannelSid"+pathSuffix : pathPrefix;
        fullPath.replace(channel_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIpMessagingV2MemberApi::deleteMemberCallback);
    connect(this, &OAIIpMessagingV2MemberApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIpMessagingV2MemberApi::deleteMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteMemberSignal();
        Q_EMIT deleteMemberSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteMemberSignalE(error_type, error_str);
        Q_EMIT deleteMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteMemberSignalError(error_type, error_str);
        Q_EMIT deleteMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIpMessagingV2MemberApi::fetchMember(const QString &service_sid, const QString &channel_sid, const QString &sid) {
    QString fullPath = QString(_serverConfigs["fetchMember"][_serverIndices.value("fetchMember")].URL()+"/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString channel_sidPathParam("{");
        channel_sidPathParam.append("ChannelSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChannelSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChannelSid"+pathSuffix : pathPrefix;
        fullPath.replace(channel_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIpMessagingV2MemberApi::fetchMemberCallback);
    connect(this, &OAIIpMessagingV2MemberApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIpMessagingV2MemberApi::fetchMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIIp_messaging_v2_service_channel_member output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fetchMemberSignal(output);
        Q_EMIT fetchMemberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fetchMemberSignalE(output, error_type, error_str);
        Q_EMIT fetchMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fetchMemberSignalError(output, error_type, error_str);
        Q_EMIT fetchMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIpMessagingV2MemberApi::listMember(const QString &service_sid, const QString &channel_sid, const ::OpenAPI::OptionalParam<QList<QString>> &identity, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &page_token) {
    QString fullPath = QString(_serverConfigs["listMember"][_serverIndices.value("listMember")].URL()+"/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString channel_sidPathParam("{");
        channel_sidPathParam.append("ChannelSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChannelSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChannelSid"+pathSuffix : pathPrefix;
        fullPath.replace(channel_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_sid)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (identity.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Identity", true);
        if (identity.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                for (QString t : identity.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("Identity=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("Identity").append(querySuffix);
                qint32 count = 0;
                for (QString t : identity.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("Identity").append(querySuffix);
                qint32 count = 0;
                for (QString t : identity.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("Identity").append(querySuffix);
                qint32 count = 0;
                for (QString t : identity.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("Identity").append(querySuffix);
                qint32 count = 0;
                for (QString t : identity.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("Identity").append(querySuffix);
                qint32 count = 0;
                for (QString t : identity.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "Page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("Page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (page_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "PageToken", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("PageToken")).append(querySuffix).append(QUrl::toPercentEncoding(page_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIpMessagingV2MemberApi::listMemberCallback);
    connect(this, &OAIIpMessagingV2MemberApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIpMessagingV2MemberApi::listMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListMemberResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listMemberSignal(output);
        Q_EMIT listMemberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listMemberSignalE(output, error_type, error_str);
        Q_EMIT listMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listMemberSignalError(output, error_type, error_str);
        Q_EMIT listMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIpMessagingV2MemberApi::updateMember(const QString &service_sid, const QString &channel_sid, const QString &sid, const ::OpenAPI::OptionalParam<OAIMember_enum_webhook_enabled_type> &x_twilio_webhook_enabled, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QDateTime> &date_created, const ::OpenAPI::OptionalParam<QDateTime> &date_updated, const ::OpenAPI::OptionalParam<qint32> &last_consumed_message_index, const ::OpenAPI::OptionalParam<QDateTime> &last_consumption_timestamp, const ::OpenAPI::OptionalParam<QString> &role_sid) {
    QString fullPath = QString(_serverConfigs["updateMember"][_serverIndices.value("updateMember")].URL()+"/v2/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_sidPathParam("{");
        service_sidPathParam.append("ServiceSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ServiceSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ServiceSid"+pathSuffix : pathPrefix;
        fullPath.replace(service_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_sid)));
    }
    
    {
        QString channel_sidPathParam("{");
        channel_sidPathParam.append("ChannelSid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ChannelSid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ChannelSid"+pathSuffix : pathPrefix;
        fullPath.replace(channel_sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(channel_sid)));
    }
    
    {
        QString sidPathParam("{");
        sidPathParam.append("Sid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Sid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Sid"+pathSuffix : pathPrefix;
        fullPath.replace(sidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(sid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (attributes.hasValue())
    {
        input.add_var("Attributes", ::OpenAPI::toStringValue(attributes.value()));
    }
    if (date_created.hasValue())
    {
        input.add_var("DateCreated", ::OpenAPI::toStringValue(date_created.value()));
    }
    if (date_updated.hasValue())
    {
        input.add_var("DateUpdated", ::OpenAPI::toStringValue(date_updated.value()));
    }
    if (last_consumed_message_index.hasValue())
    {
        input.add_var("LastConsumedMessageIndex", ::OpenAPI::toStringValue(last_consumed_message_index.value()));
    }
    if (last_consumption_timestamp.hasValue())
    {
        input.add_var("LastConsumptionTimestamp", ::OpenAPI::toStringValue(last_consumption_timestamp.value()));
    }
    if (role_sid.hasValue())
    {
        input.add_var("RoleSid", ::OpenAPI::toStringValue(role_sid.value()));
    }

    if (x_twilio_webhook_enabled.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()).isEmpty()) {
            input.headers.insert("X-Twilio-Webhook-Enabled", ::OpenAPI::toStringValue(x_twilio_webhook_enabled.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIpMessagingV2MemberApi::updateMemberCallback);
    connect(this, &OAIIpMessagingV2MemberApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIpMessagingV2MemberApi::updateMemberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIIp_messaging_v2_service_channel_member output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateMemberSignal(output);
        Q_EMIT updateMemberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateMemberSignalE(output, error_type, error_str);
        Q_EMIT updateMemberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateMemberSignalError(output, error_type, error_str);
        Q_EMIT updateMemberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIpMessagingV2MemberApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
