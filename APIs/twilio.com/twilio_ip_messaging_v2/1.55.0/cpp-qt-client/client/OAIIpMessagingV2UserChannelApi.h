/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIpMessagingV2UserChannelApi_H
#define OAI_OAIIpMessagingV2UserChannelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIp_messaging_v2_service_user_user_channel.h"
#include "OAIListUserChannelResponse.h"
#include "OAIUser_channel_enum_notification_level.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIpMessagingV2UserChannelApi : public QObject {
    Q_OBJECT

public:
    OAIIpMessagingV2UserChannelApi(const int timeOut = 0);
    ~OAIIpMessagingV2UserChannelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  channel_sid QString [required]
    */
    virtual void deleteUserChannel(const QString &service_sid, const QString &user_sid, const QString &channel_sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  channel_sid QString [required]
    */
    virtual void fetchUserChannel(const QString &service_sid, const QString &user_sid, const QString &channel_sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listUserChannel(const QString &service_sid, const QString &user_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  user_sid QString [required]
    * @param[in]  channel_sid QString [required]
    * @param[in]  last_consumed_message_index qint32 [optional]
    * @param[in]  last_consumption_timestamp QDateTime [optional]
    * @param[in]  notification_level OAIUser_channel_enum_notification_level [optional]
    */
    virtual void updateUserChannel(const QString &service_sid, const QString &user_sid, const QString &channel_sid, const ::OpenAPI::OptionalParam<qint32> &last_consumed_message_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &last_consumption_timestamp = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<OAIUser_channel_enum_notification_level> &notification_level = ::OpenAPI::OptionalParam<OAIUser_channel_enum_notification_level>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUserChannelCallback(OAIHttpRequestWorker *worker);
    void fetchUserChannelCallback(OAIHttpRequestWorker *worker);
    void listUserChannelCallback(OAIHttpRequestWorker *worker);
    void updateUserChannelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUserChannelSignal();
    void fetchUserChannelSignal(OAIIp_messaging_v2_service_user_user_channel summary);
    void listUserChannelSignal(OAIListUserChannelResponse summary);
    void updateUserChannelSignal(OAIIp_messaging_v2_service_user_user_channel summary);


    void deleteUserChannelSignalFull(OAIHttpRequestWorker *worker);
    void fetchUserChannelSignalFull(OAIHttpRequestWorker *worker, OAIIp_messaging_v2_service_user_user_channel summary);
    void listUserChannelSignalFull(OAIHttpRequestWorker *worker, OAIListUserChannelResponse summary);
    void updateUserChannelSignalFull(OAIHttpRequestWorker *worker, OAIIp_messaging_v2_service_user_user_channel summary);

    Q_DECL_DEPRECATED_X("Use deleteUserChannelSignalError() instead")
    void deleteUserChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUserChannelSignalError() instead")
    void fetchUserChannelSignalE(OAIIp_messaging_v2_service_user_user_channel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUserChannelSignalError(OAIIp_messaging_v2_service_user_user_channel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserChannelSignalError() instead")
    void listUserChannelSignalE(OAIListUserChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserChannelSignalError(OAIListUserChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserChannelSignalError() instead")
    void updateUserChannelSignalE(OAIIp_messaging_v2_service_user_user_channel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserChannelSignalError(OAIIp_messaging_v2_service_user_user_channel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUserChannelSignalErrorFull() instead")
    void deleteUserChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchUserChannelSignalErrorFull() instead")
    void fetchUserChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchUserChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserChannelSignalErrorFull() instead")
    void listUserChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserChannelSignalErrorFull() instead")
    void updateUserChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
