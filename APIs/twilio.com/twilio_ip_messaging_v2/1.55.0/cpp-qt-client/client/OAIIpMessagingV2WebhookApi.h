/**
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIpMessagingV2WebhookApi_H
#define OAI_OAIIpMessagingV2WebhookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChannel_webhook_enum_method.h"
#include "OAIChannel_webhook_enum_type.h"
#include "OAIIp_messaging_v2_service_channel_channel_webhook.h"
#include "OAIListChannelWebhookResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIpMessagingV2WebhookApi : public QObject {
    Q_OBJECT

public:
    OAIIpMessagingV2WebhookApi(const int timeOut = 0);
    ~OAIIpMessagingV2WebhookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  channel_sid QString [required]
    * @param[in]  type OAIChannel_webhook_enum_type [required]
    * @param[in]  configuration_filters QList<QString> [optional]
    * @param[in]  configuration_flow_sid QString [optional]
    * @param[in]  configuration_method OAIChannel_webhook_enum_method [optional]
    * @param[in]  configuration_retry_count qint32 [optional]
    * @param[in]  configuration_triggers QList<QString> [optional]
    * @param[in]  configuration_url QString [optional]
    */
    virtual void createChannelWebhook(const QString &service_sid, const QString &channel_sid, const OAIChannel_webhook_enum_type &type, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChannel_webhook_enum_method> &configuration_method = ::OpenAPI::OptionalParam<OAIChannel_webhook_enum_method>(), const ::OpenAPI::OptionalParam<qint32> &configuration_retry_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  channel_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteChannelWebhook(const QString &service_sid, const QString &channel_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  channel_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchChannelWebhook(const QString &service_sid, const QString &channel_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  channel_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listChannelWebhook(const QString &service_sid, const QString &channel_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  channel_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  configuration_filters QList<QString> [optional]
    * @param[in]  configuration_flow_sid QString [optional]
    * @param[in]  configuration_method OAIChannel_webhook_enum_method [optional]
    * @param[in]  configuration_retry_count qint32 [optional]
    * @param[in]  configuration_triggers QList<QString> [optional]
    * @param[in]  configuration_url QString [optional]
    */
    virtual void updateChannelWebhook(const QString &service_sid, const QString &channel_sid, const QString &sid, const ::OpenAPI::OptionalParam<QList<QString>> &configuration_filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_flow_sid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChannel_webhook_enum_method> &configuration_method = ::OpenAPI::OptionalParam<OAIChannel_webhook_enum_method>(), const ::OpenAPI::OptionalParam<qint32> &configuration_retry_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &configuration_triggers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &configuration_url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createChannelWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteChannelWebhookCallback(OAIHttpRequestWorker *worker);
    void fetchChannelWebhookCallback(OAIHttpRequestWorker *worker);
    void listChannelWebhookCallback(OAIHttpRequestWorker *worker);
    void updateChannelWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createChannelWebhookSignal(OAIIp_messaging_v2_service_channel_channel_webhook summary);
    void deleteChannelWebhookSignal();
    void fetchChannelWebhookSignal(OAIIp_messaging_v2_service_channel_channel_webhook summary);
    void listChannelWebhookSignal(OAIListChannelWebhookResponse summary);
    void updateChannelWebhookSignal(OAIIp_messaging_v2_service_channel_channel_webhook summary);


    void createChannelWebhookSignalFull(OAIHttpRequestWorker *worker, OAIIp_messaging_v2_service_channel_channel_webhook summary);
    void deleteChannelWebhookSignalFull(OAIHttpRequestWorker *worker);
    void fetchChannelWebhookSignalFull(OAIHttpRequestWorker *worker, OAIIp_messaging_v2_service_channel_channel_webhook summary);
    void listChannelWebhookSignalFull(OAIHttpRequestWorker *worker, OAIListChannelWebhookResponse summary);
    void updateChannelWebhookSignalFull(OAIHttpRequestWorker *worker, OAIIp_messaging_v2_service_channel_channel_webhook summary);

    Q_DECL_DEPRECATED_X("Use createChannelWebhookSignalError() instead")
    void createChannelWebhookSignalE(OAIIp_messaging_v2_service_channel_channel_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelWebhookSignalError(OAIIp_messaging_v2_service_channel_channel_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelWebhookSignalError() instead")
    void deleteChannelWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchChannelWebhookSignalError() instead")
    void fetchChannelWebhookSignalE(OAIIp_messaging_v2_service_channel_channel_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchChannelWebhookSignalError(OAIIp_messaging_v2_service_channel_channel_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelWebhookSignalError() instead")
    void listChannelWebhookSignalE(OAIListChannelWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelWebhookSignalError(OAIListChannelWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelWebhookSignalError() instead")
    void updateChannelWebhookSignalE(OAIIp_messaging_v2_service_channel_channel_webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelWebhookSignalError(OAIIp_messaging_v2_service_channel_channel_webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createChannelWebhookSignalErrorFull() instead")
    void createChannelWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelWebhookSignalErrorFull() instead")
    void deleteChannelWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchChannelWebhookSignalErrorFull() instead")
    void fetchChannelWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchChannelWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelWebhookSignalErrorFull() instead")
    void listChannelWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelWebhookSignalErrorFull() instead")
    void updateChannelWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
