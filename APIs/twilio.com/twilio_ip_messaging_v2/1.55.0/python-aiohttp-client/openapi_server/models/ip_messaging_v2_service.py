# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class IpMessagingV2Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, consumption_report_interval: int=None, date_created: datetime=None, date_updated: datetime=None, default_channel_creator_role_sid: str=None, default_channel_role_sid: str=None, default_service_role_sid: str=None, friendly_name: str=None, limits: object=None, links: object=None, media: object=None, notifications: object=None, post_webhook_retry_count: int=None, post_webhook_url: str=None, pre_webhook_retry_count: int=None, pre_webhook_url: str=None, reachability_enabled: bool=None, read_status_enabled: bool=None, sid: str=None, typing_indicator_timeout: int=None, url: str=None, webhook_filters: List[str]=None, webhook_method: str=None):
        """IpMessagingV2Service - a model defined in OpenAPI

        :param account_sid: The account_sid of this IpMessagingV2Service.
        :param consumption_report_interval: The consumption_report_interval of this IpMessagingV2Service.
        :param date_created: The date_created of this IpMessagingV2Service.
        :param date_updated: The date_updated of this IpMessagingV2Service.
        :param default_channel_creator_role_sid: The default_channel_creator_role_sid of this IpMessagingV2Service.
        :param default_channel_role_sid: The default_channel_role_sid of this IpMessagingV2Service.
        :param default_service_role_sid: The default_service_role_sid of this IpMessagingV2Service.
        :param friendly_name: The friendly_name of this IpMessagingV2Service.
        :param limits: The limits of this IpMessagingV2Service.
        :param links: The links of this IpMessagingV2Service.
        :param media: The media of this IpMessagingV2Service.
        :param notifications: The notifications of this IpMessagingV2Service.
        :param post_webhook_retry_count: The post_webhook_retry_count of this IpMessagingV2Service.
        :param post_webhook_url: The post_webhook_url of this IpMessagingV2Service.
        :param pre_webhook_retry_count: The pre_webhook_retry_count of this IpMessagingV2Service.
        :param pre_webhook_url: The pre_webhook_url of this IpMessagingV2Service.
        :param reachability_enabled: The reachability_enabled of this IpMessagingV2Service.
        :param read_status_enabled: The read_status_enabled of this IpMessagingV2Service.
        :param sid: The sid of this IpMessagingV2Service.
        :param typing_indicator_timeout: The typing_indicator_timeout of this IpMessagingV2Service.
        :param url: The url of this IpMessagingV2Service.
        :param webhook_filters: The webhook_filters of this IpMessagingV2Service.
        :param webhook_method: The webhook_method of this IpMessagingV2Service.
        """
        self.openapi_types = {
            'account_sid': str,
            'consumption_report_interval': int,
            'date_created': datetime,
            'date_updated': datetime,
            'default_channel_creator_role_sid': str,
            'default_channel_role_sid': str,
            'default_service_role_sid': str,
            'friendly_name': str,
            'limits': object,
            'links': object,
            'media': object,
            'notifications': object,
            'post_webhook_retry_count': int,
            'post_webhook_url': str,
            'pre_webhook_retry_count': int,
            'pre_webhook_url': str,
            'reachability_enabled': bool,
            'read_status_enabled': bool,
            'sid': str,
            'typing_indicator_timeout': int,
            'url': str,
            'webhook_filters': List[str],
            'webhook_method': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'consumption_report_interval': 'consumption_report_interval',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'default_channel_creator_role_sid': 'default_channel_creator_role_sid',
            'default_channel_role_sid': 'default_channel_role_sid',
            'default_service_role_sid': 'default_service_role_sid',
            'friendly_name': 'friendly_name',
            'limits': 'limits',
            'links': 'links',
            'media': 'media',
            'notifications': 'notifications',
            'post_webhook_retry_count': 'post_webhook_retry_count',
            'post_webhook_url': 'post_webhook_url',
            'pre_webhook_retry_count': 'pre_webhook_retry_count',
            'pre_webhook_url': 'pre_webhook_url',
            'reachability_enabled': 'reachability_enabled',
            'read_status_enabled': 'read_status_enabled',
            'sid': 'sid',
            'typing_indicator_timeout': 'typing_indicator_timeout',
            'url': 'url',
            'webhook_filters': 'webhook_filters',
            'webhook_method': 'webhook_method'
        }

        self._account_sid = account_sid
        self._consumption_report_interval = consumption_report_interval
        self._date_created = date_created
        self._date_updated = date_updated
        self._default_channel_creator_role_sid = default_channel_creator_role_sid
        self._default_channel_role_sid = default_channel_role_sid
        self._default_service_role_sid = default_service_role_sid
        self._friendly_name = friendly_name
        self._limits = limits
        self._links = links
        self._media = media
        self._notifications = notifications
        self._post_webhook_retry_count = post_webhook_retry_count
        self._post_webhook_url = post_webhook_url
        self._pre_webhook_retry_count = pre_webhook_retry_count
        self._pre_webhook_url = pre_webhook_url
        self._reachability_enabled = reachability_enabled
        self._read_status_enabled = read_status_enabled
        self._sid = sid
        self._typing_indicator_timeout = typing_indicator_timeout
        self._url = url
        self._webhook_filters = webhook_filters
        self._webhook_method = webhook_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpMessagingV2Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ip_messaging.v2.service of this IpMessagingV2Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this IpMessagingV2Service.


        :return: The account_sid of this IpMessagingV2Service.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this IpMessagingV2Service.


        :param account_sid: The account_sid of this IpMessagingV2Service.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def consumption_report_interval(self):
        """Gets the consumption_report_interval of this IpMessagingV2Service.


        :return: The consumption_report_interval of this IpMessagingV2Service.
        :rtype: int
        """
        return self._consumption_report_interval

    @consumption_report_interval.setter
    def consumption_report_interval(self, consumption_report_interval):
        """Sets the consumption_report_interval of this IpMessagingV2Service.


        :param consumption_report_interval: The consumption_report_interval of this IpMessagingV2Service.
        :type consumption_report_interval: int
        """

        self._consumption_report_interval = consumption_report_interval

    @property
    def date_created(self):
        """Gets the date_created of this IpMessagingV2Service.


        :return: The date_created of this IpMessagingV2Service.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IpMessagingV2Service.


        :param date_created: The date_created of this IpMessagingV2Service.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this IpMessagingV2Service.


        :return: The date_updated of this IpMessagingV2Service.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this IpMessagingV2Service.


        :param date_updated: The date_updated of this IpMessagingV2Service.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def default_channel_creator_role_sid(self):
        """Gets the default_channel_creator_role_sid of this IpMessagingV2Service.


        :return: The default_channel_creator_role_sid of this IpMessagingV2Service.
        :rtype: str
        """
        return self._default_channel_creator_role_sid

    @default_channel_creator_role_sid.setter
    def default_channel_creator_role_sid(self, default_channel_creator_role_sid):
        """Sets the default_channel_creator_role_sid of this IpMessagingV2Service.


        :param default_channel_creator_role_sid: The default_channel_creator_role_sid of this IpMessagingV2Service.
        :type default_channel_creator_role_sid: str
        """
        if default_channel_creator_role_sid is not None and len(default_channel_creator_role_sid) > 34:
            raise ValueError("Invalid value for `default_channel_creator_role_sid`, length must be less than or equal to `34`")
        if default_channel_creator_role_sid is not None and len(default_channel_creator_role_sid) < 34:
            raise ValueError("Invalid value for `default_channel_creator_role_sid`, length must be greater than or equal to `34`")
        if default_channel_creator_role_sid is not None and not re.search(r'^RL[0-9a-fA-F]{32}$', default_channel_creator_role_sid):
            raise ValueError("Invalid value for `default_channel_creator_role_sid`, must be a follow pattern or equal to `/^RL[0-9a-fA-F]{32}$/`")

        self._default_channel_creator_role_sid = default_channel_creator_role_sid

    @property
    def default_channel_role_sid(self):
        """Gets the default_channel_role_sid of this IpMessagingV2Service.


        :return: The default_channel_role_sid of this IpMessagingV2Service.
        :rtype: str
        """
        return self._default_channel_role_sid

    @default_channel_role_sid.setter
    def default_channel_role_sid(self, default_channel_role_sid):
        """Sets the default_channel_role_sid of this IpMessagingV2Service.


        :param default_channel_role_sid: The default_channel_role_sid of this IpMessagingV2Service.
        :type default_channel_role_sid: str
        """
        if default_channel_role_sid is not None and len(default_channel_role_sid) > 34:
            raise ValueError("Invalid value for `default_channel_role_sid`, length must be less than or equal to `34`")
        if default_channel_role_sid is not None and len(default_channel_role_sid) < 34:
            raise ValueError("Invalid value for `default_channel_role_sid`, length must be greater than or equal to `34`")
        if default_channel_role_sid is not None and not re.search(r'^RL[0-9a-fA-F]{32}$', default_channel_role_sid):
            raise ValueError("Invalid value for `default_channel_role_sid`, must be a follow pattern or equal to `/^RL[0-9a-fA-F]{32}$/`")

        self._default_channel_role_sid = default_channel_role_sid

    @property
    def default_service_role_sid(self):
        """Gets the default_service_role_sid of this IpMessagingV2Service.


        :return: The default_service_role_sid of this IpMessagingV2Service.
        :rtype: str
        """
        return self._default_service_role_sid

    @default_service_role_sid.setter
    def default_service_role_sid(self, default_service_role_sid):
        """Sets the default_service_role_sid of this IpMessagingV2Service.


        :param default_service_role_sid: The default_service_role_sid of this IpMessagingV2Service.
        :type default_service_role_sid: str
        """
        if default_service_role_sid is not None and len(default_service_role_sid) > 34:
            raise ValueError("Invalid value for `default_service_role_sid`, length must be less than or equal to `34`")
        if default_service_role_sid is not None and len(default_service_role_sid) < 34:
            raise ValueError("Invalid value for `default_service_role_sid`, length must be greater than or equal to `34`")
        if default_service_role_sid is not None and not re.search(r'^RL[0-9a-fA-F]{32}$', default_service_role_sid):
            raise ValueError("Invalid value for `default_service_role_sid`, must be a follow pattern or equal to `/^RL[0-9a-fA-F]{32}$/`")

        self._default_service_role_sid = default_service_role_sid

    @property
    def friendly_name(self):
        """Gets the friendly_name of this IpMessagingV2Service.


        :return: The friendly_name of this IpMessagingV2Service.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this IpMessagingV2Service.


        :param friendly_name: The friendly_name of this IpMessagingV2Service.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def limits(self):
        """Gets the limits of this IpMessagingV2Service.


        :return: The limits of this IpMessagingV2Service.
        :rtype: object
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this IpMessagingV2Service.


        :param limits: The limits of this IpMessagingV2Service.
        :type limits: object
        """

        self._limits = limits

    @property
    def links(self):
        """Gets the links of this IpMessagingV2Service.


        :return: The links of this IpMessagingV2Service.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IpMessagingV2Service.


        :param links: The links of this IpMessagingV2Service.
        :type links: object
        """

        self._links = links

    @property
    def media(self):
        """Gets the media of this IpMessagingV2Service.


        :return: The media of this IpMessagingV2Service.
        :rtype: object
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this IpMessagingV2Service.


        :param media: The media of this IpMessagingV2Service.
        :type media: object
        """

        self._media = media

    @property
    def notifications(self):
        """Gets the notifications of this IpMessagingV2Service.


        :return: The notifications of this IpMessagingV2Service.
        :rtype: object
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this IpMessagingV2Service.


        :param notifications: The notifications of this IpMessagingV2Service.
        :type notifications: object
        """

        self._notifications = notifications

    @property
    def post_webhook_retry_count(self):
        """Gets the post_webhook_retry_count of this IpMessagingV2Service.


        :return: The post_webhook_retry_count of this IpMessagingV2Service.
        :rtype: int
        """
        return self._post_webhook_retry_count

    @post_webhook_retry_count.setter
    def post_webhook_retry_count(self, post_webhook_retry_count):
        """Sets the post_webhook_retry_count of this IpMessagingV2Service.


        :param post_webhook_retry_count: The post_webhook_retry_count of this IpMessagingV2Service.
        :type post_webhook_retry_count: int
        """

        self._post_webhook_retry_count = post_webhook_retry_count

    @property
    def post_webhook_url(self):
        """Gets the post_webhook_url of this IpMessagingV2Service.


        :return: The post_webhook_url of this IpMessagingV2Service.
        :rtype: str
        """
        return self._post_webhook_url

    @post_webhook_url.setter
    def post_webhook_url(self, post_webhook_url):
        """Sets the post_webhook_url of this IpMessagingV2Service.


        :param post_webhook_url: The post_webhook_url of this IpMessagingV2Service.
        :type post_webhook_url: str
        """

        self._post_webhook_url = post_webhook_url

    @property
    def pre_webhook_retry_count(self):
        """Gets the pre_webhook_retry_count of this IpMessagingV2Service.


        :return: The pre_webhook_retry_count of this IpMessagingV2Service.
        :rtype: int
        """
        return self._pre_webhook_retry_count

    @pre_webhook_retry_count.setter
    def pre_webhook_retry_count(self, pre_webhook_retry_count):
        """Sets the pre_webhook_retry_count of this IpMessagingV2Service.


        :param pre_webhook_retry_count: The pre_webhook_retry_count of this IpMessagingV2Service.
        :type pre_webhook_retry_count: int
        """

        self._pre_webhook_retry_count = pre_webhook_retry_count

    @property
    def pre_webhook_url(self):
        """Gets the pre_webhook_url of this IpMessagingV2Service.


        :return: The pre_webhook_url of this IpMessagingV2Service.
        :rtype: str
        """
        return self._pre_webhook_url

    @pre_webhook_url.setter
    def pre_webhook_url(self, pre_webhook_url):
        """Sets the pre_webhook_url of this IpMessagingV2Service.


        :param pre_webhook_url: The pre_webhook_url of this IpMessagingV2Service.
        :type pre_webhook_url: str
        """

        self._pre_webhook_url = pre_webhook_url

    @property
    def reachability_enabled(self):
        """Gets the reachability_enabled of this IpMessagingV2Service.


        :return: The reachability_enabled of this IpMessagingV2Service.
        :rtype: bool
        """
        return self._reachability_enabled

    @reachability_enabled.setter
    def reachability_enabled(self, reachability_enabled):
        """Sets the reachability_enabled of this IpMessagingV2Service.


        :param reachability_enabled: The reachability_enabled of this IpMessagingV2Service.
        :type reachability_enabled: bool
        """

        self._reachability_enabled = reachability_enabled

    @property
    def read_status_enabled(self):
        """Gets the read_status_enabled of this IpMessagingV2Service.


        :return: The read_status_enabled of this IpMessagingV2Service.
        :rtype: bool
        """
        return self._read_status_enabled

    @read_status_enabled.setter
    def read_status_enabled(self, read_status_enabled):
        """Sets the read_status_enabled of this IpMessagingV2Service.


        :param read_status_enabled: The read_status_enabled of this IpMessagingV2Service.
        :type read_status_enabled: bool
        """

        self._read_status_enabled = read_status_enabled

    @property
    def sid(self):
        """Gets the sid of this IpMessagingV2Service.


        :return: The sid of this IpMessagingV2Service.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this IpMessagingV2Service.


        :param sid: The sid of this IpMessagingV2Service.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def typing_indicator_timeout(self):
        """Gets the typing_indicator_timeout of this IpMessagingV2Service.


        :return: The typing_indicator_timeout of this IpMessagingV2Service.
        :rtype: int
        """
        return self._typing_indicator_timeout

    @typing_indicator_timeout.setter
    def typing_indicator_timeout(self, typing_indicator_timeout):
        """Sets the typing_indicator_timeout of this IpMessagingV2Service.


        :param typing_indicator_timeout: The typing_indicator_timeout of this IpMessagingV2Service.
        :type typing_indicator_timeout: int
        """

        self._typing_indicator_timeout = typing_indicator_timeout

    @property
    def url(self):
        """Gets the url of this IpMessagingV2Service.


        :return: The url of this IpMessagingV2Service.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IpMessagingV2Service.


        :param url: The url of this IpMessagingV2Service.
        :type url: str
        """

        self._url = url

    @property
    def webhook_filters(self):
        """Gets the webhook_filters of this IpMessagingV2Service.


        :return: The webhook_filters of this IpMessagingV2Service.
        :rtype: List[str]
        """
        return self._webhook_filters

    @webhook_filters.setter
    def webhook_filters(self, webhook_filters):
        """Sets the webhook_filters of this IpMessagingV2Service.


        :param webhook_filters: The webhook_filters of this IpMessagingV2Service.
        :type webhook_filters: List[str]
        """

        self._webhook_filters = webhook_filters

    @property
    def webhook_method(self):
        """Gets the webhook_method of this IpMessagingV2Service.


        :return: The webhook_method of this IpMessagingV2Service.
        :rtype: str
        """
        return self._webhook_method

    @webhook_method.setter
    def webhook_method(self, webhook_method):
        """Sets the webhook_method of this IpMessagingV2Service.


        :param webhook_method: The webhook_method of this IpMessagingV2Service.
        :type webhook_method: str
        """

        self._webhook_method = webhook_method
