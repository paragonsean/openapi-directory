# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.binding_enum_binding_type import BindingEnumBindingType
import re
from openapi_server import util


class IpMessagingV2ServiceBinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid: str=None, binding_type: BindingEnumBindingType=None, credential_sid: str=None, date_created: datetime=None, date_updated: datetime=None, endpoint: str=None, identity: str=None, links: object=None, message_types: List[str]=None, service_sid: str=None, sid: str=None, url: str=None):
        """IpMessagingV2ServiceBinding - a model defined in OpenAPI

        :param account_sid: The account_sid of this IpMessagingV2ServiceBinding.
        :param binding_type: The binding_type of this IpMessagingV2ServiceBinding.
        :param credential_sid: The credential_sid of this IpMessagingV2ServiceBinding.
        :param date_created: The date_created of this IpMessagingV2ServiceBinding.
        :param date_updated: The date_updated of this IpMessagingV2ServiceBinding.
        :param endpoint: The endpoint of this IpMessagingV2ServiceBinding.
        :param identity: The identity of this IpMessagingV2ServiceBinding.
        :param links: The links of this IpMessagingV2ServiceBinding.
        :param message_types: The message_types of this IpMessagingV2ServiceBinding.
        :param service_sid: The service_sid of this IpMessagingV2ServiceBinding.
        :param sid: The sid of this IpMessagingV2ServiceBinding.
        :param url: The url of this IpMessagingV2ServiceBinding.
        """
        self.openapi_types = {
            'account_sid': str,
            'binding_type': BindingEnumBindingType,
            'credential_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'endpoint': str,
            'identity': str,
            'links': object,
            'message_types': List[str],
            'service_sid': str,
            'sid': str,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'binding_type': 'binding_type',
            'credential_sid': 'credential_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'endpoint': 'endpoint',
            'identity': 'identity',
            'links': 'links',
            'message_types': 'message_types',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._binding_type = binding_type
        self._credential_sid = credential_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._endpoint = endpoint
        self._identity = identity
        self._links = links
        self._message_types = message_types
        self._service_sid = service_sid
        self._sid = sid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpMessagingV2ServiceBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ip_messaging.v2.service.binding of this IpMessagingV2ServiceBinding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self):
        """Gets the account_sid of this IpMessagingV2ServiceBinding.


        :return: The account_sid of this IpMessagingV2ServiceBinding.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid):
        """Sets the account_sid of this IpMessagingV2ServiceBinding.


        :param account_sid: The account_sid of this IpMessagingV2ServiceBinding.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")

        self._account_sid = account_sid

    @property
    def binding_type(self):
        """Gets the binding_type of this IpMessagingV2ServiceBinding.


        :return: The binding_type of this IpMessagingV2ServiceBinding.
        :rtype: BindingEnumBindingType
        """
        return self._binding_type

    @binding_type.setter
    def binding_type(self, binding_type):
        """Sets the binding_type of this IpMessagingV2ServiceBinding.


        :param binding_type: The binding_type of this IpMessagingV2ServiceBinding.
        :type binding_type: BindingEnumBindingType
        """

        self._binding_type = binding_type

    @property
    def credential_sid(self):
        """Gets the credential_sid of this IpMessagingV2ServiceBinding.


        :return: The credential_sid of this IpMessagingV2ServiceBinding.
        :rtype: str
        """
        return self._credential_sid

    @credential_sid.setter
    def credential_sid(self, credential_sid):
        """Sets the credential_sid of this IpMessagingV2ServiceBinding.


        :param credential_sid: The credential_sid of this IpMessagingV2ServiceBinding.
        :type credential_sid: str
        """
        if credential_sid is not None and len(credential_sid) > 34:
            raise ValueError("Invalid value for `credential_sid`, length must be less than or equal to `34`")
        if credential_sid is not None and len(credential_sid) < 34:
            raise ValueError("Invalid value for `credential_sid`, length must be greater than or equal to `34`")
        if credential_sid is not None and not re.search(r'^CR[0-9a-fA-F]{32}$', credential_sid):
            raise ValueError("Invalid value for `credential_sid`, must be a follow pattern or equal to `/^CR[0-9a-fA-F]{32}$/`")

        self._credential_sid = credential_sid

    @property
    def date_created(self):
        """Gets the date_created of this IpMessagingV2ServiceBinding.


        :return: The date_created of this IpMessagingV2ServiceBinding.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this IpMessagingV2ServiceBinding.


        :param date_created: The date_created of this IpMessagingV2ServiceBinding.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this IpMessagingV2ServiceBinding.


        :return: The date_updated of this IpMessagingV2ServiceBinding.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this IpMessagingV2ServiceBinding.


        :param date_updated: The date_updated of this IpMessagingV2ServiceBinding.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def endpoint(self):
        """Gets the endpoint of this IpMessagingV2ServiceBinding.


        :return: The endpoint of this IpMessagingV2ServiceBinding.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this IpMessagingV2ServiceBinding.


        :param endpoint: The endpoint of this IpMessagingV2ServiceBinding.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def identity(self):
        """Gets the identity of this IpMessagingV2ServiceBinding.


        :return: The identity of this IpMessagingV2ServiceBinding.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this IpMessagingV2ServiceBinding.


        :param identity: The identity of this IpMessagingV2ServiceBinding.
        :type identity: str
        """

        self._identity = identity

    @property
    def links(self):
        """Gets the links of this IpMessagingV2ServiceBinding.


        :return: The links of this IpMessagingV2ServiceBinding.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IpMessagingV2ServiceBinding.


        :param links: The links of this IpMessagingV2ServiceBinding.
        :type links: object
        """

        self._links = links

    @property
    def message_types(self):
        """Gets the message_types of this IpMessagingV2ServiceBinding.


        :return: The message_types of this IpMessagingV2ServiceBinding.
        :rtype: List[str]
        """
        return self._message_types

    @message_types.setter
    def message_types(self, message_types):
        """Sets the message_types of this IpMessagingV2ServiceBinding.


        :param message_types: The message_types of this IpMessagingV2ServiceBinding.
        :type message_types: List[str]
        """

        self._message_types = message_types

    @property
    def service_sid(self):
        """Gets the service_sid of this IpMessagingV2ServiceBinding.


        :return: The service_sid of this IpMessagingV2ServiceBinding.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid):
        """Sets the service_sid of this IpMessagingV2ServiceBinding.


        :param service_sid: The service_sid of this IpMessagingV2ServiceBinding.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")
        if service_sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', service_sid):
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")

        self._service_sid = service_sid

    @property
    def sid(self):
        """Gets the sid of this IpMessagingV2ServiceBinding.


        :return: The sid of this IpMessagingV2ServiceBinding.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this IpMessagingV2ServiceBinding.


        :param sid: The sid of this IpMessagingV2ServiceBinding.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")
        if sid is not None and not re.search(r'^BS[0-9a-fA-F]{32}$', sid):
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^BS[0-9a-fA-F]{32}$/`")

        self._sid = sid

    @property
    def url(self):
        """Gets the url of this IpMessagingV2ServiceBinding.


        :return: The url of this IpMessagingV2ServiceBinding.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IpMessagingV2ServiceBinding.


        :param url: The url of this IpMessagingV2ServiceBinding.
        :type url: str
        """

        self._url = url
