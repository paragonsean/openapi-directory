/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerifyV2RateLimitApi_H
#define OAI_OAIVerifyV2RateLimitApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListRateLimitResponse.h"
#include "OAIVerify_v2_service_rate_limit.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerifyV2RateLimitApi : public QObject {
    Q_OBJECT

public:
    OAIVerifyV2RateLimitApi(const int timeOut = 0);
    ~OAIVerifyV2RateLimitApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  unique_name QString [required]
    * @param[in]  description QString [optional]
    */
    virtual void createRateLimit(const QString &service_sid, const QString &unique_name, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteRateLimit(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchRateLimit(const QString &service_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listRateLimit(const QString &service_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  description QString [optional]
    */
    virtual void updateRateLimit(const QString &service_sid, const QString &sid, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRateLimitCallback(OAIHttpRequestWorker *worker);
    void deleteRateLimitCallback(OAIHttpRequestWorker *worker);
    void fetchRateLimitCallback(OAIHttpRequestWorker *worker);
    void listRateLimitCallback(OAIHttpRequestWorker *worker);
    void updateRateLimitCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRateLimitSignal(OAIVerify_v2_service_rate_limit summary);
    void deleteRateLimitSignal();
    void fetchRateLimitSignal(OAIVerify_v2_service_rate_limit summary);
    void listRateLimitSignal(OAIListRateLimitResponse summary);
    void updateRateLimitSignal(OAIVerify_v2_service_rate_limit summary);


    void createRateLimitSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_rate_limit summary);
    void deleteRateLimitSignalFull(OAIHttpRequestWorker *worker);
    void fetchRateLimitSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_rate_limit summary);
    void listRateLimitSignalFull(OAIHttpRequestWorker *worker, OAIListRateLimitResponse summary);
    void updateRateLimitSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_rate_limit summary);

    Q_DECL_DEPRECATED_X("Use createRateLimitSignalError() instead")
    void createRateLimitSignalE(OAIVerify_v2_service_rate_limit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRateLimitSignalError(OAIVerify_v2_service_rate_limit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRateLimitSignalError() instead")
    void deleteRateLimitSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRateLimitSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRateLimitSignalError() instead")
    void fetchRateLimitSignalE(OAIVerify_v2_service_rate_limit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRateLimitSignalError(OAIVerify_v2_service_rate_limit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRateLimitSignalError() instead")
    void listRateLimitSignalE(OAIListRateLimitResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRateLimitSignalError(OAIListRateLimitResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRateLimitSignalError() instead")
    void updateRateLimitSignalE(OAIVerify_v2_service_rate_limit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRateLimitSignalError(OAIVerify_v2_service_rate_limit summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRateLimitSignalErrorFull() instead")
    void createRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRateLimitSignalErrorFull() instead")
    void deleteRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRateLimitSignalErrorFull() instead")
    void fetchRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRateLimitSignalErrorFull() instead")
    void listRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRateLimitSignalErrorFull() instead")
    void updateRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
