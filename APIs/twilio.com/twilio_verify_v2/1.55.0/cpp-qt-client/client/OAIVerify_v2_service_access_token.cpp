/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify_v2_service_access_token.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify_v2_service_access_token::OAIVerify_v2_service_access_token(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify_v2_service_access_token::OAIVerify_v2_service_access_token() {
    this->initializeModel();
}

OAIVerify_v2_service_access_token::~OAIVerify_v2_service_access_token() {}

void OAIVerify_v2_service_access_token::initializeModel() {

    m_account_sid_isSet = false;
    m_account_sid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_entity_identity_isSet = false;
    m_entity_identity_isValid = false;

    m_factor_friendly_name_isSet = false;
    m_factor_friendly_name_isValid = false;

    m_factor_type_isSet = false;
    m_factor_type_isValid = false;

    m_service_sid_isSet = false;
    m_service_sid_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVerify_v2_service_access_token::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify_v2_service_access_token::fromJsonObject(QJsonObject json) {

    m_account_sid_isValid = ::OpenAPI::fromJsonValue(m_account_sid, json[QString("account_sid")]);
    m_account_sid_isSet = !json[QString("account_sid")].isNull() && m_account_sid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_entity_identity_isValid = ::OpenAPI::fromJsonValue(m_entity_identity, json[QString("entity_identity")]);
    m_entity_identity_isSet = !json[QString("entity_identity")].isNull() && m_entity_identity_isValid;

    m_factor_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_factor_friendly_name, json[QString("factor_friendly_name")]);
    m_factor_friendly_name_isSet = !json[QString("factor_friendly_name")].isNull() && m_factor_friendly_name_isValid;

    m_factor_type_isValid = ::OpenAPI::fromJsonValue(m_factor_type, json[QString("factor_type")]);
    m_factor_type_isSet = !json[QString("factor_type")].isNull() && m_factor_type_isValid;

    m_service_sid_isValid = ::OpenAPI::fromJsonValue(m_service_sid, json[QString("service_sid")]);
    m_service_sid_isSet = !json[QString("service_sid")].isNull() && m_service_sid_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("sid")]);
    m_sid_isSet = !json[QString("sid")].isNull() && m_sid_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVerify_v2_service_access_token::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify_v2_service_access_token::asJsonObject() const {
    QJsonObject obj;
    if (m_account_sid_isSet) {
        obj.insert(QString("account_sid"), ::OpenAPI::toJsonValue(m_account_sid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_entity_identity_isSet) {
        obj.insert(QString("entity_identity"), ::OpenAPI::toJsonValue(m_entity_identity));
    }
    if (m_factor_friendly_name_isSet) {
        obj.insert(QString("factor_friendly_name"), ::OpenAPI::toJsonValue(m_factor_friendly_name));
    }
    if (m_factor_type.isSet()) {
        obj.insert(QString("factor_type"), ::OpenAPI::toJsonValue(m_factor_type));
    }
    if (m_service_sid_isSet) {
        obj.insert(QString("service_sid"), ::OpenAPI::toJsonValue(m_service_sid));
    }
    if (m_sid_isSet) {
        obj.insert(QString("sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVerify_v2_service_access_token::getAccountSid() const {
    return m_account_sid;
}
void OAIVerify_v2_service_access_token::setAccountSid(const QString &account_sid) {
    m_account_sid = account_sid;
    m_account_sid_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_account_sid_Set() const{
    return m_account_sid_isSet;
}

bool OAIVerify_v2_service_access_token::is_account_sid_Valid() const{
    return m_account_sid_isValid;
}

QDateTime OAIVerify_v2_service_access_token::getDateCreated() const {
    return m_date_created;
}
void OAIVerify_v2_service_access_token::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVerify_v2_service_access_token::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIVerify_v2_service_access_token::getEntityIdentity() const {
    return m_entity_identity;
}
void OAIVerify_v2_service_access_token::setEntityIdentity(const QString &entity_identity) {
    m_entity_identity = entity_identity;
    m_entity_identity_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_entity_identity_Set() const{
    return m_entity_identity_isSet;
}

bool OAIVerify_v2_service_access_token::is_entity_identity_Valid() const{
    return m_entity_identity_isValid;
}

QString OAIVerify_v2_service_access_token::getFactorFriendlyName() const {
    return m_factor_friendly_name;
}
void OAIVerify_v2_service_access_token::setFactorFriendlyName(const QString &factor_friendly_name) {
    m_factor_friendly_name = factor_friendly_name;
    m_factor_friendly_name_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_factor_friendly_name_Set() const{
    return m_factor_friendly_name_isSet;
}

bool OAIVerify_v2_service_access_token::is_factor_friendly_name_Valid() const{
    return m_factor_friendly_name_isValid;
}

OAIAccess_token_enum_factor_types OAIVerify_v2_service_access_token::getFactorType() const {
    return m_factor_type;
}
void OAIVerify_v2_service_access_token::setFactorType(const OAIAccess_token_enum_factor_types &factor_type) {
    m_factor_type = factor_type;
    m_factor_type_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_factor_type_Set() const{
    return m_factor_type_isSet;
}

bool OAIVerify_v2_service_access_token::is_factor_type_Valid() const{
    return m_factor_type_isValid;
}

QString OAIVerify_v2_service_access_token::getServiceSid() const {
    return m_service_sid;
}
void OAIVerify_v2_service_access_token::setServiceSid(const QString &service_sid) {
    m_service_sid = service_sid;
    m_service_sid_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_service_sid_Set() const{
    return m_service_sid_isSet;
}

bool OAIVerify_v2_service_access_token::is_service_sid_Valid() const{
    return m_service_sid_isValid;
}

QString OAIVerify_v2_service_access_token::getSid() const {
    return m_sid;
}
void OAIVerify_v2_service_access_token::setSid(const QString &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAIVerify_v2_service_access_token::is_sid_Valid() const{
    return m_sid_isValid;
}

QString OAIVerify_v2_service_access_token::getToken() const {
    return m_token;
}
void OAIVerify_v2_service_access_token::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_token_Set() const{
    return m_token_isSet;
}

bool OAIVerify_v2_service_access_token::is_token_Valid() const{
    return m_token_isValid;
}

qint32 OAIVerify_v2_service_access_token::getTtl() const {
    return m_ttl;
}
void OAIVerify_v2_service_access_token::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIVerify_v2_service_access_token::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIVerify_v2_service_access_token::getUrl() const {
    return m_url;
}
void OAIVerify_v2_service_access_token::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVerify_v2_service_access_token::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVerify_v2_service_access_token::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVerify_v2_service_access_token::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factor_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factor_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify_v2_service_access_token::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
