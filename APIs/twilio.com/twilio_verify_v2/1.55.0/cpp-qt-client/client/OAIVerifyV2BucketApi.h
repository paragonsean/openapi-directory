/**
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.55.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerifyV2BucketApi_H
#define OAI_OAIVerifyV2BucketApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListBucketResponse.h"
#include "OAIVerify_v2_service_rate_limit_bucket.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerifyV2BucketApi : public QObject {
    Q_OBJECT

public:
    OAIVerifyV2BucketApi(const int timeOut = 0);
    ~OAIVerifyV2BucketApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  rate_limit_sid QString [required]
    * @param[in]  interval qint32 [required]
    * @param[in]  max qint32 [required]
    */
    virtual void createBucket(const QString &service_sid, const QString &rate_limit_sid, const qint32 &interval, const qint32 &max);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  rate_limit_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void deleteBucket(const QString &service_sid, const QString &rate_limit_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  rate_limit_sid QString [required]
    * @param[in]  sid QString [required]
    */
    virtual void fetchBucket(const QString &service_sid, const QString &rate_limit_sid, const QString &sid);

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  rate_limit_sid QString [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void listBucket(const QString &service_sid, const QString &rate_limit_sid, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_sid QString [required]
    * @param[in]  rate_limit_sid QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  interval qint32 [optional]
    * @param[in]  max qint32 [optional]
    */
    virtual void updateBucket(const QString &service_sid, const QString &rate_limit_sid, const QString &sid, const ::OpenAPI::OptionalParam<qint32> &interval = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBucketCallback(OAIHttpRequestWorker *worker);
    void deleteBucketCallback(OAIHttpRequestWorker *worker);
    void fetchBucketCallback(OAIHttpRequestWorker *worker);
    void listBucketCallback(OAIHttpRequestWorker *worker);
    void updateBucketCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBucketSignal(OAIVerify_v2_service_rate_limit_bucket summary);
    void deleteBucketSignal();
    void fetchBucketSignal(OAIVerify_v2_service_rate_limit_bucket summary);
    void listBucketSignal(OAIListBucketResponse summary);
    void updateBucketSignal(OAIVerify_v2_service_rate_limit_bucket summary);


    void createBucketSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_rate_limit_bucket summary);
    void deleteBucketSignalFull(OAIHttpRequestWorker *worker);
    void fetchBucketSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_rate_limit_bucket summary);
    void listBucketSignalFull(OAIHttpRequestWorker *worker, OAIListBucketResponse summary);
    void updateBucketSignalFull(OAIHttpRequestWorker *worker, OAIVerify_v2_service_rate_limit_bucket summary);

    Q_DECL_DEPRECATED_X("Use createBucketSignalError() instead")
    void createBucketSignalE(OAIVerify_v2_service_rate_limit_bucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBucketSignalError(OAIVerify_v2_service_rate_limit_bucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketSignalError() instead")
    void deleteBucketSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchBucketSignalError() instead")
    void fetchBucketSignalE(OAIVerify_v2_service_rate_limit_bucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchBucketSignalError(OAIVerify_v2_service_rate_limit_bucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBucketSignalError() instead")
    void listBucketSignalE(OAIListBucketResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBucketSignalError(OAIListBucketResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBucketSignalError() instead")
    void updateBucketSignalE(OAIVerify_v2_service_rate_limit_bucket summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBucketSignalError(OAIVerify_v2_service_rate_limit_bucket summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBucketSignalErrorFull() instead")
    void createBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketSignalErrorFull() instead")
    void deleteBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchBucketSignalErrorFull() instead")
    void fetchBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBucketSignalErrorFull() instead")
    void listBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBucketSignalErrorFull() instead")
    void updateBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
